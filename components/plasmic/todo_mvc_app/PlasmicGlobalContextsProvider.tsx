// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC

import * as React from "react";
import { hasVariant, ensureGlobalVariants } from "@plasmicapp/react-web";
import { Fragment } from "@/fragment/fragment"; // plasmic-import: ndlOltyewsQb/codeComponent
import { GrowthBook } from "@/fragment/growthbook"; // plasmic-import: EEWwb4qBFl4l/codeComponent
import { Splunk } from "@/fragment/splunk"; // plasmic-import: lER0gVvAHk4k/codeComponent
import { EmbedCss } from "@plasmicpkgs/plasmic-embed-css";
import { AntdConfigProvider } from "@plasmicpkgs/antd5/skinny/registerConfigProvider";
import { CmsCredentialsProvider } from "@plasmicpkgs/plasmic-cms";

export interface GlobalContextsProviderProps {
  children?: React.ReactElement;
  fragmentProps?: Partial<
    Omit<React.ComponentProps<typeof Fragment>, "children">
  >;
  growthBookProps?: Partial<
    Omit<React.ComponentProps<typeof GrowthBook>, "children">
  >;
  splunkProps?: Partial<Omit<React.ComponentProps<typeof Splunk>, "children">>;
  embedCssProps?: Partial<
    Omit<React.ComponentProps<typeof EmbedCss>, "children">
  >;
  antdConfigProviderProps?: Partial<
    Omit<React.ComponentProps<typeof AntdConfigProvider>, "children">
  >;
  cmsCredentialsProviderProps?: Partial<
    Omit<React.ComponentProps<typeof CmsCredentialsProvider>, "children">
  >;
}

export default function GlobalContextsProvider(
  props: GlobalContextsProviderProps
) {
  const {
    children,
    fragmentProps,
    growthBookProps,
    splunkProps,
    embedCssProps,
    antdConfigProviderProps,
    cmsCredentialsProviderProps
  } = props;

  return (
    <Fragment
      {...fragmentProps}
      apiConfig={
        fragmentProps && "apiConfig" in fragmentProps
          ? fragmentProps.apiConfig!
          : undefined
      }
      previewApiConfig={
        fragmentProps && "previewApiConfig" in fragmentProps
          ? fragmentProps.previewApiConfig!
          : undefined
      }
      primaryColor={
        fragmentProps && "primaryColor" in fragmentProps
          ? fragmentProps.primaryColor!
          : "#000000"
      }
      rtl={
        fragmentProps && "rtl" in fragmentProps ? fragmentProps.rtl! : undefined
      }
    >
      <GrowthBook
        {...growthBookProps}
        apiHost={
          growthBookProps && "apiHost" in growthBookProps
            ? growthBookProps.apiHost!
            : undefined
        }
        clientKey={
          growthBookProps && "clientKey" in growthBookProps
            ? growthBookProps.clientKey!
            : undefined
        }
        previewAttributes={
          growthBookProps && "previewAttributes" in growthBookProps
            ? growthBookProps.previewAttributes!
            : undefined
        }
      >
        <Splunk
          {...splunkProps}
          defaultApiHost={
            splunkProps && "defaultApiHost" in splunkProps
              ? splunkProps.defaultApiHost!
              : undefined
          }
          defaultApiKey={
            splunkProps && "defaultApiKey" in splunkProps
              ? splunkProps.defaultApiKey!
              : undefined
          }
        >
          <EmbedCss
            {...embedCssProps}
            css={
              embedCssProps && "css" in embedCssProps
                ? embedCssProps.css!
                : "@font-face{\n  font-family: 'yekan bakh';\n  src: url('https://site-assets.plasmic.app/2cc89407b67c2a224551a27524742893.ttf');\n  font-weight: normal;\n}\n@font-face{\n  font-family: 'yekan bakh';\n  src: url('https://site-assets.plasmic.app/4951d0b74643aa85723536045c0e1258.ttf');\n  font-weight: bold;\n}\n@font-face{\n  font-family: 'yekan bakh';\n  src: url('https://site-assets.plasmic.app/953dde47a63d8fcd8933aeaa704331ef.ttf');\n  font-weight: 600;\n}\n*{\n  direction: rtl;\n  font-family: 'yekan bakh';\n  font-feature-settings: 'lnum' 0, 'tnum' 0;\n}\n    @media (max-width: 780px) {\n      body::-webkit-scrollbar {\n        display: none; \n      }\n}\n\n.negative {\n    direction: ltr;\n}\n.ant-collapse-arrow{\n      transform: scaleX(-1);\n      position: relative;\n      top: 50%;\n}\n.bioritmbox .ant-progress-inner{\n  width: 90px !important;\n  height: 90px !important;\n}\n.bioritmbox .ant-progress-text{\n      position: relative 1!important;\n      top: 75%  !important;\n      opacity: 0;\n}\n.ant-progress-text {\n    margin-inline-start: 5px !important;\n    color: rgba(221, 145, 30 , 0.88) !important;\n}\n.ant-progress-show-info .ant-progress-outer {\n    margin-right: calc(-2em + 20px) !important;\n    padding-right: calc(2em - 20px) !important;\n}\n"
            }
          >
            <AntdConfigProvider
              {...antdConfigProviderProps}
              borderRadius={
                antdConfigProviderProps &&
                "borderRadius" in antdConfigProviderProps
                  ? antdConfigProviderProps.borderRadius!
                  : 6
              }
              colorBgBase={
                antdConfigProviderProps &&
                "colorBgBase" in antdConfigProviderProps
                  ? antdConfigProviderProps.colorBgBase!
                  : "#ffffff"
              }
              colorError={
                antdConfigProviderProps &&
                "colorError" in antdConfigProviderProps
                  ? antdConfigProviderProps.colorError!
                  : "#ff4d4f"
              }
              colorInfo={
                antdConfigProviderProps &&
                "colorInfo" in antdConfigProviderProps
                  ? antdConfigProviderProps.colorInfo!
                  : "#1677ff"
              }
              colorPrimary={
                antdConfigProviderProps &&
                "colorPrimary" in antdConfigProviderProps
                  ? antdConfigProviderProps.colorPrimary!
                  : "#327CE4"
              }
              colorSuccess={
                antdConfigProviderProps &&
                "colorSuccess" in antdConfigProviderProps
                  ? antdConfigProviderProps.colorSuccess!
                  : "#52c41a"
              }
              colorWarning={
                antdConfigProviderProps &&
                "colorWarning" in antdConfigProviderProps
                  ? antdConfigProviderProps.colorWarning!
                  : "#faad14"
              }
              controlHeight={
                antdConfigProviderProps &&
                "controlHeight" in antdConfigProviderProps
                  ? antdConfigProviderProps.controlHeight!
                  : 32
              }
              defaultDark={
                antdConfigProviderProps &&
                "defaultDark" in antdConfigProviderProps
                  ? antdConfigProviderProps.defaultDark!
                  : false
              }
              lineWidth={
                antdConfigProviderProps &&
                "lineWidth" in antdConfigProviderProps
                  ? antdConfigProviderProps.lineWidth!
                  : 1
              }
              loadingText={
                antdConfigProviderProps &&
                "loadingText" in antdConfigProviderProps
                  ? antdConfigProviderProps.loadingText!
                  : undefined
              }
              removeLoading={
                antdConfigProviderProps &&
                "removeLoading" in antdConfigProviderProps
                  ? antdConfigProviderProps.removeLoading!
                  : true
              }
              sizeStep={
                antdConfigProviderProps && "sizeStep" in antdConfigProviderProps
                  ? antdConfigProviderProps.sizeStep!
                  : 4
              }
              sizeUnit={
                antdConfigProviderProps && "sizeUnit" in antdConfigProviderProps
                  ? antdConfigProviderProps.sizeUnit!
                  : 4
              }
              themeStyles={
                antdConfigProviderProps &&
                "themeStyles" in antdConfigProviderProps
                  ? antdConfigProviderProps.themeStyles!
                  : true
                  ? {
                      fontFamily: "Roboto",
                      fontSize: "14px",
                      fontWeight: "normal",
                      lineHeight: "1.5",
                      color: "#535353",
                      letterSpacing: "normal"
                    }
                  : undefined
              }
              wireframe={
                antdConfigProviderProps &&
                "wireframe" in antdConfigProviderProps
                  ? antdConfigProviderProps.wireframe!
                  : false
              }
            >
              <CmsCredentialsProvider
                {...cmsCredentialsProviderProps}
                databaseId={
                  cmsCredentialsProviderProps &&
                  "databaseId" in cmsCredentialsProviderProps
                    ? cmsCredentialsProviderProps.databaseId!
                    : undefined
                }
                databaseToken={
                  cmsCredentialsProviderProps &&
                  "databaseToken" in cmsCredentialsProviderProps
                    ? cmsCredentialsProviderProps.databaseToken!
                    : undefined
                }
                host={
                  cmsCredentialsProviderProps &&
                  "host" in cmsCredentialsProviderProps
                    ? cmsCredentialsProviderProps.host!
                    : "https://data.plasmic.app"
                }
                locale={
                  cmsCredentialsProviderProps &&
                  "locale" in cmsCredentialsProviderProps
                    ? cmsCredentialsProviderProps.locale!
                    : undefined
                }
              >
                {children}
              </CmsCredentialsProvider>
            </AntdConfigProvider>
          </EmbedCss>
        </Splunk>
      </GrowthBook>
    </Fragment>
  );
}
