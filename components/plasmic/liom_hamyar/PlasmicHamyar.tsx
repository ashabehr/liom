/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: TOxGOz1ONYz_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import Cyclebox from "../../Cyclebox"; // plasmic-import: 47YEdMGPo49m/component
import LineClomp from "../../LineClomp"; // plasmic-import: XsM8QG4wUKlk/component
import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import Countdown from "../../Countdown"; // plasmic-import: 1ruheQLCU5pc/component
import Checkbox from "../../Checkbox"; // plasmic-import: IwXl9xUH-ZMp/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Useful from "../../Useful"; // plasmic-import: 2qiQ4nSmOYBA/component
import Harmful from "../../Harmful"; // plasmic-import: XLWl_YcBNVp7/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Subscription from "../../Subscription"; // plasmic-import: RkqUeSl2AMb8/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import SlideinModal from "../../SlideinModal"; // plasmic-import: Y_p0qKIshDe1/component
import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";
import Heart from "../../Heart"; // plasmic-import: OuOhJXUpgiRr/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { PullToRefresh } from "@/components/PullToRefresh"; // plasmic-import: nYteXVWDlYDv/codeComponent
import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { DialogTitle } from "@plasmicpkgs/radix-ui";
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import MobileDialog from "../../MobileDialog"; // plasmic-import: h7ceF9lBthFF/component
import Reminder from "../../Reminder"; // plasmic-import: 3v9tn6uUJCPM/component
import ReminderSetting from "../../ReminderSetting"; // plasmic-import: VZcPBQBUFNbT/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicHamyar.module.css"; // plasmic-import: TOxGOz1ONYz_/css

import Icon271Icon from "./icons/PlasmicIcon__Icon271"; // plasmic-import: vZy72Clr16kL/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 32haUKsu6raY/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon125Icon from "./icons/PlasmicIcon__Icon125"; // plasmic-import: Q7X4s11MfEIR/icon
import Icon124Icon from "./icons/PlasmicIcon__Icon124"; // plasmic-import: PTcWiaBFyPBw/icon
import Icon126Icon from "./icons/PlasmicIcon__Icon126"; // plasmic-import: MKLSqOtGUXQ0/icon
import Icon280Icon from "./icons/PlasmicIcon__Icon280"; // plasmic-import: Q1zg9JItuLZ-/icon
import Icon278Icon from "./icons/PlasmicIcon__Icon278"; // plasmic-import: CPpihkrGcjaH/icon
import Icon281Icon from "./icons/PlasmicIcon__Icon281"; // plasmic-import: LFRF9KNEKTKm/icon
import Icon282Icon from "./icons/PlasmicIcon__Icon282"; // plasmic-import: 7X0kotbii7tD/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: H9d2pdUvXD_1/icon
import Icon272Icon from "./icons/PlasmicIcon__Icon272"; // plasmic-import: HLKs0puyq9Ra/icon
import Icon142Icon from "./icons/PlasmicIcon__Icon142"; // plasmic-import: SJsM-_NDX4Yl/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: V1QgQzmgWP2T/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: Wm-tjDMQJVfn/icon
import Icon144Icon from "./icons/PlasmicIcon__Icon144"; // plasmic-import: 1DQk0pCQHybZ/icon
import Icon287Icon from "./icons/PlasmicIcon__Icon287"; // plasmic-import: N_EGyCHRyzWI/icon
import Icon289Icon from "./icons/PlasmicIcon__Icon289"; // plasmic-import: 5yKqzc2ISZPP/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: UbRafB34Z-K-/icon
import Icon288Icon from "./icons/PlasmicIcon__Icon288"; // plasmic-import: Qcsj4FrA-OA0/icon
import Icon72Icon from "./icons/PlasmicIcon__Icon72"; // plasmic-import: QcYt9c3IQDGk/icon
import Icon234Icon from "./icons/PlasmicIcon__Icon234"; // plasmic-import: 2zsMoQ1kWX5p/icon
import Icon213Icon from "./icons/PlasmicIcon__Icon213"; // plasmic-import: mG0VeezaR1mF/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: 3iiTmpS-_IX-/icon
import Icon202Icon from "./icons/PlasmicIcon__Icon202"; // plasmic-import: lD6NOJADOGZx/icon
import Icon242Icon from "./icons/PlasmicIcon__Icon242"; // plasmic-import: rdGNS3m3zs7z/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicHamyar__VariantMembers = {
  lackOfCourseInformation: "lackOfCourseInformation";
  noPartner: "noPartner";
  reminder: "reminder";
  page: "reminder";
};
export type PlasmicHamyar__VariantsArgs = {
  lackOfCourseInformation?: SingleBooleanChoiceArg<"lackOfCourseInformation">;
  noPartner?: SingleBooleanChoiceArg<"noPartner">;
  reminder?: SingleBooleanChoiceArg<"reminder">;
  page?: SingleChoiceArg<"reminder">;
};
type VariantPropType = keyof PlasmicHamyar__VariantsArgs;
export const PlasmicHamyar__VariantProps = new Array<VariantPropType>(
  "lackOfCourseInformation",
  "noPartner",
  "reminder",
  "page"
);

export type PlasmicHamyar__ArgsType = {};
type ArgPropType = keyof PlasmicHamyar__ArgsType;
export const PlasmicHamyar__ArgProps = new Array<ArgPropType>();

export type PlasmicHamyar__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  main?: Flex__<"div">;
  telegram2?: Flex__<typeof Button>;
  nopartner?: Flex__<"div">;
  button17?: Flex__<typeof Button>;
  noData?: Flex__<"div">;
  cyclebox?: Flex__<typeof Cyclebox>;
  lineClomp?: Flex__<typeof LineClomp>;
  progress?: Flex__<typeof AntdProgress>;
  button9?: Flex__<typeof Button>;
  button14?: Flex__<typeof Button>;
  button10?: Flex__<typeof Button>;
  button15?: Flex__<typeof Button>;
  countdown4?: Flex__<typeof Countdown>;
  button21?: Flex__<typeof Button>;
  checkbox?: Flex__<typeof Checkbox>;
  reveal?: Flex__<typeof Reveal>;
  useful2?: Flex__<typeof Useful>;
  useful?: Flex__<typeof Useful>;
  harmful2?: Flex__<typeof Harmful>;
  harmful?: Flex__<typeof Harmful>;
  nopartner2?: Flex__<"div">;
  button20?: Flex__<typeof Button>;
  shopModalWeb?: Flex__<typeof AntdModal>;
  subscription?: Flex__<typeof Subscription>;
  button3?: Flex__<typeof Button>;
  modal2?: Flex__<typeof AntdModal>;
  modal3?: Flex__<typeof AntdModal>;
  ul?: Flex__<"ul">;
  shopText?: Flex__<typeof AntdModal>;
  input?: Flex__<typeof AntdInput>;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  button7?: Flex__<typeof Button>;
  shopModalMobile?: Flex__<typeof SlideinModal>;
  subscription2?: Flex__<typeof Subscription>;
  button4?: Flex__<typeof Button>;
  modal?: Flex__<typeof AntdModal>;
  input2?: Flex__<typeof AntdInput>;
  button5?: Flex__<typeof Button>;
  button6?: Flex__<typeof Button>;
  tooltip?: Flex__<typeof AntdTooltip>;
  heart?: Flex__<typeof Heart>;
  loading?: Flex__<"div">;
  favicon?: Flex__<typeof Embed>;
  pullToRefresh?: Flex__<typeof PullToRefresh>;
  button19?: Flex__<typeof Button>;
  section?: Flex__<"section">;
  embedHtml?: Flex__<typeof Embed>;
  dialog?: Flex__<typeof Dialog>;
  shopDialog?: Flex__<typeof ApiRequest>;
  dialogTitle?: Flex__<typeof DialogTitle>;
  h5?: Flex__<"h5">;
  input4?: Flex__<typeof AntdInput>;
  button12?: Flex__<typeof Button>;
  button8?: Flex__<typeof Button>;
  dialog2?: Flex__<typeof Dialog>;
  subscription3?: Flex__<typeof Subscription>;
  button11?: Flex__<typeof Button>;
  iframe?: Flex__<typeof Iframe>;
  timer?: Flex__<typeof Timer>;
  dialog3?: Flex__<typeof Dialog>;
  button13?: Flex__<typeof Button>;
  button16?: Flex__<typeof Button>;
  mobileDialog?: Flex__<typeof MobileDialog>;
  telegram?: Flex__<typeof Dialog>;
  button18?: Flex__<typeof Button>;
  remember?: Flex__<typeof ApiRequest>;
  reminder2?: Flex__<typeof Reminder>;
  reminderSetting?: Flex__<typeof ReminderSetting>;
};

export interface DefaultHamyarProps {}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamyar__RenderFunc(props: {
  variants: PlasmicHamyar__VariantsArgs;
  args: PlasmicHamyar__ArgsType;
  overrides: PlasmicHamyar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "useful[].text",
        type: "private",
        variableType: "text"
      },
      {
        path: "shopModalWeb.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "subscription[].clickitem",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "subscription[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription[].price",
        type: "private",
        variableType: "number"
      },
      {
        path: "subscription[].discount",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription[].fullprice",
        type: "private",
        variableType: "number"
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "shopModalMobile.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "itemtodo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "r",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.r;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "m",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.m;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "subscriptionCurrentIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let __plasmic_ret = undefined;
                for (let i = 0; i < $state.shop.data.result.length; i++) {
                  if ($state.shop.data.result[i].selected == 1) {
                    return i;
                  }
                }
                return __plasmic_ret;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "buyId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.shop.data.result.find(item => item.selected === 1)
                .id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "discountCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "selectedShop",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.shop.data.result.findIndex(
                item => item.selected === 1
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "subscription2[].clickitem",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "subscription2[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription2[].price",
        type: "private",
        variableType: "number"
      },
      {
        path: "subscription2[].discount",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription2[].fullprice",
        type: "private",
        variableType: "number"
      },
      {
        path: "tokenUser",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "useful[].icon",
        type: "private",
        variableType: "text"
      },
      {
        path: "visiblebox",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "harmful[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "harmful[].text",
        type: "private",
        variableType: "text"
      },
      {
        path: "harmful[].icon",
        type: "private",
        variableType: "text"
      },
      {
        path: "cyclebox.pms",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.cyclebox.cycle == "pms") {
                  return true;
                } else {
                  return false;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "cyclebox.fertility",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.cyclebox.cycle == "fertility") {
                  return true;
                } else {
                  return false;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "cyclebox.period",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.cyclebox.cycle == "blood") {
                  return true;
                } else {
                  return false;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "cyclebox.cycle",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? (() => {
                try {
                  return (() => {
                    if (
                      $state.userdata.result.user?.healthStatus?.toLowerCase() ===
                      "pregnancy"
                    ) {
                      return "Pregnancy";
                    } else {
                      return $state.userdata.result.userStatus.periodStatus;
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return (() => {
                    if (
                      $state.userdata.result.user?.healthStatus?.toLowerCase() ===
                      "pregnancy"
                    ) {
                      return "Pregnancy";
                    } else {
                      return $state.userdata.result.userStatus.periodStatus;
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "5"
      },
      {
        path: "loadingshop",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modal3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "discountBox",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "expdate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let future_date = new Date(
                  $state.userdata.result.man.hamyarTime.year,
                  $state.userdata.result.man.hamyarTime.month - 1,
                  $state.userdata.result.man.hamyarTime.day,
                  $state.userdata.result.man.hamyarTime.hour + 3,
                  $state.userdata.result.man.hamyarTime.minute,
                  $state.userdata.result.man.hamyarTime.second
                );
                return future_date.setTime(future_date.getTime());
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "guideShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let value = localStorage.getItem("guideShow");
                if (value) {
                  return false;
                } else {
                  return true;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "cyclebox.textsycle",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? (() => {
                try {
                  return (() => {
                    switch ($state.userdata.result.userStatus.periodStatus) {
                      case null:
                        return "";
                      case "fertility":
                        if (
                          $state.userdata.result.userStatus
                            .daysToEndFertility == 0
                        )
                          return "تا پایان امروز";
                        return (
                          $state.userdata.result.userStatus.daysToEndFertility +
                          " روز " +
                          "دیگر"
                        );
                      case "pms":
                        if ($state.userdata.result.userStatus.daysToEndPms == 0)
                          return "تا پایان امروز";
                        return (
                          $state.userdata.result.userStatus.daysToEndPms +
                          " روز " +
                          "دیگر"
                        );
                      case "blood":
                        if (
                          $state.userdata.result.userStatus.daysToEndPeriod == 0
                        )
                          return "تا پایان امروز";
                        return (
                          $state.userdata.result.userStatus.daysToEndPeriod +
                          " روز " +
                          "دیگر"
                        );
                      default:
                        return "-";
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return (() => {
                    switch ($state.userdata.result.userStatus.periodStatus) {
                      case null:
                        return "";
                      case "fertility":
                        if (
                          $state.userdata.result.userStatus
                            .daysToEndFertility == 0
                        )
                          return "تا پایان امروز";
                        return (
                          $state.userdata.result.userStatus.daysToEndFertility +
                          " روز " +
                          "دیگر"
                        );
                      case "pms":
                        if ($state.userdata.result.userStatus.daysToEndPms == 0)
                          return "تا پایان امروز";
                        return (
                          $state.userdata.result.userStatus.daysToEndPms +
                          " روز " +
                          "دیگر"
                        );
                      case "blood":
                        if (
                          $state.userdata.result.userStatus.daysToEndPeriod == 0
                        )
                          return "تا پایان امروز";
                        return (
                          $state.userdata.result.userStatus.daysToEndPeriod +
                          " روز " +
                          "دیگر"
                        );
                      default:
                        return "-";
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
      },
      {
        path: "checkbox[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "payam",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            pms: [
              "\u0639\u0634\u0642\u0645\u060c \u0647\u0631 \u0627\u062a\u0641\u0627\u0642\u06cc \u0628\u06cc\u0641\u062a\u0647 \u0645\u0646 \u0647\u0645\u06cc\u0634\u0647 \u067e\u06cc\u0634\u062a\u0645. \u0647\u0631 \u0648\u0642\u062a \u062d\u0633 \u06a9\u0631\u062f\u06cc \u0646\u06cc\u0627\u0632 \u062f\u0627\u0631\u06cc\u060c \u0628\u062f\u0648\u0646 \u06a9\u0647 \u0645\u0646 \u0627\u06cc\u0646\u062c\u0627\u0645 \u0648 \u0647\u06cc\u0686\u200c\u0648\u0642\u062a \u062a\u0646\u0647\u0627\u062a \u0646\u0645\u06cc\u200c\u0630\u0627\u0631\u0645. \u062a\u0648 \u0642\u0644\u0628\u0645\u06cc \u0648 \u0647\u0645\u06cc\u0634\u0647 \u0628\u0627 \u0647\u0645\u06cc\u0645! ",
              "\u0639\u0634\u0642\u0645\u060c \u0647\u0631 \u0631\u0648\u0632 \u06a9\u0647 \u0645\u06cc\u200c\u06af\u0630\u0631\u0647 \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0647\u0645\u06cc\u0634\u0647 \u062d\u0633 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u062a\u0648 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0627\u062a\u0641\u0627\u0642 \u0632\u0646\u062f\u06af\u06cc\u0645\u06cc. \u0628\u062f\u0648\u0646 \u06a9\u0647 \u062a\u0648 \u0647\u0631 \u0634\u0631\u0627\u06cc\u0637\u06cc \u0645\u0646 \u06a9\u0646\u0627\u0631\u062a\u0645 \u0648 \u0647\u06cc\u0686\u200c\u0686\u06cc\u0632\u06cc \u0646\u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0627\u06cc\u0646\u0648 \u0639\u0648\u0636 \u06a9\u0646\u0647. \u062f\u0644\u0645 \u0647\u0645\u06cc\u0634\u0647 \u067e\u06cc\u0634 \u062a\u0648\u0626\u0647! ",
              "\u0642\u0644\u0628\u0645\u060c \u0647\u0631 \u0644\u062d\u0638\u0647 \u0628\u0647 \u062a\u0648 \u0641\u06a9\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u0628\u06cc\u0634\u062a\u0631 \u0645\u06cc\u0641\u0647\u0645\u0645 \u0647\u06cc\u0686\u200c\u06a9\u0633 \u062c\u0627\u062a\u0648 \u0646\u0645\u06cc\u06af\u06cc\u0631\u0647. \u0647\u0631 \u062c\u0627 \u0628\u0631\u06cc\u060c \u0645\u0646 \u0628\u0627\u0647\u0627\u062a\u0645 \u0648 \u0647\u06cc\u0686\u200c\u0648\u0642\u062a \u062a\u0646\u0647\u0627\u062a \u0646\u0645\u06cc\u200c\u0630\u0627\u0631\u0645. \u062a\u0648 \u0647\u0645\u0647 \u062f\u0646\u06cc\u0627\u06cc \u0645\u0646\u06cc. ",
              "\u0639\u0632\u06cc\u0632 \u062f\u0644\u0645\u060c \u0647\u0631 \u0648\u0642\u062a \u062d\u0633 \u06a9\u0631\u062f\u06cc \u0632\u0646\u062f\u06af\u06cc \u0633\u062e\u062a \u0645\u06cc\u06af\u0630\u0631\u0647\u060c \u0628\u062f\u0648\u0646 \u06a9\u0647 \u0645\u0646 \u0627\u06cc\u0646\u062c\u0627\u0645. \u0628\u0627 \u0647\u0645 \u0627\u0632 \u067e\u0633 \u0647\u0645\u0647\u200c\u0686\u06cc \u0628\u0631\u0645\u06cc\u0627\u06cc\u0645\u060c \u0686\u0648\u0646 \u0647\u06cc\u0686\u200c\u0686\u06cc\u0632\u06cc \u0628\u0631\u0627\u06cc \u0645\u0646 \u0645\u0647\u0645\u200c\u062a\u0631 \u0627\u0632 \u062a\u0648 \u0646\u06cc\u0633\u062a. ",
              "\u0639\u0634\u0642\u0645\u060c \u0648\u0642\u062a\u06cc \u0628\u0647\u062a \u0641\u06a9\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0645\u060c \u0647\u0645\u0647\u200c\u0686\u06cc\u0632 \u0642\u0634\u0646\u06af\u200c\u062a\u0631 \u0645\u06cc\u200c\u0634\u0647. \u0628\u062f\u0648\u0646 \u06a9\u0647 \u0647\u0645\u06cc\u0634\u0647 \u062a\u0648 \u0642\u0644\u0628 \u0645\u0646\u06cc\u060c \u0647\u0631\u062c\u0627 \u06a9\u0647 \u0628\u0627\u0634\u06cc\u060c \u0645\u0646 \u06a9\u0646\u0627\u0631\u062a\u0645! ",
              "\u0639\u0632\u06cc\u0632\u0645\u060c \u0645\u06cc\u200c\u062f\u0648\u0646\u06cc \u06a9\u0647 \u062a\u0648 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0628\u062e\u0634 \u0632\u0646\u062f\u06af\u06cc \u0645\u0646\u06cc. \u0647\u0631 \u0644\u062d\u0638\u0647\u200c\u0627\u06cc \u06a9\u0647 \u0628\u0627 \u062a\u0648\u0627\u0645\u060c \u0645\u062b\u0644 \u06cc\u06a9 \u0631\u0648\u06cc\u0627\u0633\u062a \u0648 \u062f\u0644\u0645 \u0645\u06cc\u200c\u062e\u0648\u0627\u062f \u0647\u06cc\u0686\u200c\u0648\u0642\u062a \u062a\u0645\u0648\u0645 \u0646\u0634\u0647. "
            ]
          },
          {
            blood: [
              "\u0639\u0634\u0642\u0645\u060c \u062a\u0648 \u0645\u062b\u0644 \u062e\u0648\u0646 \u062a\u0648\u06cc \u0631\u06af\u0627\u0645\u06cc. \u0628\u062f\u0648\u0646 \u062a\u0648 \u0632\u0646\u062f\u06af\u06cc \u0628\u0631\u0627\u0645 \u0645\u0639\u0646\u06cc \u0646\u062f\u0627\u0631\u0647. \u0644\u062d\u0638\u0647 \u0644\u062d\u0638\u0647 \u0628\u0627 \u062a\u0648 \u0628\u0648\u062f\u0646\u060c \u0645\u062b\u0644 \u0631\u0648\u06cc\u0627\u0633\u062a! ",
              "\u0646\u0641\u0633\u0645\u060c \u0647\u0631 \u0631\u0648\u0632 \u0628\u06cc\u0634\u062a\u0631 \u0639\u0627\u0634\u0642\u062a \u0645\u06cc\u200c\u0634\u0645. \u062a\u0648 \u0646\u0647 \u062a\u0646\u0647\u0627 \u0639\u0634\u0642 \u0645\u0646\u06cc\u060c \u0628\u0647\u062a\u0631\u06cc\u0646 \u062f\u0648\u0633\u062a \u0645\u0646\u0645 \u0647\u0633\u062a\u06cc. \u0646\u0645\u06cc\u200c\u062a\u0648\u0646\u0645 \u062a\u0635\u0648\u0631 \u06a9\u0646\u0645 \u0628\u062f\u0648\u0646 \u062a\u0648 \u0686\u0637\u0648\u0631 \u0645\u06cc\u200c\u06af\u0630\u0631\u0647. ",
              "\u0639\u0645\u0631\u0645\u060c \u0628\u0627 \u062a\u0648 \u0632\u0646\u062f\u06af\u06cc \u0632\u06cc\u0628\u0627\u0633\u062a. \u0686\u0648\u0646 \u0645\u06cc\u062a\u0648\u0646\u0645 \u0647\u0631 \u0631\u0648\u0632 \u062e\u0648\u062f\u0645\u0648 \u062a\u0648 \u0686\u0634\u0645\u0627\u062a \u0628\u0628\u06cc\u0646\u0645. ",
              "\u0642\u0644\u0628\u0645\u060c \u062a\u0648 \u0645\u062b\u0644 \u0646\u0648\u0631 \u062a\u0648\u06cc \u0632\u0646\u062f\u06af\u06cc\u0645 \u0645\u06cc\u200c\u062f\u0631\u062e\u0634\u06cc. \u0645\u06cc\u200c\u062f\u0648\u0646\u0645 \u06a9\u0647 \u0628\u0627 \u062a\u0648 \u0645\u06cc\u200c\u062a\u0648\u0646\u0645 \u0627\u0632 \u067e\u0633 \u0647\u0631\u0686\u06cc\u0632\u06cc \u0628\u0631\u0628\u06cc\u0627\u0645. \u0645\u0631\u0633\u06cc \u06a9\u0646\u0627\u0631\u0645\u06cc. ",
              "\u0639\u0634\u0642\u0645\u060c \u0647\u0631 \u0628\u0627\u0631 \u0628\u0647 \u0686\u0634\u0645\u0627\u06cc \u0642\u0634\u0646\u06af\u062a \u0646\u06af\u0627\u0647 \u0645\u06cc\u200c\u06a9\u0646\u0645\u060c \u062d\u0633 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u0647\u06cc\u0686 \u0686\u06cc\u0632\u06cc \u0646\u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0645\u0627 \u0631\u0648 \u0627\u0632 \u0647\u0645 \u062c\u062f\u0627 \u06a9\u0646\u0647. \u062a\u0648 \u0647\u0645\u06cc\u0634\u0647 \u062a\u0648\u06cc \u0642\u0644\u0628 \u0645\u0646\u06cc. ",
              "\u0639\u0632\u06cc\u0632 \u062f\u0644\u0645\u060c \u062a\u0648 \u062f\u0644\u06cc\u0644 \u0644\u0628\u062e\u0646\u062f\u0647\u0627\u06cc \u0645\u0646\u06cc. \u062a\u0648 \u0645\u062b\u0644 \u06cc\u06a9 \u0631\u0627\u0632 \u0642\u0634\u0646\u06af \u062a\u0648\u06cc \u0642\u0644\u0628\u0645\u06cc \u0648 \u0647\u0631 \u0631\u0648\u0632 \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u062f\u06cc\u0631\u0648\u0632 \u0639\u0627\u0634\u0642\u062a\u0645. "
            ]
          },
          {
            white: [
              "\u062f\u0646\u06cc\u0627\u06cc \u0645\u0646\u060c \u062a\u0648 \u0631\u0648 \u062e\u06cc\u0644\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0627\u06cc\u0646\u06a9\u0647 \u0628\u062a\u0648\u0646\u0645 \u0628\u0647 \u0632\u0628\u0648\u0646 \u0628\u06cc\u0627\u0631\u0645\u060c\u062f\u0648\u0633\u062a \u062f\u0627\u0631\u0645 ...",
              "\u0639\u0634\u0642\u0645\u060c \u0648\u0642\u062a\u06cc \u0645\u06cc\u062e\u0646\u062f\u06cc \u062f\u0646\u06cc\u0627\u0645 \u067e\u0631 \u0631\u0646\u06af \u0645\u06cc\u0634\u0647 \u0648 \u063a\u0645 \u0647\u0627\u0645 \u0641\u0631\u0627\u0631\u06cc \u067e\u0633 \u0647\u0645\u06cc\u0634\u0647 \u0628\u062e\u0646\u062f. ",
              "\u062c\u0648\u0646\u0645\u060c \u062a\u0646\u0647\u0627 \u0628\u0647\u0648\u0646\u0647 \u0632\u0646\u062f\u06af\u06cc \u06a9\u0631\u062f\u0646\u0645 \u062a\u0648\u06cc\u06cc. \u0645\u0645\u0646\u0648\u0646\u0645 \u06a9\u0647 \u0647\u0633\u062a\u06cc. ",
              "\u0646\u0641\u0633\u0645\u060c \u062a\u0648 \u0647\u0645\u0648\u0646 \u06a9\u0633\u06cc \u0647\u0633\u062a\u06cc \u06a9\u0647 \u0645\u06cc\u200c\u062e\u0648\u0627\u0645 \u0647\u0645\u06cc\u0634\u0647 \u06a9\u0646\u0627\u0631\u0645 \u0628\u0627\u0634\u0647. \u0647\u0645\u06cc\u0646 \u06a9\u0647 \u062a\u0648 \u0647\u0633\u062a\u06cc \u0628\u0631\u0627\u0645 \u06a9\u0627\u0641\u06cc\u0647. ",
              "\u0639\u0634\u0642\u0645\u060c \u0648\u0642\u062a\u06cc \u06a9\u0646\u0627\u0631\u062a\u0645\u060c \u0627\u0646\u06af\u0627\u0631 \u0647\u0645\u0647 \u0686\u06cc\u0632 \u0632\u06cc\u0628\u0627\u062a\u0631 \u0645\u06cc\u0634\u0647. \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u06a9\u0644 \u062f\u0646\u06cc\u0627 \u062f\u0648\u0633\u062a \u062f\u0627\u0631\u0645. ",
              "\u0639\u0632\u06cc\u0632 \u062f\u0644\u0645\u060c \u0647\u0631 \u0631\u0648\u0632 \u06a9\u0647 \u0645\u06cc\u200c\u0628\u06cc\u0646\u0645\u062a\u060c \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0642\u0628\u0644 \u0645\u06cc\u0641\u0647\u0645\u0645 \u06a9\u0647 \u0686\u0642\u062f\u0631 \u062a\u0648 \u0632\u06cc\u0628\u0627\u06cc\u06cc. "
            ]
          }
        ]
      },
      {
        path: "p",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const whiteMessages =
                  $state.payam.find(item => item[$state.cyclebox.cycle])?.[
                    $state.cyclebox.cycle
                  ] || [];
                const randomMessage =
                  whiteMessages.length > 0
                    ? whiteMessages[
                        Math.floor(Math.random() * whiteMessages.length)
                      ]
                    : "";
                return randomMessage;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dosAndDonts",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          blood: {
            todo: [
              {
                title:
                  "\u06a9\u0645\u06a9 \u062a\u0648 \u06a9\u0627\u0631\u0627\u06cc \u062e\u0648\u0646\u0647",
                desc: "\u062f\u0631 \u062f\u0648\u0631\u0627\u0646 \u067e\u0631\u06cc\u0648\u062f\u060c \u0627\u0646\u0631\u0698\u06cc \u06a9\u0645\u062a\u0631\u06cc \u062f\u0627\u0631\u0647 \u0648 \u0645\u0645\u06a9\u0646\u0647 \u0627\u062d\u0633\u0627\u0633 \u062e\u0633\u062a\u06af\u06cc \u06a9\u0646\u0647. \u067e\u0633 \u062a\u0648 \u06a9\u0627\u0631\u0647\u0627\u06cc \u062e\u0648\u0646\u0647 \u0628\u0647\u0634 \u06a9\u0645\u06a9 \u06a9\u0646 \u062a\u0627 \u0647\u0645 \u0627\u0632 \u0644\u062d\u0627\u0638 \u0641\u06cc\u0632\u06cc\u06a9\u06cc \u0641\u0634\u0627\u0631 \u06a9\u0645\u062a\u0631\u06cc \u0631\u0648\u0634 \u0628\u0627\u0634\u0647 \u0648 \u0647\u0645 \u062d\u0633 \u06a9\u0646\u0647 \u06a9\u0647 \u062a\u0646\u0647\u0627 \u0646\u06cc\u0633\u062a.",
                icon: "\ud83e\uddf9",
                type: "menstruation"
              },
              {
                title:
                  "\u0627\u0628\u0631\u0627\u0632 \u0627\u062d\u0633\u0627\u0633\u0627\u062a",
                desc: "\u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u0646\u0648\u0633\u0627\u0646\u0627\u062a \u062e\u0644\u0642\u06cc \u0634\u062f\u06cc\u062f\u06cc \u062f\u0627\u0631\u0647 \u0648 \u0645\u0645\u06a9\u0646\u0647 \u0628\u0647 \u0645\u062d\u0628\u062a \u0648 \u062a\u0648\u062c\u0647 \u0628\u06cc\u0634\u062a\u0631\u06cc \u0646\u06cc\u0627\u0632 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u0647. \u0628\u0647\u062a\u0631\u0647 \u0628\u06cc\u0634\u062a\u0631 \u0627\u0628\u0631\u0627\u0632 \u0627\u062d\u0633\u0627\u0633\u0627\u062a \u06a9\u0646\u06cc\u060c \u062d\u0645\u0627\u06cc\u062a\u0634 \u06a9\u0646\u06cc \u0648 \u0628\u0647\u0634 \u0646\u0634\u0648\u0646 \u0628\u062f\u06cc \u06a9\u0647 \u062f\u0631\u06a9\u0634 \u0645\u06cc\u200c\u06a9\u0646\u06cc.",
                icon: "\ud83d\udc96",
                type: "menstruation"
              },
              {
                title: "\u0645\u0627\u0633\u0627\u0698",
                desc: "\u06cc\u06a9 \u0645\u0627\u0633\u0627\u0698 \u0645\u0644\u0627\u06cc\u0645 \u0645\u062e\u0635\u0648\u0635\u0627\u064b \u0628\u0631\u0627\u06cc \u06a9\u0645\u0631 \u0648 \u0634\u06a9\u0645\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u06a9\u0645\u06a9 \u0628\u0632\u0631\u06af\u06cc \u0628\u0647 \u062a\u0633\u06a9\u06cc\u0646 \u062f\u0631\u062f\u0647\u0627\u0634 \u06a9\u0646\u0647 \u0648 \u062d\u0633 \u0631\u0627\u062d\u062a\u06cc \u0628\u06cc\u0634\u062a\u0631\u06cc \u0628\u0647\u0634 \u0628\u062f\u0647.",
                icon: "\ud83d\udc86\ud83c\udffb\u200d\u2640\ufe0f",
                type: "menstruation"
              }
            ],
            notToDo: [
              {
                title:
                  "\u0627\u0646\u062a\u0642\u0627\u062f \u0627\u0632 \u062e\u0644\u0642 \u0648 \u062e\u0648",
                desc: "\u0646\u0648\u0633\u0627\u0646\u0627\u062a \u0647\u0648\u0631\u0645\u0648\u0646\u06cc \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0628\u0627\u0639\u062b \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u062e\u0644\u0642\u06cc \u0645\u06cc\u200c\u0634\u0647. \u0627\u06af\u0631 \u0645\u06cc\u200c\u0628\u06cc\u0646\u06cc \u06a9\u0647 \u0639\u0635\u0628\u06cc \u06cc\u0627 \u06a9\u0645\u200c\u062d\u0648\u0635\u0644\u0647 \u0634\u062f\u0647\u060c \u0627\u0632\u0634 \u0627\u0646\u062a\u0642\u0627\u062f \u0646\u06a9\u0646 \u0648 \u0633\u0639\u06cc \u06a9\u0646 \u0634\u0631\u0627\u06cc\u0637 \u0631\u0648 \u062f\u0631\u06a9 \u06a9\u0646\u06cc.",
                icon: "\ud83d\ude20",
                type: "menstruation"
              },
              {
                title:
                  "\u0628\u06cc\u200c\u062a\u0648\u062c\u0647\u06cc \u0628\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634",
                desc: "\u062f\u0631 \u0627\u06cc\u0646 \u062f\u0648\u0631\u0627\u0646\u060c \u0645\u0645\u06a9\u0646\u0647 \u062d\u0633\u0627\u0633\u200c\u062a\u0631 \u0628\u0634\u0647 \u0648 \u0628\u0647 \u062a\u0648\u062c\u0647 \u0628\u06cc\u0634\u062a\u0631\u06cc \u0646\u06cc\u0627\u0632 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u0647. \u0628\u06cc\u200c\u062a\u0648\u062c\u0647\u06cc \u0628\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u06cc\u0627 \u0646\u0627\u062f\u06cc\u062f\u0647 \u06af\u0631\u0641\u062a\u0646 \u0646\u06cc\u0627\u0632\u0647\u0627\u0634 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0628\u0627\u0639\u062b \u062f\u0644\u062e\u0648\u0631\u06cc \u0648 \u0627\u062d\u0633\u0627\u0633 \u062a\u0646\u0647\u0627\u06cc\u06cc \u0628\u0634\u0647.",
                icon: "\ud83d\ude47\ud83c\udffb\u200d\u2640\ufe0f",
                type: "menstruation"
              },
              {
                title:
                  "\u0628\u0631\u06cc\u062f\u0646 \u0627\u0631\u062a\u0628\u0627\u0637",
                desc: "\u0642\u0637\u0639 \u06a9\u0631\u062f\u0646 \u0627\u0631\u062a\u0628\u0627\u0637 \u06cc\u0627 \u0641\u0627\u0635\u0644\u0647 \u06af\u0631\u0641\u062a\u0646 \u0627\u0632\u0634\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0628\u0627\u0639\u062b \u0628\u0634\u0647 \u062d\u0633 \u06a9\u0646\u0647 \u062a\u0646\u0647\u0627\u0633\u062a \u0648 \u0627\u0632 \u062d\u0645\u0627\u06cc\u062a \u062a\u0648 \u0645\u062d\u0631\u0648\u0645 \u0634\u062f\u0647. \u0628\u0647\u062a\u0631\u0647 \u0627\u0631\u062a\u0628\u0627\u0637\u062a \u0631\u0648 \u062d\u0641\u0638 \u06a9\u0646\u06cc \u0648 \u0647\u0645\u0631\u0627\u0647\u0634 \u0628\u0627\u0634\u06cc.",
                icon: "\ud83d\ude45\ud83c\udffb\u200d\u2642\ufe0f",
                type: "menstruation"
              }
            ]
          },
          pms: {
            todo: [
              {
                title: "\u0635\u0628\u0648\u0631 \u0628\u0648\u062f\u0646",
                desc: "\u062a\u0648 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u06a9\u0645\u06cc \u0635\u0628\u0648\u0631 \u0628\u0627\u0634. \u0645\u0645\u06a9\u0646\u0647 \u067e\u0627\u0631\u062a\u0646\u0631\u062a \u0628\u0627 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0647\u0648\u0631\u0645\u0648\u0646\u06cc \u0648 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u06cc \u062f\u0633\u062a \u0648 \u067e\u0646\u062c\u0647 \u0646\u0631\u0645 \u06a9\u0646\u0647. \u0628\u0627 \u062f\u0631\u06a9 \u0648 \u062d\u0645\u0627\u06cc\u062a \u0627\u0632\u0634\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc\u062f \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0631\u0648 \u0631\u0627\u062d\u062a\u200c\u062a\u0631 \u0628\u06af\u0630\u0631\u0648\u0646\u06cc\u062f.",
                icon: "\ud83d\udc96",
                type: "pms"
              },
              {
                title:
                  "\u062d\u0645\u0627\u06cc\u062a \u0639\u0627\u0637\u0641\u06cc",
                desc: "\u062e\u06cc\u0644\u06cc \u0645\u0647\u0645\u0647 \u06a9\u0647 \u062f\u0631 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u0628\u0627\u0632\u0634 \u062d\u0645\u0627\u06cc\u062a \u0639\u0627\u0637\u0641\u06cc \u06a9\u0646\u06cc. \u0627\u0628\u0631\u0627\u0632 \u0645\u062d\u0628\u062a \u0648 \u062a\u0648\u062c\u0647 \u062a\u0648 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u062d\u0627\u0644\u0634 \u0631\u0648 \u0628\u0647\u062a\u0631 \u06a9\u0646\u0647. \u06cc\u06a9 \u06a9\u0644\u0645\u0647 \u0645\u062d\u0628\u062a\u200c\u0622\u0645\u06cc\u0632 \u06cc\u0627 \u062d\u062a\u06cc \u06cc\u06a9 \u06a9\u0627\u0631 \u06a9\u0648\u0686\u06a9 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0627\u062d\u0633\u0627\u0633 \u0627\u0645\u0646\u06cc\u062a \u0648 \u0622\u0631\u0627\u0645\u0634 \u0631\u0648 \u0628\u0631\u0627\u0634 \u0628\u0647 \u0627\u0631\u0645\u063a\u0627\u0646 \u0628\u06cc\u0627\u0631\u0647.",
                icon: "\ud83e\udd17",
                type: "pms"
              }
            ],
            notToDo: [
              {
                title: "\u0628\u062d\u062b \u0648 \u062f\u0639\u0648\u0627",
                desc: "\u062a\u0648 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u0627\u0632 \u0628\u062d\u062b \u0648 \u062f\u0639\u0648\u0627 \u062f\u0648\u0631\u06cc \u06a9\u0646. \u0627\u06cc\u0646 \u06a9\u0627\u0631 \u0641\u0642\u0637 \u0627\u0633\u062a\u0631\u0633 \u0631\u0648 \u0628\u06cc\u0634\u062a\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u0648 \u0645\u0645\u06a9\u0646\u0647 \u0628\u0647 \u0627\u062e\u062a\u0644\u0627\u0641\u0627\u062a \u0628\u06cc\u0634\u062a\u0631\u06cc \u0645\u0646\u062c\u0631 \u0628\u0634\u0647. \u0627\u06af\u0631 \u0645\u0648\u0636\u0648\u0639\u06cc \u0628\u0631\u0627\u062a \u0645\u0647\u0645\u0647\u060c \u0628\u0647\u062a\u0631\u0647 \u0628\u0647 \u0632\u0645\u0627\u0646 \u062f\u06cc\u06af\u0647\u200c\u0627\u06cc \u0645\u0648\u06a9\u0648\u0644\u0634 \u06a9\u0646\u06cc.",
                icon: "\u26a0\ufe0f",
                type: "pms"
              },
              {
                title:
                  "\u0641\u0634\u0627\u0631 \u0622\u0648\u0631\u062f\u0646",
                desc: "\u0628\u0647\u0634 \u0641\u0634\u0627\u0631 \u0646\u06cc\u0627\u0648\u0631. \u062f\u0631\u06a9 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u0648 \u0627\u06cc\u062c\u0627\u062f \u0641\u0636\u0627\u06cc\u06cc \u0622\u0631\u0627\u0645 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u062e\u06cc\u0644\u06cc \u06a9\u0645\u06a9 \u06a9\u0646\u0647. \u0627\u06af\u0631 \u067e\u0627\u0631\u062a\u0646\u0631\u062a \u0627\u062d\u0633\u0627\u0633 \u0628\u062f\u06cc \u062f\u0627\u0631\u0647\u060c \u0627\u062c\u0627\u0632\u0647 \u0628\u062f\u0647 \u06a9\u0645\u06cc \u0628\u0627 \u062e\u0648\u062f\u0634 \u062a\u0646\u0647\u0627 \u0628\u0627\u0634\u0647.",
                icon: "\ud83d\uded1",
                type: "pms"
              },
              {
                title:
                  "\u062d\u0631\u0641 \u0632\u062f\u0646 \u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0648\u0636\u0648\u0639\u0627\u062a \u0645\u0647\u0645",
                desc: "\u0628\u0647\u062a\u0631\u0647 \u0627\u0632 \u0635\u062d\u0628\u062a \u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0648\u0636\u0648\u0639\u0627\u062a \u062d\u0633\u0627\u0633 \u062f\u0648\u0631\u06cc \u06a9\u0646\u06cc. \u0645\u0645\u06a9\u0646\u0647 \u0646\u062a\u0648\u0646\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u0631\u0648 \u0628\u0647 \u062f\u0631\u0633\u062a\u06cc \u0628\u06cc\u0627\u0646 \u06a9\u0646\u0647 \u0648 \u0627\u06cc\u0646 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0628\u0627\u0639\u062b \u0633\u0648\u062a\u0641\u0627\u0647\u0645 \u0628\u0634\u0647. \u0628\u0647 \u062c\u0627\u06cc \u0627\u0648\u0646\u060c \u0645\u0648\u0636\u0648\u0639\u0627\u062a \u0633\u0628\u06a9\u200c\u062a\u0631 \u0648 \u062e\u0648\u0634\u0627\u06cc\u0646\u062f\u062a\u0631 \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646 \u062a\u0627 \u0641\u0636\u0627\u06cc \u0645\u062b\u0628\u062a\u200c\u062a\u0631\u06cc \u0627\u06cc\u062c\u0627\u062f \u0628\u0634\u0647.",
                icon: "\u274c",
                type: "pms"
              }
            ]
          },
          fertility: {
            todo: [
              {
                title:
                  "\u062d\u0645\u0627\u06cc\u062a \u0627\u0632 \u062a\u0635\u0645\u06cc\u0645\u200c\u06af\u06cc\u0631\u06cc\u200c\u0647\u0627\u06cc\u0634",
                desc: "\u0627\u06cc\u0646 \u062f\u0648\u0631\u0627\u0646 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0632\u0645\u0627\u0646 \u0628\u0631\u0627\u06cc \u062a\u0635\u0645\u06cc\u0645\u200c\u06af\u06cc\u0631\u06cc\u200c\u0647\u0627\u06cc \u0645\u0647\u0645\u0647 \u0686\u0648\u0646 \u0647\u0645\u0633\u0631\u062a \u0645\u0646\u0637\u0642\u06cc\u200c\u062a\u0631 \u0648 \u0645\u0637\u0645\u0626\u0646\u200c\u062a\u0631 \u062a\u0635\u0645\u06cc\u0645 \u0645\u06cc\u200c\u06af\u06cc\u0631\u0647. \u0627\u0632 \u0646\u0638\u0631\u0627\u062a \u0648 \u062a\u0635\u0645\u06cc\u0645\u200c\u0647\u0627\u0634 \u062d\u0645\u0627\u06cc\u062a \u06a9\u0646 \u0648 \u0628\u0647\u0634 \u0627\u0639\u062a\u0645\u0627\u062f \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634. \u0627\u06cc\u0646 \u062d\u0645\u0627\u06cc\u062a \u0627\u0639\u062a\u0645\u0627\u062f \u0628\u0647 \u0646\u0641\u0633\u0634 \u0631\u0648 \u0628\u06cc\u0634\u062a\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0647.",
                icon: "\ud83e\udde0",
                type: "ovulation"
              },
              {
                title:
                  "\u0627\u0628\u0631\u0627\u0632 \u0627\u062d\u0633\u0627\u0633\u0627\u062a \u0628\u06cc\u0634\u062a\u0631",
                desc: "\u062f\u0631 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627\u060c \u0627\u0628\u0631\u0627\u0632 \u0627\u062d\u0633\u0627\u0633\u0627\u062a \u0648 \u0645\u062d\u0628\u062a \u0628\u06cc\u0634\u062a\u0631\u06cc \u0627\u0632 \u0637\u0631\u0641 \u062a\u0648 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0631\u0627\u0628\u0637\u0647\u200c\u062a\u0648\u0646 \u0631\u0648 \u0642\u0648\u06cc\u200c\u062a\u0631 \u06a9\u0646\u0647. \u0627\u06cc\u0646 \u062f\u0648\u0631\u0627\u0646\u060c \u0647\u0645\u0633\u0631\u062a \u0627\u0632 \u0644\u062d\u0627\u0638 \u0639\u0627\u0637\u0641\u06cc \u0648 \u0627\u062d\u0633\u0627\u0633\u06cc \u067e\u0630\u06cc\u0631\u0627\u062a\u0631 \u0648 \u0642\u0648\u06cc\u200c\u062a\u0631\u0647\u060c \u067e\u0633 \u0628\u0627 \u0646\u0634\u0648\u0646 \u062f\u0627\u062f\u0646 \u0645\u062d\u0628\u062a \u0648 \u062a\u0648\u062c\u0647\u060c \u0627\u062d\u0633\u0627\u0633 \u0646\u0632\u062f\u06cc\u06a9\u06cc \u0628\u06cc\u0634\u062a\u0631\u06cc \u0627\u06cc\u062c\u0627\u062f \u06a9\u0646.",
                icon: "\ud83d\udc9e",
                type: "ovulation"
              }
            ],
            notToDo: [
              {
                title:
                  "\u0627\u06cc\u062c\u0627\u062f \u0627\u0633\u062a\u0631\u0633",
                desc: "\u062f\u0631 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u0627\u0632 \u0627\u06cc\u062c\u0627\u062f \u0645\u0648\u0642\u0639\u06cc\u062a\u200c\u0647\u0627\u06cc \u0627\u0633\u062a\u0631\u0633\u200c\u0632\u0627 \u062f\u0648\u0631\u06cc \u06a9\u0646. \u0627\u0633\u062a\u0631\u0633 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u062a\u0623\u062b\u06cc\u0631 \u0645\u0646\u0641\u06cc \u0631\u0648\u06cc \u062e\u0644\u0642 \u0648 \u062e\u0648\u06cc \u0647\u0645\u0633\u0631\u062a \u0628\u0630\u0627\u0631\u0647 \u0648 \u0627\u0632 \u0627\u0646\u0631\u0698\u06cc \u0645\u062b\u0628\u062a\u0634 \u06a9\u0645 \u06a9\u0646\u0647. \u0628\u0647 \u062c\u0627\u06cc \u0627\u0648\u0646\u060c \u0641\u0636\u0627\u06cc\u06cc \u0622\u0631\u0627\u0645 \u0648 \u067e\u0631 \u0627\u0632 \u062d\u0645\u0627\u06cc\u062a \u0627\u06cc\u062c\u0627\u062f \u06a9\u0646.",
                icon: "\ud83d\ude30",
                type: "ovulation"
              },
              {
                title:
                  "\u0646\u0627\u062f\u06cc\u062f\u0647 \u06af\u0631\u0641\u062a\u0646 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634",
                desc: "\u062f\u0631 \u0627\u06cc\u0646 \u062f\u0648\u0631\u0627\u0646\u060c \u0647\u0645\u0633\u0631\u062a \u0646\u06cc\u0627\u0632 \u062f\u0627\u0631\u0647 \u06a9\u0647 \u0628\u06cc\u0634\u062a\u0631 \u0628\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u062a\u0648\u062c\u0647 \u06a9\u0646\u06cc. \u0646\u0627\u062f\u06cc\u062f\u0647 \u06af\u0631\u0641\u062a\u0646 \u06cc\u0627 \u0628\u06cc\u200c\u062a\u0648\u062c\u0647\u06cc \u0628\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0628\u0627\u0639\u062b \u0646\u0627\u0631\u0627\u062d\u062a\u06cc \u0628\u0634\u0647. \u0628\u0627 \u0645\u062d\u0628\u062a \u0648 \u0647\u0645\u062f\u0644\u06cc \u0628\u0647\u0634 \u0646\u0634\u0648\u0646 \u0628\u062f\u0647 \u06a9\u0647 \u06a9\u0646\u0627\u0631\u0634 \u0647\u0633\u062a\u06cc \u0648 \u0628\u0647 \u062d\u0627\u0644 \u0648 \u0647\u0648\u0627\u06cc \u062f\u0631\u0648\u0646\u06cc\u200c\u0627\u0634 \u0627\u0647\u0645\u06cc\u062a \u0645\u06cc\u062f\u06cc.",
                icon: "\ud83d\udc94",
                type: "ovulation"
              }
            ]
          }
        })
      },
      {
        path: "useful2[].text",
        type: "private",
        variableType: "text"
      },
      {
        path: "useful2[].icon",
        type: "private",
        variableType: "text"
      },
      {
        path: "harmful2[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "harmful2[].text",
        type: "private",
        variableType: "text"
      },
      {
        path: "harmful2[].icon",
        type: "private",
        variableType: "text"
      },
      {
        path: "deleteDate",
        type: "private",
        variableType: "dateString",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "2024-10-24T07:00:28.998Z"
      },
      {
        path: "lackOfCourseInformation",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.lackOfCourseInformation
      },
      {
        path: "pregnancy",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return { days: 190, week: 13, months: 3 };
              }
              throw e;
            }
          })()
      },
      {
        path: "pregnancyData",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            week: "\u0627\u0648\u0644",
            height: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            weight: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            week: "\u062f\u0648\u0645",
            height: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            weight: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            week: "\u0633\u0648\u0645",
            height: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            weight: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            week: "\u0686\u0647\u0627\u0631\u0645",
            height: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            weight: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            week: "\u067e\u0646\u062c\u0645",
            height: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            weight: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            week: "\u0634\u0634\u0645",
            height: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            weight: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            week: "\u0647\u0641\u062a\u0645",
            height: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            weight: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          { week: "\u0647\u0634\u062a\u0645", height: "1.9", weight: "1" },
          { week: "\u0646\u0647\u0645", height: "2.3", weight: "2" },
          { week: "\u062f\u0647\u0645", height: "3.1", weight: "4" },
          {
            week: "\u06cc\u0627\u0632\u062f\u0647\u0645",
            height: "4.1",
            weight: "7"
          },
          {
            week: "\u062f\u0648\u0627\u0632\u062f\u0647\u0645",
            height: "5.4",
            weight: "14"
          },
          {
            week: "\u0633\u06cc\u0632\u062f\u0647\u0645",
            height: "7.4",
            weight: "23"
          },
          {
            week: "\u0686\u0647\u0627\u0631\u062f\u0647\u0645",
            height: "8.7",
            weight: "43"
          },
          {
            week: "\u067e\u0627\u0646\u0632\u062f\u0647\u0645",
            height: "10.1",
            weight: "70"
          },
          {
            week: "\u0634\u0627\u0646\u0632\u062f\u0647\u0645",
            height: "11.6",
            weight: "100"
          },
          {
            week: "\u0647\u0641\u062f\u0647\u0645",
            height: "13",
            weight: "140"
          },
          {
            week: "\u0647\u062c\u062f\u0647\u0645",
            height: "14.2",
            weight: "190"
          },
          {
            week: "\u0646\u0648\u0632\u062f\u0647\u0645",
            height: "15.3",
            weight: "240"
          },
          {
            week: "\u0628\u06cc\u0633\u062a\u0645",
            height: "25.6",
            weight: "300"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u06cc\u06a9\u0645",
            height: "26.7",
            weight: "360"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u062f\u0648\u0645",
            height: "27.8",
            weight: "430"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u0633\u0648\u0645",
            height: "28.9",
            weight: "500"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u0686\u0647\u0627\u0631\u0645",
            height: "30",
            weight: "600"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u067e\u0646\u062c\u0645",
            height: "34.6",
            weight: "660"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u0634\u0634\u0645",
            height: "35.6",
            weight: "760"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u0647\u0641\u062a\u0645",
            height: "36.6",
            weight: "875"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u0647\u0634\u062a\u0645",
            height: "37.6",
            weight: "1"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u0646\u0647\u0645",
            height: "38.6",
            weight: "1.2"
          },
          {
            week: "\u0633\u06cc\u200c\u0627\u0645",
            height: "39.9",
            weight: "1.3"
          },
          {
            week: "\u0633\u06cc \u0648 \u06cc\u06a9\u0645",
            height: "41.1",
            weight: "1.5"
          },
          {
            week: "\u0633\u06cc \u0648 \u062f\u0648\u0645",
            height: "42.4",
            weight: "1.7"
          },
          {
            week: "\u0633\u06cc \u0648 \u0633\u0648\u0645",
            height: "43.7",
            weight: "1.9"
          },
          {
            week: "\u0633\u06cc \u0648 \u0686\u0647\u0627\u0631\u0645",
            height: "45",
            weight: "2.1"
          },
          {
            week: "\u0633\u06cc \u0648 \u067e\u0646\u062c\u0645",
            height: "46.2",
            weight: "2.4"
          },
          {
            week: "\u0633\u06cc \u0648 \u0634\u0634\u0645",
            height: "47.4",
            weight: "2.6"
          },
          {
            week: "\u0633\u06cc \u0648 \u0647\u0641\u062a\u0645",
            height: "48.6",
            weight: "2.9"
          },
          {
            week: "\u0633\u06cc \u0648 \u0647\u0634\u062a\u0645",
            height: "49.8",
            weight: "3.1"
          },
          {
            week: "\u0633\u06cc \u0648 \u0646\u0647\u0645",
            height: "50.7",
            weight: "3.3"
          },
          { week: "\u0686\u0647\u0644\u0645", height: "51.2", weight: "3.5" }
        ]
      },
      {
        path: "lineClomp.line",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button9.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "button10.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "softRed"
      },
      {
        path: "countdown4.remainingSeconds",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? (() => {
                try {
                  return (() => {
                    let current_date = new Date();
                    let delta = $state.expdate;
                    return Math.floor((delta - current_date.getTime()) / 1000);
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 0;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return Math.floor(
                    (new Date($state.expdate) - new Date()) / 1000
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 0;
                  }
                  throw e;
                }
              })()
      },
      {
        path: "dialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "shopDialog.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shopDialog.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shopDialog.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button8.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "subscription3[].clickitem",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "subscription3[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription3[].price",
        type: "private",
        variableType: "number"
      },
      {
        path: "subscription3[].discount",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription3[].fullprice",
        type: "private",
        variableType: "number"
      },
      {
        path: "button11.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "intro",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.localStorage.getItem("liomHamyar_intro")
                ? false
                : true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "button7.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog3.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button13.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button14.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "button15.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "softRed"
      },
      {
        path: "harmful2[].cycle",
        type: "private",
        variableType: "text"
      },
      {
        path: "harmful[].cycle",
        type: "private",
        variableType: "text"
      },
      {
        path: "useful2[].cycle",
        type: "private",
        variableType: "text"
      },
      {
        path: "useful[].cycle",
        type: "private",
        variableType: "text"
      },
      {
        path: "userdata",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loadingPage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "shapData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "advices",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "toDos",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button16.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "noPartner",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noPartner
      },
      {
        path: "mobile",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button17.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "mobileDialog.selectShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "mobileDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "telegram.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                !window.localStorage.getItem("telegram") &&
                $state.userdata.result &&
                !$state.userdata?.result?.man?.telegramId
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "button18.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "blue"
      },
      {
        path: "button19.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "button9.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button14.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button10.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button15.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button2.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button7.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button4.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button5.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button6.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button19.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button12.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button8.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button11.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button13.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button16.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button18.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button17.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button9.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button14.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button10.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button15.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button3.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button7.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button6.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button19.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button12.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button8.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingshop;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button11.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingshop;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button13.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button16.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button18.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button17.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "telegram2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "blue"
      },
      {
        path: "telegram2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "telegram2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "shopListText",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u062f\u0639\u0648\u0627\u0647\u0627\u062a\u0648\u0646 \u062f\u0631 \u062f\u0648\u0631\u0627\u0646 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u06a9\u0645\u062a\u0631 \u0645\u06cc\u0634\u0647",
            text: "\u06a9\u0645\u06a9 \u0645\u06cc\u06a9\u0646\u06cc\u0645 \u062a\u0627 \u0634\u0631\u0648\u0639 \u0648 \u062f\u0648\u0631\u0627\u0646 \u067e\u0631\u06cc\u0648\u062f \u0647\u0645\u0633\u0631\u062a \u0631\u0648 \u067e\u06cc\u06af\u06cc\u0631\u06cc \u06a9\u0646\u06cc \u0648 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0631\u0648\u062d\u06cc \u0648 \u062c\u0633\u0645\u06cc\u0634 \u0631\u0648 \u0628\u0647\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0646\u06cc.",
            type: "relationship"
          },
          {
            title:
              "\u0631\u0627\u0628\u0637\u0647\u200c\u062a \u0631\u0648 \u0631\u0648\u0632\u0627\u0646\u0647 \u0628\u0627 \u0646\u06a9\u0627\u062a \u06a9\u0627\u0631\u0628\u0631\u062f\u06cc \u062a\u0642\u0648\u06cc\u062a \u0645\u06cc\u06a9\u0646\u06cc",
            text: "\u0647\u0645\u0647 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc\u200c\u0647\u0627 \u0648 \u0646\u06a9\u0627\u062a \u06a9\u0627\u0631\u0628\u0631\u062f\u06cc \u0631\u0648\u06cc \u067e\u06cc\u0627\u0645\u06a9 \u0648 \u062a\u0644\u06af\u0631\u0627\u0645 \u0628\u0631\u0627\u062a \u0645\u06cc\u0627\u062f \u062a\u0627 \u0647\u06cc\u0686 \u0646\u06a9\u062a\u0647\u200c\u0627\u06cc \u0627\u0632 \u062f\u0633\u062a \u0646\u0631\u0647.",
            type: "reminder"
          },
          {
            title:
              "\u0645\u0631\u0627\u0642\u0628\u062a \u0627\u0632 \u0647\u0645\u0633\u0631\u062a \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u067e\u0631\u06cc\u0648\u062f \u0622\u0633\u0627\u0646\u200c\u062a\u0631 \u0645\u06cc\u200c\u0634\u0647",
            text: "\u0634\u0631\u0648\u0639 \u067e\u0631\u06cc\u0648\u062f \u0647\u0645\u0633\u0631\u062a \u0631\u0648 \u067e\u06cc\u06af\u06cc\u0631\u06cc \u0645\u06cc\u06a9\u0646\u06cc \u0648 \u0628\u0627 \u0645\u0631\u0627\u0642\u0628\u062a \u0628\u06cc\u0634\u062a\u0631\u060c \u0645\u06cc\u062a\u0648\u0646\u06cc \u062f\u0631\u062f \u0648 \u0646\u0627\u0631\u0627\u062d\u062a\u06cc\u200c\u0647\u0627 \u0631\u0648 \u06a9\u0627\u0647\u0634 \u0628\u062f\u06cc.",
            type: "care"
          },
          {
            title:
              "\u0647\u0645\u0633\u0631\u062a \u0647\u0645 \u0628\u0647 \u062a\u0648 \u0641\u06a9\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u0648 \u062d\u0648\u0627\u0633\u0634 \u0628\u0647 \u0631\u0627\u0628\u0637\u0647\u200c\u062a\u0648\u0646\u0647",
            text: "\u067e\u06cc\u0627\u0645\u200c\u0647\u0627\u06cc\u06cc \u0647\u0645 \u0628\u0631\u0627\u06cc \u062e\u0627\u0646\u0648\u0645\u062a \u0645\u06cc\u0641\u0631\u0633\u062a\u06cc\u0645 \u06a9\u0647 \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0646\u062f \u0647\u0645\u0633\u0631\u062a \u0647\u0645 \u0628\u0647 \u062a\u0648 \u0641\u06a9\u0631 \u06a9\u0646\u0647 \u0648 \u0631\u0627\u0628\u0637\u0647 \u0634\u0627\u062f\u062a\u0631\u06cc \u0628\u0633\u0627\u0632\u06cc\u0646.",
            type: "mutual"
          },
          {
            title:
              "\u0647\u06cc\u0686 \u0631\u0648\u0632 \u0645\u0647\u0645\u06cc \u0645\u062b\u0644 \u062a\u0648\u0644\u062f\u060c \u0633\u0627\u0644\u06af\u0631\u062f \u06cc\u0627\u2026 \u06cc\u0627\u062f\u062a \u0646\u0645\u06cc\u200c\u0631\u0647",
            text: "\u062a\u0648\u0644\u062f\u060c \u0633\u0627\u0644\u06af\u0631\u062f \u0648 \u0633\u0627\u06cc\u0631 \u0645\u0646\u0627\u0633\u0628\u062a\u200c\u0647\u0627 \u0631\u0648 \u06a9\u0627\u0641\u06cc\u0647 \u062b\u0628\u062a \u06a9\u0646\u06cc \u062a\u0627 \u0628\u0631\u0627\u062a \u0686\u0646\u062f \u0631\u0648\u0632 \u0642\u0628\u0644\u0634 \u0648 \u062f\u0631 \u0647\u0645\u0627\u0646 \u0631\u0648\u0632 \u06cc\u0627\u062f\u0627\u0648\u0631\u06cc \u06a9\u0646\u06cc\u0645",
            type: "event"
          }
        ]
      },
      {
        path: "shopText.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modalshopText",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          title:
            "\u062f\u0631 \u062f\u0648\u0631\u0627\u0646 PMS \u0648 \u067e\u0631\u06cc\u0648\u062f \u0647\u0645\u0633\u0631\u062a \u062f\u0639\u0648\u0627\u0647\u0627\u062a\u0648\u0646 \u0631\u0648 \u06a9\u0645\u062a\u0631 \u0645\u06cc\u0634\u0647",
          text: "\u06a9\u0645\u06a9 \u0645\u06cc\u06a9\u0646\u06cc\u0645 \u062a\u0627 \u0634\u0631\u0648\u0639 \u0648 \u062f\u0648\u0631\u0627\u0646 \u067e\u0631\u06cc\u0648\u062f \u0647\u0645\u0633\u0631\u062a \u0631\u0648 \u067e\u06cc\u06af\u06cc\u0631\u06cc \u06a9\u0646\u06cc \u0648 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0631\u0648\u062d\u06cc \u0648 \u062c\u0633\u0645\u06cc\u0634 \u0631\u0648 \u0628\u0647\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0646\u06cc.",
          type: "relationship"
        })
      },
      {
        path: "button20.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button20.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button20.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "remember.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "remember.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "remember.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "reminder",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.reminder
      },
      {
        path: "button21.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button21.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button21.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminder2.refresh",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "page",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.page
      },
      {
        path: "reminderSetting.refresh",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHamyar.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHamyar.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHamyar.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root,
            {
              [sty.rootlackOfCourseInformation]: hasVariant(
                $state,
                "lackOfCourseInformation",
                "lackOfCourseInformation"
              ),
              [sty.rootnoPartner]: hasVariant($state, "noPartner", "noPartner"),
              [sty.rootpage_reminder]: hasVariant($state, "page", "reminder"),
              [sty.rootreminder]: hasVariant($state, "reminder", "reminder"),
              [sty.rootreminder_page_reminder]:
                hasVariant($state, "page", "reminder") &&
                hasVariant($state, "reminder", "reminder")
            }
          )}
          onLoad={async event => {
            const $steps = {};
          }}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect, {
              [sty.sideEffectnoPartner]: hasVariant(
                $state,
                "noPartner",
                "noPartner"
              )
            })}
            onMount={async () => {
              const $steps = {};

              $steps["params"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                          if ($state.paramsObject.token)
                            return ($state.tokenUser =
                              $state.paramsObject.token);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["params"] != null &&
                typeof $steps["params"] === "object" &&
                typeof $steps["params"].then === "function"
              ) {
                $steps["params"] = await $steps["params"];
              }

              $steps["clear"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["input", "value"]
                      },
                      operation: 0,
                      value: (() => {
                        const searchParams = new URLSearchParams(
                          window.location.search
                        );
                        searchParams.delete("token");
                        searchParams.delete("userId");
                        searchParams.delete("user_id");
                        const newUrl = `${
                          window.location.pathname
                        }?${searchParams.toString()}`;
                        return window.history.replaceState(null, "", newUrl);
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["clear"] != null &&
                typeof $steps["clear"] === "object" &&
                typeof $steps["clear"].then === "function"
              ) {
                $steps["clear"] = await $steps["clear"];
              }

              $steps["runCode3"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          window.sessionStorage.setItem("hamyar", "true");
                          if (
                            $state.paramsObject.token !== undefined &&
                            $state.paramsObject.token.trim() !== ""
                          ) {
                            if (!$state.paramsObject.token.startsWith("ey"))
                              $state.paramsObject.token =
                                $state.paramsObject.token.slice(6, -3);
                            var setCookie = (name, value, days) => {
                              const expires = new Date(
                                Date.now() + days * 86400000
                              ).toUTCString();
                              document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                            };
                            return setCookie(
                              "token",
                              JSON.stringify([$state.paramsObject.token]),
                              100
                            );
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode3"] != null &&
                typeof $steps["runCode3"] === "object" &&
                typeof $steps["runCode3"].then === "function"
              ) {
                $steps["runCode3"] = await $steps["runCode3"];
              }

              $steps["getCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var getCookie = name => {
                            const cookies = document.cookie.split("; ");
                            for (let cookie of cookies) {
                              const [key, value] = cookie.split("=");
                              if (key === name)
                                try {
                                  return JSON.parse(value)[0];
                                } catch {
                                  return "";
                                }
                            }
                            return "";
                          };
                          return ($state.tokenUser = getCookie("token") || "");
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getCookie"] != null &&
                typeof $steps["getCookie"] === "object" &&
                typeof $steps["getCookie"].then === "function"
              ) {
                $steps["getCookie"] = await $steps["getCookie"];
              }

              $steps["userdata"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://n8n.staas.ir/webhook/hamyar/privateCalenderV2",
                        undefined,
                        (() => {
                          try {
                            return (() => {
                              if ($state.paramsObject.r != undefined)
                                return {
                                  r: $state.paramsObject.r || "",
                                  m: $state.paramsObject.m || ""
                                };
                              else
                                return {
                                  r: $state.paramsObject.r || "",
                                  m: $state.paramsObject.m || "",
                                  token: $state.tokenUser
                                };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        { headers: { "Content-Type": "application/json" } }
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["userdata"] != null &&
                typeof $steps["userdata"] === "object" &&
                typeof $steps["userdata"].then === "function"
              ) {
                $steps["userdata"] = await $steps["userdata"];
              }

              $steps["loadChash"] =
                window.sessionStorage.getItem("cash") == "true"
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            $state.userdata = JSON.parse(
                              window.sessionStorage.getItem("userdata")
                            );
                            $state.advices = JSON.parse(
                              window.sessionStorage.getItem("advice")
                            );
                            $state.toDos = JSON.parse(
                              window.sessionStorage.getItem("todo")
                            );
                            return ($state.shapData = JSON.parse(
                              window.sessionStorage.getItem("shop")
                            ));
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["loadChash"] != null &&
                typeof $steps["loadChash"] === "object" &&
                typeof $steps["loadChash"].then === "function"
              ) {
                $steps["loadChash"] = await $steps["loadChash"];
              }

              $steps["updateUserdata"] = (
                $steps.userdata?.data?.success ? true : false
              )
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["userdata"]
                      },
                      operation: 0,
                      value: $steps.userdata.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateUserdata"] != null &&
                typeof $steps["updateUserdata"] === "object" &&
                typeof $steps["updateUserdata"].then === "function"
              ) {
                $steps["updateUserdata"] = await $steps["updateUserdata"];
              }

              $steps["updateTokenUser"] = (
                $steps.userdata?.data?.success ? true : false
              )
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["tokenUser"]
                      },
                      operation: 0,
                      value: $steps.userdata.data.result.token
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTokenUser"] != null &&
                typeof $steps["updateTokenUser"] === "object" &&
                typeof $steps["updateTokenUser"].then === "function"
              ) {
                $steps["updateTokenUser"] = await $steps["updateTokenUser"];
              }

              $steps["updateName"] = (
                $steps.userdata?.data?.result?.user?.name &&
                $steps.userdata?.data?.success
                  ? true
                  : false
              )
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["name"]
                      },
                      operation: 0,
                      value: $steps.userdata.data.result.user.name
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateName"] != null &&
                typeof $steps["updateName"] === "object" &&
                typeof $steps["updateName"].then === "function"
              ) {
                $steps["updateName"] = await $steps["updateName"];
              }

              $steps["runCode"] = (
                $steps.userdata?.data?.success ? true : false
              )
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if ($state?.tokenUser) {
                            localStorage.setItem("token", $state.tokenUser);
                            var setCookie = (name, value, days) => {
                              const expires = new Date(
                                Date.now() + days * 86400000
                              ).toUTCString();
                              document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax  `;
                            };
                            setCookie(
                              "token",
                              JSON.stringify([$state.tokenUser]),
                              100
                            );
                          }
                          if (
                            $state?.paramsObject &&
                            $state?.userdata?.result
                          ) {
                            $state.userdata.result["r"] = $state.paramsObject.r;
                            $state.userdata.result["m"] = $state.paramsObject.m;
                            localStorage.setItem(
                              "userinfo",
                              JSON.stringify($state.userdata.result)
                            );
                          }
                          if ($steps?.userdata?.data?.result?.man?.birthDate) {
                            return window.sessionStorage.setItem(
                              "birthDate",
                              JSON.stringify(
                                $steps.userdata.data.result.man.birthDate
                              )
                            );
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateDeleteDate"] = (
                $steps.userdata?.data?.result?.userStatus?.periodStatus
                  ? true
                  : false
              )
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["deleteDate"]
                      },
                      operation: 0,
                      value: (() => {
                        switch (
                          $steps.userdata.data.result.userStatus.periodStatus
                        ) {
                          case null:
                            return "";
                          case "fertility":
                            return $steps.userdata.data.result.userStatus
                              .fertilityEnd;
                          case "pms":
                            return $steps.userdata.data.result.userStatus
                              .pmsEnd;
                          case "blood":
                            return $steps.userdata.data.result.userStatus
                              .periodEnd;
                          case "white":
                            if (
                              new Date(
                                $steps.userdata.data.result.userStatus.fertilityStart
                              ) > new Date()
                            )
                              return ($state.deleteDate =
                                $steps.userdata.data.result.userStatus.fertilityStart);
                            else
                              return ($state.deleteDate =
                                $steps.userdata.data.result.userStatus.pmsStart);
                          default:
                            return "-";
                        }
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDeleteDate"] != null &&
                typeof $steps["updateDeleteDate"] === "object" &&
                typeof $steps["updateDeleteDate"].then === "function"
              ) {
                $steps["updateDeleteDate"] = await $steps["updateDeleteDate"];
              }

              $steps["runCode2"] =
                $steps.userdata?.data?.result?.user?.healthStatus?.toLowerCase() ===
                "pregnancy"
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return fetch(
                            `https://n8n.staas.ir/webhook/status/?userId=${$state.userdata.result.user.id}`,
                            {
                              method: "GET",
                              headers: {
                                "Content-Type": "application/json",
                                Authorization:
                                  "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHAiOiJsaW9tIn0.Tuzd74LOuzwCnvvh8Wsa99DIW-NRs1LLHPhayXSZ3Wk"
                              }
                            }
                          )
                            .then(response => response.json())
                            .then(data => {
                              const dueDate = data?.[0]?.dueDate;
                              if (dueDate) {
                                let initialDate = new Date(dueDate);
                                let daysToSubtract = 280;
                                let resultDate = new Date(initialDate);
                                resultDate.setDate(
                                  resultDate.getDate() - daysToSubtract
                                );
                                let today = new Date();
                                let differenceInTime = today - resultDate;
                                let differenceInDays = Math.floor(
                                  differenceInTime / (1000 * 60 * 60 * 24)
                                );
                                let daysRemaining =
                                  parseInt(280 - differenceInDays) - 1;
                                let weeksPregnant =
                                  parseInt((differenceInDays + 1) / 7) === 0
                                    ? 1
                                    : parseInt((differenceInDays + 1) / 7) + 1;
                                let monthsPregnant = parseInt(
                                  (weeksPregnant / 4).toString().substring(0, 1)
                                );
                                $state.pregnancy = {
                                  days: daysRemaining,
                                  week: weeksPregnant,
                                  months: monthsPregnant
                                };
                              } else {
                                console.log("تاریخ زایمان در دسترس نیست.");
                              }
                            })
                            .catch(error => console.error("Error:", error));
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }

              $steps["variant"] =
                $state.userdata?.result?.user?.name &&
                !$state.userdata?.result?.userStatus?.periodStatus &&
                $steps.userdata?.data?.result?.user?.healthStatus?.toLowerCase() !=
                  "pregnancy"
                  ? (() => {
                      const actionArgs = {
                        vgroup: "lackOfCourseInformation",
                        operation: 4,
                        value: "lackOfCourseInformation"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["variant"] != null &&
                typeof $steps["variant"] === "object" &&
                typeof $steps["variant"].then === "function"
              ) {
                $steps["variant"] = await $steps["variant"];
              }

              $steps["runCode4"] =
                !$steps.userdata?.data?.result?.user &&
                $steps.userdata?.data?.result?.man
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return fetch(
                            `https://n8n.staas.ir/webhook/users/profile`,
                            {
                              method: "GET",
                              headers: {
                                "Content-Type": "application/json",
                                Authorization: $state.tokenUser
                              }
                            }
                          )
                            .then(response => response.json())
                            .then(data => {
                              const dueDate = data?.success;
                              if (dueDate) {
                                $state.mobile = data.mobile;
                              } else {
                                console.log("کاربر وجود ندارد.");
                              }
                            })
                            .catch(error => console.error("Error:", error));
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["runCode4"] != null &&
                typeof $steps["runCode4"] === "object" &&
                typeof $steps["runCode4"].then === "function"
              ) {
                $steps["runCode4"] = await $steps["runCode4"];
              }

              $steps["updateNoPartner"] =
                !$steps.userdata?.data?.result?.user &&
                $steps.userdata?.data?.result?.man
                  ? (() => {
                      const actionArgs = { vgroup: "noPartner", operation: 4 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateNoPartner"] != null &&
                typeof $steps["updateNoPartner"] === "object" &&
                typeof $steps["updateNoPartner"].then === "function"
              ) {
                $steps["updateNoPartner"] = await $steps["updateNoPartner"];
              }

              $steps["advice"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/hamyar/advice",
                        (() => {
                          try {
                            return {
                              status:
                                $state.cyclebox.cycle == "Pregnancy"
                                  ? $state.pregnancy?.week.toString()
                                  : $state.cyclebox.cycle || "white",
                              limit: 1
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["advice"] != null &&
                typeof $steps["advice"] === "object" &&
                typeof $steps["advice"].then === "function"
              ) {
                $steps["advice"] = await $steps["advice"];
              }

              $steps["updateAdvices"] = ($steps.advice?.data ? true : false)
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["advices"]
                      },
                      operation: 0,
                      value: $steps.advice.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateAdvices"] != null &&
                typeof $steps["updateAdvices"] === "object" &&
                typeof $steps["updateAdvices"].then === "function"
              ) {
                $steps["updateAdvices"] = await $steps["updateAdvices"];
              }

              $steps["todo"] = ($steps.userdata?.data?.success ? true : false)
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/hamyar/todo",
                        (() => {
                          try {
                            return {
                              status: $state.cyclebox?.cycle || "white",
                              userId: $state.userdata.result.man.id
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["todo"] != null &&
                typeof $steps["todo"] === "object" &&
                typeof $steps["todo"].then === "function"
              ) {
                $steps["todo"] = await $steps["todo"];
              }

              $steps["updateToDos"] = ($steps.todo?.data ? true : false)
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["toDos"]
                      },
                      operation: 0,
                      value: $steps.todo.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateToDos"] != null &&
                typeof $steps["updateToDos"] === "object" &&
                typeof $steps["updateToDos"].then === "function"
              ) {
                $steps["updateToDos"] = await $steps["updateToDos"];
              }

              $steps["updateLoadingPage"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["loadingPage"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateLoadingPage"] != null &&
                typeof $steps["updateLoadingPage"] === "object" &&
                typeof $steps["updateLoadingPage"].then === "function"
              ) {
                $steps["updateLoadingPage"] = await $steps["updateLoadingPage"];
              }

              $steps["stote"] = (
                $steps.userdata?.data?.success &&
                $steps.shop?.data?.success &&
                $steps.advice?.data
                  ? true
                  : false && $steps.todo?.data
                  ? true
                  : false
              )
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          window.sessionStorage.setItem("cash", "true");
                          window.sessionStorage.setItem(
                            "userdata",
                            JSON.stringify($state.userdata)
                          );
                          window.sessionStorage.setItem(
                            "advice",
                            JSON.stringify($state.advices)
                          );
                          window.sessionStorage.setItem(
                            "todo",
                            JSON.stringify($state.toDos)
                          );
                          return window.sessionStorage.setItem(
                            "shop",
                            JSON.stringify($state.shapData)
                          );
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["stote"] != null &&
                typeof $steps["stote"] === "object" &&
                typeof $steps["stote"].then === "function"
              ) {
                $steps["stote"] = await $steps["stote"];
              }

              $steps["log"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://api.liom.app/service/log",
                        undefined,
                        (() => {
                          try {
                            return {
                              userId: $state.userdata.result.man.id,
                              pageName: "mainPage",
                              action: "loadePage",
                              extraData: {
                                refCode: $state.userdata.result.r,
                                mobile: $state.userdata.result.m
                              }
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        (() => {
                          try {
                            return {
                              headers: {
                                "Content-Type": "application/json",
                                Authorization:
                                  "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                              }
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["log"] != null &&
                typeof $steps["log"] === "object" &&
                typeof $steps["log"].then === "function"
              ) {
                $steps["log"] = await $steps["log"];
              }

              $steps["shop"] = ($steps.userdata?.data?.success ? true : false)
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://n8n.staas.ir/webhook/hamyar/shop",
                        undefined,
                        (() => {
                          try {
                            return {
                              refCode: $state.userdata.result.man.refCode
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        (() => {
                          try {
                            return {
                              headers: {
                                "Content-Type": "application/json",
                                Authorization: $state.userdata.result.token
                              }
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["shop"] != null &&
                typeof $steps["shop"] === "object" &&
                typeof $steps["shop"].then === "function"
              ) {
                $steps["shop"] = await $steps["shop"];
              }

              $steps["updateShapData"] = (
                $steps.shop?.data.success ? true : false
              )
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["shapData"]
                      },
                      operation: 0,
                      value: $steps.shop.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateShapData"] != null &&
                typeof $steps["updateShapData"] === "object" &&
                typeof $steps["updateShapData"].then === "function"
              ) {
                $steps["updateShapData"] = await $steps["updateShapData"];
              }
            }}
          />

          {(
            hasVariant($state, "page", "reminder")
              ? true
              : hasVariant($state, "reminder", "reminder")
              ? true
              : hasVariant($state, "noPartner", "noPartner")
              ? true
              : (() => {
                  try {
                    return (
                      Object.keys($state.userdata).length > 0 &&
                      !$state.loadingPage
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main, {
                [sty.mainlackOfCourseInformation]: hasVariant(
                  $state,
                  "lackOfCourseInformation",
                  "lackOfCourseInformation"
                ),
                [sty.mainnoPartner]: hasVariant(
                  $state,
                  "noPartner",
                  "noPartner"
                ),
                [sty.mainpage_reminder]: hasVariant($state, "page", "reminder"),
                [sty.mainreminder]: hasVariant($state, "reminder", "reminder")
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__tNnSf, {
                  [sty.freeBoxlackOfCourseInformation__tNnSf07Srs]: hasVariant(
                    $state,
                    "lackOfCourseInformation",
                    "lackOfCourseInformation"
                  ),
                  [sty.freeBoxnoPartner__tNnSfc7PeD]: hasVariant(
                    $state,
                    "noPartner",
                    "noPartner"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__d2GZw, {
                    [sty.freeBoxlackOfCourseInformation__d2GZw07Srs]:
                      hasVariant(
                        $state,
                        "lackOfCourseInformation",
                        "lackOfCourseInformation"
                      ),
                    [sty.freeBoxnoPartner__d2GZWc7PeD]: hasVariant(
                      $state,
                      "noPartner",
                      "noPartner"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vjsSc, {
                      [sty.freeBoxlackOfCourseInformation__vjsSc07Srs]:
                        hasVariant(
                          $state,
                          "lackOfCourseInformation",
                          "lackOfCourseInformation"
                        )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7ZQo
                      )}
                      onClick={async event => {
                        const $steps = {};
                      }}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              $state.userdata.result.man.name + " خوش آمدید! "
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "-";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    {(() => {
                      try {
                        return $state.userdata?.result?.man?.telegramId;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Button
                        data-plasmic-name={"telegram2"}
                        data-plasmic-override={overrides.telegram2}
                        className={classNames("__wab_instance", sty.telegram2)}
                        color={generateStateValueProp($state, [
                          "telegram2",
                          "color"
                        ])}
                        load={generateStateValueProp($state, [
                          "telegram2",
                          "load"
                        ])}
                        loading={generateStateValueProp($state, [
                          "telegram2",
                          "loading"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      window.open(
                                        "https://t.me/liomApp_bot",
                                        "_blank"
                                      );
                                      return window.localStorage.setItem(
                                        "telegram",
                                        true
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "telegram2",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "telegram2",
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadingChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "telegram2",
                              "loading"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        showStartIcon={true}
                        size={"compact"}
                        startIcon={
                          <Icon271Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bLpIn
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ovaaN
                          )}
                        >
                          {
                            "\u0648\u0631\u0648\u062f \u0628\u0647 \u0631\u0628\u0627\u062a \u062a\u0644\u06af\u0631\u0627\u0645"
                          }
                        </div>
                      </Button>
                    ) : null}
                  </div>
                </div>
                {(
                  hasVariant(globalVariants, "screen", "mobile")
                    ? (() => {
                        try {
                          return $state.guideShow;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return $state.guideShow;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ymeZw, {
                      [sty.freeBoxlackOfCourseInformation__ymeZw07Srs]:
                        hasVariant(
                          $state,
                          "lackOfCourseInformation",
                          "lackOfCourseInformation"
                        )
                    })}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobile")
                        ? true
                        : (() => {
                            try {
                              return $state.cyclebox.cycle != "white";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9KPu1,
                          {
                            [sty.freeBoxlackOfCourseInformation___9KPu107Srs]:
                              hasVariant(
                                $state,
                                "lackOfCourseInformation",
                                "lackOfCourseInformation"
                              )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lFbQr
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "با محتوای این صفحه می‌تونی بهتر تغییرات جسمی و روحی همیارت رو درک کنی و حمایتی که نیاز داره، بهش بدی. این همراهی باعث آرامش و بهبود حال هر " +
                                    ($state.cyclebox.cycle == "Pregnancy"
                                      ? "سه"
                                      : "دو") +
                                    " شما می‌شه."
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0628\u0627 \u0645\u062d\u062a\u0648\u0627\u06cc \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0647\u062a\u0631 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u062c\u0633\u0645\u06cc \u0648 \u0631\u0648\u062d\u06cc \u0647\u0645\u06cc\u0627\u0631\u062a \u0631\u0648 \u062f\u0631\u06a9 \u06a9\u0646\u06cc \u0648 \u062d\u0645\u0627\u06cc\u062a\u06cc \u06a9\u0647 \u0646\u06cc\u0627\u0632 \u062f\u0627\u0631\u0647\u060c \u0628\u0647\u0634 \u0628\u062f\u06cc. \u0627\u06cc\u0646 \u0647\u0645\u0631\u0627\u0647\u06cc \u0628\u0627\u0639\u062b \u0622\u0631\u0627\u0645\u0634 \u0648 \u0628\u0647\u0628\u0648\u062f \u062d\u0627\u0644 \u0647\u0631 \u062f\u0648\u06cc \u0634\u0645\u0627 \u0645\u06cc\u200c\u0634\u0647.";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            "\u0628\u0627 \u0645\u062d\u062a\u0648\u0627\u06cc \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0647\u062a\u0631 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u062c\u0633\u0645\u06cc \u0648 \u0631\u0648\u062d\u06cc \u0647\u0645\u06cc\u0627\u0631\u062a \u0631\u0648 \u062f\u0631\u06a9 \u06a9\u0646\u06cc \u0648 \u062d\u0645\u0627\u06cc\u062a\u06cc \u06a9\u0647 \u0646\u06cc\u0627\u0632 \u062f\u0627\u0631\u0647\u060c \u0628\u0647\u0634 \u0628\u062f\u06cc. \u0627\u06cc\u0646 \u0647\u0645\u0631\u0627\u0647\u06cc \u0628\u0627\u0639\u062b \u0622\u0631\u0627\u0645\u0634 \u0648 \u0628\u0647\u0628\u0648\u062f \u062d\u0627\u0644 \u0647\u0631 \u062f\u0648\u06cc \u0634\u0645\u0627 \u0645\u06cc\u200c\u0634\u0647."
                          )}
                        </div>
                        <Icon22Icon
                          className={classNames(projectcss.all, sty.svg__qlXq2)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateGuideShow"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["guideShow"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateGuideShow"] != null &&
                              typeof $steps["updateGuideShow"] === "object" &&
                              typeof $steps["updateGuideShow"].then ===
                                "function"
                            ) {
                              $steps["updateGuideShow"] = await $steps[
                                "updateGuideShow"
                              ];
                            }

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        return localStorage.setItem(
                                          "guideShow",
                                          "false"
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                  </div>
                ) : null}
                <div
                  className={classNames(projectcss.all, sty.freeBox__nRwCr, {
                    [sty.freeBoxlackOfCourseInformation__nRwCr07Srs]:
                      hasVariant(
                        $state,
                        "lackOfCourseInformation",
                        "lackOfCourseInformation"
                      ),
                    [sty.freeBoxnoPartner__nRwCrc7PeD]: hasVariant(
                      $state,
                      "noPartner",
                      "noPartner"
                    )
                  })}
                >
                  <div
                    data-plasmic-name={"nopartner"}
                    data-plasmic-override={overrides.nopartner}
                    className={classNames(projectcss.all, sty.nopartner, {
                      [sty.nopartnerlackOfCourseInformation]: hasVariant(
                        $state,
                        "lackOfCourseInformation",
                        "lackOfCourseInformation"
                      ),
                      [sty.nopartnerlackOfCourseInformation_noPartner]:
                        hasVariant($state, "noPartner", "noPartner") &&
                        hasVariant(
                          $state,
                          "lackOfCourseInformation",
                          "lackOfCourseInformation"
                        ),
                      [sty.nopartnernoPartner]: hasVariant(
                        $state,
                        "noPartner",
                        "noPartner"
                      )
                    })}
                  >
                    {(
                      hasVariant($state, "noPartner", "noPartner")
                        ? (() => {
                            try {
                              return $state.mobile != "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qex0W,
                          {
                            [sty.freeBoxnoPartner__qex0Wc7PeD]: hasVariant(
                              $state,
                              "noPartner",
                              "noPartner"
                            )
                          }
                        )}
                      >
                        <LottieWrapper
                          animationData={
                            hasVariant($state, "noPartner", "noPartner")
                              ? {
                                  nm: "Warning",
                                  ddd: 0,
                                  h: 114,
                                  w: 114,
                                  meta: { g: "@lottiefiles/toolkit-js 0.33.2" },
                                  layers: [
                                    {
                                      ty: 4,
                                      nm: "Layer 5 Outlines",
                                      sr: 1,
                                      st: 4.00000016292334,
                                      op: 320.000013033867,
                                      ip: 4.00000016292334,
                                      hd: false,
                                      ddd: 0,
                                      bm: 0,
                                      hasMask: false,
                                      ao: 0,
                                      ks: {
                                        a: {
                                          a: 0,
                                          k: [56.897, 56.897, 0],
                                          ix: 1
                                        },
                                        s: {
                                          a: 1,
                                          k: [
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [83, 83, 100],
                                              t: 26
                                            },
                                            {
                                              s: [100, 100, 100],
                                              t: 38.0000015477717
                                            }
                                          ],
                                          ix: 6
                                        },
                                        sk: { a: 0, k: 0 },
                                        p: {
                                          a: 0,
                                          k: [56.853, 56.618, 0],
                                          ix: 2
                                        },
                                        r: { a: 0, k: 0, ix: 10 },
                                        sa: { a: 0, k: 0 },
                                        o: {
                                          a: 1,
                                          k: [
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [0],
                                              t: 26
                                            },
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [100],
                                              t: 32
                                            },
                                            { s: [0], t: 38.0000015477717 }
                                          ],
                                          ix: 11
                                        }
                                      },
                                      ef: [],
                                      shapes: [
                                        {
                                          ty: "gr",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Group",
                                          nm: "Group 1",
                                          ix: 1,
                                          cix: 2,
                                          np: 4,
                                          it: [
                                            {
                                              ty: "sh",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Shape - Group",
                                              nm: "Path 1",
                                              ix: 1,
                                              d: 1,
                                              ks: {
                                                a: 0,
                                                k: {
                                                  c: true,
                                                  i: [
                                                    [28.397, 0],
                                                    [0, -28.397],
                                                    [-28.397, 0],
                                                    [0, 28.397]
                                                  ],
                                                  o: [
                                                    [-28.397, 0],
                                                    [0, 28.397],
                                                    [28.397, 0],
                                                    [0, -28.397]
                                                  ],
                                                  v: [
                                                    [0.001, -51.497],
                                                    [-51.498, 0.001],
                                                    [0.001, 51.497],
                                                    [51.498, 0.001]
                                                  ]
                                                },
                                                ix: 2
                                              }
                                            },
                                            {
                                              ty: "sh",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Shape - Group",
                                              nm: "Path 2",
                                              ix: 2,
                                              d: 1,
                                              ks: {
                                                a: 0,
                                                k: {
                                                  c: true,
                                                  i: [
                                                    [31.234, 0],
                                                    [0, 31.233],
                                                    [-31.236, 0],
                                                    [0, -31.237]
                                                  ],
                                                  o: [
                                                    [-31.236, 0],
                                                    [0, -31.237],
                                                    [31.234, 0],
                                                    [0, 31.233]
                                                  ],
                                                  v: [
                                                    [0.001, 56.647],
                                                    [-56.647, 0.001],
                                                    [0.001, -56.647],
                                                    [56.647, 0.001]
                                                  ]
                                                },
                                                ix: 2
                                              }
                                            },
                                            {
                                              ty: "mm",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Filter - Merge",
                                              nm: "Merge Paths 1",
                                              mm: 1
                                            },
                                            {
                                              ty: "fl",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Graphic - Fill",
                                              nm: "Fill 1",
                                              c: {
                                                a: 0,
                                                k: [0.5098, 0.3294, 0.7765],
                                                ix: 4
                                              },
                                              r: 1,
                                              o: { a: 0, k: 100, ix: 5 }
                                            },
                                            {
                                              ty: "tr",
                                              a: { a: 0, k: [0, 0], ix: 1 },
                                              s: { a: 0, k: [100, 100], ix: 3 },
                                              sk: { a: 0, k: 0, ix: 4 },
                                              p: {
                                                a: 0,
                                                k: [56.897, 56.898],
                                                ix: 2
                                              },
                                              r: { a: 0, k: 0, ix: 6 },
                                              sa: { a: 0, k: 0, ix: 5 },
                                              o: { a: 0, k: 100, ix: 7 }
                                            }
                                          ]
                                        }
                                      ],
                                      ind: 1
                                    },
                                    {
                                      ty: 4,
                                      nm: "Layer 2 Outlines",
                                      sr: 1,
                                      st: 0,
                                      op: 316.000012870944,
                                      ip: 0,
                                      hd: false,
                                      ddd: 0,
                                      bm: 0,
                                      hasMask: false,
                                      ao: 0,
                                      ks: {
                                        a: {
                                          a: 0,
                                          k: [56.897, 56.897, 0],
                                          ix: 1
                                        },
                                        s: {
                                          a: 1,
                                          k: [
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [83, 83, 100],
                                              t: 20
                                            },
                                            {
                                              s: [100, 100, 100],
                                              t: 32.0000013033867
                                            }
                                          ],
                                          ix: 6
                                        },
                                        sk: { a: 0, k: 0 },
                                        p: {
                                          a: 0,
                                          k: [56.853, 56.618, 0],
                                          ix: 2
                                        },
                                        r: { a: 0, k: 0, ix: 10 },
                                        sa: { a: 0, k: 0 },
                                        o: {
                                          a: 1,
                                          k: [
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [0],
                                              t: 20
                                            },
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [100],
                                              t: 26
                                            },
                                            { s: [0], t: 32.0000013033867 }
                                          ],
                                          ix: 11
                                        }
                                      },
                                      ef: [],
                                      shapes: [
                                        {
                                          ty: "gr",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Group",
                                          nm: "Group 1",
                                          ix: 1,
                                          cix: 2,
                                          np: 4,
                                          it: [
                                            {
                                              ty: "sh",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Shape - Group",
                                              nm: "Path 1",
                                              ix: 1,
                                              d: 1,
                                              ks: {
                                                a: 0,
                                                k: {
                                                  c: true,
                                                  i: [
                                                    [28.397, 0],
                                                    [0, -28.397],
                                                    [-28.397, 0],
                                                    [0, 28.397]
                                                  ],
                                                  o: [
                                                    [-28.397, 0],
                                                    [0, 28.397],
                                                    [28.397, 0],
                                                    [0, -28.397]
                                                  ],
                                                  v: [
                                                    [0.001, -51.497],
                                                    [-51.498, 0.001],
                                                    [0.001, 51.497],
                                                    [51.498, 0.001]
                                                  ]
                                                },
                                                ix: 2
                                              }
                                            },
                                            {
                                              ty: "sh",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Shape - Group",
                                              nm: "Path 2",
                                              ix: 2,
                                              d: 1,
                                              ks: {
                                                a: 0,
                                                k: {
                                                  c: true,
                                                  i: [
                                                    [31.234, 0],
                                                    [0, 31.233],
                                                    [-31.236, 0],
                                                    [0, -31.237]
                                                  ],
                                                  o: [
                                                    [-31.236, 0],
                                                    [0, -31.237],
                                                    [31.234, 0],
                                                    [0, 31.233]
                                                  ],
                                                  v: [
                                                    [0.001, 56.647],
                                                    [-56.647, 0.001],
                                                    [0.001, -56.647],
                                                    [56.647, 0.001]
                                                  ]
                                                },
                                                ix: 2
                                              }
                                            },
                                            {
                                              ty: "mm",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Filter - Merge",
                                              nm: "Merge Paths 1",
                                              mm: 1
                                            },
                                            {
                                              ty: "fl",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Graphic - Fill",
                                              nm: "Fill 1",
                                              c: {
                                                a: 0,
                                                k: [0.5098, 0.3294, 0.7765],
                                                ix: 4
                                              },
                                              r: 1,
                                              o: { a: 0, k: 100, ix: 5 }
                                            },
                                            {
                                              ty: "tr",
                                              a: { a: 0, k: [0, 0], ix: 1 },
                                              s: { a: 0, k: [100, 100], ix: 3 },
                                              sk: { a: 0, k: 0, ix: 4 },
                                              p: {
                                                a: 0,
                                                k: [56.897, 56.898],
                                                ix: 2
                                              },
                                              r: { a: 0, k: 0, ix: 6 },
                                              sa: { a: 0, k: 0, ix: 5 },
                                              o: { a: 0, k: 100, ix: 7 }
                                            }
                                          ]
                                        }
                                      ],
                                      ind: 2
                                    },
                                    {
                                      ty: 4,
                                      nm: "Layer 4 Outlines",
                                      sr: 1,
                                      st: 0,
                                      op: 316.000012870944,
                                      ip: 0,
                                      hd: false,
                                      ddd: 0,
                                      bm: 0,
                                      hasMask: false,
                                      ao: 0,
                                      ks: {
                                        a: {
                                          a: 0,
                                          k: [5.434, 31.682, 0],
                                          ix: 1
                                        },
                                        s: {
                                          a: 1,
                                          k: [
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [100, 100, 100],
                                              t: 0
                                            },
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [115, 90, 100],
                                              t: 4
                                            },
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [100, 112, 100],
                                              t: 8
                                            },
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [100, 112, 100],
                                              t: 11
                                            },
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [113.333, 94.333, 100],
                                              t: 13
                                            },
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [100, 112, 100],
                                              t: 15
                                            },
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [113, 95, 100],
                                              t: 20
                                            },
                                            {
                                              s: [100, 100, 100],
                                              t: 22.0000008960784
                                            }
                                          ],
                                          ix: 6
                                        },
                                        sk: { a: 0, k: 0 },
                                        p: {
                                          a: 1,
                                          k: [
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [57.387, 65.377, 0],
                                              t: 0,
                                              ti: [0, 0.835, 0],
                                              to: [0, -0.35, 0]
                                            },
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [57.387, 65.46, 0],
                                              t: 4,
                                              ti: [0, 0.609, 0],
                                              to: [0, -1.455, 0]
                                            },
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [57.387, 56.377, 0],
                                              t: 11,
                                              ti: [0, 0.609, 0],
                                              to: [0, -0.958, 0]
                                            },
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [57.387, 50.877, 0],
                                              t: 13,
                                              ti: [0, 0.609, 0],
                                              to: [0, -0.958, 0]
                                            },
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [57.387, 56.377, 0],
                                              t: 15,
                                              ti: [0, -0.417, 0],
                                              to: [0, -0.958, 0]
                                            },
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [57.387, 65.627, 0],
                                              t: 19,
                                              ti: [0, 0.958, 0],
                                              to: [0, 0.417, 0]
                                            },
                                            {
                                              s: [57.387, 65.377, 0],
                                              t: 22.0000008960784
                                            }
                                          ],
                                          ix: 2
                                        },
                                        r: { a: 0, k: 0, ix: 10 },
                                        sa: { a: 0, k: 0 },
                                        o: { a: 0, k: 100, ix: 11 }
                                      },
                                      ef: [],
                                      shapes: [
                                        {
                                          ty: "gr",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Group",
                                          nm: "Group 1",
                                          ix: 1,
                                          cix: 2,
                                          np: 2,
                                          it: [
                                            {
                                              ty: "sh",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Shape - Group",
                                              nm: "Path 1",
                                              ix: 1,
                                              d: 1,
                                              ks: {
                                                a: 0,
                                                k: {
                                                  c: true,
                                                  i: [
                                                    [2.878, 0],
                                                    [0, -2.487],
                                                    [0, 0],
                                                    [-2.951, 0],
                                                    [0, 2.426],
                                                    [0, 0]
                                                  ],
                                                  o: [
                                                    [-2.951, 0],
                                                    [0, 0],
                                                    [0, 2.49],
                                                    [2.878, 0],
                                                    [0, 0],
                                                    [0, -2.428]
                                                  ],
                                                  v: [
                                                    [0.001, -15.433],
                                                    [-5.184, -11.406],
                                                    [-5.184, 11.409],
                                                    [0.001, 15.433],
                                                    [5.184, 11.409],
                                                    [5.184, -11.406]
                                                  ]
                                                },
                                                ix: 2
                                              }
                                            },
                                            {
                                              ty: "fl",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Graphic - Fill",
                                              nm: "Fill 1",
                                              c: { a: 0, k: [1, 1, 1], ix: 4 },
                                              r: 1,
                                              o: { a: 0, k: 100, ix: 5 }
                                            },
                                            {
                                              ty: "tr",
                                              a: { a: 0, k: [0, 0], ix: 1 },
                                              s: { a: 0, k: [100, 100], ix: 3 },
                                              sk: { a: 0, k: 0, ix: 4 },
                                              p: {
                                                a: 0,
                                                k: [5.433, 15.682],
                                                ix: 2
                                              },
                                              r: { a: 0, k: 0, ix: 6 },
                                              sa: { a: 0, k: 0, ix: 5 },
                                              o: { a: 0, k: 100, ix: 7 }
                                            }
                                          ]
                                        }
                                      ],
                                      ind: 3
                                    },
                                    {
                                      ty: 4,
                                      nm: "Layer 3 Outlines",
                                      sr: 1,
                                      st: 0,
                                      op: 316.000012870944,
                                      ip: 0,
                                      hd: false,
                                      ddd: 0,
                                      bm: 0,
                                      hasMask: false,
                                      ao: 0,
                                      ks: {
                                        a: {
                                          a: 0,
                                          k: [5.516, 11.142, 0],
                                          ix: 1
                                        },
                                        s: {
                                          a: 1,
                                          k: [
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [100, 100, 100],
                                              t: 20
                                            },
                                            {
                                              o: { x: 0.167, y: 0.167 },
                                              i: { x: 0.833, y: 0.833 },
                                              s: [100, 79, 100],
                                              t: 22
                                            },
                                            {
                                              s: [100, 100, 100],
                                              t: 24.00000097754
                                            }
                                          ],
                                          ix: 6
                                        },
                                        sk: { a: 0, k: 0 },
                                        p: {
                                          a: 0,
                                          k: [57.011, 80.341, 0],
                                          ix: 2
                                        },
                                        r: { a: 0, k: 0, ix: 10 },
                                        sa: { a: 0, k: 0 },
                                        o: { a: 0, k: 100, ix: 11 }
                                      },
                                      ef: [],
                                      shapes: [
                                        {
                                          ty: "gr",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Group",
                                          nm: "Group 1",
                                          ix: 1,
                                          cix: 2,
                                          np: 2,
                                          it: [
                                            {
                                              ty: "sh",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Shape - Group",
                                              nm: "Path 1",
                                              ix: 1,
                                              d: 1,
                                              ks: {
                                                a: 0,
                                                k: {
                                                  c: true,
                                                  i: [
                                                    [2.834, 0],
                                                    [0, -2.837],
                                                    [-2.835, 0],
                                                    [0, 2.833]
                                                  ],
                                                  o: [
                                                    [-2.835, 0],
                                                    [0, 2.833],
                                                    [2.834, 0],
                                                    [0, -2.837]
                                                  ],
                                                  v: [
                                                    [0.002, -5.142],
                                                    [-5.141, 0.003],
                                                    [0.002, 5.142],
                                                    [5.141, 0.003]
                                                  ]
                                                },
                                                ix: 2
                                              }
                                            },
                                            {
                                              ty: "fl",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Graphic - Fill",
                                              nm: "Fill 1",
                                              c: { a: 0, k: [1, 1, 1], ix: 4 },
                                              r: 1,
                                              o: { a: 0, k: 100, ix: 5 }
                                            },
                                            {
                                              ty: "tr",
                                              a: { a: 0, k: [0, 0], ix: 1 },
                                              s: { a: 0, k: [100, 100], ix: 3 },
                                              sk: { a: 0, k: 0, ix: 4 },
                                              p: {
                                                a: 0,
                                                k: [5.391, 5.392],
                                                ix: 2
                                              },
                                              r: { a: 0, k: 0, ix: 6 },
                                              sa: { a: 0, k: 0, ix: 5 },
                                              o: { a: 0, k: 100, ix: 7 }
                                            }
                                          ]
                                        }
                                      ],
                                      ind: 4
                                    },
                                    {
                                      ty: 4,
                                      nm: "Layer 1 Outlines",
                                      sr: 1,
                                      st: 0,
                                      op: 316.000012870944,
                                      ip: 0,
                                      hd: false,
                                      ddd: 0,
                                      bm: 0,
                                      hasMask: false,
                                      ao: 0,
                                      ks: {
                                        a: {
                                          a: 0,
                                          k: [41.449, 41.449, 0],
                                          ix: 1
                                        },
                                        s: { a: 0, k: [100, 100, 100], ix: 6 },
                                        sk: { a: 0, k: 0 },
                                        p: {
                                          a: 0,
                                          k: [56.854, 56.618, 0],
                                          ix: 2
                                        },
                                        r: { a: 0, k: 0, ix: 10 },
                                        sa: { a: 0, k: 0 },
                                        o: { a: 0, k: 100, ix: 11 }
                                      },
                                      ef: [],
                                      shapes: [
                                        {
                                          ty: "gr",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Group",
                                          nm: "Group 1",
                                          ix: 1,
                                          cix: 2,
                                          np: 2,
                                          it: [
                                            {
                                              ty: "sh",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Shape - Group",
                                              nm: "Path 1",
                                              ix: 1,
                                              d: 1,
                                              ks: {
                                                a: 0,
                                                k: {
                                                  c: true,
                                                  i: [
                                                    [-22.753, 0],
                                                    [0, -22.753],
                                                    [22.754, 0],
                                                    [0, 22.754]
                                                  ],
                                                  o: [
                                                    [22.754, 0],
                                                    [0, 22.754],
                                                    [-22.753, 0],
                                                    [0, -22.753]
                                                  ],
                                                  v: [
                                                    [0, -41.199],
                                                    [41.199, 0],
                                                    [0, 41.199],
                                                    [-41.199, 0]
                                                  ]
                                                },
                                                ix: 2
                                              }
                                            },
                                            {
                                              ty: "fl",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Graphic - Fill",
                                              nm: "Fill 1",
                                              c: {
                                                a: 0,
                                                k: [0.5098, 0.3294, 0.7765],
                                                ix: 4
                                              },
                                              r: 1,
                                              o: { a: 0, k: 100, ix: 5 }
                                            },
                                            {
                                              ty: "tr",
                                              a: { a: 0, k: [0, 0], ix: 1 },
                                              s: { a: 0, k: [100, 100], ix: 3 },
                                              sk: { a: 0, k: 0, ix: 4 },
                                              p: {
                                                a: 0,
                                                k: [41.449, 41.449],
                                                ix: 2
                                              },
                                              r: { a: 0, k: 0, ix: 6 },
                                              sa: { a: 0, k: 0, ix: 5 },
                                              o: { a: 0, k: 100, ix: 7 }
                                            }
                                          ]
                                        }
                                      ],
                                      ind: 5
                                    }
                                  ],
                                  v: "5.5.9",
                                  fr: 29.9700012207031,
                                  op: 38.0000015477717,
                                  ip: 0,
                                  assets: []
                                }
                              : {
                                  v: "4.10.1",
                                  fr: 30,
                                  ip: 0,
                                  op: 40,
                                  w: 80,
                                  h: 80,
                                  nm: "Success Checkmark",
                                  ddd: 0,
                                  assets: [],
                                  layers: [
                                    {
                                      ddd: 0,
                                      ind: 1,
                                      ty: 4,
                                      nm: "Check Mark",
                                      sr: 1,
                                      ks: {
                                        o: { a: 0, k: 100, ix: 11 },
                                        r: { a: 0, k: 0, ix: 10 },
                                        p: { a: 0, k: [40, 40, 0], ix: 2 },
                                        a: { a: 0, k: [-1.312, 6, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100, 100], ix: 6 }
                                      },
                                      ao: 0,
                                      shapes: [
                                        {
                                          ty: "gr",
                                          it: [
                                            {
                                              ind: 0,
                                              ty: "sh",
                                              ix: 1,
                                              ks: {
                                                a: 0,
                                                k: {
                                                  i: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  v: [
                                                    [-15.75, 8],
                                                    [-8, 16],
                                                    [13.125, -4]
                                                  ],
                                                  c: false
                                                },
                                                ix: 2
                                              },
                                              nm: "Path 1",
                                              mn: "ADBE Vector Shape - Group",
                                              hd: false
                                            },
                                            {
                                              ty: "tm",
                                              s: {
                                                a: 1,
                                                k: [
                                                  {
                                                    i: { x: [0.667], y: [1] },
                                                    o: { x: [0.333], y: [0] },
                                                    n: ["0p667_1_0p333_0"],
                                                    t: 25,
                                                    s: [0],
                                                    e: [100]
                                                  },
                                                  { t: 33 }
                                                ],
                                                ix: 1
                                              },
                                              e: { a: 0, k: 0, ix: 2 },
                                              o: { a: 0, k: 0, ix: 3 },
                                              m: 1,
                                              ix: 2,
                                              nm: "Trim Paths 1",
                                              mn: "ADBE Vector Filter - Trim",
                                              hd: false
                                            },
                                            {
                                              ty: "st",
                                              c: {
                                                a: 0,
                                                k: [1, 1, 1, 1],
                                                ix: 3
                                              },
                                              o: { a: 0, k: 100, ix: 4 },
                                              w: { a: 0, k: 3, ix: 5 },
                                              lc: 2,
                                              lj: 2,
                                              nm: "Stroke 1",
                                              mn: "ADBE Vector Graphic - Stroke",
                                              hd: false
                                            },
                                            {
                                              ty: "tr",
                                              p: { a: 0, k: [0, 0], ix: 2 },
                                              a: { a: 0, k: [0, 0], ix: 1 },
                                              s: { a: 0, k: [100, 100], ix: 3 },
                                              r: { a: 0, k: 0, ix: 6 },
                                              o: { a: 0, k: 100, ix: 7 },
                                              sk: { a: 0, k: 0, ix: 4 },
                                              sa: { a: 0, k: 0, ix: 5 },
                                              nm: "Transform"
                                            }
                                          ],
                                          nm: "Shape 1",
                                          np: 3,
                                          cix: 2,
                                          ix: 1,
                                          mn: "ADBE Vector Group",
                                          hd: false
                                        }
                                      ],
                                      ip: 0,
                                      op: 40,
                                      st: 0,
                                      bm: 0
                                    },
                                    {
                                      ddd: 0,
                                      ind: 2,
                                      ty: 4,
                                      nm: "Circle Flash",
                                      sr: 1,
                                      ks: {
                                        o: {
                                          a: 1,
                                          k: [
                                            {
                                              i: { x: [0.833], y: [0.833] },
                                              o: { x: [0.167], y: [0.167] },
                                              n: ["0p833_0p833_0p167_0p167"],
                                              t: 25,
                                              s: [0],
                                              e: [98]
                                            },
                                            {
                                              i: { x: [0.833], y: [0.833] },
                                              o: { x: [0.167], y: [0.167] },
                                              n: ["0p833_0p833_0p167_0p167"],
                                              t: 30,
                                              s: [98],
                                              e: [0]
                                            },
                                            { t: 38 }
                                          ],
                                          ix: 11
                                        },
                                        r: { a: 0, k: 0, ix: 10 },
                                        p: { a: 0, k: [40, 40, 0], ix: 2 },
                                        a: { a: 0, k: [0, 0, 0], ix: 1 },
                                        s: {
                                          a: 1,
                                          k: [
                                            {
                                              i: {
                                                x: [0.667, 0.667, 0.667],
                                                y: [1, 1, 1]
                                              },
                                              o: {
                                                x: [0.333, 0.333, 0.333],
                                                y: [0, 0, 0]
                                              },
                                              n: [
                                                "0p667_1_0p333_0",
                                                "0p667_1_0p333_0",
                                                "0p667_1_0p333_0"
                                              ],
                                              t: 25,
                                              s: [0, 0, 100],
                                              e: [100, 100, 100]
                                            },
                                            { t: 30 }
                                          ],
                                          ix: 6
                                        }
                                      },
                                      ao: 0,
                                      shapes: [
                                        {
                                          d: 1,
                                          ty: "el",
                                          s: { a: 0, k: [64, 64], ix: 2 },
                                          p: { a: 0, k: [0, 0], ix: 3 },
                                          nm: "Ellipse Path 1",
                                          mn: "ADBE Vector Shape - Ellipse",
                                          hd: false
                                        },
                                        {
                                          ty: "fl",
                                          c: {
                                            a: 0,
                                            k: [
                                              0.529866635799, 0.961458325386,
                                              0.448091417551, 1
                                            ],
                                            ix: 4
                                          },
                                          o: { a: 0, k: 100, ix: 5 },
                                          r: 1,
                                          nm: "Fill 1",
                                          mn: "ADBE Vector Graphic - Fill",
                                          hd: false
                                        }
                                      ],
                                      ip: 0,
                                      op: 40,
                                      st: 0,
                                      bm: 0
                                    },
                                    {
                                      ddd: 0,
                                      ind: 3,
                                      ty: 4,
                                      nm: "Circle Stroke",
                                      sr: 1,
                                      ks: {
                                        o: { a: 0, k: 100, ix: 11 },
                                        r: { a: 0, k: 0, ix: 10 },
                                        p: {
                                          a: 0,
                                          k: [39.022, 39.022, 0],
                                          ix: 2
                                        },
                                        a: { a: 0, k: [0, 0, 0], ix: 1 },
                                        s: {
                                          a: 1,
                                          k: [
                                            {
                                              i: {
                                                x: [0.667, 0.667, 0.667],
                                                y: [1, 1, 1]
                                              },
                                              o: {
                                                x: [0.333, 0.333, 0.333],
                                                y: [0, 0, 0]
                                              },
                                              n: [
                                                "0p667_1_0p333_0",
                                                "0p667_1_0p333_0",
                                                "0p667_1_0p333_0"
                                              ],
                                              t: 16,
                                              s: [100, 100, 100],
                                              e: [80, 80, 100]
                                            },
                                            {
                                              i: {
                                                x: [0.667, 0.667, 0.667],
                                                y: [1, 1, 1]
                                              },
                                              o: {
                                                x: [0.333, 0.333, 0.333],
                                                y: [0, 0, 0]
                                              },
                                              n: [
                                                "0p667_1_0p333_0",
                                                "0p667_1_0p333_0",
                                                "0p667_1_0p333_0"
                                              ],
                                              t: 22,
                                              s: [80, 80, 100],
                                              e: [120, 120, 100]
                                            },
                                            {
                                              i: {
                                                x: [0.667, 0.667, 0.667],
                                                y: [1, 1, 1]
                                              },
                                              o: {
                                                x: [0.333, 0.333, 0.333],
                                                y: [0, 0, 0]
                                              },
                                              n: [
                                                "0p667_1_0p333_0",
                                                "0p667_1_0p333_0",
                                                "0p667_1_0p333_0"
                                              ],
                                              t: 25,
                                              s: [120, 120, 100],
                                              e: [100, 100, 100]
                                            },
                                            { t: 29 }
                                          ],
                                          ix: 6
                                        }
                                      },
                                      ao: 0,
                                      shapes: [
                                        {
                                          ty: "gr",
                                          it: [
                                            {
                                              d: 1,
                                              ty: "el",
                                              s: { a: 0, k: [60, 60], ix: 2 },
                                              p: { a: 0, k: [0, 0], ix: 3 },
                                              nm: "Ellipse Path 1",
                                              mn: "ADBE Vector Shape - Ellipse",
                                              hd: false
                                            },
                                            {
                                              ty: "tm",
                                              s: {
                                                a: 1,
                                                k: [
                                                  {
                                                    i: { x: [0.667], y: [1] },
                                                    o: { x: [0.333], y: [0] },
                                                    n: ["0p667_1_0p333_0"],
                                                    t: 0,
                                                    s: [0],
                                                    e: [100]
                                                  },
                                                  { t: 16 }
                                                ],
                                                ix: 1
                                              },
                                              e: { a: 0, k: 0, ix: 2 },
                                              o: { a: 0, k: 0, ix: 3 },
                                              m: 1,
                                              ix: 2,
                                              nm: "Trim Paths 1",
                                              mn: "ADBE Vector Filter - Trim",
                                              hd: false
                                            },
                                            {
                                              ty: "st",
                                              c: {
                                                a: 0,
                                                k: [
                                                  0.427450984716,
                                                  0.800000011921, 0.35686275363,
                                                  1
                                                ],
                                                ix: 3
                                              },
                                              o: { a: 0, k: 100, ix: 4 },
                                              w: { a: 0, k: 3, ix: 5 },
                                              lc: 2,
                                              lj: 2,
                                              nm: "Stroke 1",
                                              mn: "ADBE Vector Graphic - Stroke",
                                              hd: false
                                            },
                                            {
                                              ty: "tr",
                                              p: {
                                                a: 0,
                                                k: [0.978, 0.978],
                                                ix: 2
                                              },
                                              a: { a: 0, k: [0, 0], ix: 1 },
                                              s: { a: 0, k: [100, 100], ix: 3 },
                                              r: { a: 0, k: 0, ix: 6 },
                                              o: { a: 0, k: 100, ix: 7 },
                                              sk: { a: 0, k: 0, ix: 4 },
                                              sa: { a: 0, k: 0, ix: 5 },
                                              nm: "Transform"
                                            }
                                          ],
                                          nm: "Ellipse 1",
                                          np: 3,
                                          cix: 2,
                                          ix: 1,
                                          mn: "ADBE Vector Group",
                                          hd: false
                                        }
                                      ],
                                      ip: 0,
                                      op: 40,
                                      st: 0,
                                      bm: 0
                                    },
                                    {
                                      ddd: 0,
                                      ind: 4,
                                      ty: 4,
                                      nm: "Circle Green Fill",
                                      sr: 1,
                                      ks: {
                                        o: {
                                          a: 1,
                                          k: [
                                            {
                                              i: { x: [0.833], y: [0.833] },
                                              o: { x: [0.167], y: [0.167] },
                                              n: ["0p833_0p833_0p167_0p167"],
                                              t: 21,
                                              s: [0],
                                              e: [98]
                                            },
                                            { t: 28 }
                                          ],
                                          ix: 11
                                        },
                                        r: { a: 0, k: 0, ix: 10 },
                                        p: { a: 0, k: [40, 40, 0], ix: 2 },
                                        a: { a: 0, k: [0, 0, 0], ix: 1 },
                                        s: {
                                          a: 1,
                                          k: [
                                            {
                                              i: {
                                                x: [0.667, 0.667, 0.667],
                                                y: [1, 1, 1]
                                              },
                                              o: {
                                                x: [0.333, 0.333, 0.333],
                                                y: [0, 0, 0]
                                              },
                                              n: [
                                                "0p667_1_0p333_0",
                                                "0p667_1_0p333_0",
                                                "0p667_1_0p333_0"
                                              ],
                                              t: 21,
                                              s: [0, 0, 100],
                                              e: [100, 100, 100]
                                            },
                                            { t: 28 }
                                          ],
                                          ix: 6
                                        }
                                      },
                                      ao: 0,
                                      shapes: [
                                        {
                                          d: 1,
                                          ty: "el",
                                          s: { a: 0, k: [64, 64], ix: 2 },
                                          p: { a: 0, k: [0, 0], ix: 3 },
                                          nm: "Ellipse Path 1",
                                          mn: "ADBE Vector Shape - Ellipse",
                                          hd: false
                                        },
                                        {
                                          ty: "fl",
                                          c: {
                                            a: 0,
                                            k: [
                                              0.427450984716, 0.800000011921,
                                              0.35686275363, 1
                                            ],
                                            ix: 4
                                          },
                                          o: { a: 0, k: 100, ix: 5 },
                                          r: 1,
                                          nm: "Fill 1",
                                          mn: "ADBE Vector Graphic - Fill",
                                          hd: false
                                        }
                                      ],
                                      ip: 0,
                                      op: 40,
                                      st: 0,
                                      bm: 0
                                    }
                                  ]
                                }
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.lottie__oDn4L,
                            {
                              [sty.lottielackOfCourseInformation__oDn4L07Srs]:
                                hasVariant(
                                  $state,
                                  "lackOfCourseInformation",
                                  "lackOfCourseInformation"
                                ),
                              [sty.lottienoPartner__oDn4Lc7PeD]: hasVariant(
                                $state,
                                "noPartner",
                                "noPartner"
                              )
                            }
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aqgYp,
                            {
                              [sty.textnoPartner__aqgYpc7PeD]: hasVariant(
                                $state,
                                "noPartner",
                                "noPartner"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "noPartner", "noPartner")
                            ? "\u0644\u0637\u0641\u0627 \u0627\u0632 \u0647\u0645\u0633\u0631 \u062e\u0648\u062f \u0628\u062e\u0648\u0627\u0647\u06cc\u062f \u062a\u0627 \u0627\u0632 \u0637\u0631\u06cc\u0642 \u0627\u067e\u0644\u06cc\u06a9\u06cc\u0634\u0646 \u0644\u06cc\u0648\u0645 \u0634\u0645\u0627 \u0631\u0627 \u0628\u0639\u0646\u0648\u0627\u0646 \u0647\u0645\u06cc\u0627\u0631 \u062e\u0648\u062f \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646\u062f"
                            : "Enter some text"}
                        </div>
                      </div>
                    ) : null}
                    {(
                      hasVariant($state, "noPartner", "noPartner")
                        ? (() => {
                            try {
                              return $state.mobile == "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ualnp,
                          {
                            [sty.freeBoxnoPartner__ualnpc7PeD]: hasVariant(
                              $state,
                              "noPartner",
                              "noPartner"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nkocW,
                            {
                              [sty.textnoPartner__nkocWc7PeD]: hasVariant(
                                $state,
                                "noPartner",
                                "noPartner"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "noPartner", "noPartner")
                            ? "\u0644\u0637\u0641\u0627\u064b \u0628\u0631\u0627\u06cc \u0634\u0646\u0627\u0633\u0627\u06cc\u06cc \u0647\u0645\u06cc\u0627\u0631\u060c \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                            : "Enter some text"}
                        </div>
                        <Button
                          data-plasmic-name={"button17"}
                          data-plasmic-override={overrides.button17}
                          className={classNames(
                            "__wab_instance",
                            sty.button17,
                            {
                              [sty.button17noPartner]: hasVariant(
                                $state,
                                "noPartner",
                                "noPartner"
                              )
                            }
                          )}
                          color={generateStateValueProp($state, [
                            "button17",
                            "color"
                          ])}
                          load={generateStateValueProp($state, [
                            "button17",
                            "load"
                          ])}
                          loading={generateStateValueProp($state, [
                            "button17",
                            "loading"
                          ])}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateMobileDialogOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["mobileDialog", "open"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateMobileDialogOpen"] != null &&
                              typeof $steps["updateMobileDialogOpen"] ===
                                "object" &&
                              typeof $steps["updateMobileDialogOpen"].then ===
                                "function"
                            ) {
                              $steps["updateMobileDialogOpen"] = await $steps[
                                "updateMobileDialogOpen"
                              ];
                            }
                          }}
                          onColorChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button17",
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onLoadChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button17",
                                "load"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onLoadingChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button17",
                                "loading"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        >
                          {
                            "\u062b\u0628\u062a \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647 "
                          }
                        </Button>
                      </div>
                    ) : null}
                  </div>
                  <div
                    data-plasmic-name={"noData"}
                    data-plasmic-override={overrides.noData}
                    className={classNames(projectcss.all, sty.noData, {
                      [sty.noDatalackOfCourseInformation]: hasVariant(
                        $state,
                        "lackOfCourseInformation",
                        "lackOfCourseInformation"
                      ),
                      [sty.noDatanoPartner]: hasVariant(
                        $state,
                        "noPartner",
                        "noPartner"
                      )
                    })}
                  >
                    <LottieWrapper
                      animationData={
                        hasVariant($state, "noPartner", "noPartner")
                          ? {
                              nm: "Warning",
                              ddd: 0,
                              h: 114,
                              w: 114,
                              meta: { g: "@lottiefiles/toolkit-js 0.33.2" },
                              layers: [
                                {
                                  ty: 4,
                                  nm: "Layer 5 Outlines",
                                  sr: 1,
                                  st: 4.00000016292334,
                                  op: 320.000013033867,
                                  ip: 4.00000016292334,
                                  hd: false,
                                  ddd: 0,
                                  bm: 0,
                                  hasMask: false,
                                  ao: 0,
                                  ks: {
                                    a: { a: 0, k: [56.897, 56.897, 0], ix: 1 },
                                    s: {
                                      a: 1,
                                      k: [
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [83, 83, 100],
                                          t: 26
                                        },
                                        {
                                          s: [100, 100, 100],
                                          t: 38.0000015477717
                                        }
                                      ],
                                      ix: 6
                                    },
                                    sk: { a: 0, k: 0 },
                                    p: { a: 0, k: [56.853, 56.618, 0], ix: 2 },
                                    r: { a: 0, k: 0, ix: 10 },
                                    sa: { a: 0, k: 0 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [0],
                                          t: 26
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [100],
                                          t: 32
                                        },
                                        { s: [0], t: 38.0000015477717 }
                                      ],
                                      ix: 11
                                    }
                                  },
                                  ef: [],
                                  shapes: [
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 1",
                                      ix: 1,
                                      cix: 2,
                                      np: 4,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [28.397, 0],
                                                [0, -28.397],
                                                [-28.397, 0],
                                                [0, 28.397]
                                              ],
                                              o: [
                                                [-28.397, 0],
                                                [0, 28.397],
                                                [28.397, 0],
                                                [0, -28.397]
                                              ],
                                              v: [
                                                [0.001, -51.497],
                                                [-51.498, 0.001],
                                                [0.001, 51.497],
                                                [51.498, 0.001]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 2",
                                          ix: 2,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [31.234, 0],
                                                [0, 31.233],
                                                [-31.236, 0],
                                                [0, -31.237]
                                              ],
                                              o: [
                                                [-31.236, 0],
                                                [0, -31.237],
                                                [31.234, 0],
                                                [0, 31.233]
                                              ],
                                              v: [
                                                [0.001, 56.647],
                                                [-56.647, 0.001],
                                                [0.001, -56.647],
                                                [56.647, 0.001]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "mm",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Filter - Merge",
                                          nm: "Merge Paths 1",
                                          mm: 1
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: {
                                            a: 0,
                                            k: [0.5098, 0.3294, 0.7765],
                                            ix: 4
                                          },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [56.897, 56.898],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    }
                                  ],
                                  ind: 1
                                },
                                {
                                  ty: 4,
                                  nm: "Layer 2 Outlines",
                                  sr: 1,
                                  st: 0,
                                  op: 316.000012870944,
                                  ip: 0,
                                  hd: false,
                                  ddd: 0,
                                  bm: 0,
                                  hasMask: false,
                                  ao: 0,
                                  ks: {
                                    a: { a: 0, k: [56.897, 56.897, 0], ix: 1 },
                                    s: {
                                      a: 1,
                                      k: [
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [83, 83, 100],
                                          t: 20
                                        },
                                        {
                                          s: [100, 100, 100],
                                          t: 32.0000013033867
                                        }
                                      ],
                                      ix: 6
                                    },
                                    sk: { a: 0, k: 0 },
                                    p: { a: 0, k: [56.853, 56.618, 0], ix: 2 },
                                    r: { a: 0, k: 0, ix: 10 },
                                    sa: { a: 0, k: 0 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [0],
                                          t: 20
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [100],
                                          t: 26
                                        },
                                        { s: [0], t: 32.0000013033867 }
                                      ],
                                      ix: 11
                                    }
                                  },
                                  ef: [],
                                  shapes: [
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 1",
                                      ix: 1,
                                      cix: 2,
                                      np: 4,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [28.397, 0],
                                                [0, -28.397],
                                                [-28.397, 0],
                                                [0, 28.397]
                                              ],
                                              o: [
                                                [-28.397, 0],
                                                [0, 28.397],
                                                [28.397, 0],
                                                [0, -28.397]
                                              ],
                                              v: [
                                                [0.001, -51.497],
                                                [-51.498, 0.001],
                                                [0.001, 51.497],
                                                [51.498, 0.001]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 2",
                                          ix: 2,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [31.234, 0],
                                                [0, 31.233],
                                                [-31.236, 0],
                                                [0, -31.237]
                                              ],
                                              o: [
                                                [-31.236, 0],
                                                [0, -31.237],
                                                [31.234, 0],
                                                [0, 31.233]
                                              ],
                                              v: [
                                                [0.001, 56.647],
                                                [-56.647, 0.001],
                                                [0.001, -56.647],
                                                [56.647, 0.001]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "mm",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Filter - Merge",
                                          nm: "Merge Paths 1",
                                          mm: 1
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: {
                                            a: 0,
                                            k: [0.5098, 0.3294, 0.7765],
                                            ix: 4
                                          },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [56.897, 56.898],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    }
                                  ],
                                  ind: 2
                                },
                                {
                                  ty: 4,
                                  nm: "Layer 4 Outlines",
                                  sr: 1,
                                  st: 0,
                                  op: 316.000012870944,
                                  ip: 0,
                                  hd: false,
                                  ddd: 0,
                                  bm: 0,
                                  hasMask: false,
                                  ao: 0,
                                  ks: {
                                    a: { a: 0, k: [5.434, 31.682, 0], ix: 1 },
                                    s: {
                                      a: 1,
                                      k: [
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [100, 100, 100],
                                          t: 0
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [115, 90, 100],
                                          t: 4
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [100, 112, 100],
                                          t: 8
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [100, 112, 100],
                                          t: 11
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [113.333, 94.333, 100],
                                          t: 13
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [100, 112, 100],
                                          t: 15
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [113, 95, 100],
                                          t: 20
                                        },
                                        {
                                          s: [100, 100, 100],
                                          t: 22.0000008960784
                                        }
                                      ],
                                      ix: 6
                                    },
                                    sk: { a: 0, k: 0 },
                                    p: {
                                      a: 1,
                                      k: [
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [57.387, 65.377, 0],
                                          t: 0,
                                          ti: [0, 0.835, 0],
                                          to: [0, -0.35, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [57.387, 65.46, 0],
                                          t: 4,
                                          ti: [0, 0.609, 0],
                                          to: [0, -1.455, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [57.387, 56.377, 0],
                                          t: 11,
                                          ti: [0, 0.609, 0],
                                          to: [0, -0.958, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [57.387, 50.877, 0],
                                          t: 13,
                                          ti: [0, 0.609, 0],
                                          to: [0, -0.958, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [57.387, 56.377, 0],
                                          t: 15,
                                          ti: [0, -0.417, 0],
                                          to: [0, -0.958, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [57.387, 65.627, 0],
                                          t: 19,
                                          ti: [0, 0.958, 0],
                                          to: [0, 0.417, 0]
                                        },
                                        {
                                          s: [57.387, 65.377, 0],
                                          t: 22.0000008960784
                                        }
                                      ],
                                      ix: 2
                                    },
                                    r: { a: 0, k: 0, ix: 10 },
                                    sa: { a: 0, k: 0 },
                                    o: { a: 0, k: 100, ix: 11 }
                                  },
                                  ef: [],
                                  shapes: [
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 1",
                                      ix: 1,
                                      cix: 2,
                                      np: 2,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [2.878, 0],
                                                [0, -2.487],
                                                [0, 0],
                                                [-2.951, 0],
                                                [0, 2.426],
                                                [0, 0]
                                              ],
                                              o: [
                                                [-2.951, 0],
                                                [0, 0],
                                                [0, 2.49],
                                                [2.878, 0],
                                                [0, 0],
                                                [0, -2.428]
                                              ],
                                              v: [
                                                [0.001, -15.433],
                                                [-5.184, -11.406],
                                                [-5.184, 11.409],
                                                [0.001, 15.433],
                                                [5.184, 11.409],
                                                [5.184, -11.406]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: { a: 0, k: [1, 1, 1], ix: 4 },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [5.433, 15.682],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    }
                                  ],
                                  ind: 3
                                },
                                {
                                  ty: 4,
                                  nm: "Layer 3 Outlines",
                                  sr: 1,
                                  st: 0,
                                  op: 316.000012870944,
                                  ip: 0,
                                  hd: false,
                                  ddd: 0,
                                  bm: 0,
                                  hasMask: false,
                                  ao: 0,
                                  ks: {
                                    a: { a: 0, k: [5.516, 11.142, 0], ix: 1 },
                                    s: {
                                      a: 1,
                                      k: [
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [100, 100, 100],
                                          t: 20
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [100, 79, 100],
                                          t: 22
                                        },
                                        {
                                          s: [100, 100, 100],
                                          t: 24.00000097754
                                        }
                                      ],
                                      ix: 6
                                    },
                                    sk: { a: 0, k: 0 },
                                    p: { a: 0, k: [57.011, 80.341, 0], ix: 2 },
                                    r: { a: 0, k: 0, ix: 10 },
                                    sa: { a: 0, k: 0 },
                                    o: { a: 0, k: 100, ix: 11 }
                                  },
                                  ef: [],
                                  shapes: [
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 1",
                                      ix: 1,
                                      cix: 2,
                                      np: 2,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [2.834, 0],
                                                [0, -2.837],
                                                [-2.835, 0],
                                                [0, 2.833]
                                              ],
                                              o: [
                                                [-2.835, 0],
                                                [0, 2.833],
                                                [2.834, 0],
                                                [0, -2.837]
                                              ],
                                              v: [
                                                [0.002, -5.142],
                                                [-5.141, 0.003],
                                                [0.002, 5.142],
                                                [5.141, 0.003]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: { a: 0, k: [1, 1, 1], ix: 4 },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: { a: 0, k: [5.391, 5.392], ix: 2 },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    }
                                  ],
                                  ind: 4
                                },
                                {
                                  ty: 4,
                                  nm: "Layer 1 Outlines",
                                  sr: 1,
                                  st: 0,
                                  op: 316.000012870944,
                                  ip: 0,
                                  hd: false,
                                  ddd: 0,
                                  bm: 0,
                                  hasMask: false,
                                  ao: 0,
                                  ks: {
                                    a: { a: 0, k: [41.449, 41.449, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100, 100], ix: 6 },
                                    sk: { a: 0, k: 0 },
                                    p: { a: 0, k: [56.854, 56.618, 0], ix: 2 },
                                    r: { a: 0, k: 0, ix: 10 },
                                    sa: { a: 0, k: 0 },
                                    o: { a: 0, k: 100, ix: 11 }
                                  },
                                  ef: [],
                                  shapes: [
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 1",
                                      ix: 1,
                                      cix: 2,
                                      np: 2,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [-22.753, 0],
                                                [0, -22.753],
                                                [22.754, 0],
                                                [0, 22.754]
                                              ],
                                              o: [
                                                [22.754, 0],
                                                [0, 22.754],
                                                [-22.753, 0],
                                                [0, -22.753]
                                              ],
                                              v: [
                                                [0, -41.199],
                                                [41.199, 0],
                                                [0, 41.199],
                                                [-41.199, 0]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: {
                                            a: 0,
                                            k: [0.5098, 0.3294, 0.7765],
                                            ix: 4
                                          },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [41.449, 41.449],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    }
                                  ],
                                  ind: 5
                                }
                              ],
                              v: "5.5.9",
                              fr: 29.9700012207031,
                              op: 38.0000015477717,
                              ip: 0,
                              assets: []
                            }
                          : {
                              v: "4.10.1",
                              fr: 30,
                              ip: 0,
                              op: 40,
                              w: 80,
                              h: 80,
                              nm: "Success Checkmark",
                              ddd: 0,
                              assets: [],
                              layers: [
                                {
                                  ddd: 0,
                                  ind: 1,
                                  ty: 4,
                                  nm: "Check Mark",
                                  sr: 1,
                                  ks: {
                                    o: { a: 0, k: 100, ix: 11 },
                                    r: { a: 0, k: 0, ix: 10 },
                                    p: { a: 0, k: [40, 40, 0], ix: 2 },
                                    a: { a: 0, k: [-1.312, 6, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100, 100], ix: 6 }
                                  },
                                  ao: 0,
                                  shapes: [
                                    {
                                      ty: "gr",
                                      it: [
                                        {
                                          ind: 0,
                                          ty: "sh",
                                          ix: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              i: [
                                                [0, 0],
                                                [0, 0],
                                                [0, 0]
                                              ],
                                              o: [
                                                [0, 0],
                                                [0, 0],
                                                [0, 0]
                                              ],
                                              v: [
                                                [-15.75, 8],
                                                [-8, 16],
                                                [13.125, -4]
                                              ],
                                              c: false
                                            },
                                            ix: 2
                                          },
                                          nm: "Path 1",
                                          mn: "ADBE Vector Shape - Group",
                                          hd: false
                                        },
                                        {
                                          ty: "tm",
                                          s: {
                                            a: 1,
                                            k: [
                                              {
                                                i: { x: [0.667], y: [1] },
                                                o: { x: [0.333], y: [0] },
                                                n: ["0p667_1_0p333_0"],
                                                t: 25,
                                                s: [0],
                                                e: [100]
                                              },
                                              { t: 33 }
                                            ],
                                            ix: 1
                                          },
                                          e: { a: 0, k: 0, ix: 2 },
                                          o: { a: 0, k: 0, ix: 3 },
                                          m: 1,
                                          ix: 2,
                                          nm: "Trim Paths 1",
                                          mn: "ADBE Vector Filter - Trim",
                                          hd: false
                                        },
                                        {
                                          ty: "st",
                                          c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                          o: { a: 0, k: 100, ix: 4 },
                                          w: { a: 0, k: 3, ix: 5 },
                                          lc: 2,
                                          lj: 2,
                                          nm: "Stroke 1",
                                          mn: "ADBE Vector Graphic - Stroke",
                                          hd: false
                                        },
                                        {
                                          ty: "tr",
                                          p: { a: 0, k: [0, 0], ix: 2 },
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          r: { a: 0, k: 0, ix: 6 },
                                          o: { a: 0, k: 100, ix: 7 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          nm: "Transform"
                                        }
                                      ],
                                      nm: "Shape 1",
                                      np: 3,
                                      cix: 2,
                                      ix: 1,
                                      mn: "ADBE Vector Group",
                                      hd: false
                                    }
                                  ],
                                  ip: 0,
                                  op: 40,
                                  st: 0,
                                  bm: 0
                                },
                                {
                                  ddd: 0,
                                  ind: 2,
                                  ty: 4,
                                  nm: "Circle Flash",
                                  sr: 1,
                                  ks: {
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.833], y: [0.833] },
                                          o: { x: [0.167], y: [0.167] },
                                          n: ["0p833_0p833_0p167_0p167"],
                                          t: 25,
                                          s: [0],
                                          e: [98]
                                        },
                                        {
                                          i: { x: [0.833], y: [0.833] },
                                          o: { x: [0.167], y: [0.167] },
                                          n: ["0p833_0p833_0p167_0p167"],
                                          t: 30,
                                          s: [98],
                                          e: [0]
                                        },
                                        { t: 38 }
                                      ],
                                      ix: 11
                                    },
                                    r: { a: 0, k: 0, ix: 10 },
                                    p: { a: 0, k: [40, 40, 0], ix: 2 },
                                    a: { a: 0, k: [0, 0, 0], ix: 1 },
                                    s: {
                                      a: 1,
                                      k: [
                                        {
                                          i: {
                                            x: [0.667, 0.667, 0.667],
                                            y: [1, 1, 1]
                                          },
                                          o: {
                                            x: [0.333, 0.333, 0.333],
                                            y: [0, 0, 0]
                                          },
                                          n: [
                                            "0p667_1_0p333_0",
                                            "0p667_1_0p333_0",
                                            "0p667_1_0p333_0"
                                          ],
                                          t: 25,
                                          s: [0, 0, 100],
                                          e: [100, 100, 100]
                                        },
                                        { t: 30 }
                                      ],
                                      ix: 6
                                    }
                                  },
                                  ao: 0,
                                  shapes: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [64, 64], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "Ellipse Path 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "fl",
                                      c: {
                                        a: 0,
                                        k: [
                                          0.529866635799, 0.961458325386,
                                          0.448091417551, 1
                                        ],
                                        ix: 4
                                      },
                                      o: { a: 0, k: 100, ix: 5 },
                                      r: 1,
                                      nm: "Fill 1",
                                      mn: "ADBE Vector Graphic - Fill",
                                      hd: false
                                    }
                                  ],
                                  ip: 0,
                                  op: 40,
                                  st: 0,
                                  bm: 0
                                },
                                {
                                  ddd: 0,
                                  ind: 3,
                                  ty: 4,
                                  nm: "Circle Stroke",
                                  sr: 1,
                                  ks: {
                                    o: { a: 0, k: 100, ix: 11 },
                                    r: { a: 0, k: 0, ix: 10 },
                                    p: { a: 0, k: [39.022, 39.022, 0], ix: 2 },
                                    a: { a: 0, k: [0, 0, 0], ix: 1 },
                                    s: {
                                      a: 1,
                                      k: [
                                        {
                                          i: {
                                            x: [0.667, 0.667, 0.667],
                                            y: [1, 1, 1]
                                          },
                                          o: {
                                            x: [0.333, 0.333, 0.333],
                                            y: [0, 0, 0]
                                          },
                                          n: [
                                            "0p667_1_0p333_0",
                                            "0p667_1_0p333_0",
                                            "0p667_1_0p333_0"
                                          ],
                                          t: 16,
                                          s: [100, 100, 100],
                                          e: [80, 80, 100]
                                        },
                                        {
                                          i: {
                                            x: [0.667, 0.667, 0.667],
                                            y: [1, 1, 1]
                                          },
                                          o: {
                                            x: [0.333, 0.333, 0.333],
                                            y: [0, 0, 0]
                                          },
                                          n: [
                                            "0p667_1_0p333_0",
                                            "0p667_1_0p333_0",
                                            "0p667_1_0p333_0"
                                          ],
                                          t: 22,
                                          s: [80, 80, 100],
                                          e: [120, 120, 100]
                                        },
                                        {
                                          i: {
                                            x: [0.667, 0.667, 0.667],
                                            y: [1, 1, 1]
                                          },
                                          o: {
                                            x: [0.333, 0.333, 0.333],
                                            y: [0, 0, 0]
                                          },
                                          n: [
                                            "0p667_1_0p333_0",
                                            "0p667_1_0p333_0",
                                            "0p667_1_0p333_0"
                                          ],
                                          t: 25,
                                          s: [120, 120, 100],
                                          e: [100, 100, 100]
                                        },
                                        { t: 29 }
                                      ],
                                      ix: 6
                                    }
                                  },
                                  ao: 0,
                                  shapes: [
                                    {
                                      ty: "gr",
                                      it: [
                                        {
                                          d: 1,
                                          ty: "el",
                                          s: { a: 0, k: [60, 60], ix: 2 },
                                          p: { a: 0, k: [0, 0], ix: 3 },
                                          nm: "Ellipse Path 1",
                                          mn: "ADBE Vector Shape - Ellipse",
                                          hd: false
                                        },
                                        {
                                          ty: "tm",
                                          s: {
                                            a: 1,
                                            k: [
                                              {
                                                i: { x: [0.667], y: [1] },
                                                o: { x: [0.333], y: [0] },
                                                n: ["0p667_1_0p333_0"],
                                                t: 0,
                                                s: [0],
                                                e: [100]
                                              },
                                              { t: 16 }
                                            ],
                                            ix: 1
                                          },
                                          e: { a: 0, k: 0, ix: 2 },
                                          o: { a: 0, k: 0, ix: 3 },
                                          m: 1,
                                          ix: 2,
                                          nm: "Trim Paths 1",
                                          mn: "ADBE Vector Filter - Trim",
                                          hd: false
                                        },
                                        {
                                          ty: "st",
                                          c: {
                                            a: 0,
                                            k: [
                                              0.427450984716, 0.800000011921,
                                              0.35686275363, 1
                                            ],
                                            ix: 3
                                          },
                                          o: { a: 0, k: 100, ix: 4 },
                                          w: { a: 0, k: 3, ix: 5 },
                                          lc: 2,
                                          lj: 2,
                                          nm: "Stroke 1",
                                          mn: "ADBE Vector Graphic - Stroke",
                                          hd: false
                                        },
                                        {
                                          ty: "tr",
                                          p: { a: 0, k: [0.978, 0.978], ix: 2 },
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          r: { a: 0, k: 0, ix: 6 },
                                          o: { a: 0, k: 100, ix: 7 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          nm: "Transform"
                                        }
                                      ],
                                      nm: "Ellipse 1",
                                      np: 3,
                                      cix: 2,
                                      ix: 1,
                                      mn: "ADBE Vector Group",
                                      hd: false
                                    }
                                  ],
                                  ip: 0,
                                  op: 40,
                                  st: 0,
                                  bm: 0
                                },
                                {
                                  ddd: 0,
                                  ind: 4,
                                  ty: 4,
                                  nm: "Circle Green Fill",
                                  sr: 1,
                                  ks: {
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.833], y: [0.833] },
                                          o: { x: [0.167], y: [0.167] },
                                          n: ["0p833_0p833_0p167_0p167"],
                                          t: 21,
                                          s: [0],
                                          e: [98]
                                        },
                                        { t: 28 }
                                      ],
                                      ix: 11
                                    },
                                    r: { a: 0, k: 0, ix: 10 },
                                    p: { a: 0, k: [40, 40, 0], ix: 2 },
                                    a: { a: 0, k: [0, 0, 0], ix: 1 },
                                    s: {
                                      a: 1,
                                      k: [
                                        {
                                          i: {
                                            x: [0.667, 0.667, 0.667],
                                            y: [1, 1, 1]
                                          },
                                          o: {
                                            x: [0.333, 0.333, 0.333],
                                            y: [0, 0, 0]
                                          },
                                          n: [
                                            "0p667_1_0p333_0",
                                            "0p667_1_0p333_0",
                                            "0p667_1_0p333_0"
                                          ],
                                          t: 21,
                                          s: [0, 0, 100],
                                          e: [100, 100, 100]
                                        },
                                        { t: 28 }
                                      ],
                                      ix: 6
                                    }
                                  },
                                  ao: 0,
                                  shapes: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [64, 64], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "Ellipse Path 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "fl",
                                      c: {
                                        a: 0,
                                        k: [
                                          0.427450984716, 0.800000011921,
                                          0.35686275363, 1
                                        ],
                                        ix: 4
                                      },
                                      o: { a: 0, k: 100, ix: 5 },
                                      r: 1,
                                      nm: "Fill 1",
                                      mn: "ADBE Vector Graphic - Fill",
                                      hd: false
                                    }
                                  ],
                                  ip: 0,
                                  op: 40,
                                  st: 0,
                                  bm: 0
                                }
                              ]
                            }
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.lottie__xmFth,
                        {
                          [sty.lottielackOfCourseInformation__xmFth07Srs]:
                            hasVariant(
                              $state,
                              "lackOfCourseInformation",
                              "lackOfCourseInformation"
                            ),
                          [sty.lottienoPartner__xmFtHc7PeD]: hasVariant(
                            $state,
                            "noPartner",
                            "noPartner"
                          )
                        }
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kCvSp,
                        {
                          [sty.textlackOfCourseInformation__kCvSp07Srs]:
                            hasVariant(
                              $state,
                              "lackOfCourseInformation",
                              "lackOfCourseInformation"
                            )
                        }
                      )}
                    >
                      {hasVariant(
                        $state,
                        "lackOfCourseInformation",
                        "lackOfCourseInformation"
                      ) ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return `${$state.name} هنوز اطلاعات قاعدگی‌اش را وارد نکرده یا ذخیره نشده است. لطفاً اطلاعات دوره را وارد کرده یا با دکمه «تنظیم تغییرات قاعدگی» دوباره ثبت کند.`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        "Enter some text"
                      )}
                    </div>
                  </div>
                  <Cyclebox
                    data-plasmic-name={"cyclebox"}
                    data-plasmic-override={overrides.cyclebox}
                    className={classNames("__wab_instance", sty.cyclebox, {
                      [sty.cycleboxlackOfCourseInformation]: hasVariant(
                        $state,
                        "lackOfCourseInformation",
                        "lackOfCourseInformation"
                      ),
                      [sty.cycleboxnoPartner]: hasVariant(
                        $state,
                        "noPartner",
                        "noPartner"
                      )
                    })}
                    cycle={generateStateValueProp($state, [
                      "cyclebox",
                      "cycle"
                    ])}
                    fertility={generateStateValueProp($state, [
                      "cyclebox",
                      "fertility"
                    ])}
                    normalpms={(() => {
                      try {
                        return (() => {
                          let future1 = new Date(
                            $state.userdata.result.userStatus.pmsStart
                          );
                          let current_date1 = new Date();
                          let delta1 = future1 - current_date1;
                          let days_remaining1 = Math.floor(
                            delta1 / (1000 * 60 * 60 * 24)
                          );
                          if ($state.cyclebox.cycle == "white")
                            if (days_remaining1 < 3) return true;
                          return false;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClickDescription={async event => {
                      const $steps = {};

                      $steps["updateModal3Open"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modal3", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModal3Open"] != null &&
                        typeof $steps["updateModal3Open"] === "object" &&
                        typeof $steps["updateModal3Open"].then === "function"
                      ) {
                        $steps["updateModal3Open"] = await $steps[
                          "updateModal3Open"
                        ];
                      }
                    }}
                    onCycleChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "cyclebox",
                        "cycle"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onFertilityChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "cyclebox",
                        "fertility"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onPeriodChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "cyclebox",
                        "period"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onPmsChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "cyclebox",
                        "pms"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onTextsycleChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "cyclebox",
                        "textsycle"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    period={generateStateValueProp($state, [
                      "cyclebox",
                      "period"
                    ])}
                    pms={generateStateValueProp($state, ["cyclebox", "pms"])}
                    pregnancy={(() => {
                      try {
                        return (() => {
                          if ($state.cyclebox.cycle == "Pregnancy") {
                            return true;
                          } else {
                            return false;
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    slot={
                      <React.Fragment>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__oSlS)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? "100px"
                              : "150px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? "100px"
                              : "150px"
                          }
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return (() => {
                                var week;
                                if ($state.pregnancy.week < 10)
                                  week = "0" + $state.pregnancy.week;
                                else week = "" + $state.pregnancy.week;
                                return (
                                  "https://liom.storage.c2.liara.space/config/pregnancy/week" +
                                  week +
                                  ".png"
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/liom_hamyar/images/week03Png.png",
                                  fullWidth: 270,
                                  fullHeight: 270,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__iCxX0,
                            hasVariant(globalVariants, "screen", "mobile")
                              ? "progress_man_peragnencyM"
                              : "progress_man_peragnency"
                          )}
                        >
                          <AntdProgress
                            data-plasmic-name={"progress"}
                            data-plasmic-override={overrides.progress}
                            className={classNames(
                              "__wab_instance",
                              sty.progress
                            )}
                            infoFormat={(percent, successPercent) => {
                              return 280 - $state.pregnancy.days + " روز دیگر ";
                            }}
                            percent={(() => {
                              try {
                                return parseInt(
                                  (
                                    ((280 - $state.pregnancy.days) * 100) /
                                    280
                                  ).toFixed()
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return 50;
                                }
                                throw e;
                              }
                            })()}
                            showInfo={false}
                            size={"default"}
                            status={"normal"}
                            strokeColor={true ? "#7254C6" : undefined}
                            strokeLinecap={"round"}
                            strokeWidth={5}
                            trailColor={
                              true ? "var(--antd-colorIcon)" : undefined
                            }
                            type={"circle"}
                          />
                        </div>
                      </React.Fragment>
                    }
                    slot2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rgLkr
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "وزن : " +
                                  $state.pregnancyData[
                                    $state.pregnancy.week - 1
                                  ].weight +
                                  ($state.pregnancy.week - 1 >= 27
                                    ? " Kg "
                                    : " g ")
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0648\u0632\u0646 : 14 g";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "وزن : " +
                                  $state.pregnancyData[
                                    $state.pregnancy.week - 1
                                  ].weight +
                                  ($state.pregnancy.week - 1 >= 27
                                    ? " کیلوگرم "
                                    : " گرم ")
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0648\u0632\u0646 : 14 \u06af\u0631\u0645";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    }
                    slot3={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__b09G5
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "قد : " +
                                  $state.pregnancyData[
                                    $state.pregnancy.week - 1
                                  ].height +
                                  " cm "
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0642\u062f: 16 cm";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "قد : " +
                                  $state.pregnancyData[
                                    $state.pregnancy.week - 1
                                  ].height +
                                  " سانتی متر "
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0642\u062f 16 \u0633\u0627\u0646\u062a\u06cc \u0645\u062a\u0631";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    }
                    textsycle={generateStateValueProp($state, [
                      "cyclebox",
                      "textsycle"
                    ])}
                    userData={$state.userdata}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__psqU)}
                    >
                      <LineClomp
                        data-plasmic-name={"lineClomp"}
                        data-plasmic-override={overrides.lineClomp}
                        className={classNames("__wab_instance", sty.lineClomp)}
                        numberOfLine={2}
                        onLineChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "lineClomp",
                            "line"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__in0Fg
                          )}
                          style={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? (() => {
                                  try {
                                    return (() => {
                                      if ($state.cyclebox.cycle == "Pregnancy")
                                        return { color: "black" };
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return {
                                        overflow: "hidden",
                                        "-webkit-line-clamp": "2",
                                        "-webkit-box-orient": "vertical",
                                        display: "-webkit-box"
                                      };
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return (() => {
                                      if ($state.cyclebox.cycle == "Pregnancy")
                                        return { color: "black" };
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                          }
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return "وضعیت " + $state.name + " : ";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "-";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </LineClomp>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ej0Pi
                        )}
                        style={(() => {
                          try {
                            return (() => {
                              if ($state.cyclebox.cycle == "Pregnancy")
                                return { color: "#7444BC" };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                switch ($state.cyclebox.cycle) {
                                  case "white":
                                    return "عادی";
                                  case "fertility":
                                    return "تخمک گذاری";
                                  case "pms":
                                    return "pms";
                                  case "blood":
                                    return "پریود";
                                  case "Pregnancy":
                                    return (
                                      " هفته " +
                                      $state.pregnancyData[
                                        $state.pregnancy.week - 1
                                      ].week +
                                      " بارداری "
                                    );
                                  default:
                                    return "-";
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "-";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </Cyclebox>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cIahf, {
                      [sty.freeBoxnoPartner__cIahfc7PeD]: hasVariant(
                        $state,
                        "noPartner",
                        "noPartner"
                      )
                    })}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ead5H)}
                    >
                      {(() => {
                        try {
                          return !$state.userdata.result.man.hamyarStatus;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kiA8F
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aD64X
                            )}
                          >
                            <PlasmicIcon__
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? Icon125Icon
                                  : Icon125Icon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg__qmu8I
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nYZk9
                              )}
                            >
                              <div
                                className={projectcss.__wab_expr_html_text}
                                dangerouslySetInnerHTML={{
                                  __html: (() => {
                                    try {
                                      return (() => {
                                        if (
                                          !(
                                            $state.userdata.result.user
                                              .husbandSmsSubStatus ||
                                            $state.userdata.result.user
                                              .motherSmsSubStatus
                                          )
                                        )
                                          return "ارسال یادآوری";
                                        else return "اشتراک ویژه";
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u062a\u0648\u0635\u06cc\u0647 \u0627\u0645\u0631\u0648\u0632";
                                      }
                                      throw e;
                                    }
                                  })()
                                }}
                              />
                            </div>
                          </div>
                          {(() => {
                            try {
                              return $state.cyclebox.cycle != "Pregnancy";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___2Twno
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__uZrM0
                                )}
                              >
                                <div
                                  className={projectcss.__wab_expr_html_text}
                                  dangerouslySetInnerHTML={{
                                    __html: (() => {
                                      try {
                                        return (() => {
                                          if (
                                            !(
                                              $state.userdata.result.user
                                                .husbandSmsSubStatus ||
                                              $state.userdata.result.user
                                                .motherSmsSubStatus
                                            )
                                          )
                                            return (
                                              `علاوه بر تغییرات <b>چرخه قاعدگیش،</b> توصیه‌هایی می‌فرستم که <b>بدونی چیکار کنی</b>. ` +
                                              `<b>` +
                                              (function () {
                                                var name = $state.name;
                                                return name.length > 10
                                                  ? name.substring(0, 10) +
                                                      "..."
                                                  : name;
                                              })() +
                                              `</b>` +
                                              ` هم <b>پیامک می‌گیره</b> تا حواسش به <b>رابطه‌تون</b> باشه و <b>خودش رو کنترل کنه</b>. اینطوری <b>رابطه شادتری دارید</b>.`
                                            );
                                          else
                                            return `
<div style="color: green;">
  <b>${$state.name}</b> اشتراک یادآوری رو فعال کرده.
</div>
<p>
  اگه می‌خوای برای همیارت هم توصیه‌هایی بفرستم که حواسش به رابطه‌تون باشه و رفتارشو کنترل کنه، اشتراک توصیه فعال کن.
</p>
`;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0686\u0631\u062e\u0647 \u0642\u0627\u0639\u062f\u06af\u06cc\u0634 \u0631\u0648 \u0628\u0631\u0627\u062a \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u06a9\u0647 <b>\u0631\u0627\u062d\u062a\u200c\u062a\u0631 <b/>\u0628\u062a\u0648\u0646\u06cc \u0627\u0637\u0644\u0627\u0639 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc \u0648 \u0645\u0631\u0627\u0642\u0628\u0634 \u0628\u0627\u0634\u06cc. \u0627\u06cc\u0646\u0637\u0648\u0631\u06cc \u0631\u0627\u062d\u062a\u200c\u062a\u0631 \u0628\u0627 \u0647\u0645 \u06a9\u0646\u0627\u0631 \u0645\u06cc\u0627\u06cc\u062f \u0648 \u0631\u0627\u0628\u0637\u0647 \u0634\u0627\u062f\u062a\u0631\u06cc \u062f\u0627\u0631\u06cc\u0646.";
                                        }
                                        throw e;
                                      }
                                    })()
                                  }}
                                />
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__pyher
                                )}
                              >
                                <Button
                                  data-plasmic-name={"button9"}
                                  data-plasmic-override={overrides.button9}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button9
                                  )}
                                  color={generateStateValueProp($state, [
                                    "button9",
                                    "color"
                                  ])}
                                  load={generateStateValueProp($state, [
                                    "button9",
                                    "load"
                                  ])}
                                  loading={generateStateValueProp($state, [
                                    "button9",
                                    "loading"
                                  ])}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateDialogOpendialog"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "dialog",
                                                "opendialog"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDialogOpendialog"] !=
                                        null &&
                                      typeof $steps[
                                        "updateDialogOpendialog"
                                      ] === "object" &&
                                      typeof $steps["updateDialogOpendialog"]
                                        .then === "function"
                                    ) {
                                      $steps["updateDialogOpendialog"] =
                                        await $steps["updateDialogOpendialog"];
                                    }
                                  }}
                                  onColorChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button9",
                                        "color"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  onLoadChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button9",
                                        "load"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  onLoadingChange={async (
                                    ...eventArgs: any
                                  ) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button9",
                                        "loading"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  size={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobile"
                                    )
                                      ? "minimal"
                                      : "compact"
                                  }
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___54G,
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobile"
                                      )
                                        ? "animashen"
                                        : undefined
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            if (
                                              !(
                                                $state.userdata.result.user
                                                  .husbandSmsSubStatus ||
                                                $state.userdata.result.user
                                                  .motherSmsSubStatus
                                              )
                                            )
                                              return "همین حالا  یادآور فعال کن";
                                            else
                                              return "همین حالا اشتراک ویژه فعال کن";
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u0647\u0645\u06cc\u0646 \u062d\u0627\u0644\u0627  \u06cc\u0627\u062f\u0622\u0648\u0631 \u0641\u0639\u0627\u0644 \u06a9\u0646";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </Button>
                              </div>
                              <Icon124Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__zUdOg,
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? ``
                                    : "bounce"
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return $state.cyclebox.cycle == "Pregnancy";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xmXdL
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pBs8
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                ) ? (
                                  <div
                                    className={projectcss.__wab_expr_html_text}
                                    dangerouslySetInnerHTML={{
                                      __html: (() => {
                                        try {
                                          return "تغییرات <b>دوران بارداریش</b> رو برات ارسال می‌کنم که <b>راحت‌تر بتونی ازش اطلاع داشته باشی و حمایتش کنی.</b> اینطوری بهتر همدیگرو درک می‌کنین و <b>رابطه شادتری دارین.</b>";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0686\u0631\u062e\u0647 \u0642\u0627\u0639\u062f\u06af\u06cc\u0634 \u0631\u0648 \u0628\u0631\u0627\u062a \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u06a9\u0647 <b>\u0631\u0627\u062d\u062a\u200c\u062a\u0631 <b/>\u0628\u062a\u0648\u0646\u06cc \u0627\u0637\u0644\u0627\u0639 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc \u0648 \u0645\u0631\u0627\u0642\u0628\u0634 \u0628\u0627\u0634\u06cc. \u0627\u06cc\u0646\u0637\u0648\u0631\u06cc \u0631\u0627\u062d\u062a\u200c\u062a\u0631 \u0628\u0627 \u0647\u0645 \u06a9\u0646\u0627\u0631 \u0645\u06cc\u0627\u06cc\u062f \u0648 \u0631\u0627\u0628\u0637\u0647 \u0634\u0627\u062f\u062a\u0631\u06cc \u062f\u0627\u0631\u06cc\u0646.";
                                          }
                                          throw e;
                                        }
                                      })()
                                    }}
                                  />
                                ) : (
                                  <div
                                    className={projectcss.__wab_expr_html_text}
                                    dangerouslySetInnerHTML={{
                                      __html: (() => {
                                        try {
                                          return "تغییرات <b>دوران بارداریش</b> رو برات ارسال می‌کنم که <b>راحت‌تر بتونی ازش اطلاع داشته باشی و حمایتش کنی.</b> اینطوری بهتر همدیگرو درک می‌کنین و <b>رابطه شادتری دارین.</b>";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0686\u0631\u062e\u0647 \u0642\u0627\u0639\u062f\u06af\u06cc\u0634 \u0631\u0648 \u0628\u0631\u0627\u062a \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u06a9\u0647 <b>\u0631\u0627\u062d\u062a\u200c\u062a\u0631 <b/>\u0628\u062a\u0648\u0646\u06cc \u0627\u0637\u0644\u0627\u0639 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc \u0648 \u0645\u0631\u0627\u0642\u0628\u0634 \u0628\u0627\u0634\u06cc. \u0627\u06cc\u0646\u0637\u0648\u0631\u06cc \u0631\u0627\u062d\u062a\u200c\u062a\u0631 \u0628\u0627 \u0647\u0645 \u06a9\u0646\u0627\u0631 \u0645\u06cc\u0627\u06cc\u062f \u0648 \u0631\u0627\u0628\u0637\u0647 \u0634\u0627\u062f\u062a\u0631\u06cc \u062f\u0627\u0631\u06cc\u0646.";
                                          }
                                          throw e;
                                        }
                                      })()
                                    }}
                                  />
                                )}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___7Ip2J
                                )}
                              >
                                <Button
                                  data-plasmic-name={"button14"}
                                  data-plasmic-override={overrides.button14}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button14
                                  )}
                                  color={generateStateValueProp($state, [
                                    "button14",
                                    "color"
                                  ])}
                                  load={generateStateValueProp($state, [
                                    "button14",
                                    "load"
                                  ])}
                                  loading={generateStateValueProp($state, [
                                    "button14",
                                    "loading"
                                  ])}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateDialog3Opendialog"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "dialog3",
                                                "opendialog"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDialog3Opendialog"] !=
                                        null &&
                                      typeof $steps[
                                        "updateDialog3Opendialog"
                                      ] === "object" &&
                                      typeof $steps["updateDialog3Opendialog"]
                                        .then === "function"
                                    ) {
                                      $steps["updateDialog3Opendialog"] =
                                        await $steps["updateDialog3Opendialog"];
                                    }
                                  }}
                                  onColorChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button14",
                                        "color"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  onLoadChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button14",
                                        "load"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  onLoadingChange={async (
                                    ...eventArgs: any
                                  ) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button14",
                                        "loading"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  size={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobile"
                                    )
                                      ? "minimal"
                                      : "compact"
                                  }
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ti7Rq,
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobile"
                                      )
                                        ? "animashen"
                                        : undefined
                                    )}
                                  >
                                    {
                                      "\u0647\u0645\u06cc\u0646 \u062d\u0627\u0644\u0627  \u06cc\u0627\u062f\u0622\u0648\u0631 \u0641\u0639\u0627\u0644 \u06a9\u0646"
                                    }
                                  </div>
                                </Button>
                              </div>
                              <Icon124Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__nvjCf,
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? ``
                                    : "bounce"
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                        </div>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? (() => {
                              try {
                                return $state.userdata.result.man.hamyarStatus;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                          : (() => {
                              try {
                                return $state.userdata.result.man.hamyarStatus;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oad1M
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mC1P
                            )}
                          >
                            <PlasmicIcon__
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? Icon126Icon
                                  : Icon126Icon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg__j7Ot1
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fxw8
                              )}
                            >
                              {
                                "\u0648\u0636\u0639\u06cc\u062a \u0627\u0634\u062a\u0631\u0627\u06a9"
                              }
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vi2Qq
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__pHbMo
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateModalOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["modal", "open"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateModalOpen"] != null &&
                                  typeof $steps["updateModalOpen"] ===
                                    "object" &&
                                  typeof $steps["updateModalOpen"].then ===
                                    "function"
                                ) {
                                  $steps["updateModalOpen"] = await $steps[
                                    "updateModalOpen"
                                  ];
                                }
                              }}
                              style={(() => {
                                try {
                                  return {
                                    boxShadow: `0 0px 4px 2px ${
                                      $state.userdata?.result?.man
                                        ?.timeToEndHamyarTime?.days > 3
                                        ? "#00C371"
                                        : "#EB464A"
                                    }`
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? (() => {
                                      try {
                                        return $state.userdata?.result?.man
                                          ?.timeToEndHamyarTime?.days > 3
                                          ? false
                                          : true;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return $state.userdata?.result?.man
                                          ?.timeToEndHamyarTime?.days > 3
                                          ? false
                                          : true;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__dwtes
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return (
                                        $state.cyclebox.cycle != "Pregnancy"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <Button
                                      data-plasmic-name={"button10"}
                                      data-plasmic-override={overrides.button10}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button10
                                      )}
                                      color={generateStateValueProp($state, [
                                        "button10",
                                        "color"
                                      ])}
                                      load={generateStateValueProp($state, [
                                        "button10",
                                        "load"
                                      ])}
                                      loading={generateStateValueProp($state, [
                                        "button10",
                                        "loading"
                                      ])}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateDialogOpendialog"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "dialog",
                                                    "opendialog"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateDialogOpendialog"] !=
                                            null &&
                                          typeof $steps[
                                            "updateDialogOpendialog"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateDialogOpendialog"
                                          ].then === "function"
                                        ) {
                                          $steps["updateDialogOpendialog"] =
                                            await $steps[
                                              "updateDialogOpendialog"
                                            ];
                                        }
                                      }}
                                      onColorChange={async (
                                        ...eventArgs: any
                                      ) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "button10",
                                            "color"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      onLoadChange={async (
                                        ...eventArgs: any
                                      ) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "button10",
                                            "load"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      onLoadingChange={async (
                                        ...eventArgs: any
                                      ) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "button10",
                                            "loading"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      size={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobile"
                                        )
                                          ? "minimal"
                                          : "compact"
                                      }
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__lCn4O,
                                          hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobile"
                                          )
                                            ? "animashen"
                                            : undefined
                                        )}
                                      >
                                        {
                                          "\u062a\u0645\u062f\u06cc\u062f \u0627\u0634\u062a\u0631\u0627\u06a9"
                                        }
                                      </div>
                                    </Button>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (
                                        $state.cyclebox.cycle == "Pregnancy"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <Button
                                      data-plasmic-name={"button15"}
                                      data-plasmic-override={overrides.button15}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button15
                                      )}
                                      color={generateStateValueProp($state, [
                                        "button15",
                                        "color"
                                      ])}
                                      load={generateStateValueProp($state, [
                                        "button15",
                                        "load"
                                      ])}
                                      loading={generateStateValueProp($state, [
                                        "button15",
                                        "loading"
                                      ])}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateDialog3Opendialog"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "dialog3",
                                                    "opendialog"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateDialog3Opendialog"] !=
                                            null &&
                                          typeof $steps[
                                            "updateDialog3Opendialog"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateDialog3Opendialog"
                                          ].then === "function"
                                        ) {
                                          $steps["updateDialog3Opendialog"] =
                                            await $steps[
                                              "updateDialog3Opendialog"
                                            ];
                                        }
                                      }}
                                      onColorChange={async (
                                        ...eventArgs: any
                                      ) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "button15",
                                            "color"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      onLoadChange={async (
                                        ...eventArgs: any
                                      ) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "button15",
                                            "load"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      onLoadingChange={async (
                                        ...eventArgs: any
                                      ) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "button15",
                                            "loading"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      size={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobile"
                                        )
                                          ? "minimal"
                                          : "compact"
                                      }
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__myrsG,
                                          hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobile"
                                          )
                                            ? "animashen"
                                            : undefined
                                        )}
                                      >
                                        {
                                          "\u062a\u0645\u062f\u06cc\u062f \u0627\u0634\u062a\u0631\u0627\u06a9"
                                        }
                                      </div>
                                    </Button>
                                  ) : null}
                                </div>
                              ) : null}
                              {(() => {
                                try {
                                  return $state.userdata?.result?.man
                                    ?.timeToEndHamyarTime?.days > 3
                                    ? true
                                    : false;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___2Cci1
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__dNaje
                                    )}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___3EcDn
                                    )}
                                  >
                                    {
                                      "\u0627\u0634\u062a\u0631\u0627\u06a9 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u0634\u0645\u0627 \u0641\u0639\u0627\u0644 \u0627\u0633\u062a."
                                    }
                                  </div>
                                </div>
                              ) : null}
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.countdown4
                                  ),
                                  color: (() => {
                                    try {
                                      return $state.userdata?.result?.man
                                        ?.timeToEndHamyarTime?.days > 3
                                        ? "green"
                                        : "red";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })(),
                                  date: hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? (() => {
                                        try {
                                          return $state.userdata?.result?.man
                                            ?.timeToEndHamyarTime.days /
                                            30 !=
                                            0
                                            ? "moanth"
                                            : "dey";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "moanth";
                                          }
                                          throw e;
                                        }
                                      })()
                                    : (() => {
                                        try {
                                          return "dey";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })(),
                                  onRemainingSecondsChange2: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangeProp($state, [
                                      "countdown4",
                                      "remainingSeconds"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  remainingSeconds: generateStateValueProp(
                                    $state,
                                    ["countdown4", "remainingSeconds"]
                                  ),
                                  targetTimeUtc: hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? "2025-12-10T23:26:60.224Z"
                                    : undefined
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "countdown4.remainingSeconds",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobile"
                                        )
                                          ? (() => {
                                              try {
                                                return (() => {
                                                  let current_date = new Date();
                                                  let delta = $state.expdate;
                                                  return Math.floor(
                                                    (delta -
                                                      current_date.getTime()) /
                                                      1000
                                                  );
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return 0;
                                                }
                                                throw e;
                                              }
                                            })()
                                          : (() => {
                                              try {
                                                return Math.floor(
                                                  (new Date($state.expdate) -
                                                    new Date()) /
                                                    1000
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return 0;
                                                }
                                                throw e;
                                              }
                                            })()
                                    }
                                  ],
                                  []
                                );
                                return (
                                  <Countdown
                                    data-plasmic-name={"countdown4"}
                                    data-plasmic-override={overrides.countdown4}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          </div>
                        </div>
                      ) : null}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__d04NJ,
                        {
                          [sty.freeBoxnoPartner__d04NJc7PeD]: hasVariant(
                            $state,
                            "noPartner",
                            "noPartner"
                          ),
                          [sty.freeBoxpage_reminder__d04NJslU1R]: hasVariant(
                            $state,
                            "page",
                            "reminder"
                          ),
                          [sty.freeBoxreminder__d04NJuHqpO]: hasVariant(
                            $state,
                            "reminder",
                            "reminder"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aErc9,
                          {
                            [sty.freeBoxnoPartner__aErc9C7PeD]: hasVariant(
                              $state,
                              "noPartner",
                              "noPartner"
                            ),
                            [sty.freeBoxpage_reminder__aErc9SlU1R]: hasVariant(
                              $state,
                              "page",
                              "reminder"
                            ),
                            [sty.freeBoxreminder__aErc9UHqpO]: hasVariant(
                              $state,
                              "reminder",
                              "reminder"
                            )
                          }
                        )}
                      >
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? Icon280Icon
                              : Icon280Icon
                          }
                          className={classNames(projectcss.all, sty.svg__bTclB)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__w30F
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile") ? (
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return "روز شمار";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u062a\u0648\u0635\u06cc\u0647 \u0627\u0645\u0631\u0648\u0632";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          ) : (
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return "روز شمار";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u062a\u0648\u0635\u06cc\u0647 \u0627\u0645\u0631\u0648\u0632";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          )}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rYpc3,
                          {
                            [sty.freeBoxnoPartner__rYpc3C7PeD]: hasVariant(
                              $state,
                              "noPartner",
                              "noPartner"
                            ),
                            [sty.freeBoxpage_reminder__rYpc3SlU1R]: hasVariant(
                              $state,
                              "page",
                              "reminder"
                            ),
                            [sty.freeBoxreminder__rYpc3UHqpO]: hasVariant(
                              $state,
                              "reminder",
                              "reminder"
                            )
                          }
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (
                                    $state.cyclebox.cycle != "blood" &&
                                    $state.cyclebox.cycle != "Pregnancy"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (
                                    $state.cyclebox.cycle != "blood" &&
                                    $state.cyclebox.cycle != "Pregnancy"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__w55OZ
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__djFgI
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1Nphy
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "mobile")
                                  ? "\u0634\u0631\u0648\u0639 \u067e\u0631\u06cc\u0648\u062f:"
                                  : "\u0634\u0631\u0648\u0639 \u067e\u0631\u06cc\u0648\u062f:"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wz5Ut
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        if (
                                          $state.userdata.result.userStatus
                                            .daysToEndPms == 0
                                        )
                                          return "تا پایان امروز";
                                        return (
                                          $state.userdata.result.userStatus
                                            .daysToEndPms +
                                          " روز " +
                                          "دیگر"
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0646\u0627 \u0645\u0639\u0644\u0648\u0645";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return (
                              $state.cyclebox.cycle != "pms" &&
                              $state.cyclebox.cycle != "Pregnancy"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___3PWiC
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__obgGr
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ju4Iq
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "mobile")
                                  ? "\u0634\u0631\u0648\u0639 pms :"
                                  : "\u0634\u0631\u0648\u0639 pms :"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gUb7
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        let future1 = new Date(
                                          $state.userdata.result.userStatus.pmsStart
                                        );
                                        let current_date1 = new Date();
                                        let delta1 = future1 - current_date1;
                                        let days_remaining1 = Math.floor(
                                          delta1 / (1000 * 60 * 60 * 24)
                                        );
                                        if (days_remaining1 == 0)
                                          return "تا پایان امروز";
                                        return (
                                          days_remaining1 + " روز " + "دیگر"
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0646\u0627 \u0645\u0639\u0644\u0648\u0645";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return $state.cyclebox.cycle == "Pregnancy";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___4U2C
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8Y4YX
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "mobile")
                                ? "\u062a\u0627 \u0632\u0627\u06cc\u0645\u0627\u0646:"
                                : "\u0631\u0648\u0632\u0647\u0627\u06cc \u0628\u0627\u0642\u06cc\u200c\u0645\u0627\u0646\u062f\u0647 \u062a\u0627 \u0632\u0627\u06cc\u0645\u0627\u0646:"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tD9PZ
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              ) ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $state.pregnancy.days + " روز " + "دیگر"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $state.pregnancy.days + " روز " + "دیگر"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              )}
                            </div>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return $ctx.query.r == "8z1hf8";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__l2UhF
                            )}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return $ctx.query.r == "8z1hf8";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                          ? (_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.remember.data?.result?.slice(
                                    0,
                                    2
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__pwA8
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__pl4Lo
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___1Hn38
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.name + ":";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "\u0634\u0631\u0648\u0639 pms :";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__jb0B
                                      )}
                                      style={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobile"
                                        )
                                          ? (() => {
                                              try {
                                                return (() => {
                                                  let future1 = new Date(
                                                    currentItem.date_greg
                                                  );
                                                  let current_date1 =
                                                    new Date();
                                                  let delta1 =
                                                    future1 - current_date1;
                                                  let days_remaining1 =
                                                    Math.floor(
                                                      delta1 /
                                                        (1000 * 60 * 60 * 24)
                                                    );
                                                  if (days_remaining1 < 7) {
                                                    return { color: "#8B0000" };
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          : (() => {
                                              try {
                                                return (() => {
                                                  let future1 = new Date(
                                                    currentItem.date_greg
                                                  );
                                                  let current_date1 =
                                                    new Date();
                                                  let delta1 =
                                                    future1 - current_date1;
                                                  let days_remaining1 =
                                                    Math.floor(
                                                      delta1 /
                                                        (1000 * 60 * 60 * 24)
                                                    );
                                                  if (days_remaining1 < 7) {
                                                    return { color: "#8B0000" };
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                      }
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (() => {
                                              let future1 = new Date(
                                                currentItem.date
                                              );
                                              let current_date1 = new Date();
                                              let delta1 =
                                                future1 - current_date1;
                                              let days_remaining1 = Math.floor(
                                                delta1 / (1000 * 60 * 60 * 24)
                                              );
                                              if (days_remaining1 == 0)
                                                return "تا پایان امروز";
                                              return (
                                                days_remaining1 +
                                                " روز " +
                                                "دیگر"
                                              );
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "\u0646\u0627 \u0645\u0639\u0644\u0648\u0645";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                </div>
                              );
                            })
                          : null}
                      </div>
                      {(() => {
                        try {
                          return $ctx.query.r == "8z1hf8";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button
                          data-plasmic-name={"button21"}
                          data-plasmic-override={overrides.button21}
                          className={classNames("__wab_instance", sty.button21)}
                          color={generateStateValueProp($state, [
                            "button21",
                            "color"
                          ])}
                          load={generateStateValueProp($state, [
                            "button21",
                            "load"
                          ])}
                          loading={generateStateValueProp($state, [
                            "button21",
                            "loading"
                          ])}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateReminder"] = true
                              ? (() => {
                                  const actionArgs = {
                                    vgroup: "reminder",
                                    operation: 2
                                  };
                                  return (({ vgroup, value }) => {
                                    if (typeof value === "string") {
                                      value = [value];
                                    }

                                    const oldValue = $stateGet($state, vgroup);
                                    $stateSet($state, vgroup, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateReminder"] != null &&
                              typeof $steps["updateReminder"] === "object" &&
                              typeof $steps["updateReminder"].then ===
                                "function"
                            ) {
                              $steps["updateReminder"] = await $steps[
                                "updateReminder"
                              ];
                            }
                          }}
                          onColorChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button21",
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onLoadChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button21",
                                "load"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onLoadingChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button21",
                                "loading"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showStartIcon={true}
                          size={"compact"}
                          startIcon={
                            <Icon278Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__dSSsb
                              )}
                              role={"img"}
                            />
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__unfSc
                            )}
                          >
                            {
                              "\u062a\u0646\u0638\u06cc\u0645 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u0647\u0627"
                            }
                          </div>
                        </Button>
                      ) : null}
                    </div>
                  </div>
                </div>
                {(() => {
                  try {
                    return $state.userdata?.result?.man?.telegramId
                      ? false
                      : true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__m8Mf, {
                      [sty.freeBoxlackOfCourseInformation__m8Mf07Srs]:
                        hasVariant(
                          $state,
                          "lackOfCourseInformation",
                          "lackOfCourseInformation"
                        ),
                      [sty.freeBoxnoPartner__m8Mfc7PeD]: hasVariant(
                        $state,
                        "noPartner",
                        "noPartner"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] =
                        $state.userdata.result.user.hamyarStatus ||
                        $state.userdata.result.user.husbandSmsSubStatus ||
                        $state.userdata.result.user.motherSmsSubStatus ||
                        $state.userdata.result.man.hamyarStatus
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    window.open(
                                      "https://t.me/liomApp_bot",
                                      "_blank"
                                    );
                                    return window.localStorage.setItem(
                                      "telegram",
                                      true
                                    );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["updateDialogOpendialog"] = !(
                        $state.userdata.result.user.hamyarStatus ||
                        $state.userdata.result.user.husbandSmsSubStatus ||
                        $state.userdata.result.user.motherSmsSubStatus ||
                        $state.userdata.result.man.hamyarStatus
                      )
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dialog", "opendialog"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDialogOpendialog"] != null &&
                        typeof $steps["updateDialogOpendialog"] === "object" &&
                        typeof $steps["updateDialogOpendialog"].then ===
                          "function"
                      ) {
                        $steps["updateDialogOpendialog"] = await $steps[
                          "updateDialogOpendialog"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__oJsBb,
                        {
                          [sty.freeBoxlackOfCourseInformation__oJsBb07Srs]:
                            hasVariant(
                              $state,
                              "lackOfCourseInformation",
                              "lackOfCourseInformation"
                            )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zov6B,
                          {
                            [sty.freeBoxnoPartner__zov6Bc7PeD]: hasVariant(
                              $state,
                              "noPartner",
                              "noPartner"
                            )
                          }
                        )}
                      >
                        <LottieWrapper
                          animationData={{
                            v: "4.8.0",
                            meta: {
                              g: "LottieFiles AE 3.4.5",
                              a: "",
                              k: "",
                              d: "",
                              tc: ""
                            },
                            fr: 60,
                            ip: 0,
                            op: 120,
                            w: 1080,
                            h: 1080,
                            nm: "Comp 1",
                            ddd: 0,
                            assets: [],
                            layers: [
                              {
                                ddd: 0,
                                ind: 1,
                                ty: 4,
                                nm: "Layer 6 Outlines 3",
                                td: 1,
                                sr: 1,
                                ks: {
                                  o: { a: 0, k: 100, ix: 11 },
                                  r: { a: 0, k: 0, ix: 10 },
                                  p: { a: 0, k: [540, 540, 0], ix: 2 },
                                  a: { a: 0, k: [348.189, 150.845, 0], ix: 1 },
                                  s: { a: 0, k: [426, 426, 100], ix: 6 }
                                },
                                ao: 0,
                                shapes: [
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [0, -41.839],
                                              [-41.838, 0],
                                              [0, 41.838],
                                              [41.84, 0]
                                            ],
                                            o: [
                                              [0, 41.838],
                                              [41.84, 0],
                                              [0, -41.839],
                                              [-41.838, 0]
                                            ],
                                            v: [
                                              [-75.756, 0],
                                              [-0.001, 75.757],
                                              [75.756, 0],
                                              [-0.001, -75.757]
                                            ],
                                            c: true
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 2",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: {
                                          a: 0,
                                          k: [348.189, 150.845],
                                          ix: 2
                                        },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Group 1",
                                    np: 2,
                                    cix: 2,
                                    bm: 0,
                                    ix: 1,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  }
                                ],
                                ip: 0,
                                op: 180,
                                st: 0,
                                bm: 0
                              },
                              {
                                ddd: 0,
                                ind: 2,
                                ty: 4,
                                nm: "Shape Layer 2",
                                tt: 1,
                                sr: 1,
                                ks: {
                                  o: { a: 0, k: 20, ix: 11 },
                                  r: { a: 0, k: 50, ix: 10 },
                                  p: {
                                    a: 1,
                                    k: [
                                      {
                                        i: { x: 0.667, y: 1 },
                                        o: { x: 0.333, y: 0 },
                                        t: 0,
                                        s: [1140, 16, 0],
                                        to: [-177.667, 153.333, 0],
                                        ti: [177.667, -153.333, 0]
                                      },
                                      { t: 60, s: [74, 936, 0] }
                                    ],
                                    ix: 2
                                  },
                                  a: { a: 0, k: [0, 0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100, 100], ix: 6 }
                                },
                                ao: 0,
                                shapes: [
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [0, 0],
                                              [0, 0]
                                            ],
                                            o: [
                                              [0, 0],
                                              [0, 0]
                                            ],
                                            v: [
                                              [28, 428],
                                              [28, 306]
                                            ],
                                            c: false
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "st",
                                        c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                        o: { a: 0, k: 100, ix: 4 },
                                        w: { a: 0, k: 2, ix: 5 },
                                        lc: 1,
                                        lj: 1,
                                        ml: 4,
                                        bm: 0,
                                        nm: "Stroke 1",
                                        mn: "ADBE Vector Graphic - Stroke",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: { a: 0, k: [0, 0], ix: 2 },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Shape 12",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 1,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  },
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [0, 26],
                                              [0, 0]
                                            ],
                                            o: [
                                              [0, -26],
                                              [0, 0]
                                            ],
                                            v: [
                                              [158, -208],
                                              [158, -276]
                                            ],
                                            c: false
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "st",
                                        c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                        o: { a: 0, k: 100, ix: 4 },
                                        w: { a: 0, k: 2, ix: 5 },
                                        lc: 1,
                                        lj: 1,
                                        ml: 4,
                                        bm: 0,
                                        nm: "Stroke 1",
                                        mn: "ADBE Vector Graphic - Stroke",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: { a: 0, k: [0, 0], ix: 2 },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Shape 11",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 2,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  },
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [0, 0],
                                              [0, 0]
                                            ],
                                            o: [
                                              [0, 0],
                                              [0, 0]
                                            ],
                                            v: [
                                              [186, -36],
                                              [186, -76]
                                            ],
                                            c: false
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "st",
                                        c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                        o: { a: 0, k: 100, ix: 4 },
                                        w: { a: 0, k: 2, ix: 5 },
                                        lc: 1,
                                        lj: 1,
                                        ml: 4,
                                        bm: 0,
                                        nm: "Stroke 1",
                                        mn: "ADBE Vector Graphic - Stroke",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: { a: 0, k: [0, 0], ix: 2 },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Shape 10",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 3,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  },
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [0, 0],
                                              [0, 0]
                                            ],
                                            o: [
                                              [0, 0],
                                              [0, 0]
                                            ],
                                            v: [
                                              [264, -36],
                                              [264, -144]
                                            ],
                                            c: false
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "st",
                                        c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                        o: { a: 0, k: 100, ix: 4 },
                                        w: { a: 0, k: 2, ix: 5 },
                                        lc: 1,
                                        lj: 1,
                                        ml: 4,
                                        bm: 0,
                                        nm: "Stroke 1",
                                        mn: "ADBE Vector Graphic - Stroke",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: { a: 0, k: [0, 0], ix: 2 },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Shape 9",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 4,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  },
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [-2, 0],
                                              [0, 0]
                                            ],
                                            o: [
                                              [2, 0],
                                              [0, 0]
                                            ],
                                            v: [
                                              [210, 116],
                                              [210, 86]
                                            ],
                                            c: false
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "st",
                                        c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                        o: { a: 0, k: 100, ix: 4 },
                                        w: { a: 0, k: 2, ix: 5 },
                                        lc: 1,
                                        lj: 1,
                                        ml: 4,
                                        bm: 0,
                                        nm: "Stroke 1",
                                        mn: "ADBE Vector Graphic - Stroke",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: { a: 0, k: [0, 0], ix: 2 },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Shape 8",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 5,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  },
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [0, 0],
                                              [0, 0]
                                            ],
                                            o: [
                                              [0, 0],
                                              [0, 0]
                                            ],
                                            v: [
                                              [-202, 2],
                                              [-202, -68]
                                            ],
                                            c: false
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "st",
                                        c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                        o: { a: 0, k: 100, ix: 4 },
                                        w: { a: 0, k: 2, ix: 5 },
                                        lc: 1,
                                        lj: 1,
                                        ml: 4,
                                        bm: 0,
                                        nm: "Stroke 1",
                                        mn: "ADBE Vector Graphic - Stroke",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: { a: 0, k: [0, 0], ix: 2 },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Shape 7",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 6,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  },
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [0, 16],
                                              [0, 0]
                                            ],
                                            o: [
                                              [0, -16],
                                              [0, 0]
                                            ],
                                            v: [
                                              [-56, -114],
                                              [-56, -270]
                                            ],
                                            c: false
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "st",
                                        c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                        o: { a: 0, k: 100, ix: 4 },
                                        w: { a: 0, k: 2, ix: 5 },
                                        lc: 1,
                                        lj: 1,
                                        ml: 4,
                                        bm: 0,
                                        nm: "Stroke 1",
                                        mn: "ADBE Vector Graphic - Stroke",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: { a: 0, k: [0, 0], ix: 2 },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Shape 6",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 7,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  },
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [0, 8],
                                              [0, 0]
                                            ],
                                            o: [
                                              [0, -8],
                                              [0, 0]
                                            ],
                                            v: [
                                              [-182, 164],
                                              [-182, 126]
                                            ],
                                            c: false
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "st",
                                        c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                        o: { a: 0, k: 100, ix: 4 },
                                        w: { a: 0, k: 2, ix: 5 },
                                        lc: 1,
                                        lj: 1,
                                        ml: 4,
                                        bm: 0,
                                        nm: "Stroke 1",
                                        mn: "ADBE Vector Graphic - Stroke",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: { a: 0, k: [0, 0], ix: 2 },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Shape 5",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 8,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  },
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [0, 16],
                                              [0, 0]
                                            ],
                                            o: [
                                              [0, -16],
                                              [0, 0]
                                            ],
                                            v: [
                                              [-300, 128],
                                              [-300, 6]
                                            ],
                                            c: false
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "st",
                                        c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                        o: { a: 0, k: 100, ix: 4 },
                                        w: { a: 0, k: 2, ix: 5 },
                                        lc: 1,
                                        lj: 1,
                                        ml: 4,
                                        bm: 0,
                                        nm: "Stroke 1",
                                        mn: "ADBE Vector Graphic - Stroke",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: { a: 0, k: [0, 0], ix: 2 },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Shape 4",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 9,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  },
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [2, 0],
                                              [0, 0]
                                            ],
                                            o: [
                                              [-2, 0],
                                              [0, 0]
                                            ],
                                            v: [
                                              [186, 368],
                                              [186, 224]
                                            ],
                                            c: false
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "st",
                                        c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                        o: { a: 0, k: 100, ix: 4 },
                                        w: { a: 0, k: 2, ix: 5 },
                                        lc: 1,
                                        lj: 1,
                                        ml: 4,
                                        bm: 0,
                                        nm: "Stroke 1",
                                        mn: "ADBE Vector Graphic - Stroke",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: { a: 0, k: [0, 0], ix: 2 },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Shape 3",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 10,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  },
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [0, 2],
                                              [0, 0]
                                            ],
                                            o: [
                                              [0, -2],
                                              [0, 0]
                                            ],
                                            v: [
                                              [60, 210],
                                              [60, 140]
                                            ],
                                            c: false
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "st",
                                        c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                        o: { a: 0, k: 100, ix: 4 },
                                        w: { a: 0, k: 2, ix: 5 },
                                        lc: 1,
                                        lj: 1,
                                        ml: 4,
                                        bm: 0,
                                        nm: "Stroke 1",
                                        mn: "ADBE Vector Graphic - Stroke",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: { a: 0, k: [0, 0], ix: 2 },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Shape 2",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 11,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  },
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [0, 0],
                                              [0, 0]
                                            ],
                                            o: [
                                              [0, 0],
                                              [0, 0]
                                            ],
                                            v: [
                                              [-98, 310],
                                              [-98, 148]
                                            ],
                                            c: false
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "st",
                                        c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                        o: { a: 0, k: 100, ix: 4 },
                                        w: { a: 0, k: 2, ix: 5 },
                                        lc: 1,
                                        lj: 1,
                                        ml: 4,
                                        bm: 0,
                                        nm: "Stroke 1",
                                        mn: "ADBE Vector Graphic - Stroke",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: { a: 0, k: [0, 0], ix: 2 },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Shape 1",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 12,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  }
                                ],
                                ip: 0,
                                op: 180,
                                st: 0,
                                bm: 0
                              },
                              {
                                ddd: 0,
                                ind: 3,
                                ty: 4,
                                nm: "Layer 6 Outlines 2",
                                td: 1,
                                sr: 1,
                                ks: {
                                  o: { a: 0, k: 100, ix: 11 },
                                  r: { a: 0, k: 0, ix: 10 },
                                  p: { a: 0, k: [540, 540, 0], ix: 2 },
                                  a: { a: 0, k: [348.189, 150.845, 0], ix: 1 },
                                  s: { a: 0, k: [426, 426, 100], ix: 6 }
                                },
                                ao: 0,
                                shapes: [
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [0, -41.839],
                                              [-41.838, 0],
                                              [0, 41.838],
                                              [41.84, 0]
                                            ],
                                            o: [
                                              [0, 41.838],
                                              [41.84, 0],
                                              [0, -41.839],
                                              [-41.838, 0]
                                            ],
                                            v: [
                                              [-75.756, 0],
                                              [-0.001, 75.757],
                                              [75.756, 0],
                                              [-0.001, -75.757]
                                            ],
                                            c: true
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 2",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: {
                                          a: 0,
                                          k: [348.189, 150.845],
                                          ix: 2
                                        },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Group 1",
                                    np: 2,
                                    cix: 2,
                                    bm: 0,
                                    ix: 1,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  }
                                ],
                                ip: 0,
                                op: 180,
                                st: 0,
                                bm: 0
                              },
                              {
                                ddd: 0,
                                ind: 4,
                                ty: 4,
                                nm: "Layer 8 Outlines",
                                tt: 1,
                                sr: 1,
                                ks: {
                                  o: { a: 0, k: 100, ix: 11 },
                                  r: { a: 0, k: 0, ix: 10 },
                                  p: {
                                    a: 1,
                                    k: [
                                      {
                                        i: { x: 0, y: 0.981 },
                                        o: { x: 0.333, y: 0 },
                                        t: 0,
                                        s: [453, 602, 0],
                                        to: [18.667, -19.333, 0],
                                        ti: [0, 0, 0]
                                      },
                                      {
                                        i: { x: 0.667, y: 1 },
                                        o: { x: 0.333, y: 0 },
                                        t: 60,
                                        s: [565, 486, 0],
                                        to: [0, 0, 0],
                                        ti: [18.667, -19.333, 0]
                                      },
                                      { t: 120, s: [453, 602, 0] }
                                    ],
                                    ix: 2
                                  },
                                  a: { a: 0, k: [342.72, 150.866, 0], ix: 1 },
                                  s: { a: 0, k: [426, 426, 100], ix: 6 }
                                },
                                ao: 0,
                                shapes: [
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 1,
                                          k: [
                                            {
                                              i: { x: 0.667, y: 1 },
                                              o: { x: 0.333, y: 0 },
                                              t: 0,
                                              s: [
                                                {
                                                  i: [
                                                    [1.855, -0.705],
                                                    [0, 0],
                                                    [-2.183, -0.738],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [-0.875, 3.497],
                                                    [0, 0]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [-2.154, 0.818],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [2.872, 2.179],
                                                    [0, 0],
                                                    [0.481, -1.925]
                                                  ],
                                                  v: [
                                                    [37.331, -33.42],
                                                    [-38.913, -4.449],
                                                    [-38.827, 0.175],
                                                    [-19.165, 6.817],
                                                    [25.608, -22.075],
                                                    [-9.852, 10.997],
                                                    [17.753, 31.946],
                                                    [25.664, 29.162],
                                                    [40.586, -30.527]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            },
                                            {
                                              i: { x: 0.667, y: 1 },
                                              o: { x: 0.333, y: 0 },
                                              t: 40,
                                              s: [
                                                {
                                                  i: [
                                                    [1.855, -0.705],
                                                    [0, 0],
                                                    [-2.183, -0.738],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [-0.875, 3.497],
                                                    [0, 0]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [-2.154, 0.818],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [2.872, 2.179],
                                                    [0, 0],
                                                    [0.481, -1.925]
                                                  ],
                                                  v: [
                                                    [38.035, -33.42],
                                                    [-37.035, 3.063],
                                                    [-36.949, 7.686],
                                                    [-19.634, 4.001],
                                                    [26.077, -22.78],
                                                    [-10.322, 8.18],
                                                    [6.485, 31.007],
                                                    [14.396, 28.224],
                                                    [41.29, -30.527]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            },
                                            {
                                              i: { x: 0.667, y: 1 },
                                              o: { x: 0.333, y: 0 },
                                              t: 80,
                                              s: [
                                                {
                                                  i: [
                                                    [1.855, -0.705],
                                                    [0, 0],
                                                    [-2.183, -0.738],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [-0.875, 3.497],
                                                    [0, 0]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [-2.154, 0.818],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [2.872, 2.179],
                                                    [0, 0],
                                                    [0.481, -1.925]
                                                  ],
                                                  v: [
                                                    [36.627, -33.889],
                                                    [-33.514, -12.899],
                                                    [-33.428, -8.276],
                                                    [-16.348, 3.062],
                                                    [26.077, -23.249],
                                                    [-10.322, 8.18],
                                                    [13.997, 28.424],
                                                    [21.908, 25.641],
                                                    [39.882, -30.997]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            },
                                            {
                                              t: 120,
                                              s: [
                                                {
                                                  i: [
                                                    [1.855, -0.705],
                                                    [0, 0],
                                                    [-2.183, -0.738],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [-0.875, 3.497],
                                                    [0, 0]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [-2.154, 0.818],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [2.872, 2.179],
                                                    [0, 0],
                                                    [0.481, -1.925]
                                                  ],
                                                  v: [
                                                    [37.331, -33.42],
                                                    [-38.913, -4.449],
                                                    [-38.827, 0.175],
                                                    [-19.165, 6.817],
                                                    [25.608, -22.075],
                                                    [-9.852, 10.997],
                                                    [17.753, 31.946],
                                                    [25.664, 29.162],
                                                    [40.586, -30.527]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            }
                                          ],
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0.925490255917, 0.972549079446,
                                            0.992156922583, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: {
                                          a: 0,
                                          k: [342.638, 151.172],
                                          ix: 2
                                        },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Group 1",
                                    np: 2,
                                    cix: 2,
                                    bm: 0,
                                    ix: 1,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  },
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 1,
                                          k: [
                                            {
                                              i: { x: 0.667, y: 1 },
                                              o: { x: 0.333, y: 0 },
                                              t: 0,
                                              s: [
                                                {
                                                  i: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  v: [
                                                    [-9.372, -9.313],
                                                    [-10.208, 9.313],
                                                    [10.209, -8]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            },
                                            {
                                              i: { x: 0.667, y: 1 },
                                              o: { x: 0.333, y: 0 },
                                              t: 40,
                                              s: [
                                                {
                                                  i: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  v: [
                                                    [-9.842, -12.13],
                                                    [-14.434, 4.853],
                                                    [8.8, -20.441]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            },
                                            {
                                              i: { x: 0.667, y: 1 },
                                              o: { x: 0.333, y: 0 },
                                              t: 80,
                                              s: [
                                                {
                                                  i: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  v: [
                                                    [-9.842, -12.13],
                                                    [-12.321, 1.801],
                                                    [8.8, -20.441]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            },
                                            {
                                              t: 120,
                                              s: [
                                                {
                                                  i: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  v: [
                                                    [-9.372, -9.313],
                                                    [-10.208, 9.313],
                                                    [10.209, -8]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            }
                                          ],
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0.623529411765, 0.803921628466,
                                            0.886274569642, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: {
                                          a: 0,
                                          k: [342.158, 171.482],
                                          ix: 2
                                        },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Group 2",
                                    np: 2,
                                    cix: 2,
                                    bm: 0,
                                    ix: 2,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  },
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 1,
                                          k: [
                                            {
                                              i: { x: 0.667, y: 1 },
                                              o: { x: 0.333, y: 0 },
                                              t: 0,
                                              s: [
                                                {
                                                  i: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  v: [
                                                    [-23.7, 3.223],
                                                    [-14.984, 26.863],
                                                    [23.7, -26.863]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            },
                                            {
                                              i: { x: 0.667, y: 1 },
                                              o: { x: 0.333, y: 0 },
                                              t: 40,
                                              s: [
                                                {
                                                  i: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  v: [
                                                    [-24.169, 0.407],
                                                    [-19.209, 22.403],
                                                    [24.169, -27.568]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            },
                                            {
                                              i: { x: 0.667, y: 1 },
                                              o: { x: 0.333, y: 0 },
                                              t: 80,
                                              s: [
                                                {
                                                  i: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  v: [
                                                    [-20.883, -0.532],
                                                    [-17.097, 19.352],
                                                    [24.169, -28.037]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            },
                                            {
                                              t: 120,
                                              s: [
                                                {
                                                  i: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                  ],
                                                  v: [
                                                    [-23.7, 3.223],
                                                    [-14.984, 26.863],
                                                    [23.7, -26.863]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            }
                                          ],
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0.760784373564, 0.854902020623,
                                            0.925490255917, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: {
                                          a: 0,
                                          k: [346.815, 153.692],
                                          ix: 2
                                        },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Group 3",
                                    np: 2,
                                    cix: 2,
                                    bm: 0,
                                    ix: 3,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  },
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 1,
                                          k: [
                                            {
                                              i: { x: 0.833, y: 0.833 },
                                              o: { x: 0.167, y: 0.167 },
                                              t: 0,
                                              s: [
                                                {
                                                  i: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [-15.324, 31.173]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [18.88, 1.777],
                                                    [0, 0]
                                                  ],
                                                  v: [
                                                    [19.124, -52.038],
                                                    [-60.461, -19.589],
                                                    [23.373, 71.404],
                                                    [85.168, 13.968]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            },
                                            {
                                              i: { x: 0.833, y: 0.833 },
                                              o: { x: 0.167, y: 0.167 },
                                              t: 40,
                                              s: [
                                                {
                                                  i: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [-15.324, 31.173]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [18.88, 1.777],
                                                    [0, 0]
                                                  ],
                                                  v: [
                                                    [18.713, -53.255],
                                                    [-58.993, -12.591],
                                                    [22.728, 70.773],
                                                    [84.522, 13.337]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            },
                                            {
                                              i: { x: 0.833, y: 0.833 },
                                              o: { x: 0.167, y: 0.167 },
                                              t: 80,
                                              s: [
                                                {
                                                  i: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [-15.324, 31.173]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [18.88, 1.777],
                                                    [0, 0]
                                                  ],
                                                  v: [
                                                    [18.713, -53.255],
                                                    [-55.59, -28.671],
                                                    [30.826, 62.674],
                                                    [86.635, 19.205]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            },
                                            {
                                              t: 120,
                                              s: [
                                                {
                                                  i: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [-15.324, 31.173]
                                                  ],
                                                  o: [
                                                    [0, 0],
                                                    [0, 0],
                                                    [18.88, 1.777],
                                                    [0, 0]
                                                  ],
                                                  v: [
                                                    [19.124, -52.038],
                                                    [-60.461, -19.589],
                                                    [23.373, 71.404],
                                                    [85.168, 13.968]
                                                  ],
                                                  c: true
                                                }
                                              ]
                                            }
                                          ],
                                          ix: 2
                                        },
                                        nm: "Path 1",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.478431402468, 0.682352941176, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: {
                                          a: 0,
                                          k: [363.018, 170.162],
                                          ix: 2
                                        },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Group 4",
                                    np: 2,
                                    cix: 2,
                                    bm: 0,
                                    ix: 4,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  }
                                ],
                                ip: 0,
                                op: 180,
                                st: 0,
                                bm: 0
                              },
                              {
                                ddd: 0,
                                ind: 6,
                                ty: 4,
                                nm: "Layer 6 Outlines",
                                sr: 1,
                                ks: {
                                  o: { a: 0, k: 100, ix: 11 },
                                  r: { a: 0, k: 0, ix: 10 },
                                  p: { a: 0, k: [540, 540, 0], ix: 2 },
                                  a: { a: 0, k: [348.189, 150.845, 0], ix: 1 },
                                  s: { a: 0, k: [426, 426, 100], ix: 6 }
                                },
                                ao: 0,
                                shapes: [
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ind: 0,
                                        ty: "sh",
                                        ix: 1,
                                        ks: {
                                          a: 0,
                                          k: {
                                            i: [
                                              [0, -41.839],
                                              [-41.838, 0],
                                              [0, 41.838],
                                              [41.84, 0]
                                            ],
                                            o: [
                                              [0, 41.838],
                                              [41.84, 0],
                                              [0, -41.839],
                                              [-41.838, 0]
                                            ],
                                            v: [
                                              [-75.756, 0],
                                              [-0.001, 75.757],
                                              [75.756, 0],
                                              [-0.001, -75.757]
                                            ],
                                            c: true
                                          },
                                          ix: 2
                                        },
                                        nm: "Path 2",
                                        mn: "ADBE Vector Shape - Group",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [
                                            0, 0.619607843137, 0.866666726505, 1
                                          ],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: {
                                          a: 0,
                                          k: [348.189, 150.845],
                                          ix: 2
                                        },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Group 1",
                                    np: 2,
                                    cix: 2,
                                    bm: 0,
                                    ix: 1,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  }
                                ],
                                ip: 0,
                                op: 180,
                                st: 0,
                                bm: 0
                              }
                            ],
                            markers: []
                          }}
                          className={classNames(
                            "__wab_instance",
                            sty.lottie__qbhtn
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__x2TYn
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2QkIv
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? " \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645 \u0647\u0645 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u0647\u0627 \u0631\u0648 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634"
                              : " \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645 \u0647\u0645 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u0647\u0627 \u0631\u0648 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634"}
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gwAp7
                        )}
                      >
                        {
                          "\u0648\u0631\u0648\u062f \u0628\u0647 \u0631\u0628\u0627\u062a \u062a\u0644\u06af\u0631\u0627\u0645"
                        }
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yWnyc,
                        {
                          [sty.textnoPartner__yWnycc7PeD]: hasVariant(
                            $state,
                            "noPartner",
                            "noPartner"
                          )
                        }
                      )}
                    >
                      {
                        "\u0628\u0627 \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0631\u0628\u0627\u062a \u062a\u0644\u06af\u0631\u0627\u0645\u060c \u0647\u0645\u0647 \u067e\u06cc\u0627\u0645\u200c\u0647\u0627 \u0631\u0648 \u06cc\u06a9\u062c\u0627 \u0648 \u0628\u062f\u0648\u0646 \u0646\u06af\u0631\u0627\u0646\u06cc \u0627\u0632 \u06af\u0645\u200c\u0634\u062f\u0646 \u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u0646.\r\n\u0628\u0647 \u0639\u0644\u0627\u0648\u0647\u060c \u067e\u06cc\u0627\u0645\u200c\u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631\u06cc \u062f\u0631 \u062f\u0633\u062a\u0631\u0633 \u062e\u0648\u0627\u0647\u06cc \u062f\u0627\u0634\u062a."
                      }
                    </div>
                  </div>
                ) : null}
                <div
                  className={classNames(projectcss.all, sty.freeBox__hN0VM, {
                    [sty.freeBoxlackOfCourseInformation__hN0VM07Srs]:
                      hasVariant(
                        $state,
                        "lackOfCourseInformation",
                        "lackOfCourseInformation"
                      ),
                    [sty.freeBoxnoPartner__hN0VMc7PeD]: hasVariant(
                      $state,
                      "noPartner",
                      "noPartner"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mf5Ow, {
                      [sty.freeBoxlackOfCourseInformation__mf5Ow07Srs]:
                        hasVariant(
                          $state,
                          "lackOfCourseInformation",
                          "lackOfCourseInformation"
                        )
                    })}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iols)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ltGpm,
                          {
                            [sty.freeBoxnoPartner__ltGpMc7PeD]: hasVariant(
                              $state,
                              "noPartner",
                              "noPartner"
                            )
                          }
                        )}
                      >
                        <Icon281Icon
                          className={classNames(projectcss.all, sty.svg__xixaG)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__e9FJp,
                            {
                              [sty.textlackOfCourseInformation__e9FJp07Srs]:
                                hasVariant(
                                  $state,
                                  "lackOfCourseInformation",
                                  "lackOfCourseInformation"
                                )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile") ? (
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return "توصیه امروز";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u062a\u0648\u0635\u06cc\u0647 \u0627\u0645\u0631\u0648\u0632";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          ) : (
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return "توصیه امروز";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u062a\u0648\u0635\u06cc\u0647 \u0627\u0645\u0631\u0648\u0632";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          )}
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xfaVm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cGtLv
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.advices[0].doc;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                </div>
                {(
                  hasVariant(
                    $state,
                    "lackOfCourseInformation",
                    "lackOfCourseInformation"
                  )
                    ? true
                    : hasVariant(globalVariants, "screen", "mobile")
                    ? (() => {
                        try {
                          return $state.cyclebox.cycle != "Pregnancy";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return $state.cyclebox.cycle != "Pregnancy";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1J2Yv, {
                      [sty.freeBoxlackOfCourseInformation___1J2Yv07Srs]:
                        hasVariant(
                          $state,
                          "lackOfCourseInformation",
                          "lackOfCourseInformation"
                        )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4OOqT,
                        {
                          [sty.freeBoxlackOfCourseInformation___4OOqT07Srs]:
                            hasVariant(
                              $state,
                              "lackOfCourseInformation",
                              "lackOfCourseInformation"
                            )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___70Fr
                        )}
                      >
                        <Icon282Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4Unhz
                          )}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4QMIr,
                            {
                              [sty.textnoPartner___4QMIrc7PeD]: hasVariant(
                                $state,
                                "noPartner",
                                "noPartner"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "noPartner", "noPartner") ? (
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return "این روزا باید چیکار کنم؟";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0627\u06cc\u0646 \u0631\u0648\u0632\u0627 \u0628\u0627\u06cc\u062f \u0686\u06cc\u06a9\u0627\u0631 \u06a9\u0646\u0645";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          ) : hasVariant(globalVariants, "screen", "mobile") ? (
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return (
                                      "این روزا برای " +
                                      $state.name +
                                      " چیکار کنم؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u062a\u0648\u0635\u06cc\u0647 \u0627\u0645\u0631\u0648\u0632";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          ) : (
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return (
                                      "این روزا برای " +
                                      $state.name +
                                      " چیکار کنم؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0627\u06cc\u0646 \u0631\u0648\u0632\u0627 \u0628\u0627\u06cc\u062f \u0686\u06cc\u06a9\u0627\u0631 \u06a9\u0646\u0645";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          )}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__e0JxP
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.toDos;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.checkbox,
                                {
                                  [sty.checkboxlackOfCourseInformation]:
                                    hasVariant(
                                      $state,
                                      "lackOfCourseInformation",
                                      "lackOfCourseInformation"
                                    )
                                }
                              ),
                              isChecked:
                                generateStateValueProp($state, [
                                  "checkbox",
                                  __plasmic_idx_0,
                                  "isChecked"
                                ]) ?? false,
                              key: currentIndex,
                              onChange: async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "checkbox",
                                    __plasmic_idx_0,
                                    "isChecked"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async isChecked => {
                                  const $steps = {};

                                  $steps["invokeGlobalAction"] = $state
                                    .checkbox[currentIndex].isChecked
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "POST",
                                            "https://n8n.staas.ir/webhook/hamyar/todo",
                                            undefined,
                                            (() => {
                                              try {
                                                return {
                                                  userId:
                                                    $state.userdata.result.man
                                                      .id,
                                                  todoId: currentItem.id,
                                                  deleteDate: $state.deleteDate
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["invokeGlobalAction"] != null &&
                                    typeof $steps["invokeGlobalAction"] ===
                                      "object" &&
                                    typeof $steps["invokeGlobalAction"].then ===
                                      "function"
                                  ) {
                                    $steps["invokeGlobalAction"] = await $steps[
                                      "invokeGlobalAction"
                                    ];
                                  }

                                  $steps["invokeGlobalAction2"] = !$state
                                    .checkbox[currentIndex].isChecked
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "PUT",
                                            "https://n8n.staas.ir/webhook/task",
                                            undefined,
                                            (() => {
                                              try {
                                                return {
                                                  id: currentItem.id,
                                                  userId:
                                                    $state.userdata.result.man
                                                      .id
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["invokeGlobalAction2"] != null &&
                                    typeof $steps["invokeGlobalAction2"] ===
                                      "object" &&
                                    typeof $steps["invokeGlobalAction2"]
                                      .then === "function"
                                  ) {
                                    $steps["invokeGlobalAction2"] =
                                      await $steps["invokeGlobalAction2"];
                                  }

                                  $steps["invokeGlobalAction3"] = $state
                                    .checkbox[currentIndex].isChecked
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "POST",
                                            "https://api.liom.app/service/log",
                                            undefined,
                                            (() => {
                                              try {
                                                return {
                                                  userId:
                                                    $state.userdata.result.man
                                                      .id,
                                                  pageName: "mainPage",
                                                  action: "checkTodo",
                                                  extraData: {
                                                    refCode: $state.r,
                                                    mobile:
                                                      $state.userdata.result.man
                                                        .mobile,
                                                    todoid: currentItem.id
                                                  }
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return {
                                                  headers: {
                                                    "Content-Type":
                                                      "application/json",
                                                    Authorization:
                                                      "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                                  }
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["invokeGlobalAction3"] != null &&
                                    typeof $steps["invokeGlobalAction3"] ===
                                      "object" &&
                                    typeof $steps["invokeGlobalAction3"]
                                      .then === "function"
                                  ) {
                                    $steps["invokeGlobalAction3"] =
                                      await $steps["invokeGlobalAction3"];
                                  }
                                }).apply(null, eventArgs);
                              }
                            };

                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "checkbox[].isChecked",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobile"
                                    )
                                      ? (() => {
                                          try {
                                            return (
                                              currentItem.is_completed != null
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      : (() => {
                                          try {
                                            return (
                                              currentItem.is_completed != null
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <Checkbox
                                data-plasmic-name={"checkbox"}
                                data-plasmic-override={overrides.checkbox}
                                {...child$Props}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__aqbZi
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__skCw3
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.text;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  {(() => {
                                    try {
                                      return currentItem.action == "copy";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___7UfPx
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__zLwup
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state.p;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___2W2Z3
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___8Kbww
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["runCode"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    customFunction:
                                                      async () => {
                                                        return $$.copyToClipboard(
                                                          $state.p
                                                        );
                                                      }
                                                  };
                                                  return (({
                                                    customFunction
                                                  }) => {
                                                    return customFunction();
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["runCode"] != null &&
                                              typeof $steps["runCode"] ===
                                                "object" &&
                                              typeof $steps["runCode"].then ===
                                                "function"
                                            ) {
                                              $steps["runCode"] = await $steps[
                                                "runCode"
                                              ];
                                            }

                                            $steps["invokeGlobalAction"] =
                                              $steps.runCode == true
                                                ? (() => {
                                                    const actionArgs = {
                                                      args: [
                                                        undefined,
                                                        "\u0645\u062a\u0646 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u06a9\u067e\u06cc \u0634\u062f!",
                                                        "top-left"
                                                      ]
                                                    };
                                                    return $globalActions[
                                                      "Fragment.showToast"
                                                    ]?.apply(null, [
                                                      ...actionArgs.args
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["invokeGlobalAction"] !=
                                                null &&
                                              typeof $steps[
                                                "invokeGlobalAction"
                                              ] === "object" &&
                                              typeof $steps[
                                                "invokeGlobalAction"
                                              ].then === "function"
                                            ) {
                                              $steps["invokeGlobalAction"] =
                                                await $steps[
                                                  "invokeGlobalAction"
                                                ];
                                            }
                                          }}
                                        >
                                          {hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobile"
                                          )
                                            ? "\u06a9\u067e\u06cc \u06a9\u0631\u062f\u0646"
                                            : "\u06a9\u067e\u06cc \u06a9\u0631\u062f\u0646"}
                                        </div>
                                      </div>
                                    </div>
                                  ) : null}
                                </div>
                              </Checkbox>
                            );
                          })();
                        })}
                      </div>
                    </div>
                  </div>
                ) : null}
                {(
                  hasVariant(
                    $state,
                    "lackOfCourseInformation",
                    "lackOfCourseInformation"
                  )
                    ? true
                    : (() => {
                        try {
                          return (
                            $state.cyclebox.cycle != "Pregnancy" &&
                            !$state.userdata.result.todoNotTodoLists.notToDo
                              .length == 0 &&
                            !$state.userdata.result.todoNotTodoLists.todo
                              .length == 0
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rzAf, {
                      [sty.freeBoxlackOfCourseInformation__rzAf07Srs]:
                        hasVariant(
                          $state,
                          "lackOfCourseInformation",
                          "lackOfCourseInformation"
                        )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__x2TPa,
                        {
                          [sty.freeBoxnoPartner__x2TPAc7PeD]: hasVariant(
                            $state,
                            "noPartner",
                            "noPartner"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5W8Zw,
                          {
                            [sty.freeBoxlackOfCourseInformation___5W8Zw07Srs]:
                              hasVariant(
                                $state,
                                "lackOfCourseInformation",
                                "lackOfCourseInformation"
                              ),
                            [sty.freeBoxnoPartner___5W8Zwc7PeD]: hasVariant(
                              $state,
                              "noPartner",
                              "noPartner"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__z49Pw,
                            {
                              [sty.textlackOfCourseInformation__z49Pw07Srs]:
                                hasVariant(
                                  $state,
                                  "lackOfCourseInformation",
                                  "lackOfCourseInformation"
                                ),
                              [sty.textpage_reminder__z49PwslU1R]: hasVariant(
                                $state,
                                "page",
                                "reminder"
                              ),
                              [sty.textreminder__z49PwUHqpO]: hasVariant(
                                $state,
                                "reminder",
                                "reminder"
                              )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile")
                            ? "\u0628\u0627\u06cc\u062f\u200c\u0647\u0627 \u0648 \u0646\u0628\u0627\u06cc\u062f\u200c\u0647\u0627"
                            : "\u0628\u0627\u06cc\u062f\u200c\u0647\u0627 \u0648 \u0646\u0628\u0627\u06cc\u062f\u200c\u0647\u0627\r"}
                        </div>
                      </div>
                      {(
                        hasVariant($state, "noPartner", "noPartner")
                          ? true
                          : hasVariant(
                              $state,
                              "lackOfCourseInformation",
                              "lackOfCourseInformation"
                            )
                          ? true
                          : (() => {
                              try {
                                return (
                                  !$state.userdata.result.todoNotTodoLists.todo
                                    .length == 0 &&
                                  $state.cyclebox.cycle != "Pregnancy"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mdVrf,
                            {
                              [sty.freeBoxlackOfCourseInformation__mdVrf07Srs]:
                                hasVariant(
                                  $state,
                                  "lackOfCourseInformation",
                                  "lackOfCourseInformation"
                                ),
                              [sty.freeBoxnoPartner__mdVrFc7PeD]: hasVariant(
                                $state,
                                "noPartner",
                                "noPartner"
                              )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bQyyx,
                              {
                                [sty.textnoPartner__bQyyxc7PeD]: hasVariant(
                                  $state,
                                  "noPartner",
                                  "noPartner"
                                )
                              }
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "کارهایی که باید برای " +
                                    $state.name +
                                    " انجام بدی:"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u06a9\u0627\u0631\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0627\u0645\u0631\u0648\u0632 \u0645\u0644\u06cc\u06a9\u0627 \u0628\u0627\u06cc\u062f \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u0647 :";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__i8DoG
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "\u0628\u0631\u0627\u06cc \u0628\u0647\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0631\u062f\u0646 \u0631\u0648\u06cc \u0647\u0631 \u0645\u0648\u0636\u0648\u0639 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646 \u0648 \u062a\u0648\u0636\u06cc\u062d\u0627\u062a\u0634 \u0631\u0648 \u0628\u062e\u0648\u0646."
                              : "\u0628\u0631\u0627\u06cc \u0628\u0647\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0631\u062f\u0646 \u0631\u0648\u06cc \u0647\u0631 \u0645\u0648\u0636\u0648\u0639 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646 \u0648 \u062a\u0648\u0636\u06cc\u062d\u0627\u062a\u0634 \u0631\u0648 \u0628\u062e\u0648\u0646."}
                          </div>
                          <Reveal
                            data-plasmic-name={"reveal"}
                            data-plasmic-override={overrides.reveal}
                            className={classNames("__wab_instance", sty.reveal)}
                            triggerOnce={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tkGdc
                              )}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $state.dosAndDonts[
                                      $state.cyclebox.cycle
                                    ].todo;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.useful2
                                    ),
                                    cycle: generateStateValueProp($state, [
                                      "useful2",
                                      __plasmic_idx_0,
                                      "cycle"
                                    ]),
                                    icon: generateStateValueProp($state, [
                                      "useful2",
                                      __plasmic_idx_0,
                                      "icon"
                                    ]),
                                    key: currentIndex,
                                    onClick: async event => {
                                      const $steps = {};

                                      $steps["updateModal2Open"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["modal2", "open"]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateModal2Open"] != null &&
                                        typeof $steps["updateModal2Open"] ===
                                          "object" &&
                                        typeof $steps["updateModal2Open"]
                                          .then === "function"
                                      ) {
                                        $steps["updateModal2Open"] =
                                          await $steps["updateModal2Open"];
                                      }

                                      $steps["updateIndexusefull"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["itemtodo"]
                                              },
                                              operation: 0,
                                              value: currentItem
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateIndexusefull"] != null &&
                                        typeof $steps["updateIndexusefull"] ===
                                          "object" &&
                                        typeof $steps["updateIndexusefull"]
                                          .then === "function"
                                      ) {
                                        $steps["updateIndexusefull"] =
                                          await $steps["updateIndexusefull"];
                                      }
                                    },
                                    onCycleChange: async (
                                      ...eventArgs: any
                                    ) => {
                                      generateStateOnChangeProp($state, [
                                        "useful2",
                                        __plasmic_idx_0,
                                        "cycle"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    onIconChange: async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "useful2",
                                        __plasmic_idx_0,
                                        "icon"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    onTextChange: async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "useful2",
                                        __plasmic_idx_0,
                                        "text"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    text: generateStateValueProp($state, [
                                      "useful2",
                                      __plasmic_idx_0,
                                      "text"
                                    ])
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "useful2[].text",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return currentItem.title;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      },
                                      {
                                        name: "useful2[].icon",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return currentItem.icon;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      },
                                      {
                                        name: "useful2[].cycle",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return (
                                                "بر اساس دوره :" +
                                                ($state.cyclebox.cycle ===
                                                "white"
                                                  ? "عادی"
                                                  : $state.cyclebox.cycle ===
                                                    "fertility"
                                                  ? "تخمک گذاری"
                                                  : $state.cyclebox.cycle ===
                                                    "pms"
                                                  ? "pms"
                                                  : $state.cyclebox.cycle ===
                                                    "blood"
                                                  ? "پریود"
                                                  : $state.cyclebox.cycle ===
                                                    "Pregnancy"
                                                  ? " هفته " +
                                                    $state.pregnancyData[
                                                      $state.pregnancy.week - 1
                                                    ].week +
                                                    " بارداری"
                                                  : "-")
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <Useful
                                      data-plasmic-name={"useful2"}
                                      data-plasmic-override={overrides.useful2}
                                      {...child$Props}
                                    />
                                  );
                                })();
                              })}
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $state.userdata.result
                                      .todoNotTodoLists.todo;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.useful
                                    ),
                                    cycle: generateStateValueProp($state, [
                                      "useful",
                                      __plasmic_idx_0,
                                      "cycle"
                                    ]),
                                    icon: generateStateValueProp($state, [
                                      "useful",
                                      __plasmic_idx_0,
                                      "icon"
                                    ]),
                                    key: currentIndex,
                                    onClick: async event => {
                                      const $steps = {};

                                      $steps["updateModal2Open"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["modal2", "open"]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateModal2Open"] != null &&
                                        typeof $steps["updateModal2Open"] ===
                                          "object" &&
                                        typeof $steps["updateModal2Open"]
                                          .then === "function"
                                      ) {
                                        $steps["updateModal2Open"] =
                                          await $steps["updateModal2Open"];
                                      }

                                      $steps["updateIndexusefull"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["itemtodo"]
                                              },
                                              operation: 0,
                                              value: currentItem
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateIndexusefull"] != null &&
                                        typeof $steps["updateIndexusefull"] ===
                                          "object" &&
                                        typeof $steps["updateIndexusefull"]
                                          .then === "function"
                                      ) {
                                        $steps["updateIndexusefull"] =
                                          await $steps["updateIndexusefull"];
                                      }
                                    },
                                    onCycleChange: async (
                                      ...eventArgs: any
                                    ) => {
                                      generateStateOnChangeProp($state, [
                                        "useful",
                                        __plasmic_idx_0,
                                        "cycle"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    onIconChange: async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "useful",
                                        __plasmic_idx_0,
                                        "icon"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    onTextChange: async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "useful",
                                        __plasmic_idx_0,
                                        "text"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    text: generateStateValueProp($state, [
                                      "useful",
                                      __plasmic_idx_0,
                                      "text"
                                    ])
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "useful[].text",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return currentItem.title;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      },
                                      {
                                        name: "useful[].icon",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return currentItem.icon;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      },
                                      {
                                        name: "useful[].cycle",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return (
                                                "بر اساس دوره :" +
                                                ($state.cyclebox.cycle ===
                                                "white"
                                                  ? "عادی"
                                                  : $state.cyclebox.cycle ===
                                                    "fertility"
                                                  ? "تخمک گذاری"
                                                  : $state.cyclebox.cycle ===
                                                    "pms"
                                                  ? "pms"
                                                  : $state.cyclebox.cycle ===
                                                    "blood"
                                                  ? "پریود"
                                                  : $state.cyclebox.cycle ===
                                                    "Pregnancy"
                                                  ? " هفته " +
                                                    $state.pregnancyData[
                                                      $state.pregnancy.week - 1
                                                    ].week +
                                                    " بارداری"
                                                  : "-")
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <Useful
                                      data-plasmic-name={"useful"}
                                      data-plasmic-override={overrides.useful}
                                      {...child$Props}
                                    />
                                  );
                                })();
                              })}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__w2YQu
                                )}
                              >
                                {"Enter some text"}
                              </div>
                            </div>
                          </Reveal>
                        </div>
                      ) : null}
                      {(
                        hasVariant($state, "noPartner", "noPartner")
                          ? true
                          : hasVariant(
                              $state,
                              "lackOfCourseInformation",
                              "lackOfCourseInformation"
                            )
                          ? true
                          : (() => {
                              try {
                                return (
                                  !$state.userdata.result.todoNotTodoLists
                                    .notToDo.length == 0 &&
                                  $state.cyclebox.cycle != "Pregnancy"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zg2Fg,
                            {
                              [sty.freeBoxlackOfCourseInformation__zg2Fg07Srs]:
                                hasVariant(
                                  $state,
                                  "lackOfCourseInformation",
                                  "lackOfCourseInformation"
                                ),
                              [sty.freeBoxnoPartner__zg2Fgc7PeD]: hasVariant(
                                $state,
                                "noPartner",
                                "noPartner"
                              )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sfnFu,
                              {
                                [sty.textnoPartner__sfnFuc7PeD]: hasVariant(
                                  $state,
                                  "noPartner",
                                  "noPartner"
                                )
                              }
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "کارهایی که نباید برای " +
                                    $state.name +
                                    " انجام بدی:"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u06a9\u0627\u0631\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0627\u0645\u0631\u0648\u0632 \u0645\u0644\u06cc\u06a9\u0627 \u0646\u0628\u0627\u06cc\u062f \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u0647 :";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9LLi,
                              {
                                [sty.textnoPartner___9LLiC7PeD]: hasVariant(
                                  $state,
                                  "noPartner",
                                  "noPartner"
                                )
                              }
                            )}
                          >
                            {
                              "\u0628\u0631\u0627\u06cc \u0628\u0647\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0631\u062f\u0646 \u0631\u0648\u06cc \u0647\u0631 \u0645\u0648\u0636\u0648\u0639 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646 \u0648 \u062a\u0648\u0636\u06cc\u062d\u0627\u062a\u0634 \u0631\u0648 \u0628\u062e\u0648\u0646."
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qskKw
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.dosAndDonts[
                                    $state.cyclebox.cycle
                                  ].notToDo;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.harmful2
                                  ),
                                  cycle: generateStateValueProp($state, [
                                    "harmful2",
                                    __plasmic_idx_0,
                                    "cycle"
                                  ]),
                                  icon: generateStateValueProp($state, [
                                    "harmful2",
                                    __plasmic_idx_0,
                                    "icon"
                                  ]),
                                  key: currentIndex,
                                  onClick: async event => {
                                    const $steps = {};

                                    $steps["updateItemtodo"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["itemtodo"]
                                            },
                                            operation: 0,
                                            value: currentItem
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateItemtodo"] != null &&
                                      typeof $steps["updateItemtodo"] ===
                                        "object" &&
                                      typeof $steps["updateItemtodo"].then ===
                                        "function"
                                    ) {
                                      $steps["updateItemtodo"] = await $steps[
                                        "updateItemtodo"
                                      ];
                                    }

                                    $steps["updateModal2Open"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["modal2", "open"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateModal2Open"] != null &&
                                      typeof $steps["updateModal2Open"] ===
                                        "object" &&
                                      typeof $steps["updateModal2Open"].then ===
                                        "function"
                                    ) {
                                      $steps["updateModal2Open"] = await $steps[
                                        "updateModal2Open"
                                      ];
                                    }
                                  },
                                  onCycleChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "harmful2",
                                      __plasmic_idx_0,
                                      "cycle"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onIconChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "harmful2",
                                      __plasmic_idx_0,
                                      "icon"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onTextChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "harmful2",
                                      __plasmic_idx_0,
                                      "text"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onTitleChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "harmful2",
                                      __plasmic_idx_0,
                                      "title"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  text: generateStateValueProp($state, [
                                    "harmful2",
                                    __plasmic_idx_0,
                                    "text"
                                  ]),
                                  title: generateStateValueProp($state, [
                                    "harmful2",
                                    __plasmic_idx_0,
                                    "title"
                                  ])
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "harmful2[].title",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.title;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "harmful2[].text",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.desc;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "harmful2[].icon",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.icon;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "harmful2[].cycle",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return (
                                              "بر اساس دوره :" +
                                              ($state.cyclebox.cycle === "white"
                                                ? "عادی"
                                                : $state.cyclebox.cycle ===
                                                  "fertility"
                                                ? "تخمک گذاری"
                                                : $state.cyclebox.cycle ===
                                                  "pms"
                                                ? "pms"
                                                : $state.cyclebox.cycle ===
                                                  "blood"
                                                ? "پریود"
                                                : $state.cyclebox.cycle ===
                                                  "Pregnancy"
                                                ? " هفته " +
                                                  $state.pregnancyData[
                                                    $state.pregnancy.week - 1
                                                  ].week +
                                                  " بارداری"
                                                : "-")
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <Harmful
                                    data-plasmic-name={"harmful2"}
                                    data-plasmic-override={overrides.harmful2}
                                    {...child$Props}
                                  />
                                );
                              })();
                            })}
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.userdata.result.todoNotTodoLists
                                    .notToDo;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.harmful
                                  ),
                                  cycle: generateStateValueProp($state, [
                                    "harmful",
                                    __plasmic_idx_0,
                                    "cycle"
                                  ]),
                                  icon: generateStateValueProp($state, [
                                    "harmful",
                                    __plasmic_idx_0,
                                    "icon"
                                  ]),
                                  key: currentIndex,
                                  onClick: async event => {
                                    const $steps = {};

                                    $steps["updateItemtodo"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["itemtodo"]
                                            },
                                            operation: 0,
                                            value: currentItem
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateItemtodo"] != null &&
                                      typeof $steps["updateItemtodo"] ===
                                        "object" &&
                                      typeof $steps["updateItemtodo"].then ===
                                        "function"
                                    ) {
                                      $steps["updateItemtodo"] = await $steps[
                                        "updateItemtodo"
                                      ];
                                    }

                                    $steps["updateModal2Open"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["modal2", "open"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateModal2Open"] != null &&
                                      typeof $steps["updateModal2Open"] ===
                                        "object" &&
                                      typeof $steps["updateModal2Open"].then ===
                                        "function"
                                    ) {
                                      $steps["updateModal2Open"] = await $steps[
                                        "updateModal2Open"
                                      ];
                                    }
                                  },
                                  onCycleChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "harmful",
                                      __plasmic_idx_0,
                                      "cycle"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onIconChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "harmful",
                                      __plasmic_idx_0,
                                      "icon"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onTextChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "harmful",
                                      __plasmic_idx_0,
                                      "text"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onTitleChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "harmful",
                                      __plasmic_idx_0,
                                      "title"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  text: generateStateValueProp($state, [
                                    "harmful",
                                    __plasmic_idx_0,
                                    "text"
                                  ]),
                                  title: generateStateValueProp($state, [
                                    "harmful",
                                    __plasmic_idx_0,
                                    "title"
                                  ])
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "harmful[].title",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.title;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "harmful[].text",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.desc;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "harmful[].icon",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.icon;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "harmful[].cycle",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return (
                                              "بر اساس دوره :" +
                                              ($state.cyclebox.cycle === "white"
                                                ? "عادی"
                                                : $state.cyclebox.cycle ===
                                                  "fertility"
                                                ? "تخمک گذاری"
                                                : $state.cyclebox.cycle ===
                                                  "pms"
                                                ? "pms"
                                                : $state.cyclebox.cycle ===
                                                  "blood"
                                                ? "پریود"
                                                : $state.cyclebox.cycle ===
                                                  "Pregnancy"
                                                ? " هفته " +
                                                  $state.pregnancyData[
                                                    $state.pregnancy.week - 1
                                                  ].week +
                                                  " بارداری"
                                                : "-")
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <Harmful
                                    data-plasmic-name={"harmful"}
                                    data-plasmic-override={overrides.harmful}
                                    {...child$Props}
                                  />
                                );
                              })();
                            })}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__veXrR
                              )}
                            >
                              {"Enter some text"}
                            </div>
                          </div>
                        </div>
                      ) : null}
                      <div
                        data-plasmic-name={"nopartner2"}
                        data-plasmic-override={overrides.nopartner2}
                        className={classNames(projectcss.all, sty.nopartner2, {
                          [sty.nopartner2lackOfCourseInformation]: hasVariant(
                            $state,
                            "lackOfCourseInformation",
                            "lackOfCourseInformation"
                          ),
                          [sty.nopartner2noPartner]: hasVariant(
                            $state,
                            "noPartner",
                            "noPartner"
                          )
                        })}
                      >
                        {(
                          hasVariant($state, "noPartner", "noPartner")
                            ? (() => {
                                try {
                                  return $state.mobile != "";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__csqQx,
                              {
                                [sty.freeBoxnoPartner__csqQXc7PeD]: hasVariant(
                                  $state,
                                  "noPartner",
                                  "noPartner"
                                )
                              }
                            )}
                          >
                            <LottieWrapper
                              animationData={
                                hasVariant($state, "noPartner", "noPartner")
                                  ? {
                                      nm: "Warning",
                                      ddd: 0,
                                      h: 114,
                                      w: 114,
                                      meta: {
                                        g: "@lottiefiles/toolkit-js 0.33.2"
                                      },
                                      layers: [
                                        {
                                          ty: 4,
                                          nm: "Layer 5 Outlines",
                                          sr: 1,
                                          st: 4.00000016292334,
                                          op: 320.000013033867,
                                          ip: 4.00000016292334,
                                          hd: false,
                                          ddd: 0,
                                          bm: 0,
                                          hasMask: false,
                                          ao: 0,
                                          ks: {
                                            a: {
                                              a: 0,
                                              k: [56.897, 56.897, 0],
                                              ix: 1
                                            },
                                            s: {
                                              a: 1,
                                              k: [
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [83, 83, 100],
                                                  t: 26
                                                },
                                                {
                                                  s: [100, 100, 100],
                                                  t: 38.0000015477717
                                                }
                                              ],
                                              ix: 6
                                            },
                                            sk: { a: 0, k: 0 },
                                            p: {
                                              a: 0,
                                              k: [56.853, 56.618, 0],
                                              ix: 2
                                            },
                                            r: { a: 0, k: 0, ix: 10 },
                                            sa: { a: 0, k: 0 },
                                            o: {
                                              a: 1,
                                              k: [
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [0],
                                                  t: 26
                                                },
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [100],
                                                  t: 32
                                                },
                                                { s: [0], t: 38.0000015477717 }
                                              ],
                                              ix: 11
                                            }
                                          },
                                          ef: [],
                                          shapes: [
                                            {
                                              ty: "gr",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Group",
                                              nm: "Group 1",
                                              ix: 1,
                                              cix: 2,
                                              np: 4,
                                              it: [
                                                {
                                                  ty: "sh",
                                                  bm: 0,
                                                  hd: false,
                                                  mn: "ADBE Vector Shape - Group",
                                                  nm: "Path 1",
                                                  ix: 1,
                                                  d: 1,
                                                  ks: {
                                                    a: 0,
                                                    k: {
                                                      c: true,
                                                      i: [
                                                        [28.397, 0],
                                                        [0, -28.397],
                                                        [-28.397, 0],
                                                        [0, 28.397]
                                                      ],
                                                      o: [
                                                        [-28.397, 0],
                                                        [0, 28.397],
                                                        [28.397, 0],
                                                        [0, -28.397]
                                                      ],
                                                      v: [
                                                        [0.001, -51.497],
                                                        [-51.498, 0.001],
                                                        [0.001, 51.497],
                                                        [51.498, 0.001]
                                                      ]
                                                    },
                                                    ix: 2
                                                  }
                                                },
                                                {
                                                  ty: "sh",
                                                  bm: 0,
                                                  hd: false,
                                                  mn: "ADBE Vector Shape - Group",
                                                  nm: "Path 2",
                                                  ix: 2,
                                                  d: 1,
                                                  ks: {
                                                    a: 0,
                                                    k: {
                                                      c: true,
                                                      i: [
                                                        [31.234, 0],
                                                        [0, 31.233],
                                                        [-31.236, 0],
                                                        [0, -31.237]
                                                      ],
                                                      o: [
                                                        [-31.236, 0],
                                                        [0, -31.237],
                                                        [31.234, 0],
                                                        [0, 31.233]
                                                      ],
                                                      v: [
                                                        [0.001, 56.647],
                                                        [-56.647, 0.001],
                                                        [0.001, -56.647],
                                                        [56.647, 0.001]
                                                      ]
                                                    },
                                                    ix: 2
                                                  }
                                                },
                                                {
                                                  ty: "mm",
                                                  bm: 0,
                                                  hd: false,
                                                  mn: "ADBE Vector Filter - Merge",
                                                  nm: "Merge Paths 1",
                                                  mm: 1
                                                },
                                                {
                                                  ty: "fl",
                                                  bm: 0,
                                                  hd: false,
                                                  mn: "ADBE Vector Graphic - Fill",
                                                  nm: "Fill 1",
                                                  c: {
                                                    a: 0,
                                                    k: [0.5098, 0.3294, 0.7765],
                                                    ix: 4
                                                  },
                                                  r: 1,
                                                  o: { a: 0, k: 100, ix: 5 }
                                                },
                                                {
                                                  ty: "tr",
                                                  a: { a: 0, k: [0, 0], ix: 1 },
                                                  s: {
                                                    a: 0,
                                                    k: [100, 100],
                                                    ix: 3
                                                  },
                                                  sk: { a: 0, k: 0, ix: 4 },
                                                  p: {
                                                    a: 0,
                                                    k: [56.897, 56.898],
                                                    ix: 2
                                                  },
                                                  r: { a: 0, k: 0, ix: 6 },
                                                  sa: { a: 0, k: 0, ix: 5 },
                                                  o: { a: 0, k: 100, ix: 7 }
                                                }
                                              ]
                                            }
                                          ],
                                          ind: 1
                                        },
                                        {
                                          ty: 4,
                                          nm: "Layer 2 Outlines",
                                          sr: 1,
                                          st: 0,
                                          op: 316.000012870944,
                                          ip: 0,
                                          hd: false,
                                          ddd: 0,
                                          bm: 0,
                                          hasMask: false,
                                          ao: 0,
                                          ks: {
                                            a: {
                                              a: 0,
                                              k: [56.897, 56.897, 0],
                                              ix: 1
                                            },
                                            s: {
                                              a: 1,
                                              k: [
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [83, 83, 100],
                                                  t: 20
                                                },
                                                {
                                                  s: [100, 100, 100],
                                                  t: 32.0000013033867
                                                }
                                              ],
                                              ix: 6
                                            },
                                            sk: { a: 0, k: 0 },
                                            p: {
                                              a: 0,
                                              k: [56.853, 56.618, 0],
                                              ix: 2
                                            },
                                            r: { a: 0, k: 0, ix: 10 },
                                            sa: { a: 0, k: 0 },
                                            o: {
                                              a: 1,
                                              k: [
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [0],
                                                  t: 20
                                                },
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [100],
                                                  t: 26
                                                },
                                                { s: [0], t: 32.0000013033867 }
                                              ],
                                              ix: 11
                                            }
                                          },
                                          ef: [],
                                          shapes: [
                                            {
                                              ty: "gr",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Group",
                                              nm: "Group 1",
                                              ix: 1,
                                              cix: 2,
                                              np: 4,
                                              it: [
                                                {
                                                  ty: "sh",
                                                  bm: 0,
                                                  hd: false,
                                                  mn: "ADBE Vector Shape - Group",
                                                  nm: "Path 1",
                                                  ix: 1,
                                                  d: 1,
                                                  ks: {
                                                    a: 0,
                                                    k: {
                                                      c: true,
                                                      i: [
                                                        [28.397, 0],
                                                        [0, -28.397],
                                                        [-28.397, 0],
                                                        [0, 28.397]
                                                      ],
                                                      o: [
                                                        [-28.397, 0],
                                                        [0, 28.397],
                                                        [28.397, 0],
                                                        [0, -28.397]
                                                      ],
                                                      v: [
                                                        [0.001, -51.497],
                                                        [-51.498, 0.001],
                                                        [0.001, 51.497],
                                                        [51.498, 0.001]
                                                      ]
                                                    },
                                                    ix: 2
                                                  }
                                                },
                                                {
                                                  ty: "sh",
                                                  bm: 0,
                                                  hd: false,
                                                  mn: "ADBE Vector Shape - Group",
                                                  nm: "Path 2",
                                                  ix: 2,
                                                  d: 1,
                                                  ks: {
                                                    a: 0,
                                                    k: {
                                                      c: true,
                                                      i: [
                                                        [31.234, 0],
                                                        [0, 31.233],
                                                        [-31.236, 0],
                                                        [0, -31.237]
                                                      ],
                                                      o: [
                                                        [-31.236, 0],
                                                        [0, -31.237],
                                                        [31.234, 0],
                                                        [0, 31.233]
                                                      ],
                                                      v: [
                                                        [0.001, 56.647],
                                                        [-56.647, 0.001],
                                                        [0.001, -56.647],
                                                        [56.647, 0.001]
                                                      ]
                                                    },
                                                    ix: 2
                                                  }
                                                },
                                                {
                                                  ty: "mm",
                                                  bm: 0,
                                                  hd: false,
                                                  mn: "ADBE Vector Filter - Merge",
                                                  nm: "Merge Paths 1",
                                                  mm: 1
                                                },
                                                {
                                                  ty: "fl",
                                                  bm: 0,
                                                  hd: false,
                                                  mn: "ADBE Vector Graphic - Fill",
                                                  nm: "Fill 1",
                                                  c: {
                                                    a: 0,
                                                    k: [0.5098, 0.3294, 0.7765],
                                                    ix: 4
                                                  },
                                                  r: 1,
                                                  o: { a: 0, k: 100, ix: 5 }
                                                },
                                                {
                                                  ty: "tr",
                                                  a: { a: 0, k: [0, 0], ix: 1 },
                                                  s: {
                                                    a: 0,
                                                    k: [100, 100],
                                                    ix: 3
                                                  },
                                                  sk: { a: 0, k: 0, ix: 4 },
                                                  p: {
                                                    a: 0,
                                                    k: [56.897, 56.898],
                                                    ix: 2
                                                  },
                                                  r: { a: 0, k: 0, ix: 6 },
                                                  sa: { a: 0, k: 0, ix: 5 },
                                                  o: { a: 0, k: 100, ix: 7 }
                                                }
                                              ]
                                            }
                                          ],
                                          ind: 2
                                        },
                                        {
                                          ty: 4,
                                          nm: "Layer 4 Outlines",
                                          sr: 1,
                                          st: 0,
                                          op: 316.000012870944,
                                          ip: 0,
                                          hd: false,
                                          ddd: 0,
                                          bm: 0,
                                          hasMask: false,
                                          ao: 0,
                                          ks: {
                                            a: {
                                              a: 0,
                                              k: [5.434, 31.682, 0],
                                              ix: 1
                                            },
                                            s: {
                                              a: 1,
                                              k: [
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [100, 100, 100],
                                                  t: 0
                                                },
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [115, 90, 100],
                                                  t: 4
                                                },
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [100, 112, 100],
                                                  t: 8
                                                },
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [100, 112, 100],
                                                  t: 11
                                                },
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [113.333, 94.333, 100],
                                                  t: 13
                                                },
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [100, 112, 100],
                                                  t: 15
                                                },
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [113, 95, 100],
                                                  t: 20
                                                },
                                                {
                                                  s: [100, 100, 100],
                                                  t: 22.0000008960784
                                                }
                                              ],
                                              ix: 6
                                            },
                                            sk: { a: 0, k: 0 },
                                            p: {
                                              a: 1,
                                              k: [
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [57.387, 65.377, 0],
                                                  t: 0,
                                                  ti: [0, 0.835, 0],
                                                  to: [0, -0.35, 0]
                                                },
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [57.387, 65.46, 0],
                                                  t: 4,
                                                  ti: [0, 0.609, 0],
                                                  to: [0, -1.455, 0]
                                                },
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [57.387, 56.377, 0],
                                                  t: 11,
                                                  ti: [0, 0.609, 0],
                                                  to: [0, -0.958, 0]
                                                },
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [57.387, 50.877, 0],
                                                  t: 13,
                                                  ti: [0, 0.609, 0],
                                                  to: [0, -0.958, 0]
                                                },
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [57.387, 56.377, 0],
                                                  t: 15,
                                                  ti: [0, -0.417, 0],
                                                  to: [0, -0.958, 0]
                                                },
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [57.387, 65.627, 0],
                                                  t: 19,
                                                  ti: [0, 0.958, 0],
                                                  to: [0, 0.417, 0]
                                                },
                                                {
                                                  s: [57.387, 65.377, 0],
                                                  t: 22.0000008960784
                                                }
                                              ],
                                              ix: 2
                                            },
                                            r: { a: 0, k: 0, ix: 10 },
                                            sa: { a: 0, k: 0 },
                                            o: { a: 0, k: 100, ix: 11 }
                                          },
                                          ef: [],
                                          shapes: [
                                            {
                                              ty: "gr",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Group",
                                              nm: "Group 1",
                                              ix: 1,
                                              cix: 2,
                                              np: 2,
                                              it: [
                                                {
                                                  ty: "sh",
                                                  bm: 0,
                                                  hd: false,
                                                  mn: "ADBE Vector Shape - Group",
                                                  nm: "Path 1",
                                                  ix: 1,
                                                  d: 1,
                                                  ks: {
                                                    a: 0,
                                                    k: {
                                                      c: true,
                                                      i: [
                                                        [2.878, 0],
                                                        [0, -2.487],
                                                        [0, 0],
                                                        [-2.951, 0],
                                                        [0, 2.426],
                                                        [0, 0]
                                                      ],
                                                      o: [
                                                        [-2.951, 0],
                                                        [0, 0],
                                                        [0, 2.49],
                                                        [2.878, 0],
                                                        [0, 0],
                                                        [0, -2.428]
                                                      ],
                                                      v: [
                                                        [0.001, -15.433],
                                                        [-5.184, -11.406],
                                                        [-5.184, 11.409],
                                                        [0.001, 15.433],
                                                        [5.184, 11.409],
                                                        [5.184, -11.406]
                                                      ]
                                                    },
                                                    ix: 2
                                                  }
                                                },
                                                {
                                                  ty: "fl",
                                                  bm: 0,
                                                  hd: false,
                                                  mn: "ADBE Vector Graphic - Fill",
                                                  nm: "Fill 1",
                                                  c: {
                                                    a: 0,
                                                    k: [1, 1, 1],
                                                    ix: 4
                                                  },
                                                  r: 1,
                                                  o: { a: 0, k: 100, ix: 5 }
                                                },
                                                {
                                                  ty: "tr",
                                                  a: { a: 0, k: [0, 0], ix: 1 },
                                                  s: {
                                                    a: 0,
                                                    k: [100, 100],
                                                    ix: 3
                                                  },
                                                  sk: { a: 0, k: 0, ix: 4 },
                                                  p: {
                                                    a: 0,
                                                    k: [5.433, 15.682],
                                                    ix: 2
                                                  },
                                                  r: { a: 0, k: 0, ix: 6 },
                                                  sa: { a: 0, k: 0, ix: 5 },
                                                  o: { a: 0, k: 100, ix: 7 }
                                                }
                                              ]
                                            }
                                          ],
                                          ind: 3
                                        },
                                        {
                                          ty: 4,
                                          nm: "Layer 3 Outlines",
                                          sr: 1,
                                          st: 0,
                                          op: 316.000012870944,
                                          ip: 0,
                                          hd: false,
                                          ddd: 0,
                                          bm: 0,
                                          hasMask: false,
                                          ao: 0,
                                          ks: {
                                            a: {
                                              a: 0,
                                              k: [5.516, 11.142, 0],
                                              ix: 1
                                            },
                                            s: {
                                              a: 1,
                                              k: [
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [100, 100, 100],
                                                  t: 20
                                                },
                                                {
                                                  o: { x: 0.167, y: 0.167 },
                                                  i: { x: 0.833, y: 0.833 },
                                                  s: [100, 79, 100],
                                                  t: 22
                                                },
                                                {
                                                  s: [100, 100, 100],
                                                  t: 24.00000097754
                                                }
                                              ],
                                              ix: 6
                                            },
                                            sk: { a: 0, k: 0 },
                                            p: {
                                              a: 0,
                                              k: [57.011, 80.341, 0],
                                              ix: 2
                                            },
                                            r: { a: 0, k: 0, ix: 10 },
                                            sa: { a: 0, k: 0 },
                                            o: { a: 0, k: 100, ix: 11 }
                                          },
                                          ef: [],
                                          shapes: [
                                            {
                                              ty: "gr",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Group",
                                              nm: "Group 1",
                                              ix: 1,
                                              cix: 2,
                                              np: 2,
                                              it: [
                                                {
                                                  ty: "sh",
                                                  bm: 0,
                                                  hd: false,
                                                  mn: "ADBE Vector Shape - Group",
                                                  nm: "Path 1",
                                                  ix: 1,
                                                  d: 1,
                                                  ks: {
                                                    a: 0,
                                                    k: {
                                                      c: true,
                                                      i: [
                                                        [2.834, 0],
                                                        [0, -2.837],
                                                        [-2.835, 0],
                                                        [0, 2.833]
                                                      ],
                                                      o: [
                                                        [-2.835, 0],
                                                        [0, 2.833],
                                                        [2.834, 0],
                                                        [0, -2.837]
                                                      ],
                                                      v: [
                                                        [0.002, -5.142],
                                                        [-5.141, 0.003],
                                                        [0.002, 5.142],
                                                        [5.141, 0.003]
                                                      ]
                                                    },
                                                    ix: 2
                                                  }
                                                },
                                                {
                                                  ty: "fl",
                                                  bm: 0,
                                                  hd: false,
                                                  mn: "ADBE Vector Graphic - Fill",
                                                  nm: "Fill 1",
                                                  c: {
                                                    a: 0,
                                                    k: [1, 1, 1],
                                                    ix: 4
                                                  },
                                                  r: 1,
                                                  o: { a: 0, k: 100, ix: 5 }
                                                },
                                                {
                                                  ty: "tr",
                                                  a: { a: 0, k: [0, 0], ix: 1 },
                                                  s: {
                                                    a: 0,
                                                    k: [100, 100],
                                                    ix: 3
                                                  },
                                                  sk: { a: 0, k: 0, ix: 4 },
                                                  p: {
                                                    a: 0,
                                                    k: [5.391, 5.392],
                                                    ix: 2
                                                  },
                                                  r: { a: 0, k: 0, ix: 6 },
                                                  sa: { a: 0, k: 0, ix: 5 },
                                                  o: { a: 0, k: 100, ix: 7 }
                                                }
                                              ]
                                            }
                                          ],
                                          ind: 4
                                        },
                                        {
                                          ty: 4,
                                          nm: "Layer 1 Outlines",
                                          sr: 1,
                                          st: 0,
                                          op: 316.000012870944,
                                          ip: 0,
                                          hd: false,
                                          ddd: 0,
                                          bm: 0,
                                          hasMask: false,
                                          ao: 0,
                                          ks: {
                                            a: {
                                              a: 0,
                                              k: [41.449, 41.449, 0],
                                              ix: 1
                                            },
                                            s: {
                                              a: 0,
                                              k: [100, 100, 100],
                                              ix: 6
                                            },
                                            sk: { a: 0, k: 0 },
                                            p: {
                                              a: 0,
                                              k: [56.854, 56.618, 0],
                                              ix: 2
                                            },
                                            r: { a: 0, k: 0, ix: 10 },
                                            sa: { a: 0, k: 0 },
                                            o: { a: 0, k: 100, ix: 11 }
                                          },
                                          ef: [],
                                          shapes: [
                                            {
                                              ty: "gr",
                                              bm: 0,
                                              hd: false,
                                              mn: "ADBE Vector Group",
                                              nm: "Group 1",
                                              ix: 1,
                                              cix: 2,
                                              np: 2,
                                              it: [
                                                {
                                                  ty: "sh",
                                                  bm: 0,
                                                  hd: false,
                                                  mn: "ADBE Vector Shape - Group",
                                                  nm: "Path 1",
                                                  ix: 1,
                                                  d: 1,
                                                  ks: {
                                                    a: 0,
                                                    k: {
                                                      c: true,
                                                      i: [
                                                        [-22.753, 0],
                                                        [0, -22.753],
                                                        [22.754, 0],
                                                        [0, 22.754]
                                                      ],
                                                      o: [
                                                        [22.754, 0],
                                                        [0, 22.754],
                                                        [-22.753, 0],
                                                        [0, -22.753]
                                                      ],
                                                      v: [
                                                        [0, -41.199],
                                                        [41.199, 0],
                                                        [0, 41.199],
                                                        [-41.199, 0]
                                                      ]
                                                    },
                                                    ix: 2
                                                  }
                                                },
                                                {
                                                  ty: "fl",
                                                  bm: 0,
                                                  hd: false,
                                                  mn: "ADBE Vector Graphic - Fill",
                                                  nm: "Fill 1",
                                                  c: {
                                                    a: 0,
                                                    k: [0.5098, 0.3294, 0.7765],
                                                    ix: 4
                                                  },
                                                  r: 1,
                                                  o: { a: 0, k: 100, ix: 5 }
                                                },
                                                {
                                                  ty: "tr",
                                                  a: { a: 0, k: [0, 0], ix: 1 },
                                                  s: {
                                                    a: 0,
                                                    k: [100, 100],
                                                    ix: 3
                                                  },
                                                  sk: { a: 0, k: 0, ix: 4 },
                                                  p: {
                                                    a: 0,
                                                    k: [41.449, 41.449],
                                                    ix: 2
                                                  },
                                                  r: { a: 0, k: 0, ix: 6 },
                                                  sa: { a: 0, k: 0, ix: 5 },
                                                  o: { a: 0, k: 100, ix: 7 }
                                                }
                                              ]
                                            }
                                          ],
                                          ind: 5
                                        }
                                      ],
                                      v: "5.5.9",
                                      fr: 29.9700012207031,
                                      op: 38.0000015477717,
                                      ip: 0,
                                      assets: []
                                    }
                                  : {
                                      v: "4.10.1",
                                      fr: 30,
                                      ip: 0,
                                      op: 40,
                                      w: 80,
                                      h: 80,
                                      nm: "Success Checkmark",
                                      ddd: 0,
                                      assets: [],
                                      layers: [
                                        {
                                          ddd: 0,
                                          ind: 1,
                                          ty: 4,
                                          nm: "Check Mark",
                                          sr: 1,
                                          ks: {
                                            o: { a: 0, k: 100, ix: 11 },
                                            r: { a: 0, k: 0, ix: 10 },
                                            p: { a: 0, k: [40, 40, 0], ix: 2 },
                                            a: {
                                              a: 0,
                                              k: [-1.312, 6, 0],
                                              ix: 1
                                            },
                                            s: {
                                              a: 0,
                                              k: [100, 100, 100],
                                              ix: 6
                                            }
                                          },
                                          ao: 0,
                                          shapes: [
                                            {
                                              ty: "gr",
                                              it: [
                                                {
                                                  ind: 0,
                                                  ty: "sh",
                                                  ix: 1,
                                                  ks: {
                                                    a: 0,
                                                    k: {
                                                      i: [
                                                        [0, 0],
                                                        [0, 0],
                                                        [0, 0]
                                                      ],
                                                      o: [
                                                        [0, 0],
                                                        [0, 0],
                                                        [0, 0]
                                                      ],
                                                      v: [
                                                        [-15.75, 8],
                                                        [-8, 16],
                                                        [13.125, -4]
                                                      ],
                                                      c: false
                                                    },
                                                    ix: 2
                                                  },
                                                  nm: "Path 1",
                                                  mn: "ADBE Vector Shape - Group",
                                                  hd: false
                                                },
                                                {
                                                  ty: "tm",
                                                  s: {
                                                    a: 1,
                                                    k: [
                                                      {
                                                        i: {
                                                          x: [0.667],
                                                          y: [1]
                                                        },
                                                        o: {
                                                          x: [0.333],
                                                          y: [0]
                                                        },
                                                        n: ["0p667_1_0p333_0"],
                                                        t: 25,
                                                        s: [0],
                                                        e: [100]
                                                      },
                                                      { t: 33 }
                                                    ],
                                                    ix: 1
                                                  },
                                                  e: { a: 0, k: 0, ix: 2 },
                                                  o: { a: 0, k: 0, ix: 3 },
                                                  m: 1,
                                                  ix: 2,
                                                  nm: "Trim Paths 1",
                                                  mn: "ADBE Vector Filter - Trim",
                                                  hd: false
                                                },
                                                {
                                                  ty: "st",
                                                  c: {
                                                    a: 0,
                                                    k: [1, 1, 1, 1],
                                                    ix: 3
                                                  },
                                                  o: { a: 0, k: 100, ix: 4 },
                                                  w: { a: 0, k: 3, ix: 5 },
                                                  lc: 2,
                                                  lj: 2,
                                                  nm: "Stroke 1",
                                                  mn: "ADBE Vector Graphic - Stroke",
                                                  hd: false
                                                },
                                                {
                                                  ty: "tr",
                                                  p: { a: 0, k: [0, 0], ix: 2 },
                                                  a: { a: 0, k: [0, 0], ix: 1 },
                                                  s: {
                                                    a: 0,
                                                    k: [100, 100],
                                                    ix: 3
                                                  },
                                                  r: { a: 0, k: 0, ix: 6 },
                                                  o: { a: 0, k: 100, ix: 7 },
                                                  sk: { a: 0, k: 0, ix: 4 },
                                                  sa: { a: 0, k: 0, ix: 5 },
                                                  nm: "Transform"
                                                }
                                              ],
                                              nm: "Shape 1",
                                              np: 3,
                                              cix: 2,
                                              ix: 1,
                                              mn: "ADBE Vector Group",
                                              hd: false
                                            }
                                          ],
                                          ip: 0,
                                          op: 40,
                                          st: 0,
                                          bm: 0
                                        },
                                        {
                                          ddd: 0,
                                          ind: 2,
                                          ty: 4,
                                          nm: "Circle Flash",
                                          sr: 1,
                                          ks: {
                                            o: {
                                              a: 1,
                                              k: [
                                                {
                                                  i: { x: [0.833], y: [0.833] },
                                                  o: { x: [0.167], y: [0.167] },
                                                  n: [
                                                    "0p833_0p833_0p167_0p167"
                                                  ],
                                                  t: 25,
                                                  s: [0],
                                                  e: [98]
                                                },
                                                {
                                                  i: { x: [0.833], y: [0.833] },
                                                  o: { x: [0.167], y: [0.167] },
                                                  n: [
                                                    "0p833_0p833_0p167_0p167"
                                                  ],
                                                  t: 30,
                                                  s: [98],
                                                  e: [0]
                                                },
                                                { t: 38 }
                                              ],
                                              ix: 11
                                            },
                                            r: { a: 0, k: 0, ix: 10 },
                                            p: { a: 0, k: [40, 40, 0], ix: 2 },
                                            a: { a: 0, k: [0, 0, 0], ix: 1 },
                                            s: {
                                              a: 1,
                                              k: [
                                                {
                                                  i: {
                                                    x: [0.667, 0.667, 0.667],
                                                    y: [1, 1, 1]
                                                  },
                                                  o: {
                                                    x: [0.333, 0.333, 0.333],
                                                    y: [0, 0, 0]
                                                  },
                                                  n: [
                                                    "0p667_1_0p333_0",
                                                    "0p667_1_0p333_0",
                                                    "0p667_1_0p333_0"
                                                  ],
                                                  t: 25,
                                                  s: [0, 0, 100],
                                                  e: [100, 100, 100]
                                                },
                                                { t: 30 }
                                              ],
                                              ix: 6
                                            }
                                          },
                                          ao: 0,
                                          shapes: [
                                            {
                                              d: 1,
                                              ty: "el",
                                              s: { a: 0, k: [64, 64], ix: 2 },
                                              p: { a: 0, k: [0, 0], ix: 3 },
                                              nm: "Ellipse Path 1",
                                              mn: "ADBE Vector Shape - Ellipse",
                                              hd: false
                                            },
                                            {
                                              ty: "fl",
                                              c: {
                                                a: 0,
                                                k: [
                                                  0.529866635799,
                                                  0.961458325386,
                                                  0.448091417551, 1
                                                ],
                                                ix: 4
                                              },
                                              o: { a: 0, k: 100, ix: 5 },
                                              r: 1,
                                              nm: "Fill 1",
                                              mn: "ADBE Vector Graphic - Fill",
                                              hd: false
                                            }
                                          ],
                                          ip: 0,
                                          op: 40,
                                          st: 0,
                                          bm: 0
                                        },
                                        {
                                          ddd: 0,
                                          ind: 3,
                                          ty: 4,
                                          nm: "Circle Stroke",
                                          sr: 1,
                                          ks: {
                                            o: { a: 0, k: 100, ix: 11 },
                                            r: { a: 0, k: 0, ix: 10 },
                                            p: {
                                              a: 0,
                                              k: [39.022, 39.022, 0],
                                              ix: 2
                                            },
                                            a: { a: 0, k: [0, 0, 0], ix: 1 },
                                            s: {
                                              a: 1,
                                              k: [
                                                {
                                                  i: {
                                                    x: [0.667, 0.667, 0.667],
                                                    y: [1, 1, 1]
                                                  },
                                                  o: {
                                                    x: [0.333, 0.333, 0.333],
                                                    y: [0, 0, 0]
                                                  },
                                                  n: [
                                                    "0p667_1_0p333_0",
                                                    "0p667_1_0p333_0",
                                                    "0p667_1_0p333_0"
                                                  ],
                                                  t: 16,
                                                  s: [100, 100, 100],
                                                  e: [80, 80, 100]
                                                },
                                                {
                                                  i: {
                                                    x: [0.667, 0.667, 0.667],
                                                    y: [1, 1, 1]
                                                  },
                                                  o: {
                                                    x: [0.333, 0.333, 0.333],
                                                    y: [0, 0, 0]
                                                  },
                                                  n: [
                                                    "0p667_1_0p333_0",
                                                    "0p667_1_0p333_0",
                                                    "0p667_1_0p333_0"
                                                  ],
                                                  t: 22,
                                                  s: [80, 80, 100],
                                                  e: [120, 120, 100]
                                                },
                                                {
                                                  i: {
                                                    x: [0.667, 0.667, 0.667],
                                                    y: [1, 1, 1]
                                                  },
                                                  o: {
                                                    x: [0.333, 0.333, 0.333],
                                                    y: [0, 0, 0]
                                                  },
                                                  n: [
                                                    "0p667_1_0p333_0",
                                                    "0p667_1_0p333_0",
                                                    "0p667_1_0p333_0"
                                                  ],
                                                  t: 25,
                                                  s: [120, 120, 100],
                                                  e: [100, 100, 100]
                                                },
                                                { t: 29 }
                                              ],
                                              ix: 6
                                            }
                                          },
                                          ao: 0,
                                          shapes: [
                                            {
                                              ty: "gr",
                                              it: [
                                                {
                                                  d: 1,
                                                  ty: "el",
                                                  s: {
                                                    a: 0,
                                                    k: [60, 60],
                                                    ix: 2
                                                  },
                                                  p: { a: 0, k: [0, 0], ix: 3 },
                                                  nm: "Ellipse Path 1",
                                                  mn: "ADBE Vector Shape - Ellipse",
                                                  hd: false
                                                },
                                                {
                                                  ty: "tm",
                                                  s: {
                                                    a: 1,
                                                    k: [
                                                      {
                                                        i: {
                                                          x: [0.667],
                                                          y: [1]
                                                        },
                                                        o: {
                                                          x: [0.333],
                                                          y: [0]
                                                        },
                                                        n: ["0p667_1_0p333_0"],
                                                        t: 0,
                                                        s: [0],
                                                        e: [100]
                                                      },
                                                      { t: 16 }
                                                    ],
                                                    ix: 1
                                                  },
                                                  e: { a: 0, k: 0, ix: 2 },
                                                  o: { a: 0, k: 0, ix: 3 },
                                                  m: 1,
                                                  ix: 2,
                                                  nm: "Trim Paths 1",
                                                  mn: "ADBE Vector Filter - Trim",
                                                  hd: false
                                                },
                                                {
                                                  ty: "st",
                                                  c: {
                                                    a: 0,
                                                    k: [
                                                      0.427450984716,
                                                      0.800000011921,
                                                      0.35686275363, 1
                                                    ],
                                                    ix: 3
                                                  },
                                                  o: { a: 0, k: 100, ix: 4 },
                                                  w: { a: 0, k: 3, ix: 5 },
                                                  lc: 2,
                                                  lj: 2,
                                                  nm: "Stroke 1",
                                                  mn: "ADBE Vector Graphic - Stroke",
                                                  hd: false
                                                },
                                                {
                                                  ty: "tr",
                                                  p: {
                                                    a: 0,
                                                    k: [0.978, 0.978],
                                                    ix: 2
                                                  },
                                                  a: { a: 0, k: [0, 0], ix: 1 },
                                                  s: {
                                                    a: 0,
                                                    k: [100, 100],
                                                    ix: 3
                                                  },
                                                  r: { a: 0, k: 0, ix: 6 },
                                                  o: { a: 0, k: 100, ix: 7 },
                                                  sk: { a: 0, k: 0, ix: 4 },
                                                  sa: { a: 0, k: 0, ix: 5 },
                                                  nm: "Transform"
                                                }
                                              ],
                                              nm: "Ellipse 1",
                                              np: 3,
                                              cix: 2,
                                              ix: 1,
                                              mn: "ADBE Vector Group",
                                              hd: false
                                            }
                                          ],
                                          ip: 0,
                                          op: 40,
                                          st: 0,
                                          bm: 0
                                        },
                                        {
                                          ddd: 0,
                                          ind: 4,
                                          ty: 4,
                                          nm: "Circle Green Fill",
                                          sr: 1,
                                          ks: {
                                            o: {
                                              a: 1,
                                              k: [
                                                {
                                                  i: { x: [0.833], y: [0.833] },
                                                  o: { x: [0.167], y: [0.167] },
                                                  n: [
                                                    "0p833_0p833_0p167_0p167"
                                                  ],
                                                  t: 21,
                                                  s: [0],
                                                  e: [98]
                                                },
                                                { t: 28 }
                                              ],
                                              ix: 11
                                            },
                                            r: { a: 0, k: 0, ix: 10 },
                                            p: { a: 0, k: [40, 40, 0], ix: 2 },
                                            a: { a: 0, k: [0, 0, 0], ix: 1 },
                                            s: {
                                              a: 1,
                                              k: [
                                                {
                                                  i: {
                                                    x: [0.667, 0.667, 0.667],
                                                    y: [1, 1, 1]
                                                  },
                                                  o: {
                                                    x: [0.333, 0.333, 0.333],
                                                    y: [0, 0, 0]
                                                  },
                                                  n: [
                                                    "0p667_1_0p333_0",
                                                    "0p667_1_0p333_0",
                                                    "0p667_1_0p333_0"
                                                  ],
                                                  t: 21,
                                                  s: [0, 0, 100],
                                                  e: [100, 100, 100]
                                                },
                                                { t: 28 }
                                              ],
                                              ix: 6
                                            }
                                          },
                                          ao: 0,
                                          shapes: [
                                            {
                                              d: 1,
                                              ty: "el",
                                              s: { a: 0, k: [64, 64], ix: 2 },
                                              p: { a: 0, k: [0, 0], ix: 3 },
                                              nm: "Ellipse Path 1",
                                              mn: "ADBE Vector Shape - Ellipse",
                                              hd: false
                                            },
                                            {
                                              ty: "fl",
                                              c: {
                                                a: 0,
                                                k: [
                                                  0.427450984716,
                                                  0.800000011921, 0.35686275363,
                                                  1
                                                ],
                                                ix: 4
                                              },
                                              o: { a: 0, k: 100, ix: 5 },
                                              r: 1,
                                              nm: "Fill 1",
                                              mn: "ADBE Vector Graphic - Fill",
                                              hd: false
                                            }
                                          ],
                                          ip: 0,
                                          op: 40,
                                          st: 0,
                                          bm: 0
                                        }
                                      ]
                                    }
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.lottie__fJkW6,
                                {
                                  [sty.lottienoPartner__fJkW6C7PeD]: hasVariant(
                                    $state,
                                    "noPartner",
                                    "noPartner"
                                  )
                                }
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sJDp2,
                                {
                                  [sty.textnoPartner__sJDp2C7PeD]: hasVariant(
                                    $state,
                                    "noPartner",
                                    "noPartner"
                                  )
                                }
                              )}
                            >
                              {hasVariant($state, "noPartner", "noPartner")
                                ? "\u0644\u0637\u0641\u0627 \u0627\u0632 \u0647\u0645\u0633\u0631 \u062e\u0648\u062f \u0628\u062e\u0648\u0627\u0647\u06cc\u062f \u062a\u0627 \u0627\u0632 \u0637\u0631\u06cc\u0642 \u0627\u067e\u0644\u06cc\u06a9\u06cc\u0634\u0646 \u0644\u06cc\u0648\u0645 \u0634\u0645\u0627 \u0631\u0627 \u0628\u0639\u0646\u0648\u0627\u0646 \u0647\u0645\u06cc\u0627\u0631 \u062e\u0648\u062f \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646\u062f"
                                : "Enter some text"}
                            </div>
                          </div>
                        ) : null}
                        {(
                          hasVariant($state, "noPartner", "noPartner")
                            ? (() => {
                                try {
                                  return $state.mobile == "";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__n6V4T,
                              {
                                [sty.freeBoxnoPartner__n6V4Tc7PeD]: hasVariant(
                                  $state,
                                  "noPartner",
                                  "noPartner"
                                )
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xqm9Z,
                                {
                                  [sty.textnoPartner__xqm9Zc7PeD]: hasVariant(
                                    $state,
                                    "noPartner",
                                    "noPartner"
                                  )
                                }
                              )}
                            >
                              {hasVariant($state, "noPartner", "noPartner")
                                ? "\u0644\u0637\u0641\u0627\u064b \u0628\u0631\u0627\u06cc \u0634\u0646\u0627\u0633\u0627\u06cc\u06cc \u0647\u0645\u06cc\u0627\u0631\u060c \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                : "Enter some text"}
                            </div>
                            <Button
                              data-plasmic-name={"button20"}
                              data-plasmic-override={overrides.button20}
                              className={classNames(
                                "__wab_instance",
                                sty.button20,
                                {
                                  [sty.button20noPartner]: hasVariant(
                                    $state,
                                    "noPartner",
                                    "noPartner"
                                  )
                                }
                              )}
                              color={generateStateValueProp($state, [
                                "button20",
                                "color"
                              ])}
                              load={generateStateValueProp($state, [
                                "button20",
                                "load"
                              ])}
                              loading={generateStateValueProp($state, [
                                "button20",
                                "loading"
                              ])}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateMobileDialogOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["mobileDialog", "open"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateMobileDialogOpen"] != null &&
                                  typeof $steps["updateMobileDialogOpen"] ===
                                    "object" &&
                                  typeof $steps["updateMobileDialogOpen"]
                                    .then === "function"
                                ) {
                                  $steps["updateMobileDialogOpen"] =
                                    await $steps["updateMobileDialogOpen"];
                                }
                              }}
                              onColorChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button20",
                                    "color"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              onLoadChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button20",
                                    "load"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              onLoadingChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button20",
                                    "loading"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__aT8Af,
                                  {
                                    [sty.textnoPartner__aT8Afc7PeD]: hasVariant(
                                      $state,
                                      "noPartner",
                                      "noPartner"
                                    )
                                  }
                                )}
                              >
                                {
                                  "\u062b\u0628\u062a \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647 "
                                }
                              </div>
                            </Button>
                          </div>
                        ) : null}
                      </div>
                    </div>
                  </div>
                ) : null}
                <AntdModal
                  data-plasmic-name={"shopModalWeb"}
                  data-plasmic-override={overrides.shopModalWeb}
                  className={classNames("__wab_instance", sty.shopModalWeb)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    styleTokensClassNames,
                    styleTokensClassNames_antd_5_hostless,
                    styleTokensClassNames_plasmic_rich_components
                  )}
                  hideFooter={true}
                  maskClosable={true}
                  modalContentClassName={classNames({
                    [sty["pcls_xaKEkVFm-OWS"]]: true
                  })}
                  modalScopeClassName={sty["shopModalWeb__modal"]}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "shopModalWeb",
                      "open"
                    ]).apply(null, eventArgs);
                  }}
                  open={generateStateValueProp($state, [
                    "shopModalWeb",
                    "open"
                  ])}
                  title={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ghRJ)}
                    />
                  }
                  trigger={null}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zXus)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.shapData.result;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.subscription
                          ),
                          clickitem: generateStateValueProp($state, [
                            "subscription",
                            __plasmic_idx_0,
                            "clickitem"
                          ]),
                          discount: generateStateValueProp($state, [
                            "subscription",
                            __plasmic_idx_0,
                            "discount"
                          ]),
                          fullprice: generateStateValueProp($state, [
                            "subscription",
                            __plasmic_idx_0,
                            "fullprice"
                          ]),
                          key: currentIndex,
                          onClick: async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        for (
                                          let i = 0;
                                          i < $state.subscription.length;
                                          i++
                                        ) {
                                          $state.subscription[i].clickitem =
                                            false;
                                        }
                                        $state.subscription[
                                          currentIndex
                                        ].clickitem = true;
                                        $state.subscriptionCurrentIndex = [
                                          currentIndex
                                        ];
                                        return ($state.buyId = currentItem.id);
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          },
                          onClickitemChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "subscription",
                              __plasmic_idx_0,
                              "clickitem"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onDiscountChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "subscription",
                              __plasmic_idx_0,
                              "discount"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onFullpriceChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "subscription",
                              __plasmic_idx_0,
                              "fullprice"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onPriceChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "subscription",
                              __plasmic_idx_0,
                              "price"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onTitleChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "subscription",
                              __plasmic_idx_0,
                              "title"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          price: generateStateValueProp($state, [
                            "subscription",
                            __plasmic_idx_0,
                            "price"
                          ]),
                          title: generateStateValueProp($state, [
                            "subscription",
                            __plasmic_idx_0,
                            "title"
                          ])
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "subscription[].clickitem",
                              initFunc: ({ $props, $state, $queries }) => false
                            },
                            {
                              name: "subscription[].title",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                            },
                            {
                              name: "subscription[].price",
                              initFunc: ({ $props, $state, $queries }) =>
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? (() => {
                                      try {
                                        return currentItem.price.toLocaleString(
                                          "en-US"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return 120000;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return currentItem.price.toLocaleString(
                                          "en-US"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return 120000;
                                        }
                                        throw e;
                                      }
                                    })()
                            },
                            {
                              name: "subscription[].discount",
                              initFunc: ({ $props, $state, $queries }) =>
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? (() => {
                                      try {
                                        return currentItem.badge
                                          ? currentItem.badge
                                          : "";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return ``;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return currentItem.badge
                                          ? currentItem.badge
                                          : "";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "-";
                                        }
                                        throw e;
                                      }
                                    })()
                            },
                            {
                              name: "subscription[].fullprice",
                              initFunc: ({ $props, $state, $queries }) =>
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? (() => {
                                      try {
                                        return currentItem.fullPrice
                                          ? currentItem.fullPrice.toLocaleString(
                                              "en-US"
                                            )
                                          : currentItem.price.toLocaleString(
                                              "en-US"
                                            );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return 0;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return currentItem.fullPrice
                                          ? currentItem.fullPrice.toLocaleString(
                                              "en-US"
                                            )
                                          : currentItem.price.toLocaleString(
                                              "en-US"
                                            );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return 0;
                                        }
                                        throw e;
                                      }
                                    })()
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <Subscription
                            data-plasmic-name={"subscription"}
                            data-plasmic-override={overrides.subscription}
                            {...child$Props}
                          >
                            {(
                              hasVariant(globalVariants, "screen", "mobile")
                                ? (() => {
                                    try {
                                      return $state.shopDialog.data.result.find(
                                        item => item.selected === 1
                                      ).topBadge
                                        ? true
                                        : false;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                                : (() => {
                                    try {
                                      return currentItem.topBadge
                                        ? true
                                        : false;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__icjMp
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___4ReU
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.topBadge;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            ) : null}
                          </Subscription>
                        );
                      })();
                    })}
                  </div>
                  <Button
                    data-plasmic-name={"button3"}
                    data-plasmic-override={overrides.button3}
                    className={classNames("__wab_instance", sty.button3)}
                    color={generateStateValueProp($state, ["button3", "color"])}
                    endIcon={
                      <Icon12Icon
                        className={classNames(projectcss.all, sty.svg__iArUl)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return $state.loadingshop;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    load={generateStateValueProp($state, ["button3", "load"])}
                    loading={generateStateValueProp($state, [
                      "button3",
                      "loading"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadingshop"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadingshop"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadingshop"] != null &&
                        typeof $steps["updateLoadingshop"] === "object" &&
                        typeof $steps["updateLoadingshop"].then === "function"
                      ) {
                        $steps["updateLoadingshop"] = await $steps[
                          "updateLoadingshop"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      id: $state.buyId,
                                      offCode: $state.discountCode,
                                      refCode:
                                        $state.userdata.result.man.refCode,
                                      redirectUrl:
                                        "https://apps.liom.app/shop-result?r=" +
                                        $state.userdata.result.man.refCode +
                                        "&buyId=" +
                                        $state.buyId +
                                        "&offCode=" +
                                        $state.discountCode +
                                        "&valueShop=" +
                                        $state.shapData.result[
                                          $state.subscriptionCurrentIndex
                                        ].type +
                                        "-" +
                                        $state.shapData.result[
                                          $state.subscriptionCurrentIndex
                                        ].value +
                                        "&price=" +
                                        $state.shapData.result[
                                          $state.subscriptionCurrentIndex
                                        ].price +
                                        "&manId=" +
                                        $state.userdata.result.man.id
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization: $state.tokenUser
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["goToPage"] =
                        $steps.invokeGlobalAction?.data?.success == true &&
                        $steps.invokeGlobalAction?.data?.result != false
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return $steps.invokeGlobalAction.data
                                      .result;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["updateLoadingshop2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadingshop"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadingshop2"] != null &&
                        typeof $steps["updateLoadingshop2"] === "object" &&
                        typeof $steps["updateLoadingshop2"].then === "function"
                      ) {
                        $steps["updateLoadingshop2"] = await $steps[
                          "updateLoadingshop2"
                        ];
                      }

                      $steps["updateShopModalWebOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["shopModalWeb", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateShopModalWebOpen"] != null &&
                        typeof $steps["updateShopModalWebOpen"] === "object" &&
                        typeof $steps["updateShopModalWebOpen"].then ===
                          "function"
                      ) {
                        $steps["updateShopModalWebOpen"] = await $steps[
                          "updateShopModalWebOpen"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction.data.success == false ||
                        $steps.invokeGlobalAction.data.result == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                  "top-left"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button3", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button3", "load"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button3",
                          "loading"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showEndIcon={(() => {
                      try {
                        return $state.loadingshop;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "showEndIcon";
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x1Hj
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "فعال سازی " +
                              $state.subscription[
                                $state.subscriptionCurrentIndex
                              ].title
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "--";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Button>
                </AntdModal>
                <AntdModal
                  data-plasmic-name={"modal2"}
                  data-plasmic-override={overrides.modal2}
                  className={classNames("__wab_instance", sty.modal2)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    styleTokensClassNames,
                    styleTokensClassNames_antd_5_hostless,
                    styleTokensClassNames_plasmic_rich_components
                  )}
                  hideFooter={true}
                  modalScopeClassName={sty["modal2__modal"]}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["modal2", "open"]).apply(
                      null,
                      eventArgs
                    );
                  }}
                  open={generateStateValueProp($state, ["modal2", "open"])}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kISnA
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.itemtodo.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062e\u0627\u0644\u062f \u062d\u0633\u06cc\u0646\u06cc \u062a\u0648 \u0631\u0645\u0627\u0646 \u0628\u0627\u062f \u0628\u0627\u062f\u06a9 \u0628\u0627\u0632 \u0645\u06cc\u0646\u0648\u06cc\u0633\u0647 : \ufee3\ufeae\ufea9 \ufe81\ufeeb\ufeb4\ufe98\ufeea \ufea9\ufead \ufb94\ufeee\ufeb5 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufe97\ufe8e\ufeaf\ufee9 \ufe91\ufeea \ufe91\ufee0\ufeee\ufecd \ufead\ufeb3\ufbff\ufeaa\ufee9 \ufe8d\ufeb5 \ufe91\ufeae\ufe8d\ufbfc \ufb58\ufee8\ufeaa \ufb7c\ufee8\ufbff\ufee6 \ufee7\ufea0\ufeee\ufe8d \ufb90\ufeae\ufea9 : \u201d \ufb58\ufeb4\ufeae\ufee1 \ufea9\ufead \ufeaf\ufee7\ufeaa\ufb94\ufbfd \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeaf\ufea9\ufbfc \ufee7\ufb91\ufee6 \u201d \ufb58\ufeb4\ufeae \ufee3\ufe98\ufecc\ufea0\ufe90 \ufeed \ufee3\ufe92\ufeec\ufeee\ufe95 \ufe91\ufeea \ufb58\ufeaa\ufead \ufee7\ufb95\ufe8e\ufee9 \ufb90\ufeae\ufea9 \ufe91\ufeaa\ufbfe\ufee6 \ufee3\ufecc\ufee8\ufe8e \ufb90\ufeea \ufe8d\ufeed \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeb3\ufe96 \ufb90\ufe9e \ufee7\ufeaa\ufe8d\ufeb7\ufe98\ufeea \ufb58\ufeaa\ufead \ufe91\ufeea \ufee7\ufb95\ufe8e\ufee9 \ufee3\ufe98\ufecc\ufea0\ufe90 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufedf\ufe92\ufea8\ufee8\ufeaa\ufbfc \ufeaf\ufea9 \ufeed \ufe8d\ufea9\ufe8d\ufee3\ufeea \ufea9\ufe8d\ufea9.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                  trigger={null}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2Yox4)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rPgkt
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.itemtodo.desc;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062e\u0627\u0644\u062f \u062d\u0633\u06cc\u0646\u06cc \u062a\u0648 \u0631\u0645\u0627\u0646 \u0628\u0627\u062f \u0628\u0627\u062f\u06a9 \u0628\u0627\u0632 \u0645\u06cc\u0646\u0648\u06cc\u0633\u0647 : \ufee3\ufeae\ufea9 \ufe81\ufeeb\ufeb4\ufe98\ufeea \ufea9\ufead \ufb94\ufeee\ufeb5 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufe97\ufe8e\ufeaf\ufee9 \ufe91\ufeea \ufe91\ufee0\ufeee\ufecd \ufead\ufeb3\ufbff\ufeaa\ufee9 \ufe8d\ufeb5 \ufe91\ufeae\ufe8d\ufbfc \ufb58\ufee8\ufeaa \ufb7c\ufee8\ufbff\ufee6 \ufee7\ufea0\ufeee\ufe8d \ufb90\ufeae\ufea9 : \u201d \ufb58\ufeb4\ufeae\ufee1 \ufea9\ufead \ufeaf\ufee7\ufeaa\ufb94\ufbfd \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeaf\ufea9\ufbfc \ufee7\ufb91\ufee6 \u201d \ufb58\ufeb4\ufeae \ufee3\ufe98\ufecc\ufea0\ufe90 \ufeed \ufee3\ufe92\ufeec\ufeee\ufe95 \ufe91\ufeea \ufb58\ufeaa\ufead \ufee7\ufb95\ufe8e\ufee9 \ufb90\ufeae\ufea9 \ufe91\ufeaa\ufbfe\ufee6 \ufee3\ufecc\ufee8\ufe8e \ufb90\ufeea \ufe8d\ufeed \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeb3\ufe96 \ufb90\ufe9e \ufee7\ufeaa\ufe8d\ufeb7\ufe98\ufeea \ufb58\ufeaa\ufead \ufe91\ufeea \ufee7\ufb95\ufe8e\ufee9 \ufee3\ufe98\ufecc\ufea0\ufe90 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufedf\ufe92\ufea8\ufee8\ufeaa\ufbfc \ufeaf\ufea9 \ufeed \ufe8d\ufea9\ufe8d\ufee3\ufeea \ufea9\ufe8d\ufea9.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </AntdModal>
                <AntdModal
                  data-plasmic-name={"modal3"}
                  data-plasmic-override={overrides.modal3}
                  className={classNames("__wab_instance", sty.modal3, {
                    [sty.modal3lackOfCourseInformation]: hasVariant(
                      $state,
                      "lackOfCourseInformation",
                      "lackOfCourseInformation"
                    )
                  })}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    styleTokensClassNames,
                    styleTokensClassNames_antd_5_hostless,
                    styleTokensClassNames_plasmic_rich_components
                  )}
                  hideFooter={true}
                  modalScopeClassName={sty["modal3__modal"]}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["modal3", "open"]).apply(
                      null,
                      eventArgs
                    );
                  }}
                  open={generateStateValueProp($state, ["modal3", "open"])}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iCOj8
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              if ($state.cyclebox.cycle == "pms")
                                return "pms چیست \u061F";
                              if ($state.cyclebox.cycle == "fertility")
                                return "تخمک گذاری چیست \u061F";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062e\u0627\u0644\u062f \u062d\u0633\u06cc\u0646\u06cc \u062a\u0648 \u0631\u0645\u0627\u0646 \u0628\u0627\u062f \u0628\u0627\u062f\u06a9 \u0628\u0627\u0632 \u0645\u06cc\u0646\u0648\u06cc\u0633\u0647 : \ufee3\ufeae\ufea9 \ufe81\ufeeb\ufeb4\ufe98\ufeea \ufea9\ufead \ufb94\ufeee\ufeb5 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufe97\ufe8e\ufeaf\ufee9 \ufe91\ufeea \ufe91\ufee0\ufeee\ufecd \ufead\ufeb3\ufbff\ufeaa\ufee9 \ufe8d\ufeb5 \ufe91\ufeae\ufe8d\ufbfc \ufb58\ufee8\ufeaa \ufb7c\ufee8\ufbff\ufee6 \ufee7\ufea0\ufeee\ufe8d \ufb90\ufeae\ufea9 : \u201d \ufb58\ufeb4\ufeae\ufee1 \ufea9\ufead \ufeaf\ufee7\ufeaa\ufb94\ufbfd \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeaf\ufea9\ufbfc \ufee7\ufb91\ufee6 \u201d \ufb58\ufeb4\ufeae \ufee3\ufe98\ufecc\ufea0\ufe90 \ufeed \ufee3\ufe92\ufeec\ufeee\ufe95 \ufe91\ufeea \ufb58\ufeaa\ufead \ufee7\ufb95\ufe8e\ufee9 \ufb90\ufeae\ufea9 \ufe91\ufeaa\ufbfe\ufee6 \ufee3\ufecc\ufee8\ufe8e \ufb90\ufeea \ufe8d\ufeed \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeb3\ufe96 \ufb90\ufe9e \ufee7\ufeaa\ufe8d\ufeb7\ufe98\ufeea \ufb58\ufeaa\ufead \ufe91\ufeea \ufee7\ufb95\ufe8e\ufee9 \ufee3\ufe98\ufecc\ufea0\ufe90 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufedf\ufe92\ufea8\ufee8\ufeaa\ufbfc \ufeaf\ufea9 \ufeed \ufe8d\ufea9\ufe8d\ufee3\ufeea \ufea9\ufe8d\ufea9.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                  trigger={null}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1UOoR)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iaZMt
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              if ($state.cyclebox.cycle == "pms")
                                return "PMS یا سندرم پیش از قاعدگی\u060C به مجموعه‌ای از علائم جسمی و عاطفی اطلاق می‌شود که معمولاً در دو هفته‌ی قبل از شروع قاعدگی بروز می‌کند.\n\n این علائم می‌تواند شامل تغییرات خلقی مانند افسردگی و اضطراب\u060C دردهای شکمی\u060C نفخ\u060C حساسیت سینه‌ها\u060C سردرد\u060C و خستگی باشد.\n\n علائم PMS معمولاً با شروع قاعدگی کاهش می‌یابد و می‌تواند بر کیفیت زندگی روزمره تأثیر بگذارد. شدت علائم ممکن است از خفیف تا شدید متفاوت باشد.";
                              if ($state.cyclebox.cycle == "fertility")
                                return "تخمک‌گذاری زمانی است که بدن زن یک تخمک را از تخمدان آزاد می‌کند. این اتفاق معمولاً حدود ۱۴ روز قبل از پریود بعدی رخ می‌دهد. \n\nدر این زمان\u060C بدن زن در مناسب‌ترین حالت برای بارداری است\u060C زیرا تخمک آماده است تا در صورت برخورد با اسپرم\u060C بارور شود. \n\nاگر تخمک بارور شود\u060C بارداری شکل می‌گیرد. اگر بارداری نشود\u060C تخمک و دیواره رحم طی قاعدگی دفع می‌شوند.";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062e\u0627\u0644\u062f \u062d\u0633\u06cc\u0646\u06cc \u062a\u0648 \u0631\u0645\u0627\u0646 \u0628\u0627\u062f \u0628\u0627\u062f\u06a9 \u0628\u0627\u0632 \u0645\u06cc\u0646\u0648\u06cc\u0633\u0647 : \ufee3\ufeae\ufea9 \ufe81\ufeeb\ufeb4\ufe98\ufeea \ufea9\ufead \ufb94\ufeee\ufeb5 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufe97\ufe8e\ufeaf\ufee9 \ufe91\ufeea \ufe91\ufee0\ufeee\ufecd \ufead\ufeb3\ufbff\ufeaa\ufee9 \ufe8d\ufeb5 \ufe91\ufeae\ufe8d\ufbfc \ufb58\ufee8\ufeaa \ufb7c\ufee8\ufbff\ufee6 \ufee7\ufea0\ufeee\ufe8d \ufb90\ufeae\ufea9 : \u201d \ufb58\ufeb4\ufeae\ufee1 \ufea9\ufead \ufeaf\ufee7\ufeaa\ufb94\ufbfd \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeaf\ufea9\ufbfc \ufee7\ufb91\ufee6 \u201d \ufb58\ufeb4\ufeae \ufee3\ufe98\ufecc\ufea0\ufe90 \ufeed \ufee3\ufe92\ufeec\ufeee\ufe95 \ufe91\ufeea \ufb58\ufeaa\ufead \ufee7\ufb95\ufe8e\ufee9 \ufb90\ufeae\ufea9 \ufe91\ufeaa\ufbfe\ufee6 \ufee3\ufecc\ufee8\ufe8e \ufb90\ufeea \ufe8d\ufeed \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeb3\ufe96 \ufb90\ufe9e \ufee7\ufeaa\ufe8d\ufeb7\ufe98\ufeea \ufb58\ufeaa\ufead \ufe91\ufeea \ufee7\ufb95\ufe8e\ufee9 \ufee3\ufe98\ufecc\ufea0\ufe90 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufedf\ufe92\ufea8\ufee8\ufeaa\ufbfc \ufeaf\ufea9 \ufeed \ufe8d\ufea9\ufe8d\ufee3\ufeea \ufea9\ufe8d\ufea9.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </AntdModal>
                {(() => {
                  try {
                    return $state.shapData?.success;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sA0, {
                      [sty.freeBoxlackOfCourseInformation__sA007Srs]:
                        hasVariant(
                          $state,
                          "lackOfCourseInformation",
                          "lackOfCourseInformation"
                        )
                    })}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobile")
                        ? (() => {
                            try {
                              return (
                                !$state.userdata.result.man.hamyarStatus ||
                                $state.userdata?.result?.man
                                  ?.timeToEndHamyarTime?.days < 3
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return (
                                !$state.userdata.result.man.hamyarStatus ||
                                $state.userdata?.result?.man
                                  ?.timeToEndHamyarTime?.days < 3
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ebGwv,
                          {
                            [sty.freeBoxlackOfCourseInformation__ebGwv07Srs]:
                              hasVariant(
                                $state,
                                "lackOfCourseInformation",
                                "lackOfCourseInformation"
                              )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uC58N,
                            {
                              [sty.freeBoxlackOfCourseInformation__uC58N07Srs]:
                                hasVariant(
                                  $state,
                                  "lackOfCourseInformation",
                                  "lackOfCourseInformation"
                                )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zYUfS
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647 \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0646 \u062a\u0627 \u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc \u0647\u0627 \u0631\u0648 \u0628\u062f\u0633\u062a \u0628\u06cc\u0627\u0631\u06cc"
                              : "\u0647\u0645\u0647 \u0646\u06a9\u0627\u062a \u0648 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc\u200c\u0647\u0627\u06cc \u0631\u0627\u0628\u0637\u0647 \u062f\u0631 \u06cc\u06a9 \u0627\u0634\u062a\u0631\u0627\u06a9"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zIo72,
                            {
                              [sty.freeBoxlackOfCourseInformation__zIo7207Srs]:
                                hasVariant(
                                  $state,
                                  "lackOfCourseInformation",
                                  "lackOfCourseInformation"
                                )
                            }
                          )}
                        >
                          {(() => {
                            try {
                              return $state.cyclebox.cycle == "Pregnancy";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <ol
                              className={classNames(
                                projectcss.all,
                                projectcss.ol,
                                sty.ol__i9KlY
                              )}
                            >
                              <li
                                className={classNames(
                                  projectcss.all,
                                  projectcss.li,
                                  projectcss.__wab_text,
                                  sty.li__dJvrz
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                ) ? (
                                  <div
                                    className={projectcss.__wab_expr_html_text}
                                    dangerouslySetInnerHTML={{
                                      __html: (() => {
                                        try {
                                          return `<b>خودت رو برای بهترین نقش زندگیت آماده کن!</b>  <br>
<div style="position: relative; left: 10px;">این پیام‌ها بهت حس پدر بودن رو یادآوری می‌کنه. وقتی احساس خوبی داشته باشی، همسرت هم آرامش بیشتری خواهد داشت.</div>
`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 pms \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647\u062a \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u0645 \u062a\u0627 \u0628\u062a\u0648\u0646\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0631\u0648 \u0628\u06cc\u0634\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0646\u06cc \u0648 \u0627\u0632 \u0646\u0627\u0631\u0627\u062d\u062a\u06cc \u0647\u0627\u06cc \u0627\u062d\u062a\u0645\u0627\u0644\u06cc \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u06a9\u0646\u06cc. ";
                                          }
                                          throw e;
                                        }
                                      })()
                                    }}
                                  />
                                ) : (
                                  <div
                                    className={projectcss.__wab_expr_html_text}
                                    dangerouslySetInnerHTML={{
                                      __html: (() => {
                                        try {
                                          return `<b>خودت رو برای بهترین نقش زندگیت آماده کن!</b>  <br>
<div style="position: relative; left: 10px;">این پیام‌ها بهت حس پدر بودن رو یادآوری می‌کنه. وقتی احساس خوبی داشته باشی، همسرت هم آرامش بیشتری خواهد داشت.</div>
`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 pms \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647\u062a \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u0645 \u062a\u0627 \u0628\u062a\u0648\u0646\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0631\u0648 \u0628\u06cc\u0634\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0646\u06cc \u0648 \u0627\u0632 \u0646\u0627\u0631\u0627\u062d\u062a\u06cc \u0647\u0627\u06cc \u0627\u062d\u062a\u0645\u0627\u0644\u06cc \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u06a9\u0646\u06cc. ";
                                          }
                                          throw e;
                                        }
                                      })()
                                    }}
                                  />
                                )}
                              </li>
                              <li
                                className={classNames(
                                  projectcss.all,
                                  projectcss.li,
                                  projectcss.__wab_text,
                                  sty.li__qcnP
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                ) ? (
                                  <div
                                    className={projectcss.__wab_expr_html_text}
                                    dangerouslySetInnerHTML={{
                                      __html: (() => {
                                        try {
                                          return `<b>رابطه‌تون رو قوی‌تر کن، بدون گفتن حتی یک کلمه!</b>  <br>
<div style="position: relative; left: 10px;">این پیام‌ها به همسرت نشون می‌ده که چقدر برات مهمه. یک راه ساده برای اینکه رابطه‌تون رو محکم‌تر کنی!</div>
`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u062f\u0631 \u0647\u0631 \u0631\u0648\u0632 pms \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627\u06cc\u06cc \u0628\u0631\u0627\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u0634\u0647 \u06a9\u0647 \u0627\u0648\u0646 \u0647\u0645 \u0628\u062a\u0648\u0646\u0647 \u062e\u0648\u062f\u0634 \u0631\u0648 \u06a9\u0646\u062a\u0631\u0644 \u06a9\u0646\u0647 \u0648 \u062d\u0648\u0627\u0633\u0634 \u0628\u0647 \u062a\u0648 \u0648 \u0631\u0627\u0628\u0637\u0647 \u062a\u0648\u0646 \u0628\u0627\u0634\u0647(\u200c\u0627\u0644\u0628\u062a\u0647 \u06a9\u0647 \u0642\u0631\u0627\u0631 \u0646\u06cc\u0633\u062a \u0627\u06cc\u0646 \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627 \u0628\u0635\u0648\u0631\u062a \u0645\u0633\u062a\u0642\u06cc\u0645 \u0627\u0631\u0633\u0627\u0644 \u0628\u0634\u0646 \u0648 \u0627\u0648\u0646 \u0628\u0641\u0647\u0645\u0647 \u06a9\u0647 \u062a\u0648 \u0627\u06cc\u0646 \u0642\u0627\u0628\u0644\u06cc\u062a \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u06cc)";
                                          }
                                          throw e;
                                        }
                                      })()
                                    }}
                                  />
                                ) : (
                                  <div
                                    className={projectcss.__wab_expr_html_text}
                                    dangerouslySetInnerHTML={{
                                      __html: (() => {
                                        try {
                                          return `<b>رابطه‌تون رو قوی‌تر کن، بدون گفتن حتی یک کلمه!</b>  <br>
<div style="position: relative; left: 10px;">این پیام‌ها به همسرت نشون می‌ده که چقدر برات مهمه. یک راه ساده برای اینکه رابطه‌تون رو محکم‌تر کنی!</div>
`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u062f\u0631 \u0647\u0631 \u0631\u0648\u0632 pms \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627\u06cc\u06cc \u0628\u0631\u0627\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u0634\u0647 \u06a9\u0647 \u0627\u0648\u0646 \u0647\u0645 \u0628\u062a\u0648\u0646\u0647 \u062e\u0648\u062f\u0634 \u0631\u0648 \u06a9\u0646\u062a\u0631\u0644 \u06a9\u0646\u0647 \u0648 \u062d\u0648\u0627\u0633\u0634 \u0628\u0647 \u062a\u0648 \u0648 \u0631\u0627\u0628\u0637\u0647 \u062a\u0648\u0646 \u0628\u0627\u0634\u0647(\u200c\u0627\u0644\u0628\u062a\u0647 \u06a9\u0647 \u0642\u0631\u0627\u0631 \u0646\u06cc\u0633\u062a \u0627\u06cc\u0646 \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627 \u0628\u0635\u0648\u0631\u062a \u0645\u0633\u062a\u0642\u06cc\u0645 \u0627\u0631\u0633\u0627\u0644 \u0628\u0634\u0646 \u0648 \u0627\u0648\u0646 \u0628\u0641\u0647\u0645\u0647 \u06a9\u0647 \u062a\u0648 \u0627\u06cc\u0646 \u0642\u0627\u0628\u0644\u06cc\u062a \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u06cc)";
                                          }
                                          throw e;
                                        }
                                      })()
                                    }}
                                  />
                                )}
                              </li>
                              <li
                                className={classNames(
                                  projectcss.all,
                                  projectcss.li,
                                  projectcss.__wab_text,
                                  sty.li___0VBxb
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                ) ? (
                                  <div
                                    className={projectcss.__wab_expr_html_text}
                                    dangerouslySetInnerHTML={{
                                      __html: (() => {
                                        try {
                                          return `<b>حس پدر بودن رو تجربه کن!</b>  <br>
<div style="position: relative; left: 10px;">با دریافت پیام‌هایی درباره وضعیت جنین، همیشه در جریان تغییرات و رشد فرزندت خواهی بود.</div>
`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return '"\u0634\u0631\u0648\u0639 \u067e\u0631\u06cc\u0648\u062f\u0634 \u0631\u0648 \u067e\u06cc\u0627\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u062a\u0627 \u0628\u0647\u062a\u0631 \u0627\u0632\u0634 \u0645\u0631\u0627\u0642\u0628\u062a \u06a9\u0646\u06cc \u0648 \u0631\u0627\u0628\u0637\u0647 \u0634\u0627\u062f\u062a\u0631\u06cc \u0628\u0633\u0627\u0632\u06cc."\n';
                                          }
                                          throw e;
                                        }
                                      })()
                                    }}
                                  />
                                ) : (
                                  <div
                                    className={projectcss.__wab_expr_html_text}
                                    dangerouslySetInnerHTML={{
                                      __html: (() => {
                                        try {
                                          return `<b>حس پدر بودن رو تجربه کن!</b>  <br>
<div style="position: relative; left: 10px;">با دریافت پیام‌هایی درباره وضعیت جنین، همیشه در جریان تغییرات و رشد فرزندت خواهی بود.</div>
`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u0634\u0631\u0648\u0639 \u067e\u0631\u06cc\u0648\u062f\u0634 \u0631\u0648 \u0628\u0631\u0627\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0645\u06cc\u06a9\u0646\u0645 \u062a\u0627 \u0628\u062a\u0648\u0646\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632\u0634 \u0645\u0631\u0627\u0642\u0628\u062a \u06a9\u0646\u06cc \u0648 \u06a9\u0645\u062a\u0631 \u062f\u0631\u062f \u0628\u06a9\u0634\u0647 \u0648 \u0631\u0627\u0628\u0637\u0647 \u0634\u0627\u062f\u062a\u0631\u06cc \u0628\u0633\u0627\u0632\u06cc";
                                          }
                                          throw e;
                                        }
                                      })()
                                    }}
                                  />
                                )}
                              </li>
                            </ol>
                          ) : null}
                          <ul
                            data-plasmic-name={"ul"}
                            data-plasmic-override={overrides.ul}
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.shopListText;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    sty.li__zvwHo
                                  )}
                                  key={currentIndex}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateModalshopText"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["modalshopText"]
                                            },
                                            operation: 0,
                                            value: currentItem
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateModalshopText"] != null &&
                                      typeof $steps["updateModalshopText"] ===
                                        "object" &&
                                      typeof $steps["updateModalshopText"]
                                        .then === "function"
                                    ) {
                                      $steps["updateModalshopText"] =
                                        await $steps["updateModalshopText"];
                                    }

                                    $steps["updateShopTextOpen"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["shopText", "open"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateShopTextOpen"] != null &&
                                      typeof $steps["updateShopTextOpen"] ===
                                        "object" &&
                                      typeof $steps["updateShopTextOpen"]
                                        .then === "function"
                                    ) {
                                      $steps["updateShopTextOpen"] =
                                        await $steps["updateShopTextOpen"];
                                    }
                                  }}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__aHv7V
                                    )}
                                    style={(() => {
                                      try {
                                        return {
                                          "border-bottom":
                                            currentItem.Special == true
                                              ? "solid 1px #e0e0e0"
                                              : "none"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    <Icon272Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___89Qcq
                                      )}
                                      role={"img"}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__sTTp
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.title;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9\r";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <Icon142Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__uOw5J
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </li>
                              );
                            })}
                          </ul>
                          <AntdModal
                            data-plasmic-name={"shopText"}
                            data-plasmic-override={overrides.shopText}
                            className={classNames(
                              "__wab_instance",
                              sty.shopText
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              styleTokensClassNames,
                              styleTokensClassNames_antd_5_hostless,
                              styleTokensClassNames_plasmic_rich_components
                            )}
                            hideFooter={true}
                            maskClosable={true}
                            modalScopeClassName={sty["shopText__modal"]}
                            onOpenChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "shopText",
                                "open"
                              ]).apply(null, eventArgs);
                            }}
                            open={generateStateValueProp($state, [
                              "shopText",
                              "open"
                            ])}
                            title={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qyAoD
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.modalshopText.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            trigger={null}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yuuT9
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xsRyV
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.modalshopText.text;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </AntdModal>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7Onxt
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"\u0646\u06a9\u062a\u0647:    "}
                              </span>
                              <React.Fragment>
                                {
                                  "\u0628\u0627 \u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u062a\u0645\u0627\u0645\u06cc \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u0647\u0627 \u0648 \u0646\u06a9\u0627\u062a \u06a9\u0627\u0631\u0628\u0631\u062f\u06cc \u062a\u0642\u0648\u06cc\u062a \u0631\u0627\u0628\u0637\u0647  \u0647\u0645 \u067e\u06cc\u0627\u0645\u06a9 \u0645\u06cc\u0634\u0648\u0646\u062f \u0648 \u0647\u0645 \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645 \u0642\u0627\u0628\u0644 \u062f\u0633\u062a\u0631\u0633 \u0647\u0633\u062a\u0646\u062f"
                                }
                              </React.Fragment>
                            </React.Fragment>
                          </div>
                        </div>
                        {(() => {
                          try {
                            return $state.cyclebox.cycle != "Pregnancy";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__x08Rs
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___0Y0A8
                              )}
                            >
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? (() => {
                                      try {
                                        return $state.shopDialog.data.result.find(
                                          item => item.selected === 1
                                        ).topBadge
                                          ? true
                                          : false;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return $state.shapData.result.find(
                                          item => item.selected === 1
                                        ).topBadge
                                          ? true
                                          : false;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___8IUt
                                  )}
                                  style={(() => {
                                    try {
                                      return {
                                        background: $state.shapData.result.find(
                                          item => item.selected === 1
                                        ).topBadgeBgColor
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cjm8E
                                    )}
                                    style={(() => {
                                      try {
                                        return {
                                          color: $state.shapData.result.find(
                                            item => item.selected === 1
                                          ).topBadgeTextColor
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.shapData.result.find(
                                            item => item.selected === 1
                                          ).topBadge;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__lsYky
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__vHrq
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.shapData.result.find(
                                          item => item.selected === 1
                                        ).title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "-";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                {(() => {
                                  try {
                                    return $state.shapData.result[
                                      $state.selectedShop
                                    ].badge
                                      ? true
                                      : false;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__bRvd4
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__vAf7O
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.shapData.result.find(
                                              item => item.selected === 1
                                            ).badge;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "-";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                ) : null}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__n3Tt7
                                )}
                              >
                                {(() => {
                                  try {
                                    return $state.shapData.result[
                                      $state.selectedShop
                                    ].badge
                                      ? true
                                      : false;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fkgDb
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.shapData.result
                                            .find(item => item.selected === 1)
                                            .fullPrice.toLocaleString("en-US");
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "-";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                ) : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__kJOag
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___9KXbh
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (
                                            $state.shapData.result
                                              .find(item => item.selected === 1)
                                              .price.toLocaleString("en-US") +
                                            " تومان |"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "-";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__xn48S
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.shapData.result.find(
                                            item => item.selected === 1
                                          ).per_month_text;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "-";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                              {(() => {
                                try {
                                  return !$state.discountBox;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__p5Zbh
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateDiscountBox"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["discountBox"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDiscountBox"] != null &&
                                      typeof $steps["updateDiscountBox"] ===
                                        "object" &&
                                      typeof $steps["updateDiscountBox"]
                                        .then === "function"
                                    ) {
                                      $steps["updateDiscountBox"] =
                                        await $steps["updateDiscountBox"];
                                    }
                                  }}
                                >
                                  {
                                    "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                                  }
                                </div>
                              ) : null}
                              {(() => {
                                try {
                                  return $state.discountBox;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__sbV8I
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ogvTo
                                    )}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        allowClear: hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobile"
                                        )
                                          ? false
                                          : false,
                                        autoFocus: hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobile"
                                        )
                                          ? false
                                          : false,
                                        bordered: hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobile"
                                        )
                                          ? false
                                          : false,
                                        className: classNames(
                                          "__wab_instance",
                                          sty.input
                                        ),
                                        disabled: hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobile"
                                        )
                                          ? false
                                          : false,
                                        onChange: async (...eventArgs: any) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["input", "value"],
                                            AntdInput_Helpers
                                          ).apply(null, eventArgs);

                                          (async event => {
                                            const $steps = {};
                                          }).apply(null, eventArgs);
                                        },
                                        placeholder:
                                          "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                                        prefix: (
                                          <Icon10Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__clG0G
                                            )}
                                            role={"img"}
                                          />
                                        ),

                                        readOnly: hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobile"
                                        )
                                          ? false
                                          : false,
                                        size: hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobile"
                                        )
                                          ? "small"
                                          : "small",
                                        suffix: null,
                                        value: generateStateValueProp($state, [
                                          "input",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "input.value"
                                          }
                                        ],
                                        [],
                                        AntdInput_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdInput
                                          data-plasmic-name={"input"}
                                          data-plasmic-override={
                                            overrides.input
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                    {(() => {
                                      try {
                                        return $state.visiblebox;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__we3ZU
                                        )}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["updateVisiblebox"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["visiblebox"]
                                                  },
                                                  operation: 0,
                                                  value: false
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateVisiblebox"] !=
                                              null &&
                                            typeof $steps[
                                              "updateVisiblebox"
                                            ] === "object" &&
                                            typeof $steps["updateVisiblebox"]
                                              .then === "function"
                                          ) {
                                            $steps["updateVisiblebox"] =
                                              await $steps["updateVisiblebox"];
                                          }
                                        }}
                                      />
                                    ) : null}
                                  </div>
                                  <Button
                                    data-plasmic-name={"button"}
                                    data-plasmic-override={overrides.button}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button
                                    )}
                                    color={generateStateValueProp($state, [
                                      "button",
                                      "color"
                                    ])}
                                    isDisabled={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobile"
                                      )
                                        ? (() => {
                                            try {
                                              return $state.input.value ==
                                                null || $state.input.value == ""
                                                ? true
                                                : false;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        : (() => {
                                            try {
                                              return $state.input.value == "" ||
                                                $state.input.value == null
                                                ? true
                                                : false;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                    }
                                    load={generateStateValueProp($state, [
                                      "button",
                                      "load"
                                    ])}
                                    loading={generateStateValueProp($state, [
                                      "button",
                                      "loading"
                                    ])}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updateVisiblebox"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["visiblebox"]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateVisiblebox"] != null &&
                                        typeof $steps["updateVisiblebox"] ===
                                          "object" &&
                                        typeof $steps["updateVisiblebox"]
                                          .then === "function"
                                      ) {
                                        $steps["updateVisiblebox"] =
                                          await $steps["updateVisiblebox"];
                                      }

                                      $steps["updateDiscountCode"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["discountCode"]
                                              },
                                              operation: 0,
                                              value: $state.input.value
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateDiscountCode"] != null &&
                                        typeof $steps["updateDiscountCode"] ===
                                          "object" &&
                                        typeof $steps["updateDiscountCode"]
                                          .then === "function"
                                      ) {
                                        $steps["updateDiscountCode"] =
                                          await $steps["updateDiscountCode"];
                                      }
                                    }}
                                    onColorChange={async (
                                      ...eventArgs: any
                                    ) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "button",
                                          "color"
                                        ])(eventArgs[0]);
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    onLoadChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "button",
                                          "load"
                                        ])(eventArgs[0]);
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    onLoadingChange={async (
                                      ...eventArgs: any
                                    ) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "button",
                                          "loading"
                                        ])(eventArgs[0]);
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                  >
                                    {"\u062a\u0627\u06cc\u06cc\u062f"}
                                  </Button>
                                </div>
                              ) : null}
                              <Button
                                data-plasmic-name={"button2"}
                                data-plasmic-override={overrides.button2}
                                className={classNames(
                                  "__wab_instance",
                                  sty.button2
                                )}
                                color={generateStateValueProp($state, [
                                  "button2",
                                  "color"
                                ])}
                                endIcon={
                                  <PlasmicIcon__
                                    PlasmicIconType={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobile"
                                      )
                                        ? Icon12Icon
                                        : Icon12Icon
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__duV0P
                                    )}
                                    role={"img"}
                                  />
                                }
                                isDisabled={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? (() => {
                                        try {
                                          return $state.loadingshop;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    : (() => {
                                        try {
                                          return $state.loadingshop;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                }
                                load={generateStateValueProp($state, [
                                  "button2",
                                  "load"
                                ])}
                                loading={generateStateValueProp($state, [
                                  "button2",
                                  "loading"
                                ])}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateLoadingshop"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["loadingshop"]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateLoadingshop"] != null &&
                                    typeof $steps["updateLoadingshop"] ===
                                      "object" &&
                                    typeof $steps["updateLoadingshop"].then ===
                                      "function"
                                  ) {
                                    $steps["updateLoadingshop"] = await $steps[
                                      "updateLoadingshop"
                                    ];
                                  }

                                  $steps["updateSelectedShop"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["selectedShop"]
                                          },
                                          operation: 0,
                                          value:
                                            $state.shapData.result.findIndex(
                                              item => item.selected === 1
                                            )
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateSelectedShop"] != null &&
                                    typeof $steps["updateSelectedShop"] ===
                                      "object" &&
                                    typeof $steps["updateSelectedShop"].then ===
                                      "function"
                                  ) {
                                    $steps["updateSelectedShop"] = await $steps[
                                      "updateSelectedShop"
                                    ];
                                  }

                                  $steps["updateBuyId"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["buyId"]
                                          },
                                          operation: 0,
                                          value: $state.shapData.result.find(
                                            item => item.selected === 1
                                          ).id
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateBuyId"] != null &&
                                    typeof $steps["updateBuyId"] === "object" &&
                                    typeof $steps["updateBuyId"].then ===
                                      "function"
                                  ) {
                                    $steps["updateBuyId"] = await $steps[
                                      "updateBuyId"
                                    ];
                                  }

                                  $steps["invokeGlobalAction"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "POST",
                                            "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                                            undefined,
                                            (() => {
                                              try {
                                                return {
                                                  id: $state.buyId,
                                                  offCode: $state.discountCode,
                                                  refCode:
                                                    $state.userdata.result.man
                                                      .refCode,
                                                  redirectUrl:
                                                    "https://apps.liom.app/shop-result?r=" +
                                                    $state.userdata.result.man
                                                      .refCode +
                                                    "&buyId=" +
                                                    $state.buyId +
                                                    "&offCode=" +
                                                    $state.discountCode +
                                                    "&valueShop=" +
                                                    $state.shapData.result[
                                                      $state.selectedShop
                                                    ].type +
                                                    "-" +
                                                    $state.shapData.result[
                                                      $state.selectedShop
                                                    ].value +
                                                    "&price=" +
                                                    $state.shapData.result[
                                                      $state.selectedShop
                                                    ].price +
                                                    "&manId=" +
                                                    $state.userdata.result.man
                                                      .id
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return {
                                                  headers: {
                                                    "Content-Type":
                                                      "application/json",
                                                    Authorization:
                                                      $state.tokenUser
                                                  }
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["invokeGlobalAction"] != null &&
                                    typeof $steps["invokeGlobalAction"] ===
                                      "object" &&
                                    typeof $steps["invokeGlobalAction"].then ===
                                      "function"
                                  ) {
                                    $steps["invokeGlobalAction"] = await $steps[
                                      "invokeGlobalAction"
                                    ];
                                  }

                                  $steps["goToPage"] =
                                    $steps.invokeGlobalAction?.data?.success ==
                                      true &&
                                    $steps.invokeGlobalAction?.data?.result !=
                                      false
                                      ? (() => {
                                          const actionArgs = {
                                            destination: (() => {
                                              try {
                                                return $steps.invokeGlobalAction
                                                  ?.data?.result;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          };
                                          return (({ destination }) => {
                                            if (
                                              typeof destination === "string" &&
                                              destination.startsWith("#")
                                            ) {
                                              document
                                                .getElementById(
                                                  destination.substr(1)
                                                )
                                                .scrollIntoView({
                                                  behavior: "smooth"
                                                });
                                            } else {
                                              __nextRouter?.push(destination);
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["goToPage"] != null &&
                                    typeof $steps["goToPage"] === "object" &&
                                    typeof $steps["goToPage"].then ===
                                      "function"
                                  ) {
                                    $steps["goToPage"] = await $steps[
                                      "goToPage"
                                    ];
                                  }

                                  $steps["updateLoadingshop2"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["loadingshop"]
                                          },
                                          operation: 0,
                                          value: false
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateLoadingshop2"] != null &&
                                    typeof $steps["updateLoadingshop2"] ===
                                      "object" &&
                                    typeof $steps["updateLoadingshop2"].then ===
                                      "function"
                                  ) {
                                    $steps["updateLoadingshop2"] = await $steps[
                                      "updateLoadingshop2"
                                    ];
                                  }

                                  $steps["invokeGlobalAction2"] =
                                    $steps.invokeGlobalAction?.data?.success ==
                                      false ||
                                    $steps.invokeGlobalAction?.data?.result ==
                                      false
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "error",
                                              "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                              "top-left"
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["invokeGlobalAction2"] != null &&
                                    typeof $steps["invokeGlobalAction2"] ===
                                      "object" &&
                                    typeof $steps["invokeGlobalAction2"]
                                      .then === "function"
                                  ) {
                                    $steps["invokeGlobalAction2"] =
                                      await $steps["invokeGlobalAction2"];
                                  }
                                }}
                                onColorChange={async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "button2",
                                      "color"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                onLoadChange={async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "button2",
                                      "load"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                onLoadingChange={async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "button2",
                                      "loading"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                showEndIcon={(() => {
                                  try {
                                    return $state.loadingshop;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dRlst
                                  )}
                                >
                                  {
                                    "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                                  }
                                </div>
                              </Button>
                              <p
                                className={classNames(
                                  projectcss.all,
                                  projectcss.p,
                                  projectcss.__wab_text,
                                  sty.p__fOJjS
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateShopModalWebOpen"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "shopModalWeb",
                                              "open"
                                            ]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateShopModalWebOpen"] != null &&
                                    typeof $steps["updateShopModalWebOpen"] ===
                                      "object" &&
                                    typeof $steps["updateShopModalWebOpen"]
                                      .then === "function"
                                  ) {
                                    $steps["updateShopModalWebOpen"] =
                                      await $steps["updateShopModalWebOpen"];
                                  }

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              $state.subscription[
                                                $state.subscriptionCurrentIndex
                                              ].clickitem = true;
                                              return ($state.buyId =
                                                $state.shapData.result[
                                                  $state.subscriptionCurrentIndex
                                                ].id);
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }
                                }}
                              >
                                {
                                  "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                                }
                              </p>
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? true
                                  : false
                              ) ? (
                                <p
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.p,
                                    projectcss.__wab_text,
                                    sty.p__vl45R
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["runCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return (() => {
                                                $state.subscription2[
                                                  $state.subscriptionCurrentIndex
                                                ].clickitem = true;
                                                return ($state.buyId =
                                                  $state.shapData.result[
                                                    $state.subscriptionCurrentIndex
                                                  ].id);
                                              })();
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runCode"] != null &&
                                      typeof $steps["runCode"] === "object" &&
                                      typeof $steps["runCode"].then ===
                                        "function"
                                    ) {
                                      $steps["runCode"] = await $steps[
                                        "runCode"
                                      ];
                                    }

                                    $steps["updateShopModalMobileClick"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "shopModalMobile",
                                                "click"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateShopModalMobileClick"] !=
                                        null &&
                                      typeof $steps[
                                        "updateShopModalMobileClick"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateShopModalMobileClick"
                                      ].then === "function"
                                    ) {
                                      $steps["updateShopModalMobileClick"] =
                                        await $steps[
                                          "updateShopModalMobileClick"
                                        ];
                                    }
                                  }}
                                >
                                  {
                                    "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                                  }
                                </p>
                              ) : null}
                            </div>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return $state.cyclebox.cycle == "Pregnancy";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qzisJ
                            )}
                          >
                            <Button
                              data-plasmic-name={"button7"}
                              data-plasmic-override={overrides.button7}
                              className={classNames(
                                "__wab_instance",
                                sty.button7
                              )}
                              color={generateStateValueProp($state, [
                                "button7",
                                "color"
                              ])}
                              endIcon={
                                <PlasmicIcon__
                                  PlasmicIconType={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobile"
                                    )
                                      ? Icon12Icon
                                      : Icon12Icon
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__vc87C
                                  )}
                                  role={"img"}
                                />
                              }
                              isDisabled={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? (() => {
                                      try {
                                        return $state.loadingshop;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return $state.loadingshop;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                              }
                              load={generateStateValueProp($state, [
                                "button7",
                                "load"
                              ])}
                              loading={generateStateValueProp($state, [
                                "button7",
                                "loading"
                              ])}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateDialog3Opendialog"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "dialog3",
                                            "opendialog"
                                          ]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateDialog3Opendialog"] != null &&
                                  typeof $steps["updateDialog3Opendialog"] ===
                                    "object" &&
                                  typeof $steps["updateDialog3Opendialog"]
                                    .then === "function"
                                ) {
                                  $steps["updateDialog3Opendialog"] =
                                    await $steps["updateDialog3Opendialog"];
                                }
                              }}
                              onColorChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button7",
                                    "color"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              onLoadChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button7",
                                    "load"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              onLoadingChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button7",
                                    "loading"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              showEndIcon={(() => {
                                try {
                                  return $state.loadingshop;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rC1Y
                                )}
                              >
                                {
                                  "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                                }
                              </div>
                            </Button>
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
              <SlideinModal
                data-plasmic-name={"shopModalMobile"}
                data-plasmic-override={overrides.shopModalMobile}
                className={classNames("__wab_instance", sty.shopModalMobile)}
                click={generateStateValueProp($state, [
                  "shopModalMobile",
                  "click"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateShopModalMobileClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["shopModalMobile", "click"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateShopModalMobileClick"] != null &&
                    typeof $steps["updateShopModalMobileClick"] === "object" &&
                    typeof $steps["updateShopModalMobileClick"].then ===
                      "function"
                  ) {
                    $steps["updateShopModalMobileClick"] = await $steps[
                      "updateShopModalMobileClick"
                    ];
                  }
                }}
                onClickChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "shopModalMobile",
                    "click"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div className={classNames(projectcss.all, sty.freeBox__oxDt3)}>
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : false
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cKFp)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.shapData.result;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.subscription2
                            ),
                            clickitem: generateStateValueProp($state, [
                              "subscription2",
                              __plasmic_idx_0,
                              "clickitem"
                            ]),
                            discount: generateStateValueProp($state, [
                              "subscription2",
                              __plasmic_idx_0,
                              "discount"
                            ]),
                            fullprice: generateStateValueProp($state, [
                              "subscription2",
                              __plasmic_idx_0,
                              "fullprice"
                            ]),
                            key: currentIndex,
                            onClick: async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          for (
                                            let i = 0;
                                            i < $state.subscription2.length;
                                            i++
                                          ) {
                                            $state.subscription2[i].clickitem =
                                              false;
                                          }
                                          $state.subscription2[
                                            currentIndex
                                          ].clickitem = true;
                                          $state.subscriptionCurrentIndex = [
                                            currentIndex
                                          ];
                                          return ($state.buyId =
                                            currentItem.id);
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            },
                            onClickitemChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription2",
                                __plasmic_idx_0,
                                "clickitem"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onDiscountChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription2",
                                __plasmic_idx_0,
                                "discount"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onFullpriceChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription2",
                                __plasmic_idx_0,
                                "fullprice"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onPriceChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription2",
                                __plasmic_idx_0,
                                "price"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onTitleChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription2",
                                __plasmic_idx_0,
                                "title"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            price: generateStateValueProp($state, [
                              "subscription2",
                              __plasmic_idx_0,
                              "price"
                            ]),
                            title: generateStateValueProp($state, [
                              "subscription2",
                              __plasmic_idx_0,
                              "title"
                            ])
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "subscription2[].clickitem",
                                initFunc: ({ $props, $state, $queries }) =>
                                  false
                              },
                              {
                                name: "subscription2[].title",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "subscription2[].price",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.price.toLocaleString(
                                        "en-US"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 120000;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "subscription2[].discount",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.badge
                                        ? currentItem.badge
                                        : "";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "subscription2[].fullprice",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.fullPrice
                                        ? currentItem.fullPrice.toLocaleString(
                                            "en-US"
                                          )
                                        : currentItem.price.toLocaleString(
                                            "en-US"
                                          );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 0;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Subscription
                              data-plasmic-name={"subscription2"}
                              data-plasmic-override={overrides.subscription2}
                              {...child$Props}
                            >
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? (() => {
                                      try {
                                        return currentItem.topBadge
                                          ? true
                                          : false;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return currentItem.topBadge
                                          ? true
                                          : false;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ceEg2
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bktDe
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.topBadge;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              ) : null}
                            </Subscription>
                          );
                        })();
                      })}
                    </div>
                  ) : null}
                  <Button
                    data-plasmic-name={"button4"}
                    data-plasmic-override={overrides.button4}
                    className={classNames("__wab_instance", sty.button4)}
                    color={generateStateValueProp($state, ["button4", "color"])}
                    endIcon={
                      <PlasmicIcon__
                        PlasmicIconType={
                          hasVariant(globalVariants, "screen", "mobile")
                            ? Icon12Icon
                            : Icon12Icon
                        }
                        className={classNames(projectcss.all, sty.svg__pT1Jr)}
                        role={"img"}
                      />
                    }
                    isDisabled={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? (() => {
                            try {
                              return $state.loadingshop;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                    load={generateStateValueProp($state, ["button4", "load"])}
                    loading={generateStateValueProp($state, [
                      "button4",
                      "loading"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadingshop"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadingshop"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadingshop"] != null &&
                        typeof $steps["updateLoadingshop"] === "object" &&
                        typeof $steps["updateLoadingshop"].then === "function"
                      ) {
                        $steps["updateLoadingshop"] = await $steps[
                          "updateLoadingshop"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      id: $state.buyId,
                                      offCode: $state.discountCode,
                                      refCode:
                                        $state.userdata.result.man.refCode,
                                      redirectUrl:
                                        "https://apps.liom.app/shop-result?r=" +
                                        $state.userdata.result.man.refCode +
                                        "&buyId=" +
                                        $state.buyId +
                                        "&offCode=" +
                                        $state.discountCode +
                                        "&valueShop=" +
                                        $state.shapData.result[
                                          $state.subscriptionCurrentIndex
                                        ].type +
                                        "-" +
                                        $state.shapData.result[
                                          $state.subscriptionCurrentIndex
                                        ].value +
                                        "&price=" +
                                        $state.shapData.result[
                                          $state.subscriptionCurrentIndex
                                        ].price +
                                        "&manId=" +
                                        $state.userdata.result.man.id
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization: $state.tokenUser
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["goToPage"] =
                        $steps.invokeGlobalAction?.data?.success == true &&
                        $steps.invokeGlobalAction?.data?.result != false
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return $steps.invokeGlobalAction?.data
                                      ?.result;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["updateLoadingshop2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadingshop"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadingshop2"] != null &&
                        typeof $steps["updateLoadingshop2"] === "object" &&
                        typeof $steps["updateLoadingshop2"].then === "function"
                      ) {
                        $steps["updateLoadingshop2"] = await $steps[
                          "updateLoadingshop2"
                        ];
                      }

                      $steps["updateShopModalMobileClick"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["shopModalMobile", "click"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateShopModalMobileClick"] != null &&
                        typeof $steps["updateShopModalMobileClick"] ===
                          "object" &&
                        typeof $steps["updateShopModalMobileClick"].then ===
                          "function"
                      ) {
                        $steps["updateShopModalMobileClick"] = await $steps[
                          "updateShopModalMobileClick"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction.data.success == false ||
                        $steps.invokeGlobalAction.data.result == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                  "top-left"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button4", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button4", "load"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button4",
                          "loading"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showEndIcon={(() => {
                      try {
                        return $state.loadingshop;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "showEndIcon";
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aKh9O
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "فعال سازی " +
                                $state.subscription2[
                                  $state.subscriptionCurrentIndex
                                ].title
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "--";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "فعال سازی " +
                                $state.subscription[
                                  $state.subscriptionCurrentIndex
                                ].title
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "--";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </Button>
                </div>
              </SlideinModal>
              <AntdModal
                data-plasmic-name={"modal"}
                data-plasmic-override={overrides.modal}
                className={classNames("__wab_instance", sty.modal)}
                closeButtonClassName={classNames({
                  [sty["pcls_PTZbDpNuqWJg"]]: true,
                  [sty["pcls_a8S9-aK3uWAD"]]: hasVariant(
                    globalVariants,
                    "screen",
                    "mobile"
                  )
                })}
                closeIcon={
                  <Icon22Icon
                    className={classNames(projectcss.all, sty.svg___4HhRn)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modal", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen"] != null &&
                        typeof $steps["updateModalOpen"] === "object" &&
                        typeof $steps["updateModalOpen"].then === "function"
                      ) {
                        $steps["updateModalOpen"] = await $steps[
                          "updateModalOpen"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                }
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  styleTokensClassNames,
                  styleTokensClassNames_antd_5_hostless,
                  styleTokensClassNames_plasmic_rich_components
                )}
                hideFooter={true}
                maskClosable={false}
                modalContentClassName={classNames({
                  [sty["pcls_5fTHCx5J-fyn"]]: hasVariant(
                    globalVariants,
                    "screen",
                    "mobile"
                  ),
                  [sty["pcls_wZUnArB0s_DI"]]: true
                })}
                modalScopeClassName={sty["modal__modal"]}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["modal", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["modal", "open"])}
                title={null}
                trigger={null}
                width={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "100vw"
                    : "100vw"
                }
                wrapClassName={classNames({
                  [sty["pcls_6T7XmSvLI7jL"]]: true,
                  [sty["pcls_g_DxdwsKXuox"]]: hasVariant(
                    globalVariants,
                    "screen",
                    "mobile"
                  )
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__hl29H)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__omzcJ)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__onx50)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__vFfed)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobile")
                            ? "auto"
                            : "500px"
                        }
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/liom_hamyar/images/image7.png",
                          fullWidth: 1302,
                          fullHeight: 900,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oqT6B)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___12Xf
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___14OHk
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__e5J4U
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647 \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0646 \u062a\u0627 \u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc \u0647\u0627 \u0631\u0648 \u0628\u062f\u0633\u062a \u0628\u06cc\u0627\u0631\u06cc"
                              : "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647 \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0646 \u062a\u0627 \u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc \u0647\u0627 \u0631\u0648 \u0628\u062f\u0633\u062a \u0628\u06cc\u0627\u0631\u06cc"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eKjdr
                          )}
                        >
                          <ol
                            className={classNames(
                              projectcss.all,
                              projectcss.ol,
                              sty.ol__bdAsy
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__fvszW
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              ) ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        "شروع دوره PMS رو بهت پیامک می‌زنم تا " +
                                        $state.name +
                                        " رو بهتر درک کنی و از ناراحتی‌ها جلوگیری کنی."
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 pms \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647\u062a \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u0645 \u062a\u0627 \u0628\u062a\u0648\u0646\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0631\u0648 \u0628\u06cc\u0634\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0646\u06cc \u0648 \u0627\u0632 \u0646\u0627\u0631\u0627\u062d\u062a\u06cc \u0647\u0627\u06cc \u0627\u062d\u062a\u0645\u0627\u0644\u06cc \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u06a9\u0646\u06cc. ";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        "شروع دوره pms رو با پیامک بهت اطلاع میدم تا بتونی " +
                                        $state.name +
                                        " رو بیشتر درک کنی و از ناراحتی های احتمالی جلوگیری کنی. "
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 pms \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647\u062a \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u0645 \u062a\u0627 \u0628\u062a\u0648\u0646\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0631\u0648 \u0628\u06cc\u0634\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0646\u06cc \u0648 \u0627\u0632 \u0646\u0627\u0631\u0627\u062d\u062a\u06cc \u0647\u0627\u06cc \u0627\u062d\u062a\u0645\u0627\u0644\u06cc \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u06a9\u0646\u06cc. ";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              )}
                            </li>
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__w53T7
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              ) ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        "در هر روز PMS پیامک‌هایی برای " +
                                        $state.name +
                                        " ارسال میشه تا خودش رو کنترل کنه و به رابطه‌تون توجه داشته باشه\u060C بدون اینکه بفهمه تو این قابلیت رو فعال کردی."
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u062f\u0631 \u0647\u0631 \u0631\u0648\u0632 pms \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627\u06cc\u06cc \u0628\u0631\u0627\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u0634\u0647 \u06a9\u0647 \u0627\u0648\u0646 \u0647\u0645 \u0628\u062a\u0648\u0646\u0647 \u062e\u0648\u062f\u0634 \u0631\u0648 \u06a9\u0646\u062a\u0631\u0644 \u06a9\u0646\u0647 \u0648 \u062d\u0648\u0627\u0633\u0634 \u0628\u0647 \u062a\u0648 \u0648 \u0631\u0627\u0628\u0637\u0647 \u062a\u0648\u0646 \u0628\u0627\u0634\u0647(\u200c\u0627\u0644\u0628\u062a\u0647 \u06a9\u0647 \u0642\u0631\u0627\u0631 \u0646\u06cc\u0633\u062a \u0627\u06cc\u0646 \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627 \u0628\u0635\u0648\u0631\u062a \u0645\u0633\u062a\u0642\u06cc\u0645 \u0627\u0631\u0633\u0627\u0644 \u0628\u0634\u0646 \u0648 \u0627\u0648\u0646 \u0628\u0641\u0647\u0645\u0647 \u06a9\u0647 \u062a\u0648 \u0627\u06cc\u0646 \u0642\u0627\u0628\u0644\u06cc\u062a \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u06cc)";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        "در هر روز pms پیامک هایی برای " +
                                        $state.name +
                                        " ارسال میشه که اون هم بتونه خودش رو کنترل کنه و حواسش به تو و رابطه تون باشه(‌البته که قرار نیست این پیامک ها بصورت مستقیم ارسال بشن و اون بفهمه که تو این قابلیت رو فعال کردی)"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u062f\u0631 \u0647\u0631 \u0631\u0648\u0632 pms \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627\u06cc\u06cc \u0628\u0631\u0627\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u0634\u0647 \u06a9\u0647 \u0627\u0648\u0646 \u0647\u0645 \u0628\u062a\u0648\u0646\u0647 \u062e\u0648\u062f\u0634 \u0631\u0648 \u06a9\u0646\u062a\u0631\u0644 \u06a9\u0646\u0647 \u0648 \u062d\u0648\u0627\u0633\u0634 \u0628\u0647 \u062a\u0648 \u0648 \u0631\u0627\u0628\u0637\u0647 \u062a\u0648\u0646 \u0628\u0627\u0634\u0647(\u200c\u0627\u0644\u0628\u062a\u0647 \u06a9\u0647 \u0642\u0631\u0627\u0631 \u0646\u06cc\u0633\u062a \u0627\u06cc\u0646 \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627 \u0628\u0635\u0648\u0631\u062a \u0645\u0633\u062a\u0642\u06cc\u0645 \u0627\u0631\u0633\u0627\u0644 \u0628\u0634\u0646 \u0648 \u0627\u0648\u0646 \u0628\u0641\u0647\u0645\u0647 \u06a9\u0647 \u062a\u0648 \u0627\u06cc\u0646 \u0642\u0627\u0628\u0644\u06cc\u062a \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u06cc)";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              )}
                            </li>
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li___2Ik6A
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "mobile")
                                ? '"\u0634\u0631\u0648\u0639 \u067e\u0631\u06cc\u0648\u062f\u0634 \u0631\u0648 \u067e\u06cc\u0627\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u062a\u0627 \u0628\u0647\u062a\u0631 \u0627\u0632\u0634 \u0645\u0631\u0627\u0642\u0628\u062a \u06a9\u0646\u06cc \u0648 \u0631\u0627\u0628\u0637\u0647 \u0634\u0627\u062f\u062a\u0631\u06cc \u0628\u0633\u0627\u0632\u06cc."\n'
                                : "\u0634\u0631\u0648\u0639 \u067e\u0631\u06cc\u0648\u062f\u0634 \u0631\u0648 \u0628\u0631\u0627\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0645\u06cc\u06a9\u0646\u0645 \u062a\u0627 \u0628\u062a\u0648\u0646\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632\u0634 \u0645\u0631\u0627\u0642\u0628\u062a \u06a9\u0646\u06cc \u0648 \u06a9\u0645\u062a\u0631 \u062f\u0631\u062f \u0628\u06a9\u0634\u0647 \u0648 \u0631\u0627\u0628\u0637\u0647 \u0634\u0627\u062f\u062a\u0631\u06cc \u0628\u0633\u0627\u0632\u06cc"}
                            </li>
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__jj1Ct
                              )}
                            >
                              {
                                "\u0645\u0648\u0642\u0639 \u067e\u0631\u06cc\u0648\u062f\u0634 \u0628\u0631\u0627\u0634 \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627\u06cc\u06cc \u0645\u06cc\u0641\u0631\u0633\u062a\u0645 \u06a9\u0647 \u062f\u0631\u0633\u062a\u0647 \u06a9\u0647 \u067e\u0631\u06cc\u0648\u062f\u0647 \u0627\u0645\u0627 \u0627\u0648\u0646 \u0647\u0645 \u0645\u0631\u0627\u0642\u0628 \u062a\u0648 \u0628\u0627\u0634\u0647 \u0648 \u0646\u0630\u0627\u0631\u0647 \u0627\u062d\u0633\u0627\u0633 \u062a\u0646\u0647\u0627\u06cc\u06cc \u06a9\u0646\u06cc"
                              }
                            </li>
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__fNhzm
                              )}
                            >
                              {
                                "\u062a\u0648\u0635\u06cc\u0647 \u0647\u0627\u06cc\u06cc \u0628\u0631\u0627\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0645\u06cc\u06a9\u0646\u0645 \u06a9\u0647 \u0628\u062a\u0648\u0646\u06cc \u0628\u0647 \u0633\u0644\u0627\u0645\u062a\u0634 \u06a9\u0645\u06a9 \u06a9\u0646\u06cc \u0648 \u062e\u0648\u0634\u062d\u0627\u0644\u0634 \u06a9\u0646\u06cc"
                              }
                            </li>
                          </ol>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sObTg
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vkjnq
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__woZks
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___4HpdT
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.shapData.result[
                                        $state.selectedShop
                                      ].title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ghxWg
                                )}
                              >
                                {(() => {
                                  try {
                                    return $state.shapData.result[
                                      $state.selectedShop
                                    ].badge
                                      ? true
                                      : false;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___7SdD5
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.shapData.result[
                                            $state.selectedShop
                                          ].fullPrice.toLocaleString("en-US");
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "-";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                ) : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lNcfe
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          $state.shapData.result[
                                            $state.selectedShop
                                          ].price.toLocaleString("en-US") +
                                          " تومان "
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "-";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              {(() => {
                                try {
                                  return $state.shapData.result[
                                    $state.selectedShop
                                  ].badge
                                    ? true
                                    : false;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__tp8I4
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ukP2E
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.shapData.result[
                                            $state.selectedShop
                                          ].badge;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "-";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              ) : null}
                            </div>
                            {(() => {
                              try {
                                return !$state.discountBox;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__p4AKh
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateDiscountBox"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["discountBox"]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateDiscountBox"] != null &&
                                    typeof $steps["updateDiscountBox"] ===
                                      "object" &&
                                    typeof $steps["updateDiscountBox"].then ===
                                      "function"
                                  ) {
                                    $steps["updateDiscountBox"] = await $steps[
                                      "updateDiscountBox"
                                    ];
                                  }
                                }}
                              >
                                {
                                  "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                                }
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return $state.discountBox;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__r0EC
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__dytj
                                  )}
                                >
                                  {(() => {
                                    const child$Props = {
                                      allowClear: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobile"
                                      )
                                        ? false
                                        : false,
                                      autoFocus: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobile"
                                      )
                                        ? false
                                        : false,
                                      bordered: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobile"
                                      )
                                        ? false
                                        : false,
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input2
                                      ),
                                      disabled: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobile"
                                      )
                                        ? false
                                        : false,
                                      onChange: async (...eventArgs: any) => {
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input2", "value"],
                                          AntdInput_Helpers
                                        ).apply(null, eventArgs);

                                        (async event => {
                                          const $steps = {};
                                        }).apply(null, eventArgs);
                                      },
                                      placeholder:
                                        "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                                      prefix: (
                                        <Icon10Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__mdb1D
                                          )}
                                          role={"img"}
                                        />
                                      ),

                                      readOnly: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobile"
                                      )
                                        ? false
                                        : false,
                                      size: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobile"
                                      )
                                        ? "small"
                                        : "small",
                                      suffix: null,
                                      value: generateStateValueProp($state, [
                                        "input2",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input2.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input2"}
                                        data-plasmic-override={overrides.input2}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                  {(() => {
                                    try {
                                      return $state.visiblebox;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___76Zbw
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateVisiblebox"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["visiblebox"]
                                                },
                                                operation: 0,
                                                value: false
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateVisiblebox"] != null &&
                                          typeof $steps["updateVisiblebox"] ===
                                            "object" &&
                                          typeof $steps["updateVisiblebox"]
                                            .then === "function"
                                        ) {
                                          $steps["updateVisiblebox"] =
                                            await $steps["updateVisiblebox"];
                                        }
                                      }}
                                    />
                                  ) : null}
                                </div>
                                <Button
                                  data-plasmic-name={"button5"}
                                  data-plasmic-override={overrides.button5}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button5
                                  )}
                                  color={generateStateValueProp($state, [
                                    "button5",
                                    "color"
                                  ])}
                                  isDisabled={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobile"
                                    )
                                      ? (() => {
                                          try {
                                            return $state.input2.value ==
                                              null || $state.input2.value == ""
                                              ? true
                                              : false;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      : (() => {
                                          try {
                                            return $state.input2.value == "" ||
                                              $state.input2.value == null
                                              ? true
                                              : false;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                  }
                                  load={generateStateValueProp($state, [
                                    "button5",
                                    "load"
                                  ])}
                                  loading={generateStateValueProp($state, [
                                    "button5",
                                    "loading"
                                  ])}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateVisiblebox"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["visiblebox"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateVisiblebox"] != null &&
                                      typeof $steps["updateVisiblebox"] ===
                                        "object" &&
                                      typeof $steps["updateVisiblebox"].then ===
                                        "function"
                                    ) {
                                      $steps["updateVisiblebox"] = await $steps[
                                        "updateVisiblebox"
                                      ];
                                    }

                                    $steps["updateDiscountCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["discountCode"]
                                            },
                                            operation: 0,
                                            value: $state.input2.value
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDiscountCode"] != null &&
                                      typeof $steps["updateDiscountCode"] ===
                                        "object" &&
                                      typeof $steps["updateDiscountCode"]
                                        .then === "function"
                                    ) {
                                      $steps["updateDiscountCode"] =
                                        await $steps["updateDiscountCode"];
                                    }
                                  }}
                                  onColorChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button5",
                                        "color"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  onLoadChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button5",
                                        "load"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  onLoadingChange={async (
                                    ...eventArgs: any
                                  ) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button5",
                                        "loading"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                >
                                  {"\u062a\u0627\u06cc\u06cc\u062f"}
                                </Button>
                              </div>
                            ) : null}
                            <Button
                              data-plasmic-name={"button6"}
                              data-plasmic-override={overrides.button6}
                              className={classNames(
                                "__wab_instance",
                                sty.button6
                              )}
                              color={generateStateValueProp($state, [
                                "button6",
                                "color"
                              ])}
                              endIcon={
                                <PlasmicIcon__
                                  PlasmicIconType={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobile"
                                    )
                                      ? Icon12Icon
                                      : Icon12Icon
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__zanJz
                                  )}
                                  role={"img"}
                                />
                              }
                              isDisabled={(() => {
                                try {
                                  return $state.loadingshop;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                              load={generateStateValueProp($state, [
                                "button6",
                                "load"
                              ])}
                              loading={generateStateValueProp($state, [
                                "button6",
                                "loading"
                              ])}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateLoadingshop"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["loadingshop"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateLoadingshop"] != null &&
                                  typeof $steps["updateLoadingshop"] ===
                                    "object" &&
                                  typeof $steps["updateLoadingshop"].then ===
                                    "function"
                                ) {
                                  $steps["updateLoadingshop"] = await $steps[
                                    "updateLoadingshop"
                                  ];
                                }

                                $steps["updateBuyId"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["buyId"]
                                        },
                                        operation: 0,
                                        value:
                                          $state.shapData.result[
                                            $state.selectedShop
                                          ].id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateBuyId"] != null &&
                                  typeof $steps["updateBuyId"] === "object" &&
                                  typeof $steps["updateBuyId"].then ===
                                    "function"
                                ) {
                                  $steps["updateBuyId"] = await $steps[
                                    "updateBuyId"
                                  ];
                                }

                                $steps["invokeGlobalAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                id: $state.buyId,
                                                offCode: $state.discountCode,
                                                refCode:
                                                  $state.userdata.result.man
                                                    .refCode,
                                                redirectUrl:
                                                  "https://apps.liom.app/shop-result?r=" +
                                                  $state.userdata.result.man
                                                    .refCode +
                                                  "&buyId=" +
                                                  $state.buyId +
                                                  "&offCode=" +
                                                  $state.discountCode +
                                                  "&valueShop=" +
                                                  $state.shapData.result[
                                                    $state.selectedShop
                                                  ].type +
                                                  "-" +
                                                  $state.shapData.result[
                                                    $state.selectedShop
                                                  ].value +
                                                  "&price=" +
                                                  $state.shapData.result[
                                                    $state.selectedShop
                                                  ].price +
                                                  "&manId=" +
                                                  $state.userdata.result.man.id
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })(),
                                          (() => {
                                            try {
                                              return {
                                                headers: {
                                                  "Content-Type":
                                                    "application/json",
                                                  Authorization:
                                                    $state.tokenUser
                                                }
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }

                                $steps["goToPage"] =
                                  $steps.invokeGlobalAction?.data?.success ==
                                    true &&
                                  $steps.invokeGlobalAction?.data?.result !=
                                    false
                                    ? (() => {
                                        const actionArgs = {
                                          destination: (() => {
                                            try {
                                              return $steps.invokeGlobalAction
                                                .data.result;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        };
                                        return (({ destination }) => {
                                          if (
                                            typeof destination === "string" &&
                                            destination.startsWith("#")
                                          ) {
                                            document
                                              .getElementById(
                                                destination.substr(1)
                                              )
                                              .scrollIntoView({
                                                behavior: "smooth"
                                              });
                                          } else {
                                            __nextRouter?.push(destination);
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["goToPage"] != null &&
                                  typeof $steps["goToPage"] === "object" &&
                                  typeof $steps["goToPage"].then === "function"
                                ) {
                                  $steps["goToPage"] = await $steps["goToPage"];
                                }

                                $steps["updateLoadingshop2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["loadingshop"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateLoadingshop2"] != null &&
                                  typeof $steps["updateLoadingshop2"] ===
                                    "object" &&
                                  typeof $steps["updateLoadingshop2"].then ===
                                    "function"
                                ) {
                                  $steps["updateLoadingshop2"] = await $steps[
                                    "updateLoadingshop2"
                                  ];
                                }

                                $steps["invokeGlobalAction2"] =
                                  $steps.invokeGlobalAction.data.success ==
                                    false ||
                                  $steps.invokeGlobalAction.data.result == false
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "error",
                                            "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                            "top-left"
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.showToast"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["invokeGlobalAction2"] != null &&
                                  typeof $steps["invokeGlobalAction2"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction2"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction2"] = await $steps[
                                    "invokeGlobalAction2"
                                  ];
                                }
                              }}
                              onColorChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button6",
                                    "color"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              onLoadChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button6",
                                    "load"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              onLoadingChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button6",
                                    "loading"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              showEndIcon={(() => {
                                try {
                                  return $state.loadingshop;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "showEndIcon";
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__sxBly
                                )}
                              >
                                {
                                  "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                                }
                              </div>
                            </Button>
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__xlmDz
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateShopModalWebOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["shopModalWeb", "open"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateShopModalWebOpen"] != null &&
                                  typeof $steps["updateShopModalWebOpen"] ===
                                    "object" &&
                                  typeof $steps["updateShopModalWebOpen"]
                                    .then === "function"
                                ) {
                                  $steps["updateShopModalWebOpen"] =
                                    await $steps["updateShopModalWebOpen"];
                                }

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            $state.subscription[
                                              $state.subscriptionCurrentIndex
                                            ].clickitem = true;
                                            return ($state.buyId =
                                              $state.shapData.result[
                                                $state.subscriptionCurrentIndex
                                              ].id);
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }}
                            >
                              {
                                "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                              }
                            </p>
                            {(
                              hasVariant(globalVariants, "screen", "mobile")
                                ? true
                                : false
                            ) ? (
                              <p
                                className={classNames(
                                  projectcss.all,
                                  projectcss.p,
                                  projectcss.__wab_text,
                                  sty.p__yk17Y
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              $state.subscription2[
                                                $state.subscriptionCurrentIndex
                                              ].clickitem = true;
                                              return ($state.buyId =
                                                $state.shapData.result[
                                                  $state.subscriptionCurrentIndex
                                                ].id);
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }

                                  $steps["updateShopModalMobileClick"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "shopModalMobile",
                                              "click"
                                            ]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateShopModalMobileClick"] !=
                                      null &&
                                    typeof $steps[
                                      "updateShopModalMobileClick"
                                    ] === "object" &&
                                    typeof $steps["updateShopModalMobileClick"]
                                      .then === "function"
                                  ) {
                                    $steps["updateShopModalMobileClick"] =
                                      await $steps[
                                        "updateShopModalMobileClick"
                                      ];
                                  }
                                }}
                              >
                                {
                                  "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                                }
                              </p>
                            ) : null}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </AntdModal>
              <AntdTooltip
                data-plasmic-name={"tooltip"}
                data-plasmic-override={overrides.tooltip}
                className={classNames("__wab_instance", sty.tooltip)}
                placement={"left"}
                titleText={
                  "\u0628\u0647\u0634 \u0628\u06af\u0648 \u062d\u0648\u0627\u0633\u0645 \u0628\u0647\u062a \u0647\u0633\u062a."
                }
              >
                <div className={classNames(projectcss.all, sty.freeBox__sKsJr)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___81Z6T)}
                  >
                    <Heart
                      data-plasmic-name={"heart"}
                      data-plasmic-override={overrides.heart}
                      className={classNames("__wab_instance", sty.heart)}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mXDr
                    )}
                  >
                    {
                      "\u0628\u0647\u0634 \u0628\u06af\u0648 \u062d\u0648\u0627\u0633\u0645 \u0628\u0647\u062a \u0647\u0633\u062a."
                    }
                  </div>
                </div>
              </AntdTooltip>
            </div>
          ) : null}
          {(
            hasVariant($state, "page", "reminder")
              ? true
              : hasVariant($state, "reminder", "reminder")
              ? true
              : (() => {
                  try {
                    return $state.loadingPage;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              data-plasmic-name={"loading"}
              data-plasmic-override={overrides.loading}
              className={classNames(projectcss.all, sty.loading, {
                [sty.loadingnoPartner]: hasVariant(
                  $state,
                  "noPartner",
                  "noPartner"
                ),
                [sty.loadingpage_reminder]: hasVariant(
                  $state,
                  "page",
                  "reminder"
                ),
                [sty.loadingreminder]: hasVariant(
                  $state,
                  "reminder",
                  "reminder"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__u5GW, {
                  [sty.freeBoxnoPartner__u5GWc7PeD]: hasVariant(
                    $state,
                    "noPartner",
                    "noPartner"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___2U0Lk, {
                    [sty.freeBoxnoPartner___2U0Lkc7PeD]: hasVariant(
                      $state,
                      "noPartner",
                      "noPartner"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iHtHu)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1II5,
                        "shimmer",
                        {
                          [sty.freeBoxnoPartner___1II5C7PeD]: hasVariant(
                            $state,
                            "noPartner",
                            "noPartner"
                          )
                        }
                      )}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__a8Eua)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__z6Vt3,
                          "shimmer"
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ibnI7,
                          "shimmer",
                          {
                            [sty.freeBoxnoPartner__ibnI7C7PeD]: hasVariant(
                              $state,
                              "noPartner",
                              "noPartner"
                            )
                          }
                        )}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___02NW)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__kXwIg,
                        "shimmer",
                        {
                          [sty.freeBoxnoPartner__kXwIgc7PeD]: hasVariant(
                            $state,
                            "noPartner",
                            "noPartner"
                          )
                        }
                      )}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1LZfu)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__dRBuT,
                        "shimmer"
                      )}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iCDfM)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__z35I0,
                        "shimmer",
                        {
                          [sty.freeBoxpage_reminder__z35I0SlU1R]: hasVariant(
                            $state,
                            "page",
                            "reminder"
                          ),
                          [sty.freeBoxreminder__z35I0UHqpO]: hasVariant(
                            $state,
                            "reminder",
                            "reminder"
                          )
                        }
                      )}
                    />
                  </div>
                </div>
              </div>
            </div>
          ) : null}
          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              hasVariant(globalVariants, "screen", "mobile")
                ? "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
                : "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
            }
          />

          <PullToRefresh
            data-plasmic-name={"pullToRefresh"}
            data-plasmic-override={overrides.pullToRefresh}
            className={classNames("__wab_instance", sty.pullToRefresh)}
            onRefresh={async () => {
              const $steps = {};

              $steps["refreshData"] = true
                ? (() => {
                    const actionArgs = {
                      queryInvalidation: ["plasmic_refresh_all"]
                    };
                    return (async ({ queryInvalidation }) => {
                      if (!queryInvalidation) {
                        return;
                      }
                      await plasmicInvalidate(queryInvalidation);
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["refreshData"] != null &&
                typeof $steps["refreshData"] === "object" &&
                typeof $steps["refreshData"].then === "function"
              ) {
                $steps["refreshData"] = await $steps["refreshData"];
              }
            }}
          />

          {(
            hasVariant($state, "noPartner", "noPartner")
              ? true
              : (() => {
                  try {
                    return (
                      Object.keys($state.userdata).length == 0 &&
                      !$state.loadingPage
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__sVmd2, {
                [sty.freeBoxnoPartner__sVmd2C7PeD]: hasVariant(
                  $state,
                  "noPartner",
                  "noPartner"
                ),
                [sty.freeBoxpage_reminder__sVmd2SlU1R]: hasVariant(
                  $state,
                  "page",
                  "reminder"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox___286PB)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8NRp
                  )}
                >
                  {
                    "\u0644\u0637\u0641\u0627 \u0627\u0632 \u0627\u062a\u0635\u0627\u0644 \u0627\u06cc\u0646\u062a\u0631\u0646\u062a \u062e\u0648\u062f \u0645\u0637\u0645\u0639\u0646 \u0634\u0648\u06cc\u062f."
                  }
                </div>
              </div>
              <Button
                data-plasmic-name={"button19"}
                data-plasmic-override={overrides.button19}
                className={classNames("__wab_instance", sty.button19)}
                color={generateStateValueProp($state, ["button19", "color"])}
                endIcon={
                  <Icon144Icon
                    className={classNames(projectcss.all, sty.svg___6Gs4D)}
                    role={"img"}
                  />
                }
                load={generateStateValueProp($state, ["button19", "load"])}
                loading={generateStateValueProp($state, [
                  "button19",
                  "loading"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              window.sessionStorage.removeItem("cash");
                              return window.location.reload();
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button19", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button19", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadingChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button19", "loading"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg__qMVeh)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1BM9
                  )}
                >
                  {
                    "\u0628\u0627\u0631\u06af\u0632\u0627\u0631\u06cc \u0645\u062c\u062f\u062f"
                  }
                </div>
              </Button>
            </div>
          ) : null}
          {(
            hasVariant($state, "page", "reminder") &&
            hasVariant($state, "reminder", "reminder")
              ? true
              : hasVariant($state, "page", "reminder")
              ? true
              : hasVariant($state, "reminder", "reminder")
              ? true
              : (() => {
                  try {
                    return !(
                      window.FlutterChannel &&
                      typeof window.FlutterChannel.postMessage === "function"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section, {
                [sty.sectionnoPartner]: hasVariant(
                  $state,
                  "noPartner",
                  "noPartner"
                ),
                [sty.sectionpage_reminder]: hasVariant(
                  $state,
                  "page",
                  "reminder"
                ),
                [sty.sectionreminder]: hasVariant(
                  $state,
                  "reminder",
                  "reminder"
                ),
                [sty.sectionreminder_page_reminder]:
                  hasVariant($state, "page", "reminder") &&
                  hasVariant($state, "reminder", "reminder")
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__s6DdH)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__maG1, {
                    [sty.freeBoxnoPartner__maG1C7PeD]: hasVariant(
                      $state,
                      "noPartner",
                      "noPartner"
                    ),
                    [sty.freeBoxpage_reminder__maG1SlU1R]: hasVariant(
                      $state,
                      "page",
                      "reminder"
                    )
                  })}
                >
                  {(() => {
                    try {
                      return $ctx.query.r == "8z1hf8";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      aria-pressed={undefined}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__j5Sw8,
                        {
                          [sty.freeBoxnoPartner__j5Sw8C7PeD]: hasVariant(
                            $state,
                            "noPartner",
                            "noPartner"
                          ),
                          [sty.freeBoxpage_reminder__j5Sw8SlU1R]: hasVariant(
                            $state,
                            "page",
                            "reminder"
                          )
                        }
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updatePage"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: "page",
                                operation: 0,
                                value: "reminder"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePage"] != null &&
                          typeof $steps["updatePage"] === "object" &&
                          typeof $steps["updatePage"].then === "function"
                        ) {
                          $steps["updatePage"] = await $steps["updatePage"];
                        }
                      }}
                    >
                      <PlasmicIcon__
                        PlasmicIconType={
                          hasVariant($state, "page", "reminder")
                            ? Icon289Icon
                            : Icon287Icon
                        }
                        className={classNames(projectcss.all, sty.svg__jzbyo, {
                          [sty.svgnoPartner__jzbyOc7PeD]: hasVariant(
                            $state,
                            "noPartner",
                            "noPartner"
                          ),
                          [sty.svgpage_reminder__jzbyOslU1R]: hasVariant(
                            $state,
                            "page",
                            "reminder"
                          )
                        })}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lvaGt,
                          {
                            [sty.textpage_reminder__lvaGtslU1R]: hasVariant(
                              $state,
                              "page",
                              "reminder"
                            )
                          }
                        )}
                      >
                        {"\u06cc\u0627\u062f \u0622\u0648\u0631\u06cc"}
                      </div>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5YvYk, {
                      [sty.freeBoxpage_reminder___5YvYKslU1R]: hasVariant(
                        $state,
                        "page",
                        "reminder"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  if (
                                    typeof window !== "undefined" &&
                                    window.FlutterChannel &&
                                    typeof window.FlutterChannel.postMessage ===
                                      "function"
                                  ) {
                                    return window.FlutterChannel.postMessage(
                                      `#inAppWebView**@@**${"همیار"}**@@**${"https://apps.liom.app/hamyar/"}`
                                    );
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["updatePage"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "page",
                              operation: 1,
                              value: "reminder"
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, undefined);
                              return undefined;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePage"] != null &&
                        typeof $steps["updatePage"] === "object" &&
                        typeof $steps["updatePage"].then === "function"
                      ) {
                        $steps["updatePage"] = await $steps["updatePage"];
                      }
                    }}
                  >
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant($state, "page", "reminder")
                          ? Icon288Icon
                          : Icon7Icon
                      }
                      className={classNames(projectcss.all, sty.svg__nzzVb, {
                        [sty.svgpage_reminder__nzzVbslU1R]: hasVariant(
                          $state,
                          "page",
                          "reminder"
                        )
                      })}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Tc1Z,
                        {
                          [sty.textpage_reminder___0Tc1ZslU1R]: hasVariant(
                            $state,
                            "page",
                            "reminder"
                          )
                        }
                      )}
                    >
                      {"\u0647\u0645\u06cc\u0627\u0631"}
                    </div>
                  </div>
                  <div
                    aria-pressed={undefined}
                    className={classNames(projectcss.all, sty.freeBox__avzuw)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToFood"] =
                        localStorage.getItem("token") != "undefined" ||
                        localStorage.getItem("token") != null
                          ? (() => {
                              const actionArgs = { destination: `/food` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToFood"] != null &&
                        typeof $steps["goToFood"] === "object" &&
                        typeof $steps["goToFood"].then === "function"
                      ) {
                        $steps["goToFood"] = await $steps["goToFood"];
                      }
                    }}
                  >
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? Icon72Icon
                          : Icon72Icon
                      }
                      className={classNames(projectcss.all, sty.svg__teWPd)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ssYYa
                      )}
                    >
                      {
                        "\u06a9\u0646\u062a\u0631\u0644 \u062a\u063a\u0630\u06cc\u0647"
                      }
                    </div>
                  </div>
                  <div
                    aria-pressed={undefined}
                    className={classNames(projectcss.all, sty.freeBox__vuPfb, {
                      [sty.freeBoxnoPartner__vuPfBc7PeD]: hasVariant(
                        $state,
                        "noPartner",
                        "noPartner"
                      ),
                      [sty.freeBoxpage_reminder__vuPfBslU1R]: hasVariant(
                        $state,
                        "page",
                        "reminder"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] =
                        $state.tokenUser != ""
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return `https://tools.liom.app/chat-bot/?hamyar=true`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                  >
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? Icon234Icon
                          : Icon234Icon
                      }
                      className={classNames(projectcss.all, sty.svg__w9En1, {
                        [sty.svgnoPartner__w9En1C7PeD]: hasVariant(
                          $state,
                          "noPartner",
                          "noPartner"
                        ),
                        [sty.svgpage_reminder__w9En1SlU1R]: hasVariant(
                          $state,
                          "page",
                          "reminder"
                        )
                      })}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qjgF8,
                        {
                          [sty.textpage_reminder__qjgF8SlU1R]: hasVariant(
                            $state,
                            "page",
                            "reminder"
                          )
                        }
                      )}
                    >
                      {
                        "\u067e\u0632\u0634\u06a9 \u0647\u0648\u0634\u0645\u0646\u062f"
                      }
                    </div>
                  </div>
                  <div
                    aria-pressed={undefined}
                    className={classNames(projectcss.all, sty.freeBox__wi1Kk, {
                      [sty.freeBoxnoPartner__wi1KKc7PeD]: hasVariant(
                        $state,
                        "noPartner",
                        "noPartner"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToSelfCare"] =
                        $state.tokenUser != ""
                          ? (() => {
                              const actionArgs = { destination: `/Self-care` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToSelfCare"] != null &&
                        typeof $steps["goToSelfCare"] === "object" &&
                        typeof $steps["goToSelfCare"].then === "function"
                      ) {
                        $steps["goToSelfCare"] = await $steps["goToSelfCare"];
                      }
                    }}
                  >
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? Icon213Icon
                          : Icon213Icon
                      }
                      className={classNames(projectcss.all, sty.svg__qquGr, {
                        [sty.svgnoPartner__qquGrc7PeD]: hasVariant(
                          $state,
                          "noPartner",
                          "noPartner"
                        )
                      })}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8HQk6
                      )}
                    >
                      {
                        "\u0645\u0631\u0627\u0642\u0628\u062a \u0627\u0632 \u062e\u0648\u062f"
                      }
                    </div>
                  </div>
                  {(
                    hasVariant($state, "noPartner", "noPartner") ? true : false
                  ) ? (
                    <div
                      aria-pressed={undefined}
                      className={classNames(projectcss.all, sty.freeBox__ef6G, {
                        [sty.freeBoxnoPartner__ef6GC7PeD]: hasVariant(
                          $state,
                          "noPartner",
                          "noPartner"
                        )
                      })}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToSelfCare"] =
                          localStorage.getItem("token") != "undefined" ||
                          localStorage.getItem("token") != null
                            ? (() => {
                                const actionArgs = {
                                  destination: `/Self-care`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["goToSelfCare"] != null &&
                          typeof $steps["goToSelfCare"] === "object" &&
                          typeof $steps["goToSelfCare"].then === "function"
                        ) {
                          $steps["goToSelfCare"] = await $steps["goToSelfCare"];
                        }
                      }}
                    >
                      <PlasmicIcon__
                        PlasmicIconType={
                          hasVariant(globalVariants, "screen", "mobile")
                            ? Icon213Icon
                            : Icon234Icon
                        }
                        className={classNames(projectcss.all, sty.svg__kt0Qf)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aWjKp
                        )}
                      >
                        {
                          "\u067e\u0632\u0634\u06a9 \u0647\u0648\u0634\u0645\u0646\u062f"
                        }
                      </div>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5FEcR)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToBioritm"] = true
                        ? (() => {
                            const actionArgs = { destination: `/bioritm` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToBioritm"] != null &&
                        typeof $steps["goToBioritm"] === "object" &&
                        typeof $steps["goToBioritm"].then === "function"
                      ) {
                        $steps["goToBioritm"] = await $steps["goToBioritm"];
                      }
                    }}
                  >
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? Icon23Icon
                          : Icon23Icon
                      }
                      className={classNames(projectcss.all, sty.svg__pL0UZ)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oJjUp
                      )}
                    >
                      {"\u062d\u0627\u0644 \u0627\u0645\u0631\u0648\u0632"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sHtVa, {
                      [sty.freeBoxnoPartner__sHtVAc7PeD]: hasVariant(
                        $state,
                        "noPartner",
                        "noPartner"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return `/clinic?token=${localStorage.getItem(
                                    "token"
                                  )}&gender=male`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                  >
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? Icon202Icon
                          : Icon202Icon
                      }
                      className={classNames(projectcss.all, sty.svg__hUkeH)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0CHqd
                      )}
                    >
                      {"\u06a9\u0644\u06cc\u0646\u06cc\u06a9"}
                    </div>
                  </div>
                </div>
              </div>
            </section>
          ) : null}
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              "<!-- Hotjar Tracking Code for Site 5171830 (name missing) -->\r\n<script>\r\n    (function(h,o,t,j,a,r){\r\n        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};\r\n        h._hjSettings={hjid:5171830,hjsv:6};\r\n        a=o.getElementsByTagName('head')[0];\r\n        r=o.createElement('script');r.async=1;\r\n        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;\r\n        a.appendChild(r);\r\n    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');\r\n</script>"
            }
          />

          <Dialog
            data-plasmic-name={"dialog"}
            data-plasmic-override={overrides.dialog}
            className={classNames("__wab_instance", sty.dialog)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog", "opendialog"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog",
              "opendialog"
            ])}
          >
            <ApiRequest
              data-plasmic-name={"shopDialog"}
              data-plasmic-override={overrides.shopDialog}
              body={(() => {
                try {
                  return { refCode: $state.userdata?.result?.man?.refCode };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.shopDialog)}
              config={(() => {
                try {
                  return {
                    headers: {
                      "Content-Type": "application/json",
                      Authorization: $state.userdata.result.token
                    }
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zqn4X
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div className={classNames(projectcss.all, sty.freeBox__mFos)}>
                  <Icon115Icon
                    className={classNames(projectcss.all, sty.svg__oGeh9)}
                    role={"img"}
                  />
                </div>
              }
              method={"POST"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "shopDialog",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "shopDialog",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shopDialog", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              shouldFetch={true}
              url={"https://n8n.staas.ir/webhook/hamyar/shop"}
            >
              <div className={classNames(projectcss.all, sty.freeBox___4Mhw0)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___34T1Q)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xmGJ)}
                  />

                  <DialogTitle
                    data-plasmic-name={"dialogTitle"}
                    data-plasmic-override={overrides.dialogTitle}
                    className={classNames("__wab_instance", sty.dialogTitle)}
                  >
                    <h5
                      data-plasmic-name={"h5"}
                      data-plasmic-override={overrides.h5}
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        sty.h5
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rzVuQ
                        )}
                      >
                        {
                          "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9"
                        }
                      </div>
                    </h5>
                  </DialogTitle>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__eGfRn)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fxi5N
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.shopDialog.data.result.find(
                            item => item.selected === 1
                          ).descc;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "You can insert dialog body content here in this slot.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iWje8)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fMtGi)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? (() => {
                              try {
                                return $state.shopDialog.data.result.find(
                                  item => item.selected === 1
                                ).topBadge
                                  ? true
                                  : false;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                          : (() => {
                              try {
                                return $state.shopDialog.data.result.find(
                                  item => item.selected === 1
                                ).topBadge
                                  ? true
                                  : false;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lECft
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__la3I3
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.shopDialog.data.result.find(
                                    item => item.selected === 1
                                  ).topBadge;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mLFhM
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fzFeK
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.shopDialog.data.result.find(
                                  item => item.selected === 1
                                ).title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jIbu4
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8Zbk4
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.shopDialog.data.result
                                    .find(item => item.selected === 1)
                                    .fullPrice.toLocaleString();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eKoLd
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    $state.shopDialog.data.result
                                      .find(item => item.selected === 1)
                                      .price.toLocaleString() + "  تومان"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        {(() => {
                          try {
                            return $state.shopDialog.data.result.find(
                              item => item.selected === 1
                            ).badge
                              ? true
                              : false;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bvh32
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zkxG
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.shopDialog.data.result.find(
                                      item => item.selected === 1
                                    ).badge;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "1";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        ) : null}
                      </div>
                      {(() => {
                        try {
                          return !$state.discountBox;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__frfXm
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateDiscountBox"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["discountBox"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDiscountBox"] != null &&
                              typeof $steps["updateDiscountBox"] === "object" &&
                              typeof $steps["updateDiscountBox"].then ===
                                "function"
                            ) {
                              $steps["updateDiscountBox"] = await $steps[
                                "updateDiscountBox"
                              ];
                            }
                          }}
                        >
                          {
                            "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                          }
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return $state.discountBox;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b7Fgp
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___1WaWg
                            )}
                          >
                            {(() => {
                              const child$Props = {
                                allowClear: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                autoFocus: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                bordered: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                className: classNames(
                                  "__wab_instance",
                                  sty.input4
                                ),
                                disabled: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input4", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);

                                  (async event => {
                                    const $steps = {};
                                  }).apply(null, eventArgs);
                                },
                                placeholder:
                                  "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                                prefix: (
                                  <Icon10Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__ezmQa
                                    )}
                                    role={"img"}
                                  />
                                ),

                                readOnly: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                size: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? "small"
                                  : "small",
                                suffix: null,
                                value: generateStateValueProp($state, [
                                  "input4",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input4.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input4"}
                                  data-plasmic-override={overrides.input4}
                                  {...child$Props}
                                />
                              );
                            })()}
                            {(() => {
                              try {
                                return $state.visiblebox;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__duKzp
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateVisiblebox"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["visiblebox"]
                                          },
                                          operation: 0,
                                          value: false
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateVisiblebox"] != null &&
                                    typeof $steps["updateVisiblebox"] ===
                                      "object" &&
                                    typeof $steps["updateVisiblebox"].then ===
                                      "function"
                                  ) {
                                    $steps["updateVisiblebox"] = await $steps[
                                      "updateVisiblebox"
                                    ];
                                  }
                                }}
                              />
                            ) : null}
                          </div>
                          <Button
                            data-plasmic-name={"button12"}
                            data-plasmic-override={overrides.button12}
                            className={classNames(
                              "__wab_instance",
                              sty.button12
                            )}
                            color={generateStateValueProp($state, [
                              "button12",
                              "color"
                            ])}
                            isDisabled={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? (() => {
                                    try {
                                      return $state.input4.value == null ||
                                        $state.input4.value == ""
                                        ? true
                                        : false;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                : (() => {
                                    try {
                                      return $state.input4.value == "" ||
                                        $state.input4.value == null
                                        ? true
                                        : false;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                            }
                            load={generateStateValueProp($state, [
                              "button12",
                              "load"
                            ])}
                            loading={generateStateValueProp($state, [
                              "button12",
                              "loading"
                            ])}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateVisiblebox"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["visiblebox"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateVisiblebox"] != null &&
                                typeof $steps["updateVisiblebox"] ===
                                  "object" &&
                                typeof $steps["updateVisiblebox"].then ===
                                  "function"
                              ) {
                                $steps["updateVisiblebox"] = await $steps[
                                  "updateVisiblebox"
                                ];
                              }

                              $steps["updateDiscountCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["discountCode"]
                                      },
                                      operation: 0,
                                      value: $state.input4.value
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateDiscountCode"] != null &&
                                typeof $steps["updateDiscountCode"] ===
                                  "object" &&
                                typeof $steps["updateDiscountCode"].then ===
                                  "function"
                              ) {
                                $steps["updateDiscountCode"] = await $steps[
                                  "updateDiscountCode"
                                ];
                              }
                            }}
                            onColorChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button12",
                                  "color"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onLoadChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button12",
                                  "load"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onLoadingChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button12",
                                  "loading"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            {"\u062a\u0627\u06cc\u06cc\u062f"}
                          </Button>
                        </div>
                      ) : null}
                      <Button
                        data-plasmic-name={"button8"}
                        data-plasmic-override={overrides.button8}
                        className={classNames("__wab_instance", sty.button8)}
                        color={generateStateValueProp($state, [
                          "button8",
                          "color"
                        ])}
                        endIcon={
                          <Icon12Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__cKiRt
                            )}
                            role={"img"}
                          />
                        }
                        isDisabled={(() => {
                          try {
                            return $state.loadingshop;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        load={generateStateValueProp($state, [
                          "button8",
                          "load"
                        ])}
                        loading={generateStateValueProp($state, [
                          "button8",
                          "loading"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateLoadingshop"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadingshop"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoadingshop"] != null &&
                            typeof $steps["updateLoadingshop"] === "object" &&
                            typeof $steps["updateLoadingshop"].then ===
                              "function"
                          ) {
                            $steps["updateLoadingshop"] = await $steps[
                              "updateLoadingshop"
                            ];
                          }

                          $steps["updateBuyId"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["buyId"]
                                  },
                                  operation: 0,
                                  value: $state.shapData.result.find(
                                    item => item.selected === 1
                                  ).id
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateBuyId"] != null &&
                            typeof $steps["updateBuyId"] === "object" &&
                            typeof $steps["updateBuyId"].then === "function"
                          ) {
                            $steps["updateBuyId"] = await $steps["updateBuyId"];
                          }

                          $steps["updateSelectedShop"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["selectedShop"]
                                  },
                                  operation: 0,
                                  value: $state.shapData.result.findIndex(
                                    item => item.selected === 1
                                  )
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSelectedShop"] != null &&
                            typeof $steps["updateSelectedShop"] === "object" &&
                            typeof $steps["updateSelectedShop"].then ===
                              "function"
                          ) {
                            $steps["updateSelectedShop"] = await $steps[
                              "updateSelectedShop"
                            ];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          id: $state.buyId,
                                          offCode: $state.discountCode,
                                          refCode:
                                            $state.userdata.result.man.refCode,
                                          redirectUrl:
                                            "https://apps.liom.app/shop-result?r=" +
                                            $state.userdata.result.man.refCode +
                                            "&buyId=" +
                                            $state.buyId +
                                            "&offCode=" +
                                            $state.discountCode +
                                            "&valueShop=" +
                                            $state.shapData.result[
                                              $state.selectedShop
                                            ].type +
                                            "-" +
                                            $state.shapData.result[
                                              $state.selectedShop
                                            ].value +
                                            "&price=" +
                                            $state.shapData.result[
                                              $state.selectedShop
                                            ].price +
                                            "&manId=" +
                                            $state.userdata.result.man.id
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization: $state.tokenUser
                                          }
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["goToPage"] =
                            $steps.invokeGlobalAction?.data?.success == true &&
                            $steps.invokeGlobalAction?.data?.result != false
                              ? (() => {
                                  const actionArgs = {
                                    destination: (() => {
                                      try {
                                        return $steps.invokeGlobalAction.data
                                          .result;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }

                          $steps["updateLoadingshop2"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadingshop"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoadingshop2"] != null &&
                            typeof $steps["updateLoadingshop2"] === "object" &&
                            typeof $steps["updateLoadingshop2"].then ===
                              "function"
                          ) {
                            $steps["updateLoadingshop2"] = await $steps[
                              "updateLoadingshop2"
                            ];
                          }

                          $steps["invokeGlobalAction2"] =
                            $steps.invokeGlobalAction?.data?.success == false ||
                            $steps.invokeGlobalAction?.data?.result == false
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f."
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction2"] != null &&
                            typeof $steps["invokeGlobalAction2"] === "object" &&
                            typeof $steps["invokeGlobalAction2"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction2"] = await $steps[
                              "invokeGlobalAction2"
                            ];
                          }
                        }}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button8",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button8",
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadingChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button8",
                              "loading"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__v7KFg
                          )}
                        >
                          {
                            "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                          }
                        </div>
                      </Button>
                      {(() => {
                        try {
                          return $state.shopDialog.data.result.length > 1;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <p
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p__jSKov
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateDialog2Opendialog"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["dialog2", "opendialog"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDialog2Opendialog"] != null &&
                              typeof $steps["updateDialog2Opendialog"] ===
                                "object" &&
                              typeof $steps["updateDialog2Opendialog"].then ===
                                "function"
                            ) {
                              $steps["updateDialog2Opendialog"] = await $steps[
                                "updateDialog2Opendialog"
                              ];
                            }
                          }}
                        >
                          {
                            "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                          }
                        </p>
                      ) : null}
                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p__plVhz
                        )}
                      >
                        {
                          "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                        }
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              <Dialog
                data-plasmic-name={"dialog2"}
                data-plasmic-override={overrides.dialog2}
                className={classNames("__wab_instance", sty.dialog2)}
                onOpendialogChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "dialog2",
                    "opendialog"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                opendialog={generateStateValueProp($state, [
                  "dialog2",
                  "opendialog"
                ])}
              >
                <div className={classNames(projectcss.all, sty.freeBox__lpado)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.shopDialog.data.result;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.subscription3
                        ),
                        clickitem: generateStateValueProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "clickitem"
                        ]),
                        discount: generateStateValueProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "discount"
                        ]),
                        fullprice: generateStateValueProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "fullprice"
                        ]),
                        key: currentIndex,
                        onClick: async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.selectedShop = currentIndex;
                                      return ($state.buyId = currentItem.id);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        },
                        onClickitemChange: async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "subscription3",
                            __plasmic_idx_0,
                            "clickitem"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        onDiscountChange: async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "subscription3",
                            __plasmic_idx_0,
                            "discount"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        onFullpriceChange: async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "subscription3",
                            __plasmic_idx_0,
                            "fullprice"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        onPriceChange: async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "subscription3",
                            __plasmic_idx_0,
                            "price"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        onTitleChange: async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "subscription3",
                            __plasmic_idx_0,
                            "title"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        price: generateStateValueProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "price"
                        ]),
                        title: generateStateValueProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "title"
                        ])
                      };

                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "subscription3[].clickitem",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentIndex == $state.selectedShop;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "subscription3[].title",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "subscription3[].price",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.price.toLocaleString();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return 120000;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "subscription3[].discount",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.badge;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "subscription3[].fullprice",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.fullPrice.toLocaleString();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return 0;
                                  }
                                  throw e;
                                }
                              })()
                          }
                        ],
                        [__plasmic_idx_0]
                      );
                      return (
                        <Subscription
                          data-plasmic-name={"subscription3"}
                          data-plasmic-override={overrides.subscription3}
                          {...child$Props}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobile")
                              ? (() => {
                                  try {
                                    return currentItem.topBadge ? true : false;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return currentItem.topBadge ? true : false;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__fybp9
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gBxhK
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.topBadge;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          ) : null}
                        </Subscription>
                      );
                    })();
                  })}
                  <Button
                    data-plasmic-name={"button11"}
                    data-plasmic-override={overrides.button11}
                    className={classNames("__wab_instance", sty.button11)}
                    color={generateStateValueProp($state, [
                      "button11",
                      "color"
                    ])}
                    endIcon={
                      <Icon12Icon
                        className={classNames(projectcss.all, sty.svg__hq8)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return $state.loadingshop;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    load={generateStateValueProp($state, ["button11", "load"])}
                    loading={generateStateValueProp($state, [
                      "button11",
                      "loading"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadingshop"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadingshop"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadingshop"] != null &&
                        typeof $steps["updateLoadingshop"] === "object" &&
                        typeof $steps["updateLoadingshop"].then === "function"
                      ) {
                        $steps["updateLoadingshop"] = await $steps[
                          "updateLoadingshop"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      id: $state.buyId,
                                      offCode: $state.discountCode,
                                      refCode:
                                        $state.userdata.result.man.refCode,
                                      redirectUrl:
                                        "https://apps.liom.app/shop-result?r=" +
                                        $state.userdata.result.man.refCode +
                                        "&buyId=" +
                                        $state.buyId +
                                        "&offCode=" +
                                        $state.discountCode +
                                        "&valueShop=" +
                                        $state.shapData.result[
                                          $state.selectedShop
                                        ].type +
                                        "-" +
                                        $state.shapData.result[
                                          $state.selectedShop
                                        ].value +
                                        "&price=" +
                                        $state.shapData.result[
                                          $state.selectedShop
                                        ].price +
                                        "&manId=" +
                                        $state.userdata.result.man.id
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization: $state.tokenUser
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["goToPage"] =
                        $steps.invokeGlobalAction?.data?.success == true &&
                        $steps.invokeGlobalAction?.data?.result != false
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return $steps.invokeGlobalAction.data
                                      .result;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["updateLoadingshop2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadingshop"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadingshop2"] != null &&
                        typeof $steps["updateLoadingshop2"] === "object" &&
                        typeof $steps["updateLoadingshop2"].then === "function"
                      ) {
                        $steps["updateLoadingshop2"] = await $steps[
                          "updateLoadingshop2"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction?.data?.success == false ||
                        $steps.invokeGlobalAction?.data?.result == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button11",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button11", "load"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button11",
                          "loading"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___21PoV
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "فعال سازی " +
                              $state.shopDialog.data.result[$state.selectedShop]
                                .title
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Button>
                </div>
              </Dialog>
            </ApiRequest>
          </Dialog>
          {(() => {
            try {
              return (() => {})();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Iframe
              data-plasmic-name={"iframe"}
              data-plasmic-override={overrides.iframe}
              className={classNames("__wab_instance", sty.iframe)}
              onLoad={async event => {
                const $steps = {};

                $steps["refreshData"] = true
                  ? (() => {
                      const actionArgs = {
                        queryInvalidation: ["plasmic_refresh_all"]
                      };
                      return (async ({ queryInvalidation }) => {
                        if (!queryInvalidation) {
                          return;
                        }
                        await plasmicInvalidate(queryInvalidation);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["refreshData"] != null &&
                  typeof $steps["refreshData"] === "object" &&
                  typeof $steps["refreshData"].then === "function"
                ) {
                  $steps["refreshData"] = await $steps["refreshData"];
                }
              }}
              preview={true}
              src={(() => {
                try {
                  return (() => {
                    var urlParams = new window.URLSearchParams(
                      window.location.search
                    );
                    return (
                      "https://apps.liom.app/intro/?r=" +
                      urlParams.get("r") +
                      "&m=" +
                      urlParams.get("m") +
                      "&token=" +
                      urlParams.get("token")
                    );
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              srcDoc={"<div><h3>Heading</h3><p>Example text...</p></div>"}
              useHtml={false}
            />
          ) : null}
          <Timer
            data-plasmic-name={"timer"}
            data-plasmic-override={overrides.timer}
            className={classNames("__wab_instance", sty.timer)}
            intervalSeconds={1}
            isRunning={true}
            onTick={async () => {
              const $steps = {};

              $steps["updateIntro"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["intro"]
                      },
                      operation: 0,
                      value: window.localStorage.getItem("liomHamyar_intro")
                        ? false
                        : true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIntro"] != null &&
                typeof $steps["updateIntro"] === "object" &&
                typeof $steps["updateIntro"].then === "function"
              ) {
                $steps["updateIntro"] = await $steps["updateIntro"];
              }
            }}
            runWhileEditing={true}
          />

          <Dialog
            data-plasmic-name={"dialog3"}
            data-plasmic-override={overrides.dialog3}
            className={classNames("__wab_instance", sty.dialog3)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialog3",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog3",
              "opendialog"
            ])}
          >
            <div className={classNames(projectcss.all, sty.freeBox__hv3WY)}>
              <LottieWrapper
                animationData={{
                  nm: "Warning",
                  ddd: 0,
                  h: 114,
                  w: 114,
                  meta: { g: "@lottiefiles/toolkit-js 0.33.2" },
                  layers: [
                    {
                      ty: 4,
                      nm: "Layer 5 Outlines",
                      sr: 1,
                      st: 4.00000016292334,
                      op: 320.000013033867,
                      ip: 4.00000016292334,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [56.897, 56.897, 0], ix: 1 },
                        s: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [83, 83, 100],
                              t: 26
                            },
                            { s: [100, 100, 100], t: 38.0000015477717 }
                          ],
                          ix: 6
                        },
                        sk: { a: 0, k: 0 },
                        p: { a: 0, k: [56.853, 56.618, 0], ix: 2 },
                        r: { a: 0, k: 0, ix: 10 },
                        sa: { a: 0, k: 0 },
                        o: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [0],
                              t: 26
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100],
                              t: 32
                            },
                            { s: [0], t: 38.0000015477717 }
                          ],
                          ix: 11
                        }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Group 1",
                          ix: 1,
                          cix: 2,
                          np: 4,
                          it: [
                            {
                              ty: "sh",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Group",
                              nm: "Path 1",
                              ix: 1,
                              d: 1,
                              ks: {
                                a: 0,
                                k: {
                                  c: true,
                                  i: [
                                    [28.397, 0],
                                    [0, -28.397],
                                    [-28.397, 0],
                                    [0, 28.397]
                                  ],
                                  o: [
                                    [-28.397, 0],
                                    [0, 28.397],
                                    [28.397, 0],
                                    [0, -28.397]
                                  ],
                                  v: [
                                    [0.001, -51.497],
                                    [-51.498, 0.001],
                                    [0.001, 51.497],
                                    [51.498, 0.001]
                                  ]
                                },
                                ix: 2
                              }
                            },
                            {
                              ty: "sh",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Group",
                              nm: "Path 2",
                              ix: 2,
                              d: 1,
                              ks: {
                                a: 0,
                                k: {
                                  c: true,
                                  i: [
                                    [31.234, 0],
                                    [0, 31.233],
                                    [-31.236, 0],
                                    [0, -31.237]
                                  ],
                                  o: [
                                    [-31.236, 0],
                                    [0, -31.237],
                                    [31.234, 0],
                                    [0, 31.233]
                                  ],
                                  v: [
                                    [0.001, 56.647],
                                    [-56.647, 0.001],
                                    [0.001, -56.647],
                                    [56.647, 0.001]
                                  ]
                                },
                                ix: 2
                              }
                            },
                            {
                              ty: "mm",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Filter - Merge",
                              nm: "Merge Paths 1",
                              mm: 1
                            },
                            {
                              ty: "fl",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Fill",
                              nm: "Fill 1",
                              c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                              r: 1,
                              o: { a: 0, k: 100, ix: 5 }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [56.897, 56.898], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        }
                      ],
                      ind: 1
                    },
                    {
                      ty: 4,
                      nm: "Layer 2 Outlines",
                      sr: 1,
                      st: 0,
                      op: 316.000012870944,
                      ip: 0,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [56.897, 56.897, 0], ix: 1 },
                        s: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [83, 83, 100],
                              t: 20
                            },
                            { s: [100, 100, 100], t: 32.0000013033867 }
                          ],
                          ix: 6
                        },
                        sk: { a: 0, k: 0 },
                        p: { a: 0, k: [56.853, 56.618, 0], ix: 2 },
                        r: { a: 0, k: 0, ix: 10 },
                        sa: { a: 0, k: 0 },
                        o: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [0],
                              t: 20
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100],
                              t: 26
                            },
                            { s: [0], t: 32.0000013033867 }
                          ],
                          ix: 11
                        }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Group 1",
                          ix: 1,
                          cix: 2,
                          np: 4,
                          it: [
                            {
                              ty: "sh",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Group",
                              nm: "Path 1",
                              ix: 1,
                              d: 1,
                              ks: {
                                a: 0,
                                k: {
                                  c: true,
                                  i: [
                                    [28.397, 0],
                                    [0, -28.397],
                                    [-28.397, 0],
                                    [0, 28.397]
                                  ],
                                  o: [
                                    [-28.397, 0],
                                    [0, 28.397],
                                    [28.397, 0],
                                    [0, -28.397]
                                  ],
                                  v: [
                                    [0.001, -51.497],
                                    [-51.498, 0.001],
                                    [0.001, 51.497],
                                    [51.498, 0.001]
                                  ]
                                },
                                ix: 2
                              }
                            },
                            {
                              ty: "sh",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Group",
                              nm: "Path 2",
                              ix: 2,
                              d: 1,
                              ks: {
                                a: 0,
                                k: {
                                  c: true,
                                  i: [
                                    [31.234, 0],
                                    [0, 31.233],
                                    [-31.236, 0],
                                    [0, -31.237]
                                  ],
                                  o: [
                                    [-31.236, 0],
                                    [0, -31.237],
                                    [31.234, 0],
                                    [0, 31.233]
                                  ],
                                  v: [
                                    [0.001, 56.647],
                                    [-56.647, 0.001],
                                    [0.001, -56.647],
                                    [56.647, 0.001]
                                  ]
                                },
                                ix: 2
                              }
                            },
                            {
                              ty: "mm",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Filter - Merge",
                              nm: "Merge Paths 1",
                              mm: 1
                            },
                            {
                              ty: "fl",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Fill",
                              nm: "Fill 1",
                              c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                              r: 1,
                              o: { a: 0, k: 100, ix: 5 }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [56.897, 56.898], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        }
                      ],
                      ind: 2
                    },
                    {
                      ty: 4,
                      nm: "Layer 4 Outlines",
                      sr: 1,
                      st: 0,
                      op: 316.000012870944,
                      ip: 0,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [5.434, 31.682, 0], ix: 1 },
                        s: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100, 100, 100],
                              t: 0
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [115, 90, 100],
                              t: 4
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100, 112, 100],
                              t: 8
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100, 112, 100],
                              t: 11
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [113.333, 94.333, 100],
                              t: 13
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100, 112, 100],
                              t: 15
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [113, 95, 100],
                              t: 20
                            },
                            { s: [100, 100, 100], t: 22.0000008960784 }
                          ],
                          ix: 6
                        },
                        sk: { a: 0, k: 0 },
                        p: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [57.387, 65.377, 0],
                              t: 0,
                              ti: [0, 0.835, 0],
                              to: [0, -0.35, 0]
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [57.387, 65.46, 0],
                              t: 4,
                              ti: [0, 0.609, 0],
                              to: [0, -1.455, 0]
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [57.387, 56.377, 0],
                              t: 11,
                              ti: [0, 0.609, 0],
                              to: [0, -0.958, 0]
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [57.387, 50.877, 0],
                              t: 13,
                              ti: [0, 0.609, 0],
                              to: [0, -0.958, 0]
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [57.387, 56.377, 0],
                              t: 15,
                              ti: [0, -0.417, 0],
                              to: [0, -0.958, 0]
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [57.387, 65.627, 0],
                              t: 19,
                              ti: [0, 0.958, 0],
                              to: [0, 0.417, 0]
                            },
                            { s: [57.387, 65.377, 0], t: 22.0000008960784 }
                          ],
                          ix: 2
                        },
                        r: { a: 0, k: 0, ix: 10 },
                        sa: { a: 0, k: 0 },
                        o: { a: 0, k: 100, ix: 11 }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Group 1",
                          ix: 1,
                          cix: 2,
                          np: 2,
                          it: [
                            {
                              ty: "sh",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Group",
                              nm: "Path 1",
                              ix: 1,
                              d: 1,
                              ks: {
                                a: 0,
                                k: {
                                  c: true,
                                  i: [
                                    [2.878, 0],
                                    [0, -2.487],
                                    [0, 0],
                                    [-2.951, 0],
                                    [0, 2.426],
                                    [0, 0]
                                  ],
                                  o: [
                                    [-2.951, 0],
                                    [0, 0],
                                    [0, 2.49],
                                    [2.878, 0],
                                    [0, 0],
                                    [0, -2.428]
                                  ],
                                  v: [
                                    [0.001, -15.433],
                                    [-5.184, -11.406],
                                    [-5.184, 11.409],
                                    [0.001, 15.433],
                                    [5.184, 11.409],
                                    [5.184, -11.406]
                                  ]
                                },
                                ix: 2
                              }
                            },
                            {
                              ty: "fl",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Fill",
                              nm: "Fill 1",
                              c: { a: 0, k: [1, 1, 1], ix: 4 },
                              r: 1,
                              o: { a: 0, k: 100, ix: 5 }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [5.433, 15.682], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        }
                      ],
                      ind: 3
                    },
                    {
                      ty: 4,
                      nm: "Layer 3 Outlines",
                      sr: 1,
                      st: 0,
                      op: 316.000012870944,
                      ip: 0,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [5.516, 11.142, 0], ix: 1 },
                        s: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100, 100, 100],
                              t: 20
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100, 79, 100],
                              t: 22
                            },
                            { s: [100, 100, 100], t: 24.00000097754 }
                          ],
                          ix: 6
                        },
                        sk: { a: 0, k: 0 },
                        p: { a: 0, k: [57.011, 80.341, 0], ix: 2 },
                        r: { a: 0, k: 0, ix: 10 },
                        sa: { a: 0, k: 0 },
                        o: { a: 0, k: 100, ix: 11 }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Group 1",
                          ix: 1,
                          cix: 2,
                          np: 2,
                          it: [
                            {
                              ty: "sh",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Group",
                              nm: "Path 1",
                              ix: 1,
                              d: 1,
                              ks: {
                                a: 0,
                                k: {
                                  c: true,
                                  i: [
                                    [2.834, 0],
                                    [0, -2.837],
                                    [-2.835, 0],
                                    [0, 2.833]
                                  ],
                                  o: [
                                    [-2.835, 0],
                                    [0, 2.833],
                                    [2.834, 0],
                                    [0, -2.837]
                                  ],
                                  v: [
                                    [0.002, -5.142],
                                    [-5.141, 0.003],
                                    [0.002, 5.142],
                                    [5.141, 0.003]
                                  ]
                                },
                                ix: 2
                              }
                            },
                            {
                              ty: "fl",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Fill",
                              nm: "Fill 1",
                              c: { a: 0, k: [1, 1, 1], ix: 4 },
                              r: 1,
                              o: { a: 0, k: 100, ix: 5 }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [5.391, 5.392], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        }
                      ],
                      ind: 4
                    },
                    {
                      ty: 4,
                      nm: "Layer 1 Outlines",
                      sr: 1,
                      st: 0,
                      op: 316.000012870944,
                      ip: 0,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [41.449, 41.449, 0], ix: 1 },
                        s: { a: 0, k: [100, 100, 100], ix: 6 },
                        sk: { a: 0, k: 0 },
                        p: { a: 0, k: [56.854, 56.618, 0], ix: 2 },
                        r: { a: 0, k: 0, ix: 10 },
                        sa: { a: 0, k: 0 },
                        o: { a: 0, k: 100, ix: 11 }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Group 1",
                          ix: 1,
                          cix: 2,
                          np: 2,
                          it: [
                            {
                              ty: "sh",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Group",
                              nm: "Path 1",
                              ix: 1,
                              d: 1,
                              ks: {
                                a: 0,
                                k: {
                                  c: true,
                                  i: [
                                    [-22.753, 0],
                                    [0, -22.753],
                                    [22.754, 0],
                                    [0, 22.754]
                                  ],
                                  o: [
                                    [22.754, 0],
                                    [0, 22.754],
                                    [-22.753, 0],
                                    [0, -22.753]
                                  ],
                                  v: [
                                    [0, -41.199],
                                    [41.199, 0],
                                    [0, 41.199],
                                    [-41.199, 0]
                                  ]
                                },
                                ix: 2
                              }
                            },
                            {
                              ty: "fl",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Fill",
                              nm: "Fill 1",
                              c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                              r: 1,
                              o: { a: 0, k: 100, ix: 5 }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [41.449, 41.449], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        }
                      ],
                      ind: 5
                    }
                  ],
                  v: "5.5.9",
                  fr: 29.9700012207031,
                  op: 38.0000015477717,
                  ip: 0,
                  assets: []
                }}
                className={classNames("__wab_instance", sty.lottie___7UDkt)}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7E3Gu
                )}
              >
                {
                  "\u0645\u062a\u0627\u0633\u0641\u0627\u0646\u0647 \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u062a\u0648\u0633\u0637 \u0634\u0645\u0627 \u0627\u0645\u06a9\u0627\u0646\u200c\u067e\u0630\u06cc\u0631 \u0646\u06cc\u0633\u062a."
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gtkIq
                )}
              >
                {
                  "\u0628\u0627 \u0639\u0631\u0636 \u067e\u0648\u0632\u0634\u060c \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647 \u062f\u0631 \u062d\u0627\u0644 \u062d\u0627\u0636\u0631 \u0641\u0642\u0637 \u062a\u0648\u0633\u0637 \u0647\u0645\u06cc\u0627\u0631 \u0634\u0645\u0627 \u0627\u0645\u06a9\u0627\u0646\u200c\u067e\u0630\u06cc\u0631 \u0627\u0633\u062a. \u062f\u0631 \u0635\u0648\u0631\u062a \u062a\u0645\u0627\u06cc\u0644\u060c \u0644\u0637\u0641\u0627\u064b \u0627\u0632 \u0647\u0645\u06cc\u0627\u0631 \u062e\u0648\u062f \u0628\u062e\u0648\u0627\u0647\u06cc\u062f \u062a\u0627 \u0627\u06cc\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0631\u0627 \u0628\u0631\u0627\u06cc \u0634\u0645\u0627 \u0641\u0639\u0627\u0644 \u06a9\u0646\u062f. \u0627\u0632 \u0647\u0645\u0631\u0627\u0647\u06cc \u0634\u0645\u0627 \u0633\u067e\u0627\u0633\u06af\u0632\u0627\u0631\u06cc\u0645."
                }
              </div>
              <Button
                data-plasmic-name={"button13"}
                data-plasmic-override={overrides.button13}
                className={classNames("__wab_instance", sty.button13)}
                color={generateStateValueProp($state, ["button13", "color"])}
                load={generateStateValueProp($state, ["button13", "load"])}
                loading={generateStateValueProp($state, [
                  "button13",
                  "loading"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDialog3Opendialog"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog3", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialog3Opendialog"] != null &&
                    typeof $steps["updateDialog3Opendialog"] === "object" &&
                    typeof $steps["updateDialog3Opendialog"].then === "function"
                  ) {
                    $steps["updateDialog3Opendialog"] = await $steps[
                      "updateDialog3Opendialog"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button13", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button13", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadingChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button13", "loading"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </Button>
            </div>
          </Dialog>
          <div className={classNames(projectcss.all, sty.freeBox__ivbKb)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___7Yg9F)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image90.png",
                fullWidth: 830,
                fullHeight: 350,
                aspectRatio: undefined
              }}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__bPeEl)}>
            <div className={classNames(projectcss.all, sty.freeBox__lm8R9)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mhiG
                )}
              >
                {
                  "\u0644\u0637\u0641\u0627 \u0627\u0632 \u0627\u062a\u0635\u0627\u0644 \u0627\u06cc\u0646\u062a\u0631\u0646\u062a \u062e\u0648\u062f \u0645\u0637\u0645\u0626\u0646 \u0634\u0648\u06cc\u062f."
                }
              </div>
            </div>
            <Button
              data-plasmic-name={"button16"}
              data-plasmic-override={overrides.button16}
              className={classNames("__wab_instance", sty.button16)}
              color={generateStateValueProp($state, ["button16", "color"])}
              endIcon={
                <Icon144Icon
                  className={classNames(projectcss.all, sty.svg__atuoZ)}
                  role={"img"}
                />
              }
              load={generateStateValueProp($state, ["button16", "load"])}
              loading={generateStateValueProp($state, ["button16", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            window.sessionStorage.removeItem("cash");
                            return window.location.reload();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button16", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button16", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button16", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              startIcon={
                <ChevronRightIcon
                  className={classNames(projectcss.all, sty.svg__twZo)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hehRe
                )}
              >
                {
                  "\u0628\u0627\u0631\u06af\u0632\u0627\u0631\u06cc \u0645\u062c\u062f\u062f"
                }
              </div>
            </Button>
          </div>
          <MobileDialog
            data-plasmic-name={"mobileDialog"}
            data-plasmic-override={overrides.mobileDialog}
            className={classNames("__wab_instance", sty.mobileDialog, {
              [sty.mobileDialognoPartner]: hasVariant(
                $state,
                "noPartner",
                "noPartner"
              )
            })}
            desc={
              "\u0644\u0637\u0641\u0627\u064b \u0628\u0631\u0627\u06cc \u0634\u0646\u0627\u0633\u0627\u06cc\u06cc \u0647\u0645\u06cc\u0627\u0631\u060c \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
            }
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["mobileDialog", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onSelectShopChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "mobileDialog",
                "selectShop"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["mobileDialog", "open"])}
            token={(() => {
              try {
                return $state.tokenUser;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.telegram),
              onOpendialogChange: async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "telegram",
                  "opendialog"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async val => {
                  const $steps = {};

                  $steps["runCode"] =
                    $state.telegram.opendialog == false
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return window.localStorage.setItem(
                                  "telegram",
                                  true
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }).apply(null, eventArgs);
              },
              opendialog: generateStateValueProp($state, [
                "telegram",
                "opendialog"
              ])
            };

            initializePlasmicStates(
              $state,
              [
                {
                  name: "telegram.opendialog",
                  initFunc: ({ $props, $state, $queries }) =>
                    (() => {
                      try {
                        return (
                          !window.localStorage.getItem("telegram") &&
                          $state.userdata.result &&
                          !$state.userdata?.result?.man?.telegramId
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
                }
              ],
              []
            );
            return (
              <Dialog
                data-plasmic-name={"telegram"}
                data-plasmic-override={overrides.telegram}
                {...child$Props}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___5LrUb,
                    "fixed-object"
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sg0Fm
                    )}
                  >
                    {
                      "\u067e\u06cc\u0627\u0645\u06a9\u200c\u0647\u0627 \u0631\u0648 \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645 \u0647\u0645 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634!"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4HjKs
                    )}
                  >
                    {
                      "\u0628\u0627 \u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0631\u0628\u0627\u062a \u062a\u0644\u06af\u0631\u0627\u0645 \u061b \u0645\u0637\u0645\u0626\u0646 \u0628\u0627\u0634 \u0647\u06cc\u0686 \u067e\u06cc\u0627\u0645\u06cc \u0631\u0648 \u0627\u0632 \u062f\u0633\u062a \u0646\u0645\u06cc\u200c\u062f\u06cc \u0648 \u062f\u06cc\u06af\u0647 \u0628\u06cc\u0646 \u067e\u06cc\u0627\u0645\u06a9\u200c\u0647\u0627 \u06af\u0645 \u0646\u0645\u06cc\u200c\u0634\u0646\r\n\r\n\u067e\u06cc\u0627\u0645\u200c\u0647\u0627\u06cc \u0645\u062a\u0646\u0648\u0639\u200c\u062a\u0631 \u0648 \u0628\u06cc\u0634\u062a\u0631\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u06cc\u06a9\u0646\u06cc ! "
                    }
                  </div>
                </div>
                <Button
                  data-plasmic-name={"button18"}
                  data-plasmic-override={overrides.button18}
                  className={classNames("__wab_instance", sty.button18)}
                  color={generateStateValueProp($state, ["button18", "color"])}
                  load={generateStateValueProp($state, ["button18", "load"])}
                  loading={generateStateValueProp($state, [
                    "button18",
                    "loading"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] =
                      $state.userdata.result.user.hamyarStatus ||
                      $state.userdata.result.user.husbandSmsSubStatus ||
                      $state.userdata.result.user.motherSmsSubStatus ||
                      $state.userdata.result.man.hamyarStatus
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  window.open(
                                    "https://t.me/liomApp_bot",
                                    "_blank"
                                  );
                                  return window.localStorage.setItem(
                                    "telegram",
                                    true
                                  );
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["updateDialogOpendialog"] = !(
                      $state.userdata.result.user.hamyarStatus ||
                      $state.userdata.result.user.husbandSmsSubStatus ||
                      $state.userdata.result.user.motherSmsSubStatus ||
                      $state.userdata.result.man.hamyarStatus
                    )
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog", "opendialog"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogOpendialog"] != null &&
                      typeof $steps["updateDialogOpendialog"] === "object" &&
                      typeof $steps["updateDialogOpendialog"].then ===
                        "function"
                    ) {
                      $steps["updateDialogOpendialog"] = await $steps[
                        "updateDialogOpendialog"
                      ];
                    }

                    $steps["updateTelegramOpendialog"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["telegram", "opendialog"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateTelegramOpendialog"] != null &&
                      typeof $steps["updateTelegramOpendialog"] === "object" &&
                      typeof $steps["updateTelegramOpendialog"].then ===
                        "function"
                    ) {
                      $steps["updateTelegramOpendialog"] = await $steps[
                        "updateTelegramOpendialog"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button18", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button18", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "button18",
                        "loading"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  showStartIcon={true}
                  startIcon={
                    <Icon242Icon
                      className={classNames(projectcss.all, sty.svg__rWfgL)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sYtc0
                    )}
                  >
                    {
                      " \u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0631\u0628\u0627\u062a \u062a\u0644\u06af\u0631\u0627\u0645"
                    }
                  </div>
                </Button>
                <div
                  className={classNames(projectcss.all, sty.freeBox__gmpcN)}
                  style={(() => {
                    try {
                      return (() => {
                        const element =
                          window.document.querySelector(".fixed-object");
                        return { top: element?.offsetTop || 20 };
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__xvk)}
                  style={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? (() => {
                          try {
                            return (() => {
                              const element =
                                window.document.querySelector(".fixed-object");
                              const absoluteTop =
                                element.getBoundingClientRect().top +
                                window.scrollY;
                              return { top: absoluteTop - 50 || "" };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (() => {
                              const element =
                                window.document.querySelector(".fixed-object");
                              const absoluteTop =
                                element.getBoundingClientRect().top +
                                window.scrollY;
                              return { top: absoluteTop - 50 || "" };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                  }
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__sDzKv)}
                    displayHeight={"80px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"80px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image106.svg",
                      fullWidth: 32,
                      fullHeight: 32,
                      aspectRatio: 1
                    }}
                  />
                </div>
              </Dialog>
            );
          })()}
          <ApiRequest
            data-plasmic-name={"remember"}
            data-plasmic-override={overrides.remember}
            body={(() => {
              try {
                return {
                  r: $state.reminderSetting.refresh,
                  liomId: $state.userdata?.result?.man?.id
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.remember, {
              [sty.rememberpage_reminder]: hasVariant(
                $state,
                "page",
                "reminder"
              ),
              [sty.rememberreminder]: hasVariant(
                $state,
                "reminder",
                "reminder"
              ),
              [sty.rememberreminder_page_reminder]:
                hasVariant($state, "page", "reminder") &&
                hasVariant($state, "reminder", "reminder")
            })}
            config={(() => {
              try {
                return {
                  headers: {
                    "Content-Type": "application/json",
                    Accept: "application/json",
                    Authorization: $state.tokenUser,
                    "X-Requested-With": "XMLHttpRequest"
                  }
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            errorDisplay={null}
            loadingDisplay={null}
            method={"POST"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["remember", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["remember", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["remember", "data"]).apply(
                null,
                eventArgs
              );
            }}
            shouldFetch={(() => {
              try {
                return $state.userdata?.result?.man?.id ? true : false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/user/task/day"}
          />

          <Reminder
            data-plasmic-name={"reminder2"}
            data-plasmic-override={overrides.reminder2}
            activeNotifTel={(() => {
              try {
                return $state.userdata?.result?.man?.activeNotifTel
                  ? true
                  : false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            activeSmsNotif={(() => {
              try {
                return $state.userdata?.result?.man?.activeSmsNotif
                  ? true
                  : false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            back={async () => {
              const $steps = {};

              $steps["updateReminder"] = true
                ? (() => {
                    const actionArgs = { vgroup: "reminder", operation: 2 };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      const oldValue = $stateGet($state, vgroup);
                      $stateSet($state, vgroup, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateReminder"] != null &&
                typeof $steps["updateReminder"] === "object" &&
                typeof $steps["updateReminder"].then === "function"
              ) {
                $steps["updateReminder"] = await $steps["updateReminder"];
              }
            }}
            className={classNames("__wab_instance", sty.reminder2, {
              [sty.reminder2page_reminder]: hasVariant(
                $state,
                "page",
                "reminder"
              ),
              [sty.reminder2reminder]: hasVariant(
                $state,
                "reminder",
                "reminder"
              ),
              [sty.reminder2reminder_page_reminder]:
                hasVariant($state, "page", "reminder") &&
                hasVariant($state, "reminder", "reminder")
            })}
            data={(() => {
              try {
                return $state.remember?.data || [];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [
                    {
                      id: 32,
                      man_id: 3,
                      name: "\u062a\u0648\u0644\u062f \u062a\u0627\u0646\u0627\u0646\u062a\u0627\u062a\u0646",
                      date_greg: "2025-12-02",
                      date_shamsi: "1386/10/10",
                      type: "ChildBirthday",
                      description: null,
                      repeat_yearly: 1,
                      remind_before: 0,
                      smsActive: 1
                    },
                    {
                      id: 31,
                      man_id: 3,
                      name: "\u062a\u0648\u0644\u062f \u0646\u062a\u0627\u0646\u062a\u0627",
                      date_greg: "2025-12-05",
                      date_shamsi: "1386/10/10",
                      type: "ChildBirthday",
                      description: null,
                      repeat_yearly: 1,
                      remind_before: 0,
                      smsActive: 1
                    },
                    {
                      id: 30,
                      man_id: 3,
                      name: "\u062a\u0648\u0644\u062f \u0645\u062d\u0645\u062f",
                      date_greg: "2025-12-15",
                      date_shamsi: "1386/10/10",
                      type: "ChildBirthday",
                      description: null,
                      repeat_yearly: 1,
                      remind_before: 0,
                      smsActive: 0
                    },
                    {
                      id: 29,
                      man_id: 3,
                      name: "\u062a\u0648\u0644\u062f \u0639\u0644\u06cc",
                      date_greg: "2025-12-31",
                      date_shamsi: "1388/10/10",
                      type: "ChildBirthday",
                      description: null,
                      repeat_yearly: 1,
                      remind_before: 0,
                      smsActive: 0
                    },
                    {
                      id: 21,
                      man_id: 3,
                      name: "\u0631\u0648\u0632 \u0632\u0646 \u0648 \u0645\u0627\u062f\u0631",
                      date_greg: "2026-02-09",
                      date_shamsi: "1404/11/20",
                      type: "Occasion",
                      description:
                        "\u0648\u0644\u0627\u062f\u062a \u062d\u0636\u0631\u062a \u0641\u0627\u0637\u0645\u0647 \u0632\u0647\u0631\u0627 (\u0633)",
                      repeat_yearly: 1,
                      remind_before: 3,
                      smsActive: 0
                    },
                    {
                      id: 24,
                      man_id: 3,
                      name: "\u0648\u0644\u0646\u062a\u0627\u06cc\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642)",
                      date_greg: "2026-02-14",
                      date_shamsi: "1404/11/25",
                      type: "Occasion",
                      description:
                        "\u0631\u0648\u0632 \u0639\u0634\u0642 \u062c\u0647\u0627\u0646\u06cc",
                      repeat_yearly: 1,
                      remind_before: 7,
                      smsActive: 0
                    },
                    {
                      id: 25,
                      man_id: 3,
                      name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
                      date_greg: "2026-02-19",
                      date_shamsi: "1404/11/30",
                      type: "Occasion",
                      description:
                        "\u0631\u0648\u0632 \u0632\u0646 \u0648 \u0639\u0634\u0642 \u062f\u0631 \u0627\u06cc\u0631\u0627\u0646 \u0628\u0627\u0633\u062a\u0627\u0646",
                      repeat_yearly: 1,
                      remind_before: 7,
                      smsActive: 0
                    },
                    {
                      id: 23,
                      man_id: 3,
                      name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u0632\u0646",
                      date_greg: "2026-03-08",
                      date_shamsi: "1404/12/17",
                      type: "Occasion",
                      description: "International Women's Day",
                      repeat_yearly: 1,
                      remind_before: 7,
                      smsActive: 0
                    },
                    {
                      id: 22,
                      man_id: 3,
                      name: "\u0631\u0648\u0632 \u062f\u062e\u062a\u0631",
                      date_greg: "2026-05-30",
                      date_shamsi: "1405/03/09",
                      type: "Occasion",
                      description:
                        "\u0648\u0644\u0627\u062f\u062a \u062d\u0636\u0631\u062a \u0645\u0639\u0635\u0648\u0645\u0647 (\u0633)",
                      repeat_yearly: 1,
                      remind_before: 3,
                      smsActive: 0
                    },
                    {
                      id: 26,
                      man_id: 3,
                      name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631\u0627\u0646",
                      date_greg: "2026-10-11",
                      date_shamsi: "1405/07/19",
                      type: "Occasion",
                      description: "International Day of the Girl Child",
                      repeat_yearly: 1,
                      remind_before: 7,
                      smsActive: 0
                    },
                    {
                      id: 28,
                      man_id: 3,
                      name: "\u062a\u0648\u0644\u062f \u0632\u0647\u0631\u0627",
                      date_greg: "2026-12-30",
                      date_shamsi: "1379/10/10",
                      type: "SpouseBirthday",
                      description: null,
                      repeat_yearly: 1,
                      remind_before: 0,
                      smsActive: 0
                    }
                  ];
                }
                throw e;
              }
            })()}
            manId={(() => {
              try {
                return $state.userdata?.result?.man?.id;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onRefreshChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["reminder2", "refresh"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }

              (async val => {
                const $steps = {};

                $steps["updateReminderSettingRefresh"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["reminderSetting", "refresh"]
                        },
                        operation: 0,
                        value: $state.reminderSetting.refresh + 1
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateReminderSettingRefresh"] != null &&
                  typeof $steps["updateReminderSettingRefresh"] === "object" &&
                  typeof $steps["updateReminderSettingRefresh"].then ===
                    "function"
                ) {
                  $steps["updateReminderSettingRefresh"] = await $steps[
                    "updateReminderSettingRefresh"
                  ];
                }
              }).apply(null, eventArgs);
            }}
            phone={(() => {
              try {
                return $state.userdata?.result?.man?.phone;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            refresh={generateStateValueProp($state, ["reminder2", "refresh"])}
            setting={async () => {
              const $steps = {};

              $steps["updateReminder"] = true
                ? (() => {
                    const actionArgs = { vgroup: "reminder", operation: 2 };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      const oldValue = $stateGet($state, vgroup);
                      $stateSet($state, vgroup, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateReminder"] != null &&
                typeof $steps["updateReminder"] === "object" &&
                typeof $steps["updateReminder"].then === "function"
              ) {
                $steps["updateReminder"] = await $steps["updateReminder"];
              }
            }}
            shop={async () => {
              const $steps = {};

              $steps["updateDialogOpendialog"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog", "opendialog"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDialogOpendialog"] != null &&
                typeof $steps["updateDialogOpendialog"] === "object" &&
                typeof $steps["updateDialogOpendialog"].then === "function"
              ) {
                $steps["updateDialogOpendialog"] = await $steps[
                  "updateDialogOpendialog"
                ];
              }
            }}
            subscription={(() => {
              try {
                return $state?.userdata?.result?.man?.hamyarStatus
                  ? true
                  : false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            telegram={(() => {
              try {
                return $state.userdata?.result?.man?.telegramId ? true : false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            telegramId={(() => {
              try {
                return $state.userdata?.result?.man?.telegramId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            token={(() => {
              try {
                return $state.tokenUser;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <ReminderSetting
            data-plasmic-name={"reminderSetting"}
            data-plasmic-override={overrides.reminderSetting}
            activeNotifTel={(() => {
              try {
                return $state.userdata?.result?.man?.activeNotifTel
                  ? true
                  : false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            activeSmsNotif={(() => {
              try {
                return $state.userdata?.result?.man?.activeSmsNotif
                  ? true
                  : false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            back={async () => {
              const $steps = {};

              $steps["updateReminder"] = true
                ? (() => {
                    const actionArgs = { vgroup: "reminder", operation: 6 };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      $stateSet($state, vgroup, false);
                      return false;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateReminder"] != null &&
                typeof $steps["updateReminder"] === "object" &&
                typeof $steps["updateReminder"].then === "function"
              ) {
                $steps["updateReminder"] = await $steps["updateReminder"];
              }
            }}
            className={classNames("__wab_instance", sty.reminderSetting, {
              [sty.reminderSettingreminder]: hasVariant(
                $state,
                "reminder",
                "reminder"
              )
            })}
            data={(() => {
              try {
                return $state.remember?.data || [];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            manId={
              hasVariant($state, "reminder", "reminder") &&
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $state.userdata?.result?.man?.id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return $state.userdata?.result?.man?.id || "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
            }
            onRefreshChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "reminderSetting",
                "refresh"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            phoneNumber={(() => {
              try {
                return $state.userdata?.result?.man?.phone;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            refresh={generateStateValueProp($state, [
              "reminderSetting",
              "refresh"
            ])}
            shop={async () => {
              const $steps = {};

              $steps["updateDialogOpendialog"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog", "opendialog"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDialogOpendialog"] != null &&
                typeof $steps["updateDialogOpendialog"] === "object" &&
                typeof $steps["updateDialogOpendialog"].then === "function"
              ) {
                $steps["updateDialogOpendialog"] = await $steps[
                  "updateDialogOpendialog"
                ];
              }
            }}
            subscription={(() => {
              try {
                return $state?.userdata?.result?.man?.hamyarStatus
                  ? true
                  : false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            telegramId={(() => {
              try {
                return $state.userdata?.result?.man?.telegramId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            telegramOn={(() => {
              try {
                return $state.userdata?.result?.man?.telegramId ? true : false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            token={(() => {
              try {
                return $state.tokenUser;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "main",
    "telegram2",
    "nopartner",
    "button17",
    "noData",
    "cyclebox",
    "lineClomp",
    "progress",
    "button9",
    "button14",
    "button10",
    "button15",
    "countdown4",
    "button21",
    "checkbox",
    "reveal",
    "useful2",
    "useful",
    "harmful2",
    "harmful",
    "nopartner2",
    "button20",
    "shopModalWeb",
    "subscription",
    "button3",
    "modal2",
    "modal3",
    "ul",
    "shopText",
    "input",
    "button",
    "button2",
    "button7",
    "shopModalMobile",
    "subscription2",
    "button4",
    "modal",
    "input2",
    "button5",
    "button6",
    "tooltip",
    "heart",
    "loading",
    "favicon",
    "pullToRefresh",
    "button19",
    "section",
    "embedHtml",
    "dialog",
    "shopDialog",
    "dialogTitle",
    "h5",
    "input4",
    "button12",
    "button8",
    "dialog2",
    "subscription3",
    "button11",
    "iframe",
    "timer",
    "dialog3",
    "button13",
    "button16",
    "mobileDialog",
    "telegram",
    "button18",
    "remember",
    "reminder2",
    "reminderSetting"
  ],
  sideEffect: ["sideEffect"],
  main: [
    "main",
    "telegram2",
    "nopartner",
    "button17",
    "noData",
    "cyclebox",
    "lineClomp",
    "progress",
    "button9",
    "button14",
    "button10",
    "button15",
    "countdown4",
    "button21",
    "checkbox",
    "reveal",
    "useful2",
    "useful",
    "harmful2",
    "harmful",
    "nopartner2",
    "button20",
    "shopModalWeb",
    "subscription",
    "button3",
    "modal2",
    "modal3",
    "ul",
    "shopText",
    "input",
    "button",
    "button2",
    "button7",
    "shopModalMobile",
    "subscription2",
    "button4",
    "modal",
    "input2",
    "button5",
    "button6",
    "tooltip",
    "heart"
  ],
  telegram2: ["telegram2"],
  nopartner: ["nopartner", "button17"],
  button17: ["button17"],
  noData: ["noData"],
  cyclebox: ["cyclebox", "lineClomp", "progress"],
  lineClomp: ["lineClomp"],
  progress: ["progress"],
  button9: ["button9"],
  button14: ["button14"],
  button10: ["button10"],
  button15: ["button15"],
  countdown4: ["countdown4"],
  button21: ["button21"],
  checkbox: ["checkbox"],
  reveal: ["reveal", "useful2", "useful"],
  useful2: ["useful2"],
  useful: ["useful"],
  harmful2: ["harmful2"],
  harmful: ["harmful"],
  nopartner2: ["nopartner2", "button20"],
  button20: ["button20"],
  shopModalWeb: ["shopModalWeb", "subscription", "button3"],
  subscription: ["subscription"],
  button3: ["button3"],
  modal2: ["modal2"],
  modal3: ["modal3"],
  ul: ["ul"],
  shopText: ["shopText"],
  input: ["input"],
  button: ["button"],
  button2: ["button2"],
  button7: ["button7"],
  shopModalMobile: ["shopModalMobile", "subscription2", "button4"],
  subscription2: ["subscription2"],
  button4: ["button4"],
  modal: ["modal", "input2", "button5", "button6"],
  input2: ["input2"],
  button5: ["button5"],
  button6: ["button6"],
  tooltip: ["tooltip", "heart"],
  heart: ["heart"],
  loading: ["loading"],
  favicon: ["favicon"],
  pullToRefresh: ["pullToRefresh"],
  button19: ["button19"],
  section: ["section"],
  embedHtml: ["embedHtml"],
  dialog: [
    "dialog",
    "shopDialog",
    "dialogTitle",
    "h5",
    "input4",
    "button12",
    "button8",
    "dialog2",
    "subscription3",
    "button11"
  ],
  shopDialog: [
    "shopDialog",
    "dialogTitle",
    "h5",
    "input4",
    "button12",
    "button8",
    "dialog2",
    "subscription3",
    "button11"
  ],
  dialogTitle: ["dialogTitle", "h5"],
  h5: ["h5"],
  input4: ["input4"],
  button12: ["button12"],
  button8: ["button8"],
  dialog2: ["dialog2", "subscription3", "button11"],
  subscription3: ["subscription3"],
  button11: ["button11"],
  iframe: ["iframe"],
  timer: ["timer"],
  dialog3: ["dialog3", "button13"],
  button13: ["button13"],
  button16: ["button16"],
  mobileDialog: ["mobileDialog"],
  telegram: ["telegram", "button18"],
  button18: ["button18"],
  remember: ["remember"],
  reminder2: ["reminder2"],
  reminderSetting: ["reminderSetting"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  main: "div";
  telegram2: typeof Button;
  nopartner: "div";
  button17: typeof Button;
  noData: "div";
  cyclebox: typeof Cyclebox;
  lineClomp: typeof LineClomp;
  progress: typeof AntdProgress;
  button9: typeof Button;
  button14: typeof Button;
  button10: typeof Button;
  button15: typeof Button;
  countdown4: typeof Countdown;
  button21: typeof Button;
  checkbox: typeof Checkbox;
  reveal: typeof Reveal;
  useful2: typeof Useful;
  useful: typeof Useful;
  harmful2: typeof Harmful;
  harmful: typeof Harmful;
  nopartner2: "div";
  button20: typeof Button;
  shopModalWeb: typeof AntdModal;
  subscription: typeof Subscription;
  button3: typeof Button;
  modal2: typeof AntdModal;
  modal3: typeof AntdModal;
  ul: "ul";
  shopText: typeof AntdModal;
  input: typeof AntdInput;
  button: typeof Button;
  button2: typeof Button;
  button7: typeof Button;
  shopModalMobile: typeof SlideinModal;
  subscription2: typeof Subscription;
  button4: typeof Button;
  modal: typeof AntdModal;
  input2: typeof AntdInput;
  button5: typeof Button;
  button6: typeof Button;
  tooltip: typeof AntdTooltip;
  heart: typeof Heart;
  loading: "div";
  favicon: typeof Embed;
  pullToRefresh: typeof PullToRefresh;
  button19: typeof Button;
  section: "section";
  embedHtml: typeof Embed;
  dialog: typeof Dialog;
  shopDialog: typeof ApiRequest;
  dialogTitle: typeof DialogTitle;
  h5: "h5";
  input4: typeof AntdInput;
  button12: typeof Button;
  button8: typeof Button;
  dialog2: typeof Dialog;
  subscription3: typeof Subscription;
  button11: typeof Button;
  iframe: typeof Iframe;
  timer: typeof Timer;
  dialog3: typeof Dialog;
  button13: typeof Button;
  button16: typeof Button;
  mobileDialog: typeof MobileDialog;
  telegram: typeof Dialog;
  button18: typeof Button;
  remember: typeof ApiRequest;
  reminder2: typeof Reminder;
  reminderSetting: typeof ReminderSetting;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamyar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamyar__VariantsArgs;
    args?: PlasmicHamyar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamyar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHamyar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamyar__ArgProps,
          internalVariantPropNames: PlasmicHamyar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamyar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHamyar";
  } else {
    func.displayName = `PlasmicHamyar.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHamyar = Object.assign(
  // Top-level PlasmicHamyar renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    main: makeNodeComponent("main"),
    telegram2: makeNodeComponent("telegram2"),
    nopartner: makeNodeComponent("nopartner"),
    button17: makeNodeComponent("button17"),
    noData: makeNodeComponent("noData"),
    cyclebox: makeNodeComponent("cyclebox"),
    lineClomp: makeNodeComponent("lineClomp"),
    progress: makeNodeComponent("progress"),
    button9: makeNodeComponent("button9"),
    button14: makeNodeComponent("button14"),
    button10: makeNodeComponent("button10"),
    button15: makeNodeComponent("button15"),
    countdown4: makeNodeComponent("countdown4"),
    button21: makeNodeComponent("button21"),
    checkbox: makeNodeComponent("checkbox"),
    reveal: makeNodeComponent("reveal"),
    useful2: makeNodeComponent("useful2"),
    useful: makeNodeComponent("useful"),
    harmful2: makeNodeComponent("harmful2"),
    harmful: makeNodeComponent("harmful"),
    nopartner2: makeNodeComponent("nopartner2"),
    button20: makeNodeComponent("button20"),
    shopModalWeb: makeNodeComponent("shopModalWeb"),
    subscription: makeNodeComponent("subscription"),
    button3: makeNodeComponent("button3"),
    modal2: makeNodeComponent("modal2"),
    modal3: makeNodeComponent("modal3"),
    ul: makeNodeComponent("ul"),
    shopText: makeNodeComponent("shopText"),
    input: makeNodeComponent("input"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    button7: makeNodeComponent("button7"),
    shopModalMobile: makeNodeComponent("shopModalMobile"),
    subscription2: makeNodeComponent("subscription2"),
    button4: makeNodeComponent("button4"),
    modal: makeNodeComponent("modal"),
    input2: makeNodeComponent("input2"),
    button5: makeNodeComponent("button5"),
    button6: makeNodeComponent("button6"),
    tooltip: makeNodeComponent("tooltip"),
    heart: makeNodeComponent("heart"),
    loading: makeNodeComponent("loading"),
    favicon: makeNodeComponent("favicon"),
    pullToRefresh: makeNodeComponent("pullToRefresh"),
    button19: makeNodeComponent("button19"),
    section: makeNodeComponent("section"),
    embedHtml: makeNodeComponent("embedHtml"),
    dialog: makeNodeComponent("dialog"),
    shopDialog: makeNodeComponent("shopDialog"),
    dialogTitle: makeNodeComponent("dialogTitle"),
    h5: makeNodeComponent("h5"),
    input4: makeNodeComponent("input4"),
    button12: makeNodeComponent("button12"),
    button8: makeNodeComponent("button8"),
    dialog2: makeNodeComponent("dialog2"),
    subscription3: makeNodeComponent("subscription3"),
    button11: makeNodeComponent("button11"),
    iframe: makeNodeComponent("iframe"),
    timer: makeNodeComponent("timer"),
    dialog3: makeNodeComponent("dialog3"),
    button13: makeNodeComponent("button13"),
    button16: makeNodeComponent("button16"),
    mobileDialog: makeNodeComponent("mobileDialog"),
    telegram: makeNodeComponent("telegram"),
    button18: makeNodeComponent("button18"),
    remember: makeNodeComponent("remember"),
    reminder2: makeNodeComponent("reminder2"),
    reminderSetting: makeNodeComponent("reminderSetting"),

    // Metadata about props expected for PlasmicHamyar
    internalVariantProps: PlasmicHamyar__VariantProps,
    internalArgProps: PlasmicHamyar__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "همیار لیوم",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHamyar;
/* prettier-ignore-end */
