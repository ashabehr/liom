/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: qh0CBDuGi8tY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import UserPage from "../../UserPage"; // plasmic-import: Y_O8FNCBMxb-/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import Reports from "../../Reports"; // plasmic-import: pmKDqHBtiLCT/component
import TabPage from "../../TabPage"; // plasmic-import: YjjiCvkREMP5/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMain2.module.css"; // plasmic-import: qh0CBDuGi8tY/css

createPlasmicElementProxy;

export type PlasmicMain2__VariantMembers = {
  page: "reports" | "tabPage";
  user: "user";
};
export type PlasmicMain2__VariantsArgs = {
  page?: SingleChoiceArg<"reports" | "tabPage">;
  user?: SingleBooleanChoiceArg<"user">;
};
type VariantPropType = keyof PlasmicMain2__VariantsArgs;
export const PlasmicMain2__VariantProps = new Array<VariantPropType>(
  "page",
  "user"
);

export type PlasmicMain2__ArgsType = { header?: any };
type ArgPropType = keyof PlasmicMain2__ArgsType;
export const PlasmicMain2__ArgProps = new Array<ArgPropType>("header");

export type PlasmicMain2__OverridesType = {
  root?: Flex__<"div">;
  userPage?: Flex__<typeof UserPage>;
  apiRequest?: Flex__<typeof ApiRequest>;
  reports?: Flex__<typeof Reports>;
  tabPage?: Flex__<typeof TabPage>;
};

export interface DefaultMain2Props {
  header?: any;
  page?: SingleChoiceArg<"reports" | "tabPage">;
  user?: SingleBooleanChoiceArg<"user">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMain2__RenderFunc(props: {
  variants: PlasmicMain2__VariantsArgs;
  args: PlasmicMain2__ArgsType;
  overrides: PlasmicMain2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          header: [
            {
              field: "username",
              label_fa:
                "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc",
              width: 150,
              type: "text"
            },
            {
              field: "mobile",
              label_fa:
                "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644",
              width: 130,
              type: "text"
            },
            {
              field: "activeTel",
              label_fa:
                "\u062a\u0644\u06af\u0631\u0627\u0645 \u0641\u0639\u0627\u0644",
              width: 90,
              type: "bool"
            },
            {
              field: "husbandSmsSubTime",
              label_fa:
                "\u067e\u0627\u06cc\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627",
              width: 160,
              type: "datetime"
            },
            {
              field: "selfHamyarSmsSubTime",
              label_fa:
                "\u067e\u0627\u06cc\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9",
              width: 160,
              type: "datetime"
            }
          ]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "items",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  field: "username",
                  label_fa: "نام کاربری",
                  width: 150,
                  type: "text"
                },
                {
                  field: "mobile",
                  label_fa: "شماره موبایل",
                  width: 130,
                  type: "text"
                },
                {
                  field: "activeTel",
                  label_fa: "تلگرام فعال",
                  width: 90,
                  type: "bool"
                },
                {
                  field: "husbandSmsSubTime",
                  label_fa: "پایان اشتراک همیار آقا",
                  width: 160,
                  type: "datetime"
                },
                {
                  field: "selfHamyarSmsSubTime",
                  label_fa: "پایان اشتراک",
                  width: 160,
                  type: "datetime"
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "page",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.page
      },
      {
        path: "reports.reportsSelect",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "user",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.user
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "tabPage.reportsSelect",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "tabPage.selectedTab",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "tabPage.tabList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u0647\u0645\u0633\u0631",
            type: "husband-sms"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u062e\u0648\u062f",
            type: "self-sms"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0633\u0631\u0637\u0627\u0646 \u0633\u06cc\u0646\u0647",
            type: "breast-canser-sms"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u0645\u0627\u062f\u0631",
            type: "mather-sms"
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0622\u0642\u0627\u06cc\u0627\u0646",
            type: "husband-sub"
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u062a\u0648\u0635\u06cc\u0647 \u0647\u0627",
            type: "special-advice"
          }
        ]
      },
      {
        path: "reports.tabList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u0647\u0645\u0633\u0631",
            type: "husbandSmsSubStatus"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u062e\u0648\u062f",
            type: "selfHamyarSmsSubStatus"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0633\u0631\u0637\u0627\u0646 \u0633\u06cc\u0646\u0647",
            type: "breastCancerSmsSubStatus"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u0645\u0627\u062f\u0631",
            type: "motherSmsSubStatus"
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0622\u0642\u0627\u06cc\u0627\u0646",
            type: "hamyarStatusMan"
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u062a\u0648\u0635\u06cc\u0647 \u0647\u0627",
            type: "specialAdviceSubStatus"
          }
        ]
      },
      {
        path: "reports.tabSelected",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        {
          [sty.rootpage_reports]: hasVariant($state, "page", "reports"),
          [sty.rootpage_tabPage]: hasVariant($state, "page", "tabPage"),
          [sty.rootuser]: hasVariant($state, "user", "user"),
          [sty.rootuser_page_reports]:
            hasVariant($state, "user", "user") &&
            hasVariant($state, "page", "reports"),
          [sty.rootuser_page_tabPage]:
            hasVariant($state, "user", "user") &&
            hasVariant($state, "page", "tabPage")
        }
      )}
    >
      <UserPage
        data-plasmic-name={"userPage"}
        data-plasmic-override={overrides.userPage}
        className={classNames("__wab_instance", sty.userPage, {
          [sty.userPagepage_reports]: hasVariant($state, "page", "reports"),
          [sty.userPagepage_tabPage]: hasVariant($state, "page", "tabPage"),
          [sty.userPageuser]: hasVariant($state, "user", "user"),
          [sty.userPageuser_page_reports]:
            hasVariant($state, "page", "reports") &&
            hasVariant($state, "user", "user"),
          [sty.userPageuser_page_tabPage]:
            hasVariant($state, "page", "tabPage") &&
            hasVariant($state, "user", "user")
        })}
        data={(() => {
          try {
            return $state.apiRequest.data;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        header={$state.items}
        loading={(() => {
          try {
            return $state.apiRequest.loading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
        onBack={async event => {
          const $steps = {};

          $steps["updateUser"] = true
            ? (() => {
                const actionArgs = { vgroup: "user", operation: 2 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateUser"] != null &&
            typeof $steps["updateUser"] === "object" &&
            typeof $steps["updateUser"].then === "function"
          ) {
            $steps["updateUser"] = await $steps["updateUser"];
          }
        }}
      >
        <React.Fragment>
          {(() => {
            try {
              return $state.reports.reportsSelect.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Journal Name";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </UserPage>
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        body={(() => {
          try {
            return {
              tab: $state.tabPage.tabList[$state.tabPage.selectedTab].type
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={null}
        loadingDisplay={null}
        method={"POST"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );
        }}
        shouldFetch={true}
        url={(() => {
          try {
            return `https://n8n.staas.ir/webhook/panel/${$state.reports.reportsSelect.api}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <Reports
        data-plasmic-name={"reports"}
        data-plasmic-override={overrides.reports}
        className={classNames("__wab_instance", sty.reports, {
          [sty.reportspage_reports]: hasVariant($state, "page", "reports"),
          [sty.reportspage_tabPage]: hasVariant($state, "page", "tabPage"),
          [sty.reportsuser]: hasVariant($state, "user", "user"),
          [sty.reportsuser_page_reports]:
            hasVariant($state, "user", "user") &&
            hasVariant($state, "page", "reports")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateUser"] = true
            ? (() => {
                const actionArgs = { vgroup: "user", operation: 2 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateUser"] != null &&
            typeof $steps["updateUser"] === "object" &&
            typeof $steps["updateUser"].then === "function"
          ) {
            $steps["updateUser"] = await $steps["updateUser"];
          }
        }}
        onReportsSelectChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reports", "reportsSelect"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onTabListChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reports", "tabList"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onTabSelectedChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reports", "tabSelected"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        reportsSelect={generateStateValueProp($state, [
          "reports",
          "reportsSelect"
        ])}
        tabList={generateStateValueProp($state, ["reports", "tabList"])}
        tabSelected={generateStateValueProp($state, ["reports", "tabSelected"])}
      />

      <TabPage
        data-plasmic-name={"tabPage"}
        data-plasmic-override={overrides.tabPage}
        className={classNames("__wab_instance", sty.tabPage, {
          [sty.tabPagepage_tabPage]: hasVariant($state, "page", "tabPage"),
          [sty.tabPageuser]: hasVariant($state, "user", "user"),
          [sty.tabPageuser_page_tabPage]:
            hasVariant($state, "user", "user") &&
            hasVariant($state, "page", "tabPage")
        })}
        onReportsSelectChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["tabPage", "reportsSelect"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onSelectedTabChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["tabPage", "selectedTab"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onTabListChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["tabPage", "tabList"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        reportsSelect={generateStateValueProp($state, [
          "tabPage",
          "reportsSelect"
        ])}
        selectedTab={generateStateValueProp($state, ["tabPage", "selectedTab"])}
        tabList={generateStateValueProp($state, ["tabPage", "tabList"])}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "userPage", "apiRequest", "reports", "tabPage"],
  userPage: ["userPage"],
  apiRequest: ["apiRequest"],
  reports: ["reports"],
  tabPage: ["tabPage"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  userPage: typeof UserPage;
  apiRequest: typeof ApiRequest;
  reports: typeof Reports;
  tabPage: typeof TabPage;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMain2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMain2__VariantsArgs;
    args?: PlasmicMain2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMain2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMain2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMain2__ArgProps,
          internalVariantPropNames: PlasmicMain2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMain2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMain2";
  } else {
    func.displayName = `PlasmicMain2.${nodeName}`;
  }
  return func;
}

export const PlasmicMain2 = Object.assign(
  // Top-level PlasmicMain2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    userPage: makeNodeComponent("userPage"),
    apiRequest: makeNodeComponent("apiRequest"),
    reports: makeNodeComponent("reports"),
    tabPage: makeNodeComponent("tabPage"),

    // Metadata about props expected for PlasmicMain2
    internalVariantProps: PlasmicMain2__VariantProps,
    internalArgProps: PlasmicMain2__ArgProps
  }
);

export default PlasmicMain2;
/* prettier-ignore-end */
