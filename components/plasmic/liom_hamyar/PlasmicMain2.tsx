/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: qh0CBDuGi8tY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import UserPage from "../../UserPage"; // plasmic-import: Y_O8FNCBMxb-/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import Reports from "../../Reports"; // plasmic-import: pmKDqHBtiLCT/component
import UserPage2 from "../../UserPage2"; // plasmic-import: 3UGIP49FNSVo/component
import Sendnotif from "../../Sendnotif"; // plasmic-import: 1f3SHQQwHGQn/component
import Sendmessage from "../../Sendmessage"; // plasmic-import: MCAKqEbtK9Qy/component
import Charts from "../../Charts"; // plasmic-import: lCS9WJtBvfol/component
import ChartViow from "../../ChartViow"; // plasmic-import: npU0JycAnQRQ/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMain2.module.css"; // plasmic-import: qh0CBDuGi8tY/css

createPlasmicElementProxy;

export type PlasmicMain2__VariantMembers = {
  page: "reports" | "tabPage" | "notifs" | "charts";
  user: "user";
  dataUser: "dataUser";
  chartViow: "chartViow";
};
export type PlasmicMain2__VariantsArgs = {
  page?: SingleChoiceArg<"reports" | "tabPage" | "notifs" | "charts">;
  user?: SingleBooleanChoiceArg<"user">;
  dataUser?: SingleBooleanChoiceArg<"dataUser">;
  chartViow?: SingleBooleanChoiceArg<"chartViow">;
};
type VariantPropType = keyof PlasmicMain2__VariantsArgs;
export const PlasmicMain2__VariantProps = new Array<VariantPropType>(
  "page",
  "user",
  "dataUser",
  "chartViow"
);

export type PlasmicMain2__ArgsType = {
  header?: any;
  page2?: string;
  onPage2Change?: (val: string) => void;
};
type ArgPropType = keyof PlasmicMain2__ArgsType;
export const PlasmicMain2__ArgProps = new Array<ArgPropType>(
  "header",
  "page2",
  "onPage2Change"
);

export type PlasmicMain2__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  userPage?: Flex__<typeof UserPage>;
  freeBox?: Flex__<"div">;
  blockquote?: Flex__<"blockquote">;
  apiRequest?: Flex__<typeof ApiRequest>;
  reports?: Flex__<typeof Reports>;
  userPage2?: Flex__<typeof UserPage2>;
  sendMessage?: Flex__<typeof Sendnotif>;
  nitif?: Flex__<typeof Sendmessage>;
  charts?: Flex__<typeof Charts>;
  chartViow2?: Flex__<typeof ChartViow>;
};

export interface DefaultMain2Props {
  header?: any;
  page2?: string;
  onPage2Change?: (val: string) => void;
  page?: SingleChoiceArg<"reports" | "tabPage" | "notifs" | "charts">;
  user?: SingleBooleanChoiceArg<"user">;
  dataUser?: SingleBooleanChoiceArg<"dataUser">;
  chartViow?: SingleBooleanChoiceArg<"chartViow">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMain2__RenderFunc(props: {
  variants: PlasmicMain2__VariantsArgs;
  args: PlasmicMain2__ArgsType;
  overrides: PlasmicMain2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          header: [
            {
              field: "username",
              label_fa:
                "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc",
              width: 150,
              type: "text"
            },
            {
              field: "mobile",
              label_fa:
                "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644",
              width: 130,
              type: "text"
            },
            {
              field: "activeTel",
              label_fa:
                "\u062a\u0644\u06af\u0631\u0627\u0645 \u0641\u0639\u0627\u0644",
              width: 90,
              type: "bool"
            },
            {
              field: "husbandSmsSubTime",
              label_fa:
                "\u067e\u0627\u06cc\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627",
              width: 160,
              type: "datetime"
            },
            {
              field: "selfHamyarSmsSubTime",
              label_fa:
                "\u067e\u0627\u06cc\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9",
              width: 160,
              type: "datetime"
            }
          ]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "items",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  field: "username",
                  label_fa: "نام کاربری",
                  width: 150,
                  type: "text"
                },
                {
                  field: "mobile",
                  label_fa: "شماره موبایل",
                  width: 130,
                  type: "text"
                },
                {
                  field: "activeTel",
                  label_fa: "تلگرام فعال",
                  width: 90,
                  type: "bool"
                },
                {
                  field: "husbandSmsSubTime",
                  label_fa: "پایان اشتراک همیار آقا",
                  width: 160,
                  type: "datetime"
                },
                {
                  field: "selfHamyarSmsSubTime",
                  label_fa: "پایان اشتراک",
                  width: 160,
                  type: "datetime"
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "page",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.page
      },
      {
        path: "reports.reportsSelect",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "user",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.user
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "reports.tabList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u0647\u0645\u0633\u0631",
            type: "husbandSmsSubStatus",
            number: ""
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u062e\u0648\u062f",
            type: "selfHamyarSmsSubStatus",
            number: ""
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0633\u0631\u0637\u0627\u0646 \u0633\u06cc\u0646\u0647",
            type: "breastCancerSmsSubStatus",
            number: ""
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u0645\u0627\u062f\u0631",
            type: "motherSmsSubStatus",
            number: ""
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0622\u0642\u0627\u06cc\u0627\u0646",
            type: "hamyarStatusMan",
            number: ""
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u062a\u0648\u0635\u06cc\u0647 \u0647\u0627",
            type: "specialAdviceSubStatus",
            number: ""
          }
        ]
      },
      {
        path: "reports.tabSelected",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "page2",
        type: "writable",
        variableType: "text",

        valueProp: "page2",
        onChangeProp: "onPage2Change"
      },
      {
        path: "userPage.userdata",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "notes",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "userPage2.userdata",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dataUser",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.dataUser
      },
      {
        path: "sendMessage.reportsSelect",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "sendMessage.tabList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u0647\u0645\u0633\u0631",
            type: "husband-sms"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u062e\u0648\u062f",
            type: "self-sms"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0633\u0631\u0637\u0627\u0646 \u0633\u06cc\u0646\u0647",
            type: "breast-canser-sms"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u0645\u0627\u062f\u0631",
            type: "mather-sms"
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0622\u0642\u0627\u06cc\u0627\u0646",
            type: "husband-sub"
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u062a\u0648\u0635\u06cc\u0647 \u0647\u0627",
            type: "special-advice"
          }
        ]
      },
      {
        path: "sendMessage.selectedTab",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "sendMessage.filess",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "nitif.reportsSelect",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "nitif.tabList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u0647\u0645\u0633\u0631",
            type: "husband-sms"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u062e\u0648\u062f",
            type: "self-sms"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0633\u0631\u0637\u0627\u0646 \u0633\u06cc\u0646\u0647",
            type: "breast-canser-sms"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u0645\u0627\u062f\u0631",
            type: "mather-sms"
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0622\u0642\u0627\u06cc\u0627\u0646",
            type: "husband-sub"
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u062a\u0648\u0635\u06cc\u0647 \u0647\u0627",
            type: "special-advice"
          }
        ]
      },
      {
        path: "nitif.selectedTab",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "nitif.filess",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "charts.payment",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "charts.selectChart",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "chartViow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.chartViow
      },
      {
        path: "chartViow2.userdata",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sendMessage.datapickerbool",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootchartViow]: hasVariant($state, "chartViow", "chartViow"),
          [sty.rootdataUser]: hasVariant($state, "dataUser", "dataUser"),
          [sty.rootpage_charts]: hasVariant($state, "page", "charts"),
          [sty.rootpage_notifs]: hasVariant($state, "page", "notifs"),
          [sty.rootpage_reports]: hasVariant($state, "page", "reports"),
          [sty.rootpage_tabPage]: hasVariant($state, "page", "tabPage"),
          [sty.rootuser]: hasVariant($state, "user", "user"),
          [sty.rootuser_page_reports]:
            hasVariant($state, "user", "user") &&
            hasVariant($state, "page", "reports"),
          [sty.rootuser_page_tabPage]:
            hasVariant($state, "user", "user") &&
            hasVariant($state, "page", "tabPage")
        }
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect, {
          [sty.sideEffectuser]: hasVariant($state, "user", "user")
        })}
        onMount={async () => {
          const $steps = {};
        }}
      />

      <UserPage
        data-plasmic-name={"userPage"}
        data-plasmic-override={overrides.userPage}
        className={classNames("__wab_instance", sty.userPage, {
          [sty.userPagechartViow]: hasVariant($state, "chartViow", "chartViow"),
          [sty.userPagedataUser]: hasVariant($state, "dataUser", "dataUser"),
          [sty.userPagepage_charts]: hasVariant($state, "page", "charts"),
          [sty.userPagepage_reports]: hasVariant($state, "page", "reports"),
          [sty.userPagepage_tabPage]: hasVariant($state, "page", "tabPage"),
          [sty.userPageuser]: hasVariant($state, "user", "user"),
          [sty.userPageuser_dataUser]:
            hasVariant($state, "user", "user") &&
            hasVariant($state, "dataUser", "dataUser"),
          [sty.userPageuser_page_reports]:
            hasVariant($state, "page", "reports") &&
            hasVariant($state, "user", "user"),
          [sty.userPageuser_page_tabPage]:
            hasVariant($state, "page", "tabPage") &&
            hasVariant($state, "user", "user")
        })}
        data={(() => {
          try {
            return $state.apiRequest.data;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        header={$state.items}
        loading={(() => {
          try {
            return $state.apiRequest.loading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
        onBack={async event => {
          const $steps = {};

          $steps["updateUser"] = true
            ? (() => {
                const actionArgs = { vgroup: "user", operation: 2 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateUser"] != null &&
            typeof $steps["updateUser"] === "object" &&
            typeof $steps["updateUser"].then === "function"
          ) {
            $steps["updateUser"] = await $steps["updateUser"];
          }

          $steps["updatePage2"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["page2"]
                  },
                  operation: 0,
                  value: "0"
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updatePage2"] != null &&
            typeof $steps["updatePage2"] === "object" &&
            typeof $steps["updatePage2"].then === "function"
          ) {
            $steps["updatePage2"] = await $steps["updatePage2"];
          }
        }}
        onClick={async event => {
          const $steps = {};

          $steps["updateDataUser"] = true
            ? (() => {
                const actionArgs = { vgroup: "dataUser", operation: 2 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateDataUser"] != null &&
            typeof $steps["updateDataUser"] === "object" &&
            typeof $steps["updateDataUser"].then === "function"
          ) {
            $steps["updateDataUser"] = await $steps["updateDataUser"];
          }
        }}
        onUserdataChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["userPage", "userdata"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        slot={
          (
            hasVariant($state, "user", "user")
              ? (() => {
                  try {
                    return !($state.apiRequest?.loading ?? true);
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()
              : true
          ) ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox, {
                [sty.freeBoxpage_reports]: hasVariant(
                  $state,
                  "page",
                  "reports"
                ),
                [sty.freeBoxpage_tabPage]: hasVariant(
                  $state,
                  "page",
                  "tabPage"
                ),
                [sty.freeBoxuser]: hasVariant($state, "user", "user")
              })}
            >
              {(() => {
                try {
                  return parseInt($state.page2) != 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yW1U,
                    {
                      [sty.textuser__yW1UBGqPs]: hasVariant(
                        $state,
                        "user",
                        "user"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <blockquote
                        data-plasmic-name={"blockquote"}
                        data-plasmic-override={overrides.blockquote}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.blockquote,
                          {
                            [sty.blockquoteuser]: hasVariant(
                              $state,
                              "user",
                              "user"
                            )
                          }
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updatePage2"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["page2"]
                                  },
                                  operation: 0,
                                  value: (parseInt($state.page2) - 1).toString()
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updatePage2"] != null &&
                            typeof $steps["updatePage2"] === "object" &&
                            typeof $steps["updatePage2"].then === "function"
                          ) {
                            $steps["updatePage2"] = await $steps["updatePage2"];
                          }
                        }}
                      >
                        {"< \u0635\u0641\u062d\u0647 \u0642\u0628\u0644\u06cc"}
                      </blockquote>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              ) : null}
              {(
                hasVariant($state, "user", "user")
                  ? (() => {
                      try {
                        return $state.apiRequest.data.result.length != 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : true
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fbb6B,
                    {
                      [sty.textuser__fbb6BbGqPs]: hasVariant(
                        $state,
                        "user",
                        "user"
                      )
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updatePage2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["page2"]
                            },
                            operation: 0,
                            value: (parseInt($state.page2) + 1).toString()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePage2"] != null &&
                      typeof $steps["updatePage2"] === "object" &&
                      typeof $steps["updatePage2"].then === "function"
                    ) {
                      $steps["updatePage2"] = await $steps["updatePage2"];
                    }
                  }}
                >
                  {"\u0635\u0641\u062d\u0647 \u0628\u0639\u062f\u06cc >"}
                </div>
              ) : null}
            </div>
          ) : null
        }
      >
        <React.Fragment>
          {(() => {
            try {
              return $state.reports.reportsSelect.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Journal Name";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </UserPage>
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        body={(() => {
          try {
            return $state.reports.reportsSelect.api.startsWith("expire")
              ? {
                  type: $state.reports.tabList[$state.reports.tabSelected].type,
                  page: $state.page2,
                  day: parseInt($state.reports.reportsSelect.api.split("-")[1])
                }
              : {
                  type: $state.reports.tabList[$state.reports.tabSelected].type,
                  page: $state.page2
                };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.apiRequest, {
          [sty.apiRequestpage_notifs]: hasVariant($state, "page", "notifs")
        })}
        errorDisplay={null}
        loadingDisplay={null}
        method={"POST"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );
        }}
        shouldFetch={true}
        url={(() => {
          try {
            return `https://n8n.staas.ir/webhook/panel/${$state.reports.reportsSelect.api.split("-")[0]}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <Reports
        data-plasmic-name={"reports"}
        data-plasmic-override={overrides.reports}
        className={classNames("__wab_instance", sty.reports, {
          [sty.reportsdataUser]: hasVariant($state, "dataUser", "dataUser"),
          [sty.reportspage_notifs]: hasVariant($state, "page", "notifs"),
          [sty.reportspage_reports]: hasVariant($state, "page", "reports"),
          [sty.reportspage_tabPage]: hasVariant($state, "page", "tabPage"),
          [sty.reportsuser]: hasVariant($state, "user", "user"),
          [sty.reportsuser_page_reports]:
            hasVariant($state, "user", "user") &&
            hasVariant($state, "page", "reports")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateUser"] = true
            ? (() => {
                const actionArgs = { vgroup: "user", operation: 2 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateUser"] != null &&
            typeof $steps["updateUser"] === "object" &&
            typeof $steps["updateUser"].then === "function"
          ) {
            $steps["updateUser"] = await $steps["updateUser"];
          }
        }}
        onReportsSelectChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reports", "reportsSelect"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onTabListChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reports", "tabList"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onTabSelectedChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reports", "tabSelected"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        reportsSelect={generateStateValueProp($state, [
          "reports",
          "reportsSelect"
        ])}
        tabList={generateStateValueProp($state, ["reports", "tabList"])}
        tabSelected={generateStateValueProp($state, ["reports", "tabSelected"])}
      />

      <UserPage2
        data-plasmic-name={"userPage2"}
        data-plasmic-override={overrides.userPage2}
        className={classNames("__wab_instance", sty.userPage2, {
          [sty.userPage2dataUser]: hasVariant($state, "dataUser", "dataUser"),
          [sty.userPage2page_notifs]: hasVariant($state, "page", "notifs"),
          [sty.userPage2page_tabPage]: hasVariant($state, "page", "tabPage")
        })}
        data={(() => {
          try {
            return $state.userPage.userdata;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return {
                success: true,
                result: {
                  total: 881,
                  list: [
                    {
                      user: {
                        countBuyBreastCancer: 3,
                        countBuyHamyarStatus: 1,
                        countBuyHusbandSms: 3,
                        countBuyPregnancySubStatus: 5,
                        countBuySelfSms: 1,
                        countBuySpecialAdvice: 1,
                        activeTel: true,
                        breastCancerSmsSubTime: {
                          year: 2026,
                          month: 2,
                          day: 3,
                          hour: 4,
                          minute: 3,
                          second: 11,
                          nanosecond: 141000000,
                          timeZoneOffsetSeconds: 0
                        },
                        pregnancySubTime: {
                          year: 2027,
                          month: 11,
                          day: 27,
                          hour: 0,
                          minute: 36,
                          second: 38,
                          nanosecond: 358000000,
                          timeZoneOffsetSeconds: 0
                        },
                        hamyarTime: {
                          year: 2025,
                          month: 5,
                          day: 21,
                          hour: 22,
                          minute: 22,
                          second: 35,
                          nanosecond: 336000000,
                          timeZoneOffsetSeconds: 0
                        },
                        husbandSmsSubTime: {
                          year: 2025,
                          month: 10,
                          day: 7,
                          hour: 8,
                          minute: 39,
                          second: 22,
                          nanosecond: 886000000,
                          timeZoneOffsetSeconds: 0
                        },
                        pregnancyBabyGrowthTime: {
                          year: 2027,
                          month: 11,
                          day: 27,
                          hour: 0,
                          minute: 36,
                          second: 38,
                          nanosecond: 463000000,
                          timeZoneOffsetSeconds: 0
                        },
                        pregnancyBecomeFatherTime: {
                          year: 2027,
                          month: 11,
                          day: 27,
                          hour: 0,
                          minute: 36,
                          second: 38,
                          nanosecond: 463000000,
                          timeZoneOffsetSeconds: 0
                        },
                        pregnancyBetterRelationTime: {
                          year: 2027,
                          month: 11,
                          day: 27,
                          hour: 0,
                          minute: 36,
                          second: 38,
                          nanosecond: 463000000,
                          timeZoneOffsetSeconds: 0
                        },
                        pregnancyDangerTime: {
                          year: 2027,
                          month: 11,
                          day: 27,
                          hour: 0,
                          minute: 36,
                          second: 38,
                          nanosecond: 463000000,
                          timeZoneOffsetSeconds: 0
                        },
                        pregnancySelfSmsTime: {
                          year: 2027,
                          month: 11,
                          day: 27,
                          hour: 0,
                          minute: 36,
                          second: 38,
                          nanosecond: 463000000,
                          timeZoneOffsetSeconds: 0
                        },
                        selfHamyarSmsSubTime: {
                          year: 2025,
                          month: 12,
                          day: 6,
                          hour: 10,
                          minute: 33,
                          second: 20,
                          nanosecond: 363000000,
                          timeZoneOffsetSeconds: 0
                        },
                        specialAdviceSubTim: {
                          year: 2025,
                          month: 3,
                          day: 9,
                          hour: 16,
                          minute: 11,
                          second: 12,
                          nanosecond: 839000000,
                          timeZoneOffsetSeconds: 0
                        },
                        mobile: "",
                        id: "265149",
                        lastActivity: {
                          year: 2025,
                          month: 9,
                          day: 12,
                          hour: 18,
                          minute: 23,
                          second: 34,
                          nanosecond: 707000000,
                          timeZoneOffsetSeconds: 0
                        },
                        username: "melika",
                        refcode: "3d8fb3"
                      }
                    },
                    {
                      user: {
                        countBuyHusbandSms: 1,
                        activeTel: false,
                        husbandSmsSubTime: {
                          year: 2025,
                          month: 9,
                          day: 13,
                          hour: 5,
                          minute: 49,
                          second: 2,
                          nanosecond: 612000000,
                          timeZoneOffsetSeconds: 0
                        },
                        mobile: "09139140864",
                        id: "f0afd250-6395-4253-b257-e167262cdd3d",
                        lastActivity: {
                          year: 2025,
                          month: 9,
                          day: 7,
                          hour: 3,
                          minute: 48,
                          second: 36,
                          nanosecond: 74000000,
                          timeZoneOffsetSeconds: 0
                        },
                        username: "guest_M8KxaugoDA",
                        refcode: "fGC3sVlYv"
                      }
                    }
                  ]
                }
              };
            }
            throw e;
          }
        })()}
        onBack={async event => {
          const $steps = {};

          $steps["updateDataUser"] = true
            ? (() => {
                const actionArgs = { vgroup: "dataUser", operation: 2 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateDataUser"] != null &&
            typeof $steps["updateDataUser"] === "object" &&
            typeof $steps["updateDataUser"].then === "function"
          ) {
            $steps["updateDataUser"] = await $steps["updateDataUser"];
          }
        }}
        onUserdataChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["userPage2", "userdata"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
      />

      <Sendnotif
        data-plasmic-name={"sendMessage"}
        data-plasmic-override={overrides.sendMessage}
        className={classNames("__wab_instance", sty.sendMessage, {
          [sty.sendMessagepage_notifs]: hasVariant($state, "page", "notifs")
        })}
        onDatapickerboolChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "sendMessage",
            "datapickerbool"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onFilessChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["sendMessage", "filess"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onReportsSelectChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "sendMessage",
            "reportsSelect"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onSelectedTabChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "sendMessage",
            "selectedTab"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onTabListChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["sendMessage", "tabList"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        reportsSelect={generateStateValueProp($state, [
          "sendMessage",
          "reportsSelect"
        ])}
        selectedTab={generateStateValueProp($state, [
          "sendMessage",
          "selectedTab"
        ])}
        tabList={generateStateValueProp($state, ["sendMessage", "tabList"])}
      />

      <Sendmessage
        data-plasmic-name={"nitif"}
        data-plasmic-override={overrides.nitif}
        className={classNames("__wab_instance", sty.nitif, {
          [sty.nitifpage_charts]: hasVariant($state, "page", "charts"),
          [sty.nitifpage_notifs]: hasVariant($state, "page", "notifs")
        })}
        onFilessChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["nitif", "filess"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onReportsSelectChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["nitif", "reportsSelect"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onSelectedTabChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["nitif", "selectedTab"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onTabListChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["nitif", "tabList"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        reportsSelect={generateStateValueProp($state, [
          "nitif",
          "reportsSelect"
        ])}
        selectedTab={generateStateValueProp($state, ["nitif", "selectedTab"])}
        tabList={generateStateValueProp($state, ["nitif", "tabList"])}
      />

      <Charts
        data-plasmic-name={"charts"}
        data-plasmic-override={overrides.charts}
        chartOpen={async () => {
          const $steps = {};

          $steps["updateChartViow"] = true
            ? (() => {
                const actionArgs = { vgroup: "chartViow", operation: 4 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, true);
                  return true;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateChartViow"] != null &&
            typeof $steps["updateChartViow"] === "object" &&
            typeof $steps["updateChartViow"].then === "function"
          ) {
            $steps["updateChartViow"] = await $steps["updateChartViow"];
          }
        }}
        className={classNames("__wab_instance", sty.charts, {
          [sty.chartschartViow]: hasVariant($state, "chartViow", "chartViow"),
          [sty.chartspage_charts]: hasVariant($state, "page", "charts"),
          [sty.chartspage_charts_chartViow]:
            hasVariant($state, "page", "charts") &&
            hasVariant($state, "chartViow", "chartViow")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateItems"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["items"]
                  },
                  operation: 0
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateItems"] != null &&
            typeof $steps["updateItems"] === "object" &&
            typeof $steps["updateItems"].then === "function"
          ) {
            $steps["updateItems"] = await $steps["updateItems"];
          }
        }}
        onPaymentChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["charts", "payment"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onSelectChartChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["charts", "selectChart"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        payment={generateStateValueProp($state, ["charts", "payment"])}
        selectChart={generateStateValueProp($state, ["charts", "selectChart"])}
      >
        {"\u0646\u0645\u0648\u062f\u0627\u0631 \u0647\u0627"}
      </Charts>
      <ChartViow
        data-plasmic-name={"chartViow2"}
        data-plasmic-override={overrides.chartViow2}
        className={classNames("__wab_instance", sty.chartViow2, {
          [sty.chartViow2chartViow]: hasVariant(
            $state,
            "chartViow",
            "chartViow"
          ),
          [sty.chartViow2page_charts]: hasVariant($state, "page", "charts")
        })}
        data={(() => {
          try {
            return $state.charts.payment;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [
                {
                  date: "2025-09-17",
                  ok_count: 20,
                  not_ok_count: 122,
                  ok_nok_conversion_rate: 14.08,
                  page_view_count: 1537,
                  page_conversion_rate: 1.3
                },
                {
                  date: "2025-09-18",
                  ok_count: 20,
                  not_ok_count: 124,
                  ok_nok_conversion_rate: 13.89,
                  page_view_count: 1265,
                  page_conversion_rate: 1.58
                },
                {
                  date: "2025-09-19",
                  ok_count: 17,
                  not_ok_count: 137,
                  ok_nok_conversion_rate: 11.04,
                  page_view_count: 1200,
                  page_conversion_rate: 1.42
                },
                {
                  date: "2025-09-20",
                  ok_count: 24,
                  not_ok_count: 141,
                  ok_nok_conversion_rate: 14.55,
                  page_view_count: 1510,
                  page_conversion_rate: 1.59
                },
                {
                  date: "2025-09-21",
                  ok_count: 25,
                  not_ok_count: 143,
                  ok_nok_conversion_rate: 14.88,
                  page_view_count: 1654,
                  page_conversion_rate: 1.51
                },
                {
                  date: "2025-09-22",
                  ok_count: 21,
                  not_ok_count: 144,
                  ok_nok_conversion_rate: 12.73,
                  page_view_count: 1179,
                  page_conversion_rate: 1.78
                },
                {
                  date: "2025-09-23",
                  ok_count: 16,
                  not_ok_count: 135,
                  ok_nok_conversion_rate: 10.6,
                  page_view_count: 1221,
                  page_conversion_rate: 1.31
                },
                {
                  date: "2025-09-24",
                  ok_count: 17,
                  not_ok_count: 154,
                  ok_nok_conversion_rate: 9.94,
                  page_view_count: 1222,
                  page_conversion_rate: 1.39
                },
                {
                  date: "2025-09-25",
                  ok_count: 23,
                  not_ok_count: 191,
                  ok_nok_conversion_rate: 10.75,
                  page_view_count: 1639,
                  page_conversion_rate: 1.4
                },
                {
                  date: "2025-09-26",
                  ok_count: 25,
                  not_ok_count: 191,
                  ok_nok_conversion_rate: 11.57,
                  page_view_count: 1651,
                  page_conversion_rate: 1.51
                },
                {
                  date: "2025-09-27",
                  ok_count: 2,
                  not_ok_count: 7,
                  ok_nok_conversion_rate: 22.22,
                  page_view_count: 163,
                  page_conversion_rate: 1.23
                }
              ];
            }
            throw e;
          }
        })()}
        onBack={async event => {
          const $steps = {};

          $steps["updateChartViow"] = true
            ? (() => {
                const actionArgs = { vgroup: "chartViow", operation: 6 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, false);
                  return false;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateChartViow"] != null &&
            typeof $steps["updateChartViow"] === "object" &&
            typeof $steps["updateChartViow"].then === "function"
          ) {
            $steps["updateChartViow"] = await $steps["updateChartViow"];
          }
        }}
        onUserdataChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["chartViow2", "userdata"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        selectChart={(() => {
          try {
            return $state.charts.selectChart;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return {
                lable:
                  "\u0646\u0631\u062e \u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0648\u0641\u0642",
                link: "https://n8n.staas.ir/webhook/panel/convertionPayment",
                icon: '<svg width="305" height="135" viewBox="0 0 305 135" fill="none" xmlns="http://www.w3.org/2000/svg">\r\n<path fill-rule="evenodd" clip-rule="evenodd" d="M1.53174 130.559V79.6143C1.53174 75.072 5.72803 71.6913 10.1663 72.6581C11.529 72.9549 12.9489 72.8449 14.2497 72.3418L17.7445 70.9901C20.8458 69.7906 24.3665 70.7843 26.3831 73.4281C29.7491 77.8412 36.5812 77.1752 39.0315 72.195L40.476 69.2592C42.695 64.7491 48.0433 62.7482 52.6777 64.6943L53.3081 64.959C54.5248 65.4699 55.8289 65.7404 57.1485 65.7557L59.599 65.7841C63.588 65.8304 67.3643 67.5909 69.9645 70.6165L71.7894 72.7401C74.6516 76.0706 79.3432 77.16 83.3801 75.4315C85.8982 74.3532 87.8679 72.2948 88.8341 69.7316L95.8117 51.2216C96.9721 48.1435 100.645 46.8783 103.455 48.5888C106.233 50.28 109.865 49.0641 111.065 46.041L113.129 40.8407C115.903 33.8519 125.277 32.6333 129.745 38.6807C130.059 39.1053 130.407 39.5033 130.787 39.8706L140.94 49.7013L145.745 55.0611C148.515 58.1517 153.554 57.342 155.216 53.5389C157.443 48.4461 164.896 49.2223 166.025 54.6645L167.3 60.807C168.899 68.512 179.661 69.1411 182.147 61.6747L183.835 56.6023L192.08 36.0758C193.712 32.0142 196.241 28.3745 199.48 25.4297L203.472 21.799C204.67 20.7094 205.672 19.4214 206.433 17.9916L211.63 8.22498C213.746 4.24835 219.185 3.61382 222.159 6.9965C224.629 9.80528 228.964 9.92851 231.589 7.26462L231.795 7.0561C234.74 4.06814 239.673 4.48083 242.081 7.9166L242.897 9.08173C245.675 13.0456 251.331 13.6039 254.83 10.2596L255.03 10.0686C257.38 7.82284 260.84 7.19007 263.832 8.45901L265.284 9.07458C268.046 10.2459 270.178 12.5391 271.145 15.3792L277.713 34.6666C278.871 38.0681 283.301 38.8993 285.613 36.149C287.967 33.3496 292.486 34.2703 293.557 37.7674L301.797 64.6668V130.559" fill="url(#paint0_linear_19_600)"/>\r\n<path d="M1.53174 130.559V79.6143C1.53174 75.072 5.72803 71.6913 10.1663 72.6581C11.529 72.9549 12.9489 72.8449 14.2497 72.3418L17.7445 70.9901C20.8458 69.7906 24.3665 70.7843 26.3831 73.4281C29.7491 77.8412 36.5812 77.1752 39.0315 72.195L40.476 69.2592C42.695 64.7491 48.0433 62.7482 52.6777 64.6943L53.3081 64.959C54.5248 65.4699 55.8289 65.7404 57.1485 65.7557L59.599 65.7841C63.588 65.8304 67.3643 67.5909 69.9645 70.6165L71.7894 72.7401C74.6516 76.0706 79.3432 77.16 83.3801 75.4315C85.8982 74.3532 87.8679 72.2948 88.8341 69.7316L95.8117 51.2216C96.9721 48.1435 100.645 46.8783 103.455 48.5888C106.233 50.28 109.865 49.0641 111.065 46.041L113.129 40.8407C115.903 33.8519 125.277 32.6333 129.745 38.6807C130.059 39.1053 130.407 39.5033 130.787 39.8706L140.94 49.7013L145.745 55.0611C148.515 58.1517 153.554 57.342 155.216 53.5389C157.443 48.4461 164.896 49.2223 166.025 54.6645L167.3 60.807C168.899 68.512 179.661 69.1411 182.147 61.6747L183.835 56.6023L192.08 36.0758C193.712 32.0142 196.241 28.3745 199.48 25.4297L203.472 21.799C204.67 20.7094 205.672 19.4214 206.433 17.9916L211.63 8.22498C213.746 4.24835 219.185 3.61382 222.159 6.9965C224.629 9.80528 228.964 9.92851 231.589 7.26462L231.795 7.0561C234.74 4.06814 239.673 4.48083 242.081 7.9166L242.897 9.08173C245.675 13.0456 251.331 13.6039 254.83 10.2596L255.03 10.0686C257.38 7.82284 260.84 7.19007 263.832 8.45901L265.284 9.07458C268.046 10.2459 270.178 12.5391 271.145 15.3792L277.713 34.6666C278.871 38.0681 283.301 38.8993 285.613 36.149C287.967 33.3496 292.486 34.2703 293.557 37.7674L301.797 64.6668M301.797 64.6668V130.559M301.797 64.6668V114.128" stroke="#00A478" stroke-linecap="round" stroke-linejoin="round"/>\r\n<rect x="300" y="44" width="5" height="91" rx="2.5" fill="#F9F9F9"/>\r\n<rect y="58.6184" width="3.34247" height="76.3816" rx="1.67123" fill="#F9F9F9"/>\r\n<defs>\r\n<linearGradient id="paint0_linear_19_600" x1="151.664" y1="0" x2="151.664" y2="130.559" gradientUnits="userSpaceOnUse">\r\n<stop stop-color="#00A478"/>\r\n<stop offset="1" stop-color="white" stop-opacity="0"/>\r\n</linearGradient>\r\n</defs>\r\n</svg>\r\n',
                config: {
                  enabled: true,
                  key: "value",
                  type: "Number",
                  tickLine: true,
                  tickMargin: 10,
                  axisLine: true
                },
                config2: {
                  key: "value",
                  label: "\u0645\u0628\u0644\u063a",
                  color: "#16A34A",
                  hidden: false
                }
              };
            }
            throw e;
          }
        })()}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__fRB4,
            {
              [sty.textpage_charts__fRB46Ypl]: hasVariant(
                $state,
                "page",
                "charts"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $state.charts.selectChart.lable;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u0627\u0637\u0644\u0627\u0639\u0627\u062a";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </ChartViow>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "userPage",
    "freeBox",
    "blockquote",
    "apiRequest",
    "reports",
    "userPage2",
    "sendMessage",
    "nitif",
    "charts",
    "chartViow2"
  ],
  sideEffect: ["sideEffect"],
  userPage: ["userPage", "freeBox", "blockquote"],
  freeBox: ["freeBox", "blockquote"],
  blockquote: ["blockquote"],
  apiRequest: ["apiRequest"],
  reports: ["reports"],
  userPage2: ["userPage2"],
  sendMessage: ["sendMessage"],
  nitif: ["nitif"],
  charts: ["charts"],
  chartViow2: ["chartViow2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  userPage: typeof UserPage;
  freeBox: "div";
  blockquote: "blockquote";
  apiRequest: typeof ApiRequest;
  reports: typeof Reports;
  userPage2: typeof UserPage2;
  sendMessage: typeof Sendnotif;
  nitif: typeof Sendmessage;
  charts: typeof Charts;
  chartViow2: typeof ChartViow;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMain2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMain2__VariantsArgs;
    args?: PlasmicMain2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicMain2__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicMain2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMain2__ArgProps,
          internalVariantPropNames: PlasmicMain2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMain2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMain2";
  } else {
    func.displayName = `PlasmicMain2.${nodeName}`;
  }
  return func;
}

export const PlasmicMain2 = Object.assign(
  // Top-level PlasmicMain2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    userPage: makeNodeComponent("userPage"),
    freeBox: makeNodeComponent("freeBox"),
    blockquote: makeNodeComponent("blockquote"),
    apiRequest: makeNodeComponent("apiRequest"),
    reports: makeNodeComponent("reports"),
    userPage2: makeNodeComponent("userPage2"),
    sendMessage: makeNodeComponent("sendMessage"),
    nitif: makeNodeComponent("nitif"),
    charts: makeNodeComponent("charts"),
    chartViow2: makeNodeComponent("chartViow2"),

    // Metadata about props expected for PlasmicMain2
    internalVariantProps: PlasmicMain2__VariantProps,
    internalArgProps: PlasmicMain2__ArgProps
  }
);

export default PlasmicMain2;
/* prettier-ignore-end */
