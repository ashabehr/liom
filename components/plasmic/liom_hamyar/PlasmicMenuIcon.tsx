/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: JBF-V8Q5mpWl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMenuIcon.module.css"; // plasmic-import: JBF-V8Q5mpWl/css

import StickynoteIcon from "./icons/PlasmicIcon__Stickynote"; // plasmic-import: XN3qPYKB0B6e/icon
import Icon260Icon from "./icons/PlasmicIcon__Icon260"; // plasmic-import: SpmDa_1Lyb3r/icon
import Icon261Icon from "./icons/PlasmicIcon__Icon261"; // plasmic-import: 4mV1FUQXQxqo/icon
import Icon262Icon from "./icons/PlasmicIcon__Icon262"; // plasmic-import: FbWns72AK2M4/icon
import Icon263Icon from "./icons/PlasmicIcon__Icon263"; // plasmic-import: uiMUauyScroM/icon
import Icon264Icon from "./icons/PlasmicIcon__Icon264"; // plasmic-import: k-XgEulbN8XQ/icon
import Icon265Icon from "./icons/PlasmicIcon__Icon265"; // plasmic-import: uOsS8ihVyPQb/icon
import Icon266Icon from "./icons/PlasmicIcon__Icon266"; // plasmic-import: D9XHc369DSfD/icon
import Icon268Icon from "./icons/PlasmicIcon__Icon268"; // plasmic-import: KIX_jZFHfv2N/icon
import Icon269Icon from "./icons/PlasmicIcon__Icon269"; // plasmic-import: nhqlCi92__jt/icon
import Icon270Icon from "./icons/PlasmicIcon__Icon270"; // plasmic-import: Y171g_Z8ZZ84/icon
import Icon273Icon from "./icons/PlasmicIcon__Icon273"; // plasmic-import: 15Q2P76_Urdc/icon
import Icon274Icon from "./icons/PlasmicIcon__Icon274"; // plasmic-import: s-mb3EBJTqB8/icon
import Icon275Icon from "./icons/PlasmicIcon__Icon275"; // plasmic-import: JX2J1clropJv/icon
import Icon277Icon from "./icons/PlasmicIcon__Icon277"; // plasmic-import: rQHnbmXyT27Z/icon
import BellIcon from "../fragment_icons/icons/PlasmicIcon__Bell"; // plasmic-import: rDjUqSUK3eUM/icon

createPlasmicElementProxy;

export type PlasmicMenuIcon__VariantMembers = {
  select: "select";
  icons:
    | "notebook"
    | "target"
    | "chart"
    | "history"
    | "speedometer"
    | "barChart"
    | "questioncircle"
    | "chartbar"
    | "users"
    | "message"
    | "settings"
    | "occasion"
    | "birthday"
    | "love"
    | "alert"
    | "notification";
  unnamedVariant: "unnamedVariant";
  unnamedVariant2: "unnamedVariant2";
};
export type PlasmicMenuIcon__VariantsArgs = {
  select?: SingleBooleanChoiceArg<"select">;
  icons?: SingleChoiceArg<
    | "notebook"
    | "target"
    | "chart"
    | "history"
    | "speedometer"
    | "barChart"
    | "questioncircle"
    | "chartbar"
    | "users"
    | "message"
    | "settings"
    | "occasion"
    | "birthday"
    | "love"
    | "alert"
    | "notification"
  >;
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
  unnamedVariant2?: SingleBooleanChoiceArg<"unnamedVariant2">;
};
type VariantPropType = keyof PlasmicMenuIcon__VariantsArgs;
export const PlasmicMenuIcon__VariantProps = new Array<VariantPropType>(
  "select",
  "icons",
  "unnamedVariant",
  "unnamedVariant2"
);

export type PlasmicMenuIcon__ArgsType = {};
type ArgPropType = keyof PlasmicMenuIcon__ArgsType;
export const PlasmicMenuIcon__ArgProps = new Array<ArgPropType>();

export type PlasmicMenuIcon__OverridesType = {
  root?: Flex__<"svg">;
};

export interface DefaultMenuIconProps {
  select?: SingleBooleanChoiceArg<"select">;
  icons?: SingleChoiceArg<
    | "notebook"
    | "target"
    | "chart"
    | "history"
    | "speedometer"
    | "barChart"
    | "questioncircle"
    | "chartbar"
    | "users"
    | "message"
    | "settings"
    | "occasion"
    | "birthday"
    | "love"
    | "alert"
    | "notification"
  >;
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
  unnamedVariant2?: SingleBooleanChoiceArg<"unnamedVariant2">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenuIcon__RenderFunc(props: {
  variants: PlasmicMenuIcon__VariantsArgs;
  args: PlasmicMenuIcon__ArgsType;
  overrides: PlasmicMenuIcon__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.select
      },
      {
        path: "icons",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.icons
      },
      {
        path: "unnamedVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant
      },
      {
        path: "unnamedVariant2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant2
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <PlasmicIcon__
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      PlasmicIconType={
        hasVariant($state, "icons", "notification") &&
        hasVariant(globalVariants, "screen", "mobile")
          ? BellIcon
          : hasVariant($state, "icons", "notification")
          ? BellIcon
          : hasVariant($state, "icons", "alert")
          ? Icon277Icon
          : hasVariant($state, "icons", "love")
          ? Icon275Icon
          : hasVariant($state, "icons", "birthday")
          ? Icon274Icon
          : hasVariant($state, "icons", "occasion")
          ? Icon273Icon
          : hasVariant($state, "icons", "settings")
          ? Icon270Icon
          : hasVariant($state, "icons", "message")
          ? Icon269Icon
          : hasVariant($state, "icons", "users")
          ? Icon268Icon
          : hasVariant($state, "icons", "chartbar")
          ? Icon266Icon
          : hasVariant($state, "icons", "questioncircle")
          ? Icon265Icon
          : hasVariant($state, "icons", "barChart")
          ? Icon264Icon
          : hasVariant($state, "icons", "speedometer")
          ? Icon263Icon
          : hasVariant($state, "icons", "history")
          ? Icon262Icon
          : hasVariant($state, "icons", "chart")
          ? Icon261Icon
          : hasVariant($state, "icons", "target")
          ? Icon260Icon
          : StickynoteIcon
      }
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        {
          [sty.rooticons_alert]: hasVariant($state, "icons", "alert"),
          [sty.rooticons_barChart]: hasVariant($state, "icons", "barChart"),
          [sty.rooticons_birthday]: hasVariant($state, "icons", "birthday"),
          [sty.rooticons_chart]: hasVariant($state, "icons", "chart"),
          [sty.rooticons_chartbar]: hasVariant($state, "icons", "chartbar"),
          [sty.rooticons_history]: hasVariant($state, "icons", "history"),
          [sty.rooticons_love]: hasVariant($state, "icons", "love"),
          [sty.rooticons_message]: hasVariant($state, "icons", "message"),
          [sty.rooticons_notebook]: hasVariant($state, "icons", "notebook"),
          [sty.rooticons_notification]: hasVariant(
            $state,
            "icons",
            "notification"
          ),
          [sty.rooticons_occasion]: hasVariant($state, "icons", "occasion"),
          [sty.rooticons_questioncircle]: hasVariant(
            $state,
            "icons",
            "questioncircle"
          ),
          [sty.rooticons_settings]: hasVariant($state, "icons", "settings"),
          [sty.rooticons_speedometer]: hasVariant(
            $state,
            "icons",
            "speedometer"
          ),
          [sty.rooticons_target]: hasVariant($state, "icons", "target"),
          [sty.rooticons_users]: hasVariant($state, "icons", "users"),
          [sty.rootselect]: hasVariant($state, "select", "select")
        }
      )}
      role={"img"}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenuIcon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenuIcon__VariantsArgs;
    args?: PlasmicMenuIcon__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMenuIcon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMenuIcon__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenuIcon__ArgProps,
          internalVariantPropNames: PlasmicMenuIcon__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenuIcon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuIcon";
  } else {
    func.displayName = `PlasmicMenuIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuIcon = Object.assign(
  // Top-level PlasmicMenuIcon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicMenuIcon
    internalVariantProps: PlasmicMenuIcon__VariantProps,
    internalArgProps: PlasmicMenuIcon__ArgProps
  }
);

export default PlasmicMenuIcon;
/* prettier-ignore-end */
