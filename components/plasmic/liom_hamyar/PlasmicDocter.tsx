// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: M0USH3JYYo7O

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { DialogTitle } from "@plasmicpkgs/radix-ui";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import LineClomp from "../../LineClomp"; // plasmic-import: XsM8QG4wUKlk/component

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicDocter.module.css"; // plasmic-import: M0USH3JYYo7O/css

import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import EmojiSadSquareSvgrepoComSvgIcon from "./icons/PlasmicIcon__EmojiSadSquareSvgrepoComSvg"; // plasmic-import: r-c9byRGfifF/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: H9d2pdUvXD_1/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: V1QgQzmgWP2T/icon
import Icon77Icon from "./icons/PlasmicIcon__Icon77"; // plasmic-import: wjMNvLG8jaXy/icon
import Icon120Icon from "./icons/PlasmicIcon__Icon120"; // plasmic-import: lWsc7Ggg4B53/icon

createPlasmicElementProxy;

export type PlasmicDocter__VariantMembers = {};
export type PlasmicDocter__VariantsArgs = {};
type VariantPropType = keyof PlasmicDocter__VariantsArgs;
export const PlasmicDocter__VariantProps = new Array<VariantPropType>();

export type PlasmicDocter__ArgsType = {};
type ArgPropType = keyof PlasmicDocter__ArgsType;
export const PlasmicDocter__ArgProps = new Array<ArgPropType>();

export type PlasmicDocter__OverridesType = {
  root?: Flex__<"div">;
  dialog2?: Flex__<typeof Dialog>;
  shop2?: Flex__<typeof ApiRequest>;
  button12?: Flex__<typeof Button>;
  favicon?: Flex__<typeof Embed>;
  apiRequest?: Flex__<typeof ApiRequest>;
  doctorsDetails2?: Flex__<"div">;
  bg3?: Flex__<"div">;
  dialog3?: Flex__<typeof Dialog>;
  shop3?: Flex__<typeof ApiRequest>;
  input4?: Flex__<typeof AntdInput>;
  button13?: Flex__<typeof Button>;
  button14?: Flex__<typeof Button>;
  doctorsDetails?: Flex__<"div">;
  bg2?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  about?: Flex__<"div">;
  drBellamyNicholas?: Flex__<"div">;
  workingTime?: Flex__<"div">;
  monSat0830Am?: Flex__<"div">;
  speciality4?: Flex__<"div">;
  lineClomp2?: Flex__<typeof LineClomp>;
  button?: Flex__<typeof Button>;
  dialog?: Flex__<typeof Dialog>;
  shop?: Flex__<typeof ApiRequest>;
  input3?: Flex__<typeof AntdInput>;
  button10?: Flex__<typeof Button>;
  button11?: Flex__<typeof Button>;
};

export interface DefaultDocterProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDocter__RenderFunc(props: {
  variants: PlasmicDocter__VariantsArgs;
  args: PlasmicDocter__ArgsType;
  overrides: PlasmicDocter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "id",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "getData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("ClinicToken");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "getList",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button10.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button11.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "chats",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "btnloading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.status == "false";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "shop2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "listId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "sublist",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "filter",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.chats.list;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "loadingPage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "lineClomp2.line",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog3.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "shop3.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop3.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop3.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button13.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button14.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Dialog
            data-plasmic-name={"dialog2"}
            data-plasmic-override={overrides.dialog2}
            className={classNames("__wab_instance", sty.dialog2)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialog2",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog2",
              "opendialog"
            ])}
          >
            <ApiRequest
              data-plasmic-name={"shop2"}
              data-plasmic-override={overrides.shop2}
              className={classNames("__wab_instance", sty.shop2)}
              errorDisplay={null}
              loadingDisplay={
                <div className={classNames(projectcss.all, sty.freeBox__yp9FC)}>
                  <Icon115Icon
                    className={classNames(projectcss.all, sty.svg__rOwjZ)}
                    role={"img"}
                  />
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shop2", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shop2", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shop2", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              params={(() => {
                try {
                  return {
                    token: $state.token,
                    id: 14
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return { id: 14 };
                  }
                  throw e;
                }
              })()}
              url={"https://n8n.staas.ir/webhook/help/shop"}
            >
              <div className={classNames(projectcss.all, sty.freeBox__pbocO)}>
                <EmojiSadSquareSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__eMbHb)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uigNe
                  )}
                >
                  {
                    "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0627\u0645\u0648\u0641\u0642"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___01W3Q
                  )}
                >
                  {
                    "\u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0627\u062f \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0627\u0648\u0645\u062f\u0647 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0634\u062f\u0647. \u0644\u0637\u0641\u0627\u064b \u06cc\u0647 \u0628\u0627\u0631 \u062f\u06cc\u06af\u0647 \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 \u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f . "
                  }
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__qeE92)}>
                  <Button
                    data-plasmic-name={"button12"}
                    data-plasmic-override={overrides.button12}
                    className={classNames("__wab_instance", sty.button12)}
                    color={generateStateValueProp($state, [
                      "button12",
                      "color"
                    ])}
                    endIcon={
                      <Icon12Icon
                        className={classNames(projectcss.all, sty.svg__xDKX)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return $state.btnloading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    loading={(() => {
                      try {
                        return $state.btnloading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateBtnloading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["btnloading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateBtnloading"] != null &&
                        typeof $steps["updateBtnloading"] === "object" &&
                        typeof $steps["updateBtnloading"].then === "function"
                      ) {
                        $steps["updateBtnloading"] = await $steps[
                          "updateBtnloading"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/help/shop",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      token: "Bearer " + $state.token,
                                      id: $state.shop2.data.item.id
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["goToPage"] =
                        $steps.invokeGlobalAction?.data.success == true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return $steps.invokeGlobalAction.data.url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["updateBtnloading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["btnloading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateBtnloading2"] != null &&
                        typeof $steps["updateBtnloading2"] === "object" &&
                        typeof $steps["updateBtnloading2"].then === "function"
                      ) {
                        $steps["updateBtnloading2"] = await $steps[
                          "updateBtnloading2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button12",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uHovw
                      )}
                    >
                      {"\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"}
                    </div>
                  </Button>
                </div>
              </div>
            </ApiRequest>
          </Dialog>
          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              hasVariant(globalVariants, "screen", "mobile")
                ? "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
                : "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
            }
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__uT62)}
          >
            <ChevronRightIcon
              className={classNames(projectcss.all, sty.svg__zkh52)}
              onClick={async event => {
                const $steps = {};

                $steps["goToClinic"] = true
                  ? (() => {
                      const actionArgs = { destination: `/clinic` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToClinic"] != null &&
                  typeof $steps["goToClinic"] === "object" &&
                  typeof $steps["goToClinic"].then === "function"
                ) {
                  $steps["goToClinic"] = await $steps["goToClinic"];
                }
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__d0Pv3
              )}
            >
              {"\u06a9\u0644\u06cc\u0646\u06cc\u06a9 \u0644\u06cc\u0648\u0645"}
            </div>
          </Stack__>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            body={(() => {
              try {
                return {
                  token: "Bearer " + localStorage.getItem("ClinicToken"),
                  id: $ctx.query.id
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={null}
            loadingDisplay={
              <Stack__
                as={"div"}
                data-plasmic-name={"doctorsDetails2"}
                data-plasmic-override={overrides.doctorsDetails2}
                hasGap={true}
                className={classNames(projectcss.all, sty.doctorsDetails2)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"bg3"}
                  data-plasmic-override={overrides.bg3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.bg3)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__mqEyx,
                      "shimmer "
                    )}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___784Ql,
                      "shimmer "
                    )}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__qpVn3,
                      "shimmer "
                    )}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__kUtVc,
                    "shimmer "
                  )}
                />

                <section
                  className={classNames(projectcss.all, sty.section___7ZkBe)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__qcGhp,
                      "shimmer "
                    )}
                  />
                </section>
                <Dialog
                  data-plasmic-name={"dialog3"}
                  data-plasmic-override={overrides.dialog3}
                  className={classNames("__wab_instance", sty.dialog3)}
                  onOpendialogChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "dialog3",
                      "opendialog"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  opendialog={generateStateValueProp($state, [
                    "dialog3",
                    "opendialog"
                  ])}
                >
                  <ApiRequest
                    data-plasmic-name={"shop3"}
                    data-plasmic-override={overrides.shop3}
                    className={classNames("__wab_instance", sty.shop3)}
                    errorDisplay={null}
                    loadingDisplay={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kdVeS
                        )}
                      >
                        <Icon115Icon
                          className={classNames(projectcss.all, sty.svg__twQks)}
                          role={"img"}
                        />
                      </div>
                    }
                    method={"GET"}
                    onError={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "shop3",
                        "error"
                      ]).apply(null, eventArgs);
                    }}
                    onLoading={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "shop3",
                        "loading"
                      ]).apply(null, eventArgs);
                    }}
                    onSuccess={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "shop3",
                        "data"
                      ]).apply(null, eventArgs);
                    }}
                    params={(() => {
                      try {
                        return {
                          token: $state.token,
                          id: 14
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return { id: 14 };
                        }
                        throw e;
                      }
                    })()}
                    url={"https://n8n.staas.ir/webhook/help/shop"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iLo6)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wmTtF
                        )}
                        dir={"rtl"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qkFk
                          )}
                        />

                        <DialogTitle
                          className={classNames(
                            "__wab_instance",
                            sty.dialogTitle__vEjq
                          )}
                        >
                          <h5
                            className={classNames(
                              projectcss.all,
                              projectcss.h5,
                              sty.h5__nDoEy
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pmTbo
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return undefined;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Dialog title";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </h5>
                        </DialogTitle>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gf9WT
                        )}
                        dir={"rtl"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oXfcp
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "You can insert dialog body content here in this slot.";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yRwIp
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jfBb
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cMuI7
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___8CzkU
                                )}
                              >
                                {
                                  "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39"
                                }
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xfGzt
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___912SO
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.shop3.data.item.name;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__tzVi2
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dcprP
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.shop3.data.item.fullPrice;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zPFmF
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          $state.shop3.data.item.price +
                                          " تومان"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__maYyr
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dJSkW
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          $state.shop3.data.item.offer + "%"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "1";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__y0KSm
                              )}
                            >
                              {
                                "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                              }
                            </div>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__l34Rx
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__zhooo
                                )}
                              >
                                {(() => {
                                  const child$Props = {
                                    allowClear: false,
                                    autoFocus: false,
                                    bordered: false,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input4
                                    ),
                                    disabled: false,
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input4", "value"],
                                        AntdInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    placeholder:
                                      "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                                    prefix: (
                                      <Icon10Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___18PEg
                                        )}
                                        role={"img"}
                                      />
                                    ),

                                    readOnly: false,
                                    size: "small",
                                    suffix: null,
                                    value: generateStateValueProp($state, [
                                      "input4",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input4.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input4"}
                                      data-plasmic-override={overrides.input4}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__tpDq
                                  )}
                                />
                              </div>
                              <Button
                                data-plasmic-name={"button13"}
                                data-plasmic-override={overrides.button13}
                                className={classNames(
                                  "__wab_instance",
                                  sty.button13
                                )}
                                color={generateStateValueProp($state, [
                                  "button13",
                                  "color"
                                ])}
                                onColorChange={async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "button13",
                                      "color"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__awa4T
                                  )}
                                >
                                  {"\u062a\u0627\u06cc\u06cc\u062f"}
                                </div>
                              </Button>
                            </Stack__>
                            <Button
                              data-plasmic-name={"button14"}
                              data-plasmic-override={overrides.button14}
                              className={classNames(
                                "__wab_instance",
                                sty.button14
                              )}
                              color={generateStateValueProp($state, [
                                "button14",
                                "color"
                              ])}
                              endIcon={
                                <Icon12Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__nUb2L
                                  )}
                                  role={"img"}
                                />
                              }
                              isDisabled={(() => {
                                try {
                                  return $state.btnloading;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                              loading={(() => {
                                try {
                                  return $state.btnloading;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateBtnloading"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["btnloading"]
                                        },
                                        operation: 4
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          !oldValue
                                        );
                                        return !oldValue;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateBtnloading"] != null &&
                                  typeof $steps["updateBtnloading"] ===
                                    "object" &&
                                  typeof $steps["updateBtnloading"].then ===
                                    "function"
                                ) {
                                  $steps["updateBtnloading"] = await $steps[
                                    "updateBtnloading"
                                  ];
                                }

                                $steps["invokeGlobalAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://n8n.staas.ir/webhook/help/shop",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                token: "Bearer " + $state.token,
                                                id: $state.shop3.data.item.id
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }

                                $steps["goToPage"] =
                                  $steps.invokeGlobalAction?.data.success ==
                                  true
                                    ? (() => {
                                        const actionArgs = {
                                          destination: (() => {
                                            try {
                                              return $steps.invokeGlobalAction
                                                .data.url;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()
                                        };
                                        return (({ destination }) => {
                                          if (
                                            typeof destination === "string" &&
                                            destination.startsWith("#")
                                          ) {
                                            document
                                              .getElementById(
                                                destination.substr(1)
                                              )
                                              .scrollIntoView({
                                                behavior: "smooth"
                                              });
                                          } else {
                                            __nextRouter?.push(destination);
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["goToPage"] != null &&
                                  typeof $steps["goToPage"] === "object" &&
                                  typeof $steps["goToPage"].then === "function"
                                ) {
                                  $steps["goToPage"] = await $steps["goToPage"];
                                }

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return localStorage.setItem(
                                            "chatstart",
                                            JSON.stringify({
                                              listID: parseInt($ctx.query.id),
                                              sublist: $state.sublist,
                                              docterID: $state.getList.doctor.id
                                            })
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["updateBtnloading2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["btnloading"]
                                        },
                                        operation: 4
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          !oldValue
                                        );
                                        return !oldValue;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateBtnloading2"] != null &&
                                  typeof $steps["updateBtnloading2"] ===
                                    "object" &&
                                  typeof $steps["updateBtnloading2"].then ===
                                    "function"
                                ) {
                                  $steps["updateBtnloading2"] = await $steps[
                                    "updateBtnloading2"
                                  ];
                                }
                              }}
                              onColorChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button14",
                                    "color"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xiSt7
                                )}
                              >
                                {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                              </div>
                            </Button>
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__u9Ckv
                              )}
                            >
                              {
                                "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                              }
                            </p>
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__mPqGg
                              )}
                            >
                              {
                                "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                              }
                            </p>
                          </Stack__>
                        </div>
                      </Stack__>
                    </div>
                  </ApiRequest>
                </Dialog>
              </Stack__>
            }
            method={"POST"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            url={"https://n8n.staas.ir/webhook/help/getList"}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"doctorsDetails"}
              data-plasmic-override={overrides.doctorsDetails}
              hasGap={true}
              className={classNames(projectcss.all, sty.doctorsDetails)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"bg2"}
                data-plasmic-override={overrides.bg2}
                hasGap={true}
                className={classNames(projectcss.all, sty.bg2)}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"100px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100px"}
                  loading={"lazy"}
                  src={
                    "https://static.vecteezy.com/system/resources/previews/008/957/225/non_2x/female-doctor-avatar-clipart-icon-in-flat-design-vector.jpg"
                  }
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__y8Zj)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mZlKi
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.getList.doctor.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "...";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__prSMn)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return Array.from(
                          { length: $state.getList.doctor.rate },
                          () => $state.getList.doctor.rate
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Icon77Icon
                        className={classNames(projectcss.all, sty.svg___8HA0)}
                        key={currentIndex}
                        role={"img"}
                      />
                    );
                  })}
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___04Xxq)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"about"}
                  data-plasmic-override={overrides.about}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.about)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vlew9
                    )}
                  >
                    {
                      "\u0622\u0634\u0646\u0627\u06cc\u06cc \u0628\u0627 \u067e\u0632\u0634\u06a9"
                    }
                  </div>
                  <div
                    data-plasmic-name={"drBellamyNicholas"}
                    data-plasmic-override={overrides.drBellamyNicholas}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.drBellamyNicholas
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.getList.doctor.description;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "...";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"workingTime"}
                  data-plasmic-override={overrides.workingTime}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.workingTime)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xx8Pp
                    )}
                  >
                    {
                      "\u0645\u06cc\u0627\u0646\u06af\u06cc\u0646 \u0632\u0645\u0627\u0646 \u067e\u0627\u0633\u062e\u06af\u0648\u06cc\u06cc"
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bB2FD)}
                  >
                    <div
                      data-plasmic-name={"monSat0830Am"}
                      data-plasmic-override={overrides.monSat0830Am}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.monSat0830Am
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.getList.doctor.time + " ساعت ";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "...";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <Icon120Icon
                      className={classNames(projectcss.all, sty.svg__m6Vw0)}
                      role={"img"}
                    />
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"speciality4"}
                  data-plasmic-override={overrides.speciality4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.speciality4)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vmMOi
                    )}
                  >
                    {
                      "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 ..."
                    }
                  </div>
                  <LineClomp
                    data-plasmic-name={"lineClomp2"}
                    data-plasmic-override={overrides.lineClomp2}
                    className={classNames("__wab_instance", sty.lineClomp2)}
                    more={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? true
                        : true
                    }
                    numberOfLine={
                      hasVariant(globalVariants, "screen", "mobile") ? 2 : 2
                    }
                    onLineChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "lineClomp2",
                        "line"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__q62Cd
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.getList.list
                                .map(item => item.text)
                                .join("، ");
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 ...";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.getList.list
                                .map(item => item.text)
                                .join("، ");
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "...";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </LineClomp>
                </Stack__>
              </Stack__>
              <section
                className={classNames(projectcss.all, sty.section__uyIjs)}
              >
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={generateStateValueProp($state, ["button", "color"])}
                  loading={undefined}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDialogOpendialog"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog", "opendialog"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogOpendialog"] != null &&
                      typeof $steps["updateDialogOpendialog"] === "object" &&
                      typeof $steps["updateDialogOpendialog"].then ===
                        "function"
                    ) {
                      $steps["updateDialogOpendialog"] = await $steps[
                        "updateDialogOpendialog"
                      ];
                    }

                    $steps["updateSublist"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["sublist"]
                            },
                            operation: 0,
                            value: $state.getList.list.filter(
                              item => item.text == "سایر"
                            )[0].id
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSublist"] != null &&
                      typeof $steps["updateSublist"] === "object" &&
                      typeof $steps["updateSublist"].then === "function"
                    ) {
                      $steps["updateSublist"] = await $steps["updateSublist"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uDchx
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "\u06af\u0641\u062a\u200c\u0648\u06af\u0648\u06cc \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0627 \u067e\u0632\u0634\u06a9"
                      : "\u06af\u0641\u062a\u200c\u0648\u06af\u0648\u06cc \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0627 \u067e\u0632\u0634\u06a9"}
                  </div>
                </Button>
              </section>
              <Dialog
                data-plasmic-name={"dialog"}
                data-plasmic-override={overrides.dialog}
                className={classNames("__wab_instance", sty.dialog)}
                onOpendialogChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "dialog",
                    "opendialog"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                opendialog={generateStateValueProp($state, [
                  "dialog",
                  "opendialog"
                ])}
              >
                <ApiRequest
                  data-plasmic-name={"shop"}
                  data-plasmic-override={overrides.shop}
                  className={classNames("__wab_instance", sty.shop)}
                  errorDisplay={null}
                  loadingDisplay={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gLl4C)}
                    >
                      <Icon115Icon
                        className={classNames(projectcss.all, sty.svg___2WiWo)}
                        role={"img"}
                      />
                    </div>
                  }
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["shop", "error"]).apply(
                      null,
                      eventArgs
                    );
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "shop",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["shop", "data"]).apply(
                      null,
                      eventArgs
                    );
                  }}
                  params={(() => {
                    try {
                      return {
                        token: $state.token,
                        id: 14
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return { id: 14 };
                      }
                      throw e;
                    }
                  })()}
                  url={"https://n8n.staas.ir/webhook/help/shop"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2KkWm)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__iA5Qv)}
                      dir={"rtl"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dc4Ug
                        )}
                      />

                      <DialogTitle
                        className={classNames(
                          "__wab_instance",
                          sty.dialogTitle__j9Za
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            sty.h5__ooO5V
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__q1Uyn
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return undefined;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Dialog title";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </h5>
                      </DialogTitle>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__pWajn)}
                      dir={"rtl"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__i5Gid
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "You can insert dialog body content here in this slot.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jupao
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fh38F
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__grqhr
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gq49K
                              )}
                            >
                              {
                                "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39"
                              }
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fadQx
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jjEks
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.shop.data.item.name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__o9BZa
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ghNpU
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.shop.data.item.fullPrice;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hewf7
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $state.shop.data.item.price + " تومان"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__rvAp
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nI4Pj
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.shop.data.item.offer + "%";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "1";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yD85
                            )}
                          >
                            {
                              "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                            }
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dyZay
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eUmWd
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  allowClear: false,
                                  autoFocus: false,
                                  bordered: false,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input3
                                  ),
                                  disabled: false,
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input3", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  placeholder:
                                    "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                                  prefix: (
                                    <Icon10Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__lFmB
                                      )}
                                      role={"img"}
                                    />
                                  ),

                                  readOnly: false,
                                  size: "small",
                                  suffix: null,
                                  value: generateStateValueProp($state, [
                                    "input3",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input3.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input3"}
                                    data-plasmic-override={overrides.input3}
                                    {...child$Props}
                                  />
                                );
                              })()}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__nRQg
                                )}
                              />
                            </div>
                            <Button
                              data-plasmic-name={"button10"}
                              data-plasmic-override={overrides.button10}
                              className={classNames(
                                "__wab_instance",
                                sty.button10
                              )}
                              color={generateStateValueProp($state, [
                                "button10",
                                "color"
                              ])}
                              onColorChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button10",
                                    "color"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__eVlM
                                )}
                              >
                                {"\u062a\u0627\u06cc\u06cc\u062f"}
                              </div>
                            </Button>
                          </Stack__>
                          <Button
                            data-plasmic-name={"button11"}
                            data-plasmic-override={overrides.button11}
                            className={classNames(
                              "__wab_instance",
                              sty.button11
                            )}
                            color={generateStateValueProp($state, [
                              "button11",
                              "color"
                            ])}
                            endIcon={
                              <Icon12Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___2Dijx
                                )}
                                role={"img"}
                              />
                            }
                            isDisabled={(() => {
                              try {
                                return $state.btnloading;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            loading={(() => {
                              try {
                                return $state.btnloading;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateBtnloading"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["btnloading"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateBtnloading"] != null &&
                                typeof $steps["updateBtnloading"] ===
                                  "object" &&
                                typeof $steps["updateBtnloading"].then ===
                                  "function"
                              ) {
                                $steps["updateBtnloading"] = await $steps[
                                  "updateBtnloading"
                                ];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        "https://n8n.staas.ir/webhook/help/shop",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              token: "Bearer " + $state.token,
                                              id: $state.shop.data.item.id
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }

                              $steps["goToPage"] =
                                $steps.invokeGlobalAction?.data.success == true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: (() => {
                                          try {
                                            return $steps.invokeGlobalAction
                                              .data.url;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["goToPage"] != null &&
                                typeof $steps["goToPage"] === "object" &&
                                typeof $steps["goToPage"].then === "function"
                              ) {
                                $steps["goToPage"] = await $steps["goToPage"];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return localStorage.setItem(
                                          "chatstart",
                                          JSON.stringify({
                                            listID: parseInt($ctx.query.id),
                                            sublist: $state.sublist,
                                            docterID: $state.getList.doctor.id
                                          })
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["updateBtnloading2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["btnloading"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateBtnloading2"] != null &&
                                typeof $steps["updateBtnloading2"] ===
                                  "object" &&
                                typeof $steps["updateBtnloading2"].then ===
                                  "function"
                              ) {
                                $steps["updateBtnloading2"] = await $steps[
                                  "updateBtnloading2"
                                ];
                              }
                            }}
                            onColorChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button11",
                                  "color"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yh6Tw
                              )}
                            >
                              {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                            </div>
                          </Button>
                          <p
                            className={classNames(
                              projectcss.all,
                              projectcss.p,
                              projectcss.__wab_text,
                              sty.p__ll111
                            )}
                          >
                            {
                              "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                            }
                          </p>
                          <p
                            className={classNames(
                              projectcss.all,
                              projectcss.p,
                              projectcss.__wab_text,
                              sty.p___99EVs
                            )}
                          >
                            {
                              "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                            }
                          </p>
                        </Stack__>
                      </div>
                    </Stack__>
                  </div>
                </ApiRequest>
              </Dialog>
            </Stack__>
          </ApiRequest>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dialog2",
    "shop2",
    "button12",
    "favicon",
    "apiRequest",
    "doctorsDetails2",
    "bg3",
    "dialog3",
    "shop3",
    "input4",
    "button13",
    "button14",
    "doctorsDetails",
    "bg2",
    "img",
    "about",
    "drBellamyNicholas",
    "workingTime",
    "monSat0830Am",
    "speciality4",
    "lineClomp2",
    "button",
    "dialog",
    "shop",
    "input3",
    "button10",
    "button11"
  ],
  dialog2: ["dialog2", "shop2", "button12"],
  shop2: ["shop2", "button12"],
  button12: ["button12"],
  favicon: ["favicon"],
  apiRequest: [
    "apiRequest",
    "doctorsDetails2",
    "bg3",
    "dialog3",
    "shop3",
    "input4",
    "button13",
    "button14",
    "doctorsDetails",
    "bg2",
    "img",
    "about",
    "drBellamyNicholas",
    "workingTime",
    "monSat0830Am",
    "speciality4",
    "lineClomp2",
    "button",
    "dialog",
    "shop",
    "input3",
    "button10",
    "button11"
  ],
  doctorsDetails2: [
    "doctorsDetails2",
    "bg3",
    "dialog3",
    "shop3",
    "input4",
    "button13",
    "button14"
  ],
  bg3: ["bg3"],
  dialog3: ["dialog3", "shop3", "input4", "button13", "button14"],
  shop3: ["shop3", "input4", "button13", "button14"],
  input4: ["input4"],
  button13: ["button13"],
  button14: ["button14"],
  doctorsDetails: [
    "doctorsDetails",
    "bg2",
    "img",
    "about",
    "drBellamyNicholas",
    "workingTime",
    "monSat0830Am",
    "speciality4",
    "lineClomp2",
    "button",
    "dialog",
    "shop",
    "input3",
    "button10",
    "button11"
  ],
  bg2: ["bg2", "img"],
  img: ["img"],
  about: ["about", "drBellamyNicholas"],
  drBellamyNicholas: ["drBellamyNicholas"],
  workingTime: ["workingTime", "monSat0830Am"],
  monSat0830Am: ["monSat0830Am"],
  speciality4: ["speciality4", "lineClomp2"],
  lineClomp2: ["lineClomp2"],
  button: ["button"],
  dialog: ["dialog", "shop", "input3", "button10", "button11"],
  shop: ["shop", "input3", "button10", "button11"],
  input3: ["input3"],
  button10: ["button10"],
  button11: ["button11"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dialog2: typeof Dialog;
  shop2: typeof ApiRequest;
  button12: typeof Button;
  favicon: typeof Embed;
  apiRequest: typeof ApiRequest;
  doctorsDetails2: "div";
  bg3: "div";
  dialog3: typeof Dialog;
  shop3: typeof ApiRequest;
  input4: typeof AntdInput;
  button13: typeof Button;
  button14: typeof Button;
  doctorsDetails: "div";
  bg2: "div";
  img: typeof PlasmicImg__;
  about: "div";
  drBellamyNicholas: "div";
  workingTime: "div";
  monSat0830Am: "div";
  speciality4: "div";
  lineClomp2: typeof LineClomp;
  button: typeof Button;
  dialog: typeof Dialog;
  shop: typeof ApiRequest;
  input3: typeof AntdInput;
  button10: typeof Button;
  button11: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDocter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDocter__VariantsArgs;
    args?: PlasmicDocter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDocter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDocter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDocter__ArgProps,
          internalVariantPropNames: PlasmicDocter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDocter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDocter";
  } else {
    func.displayName = `PlasmicDocter.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicDocter = Object.assign(
  // Top-level PlasmicDocter renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    dialog2: makeNodeComponent("dialog2"),
    shop2: makeNodeComponent("shop2"),
    button12: makeNodeComponent("button12"),
    favicon: makeNodeComponent("favicon"),
    apiRequest: makeNodeComponent("apiRequest"),
    doctorsDetails2: makeNodeComponent("doctorsDetails2"),
    bg3: makeNodeComponent("bg3"),
    dialog3: makeNodeComponent("dialog3"),
    shop3: makeNodeComponent("shop3"),
    input4: makeNodeComponent("input4"),
    button13: makeNodeComponent("button13"),
    button14: makeNodeComponent("button14"),
    doctorsDetails: makeNodeComponent("doctorsDetails"),
    bg2: makeNodeComponent("bg2"),
    img: makeNodeComponent("img"),
    about: makeNodeComponent("about"),
    drBellamyNicholas: makeNodeComponent("drBellamyNicholas"),
    workingTime: makeNodeComponent("workingTime"),
    monSat0830Am: makeNodeComponent("monSat0830Am"),
    speciality4: makeNodeComponent("speciality4"),
    lineClomp2: makeNodeComponent("lineClomp2"),
    button: makeNodeComponent("button"),
    dialog: makeNodeComponent("dialog"),
    shop: makeNodeComponent("shop"),
    input3: makeNodeComponent("input3"),
    button10: makeNodeComponent("button10"),
    button11: makeNodeComponent("button11"),

    // Metadata about props expected for PlasmicDocter
    internalVariantProps: PlasmicDocter__VariantProps,
    internalArgProps: PlasmicDocter__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDocter;
/* prettier-ignore-end */
