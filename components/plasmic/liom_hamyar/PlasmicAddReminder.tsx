/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: I76qJ2lGMM3H

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import ReminderSetting from "../../ReminderSetting"; // plasmic-import: VZcPBQBUFNbT/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicAddReminder.module.css"; // plasmic-import: I76qJ2lGMM3H/css

import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicAddReminder__VariantMembers = {};
export type PlasmicAddReminder__VariantsArgs = {};
type VariantPropType = keyof PlasmicAddReminder__VariantsArgs;
export const PlasmicAddReminder__VariantProps = new Array<VariantPropType>();

export type PlasmicAddReminder__ArgsType = {};
type ArgPropType = keyof PlasmicAddReminder__ArgsType;
export const PlasmicAddReminder__ArgProps = new Array<ArgPropType>();

export type PlasmicAddReminder__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  freeBox?: Flex__<"div">;
  svg?: Flex__<"svg">;
  reminderSetting?: Flex__<typeof ReminderSetting>;
};

export interface DefaultAddReminderProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAddReminder__RenderFunc(props: {
  variants: PlasmicAddReminder__VariantsArgs;
  args: PlasmicAddReminder__ArgsType;
  overrides: PlasmicAddReminder__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "reminderSetting.refresh",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "reminderSetting.tel",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderSetting.sms",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderSetting.refreshTime",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "reminderSetting.dialogOpendialog3",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderSetting.reminderCategory2Data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          category: [
            {
              id: 1,
              name: "love",
              name_fa: "\u0639\u0627\u0634\u0642\u0627\u0646\u0647",
              description:
                "\u0645\u0646\u0627\u0633\u0628\u062a\u200c\u0647\u0627 \u0648 \u06cc\u0627\u062f\u0622\u0648\u0631\u0647\u0627\u06cc \u0627\u062d\u0633\u0627\u0633\u06cc \u0648 \u0631\u0645\u0627\u0646\u062a\u06cc\u06a9.",
              color: "#E91E63"
            },
            {
              id: 2,
              name: "birthday",
              name_fa: "\u062a\u0648\u0644\u062f",
              description:
                "\u06cc\u0627\u062f\u0622\u0648\u0631 \u062a\u0648\u0644\u062f \u0639\u0632\u06cc\u0632\u0627\u0646 \u0648 \u062f\u0648\u0633\u062a\u0627\u0646.",
              color: "#FFC107"
            },
            {
              id: 3,
              name: "health",
              name_fa: "\u0633\u0644\u0627\u0645\u062a",
              description:
                "\u06cc\u0627\u062f\u0622\u0648\u0631\u0647\u0627\u06cc \u0645\u0631\u062a\u0628\u0637 \u0628\u0627 \u0633\u0644\u0627\u0645\u062a \u062c\u0633\u0645 \u0648 \u0631\u0648\u0627\u0646\u060c \u0645\u0627\u0646\u0646\u062f \u0686\u06a9\u0627\u067e\u060c \u062f\u0627\u0631\u0648 \u0648 \u0648\u0631\u0632\u0634.",
              color: "#4CAF50"
            },
            {
              id: 4,
              name: "international_days",
              name_fa:
                "\u0631\u0648\u0632\u0647\u0627\u06cc \u062c\u0647\u0627\u0646\u06cc",
              description:
                "\u06cc\u0627\u062f\u0622\u0648\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u062c\u0647\u0627\u0646\u06cc \u0645\u0647\u0645 \u0645\u0627\u0646\u0646\u062f \u0631\u0648\u0632 \u0632\u0645\u06cc\u0646\u060c \u0631\u0648\u0632 \u0632\u0646 \u0648 ...",
              color: "#2196F3"
            },
            {
              id: 5,
              name: "religious_days",
              name_fa:
                "\u0631\u0648\u0632\u0647\u0627\u06cc \u0645\u0630\u0647\u0628\u06cc",
              description:
                "\u06cc\u0627\u062f\u0622\u0648\u0631 \u0645\u0646\u0627\u0633\u0628\u062a\u200c\u0647\u0627 \u0648 \u062a\u0639\u0637\u06cc\u0644\u0627\u062a \u0645\u0630\u0647\u0628\u06cc \u0645\u0627\u0646\u0646\u062f \u0639\u06cc\u062f \u0642\u0631\u0628\u0627\u0646\u060c \u0631\u0645\u0636\u0627\u0646 \u0648 ...",
              color: "#9C27B0"
            },
            {
              id: 6,
              name: "national_days",
              name_fa:
                "\u0631\u0648\u0632\u0647\u0627\u06cc \u0645\u0644\u06cc",
              description:
                "\u06cc\u0627\u062f\u0622\u0648\u0631 \u0645\u0646\u0627\u0633\u0628\u062a\u200c\u0647\u0627 \u0648 \u0631\u0648\u0632\u0647\u0627\u06cc \u0645\u0644\u06cc \u0645\u0627\u0646\u0646\u062f \u0631\u0648\u0632 \u0645\u0639\u0644\u0645\u060c \u067e\u062f\u0631\u060c \u067e\u0631\u0633\u062a\u0627\u0631 \u0648 \u062f\u0647\u0647 \u0641\u062c\u0631",
              color: "#FF7043"
            }
          ],
          type: [
            {
              category_id: 1,
              category_name: "love",
              category_name_fa: "\u0639\u0627\u0634\u0642\u0627\u0646\u0647",
              items: [
                {
                  id: 1,
                  category_id: 1,
                  type: "wedding_anniversary",
                  schedule_type: "everyYear",
                  type_fa:
                    "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
                  description:
                    "\u06cc\u0627\u062f\u0622\u0648\u0631 \u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c \u0628\u0627 \u0647\u0645\u0633\u0631.",
                  date: null,
                  text: null,
                  tag: null,
                  color: "#E91E63",
                  icon: "wedding_anniversary"
                },
                {
                  id: 2,
                  category_id: 1,
                  type: "relationship_anniversary",
                  schedule_type: "everyYear",
                  type_fa:
                    "\u0633\u0627\u0644\u06af\u0631\u062f \u0622\u0634\u0646\u0627\u06cc\u06cc",
                  description:
                    "\u06cc\u0627\u062f\u0622\u0648\u0631 \u0633\u0627\u0644\u06af\u0631\u062f \u0622\u0634\u0646\u0627\u06cc\u06cc \u06cc\u0627 \u0634\u0631\u0648\u0639 \u0631\u0627\u0628\u0637\u0647.",
                  date: null,
                  text: null,
                  tag: null,
                  color: "#EC407A",
                  icon: "relationship_anniversary"
                }
              ]
            },
            {
              category_id: 2,
              category_name: "birthday",
              category_name_fa: "\u062a\u0648\u0644\u062f",
              items: [
                {
                  id: 3,
                  category_id: 2,
                  type: "spouse_birthday",
                  schedule_type: "everyYear",
                  type_fa: "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
                  description:
                    "\u06cc\u0627\u062f\u0622\u0648\u0631 \u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631.",
                  date: null,
                  text: null,
                  tag: null,
                  color: "#FFB300",
                  icon: "spouse_birthday"
                },
                {
                  id: 4,
                  category_id: 2,
                  type: "mother_birthday",
                  schedule_type: "everyYear",
                  type_fa: "\u062a\u0648\u0644\u062f \u0645\u0627\u062f\u0631",
                  description:
                    "\u06cc\u0627\u062f\u0622\u0648\u0631 \u062a\u0648\u0644\u062f \u0645\u0627\u062f\u0631.",
                  date: null,
                  text: null,
                  tag: null,
                  color: "#FFC107",
                  icon: "mother_birthday"
                },
                {
                  id: 5,
                  category_id: 2,
                  type: "father_birthday",
                  schedule_type: "everyYear",
                  type_fa: "\u062a\u0648\u0644\u062f \u067e\u062f\u0631",
                  description:
                    "\u06cc\u0627\u062f\u0622\u0648\u0631 \u062a\u0648\u0644\u062f \u067e\u062f\u0631.",
                  date: null,
                  text: null,
                  tag: null,
                  color: "#FFD54F",
                  icon: "father_birthday"
                },
                {
                  id: 6,
                  category_id: 2,
                  type: "child_birthday",
                  schedule_type: "everyYear",
                  type_fa:
                    "\u062a\u0648\u0644\u062f \u0641\u0631\u0632\u0646\u062f",
                  description:
                    "\u06cc\u0627\u062f\u0622\u0648\u0631 \u062a\u0648\u0644\u062f \u0641\u0631\u0632\u0646\u062f.",
                  date: null,
                  text: null,
                  tag: null,
                  color: "#FFE082",
                  icon: "child_birthday"
                }
              ]
            },
            {
              category_id: 3,
              category_name: "health",
              category_name_fa: "\u0633\u0644\u0627\u0645\u062a",
              items: [
                {
                  id: 8,
                  category_id: 3,
                  type: "doctor_visit",
                  schedule_type: "everyDay",
                  type_fa:
                    "\u0648\u06cc\u0632\u06cc\u062a \u067e\u0632\u0634\u06a9",
                  description:
                    "\u06cc\u0627\u062f\u0622\u0648\u0631 \u0646\u0648\u0628\u062a \u0645\u0631\u0627\u062c\u0639\u0647 \u0628\u0647 \u067e\u0632\u0634\u06a9.",
                  date: null,
                  text: null,
                  tag: null,
                  color: "#4CAF50",
                  icon: "doctor_visit"
                },
                {
                  id: 9,
                  category_id: 3,
                  type: "medicine_time",
                  schedule_type: "everyDay",
                  type_fa: "\u0645\u0635\u0631\u0641 \u062f\u0627\u0631\u0648",
                  description:
                    "\u06cc\u0627\u062f\u0622\u0648\u0631 \u0632\u0645\u0627\u0646 \u0645\u0635\u0631\u0641 \u062f\u0627\u0631\u0648.",
                  date: null,
                  text: null,
                  tag: "repead",
                  color: "#66BB6A",
                  icon: "medicine_time"
                },
                {
                  id: 10,
                  category_id: 3,
                  type: "checkup",
                  schedule_type: "everyDay",
                  type_fa:
                    "\u0686\u06a9\u0627\u067e \u062f\u0648\u0631\u0647\u200c\u0627\u06cc",
                  description:
                    "\u06cc\u0627\u062f\u0622\u0648\u0631 \u0622\u0632\u0645\u0627\u06cc\u0634\u200c\u0647\u0627 \u0648 \u0645\u0639\u0627\u06cc\u0646\u0627\u062a \u0645\u0646\u0638\u0645.",
                  date: null,
                  text: null,
                  tag: null,
                  color: "#81C784",
                  icon: "checkup"
                },
                {
                  id: 18,
                  category_id: 3,
                  type: "Water_time",
                  schedule_type: "everyDay",
                  type_fa: "\u0646\u0648\u0634\u06cc\u062f\u0646 \u0622\u0628",
                  description:
                    "\u06cc\u0627\u062f\u0622\u0648\u0631 \u0632\u0645\u0627\u0646 \u0646\u0648\u0634\u06cc\u062f\u0646 \u0622\u0628.",
                  date: null,
                  text: null,
                  tag: null,
                  color: "#66BB6A",
                  icon: "Water"
                }
              ]
            },
            {
              category_id: 4,
              category_name: "international_days",
              category_name_fa:
                "\u0631\u0648\u0632\u0647\u0627\u06cc \u062c\u0647\u0627\u0646\u06cc",
              items: [
                {
                  id: 12,
                  category_id: 4,
                  type: "valentine_day",
                  schedule_type: "everyYear",
                  type_fa:
                    "\u0631\u0648\u0632 \u0648\u0644\u0646\u062a\u0627\u06cc\u0646",
                  description:
                    "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u0639\u0634\u0642 \u0648 \u0645\u062d\u0628\u062a.",
                  date: "0000-02-14",
                  text: "occasion",
                  tag: null,
                  color: "#F06292",
                  icon: "valentine_day"
                },
                {
                  id: 13,
                  category_id: 4,
                  type: "womens_day",
                  schedule_type: "everyYear",
                  type_fa:
                    "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631",
                  description:
                    "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u0632\u0646 \u0648 \u062d\u0642\u0648\u0642 \u0628\u0631\u0627\u0628\u0631.",
                  date: "0000-04-19",
                  text: "occasion",
                  tag: null,
                  color: "#42A5F5",
                  icon: "womens_day"
                },
                {
                  id: 14,
                  category_id: 4,
                  type: "mothers_day",
                  schedule_type: "everyYear",
                  type_fa:
                    "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u0632\u0646",
                  description:
                    "\u0631\u0648\u0632 \u0642\u062f\u0631\u062f\u0627\u0646\u06cc \u0627\u0632 \u0645\u0627\u062f\u0631\u0627\u0646 \u062f\u0631 \u0633\u0631\u0627\u0633\u0631 \u062c\u0647\u0627\u0646.",
                  date: "0000-03-08",
                  text: "occasion",
                  tag: null,
                  color: "#64B5F6",
                  icon: "mothers_day"
                }
              ]
            },
            {
              category_id: 5,
              category_name: "religious_days",
              category_name_fa:
                "\u0631\u0648\u0632\u0647\u0627\u06cc \u0645\u0630\u0647\u0628\u06cc",
              items: [
                {
                  id: 16,
                  category_id: 5,
                  type: "religious_womens_day",
                  schedule_type: "everyYear",
                  type_fa: "\u0631\u0648\u0632 \u0632\u0646 ",
                  description:
                    "\u0631\u0648\u0632 \u0628\u0632\u0631\u06af\u062f\u0627\u0634\u062a \u0645\u0642\u0627\u0645 \u0632\u0646 \u062f\u0631 \u0627\u0633\u0644\u0627\u0645.",
                  date: "0000-12-11",
                  text: "occasion",
                  tag: null,
                  color: "#CE93D8",
                  icon: "womens_day"
                },
                {
                  id: 19,
                  category_id: 5,
                  type: "religious_womens_day",
                  schedule_type: "everyYear",
                  type_fa: "\u0631\u0648\u0632 \u062f\u062e\u062a\u0631 ",
                  description:
                    "\u0631\u0648\u0632 \u0628\u0632\u0631\u06af\u062f\u0627\u0634\u062a \u0645\u0642\u0627\u0645 \u062f\u062e\u062a\u0631 \u062f\u0631 \u0627\u0633\u0644\u0627\u0645.",
                  date: "0000-04-19",
                  text: "occasion",
                  tag: null,
                  color: "#CE93D8",
                  icon: "womens_day"
                }
              ]
            },
            {
              category_id: 6,
              category_name: "national_days",
              category_name_fa:
                "\u0631\u0648\u0632\u0647\u0627\u06cc \u0645\u0644\u06cc",
              items: [
                {
                  id: 17,
                  category_id: 6,
                  type: "sepandarmazgan",
                  schedule_type: "everyYear",
                  type_fa:
                    "\u0631\u0648\u0632 \u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646",
                  description:
                    "\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc\u060c \u062c\u0634\u0646 \u0645\u0647\u0631 \u0648 \u0645\u062d\u0628\u062a \u062f\u0631 \u0641\u0631\u0647\u0646\u06af \u067e\u0627\u0631\u0633\u06cc.",
                  date: "0000-02-18",
                  text: "occasion",
                  tag: null,
                  color: "#F48FB1",
                  icon: "sepandarmazgan"
                }
              ]
            }
          ]
        })
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "reminderSetting.pageSelect",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            config={(() => {
              try {
                return {
                  headers: {
                    Authorization: $ctx.query.token
                  }
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            errorDisplay={null}
            loadingDisplay={
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <Icon115Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );

              (async data => {
                const $steps = {};

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = { args: [100] };
                      return $globalActions["Fragment.wait"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] =
                    await $steps["invokeGlobalAction"];
                }

                $steps["runCode"] = !$state.apiRequest.data.hasReminder
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.reminderSetting.pageSelect =
                            $state.apiRequest.data.type);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["runCode3"] = !$state.apiRequest.data.hasReminder
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return window.document
                            .getElementById("pageSelect")
                            .click();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode3"] != null &&
                  typeof $steps["runCode3"] === "object" &&
                  typeof $steps["runCode3"].then === "function"
                ) {
                  $steps["runCode3"] = await $steps["runCode3"];
                }

                $steps["runCode2"] = $state.apiRequest.data.hasReminder
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.reminderSetting.pageSelect =
                            $state.apiRequest.data.reminders[0].json);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode2"] != null &&
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }

                $steps["runCode4"] = $state.apiRequest.data.hasReminder
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return window.document
                            .getElementById("pageSelect1")
                            .click();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode4"] != null &&
                  typeof $steps["runCode4"] === "object" &&
                  typeof $steps["runCode4"].then === "function"
                ) {
                  $steps["runCode4"] = await $steps["runCode4"];
                }
              }).apply(null, eventArgs);
            }}
            params={(() => {
              try {
                return {
                  type: $ctx.query.type
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            shouldFetch={true}
            url={"https://n8n.staas.ir/webhook/reminder/page/data"}
          >
            {(() => {
              try {
                return !$state.apiRequest.loading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <ReminderSetting
                data-plasmic-name={"reminderSetting"}
                data-plasmic-override={overrides.reminderSetting}
                add={true}
                className={classNames("__wab_instance", sty.reminderSetting)}
                data={(() => {
                  try {
                    return (
                      $state.apiRequest.data.reminders.map(i => i.json) || []
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                dialogOpendialog3={generateStateValueProp($state, [
                  "reminderSetting",
                  "dialogOpendialog3"
                ])}
                manId={(() => {
                  try {
                    return $state.apiRequest?.data?.user?.id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onDialogOpendialog3Change={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reminderSetting",
                    "dialogOpendialog3"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onPageSelectChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reminderSetting",
                    "pageSelect"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onRefreshChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reminderSetting",
                    "refresh"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onRefreshTimeChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reminderSetting",
                    "refreshTime"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onReminderCategory2DataChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reminderSetting",
                    "reminderCategory2Data"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onSmsChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reminderSetting",
                    "sms"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onTelChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reminderSetting",
                    "tel"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                pageSelect={generateStateValueProp($state, [
                  "reminderSetting",
                  "pageSelect"
                ])}
                phoneNumber={(() => {
                  try {
                    return $state.apiRequest?.data?.user?.mobile;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                refresh={generateStateValueProp($state, [
                  "reminderSetting",
                  "refresh"
                ])}
                refreshTime={generateStateValueProp($state, [
                  "reminderSetting",
                  "refreshTime"
                ])}
                reminderCategory2Data={generateStateValueProp($state, [
                  "reminderSetting",
                  "reminderCategory2Data"
                ])}
                sms={generateStateValueProp($state, ["reminderSetting", "sms"])}
                tel={generateStateValueProp($state, ["reminderSetting", "tel"])}
                telegramId={(() => {
                  try {
                    return $state.apiRequest?.data?.user?.telegramId;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                telegramOn={(() => {
                  try {
                    return $state.apiRequest?.data?.user?.telegramId
                      ? true
                      : false;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                token={(() => {
                  try {
                    return $ctx.query.token;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            ) : null}
          </ApiRequest>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "apiRequest", "freeBox", "svg", "reminderSetting"],
  apiRequest: ["apiRequest", "freeBox", "svg", "reminderSetting"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"],
  reminderSetting: ["reminderSetting"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  freeBox: "div";
  svg: "svg";
  reminderSetting: typeof ReminderSetting;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddReminder__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAddReminder__VariantsArgs;
    args?: PlasmicAddReminder__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicAddReminder__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicAddReminder__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAddReminder__ArgProps,
          internalVariantPropNames: PlasmicAddReminder__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAddReminder__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAddReminder";
  } else {
    func.displayName = `PlasmicAddReminder.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicAddReminder = Object.assign(
  // Top-level PlasmicAddReminder renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    reminderSetting: makeNodeComponent("reminderSetting"),

    // Metadata about props expected for PlasmicAddReminder
    internalVariantProps: PlasmicAddReminder__VariantProps,
    internalArgProps: PlasmicAddReminder__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAddReminder;
/* prettier-ignore-end */
