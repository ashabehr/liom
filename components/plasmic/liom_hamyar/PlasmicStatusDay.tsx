// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: PI7WftNbPWTI

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import RadioGrop from "../../RadioGrop"; // plasmic-import: mcNKMbL_6N75/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import TabWeek2 from "../../TabWeek2"; // plasmic-import: -tuOknPDFuNb/component
import VigetLiom2 from "../../VigetLiom2"; // plasmic-import: 38exw8bGQf_v/component
import Choices from "../../Choices"; // plasmic-import: kqjrVA4cMqR_/component
import Water from "../../Water"; // plasmic-import: kgxwt1SHeMmu/component
import Checkbox from "../../Checkbox"; // plasmic-import: IwXl9xUH-ZMp/component
import { TextArea } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as TextArea_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import { Pickers } from "@/components/Pickers"; // plasmic-import: htE-oGSeNx82/codeComponent
import Medisene from "../../Medisene"; // plasmic-import: S8dzLP5nduJ8/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicStatusDay.module.css"; // plasmic-import: PI7WftNbPWTI/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: rjflJ2D4OoXB/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon157Icon from "./icons/PlasmicIcon__Icon157"; // plasmic-import: pYMHtMPOTSpB/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: Wm-tjDMQJVfn/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: DnjmD0szshuz/icon
import Icon161Icon from "./icons/PlasmicIcon__Icon161"; // plasmic-import: RDv-pcdtwLHX/icon
import Icon164Icon from "./icons/PlasmicIcon__Icon164"; // plasmic-import: syByyVprhgER/icon
import Icon165Icon from "./icons/PlasmicIcon__Icon165"; // plasmic-import: BbakN6wLCJed/icon
import Icon169Icon from "./icons/PlasmicIcon__Icon169"; // plasmic-import: bUQKEz-4nD1u/icon
import Icon26Icon from "./icons/PlasmicIcon__Icon26"; // plasmic-import: MKSedampsAFw/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicStatusDay__VariantMembers = {};
export type PlasmicStatusDay__VariantsArgs = {};
type VariantPropType = keyof PlasmicStatusDay__VariantsArgs;
export const PlasmicStatusDay__VariantProps = new Array<VariantPropType>();

export type PlasmicStatusDay__ArgsType = {};
type ArgPropType = keyof PlasmicStatusDay__ArgsType;
export const PlasmicStatusDay__ArgProps = new Array<ArgPropType>();

export type PlasmicStatusDay__OverridesType = {
  root?: Flex__<"div">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  number2?: Flex__<typeof AntdModal>;
  textInput?: Flex__<typeof TextInput>;
  antdInput?: Flex__<typeof Input>;
  button2?: Flex__<typeof Button>;
  name2?: Flex__<typeof AntdModal>;
  textInput2?: Flex__<typeof TextInput>;
  antdInput2?: Flex__<typeof Input>;
  radioGrop?: Flex__<typeof RadioGrop>;
  button3?: Flex__<typeof Button>;
  sms?: Flex__<typeof AntdModal>;
  button4?: Flex__<typeof Button>;
  button5?: Flex__<typeof Button>;
  remove?: Flex__<typeof AntdModal>;
  removeBtn?: Flex__<typeof Button>;
  button9?: Flex__<typeof Button>;
  getSign?: Flex__<typeof ApiRequest>;
  button14?: Flex__<typeof Button>;
  tabWeek2?: Flex__<typeof TabWeek2>;
  button12?: Flex__<typeof Button>;
  selectionBox?: Flex__<"div">;
  color?: Flex__<typeof Choices>;
  selectionBox2?: Flex__<"div">;
  intensity?: Flex__<typeof Choices>;
  selectionBox3?: Flex__<"div">;
  water?: Flex__<typeof Water>;
  selectionBox4?: Flex__<"div">;
  discharge?: Flex__<typeof Choices>;
  selectionBox5?: Flex__<"div">;
  status?: Flex__<typeof Choices>;
  selectionBox6?: Flex__<"div">;
  selectionBox7?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  selectionBox8?: Flex__<"div">;
  sex?: Flex__<typeof Choices>;
  selectionBox9?: Flex__<"div">;
  textInput7?: Flex__<typeof TextInput>;
  memory?: Flex__<typeof TextArea>;
  button?: Flex__<typeof Button>;
  dialog?: Flex__<typeof Dialog>;
  pickers?: Flex__<typeof Pickers>;
  button6?: Flex__<typeof Button>;
  number3?: Flex__<typeof Dialog>;
  pickers2?: Flex__<typeof Pickers>;
  button11?: Flex__<typeof Button>;
  medicine?: Flex__<typeof Dialog>;
  textInput3?: Flex__<typeof TextInput>;
  inputnameMedicine?: Flex__<typeof Input>;
  medisene?: Flex__<typeof Medisene>;
  textinput?: Flex__<typeof TextInput>;
  nameMedicine?: Flex__<typeof Input>;
  reveal?: Flex__<typeof Reveal>;
  button8?: Flex__<typeof Button>;
  textInput4?: Flex__<typeof TextInput>;
  numberOfMedicin?: Flex__<typeof Input>;
  button7?: Flex__<typeof Button>;
  button10?: Flex__<typeof Button>;
  todoDialog?: Flex__<typeof Dialog>;
  textInput6?: Flex__<typeof TextInput>;
  jobinput?: Flex__<typeof Input>;
  button13?: Flex__<typeof Button>;
};

export interface DefaultStatusDayProps {}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStatusDay__RenderFunc(props: {
  variants: PlasmicStatusDay__VariantsArgs;
  args: PlasmicStatusDay__ArgsType;
  overrides: PlasmicStatusDay__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "number2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $ctx.query.userId ||
                new URLSearchParams(window.location.search).get("userId")
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "relation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "hamyar"
      },
      {
        path: "masseg",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "errror",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "sms.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "remove.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "removeBtn.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? "whiteYellowLine"
            : "whiteYellowLine"
      },
      {
        path: "button9.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "getSign.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getSign.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getSign.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popoverOpen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [false, false]
      },
      {
        path: "removeItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loadingBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "v",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "color.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.inDay.color || [];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signs",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          color: [
            {
              value: "pink",
              meaning: "\u0635\u0648\u0631\u062a\u06cc",
              icon: "<svg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M10.4742 0.397671C10.1735 0.134044 9.72815 0.134044 9.43127 0.397671C8.65784 1.08071 1.90002 5.58713 1.90002 11.5379C1.90002 16.0755 5.51331 19.7703 9.95081 19.7703C14.3883 19.7703 18.0016 16.0755 18.0016 11.5379C18.0016 5.58713 11.2438 1.08071 10.4742 0.397671Z' fill='#FFE5F5'/>\r\n</svg>\r\n"
            },
            {
              value: "lightRed",
              meaning: "\u0642\u0631\u0645\u0632 \u0631\u0648\u0634\u0646",
              icon: "<svg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M10.4742 0.397671C10.1735 0.134044 9.72815 0.134044 9.43127 0.397671C8.65784 1.08071 1.90002 5.58713 1.90002 11.5379C1.90002 16.0755 5.51331 19.7703 9.95081 19.7703C14.3883 19.7703 18.0016 16.0755 18.0016 11.5379C18.0016 5.58713 11.2438 1.08071 10.4742 0.397671Z' fill='#EB464A'/>\r\n</svg>\r\n"
            },
            {
              value: "darkRed",
              meaning: "\u0642\u0631\u0645\u0632 \u062a\u06cc\u0631\u0647",
              icon: "<svg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M10.4742 0.397671C10.1735 0.134044 9.72815 0.134044 9.43127 0.397671C8.65784 1.08071 1.90002 5.58713 1.90002 11.5379C1.90002 16.0755 5.51331 19.7703 9.95081 19.7703C14.3883 19.7703 18.0016 16.0755 18.0016 11.5379C18.0016 5.58713 11.2438 1.08071 10.4742 0.397671Z' fill='#B33030'/>\r\n</svg>\r\n"
            },
            {
              value: "brown",
              meaning: "\u0642\u0647\u0648\u0647 \u0627\u06cc",
              icon: "<svg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M10.4742 0.397671C10.1735 0.134044 9.72815 0.134044 9.43127 0.397671C8.65784 1.08071 1.90002 5.58713 1.90002 11.5379C1.90002 16.0755 5.51331 19.7703 9.95081 19.7703C14.3883 19.7703 18.0016 16.0755 18.0016 11.5379C18.0016 5.58713 11.2438 1.08071 10.4742 0.397671Z' fill='#945900'/>\r\n</svg>\r\n"
            }
          ],
          Intensity: [
            {
              value: "spotting",
              meaning: "\u0644\u06a9\u0647 \u0628\u06cc\u0646\u06cc",
              icon: "<svg width='10' height='10' viewBox='0 0 10 10' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M5.23712 0.198836C5.08673 0.0670222 4.86407 0.0670222 4.71564 0.198836C4.32892 0.540353 0.950012 2.79356 0.950012 5.76896C0.950012 8.03775 2.75665 9.88513 4.9754 9.88513C7.19415 9.88513 9.00079 8.03775 9.00079 5.76896C9.00079 2.79356 5.62189 0.540353 5.23712 0.198836Z' fill='#D62976'/>\r\n</svg>\r\n"
            },
            {
              value: "lightBleeding",
              meaning:
                "\u062e\u0648\u0646\u0631\u06cc\u0632\u06cc \u06a9\u0645",
              icon: "<svg width='15' height='15' viewBox='0 0 15 15' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M7.85565 0.298315C7.63007 0.100594 7.29608 0.100594 7.07342 0.298315C6.49335 0.81059 1.42499 4.19041 1.42499 8.65349C1.42499 12.0567 4.13495 14.8278 7.46307 14.8278C10.7912 14.8278 13.5012 12.0567 13.5012 8.65349C13.5012 4.19041 8.4328 0.81059 7.85565 0.298315Z' fill='#D62976'/>\r\n</svg>\r\n"
            },
            {
              value: "moderateBleeding",
              meaning:
                "\u062e\u0648\u0646\u0631\u06cc\u0632\u06cc \u0645\u062a\u0648\u0633\u0637",
              icon: "<svg width='25' height='12' viewBox='0 0 25 12' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M19.2845 0.238627C19.1041 0.0804511 18.8369 0.0804511 18.6588 0.238627C18.1947 0.648447 14.14 3.3523 14.14 6.92277C14.14 9.64532 16.308 11.8622 18.9705 11.8622C21.633 11.8622 23.801 9.64532 23.801 6.92277C23.801 3.3523 19.7463 0.648447 19.2845 0.238627Z' fill='#D62976'/>\r\n<path d='M6.28455 0.238627C6.10408 0.0804511 5.83689 0.0804511 5.65876 0.238627C5.1947 0.648447 1.14001 3.3523 1.14001 6.92277C1.14001 9.64532 3.30798 11.8622 5.97048 11.8622C8.63298 11.8622 10.801 9.64532 10.801 6.92277C10.801 3.3523 6.74626 0.648447 6.28455 0.238627Z' fill='#D62976'/>\r\n</svg>\r\n"
            },
            {
              value: "heavyBleeding",
              meaning:
                "\u062e\u0648\u0646\u0631\u06cc\u0632\u06cc \u0632\u06cc\u0627\u062f",
              icon: "<svg width='36' height='11' viewBox='0 0 36 11' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M30.7608 0.218731C30.5954 0.0737366 30.3505 0.0737366 30.1872 0.218731C29.7618 0.5944 26.045 3.07293 26.045 6.34586C26.045 8.84153 28.0323 10.8737 30.4729 10.8737C32.9135 10.8737 34.9008 8.84153 34.9008 6.34586C34.9008 3.07293 31.184 0.5944 30.7608 0.218731Z' fill='#D62976'/>\r\n<path d='M17.7608 0.218731C17.5954 0.0737366 17.3505 0.0737366 17.1872 0.218731C16.7618 0.5944 13.045 3.07293 13.045 6.34586C13.045 8.84153 15.0323 10.8737 17.4729 10.8737C19.9135 10.8737 21.9008 8.84153 21.9008 6.34586C21.9008 3.07293 18.184 0.5944 17.7608 0.218731Z' fill='#D62976'/>\r\n<path d='M5.7608 0.218731C5.59537 0.0737366 5.35045 0.0737366 5.18717 0.218731C4.76178 0.5944 1.04498 3.07293 1.04498 6.34586C1.04498 8.84153 3.03229 10.8737 5.47291 10.8737C7.91354 10.8737 9.90084 8.84153 9.90084 6.34586C9.90084 3.07293 6.18405 0.5944 5.7608 0.218731Z' fill='#D62976'/>\r\n</svg>\r\n"
            }
          ],
          Discharge: [
            {
              value: "healthy",
              meaning: "\u0633\u0627\u0644\u0645",
              icon: "<svg width='25' height='25' viewBox='0 0 25 25' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_191_531)'>\r\n<path d='M21.3388 3.66114C18.9779 1.30024 15.8389 0 12.5 0C9.16115 0 6.02214 1.30024 3.66114 3.66114C1.30024 6.02214 0 9.16115 0 12.5C0 15.8389 1.30024 18.9779 3.66118 21.3389C6.02214 23.6997 9.16115 25 12.5 25C15.8389 25 18.9779 23.6997 21.3389 21.3389C23.6997 18.9779 25 15.8389 25 12.5C25 9.16115 23.6997 6.02214 21.3388 3.66114ZM20.303 20.3031C18.2188 22.3873 15.4476 23.5352 12.5 23.5352C9.5524 23.5352 6.7812 22.3873 4.69697 20.3031C2.6127 18.2187 1.46484 15.4476 1.46484 12.5C1.46484 9.55245 2.6127 6.78125 4.69697 4.69692C6.7812 2.6127 9.5524 1.46484 12.5 1.46484C15.4476 1.46484 18.2188 2.6127 20.303 4.69692C22.3873 6.78125 23.5352 9.55245 23.5352 12.5C23.5352 15.4476 22.3873 18.2187 20.303 20.3031Z' fill='#8254C6'/>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_191_531'>\r\n<rect width='25' height='25' fill='white'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n",
              iconselect:
                "<svg width='25' height='25' viewBox='0 0 25 25' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_191_531)'>\r\n<path d='M21.3388 3.66114C18.9779 1.30024 15.8389 0 12.5 0C9.16115 0 6.02214 1.30024 3.66114 3.66114C1.30024 6.02214 0 9.16115 0 12.5C0 15.8389 1.30024 18.9779 3.66118 21.3389C6.02214 23.6997 9.16115 25 12.5 25C15.8389 25 18.9779 23.6997 21.3389 21.3389C23.6997 18.9779 25 15.8389 25 12.5C25 9.16115 23.6997 6.02214 21.3388 3.66114ZM20.303 20.3031C18.2188 22.3873 15.4476 23.5352 12.5 23.5352C9.5524 23.5352 6.7812 22.3873 4.69697 20.3031C2.6127 18.2187 1.46484 15.4476 1.46484 12.5C1.46484 9.55245 2.6127 6.78125 4.69697 4.69692C6.7812 2.6127 9.5524 1.46484 12.5 1.46484C15.4476 1.46484 18.2188 2.6127 20.303 4.69692C22.3873 6.78125 23.5352 9.55245 23.5352 12.5C23.5352 15.4476 22.3873 18.2187 20.303 20.3031Z' fill='white'/>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_191_531'>\r\n<rect width='25' height='25' fill='white'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
            },
            {
              value: "spotting",
              meaning: "\u0644\u06a9\u0647 \u0628\u06cc\u0646\u06cc",
              icon: "<svg width='25' height='25' viewBox='0 0 25 25' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_191_533)'>\r\n<mask id='mask0_191_533' style='mask-type:luminance' maskUnits='userSpaceOnUse' x='0' y='0' width='25' height='25'>\r\n<path d='M25 0H0V25H25V0Z' fill='white'/>\r\n</mask>\r\n<g mask='url(#mask0_191_533)'>\r\n<path d='M21.3388 3.66114C18.9779 1.30024 15.8389 0 12.5 0C9.16115 0 6.02214 1.30024 3.66114 3.66114C1.30024 6.02214 0 9.16115 0 12.5C0 15.8389 1.30024 18.9779 3.66118 21.3389C6.02214 23.6997 9.16115 25 12.5 25C15.8389 25 18.9779 23.6997 21.3389 21.3389C23.6997 18.9779 25 15.8389 25 12.5C25 9.16115 23.6997 6.02214 21.3388 3.66114ZM20.303 20.3031C18.2188 22.3873 15.4476 23.5352 12.5 23.5352C9.5524 23.5352 6.7812 22.3873 4.69697 20.3031C2.6127 18.2187 1.46484 15.4476 1.46484 12.5C1.46484 9.55245 2.6127 6.78125 4.69697 4.69692C6.7812 2.6127 9.5524 1.46484 12.5 1.46484C15.4476 1.46484 18.2188 2.6127 20.303 4.69692C22.3873 6.78125 23.5352 9.55245 23.5352 12.5C23.5352 15.4476 22.3873 18.2187 20.303 20.3031Z' fill='#8254C6'/>\r\n<path d='M15.2383 18.5192C15.2383 19.9945 14.0424 21.1904 12.5671 21.1904C11.0918 21.1904 9.89587 19.9945 9.89587 18.5192C9.89587 17.044 12.5671 13.5417 12.5671 13.5417C12.5671 13.5417 15.2383 17.044 15.2383 18.5192Z' stroke='#8254C6' stroke-miterlimit='10' stroke-linecap='round' stroke-linejoin='round'/>\r\n<path d='M10.5508 11.2275C10.5508 12.7028 9.35488 13.8988 7.87957 13.8988C6.40426 13.8988 5.20837 12.7028 5.20837 11.2275C5.20837 9.75229 7.87957 6.25 7.87957 6.25C7.87957 6.25 10.5508 9.75229 10.5508 11.2275Z' stroke='#8254C6' stroke-miterlimit='10' stroke-linecap='round' stroke-linejoin='round'/>\r\n<path d='M19.9258 11.2275C19.9258 12.7028 18.7299 13.8988 17.2546 13.8988C15.7793 13.8988 14.5834 12.7028 14.5834 11.2275C14.5834 9.75229 17.2546 6.25 17.2546 6.25C17.2546 6.25 19.9258 9.75229 19.9258 11.2275Z' stroke='#8254C6' stroke-miterlimit='10' stroke-linecap='round' stroke-linejoin='round'/>\r\n</g>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_191_533'>\r\n<rect width='25' height='25' fill='white'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n",
              iconselect:
                "<svg width='25' height='25' viewBox='0 0 25 25' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_191_533)'>\r\n<mask id='mask0_191_533' style='mask-type:luminance' maskUnits='userSpaceOnUse' x='0' y='0' width='25' height='25'>\r\n<path d='M25 0H0V25H25V0Z' fill='white'/>\r\n</mask>\r\n<g mask='url(#mask0_191_533)'>\r\n<path d='M21.3388 3.66114C18.9779 1.30024 15.8389 0 12.5 0C9.16115 0 6.02214 1.30024 3.66114 3.66114C1.30024 6.02214 0 9.16115 0 12.5C0 15.8389 1.30024 18.9779 3.66118 21.3389C6.02214 23.6997 9.16115 25 12.5 25C15.8389 25 18.9779 23.6997 21.3389 21.3389C23.6997 18.9779 25 15.8389 25 12.5C25 9.16115 23.6997 6.02214 21.3388 3.66114ZM20.303 20.3031C18.2188 22.3873 15.4476 23.5352 12.5 23.5352C9.5524 23.5352 6.7812 22.3873 4.69697 20.3031C2.6127 18.2187 1.46484 15.4476 1.46484 12.5C1.46484 9.55245 2.6127 6.78125 4.69697 4.69692C6.7812 2.6127 9.5524 1.46484 12.5 1.46484C15.4476 1.46484 18.2188 2.6127 20.303 4.69692C22.3873 6.78125 23.5352 9.55245 23.5352 12.5C23.5352 15.4476 22.3873 18.2187 20.303 20.3031Z' fill='white'/>\r\n<path d='M15.2383 18.5192C15.2383 19.9945 14.0424 21.1904 12.5671 21.1904C11.0918 21.1904 9.89587 19.9945 9.89587 18.5192C9.89587 17.044 12.5671 13.5417 12.5671 13.5417C12.5671 13.5417 15.2383 17.044 15.2383 18.5192Z' stroke='white' stroke-miterlimit='10' stroke-linecap='round' stroke-linejoin='round'/>\r\n<path d='M10.5508 11.2275C10.5508 12.7028 9.35488 13.8988 7.87957 13.8988C6.40426 13.8988 5.20837 12.7028 5.20837 11.2275C5.20837 9.75229 7.87957 6.25 7.87957 6.25C7.87957 6.25 10.5508 9.75229 10.5508 11.2275Z' stroke='white' stroke-miterlimit='10' stroke-linecap='round' stroke-linejoin='round'/>\r\n<path d='M19.9258 11.2275C19.9258 12.7028 18.7299 13.8988 17.2546 13.8988C15.7793 13.8988 14.5834 12.7028 14.5834 11.2275C14.5834 9.75229 17.2546 6.25 17.2546 6.25C17.2546 6.25 19.9258 9.75229 19.9258 11.2275Z' stroke='white' stroke-miterlimit='10' stroke-linecap='round' stroke-linejoin='round'/>\r\n</g>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_191_533'>\r\n<rect width='25' height='25' fill='white'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
            },
            {
              value: "sticky",
              meaning: "\u0686\u0633\u0628\u0646\u0627\u06a9",
              icon: "<svg width='25' height='25' viewBox='0 0 25 25' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_191_542)'>\r\n<mask id='mask0_191_542' style='mask-type:luminance' maskUnits='userSpaceOnUse' x='0' y='0' width='25' height='25'>\r\n<path d='M25 0H0V25H25V0Z' fill='white'/>\r\n</mask>\r\n<g mask='url(#mask0_191_542)'>\r\n<path d='M21.3388 3.66114C18.9779 1.30024 15.8389 0 12.5 0C9.16115 0 6.02214 1.30024 3.66114 3.66114C1.30024 6.02214 0 9.16115 0 12.5C0 15.8389 1.30024 18.9779 3.66118 21.3389C6.02214 23.6997 9.16115 25 12.5 25C15.8389 25 18.9779 23.6997 21.3389 21.3389C23.6997 18.9779 25 15.8389 25 12.5C25 9.16115 23.6997 6.02214 21.3388 3.66114ZM20.303 20.3031C18.2188 22.3873 15.4476 23.5352 12.5 23.5352C9.5524 23.5352 6.7812 22.3873 4.69697 20.3031C2.6127 18.2187 1.46484 15.4476 1.46484 12.5C1.46484 9.55245 2.6127 6.78125 4.69697 4.69692C6.7812 2.6127 9.5524 1.46484 12.5 1.46484C15.4476 1.46484 18.2188 2.6127 20.303 4.69692C22.3873 6.78125 23.5352 9.55245 23.5352 12.5C23.5352 15.4476 22.3873 18.2187 20.303 20.3031Z' fill='#8254C6'/>\r\n<path d='M12.3316 16.0414C12.3424 16.0396 12.3532 16.0378 12.3639 16.0359C12.6344 15.9902 12.8764 15.9492 13.1063 15.9552H13.1071C13.472 15.9619 13.7709 16.1952 14.124 16.477C14.1905 16.5305 14.2577 16.5834 14.3254 16.6356C14.5508 16.8082 14.7665 16.9295 15.0133 17.0066C15.2593 17.0834 15.5309 17.1148 15.8665 17.1148C16.3751 17.1148 17.044 17.0422 18.0084 16.9376L18.0165 16.9367C18.3939 16.8956 18.821 16.8494 19.3058 16.7998C19.7738 16.7516 20.3498 16.6645 20.697 16.2124C21.1282 15.6514 20.928 14.8806 20.5084 14.4597C19.9535 13.9037 19.2544 13.8866 18.727 13.8739L18.7181 13.8736C18.5335 13.8691 18.3695 13.8651 18.2242 13.8449C18.0794 13.8248 17.9622 13.7897 17.8696 13.729C17.7769 13.6681 17.6994 13.5776 17.6272 13.4623C17.5547 13.3465 17.4914 13.2125 17.423 13.0671L17.422 13.065C17.3068 12.8192 17.1807 12.5501 16.9767 12.3185C16.6139 11.9074 16.1195 11.7321 15.6693 11.5727L15.6608 11.5696C15.5399 11.527 15.4215 11.4852 15.3073 11.4393C13.9144 10.8801 12.9123 9.49543 12.8164 7.99741C12.8124 7.93329 12.8096 7.86871 12.8068 7.80339L12.8067 7.80204L12.8066 7.7986C12.7949 7.5122 12.782 7.19595 12.6529 6.88433C12.4657 6.43397 11.9544 6.02777 11.4074 6.17683C11.0902 6.26392 10.8886 6.48767 10.7739 6.75449C10.6602 7.01886 10.6288 7.32975 10.6481 7.61121C10.677 8.02985 10.7889 8.50485 10.9045 8.99616L10.9071 9.00725C11.0554 9.63616 11.2096 10.2923 11.2146 10.8925C11.2196 11.4899 11.0766 12.0153 10.6459 12.3981C10.5761 12.4597 10.4989 12.5175 10.4174 12.5783L10.4078 12.5856L10.3994 12.5918C10.1437 12.7822 9.82312 13.0209 9.70338 13.4251C9.64989 13.6058 9.64885 13.7866 9.64802 13.9328V13.9387C9.64755 14.0233 9.64703 14.0938 9.63979 14.1523C9.6324 14.2121 9.61974 14.2419 9.60812 14.256C9.5962 14.2702 9.56911 14.2877 9.4912 14.2924C9.4137 14.297 9.31026 14.288 9.17052 14.2729L9.16068 14.2718C8.90349 14.244 8.58047 14.2091 8.27849 14.3469C7.81578 14.5581 7.59927 15.0955 7.74375 15.6134C7.81865 15.8818 7.99719 16.1588 8.29266 16.3528C8.58911 16.5475 8.99677 16.6545 9.52281 16.594C9.89521 16.5505 10.246 16.4515 10.5763 16.3583L10.5783 16.3578C10.9545 16.2518 11.2975 16.1553 11.656 16.1322C11.8857 16.1172 12.1153 16.0783 12.3316 16.0414ZM12.3143 15.9387C12.0971 15.9757 11.8728 16.0137 11.6493 16.0283L14.389 16.5531C14.3218 16.5013 14.2552 16.4488 14.1891 16.3957C13.8429 16.1194 13.5158 15.8586 13.1091 15.8511C12.8687 15.8448 12.6176 15.8873 12.3508 15.9325C12.3387 15.9346 12.3265 15.9366 12.3143 15.9387ZM19.2369 16.124C18.7608 16.1728 18.3408 16.2184 17.9684 16.2588L17.9432 16.2616C15.6976 16.5051 15.3086 16.5333 14.7385 16.0967L19.2369 16.124ZM19.2369 16.124C19.6059 16.0863 19.9811 16.0301 20.1594 15.7977L19.2369 16.124ZM19.2952 16.6962C18.8101 16.7458 18.3827 16.792 18.0052 16.8331L20.6144 16.149C20.2976 16.5614 19.7671 16.6476 19.2952 16.6962ZM13.0735 15.1719H13.0729C12.7787 15.1719 12.486 15.2211 12.2124 15.2671L12.2016 15.269L12.1964 15.2699C11.9852 15.3056 11.7922 15.3383 11.6062 15.3502C11.1623 15.3788 10.753 15.4943 10.3683 15.603L10.3665 15.6034L10.3602 15.6053C10.0362 15.6963 9.73974 15.7797 9.43318 15.8154C9.12385 15.8509 8.90536 15.8014 8.75854 15.7188C8.61229 15.6366 8.53099 15.5183 8.49849 15.402C8.47937 15.3335 8.47703 15.2568 8.49526 15.1926C8.51292 15.1303 8.54807 15.0834 8.60427 15.0577C8.64995 15.0368 8.71437 15.0271 8.80057 15.0277C8.88599 15.0282 8.98161 15.0386 9.08698 15.0499L9.1037 15.0517C9.4262 15.0862 9.89177 15.1361 10.2094 14.757C10.4282 14.495 10.4303 14.1771 10.4316 13.9528L10.4317 13.9422C10.4322 13.8156 10.4336 13.7178 10.4549 13.6468C10.4756 13.5772 10.5226 13.5102 10.597 13.4379C10.6719 13.3651 10.7669 13.294 10.8766 13.2122C10.9737 13.1397 11.0742 13.064 11.1664 12.9824C11.7848 12.433 11.9878 11.7221 11.9979 10.9882C12.0079 10.26 11.8282 9.49793 11.6713 8.8322L11.67 8.82678C11.5576 8.34964 11.4547 7.91147 11.4304 7.55704C11.4203 7.4097 11.4328 7.25397 11.4699 7.13204C11.5087 7.00464 11.5637 6.94548 11.615 6.93116C11.6532 6.92121 11.7105 6.9336 11.7774 6.98454C11.8424 7.03412 11.8996 7.10845 11.9308 7.1835C12.0048 7.36214 12.0149 7.5785 12.0255 7.83386C12.0262 7.84902 12.0269 7.8647 12.0276 7.88017C12.0299 7.9348 12.0323 7.99089 12.036 8.04616C12.1508 9.84089 13.3478 11.4947 15.0167 12.1646C15.1354 12.2126 15.2579 12.2561 15.378 12.2987L15.4002 12.3066C15.8123 12.4524 16.1661 12.5802 16.39 12.8347C16.5176 12.9797 16.6099 13.1739 16.7155 13.3988L16.7204 13.4093C16.8735 13.7344 17.0609 14.1325 17.4408 14.3819C17.8236 14.6335 18.2787 14.6448 18.6847 14.6549L18.6994 14.6552C19.2028 14.6675 19.6262 14.682 19.9547 15.0113C20.0474 15.1042 20.1179 15.2384 20.1435 15.3757C20.1692 15.513 20.1484 15.6411 20.0769 15.7342C20.0069 15.8254 19.8927 15.889 19.7402 15.9339C19.5882 15.9788 19.4107 16.0015 19.2263 16.0203C18.7498 16.0692 18.3295 16.1149 17.9571 16.1553L17.9319 16.158C16.8054 16.2802 16.1561 16.3468 15.7165 16.3301C15.4991 16.3218 15.3382 16.2932 15.1995 16.2429C15.061 16.1928 14.9392 16.1192 14.8018 16.014C14.743 15.9691 14.6847 15.9227 14.6252 15.8752L14.6125 15.8651L14.6035 15.8579C14.222 15.5534 13.7593 15.1841 13.1222 15.1722H13.1209L13.0735 15.1719ZM9.09812 14.9463L9.09526 14.946C8.88838 14.9237 8.69281 14.9027 8.56099 14.963L9.09812 14.9463ZM4.94477 17.4784C4.67641 17.6788 4.54547 17.9813 4.59295 18.3051C4.64943 18.6928 4.95632 19.0549 5.33833 19.1949C5.48266 19.2479 5.68437 19.2815 5.91963 19.3023C6.15677 19.3233 6.43542 19.332 6.73766 19.332C7.44021 19.332 8.27786 19.2852 9.03234 19.2352L9.14146 19.228L9.14411 19.2279C9.22271 19.2226 9.36437 19.2129 9.50989 19.1636C9.65823 19.1133 9.81792 19.0193 9.92083 18.8406C10.1205 18.4943 9.95135 18.0853 9.69427 17.8875C9.46719 17.7125 9.21104 17.6768 9.00917 17.6487L9.00021 17.6474C8.93182 17.6379 8.87052 17.6294 8.81583 17.6173C8.76312 17.6057 8.72318 17.5921 8.69406 17.5756C8.69276 17.5744 8.68833 17.5705 8.68021 17.562C8.66953 17.5508 8.65646 17.536 8.64172 17.5185C8.61229 17.4835 8.57958 17.4418 8.55078 17.4051L8.54677 17.4C8.34714 17.1459 8.01896 16.7283 7.44588 16.5991C6.86625 16.4685 6.06963 16.6386 4.94477 17.4784ZM8.9799 18.454C8.02214 18.5179 7.25802 18.5498 6.69094 18.5499C6.40734 18.55 6.17437 18.542 5.99182 18.5265C5.80698 18.5106 5.68146 18.4875 5.60802 18.4605C5.55245 18.44 5.49448 18.3982 5.44807 18.3453C5.40104 18.2917 5.3738 18.2358 5.3675 18.1926C5.36427 18.17 5.36729 18.1584 5.37104 18.1504C5.37542 18.141 5.38573 18.1264 5.41297 18.106C6.19172 17.5243 6.7074 17.3406 7.06224 17.3406C7.49911 17.3406 7.72344 17.6196 7.93505 17.8893L7.94328 17.8997C8.04698 18.0315 8.15177 18.1645 8.29135 18.2472C8.49573 18.3682 8.71396 18.3983 8.88771 18.4224L8.89286 18.423C8.95505 18.4316 9.00958 18.4392 9.05792 18.4489L8.9799 18.454Z' fill='#8254C6'/>\r\n<path d='M12.3143 15.9387L12.3316 16.0414M12.3143 15.9387C12.0971 15.9757 11.8728 16.0137 11.6493 16.0283L14.389 16.5531C14.3218 16.5013 14.2552 16.4488 14.1891 16.3957C13.8429 16.1194 13.5158 15.8586 13.1091 15.8511C12.8687 15.8448 12.6176 15.8873 12.3508 15.9325C12.3387 15.9346 12.3265 15.9366 12.3143 15.9387ZM12.3316 16.0414C12.3424 16.0396 12.3532 16.0378 12.3639 16.0359C12.6344 15.9902 12.8764 15.9492 13.1063 15.9552H13.1071C13.472 15.9619 13.7709 16.1952 14.124 16.477C14.1905 16.5305 14.2577 16.5834 14.3254 16.6356C14.5508 16.8082 14.7665 16.9295 15.0133 17.0066C15.2593 17.0834 15.5309 17.1148 15.8665 17.1148C16.3751 17.1148 17.044 17.0422 18.0084 16.9376L18.0165 16.9367C18.3939 16.8956 18.821 16.8494 19.3058 16.7998C19.7738 16.7516 20.3498 16.6645 20.697 16.2124C21.1282 15.6514 20.928 14.8806 20.5084 14.4597C19.9535 13.9037 19.2544 13.8866 18.727 13.8739L18.7181 13.8736C18.5335 13.8691 18.3695 13.8651 18.2242 13.8449C18.0794 13.8248 17.9622 13.7897 17.8696 13.729C17.7769 13.6681 17.6994 13.5776 17.6272 13.4623C17.5547 13.3465 17.4914 13.2125 17.423 13.0671L17.422 13.065C17.3068 12.8192 17.1807 12.5501 16.9767 12.3185C16.6139 11.9074 16.1195 11.7321 15.6693 11.5727L15.6608 11.5696C15.5399 11.527 15.4215 11.4852 15.3073 11.4393C13.9144 10.8801 12.9123 9.49543 12.8164 7.99741C12.8124 7.93329 12.8096 7.86871 12.8068 7.80339L12.8067 7.80204L12.8066 7.7986C12.7949 7.5122 12.782 7.19595 12.6529 6.88433C12.4657 6.43397 11.9544 6.02777 11.4074 6.17683C11.0902 6.26392 10.8886 6.48767 10.7739 6.75449C10.6602 7.01886 10.6288 7.32975 10.6481 7.61121C10.677 8.02985 10.7889 8.50485 10.9045 8.99616L10.9071 9.00725C11.0554 9.63616 11.2096 10.2923 11.2146 10.8925C11.2196 11.4899 11.0766 12.0153 10.6459 12.3981C10.5761 12.4597 10.4989 12.5175 10.4174 12.5783L10.4078 12.5856L10.3994 12.5918C10.1437 12.7822 9.82312 13.0209 9.70338 13.4251C9.64989 13.6058 9.64885 13.7866 9.64802 13.9328V13.9387C9.64755 14.0233 9.64703 14.0938 9.63979 14.1523C9.6324 14.2121 9.61974 14.2419 9.60812 14.256C9.5962 14.2702 9.56911 14.2877 9.4912 14.2924C9.4137 14.297 9.31026 14.288 9.17052 14.2729L9.16068 14.2718C8.90349 14.244 8.58047 14.2091 8.27849 14.3469C7.81578 14.5581 7.59927 15.0955 7.74375 15.6134C7.81865 15.8818 7.99719 16.1588 8.29266 16.3528C8.58911 16.5475 8.99677 16.6545 9.52281 16.594C9.89521 16.5505 10.246 16.4515 10.5763 16.3583L10.5783 16.3578C10.9545 16.2518 11.2975 16.1553 11.656 16.1322C11.8857 16.1172 12.1153 16.0783 12.3316 16.0414ZM19.2369 16.124C18.7608 16.1728 18.3408 16.2184 17.9684 16.2588L17.9432 16.2616C15.6976 16.5051 15.3086 16.5333 14.7385 16.0967L19.2369 16.124ZM19.2369 16.124C19.6059 16.0863 19.9811 16.0301 20.1594 15.7977L19.2369 16.124ZM5.3675 18.1926C5.3738 18.2358 5.40104 18.2917 5.44807 18.3453C5.49448 18.3982 5.55245 18.44 5.60802 18.4605C5.68146 18.4875 5.80698 18.5106 5.99182 18.5265C6.17437 18.542 6.40734 18.55 6.69094 18.5499C7.25802 18.5498 8.02214 18.5179 8.9799 18.454L9.05792 18.4489C9.00958 18.4392 8.95505 18.4316 8.89286 18.423L8.88771 18.4224C8.71396 18.3983 8.49573 18.3682 8.29135 18.2472C8.15177 18.1645 8.04698 18.0315 7.94328 17.8997L7.93505 17.8893C7.72344 17.6196 7.49911 17.3406 7.06224 17.3406C6.7074 17.3406 6.19172 17.5243 5.41297 18.106C5.38573 18.1264 5.37542 18.141 5.37104 18.1504C5.36729 18.1584 5.36427 18.17 5.3675 18.1926ZM5.3675 18.1926L5.26443 18.2076M19.2952 16.6962C18.8101 16.7458 18.3827 16.792 18.0052 16.8331L20.6144 16.149C20.2976 16.5614 19.7671 16.6476 19.2952 16.6962ZM13.0735 15.1719H13.0729C12.7787 15.1719 12.486 15.2211 12.2124 15.2671L12.2016 15.269L12.1964 15.2699C11.9852 15.3056 11.7922 15.3383 11.6062 15.3502C11.1623 15.3788 10.753 15.4943 10.3683 15.603L10.3665 15.6034L10.3602 15.6053C10.0362 15.6963 9.73974 15.7797 9.43318 15.8154C9.12385 15.8509 8.90536 15.8014 8.75854 15.7188C8.61229 15.6366 8.53099 15.5183 8.49849 15.402C8.47937 15.3335 8.47703 15.2568 8.49526 15.1926C8.51292 15.1303 8.54807 15.0834 8.60427 15.0577C8.64995 15.0368 8.71437 15.0271 8.80057 15.0277C8.88599 15.0282 8.98161 15.0386 9.08698 15.0499L9.1037 15.0517C9.4262 15.0862 9.89177 15.1361 10.2094 14.757C10.4282 14.495 10.4303 14.1771 10.4316 13.9528L10.4317 13.9422C10.4322 13.8156 10.4336 13.7178 10.4549 13.6468C10.4756 13.5772 10.5226 13.5102 10.597 13.4379C10.6719 13.3651 10.7669 13.294 10.8766 13.2122C10.9737 13.1397 11.0742 13.064 11.1664 12.9824C11.7848 12.433 11.9878 11.7221 11.9979 10.9882C12.0079 10.26 11.8282 9.49793 11.6713 8.8322L11.67 8.82678C11.5576 8.34964 11.4547 7.91147 11.4304 7.55704C11.4203 7.4097 11.4328 7.25397 11.4699 7.13204C11.5087 7.00464 11.5637 6.94548 11.615 6.93116C11.6532 6.92121 11.7105 6.9336 11.7774 6.98454C11.8424 7.03412 11.8996 7.10845 11.9308 7.1835C12.0048 7.36214 12.0149 7.5785 12.0255 7.83386C12.0262 7.84902 12.0269 7.8647 12.0276 7.88017C12.0299 7.9348 12.0323 7.99089 12.036 8.04616C12.1508 9.84089 13.3478 11.4947 15.0167 12.1646C15.1354 12.2126 15.2579 12.2561 15.378 12.2987L15.4002 12.3066C15.8123 12.4524 16.1661 12.5802 16.39 12.8347C16.5176 12.9797 16.6099 13.1739 16.7155 13.3988L16.7204 13.4093C16.8735 13.7344 17.0609 14.1325 17.4408 14.3819C17.8236 14.6335 18.2787 14.6448 18.6847 14.6549L18.6994 14.6552C19.2028 14.6675 19.6262 14.682 19.9547 15.0113C20.0474 15.1042 20.1179 15.2384 20.1435 15.3757C20.1692 15.513 20.1484 15.6411 20.0769 15.7342C20.0069 15.8254 19.8927 15.889 19.7402 15.9339C19.5882 15.9788 19.4107 16.0015 19.2263 16.0203C18.7498 16.0692 18.3295 16.1149 17.9571 16.1553L17.9319 16.158C16.8054 16.2802 16.1561 16.3468 15.7165 16.3301C15.4991 16.3218 15.3382 16.2932 15.1995 16.2429C15.061 16.1928 14.9392 16.1192 14.8018 16.014C14.743 15.9691 14.6847 15.9227 14.6252 15.8752L14.6125 15.8651L14.6035 15.8579C14.222 15.5534 13.7593 15.1841 13.1222 15.1722H13.1209L13.0735 15.1719ZM9.09812 14.9463L9.09526 14.946C8.88838 14.9237 8.69281 14.9027 8.56099 14.963L9.09812 14.9463ZM4.94477 17.4784C4.67641 17.6788 4.54547 17.9813 4.59295 18.3051C4.64943 18.6928 4.95632 19.0549 5.33833 19.1949C5.48266 19.2479 5.68437 19.2815 5.91963 19.3023C6.15677 19.3233 6.43542 19.332 6.73766 19.332C7.44021 19.332 8.27786 19.2852 9.03234 19.2352L9.14146 19.228L9.14411 19.2279C9.22271 19.2226 9.36437 19.2129 9.50989 19.1636C9.65823 19.1133 9.81792 19.0193 9.92083 18.8406C10.1205 18.4943 9.95135 18.0853 9.69427 17.8875C9.46719 17.7125 9.21104 17.6768 9.00917 17.6487L9.00021 17.6474C8.93182 17.6379 8.87052 17.6294 8.81583 17.6173C8.76312 17.6057 8.72318 17.5921 8.69406 17.5756C8.69276 17.5744 8.68833 17.5705 8.68021 17.562C8.66953 17.5508 8.65646 17.536 8.64172 17.5185C8.61229 17.4835 8.57958 17.4418 8.55078 17.4051L8.54677 17.4C8.34714 17.1459 8.01896 16.7283 7.44588 16.5991C6.86625 16.4685 6.06963 16.6386 4.94477 17.4784Z' stroke='#8254C6' stroke-width='0.2'/>\r\n</g>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_191_542'>\r\n<rect width='25' height='25' fill='white'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n",
              iconselect:
                "<svg width='25' height='25' viewBox='0 0 25 25' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_191_542)'>\r\n<mask id='mask0_191_542' style='mask-type:luminance' maskUnits='userSpaceOnUse' x='0' y='0' width='25' height='25'>\r\n<path d='M25 0H0V25H25V0Z' fill='white'/>\r\n</mask>\r\n<g mask='url(#mask0_191_542)'>\r\n<path d='M21.3388 3.66114C18.9779 1.30024 15.8389 0 12.5 0C9.16115 0 6.02214 1.30024 3.66114 3.66114C1.30024 6.02214 0 9.16115 0 12.5C0 15.8389 1.30024 18.9779 3.66118 21.3389C6.02214 23.6997 9.16115 25 12.5 25C15.8389 25 18.9779 23.6997 21.3389 21.3389C23.6997 18.9779 25 15.8389 25 12.5C25 9.16115 23.6997 6.02214 21.3388 3.66114ZM20.303 20.3031C18.2188 22.3873 15.4476 23.5352 12.5 23.5352C9.5524 23.5352 6.7812 22.3873 4.69697 20.3031C2.6127 18.2187 1.46484 15.4476 1.46484 12.5C1.46484 9.55245 2.6127 6.78125 4.69697 4.69692C6.7812 2.6127 9.5524 1.46484 12.5 1.46484C15.4476 1.46484 18.2188 2.6127 20.303 4.69692C22.3873 6.78125 23.5352 9.55245 23.5352 12.5C23.5352 15.4476 22.3873 18.2187 20.303 20.3031Z' fill='white'/>\r\n<path d='M12.3316 16.0414C12.3424 16.0396 12.3532 16.0378 12.3639 16.0359C12.6344 15.9902 12.8764 15.9492 13.1063 15.9552H13.1071C13.472 15.9619 13.7709 16.1952 14.124 16.477C14.1905 16.5305 14.2577 16.5834 14.3254 16.6356C14.5508 16.8082 14.7665 16.9295 15.0133 17.0066C15.2593 17.0834 15.5309 17.1148 15.8665 17.1148C16.3751 17.1148 17.044 17.0422 18.0084 16.9376L18.0165 16.9367C18.3939 16.8956 18.821 16.8494 19.3058 16.7998C19.7738 16.7516 20.3498 16.6645 20.697 16.2124C21.1282 15.6514 20.928 14.8806 20.5084 14.4597C19.9535 13.9037 19.2544 13.8866 18.727 13.8739L18.7181 13.8736C18.5335 13.8691 18.3695 13.8651 18.2242 13.8449C18.0794 13.8248 17.9622 13.7897 17.8696 13.729C17.7769 13.6681 17.6994 13.5776 17.6272 13.4623C17.5547 13.3465 17.4914 13.2125 17.423 13.0671L17.422 13.065C17.3068 12.8192 17.1807 12.5501 16.9767 12.3185C16.6139 11.9074 16.1195 11.7321 15.6693 11.5727L15.6608 11.5696C15.5399 11.527 15.4215 11.4852 15.3073 11.4393C13.9144 10.8801 12.9123 9.49543 12.8164 7.99741C12.8124 7.93329 12.8096 7.86871 12.8068 7.80339L12.8067 7.80204L12.8066 7.7986C12.7949 7.5122 12.782 7.19595 12.6529 6.88433C12.4657 6.43397 11.9544 6.02777 11.4074 6.17683C11.0902 6.26392 10.8886 6.48767 10.7739 6.75449C10.6602 7.01886 10.6288 7.32975 10.6481 7.61121C10.677 8.02985 10.7889 8.50485 10.9045 8.99616L10.9071 9.00725C11.0554 9.63616 11.2096 10.2923 11.2146 10.8925C11.2196 11.4899 11.0766 12.0153 10.6459 12.3981C10.5761 12.4597 10.4989 12.5175 10.4174 12.5783L10.4078 12.5856L10.3994 12.5918C10.1437 12.7822 9.82312 13.0209 9.70338 13.4251C9.64989 13.6058 9.64885 13.7866 9.64802 13.9328V13.9387C9.64755 14.0233 9.64703 14.0938 9.63979 14.1523C9.6324 14.2121 9.61974 14.2419 9.60812 14.256C9.5962 14.2702 9.56911 14.2877 9.4912 14.2924C9.4137 14.297 9.31026 14.288 9.17052 14.2729L9.16068 14.2718C8.90349 14.244 8.58047 14.2091 8.27849 14.3469C7.81578 14.5581 7.59927 15.0955 7.74375 15.6134C7.81865 15.8818 7.99719 16.1588 8.29266 16.3528C8.58911 16.5475 8.99677 16.6545 9.52281 16.594C9.89521 16.5505 10.246 16.4515 10.5763 16.3583L10.5783 16.3578C10.9545 16.2518 11.2975 16.1553 11.656 16.1322C11.8857 16.1172 12.1153 16.0783 12.3316 16.0414ZM12.3143 15.9387C12.0971 15.9757 11.8728 16.0137 11.6493 16.0283L14.389 16.5531C14.3218 16.5013 14.2552 16.4488 14.1891 16.3957C13.8429 16.1194 13.5158 15.8586 13.1091 15.8511C12.8687 15.8448 12.6176 15.8873 12.3508 15.9325C12.3387 15.9346 12.3265 15.9366 12.3143 15.9387ZM19.2369 16.124C18.7608 16.1728 18.3408 16.2184 17.9684 16.2588L17.9432 16.2616C15.6976 16.5051 15.3086 16.5333 14.7385 16.0967L19.2369 16.124ZM19.2369 16.124C19.6059 16.0863 19.9811 16.0301 20.1594 15.7977L19.2369 16.124ZM19.2952 16.6962C18.8101 16.7458 18.3827 16.792 18.0052 16.8331L20.6144 16.149C20.2976 16.5614 19.7671 16.6476 19.2952 16.6962ZM13.0735 15.1719H13.0729C12.7787 15.1719 12.486 15.2211 12.2124 15.2671L12.2016 15.269L12.1964 15.2699C11.9852 15.3056 11.7922 15.3383 11.6062 15.3502C11.1623 15.3788 10.753 15.4943 10.3683 15.603L10.3665 15.6034L10.3602 15.6053C10.0362 15.6963 9.73974 15.7797 9.43318 15.8154C9.12385 15.8509 8.90536 15.8014 8.75854 15.7188C8.61229 15.6366 8.53099 15.5183 8.49849 15.402C8.47937 15.3335 8.47703 15.2568 8.49526 15.1926C8.51292 15.1303 8.54807 15.0834 8.60427 15.0577C8.64995 15.0368 8.71437 15.0271 8.80057 15.0277C8.88599 15.0282 8.98161 15.0386 9.08698 15.0499L9.1037 15.0517C9.4262 15.0862 9.89177 15.1361 10.2094 14.757C10.4282 14.495 10.4303 14.1771 10.4316 13.9528L10.4317 13.9422C10.4322 13.8156 10.4336 13.7178 10.4549 13.6468C10.4756 13.5772 10.5226 13.5102 10.597 13.4379C10.6719 13.3651 10.7669 13.294 10.8766 13.2122C10.9737 13.1397 11.0742 13.064 11.1664 12.9824C11.7848 12.433 11.9878 11.7221 11.9979 10.9882C12.0079 10.26 11.8282 9.49793 11.6713 8.8322L11.67 8.82678C11.5576 8.34964 11.4547 7.91147 11.4304 7.55704C11.4203 7.4097 11.4328 7.25397 11.4699 7.13204C11.5087 7.00464 11.5637 6.94548 11.615 6.93116C11.6532 6.92121 11.7105 6.9336 11.7774 6.98454C11.8424 7.03412 11.8996 7.10845 11.9308 7.1835C12.0048 7.36214 12.0149 7.5785 12.0255 7.83386C12.0262 7.84902 12.0269 7.8647 12.0276 7.88017C12.0299 7.9348 12.0323 7.99089 12.036 8.04616C12.1508 9.84089 13.3478 11.4947 15.0167 12.1646C15.1354 12.2126 15.2579 12.2561 15.378 12.2987L15.4002 12.3066C15.8123 12.4524 16.1661 12.5802 16.39 12.8347C16.5176 12.9797 16.6099 13.1739 16.7155 13.3988L16.7204 13.4093C16.8735 13.7344 17.0609 14.1325 17.4408 14.3819C17.8236 14.6335 18.2787 14.6448 18.6847 14.6549L18.6994 14.6552C19.2028 14.6675 19.6262 14.682 19.9547 15.0113C20.0474 15.1042 20.1179 15.2384 20.1435 15.3757C20.1692 15.513 20.1484 15.6411 20.0769 15.7342C20.0069 15.8254 19.8927 15.889 19.7402 15.9339C19.5882 15.9788 19.4107 16.0015 19.2263 16.0203C18.7498 16.0692 18.3295 16.1149 17.9571 16.1553L17.9319 16.158C16.8054 16.2802 16.1561 16.3468 15.7165 16.3301C15.4991 16.3218 15.3382 16.2932 15.1995 16.2429C15.061 16.1928 14.9392 16.1192 14.8018 16.014C14.743 15.9691 14.6847 15.9227 14.6252 15.8752L14.6125 15.8651L14.6035 15.8579C14.222 15.5534 13.7593 15.1841 13.1222 15.1722H13.1209L13.0735 15.1719ZM9.09812 14.9463L9.09526 14.946C8.88838 14.9237 8.69281 14.9027 8.56099 14.963L9.09812 14.9463ZM4.94477 17.4784C4.67641 17.6788 4.54547 17.9813 4.59295 18.3051C4.64943 18.6928 4.95632 19.0549 5.33833 19.1949C5.48266 19.2479 5.68437 19.2815 5.91963 19.3023C6.15677 19.3233 6.43542 19.332 6.73766 19.332C7.44021 19.332 8.27786 19.2852 9.03234 19.2352L9.14146 19.228L9.14411 19.2279C9.22271 19.2226 9.36437 19.2129 9.50989 19.1636C9.65823 19.1133 9.81792 19.0193 9.92083 18.8406C10.1205 18.4943 9.95135 18.0853 9.69427 17.8875C9.46719 17.7125 9.21104 17.6768 9.00917 17.6487L9.00021 17.6474C8.93182 17.6379 8.87052 17.6294 8.81583 17.6173C8.76312 17.6057 8.72318 17.5921 8.69406 17.5756C8.69276 17.5744 8.68833 17.5705 8.68021 17.562C8.66953 17.5508 8.65646 17.536 8.64172 17.5185C8.61229 17.4835 8.57958 17.4418 8.55078 17.4051L8.54677 17.4C8.34714 17.1459 8.01896 16.7283 7.44588 16.5991C6.86625 16.4685 6.06963 16.6386 4.94477 17.4784ZM8.9799 18.454C8.02214 18.5179 7.25802 18.5498 6.69094 18.5499C6.40734 18.55 6.17437 18.542 5.99182 18.5265C5.80698 18.5106 5.68146 18.4875 5.60802 18.4605C5.55245 18.44 5.49448 18.3982 5.44807 18.3453C5.40104 18.2917 5.3738 18.2358 5.3675 18.1926C5.36427 18.17 5.36729 18.1584 5.37104 18.1504C5.37542 18.141 5.38573 18.1264 5.41297 18.106C6.19172 17.5243 6.7074 17.3406 7.06224 17.3406C7.49911 17.3406 7.72344 17.6196 7.93505 17.8893L7.94328 17.8997C8.04698 18.0315 8.15177 18.1645 8.29135 18.2472C8.49573 18.3682 8.71396 18.3983 8.88771 18.4224L8.89286 18.423C8.95505 18.4316 9.00958 18.4392 9.05792 18.4489L8.9799 18.454Z' fill='white'/>\r\n<path d='M12.3143 15.9387L12.3316 16.0414M12.3143 15.9387C12.0971 15.9757 11.8728 16.0137 11.6493 16.0283L14.389 16.5531C14.3218 16.5013 14.2552 16.4488 14.1891 16.3957C13.8429 16.1194 13.5158 15.8586 13.1091 15.8511C12.8687 15.8448 12.6176 15.8873 12.3508 15.9325C12.3387 15.9346 12.3265 15.9366 12.3143 15.9387ZM12.3316 16.0414C12.3424 16.0396 12.3532 16.0378 12.3639 16.0359C12.6344 15.9902 12.8764 15.9492 13.1063 15.9552H13.1071C13.472 15.9619 13.7709 16.1952 14.124 16.477C14.1905 16.5305 14.2577 16.5834 14.3254 16.6356C14.5508 16.8082 14.7665 16.9295 15.0133 17.0066C15.2593 17.0834 15.5309 17.1148 15.8665 17.1148C16.3751 17.1148 17.044 17.0422 18.0084 16.9376L18.0165 16.9367C18.3939 16.8956 18.821 16.8494 19.3058 16.7998C19.7738 16.7516 20.3498 16.6645 20.697 16.2124C21.1282 15.6514 20.928 14.8806 20.5084 14.4597C19.9535 13.9037 19.2544 13.8866 18.727 13.8739L18.7181 13.8736C18.5335 13.8691 18.3695 13.8651 18.2242 13.8449C18.0794 13.8248 17.9622 13.7897 17.8696 13.729C17.7769 13.6681 17.6994 13.5776 17.6272 13.4623C17.5547 13.3465 17.4914 13.2125 17.423 13.0671L17.422 13.065C17.3068 12.8192 17.1807 12.5501 16.9767 12.3185C16.6139 11.9074 16.1195 11.7321 15.6693 11.5727L15.6608 11.5696C15.5399 11.527 15.4215 11.4852 15.3073 11.4393C13.9144 10.8801 12.9123 9.49543 12.8164 7.99741C12.8124 7.93329 12.8096 7.86871 12.8068 7.80339L12.8067 7.80204L12.8066 7.7986C12.7949 7.5122 12.782 7.19595 12.6529 6.88433C12.4657 6.43397 11.9544 6.02777 11.4074 6.17683C11.0902 6.26392 10.8886 6.48767 10.7739 6.75449C10.6602 7.01886 10.6288 7.32975 10.6481 7.61121C10.677 8.02985 10.7889 8.50485 10.9045 8.99616L10.9071 9.00725C11.0554 9.63616 11.2096 10.2923 11.2146 10.8925C11.2196 11.4899 11.0766 12.0153 10.6459 12.3981C10.5761 12.4597 10.4989 12.5175 10.4174 12.5783L10.4078 12.5856L10.3994 12.5918C10.1437 12.7822 9.82312 13.0209 9.70338 13.4251C9.64989 13.6058 9.64885 13.7866 9.64802 13.9328V13.9387C9.64755 14.0233 9.64703 14.0938 9.63979 14.1523C9.6324 14.2121 9.61974 14.2419 9.60812 14.256C9.5962 14.2702 9.56911 14.2877 9.4912 14.2924C9.4137 14.297 9.31026 14.288 9.17052 14.2729L9.16068 14.2718C8.90349 14.244 8.58047 14.2091 8.27849 14.3469C7.81578 14.5581 7.59927 15.0955 7.74375 15.6134C7.81865 15.8818 7.99719 16.1588 8.29266 16.3528C8.58911 16.5475 8.99677 16.6545 9.52281 16.594C9.89521 16.5505 10.246 16.4515 10.5763 16.3583L10.5783 16.3578C10.9545 16.2518 11.2975 16.1553 11.656 16.1322C11.8857 16.1172 12.1153 16.0783 12.3316 16.0414ZM19.2369 16.124C18.7608 16.1728 18.3408 16.2184 17.9684 16.2588L17.9432 16.2616C15.6976 16.5051 15.3086 16.5333 14.7385 16.0967L19.2369 16.124ZM19.2369 16.124C19.6059 16.0863 19.9811 16.0301 20.1594 15.7977L19.2369 16.124ZM5.3675 18.1926C5.3738 18.2358 5.40104 18.2917 5.44807 18.3453C5.49448 18.3982 5.55245 18.44 5.60802 18.4605C5.68146 18.4875 5.80698 18.5106 5.99182 18.5265C6.17437 18.542 6.40734 18.55 6.69094 18.5499C7.25802 18.5498 8.02214 18.5179 8.9799 18.454L9.05792 18.4489C9.00958 18.4392 8.95505 18.4316 8.89286 18.423L8.88771 18.4224C8.71396 18.3983 8.49573 18.3682 8.29135 18.2472C8.15177 18.1645 8.04698 18.0315 7.94328 17.8997L7.93505 17.8893C7.72344 17.6196 7.49911 17.3406 7.06224 17.3406C6.7074 17.3406 6.19172 17.5243 5.41297 18.106C5.38573 18.1264 5.37542 18.141 5.37104 18.1504C5.36729 18.1584 5.36427 18.17 5.3675 18.1926ZM5.3675 18.1926L5.26443 18.2076M19.2952 16.6962C18.8101 16.7458 18.3827 16.792 18.0052 16.8331L20.6144 16.149C20.2976 16.5614 19.7671 16.6476 19.2952 16.6962ZM13.0735 15.1719H13.0729C12.7787 15.1719 12.486 15.2211 12.2124 15.2671L12.2016 15.269L12.1964 15.2699C11.9852 15.3056 11.7922 15.3383 11.6062 15.3502C11.1623 15.3788 10.753 15.4943 10.3683 15.603L10.3665 15.6034L10.3602 15.6053C10.0362 15.6963 9.73974 15.7797 9.43318 15.8154C9.12385 15.8509 8.90536 15.8014 8.75854 15.7188C8.61229 15.6366 8.53099 15.5183 8.49849 15.402C8.47937 15.3335 8.47703 15.2568 8.49526 15.1926C8.51292 15.1303 8.54807 15.0834 8.60427 15.0577C8.64995 15.0368 8.71437 15.0271 8.80057 15.0277C8.88599 15.0282 8.98161 15.0386 9.08698 15.0499L9.1037 15.0517C9.4262 15.0862 9.89177 15.1361 10.2094 14.757C10.4282 14.495 10.4303 14.1771 10.4316 13.9528L10.4317 13.9422C10.4322 13.8156 10.4336 13.7178 10.4549 13.6468C10.4756 13.5772 10.5226 13.5102 10.597 13.4379C10.6719 13.3651 10.7669 13.294 10.8766 13.2122C10.9737 13.1397 11.0742 13.064 11.1664 12.9824C11.7848 12.433 11.9878 11.7221 11.9979 10.9882C12.0079 10.26 11.8282 9.49793 11.6713 8.8322L11.67 8.82678C11.5576 8.34964 11.4547 7.91147 11.4304 7.55704C11.4203 7.4097 11.4328 7.25397 11.4699 7.13204C11.5087 7.00464 11.5637 6.94548 11.615 6.93116C11.6532 6.92121 11.7105 6.9336 11.7774 6.98454C11.8424 7.03412 11.8996 7.10845 11.9308 7.1835C12.0048 7.36214 12.0149 7.5785 12.0255 7.83386C12.0262 7.84902 12.0269 7.8647 12.0276 7.88017C12.0299 7.9348 12.0323 7.99089 12.036 8.04616C12.1508 9.84089 13.3478 11.4947 15.0167 12.1646C15.1354 12.2126 15.2579 12.2561 15.378 12.2987L15.4002 12.3066C15.8123 12.4524 16.1661 12.5802 16.39 12.8347C16.5176 12.9797 16.6099 13.1739 16.7155 13.3988L16.7204 13.4093C16.8735 13.7344 17.0609 14.1325 17.4408 14.3819C17.8236 14.6335 18.2787 14.6448 18.6847 14.6549L18.6994 14.6552C19.2028 14.6675 19.6262 14.682 19.9547 15.0113C20.0474 15.1042 20.1179 15.2384 20.1435 15.3757C20.1692 15.513 20.1484 15.6411 20.0769 15.7342C20.0069 15.8254 19.8927 15.889 19.7402 15.9339C19.5882 15.9788 19.4107 16.0015 19.2263 16.0203C18.7498 16.0692 18.3295 16.1149 17.9571 16.1553L17.9319 16.158C16.8054 16.2802 16.1561 16.3468 15.7165 16.3301C15.4991 16.3218 15.3382 16.2932 15.1995 16.2429C15.061 16.1928 14.9392 16.1192 14.8018 16.014C14.743 15.9691 14.6847 15.9227 14.6252 15.8752L14.6125 15.8651L14.6035 15.8579C14.222 15.5534 13.7593 15.1841 13.1222 15.1722H13.1209L13.0735 15.1719ZM9.09812 14.9463L9.09526 14.946C8.88838 14.9237 8.69281 14.9027 8.56099 14.963L9.09812 14.9463ZM4.94477 17.4784C4.67641 17.6788 4.54547 17.9813 4.59295 18.3051C4.64943 18.6928 4.95632 19.0549 5.33833 19.1949C5.48266 19.2479 5.68437 19.2815 5.91963 19.3023C6.15677 19.3233 6.43542 19.332 6.73766 19.332C7.44021 19.332 8.27786 19.2852 9.03234 19.2352L9.14146 19.228L9.14411 19.2279C9.22271 19.2226 9.36437 19.2129 9.50989 19.1636C9.65823 19.1133 9.81792 19.0193 9.92083 18.8406C10.1205 18.4943 9.95135 18.0853 9.69427 17.8875C9.46719 17.7125 9.21104 17.6768 9.00917 17.6487L9.00021 17.6474C8.93182 17.6379 8.87052 17.6294 8.81583 17.6173C8.76312 17.6057 8.72318 17.5921 8.69406 17.5756C8.69276 17.5744 8.68833 17.5705 8.68021 17.562C8.66953 17.5508 8.65646 17.536 8.64172 17.5185C8.61229 17.4835 8.57958 17.4418 8.55078 17.4051L8.54677 17.4C8.34714 17.1459 8.01896 16.7283 7.44588 16.5991C6.86625 16.4685 6.06963 16.6386 4.94477 17.4784Z' stroke='white' stroke-width='0.2'/>\r\n</g>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_191_542'>\r\n<rect width='25' height='25' fill='white'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
            },
            {
              value: "creamy",
              meaning: "\u062e\u0627\u0645\u0647 \u0627\u06cc",
              icon: "<svg width='25' height='25' viewBox='0 0 25 25' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_191_515)'>\r\n<mask id='mask0_191_515' style='mask-type:luminance' maskUnits='userSpaceOnUse' x='0' y='0' width='25' height='25'>\r\n<path d='M25 0H0V25H25V0Z' fill='white'/>\r\n</mask>\r\n<g mask='url(#mask0_191_515)'>\r\n<path d='M21.3388 3.66114C18.9779 1.30024 15.8389 0 12.5 0C9.16115 0 6.02214 1.30024 3.66114 3.66114C1.30024 6.02214 0 9.16115 0 12.5C0 15.8389 1.30024 18.9779 3.66118 21.3389C6.02214 23.6997 9.16115 25 12.5 25C15.8389 25 18.9779 23.6997 21.3389 21.3389C23.6997 18.9779 25 15.8389 25 12.5C25 9.16115 23.6997 6.02214 21.3388 3.66114ZM20.303 20.3031C18.2188 22.3873 15.4476 23.5352 12.5 23.5352C9.5524 23.5352 6.7812 22.3873 4.69697 20.3031C2.6127 18.2187 1.46484 15.4476 1.46484 12.5C1.46484 9.55245 2.6127 6.78125 4.69697 4.69692C6.7812 2.6127 9.5524 1.46484 12.5 1.46484C15.4476 1.46484 18.2188 2.6127 20.303 4.69692C22.3873 6.78125 23.5352 9.55245 23.5352 12.5C23.5352 15.4476 22.3873 18.2187 20.303 20.3031Z' fill='#8254C6'/>\r\n<path d='M11.3328 6.69502C11.4021 6.85424 11.487 7.11945 11.5201 7.37023C11.5367 7.49564 11.5395 7.61226 11.5239 7.70794C11.508 7.8045 11.4754 7.86747 11.4322 7.90299L11.4312 7.90382C11.3978 7.93195 11.3405 7.96721 11.2602 8.00976C11.1815 8.05148 11.0871 8.09679 10.9836 8.14606C10.1888 8.52861 8.67808 9.25799 8.50084 11.2291C7.1835 11.9621 6.48584 13.1654 6.48584 14.7135C6.48584 15.8094 6.85917 16.715 7.6011 17.3984C8.27959 18.0238 9.16995 18.3733 10.0157 18.5671C10.8625 18.7611 11.673 18.801 12.2 18.801C12.5021 18.801 12.7114 18.7883 12.7838 18.7828C12.931 18.7882 13.6532 18.8019 14.5388 18.6286C15.4359 18.453 16.5124 18.0833 17.3253 17.3072C18.1168 16.55 18.5158 15.5413 18.5158 14.3168C18.5158 12.9993 18.009 11.9073 17.0128 11.071C17.0532 10.8871 17.0742 10.7002 17.0742 10.5118C17.0742 9.89809 16.7401 9.32861 16.2584 8.82507C15.7755 8.32023 15.1327 7.8695 14.4885 7.49153C13.1997 6.73533 11.8854 6.25939 11.7769 6.22044C11.6446 6.17314 11.4956 6.20856 11.3988 6.31247C11.3025 6.41585 11.2761 6.56497 11.3328 6.69502ZM11.4283 6.65346C11.3883 6.56179 11.4067 6.45679 11.475 6.38346C11.5433 6.31012 11.6483 6.28512 11.7417 6.31846L8.60001 11.2935C8.74834 9.34346 10.225 8.62679 11.0283 8.24012C11.235 8.14179 11.4133 8.05512 11.4983 7.98346C11.78 7.75179 11.5733 6.98679 11.4283 6.65346ZM11.8824 8.45096L11.8831 8.45038C12.1136 8.25971 12.2096 7.99273 12.2352 7.72439C12.2538 7.52971 12.2359 7.32955 12.2031 7.14668C12.9664 7.46648 13.9649 7.95226 14.7947 8.52304C15.2437 8.83184 15.6393 9.16283 15.9216 9.50262C16.2047 9.84335 16.3658 10.1831 16.3658 10.5118C16.3658 10.7109 16.3359 10.9018 16.2742 11.0931C16.0457 11.7949 15.4143 12.2993 14.8183 12.6325C14.2458 12.9526 13.726 13.1037 13.6822 13.1164C13.494 13.1683 13.3827 13.3618 13.4345 13.5509C13.4591 13.6414 13.5185 13.7186 13.5999 13.7654C13.6812 13.8123 13.7779 13.825 13.8686 13.8007C13.9197 13.787 14.4632 13.6353 15.0879 13.2978C15.6772 12.9794 16.351 12.489 16.7443 11.782C17.4513 12.4562 17.8092 13.3053 17.8092 14.3201C17.8092 15.353 17.481 16.1825 16.8381 16.7965C16.1231 17.4807 15.1236 17.8032 14.2889 17.9528C13.8731 18.0274 13.5016 18.0584 13.2324 18.0706C13.0979 18.0767 12.9891 18.0782 12.9133 18.078C12.8755 18.078 12.8459 18.0775 12.8255 18.0771C12.8044 18.0766 12.7942 18.0761 12.7945 18.0762L12.7883 18.076H12.7567H12.7509L12.7452 18.0766C12.7418 18.0768 12.693 18.0807 12.6049 18.0844C12.5147 18.0884 12.3855 18.0921 12.226 18.0919C11.907 18.0917 11.4681 18.0759 10.9814 18.0147C10.0033 17.8917 8.85115 17.5876 8.08063 16.8769C7.49464 16.3373 7.19417 15.6114 7.19417 14.7135C7.19417 14.031 7.34673 13.4455 7.64579 12.9563C7.94475 12.4672 8.39397 12.0684 8.99688 11.7649C9.69574 11.415 10.4747 11.2579 11.0844 11.189C11.683 11.1214 12.11 11.1398 12.1258 11.1404C12.1259 11.1404 12.1262 11.1404 12.1258 11.1404L12.1302 11.1407C12.3216 11.1527 12.4929 11.0015 12.5024 10.8051C12.5118 10.6096 12.363 10.4445 12.168 10.4328L12.1666 10.4327C12.0966 10.4294 10.6779 10.3621 9.27006 10.8771C9.55662 9.627 10.5603 9.13538 11.29 8.78408C11.5317 8.66898 11.7375 8.56872 11.8824 8.45096Z' fill='#8254C6'/>\r\n<path d='M11.4283 6.65346L11.3328 6.69502M11.4283 6.65346C11.3883 6.56179 11.4067 6.45679 11.475 6.38346C11.5433 6.31012 11.6483 6.28512 11.7417 6.31846L8.60001 11.2935C8.74834 9.34346 10.225 8.62679 11.0283 8.24012C11.235 8.14179 11.4133 8.05512 11.4983 7.98346C11.78 7.75179 11.5733 6.98679 11.4283 6.65346ZM11.3328 6.69502C11.4021 6.85424 11.487 7.11945 11.5201 7.37023C11.5367 7.49564 11.5395 7.61226 11.5239 7.70794C11.508 7.8045 11.4754 7.86747 11.4322 7.90299L11.4312 7.90382C11.3978 7.93195 11.3405 7.96721 11.2602 8.00976C11.1815 8.05148 11.0871 8.09679 10.9836 8.14606C10.1888 8.52861 8.67808 9.25799 8.50084 11.2291C7.1835 11.9621 6.48584 13.1654 6.48584 14.7135C6.48584 15.8094 6.85917 16.715 7.6011 17.3984C8.27959 18.0238 9.16995 18.3733 10.0157 18.5671C10.8625 18.7611 11.673 18.801 12.2 18.801C12.5021 18.801 12.7114 18.7883 12.7838 18.7828C12.931 18.7882 13.6532 18.8019 14.5388 18.6286C15.4359 18.453 16.5124 18.0833 17.3253 17.3072C18.1168 16.55 18.5158 15.5413 18.5158 14.3168C18.5158 12.9993 18.009 11.9073 17.0128 11.071C17.0532 10.8871 17.0742 10.7002 17.0742 10.5118C17.0742 9.89809 16.7401 9.32861 16.2584 8.82507C15.7755 8.32023 15.1327 7.8695 14.4885 7.49153C13.1997 6.73533 11.8854 6.25939 11.7769 6.22044C11.6446 6.17314 11.4956 6.20856 11.3988 6.31247C11.3025 6.41585 11.2761 6.56497 11.3328 6.69502ZM12.1258 11.1404C12.11 11.1398 11.683 11.1214 11.0844 11.189C10.4747 11.2579 9.69574 11.415 8.99688 11.7649C8.39397 12.0684 7.94475 12.4672 7.64579 12.9563C7.34673 13.4455 7.19417 14.031 7.19417 14.7135C7.19417 15.6114 7.49464 16.3373 8.08063 16.8769C8.85115 17.5876 10.0033 17.8917 10.9814 18.0147C11.4681 18.0759 11.907 18.0917 12.226 18.0919C12.3855 18.0921 12.5147 18.0884 12.6049 18.0844C12.693 18.0807 12.7418 18.0768 12.7452 18.0766L12.7509 18.076H12.7567H12.7883L12.7945 18.0762C12.7942 18.0761 12.8044 18.0766 12.8255 18.0771C12.8459 18.0775 12.8755 18.078 12.9133 18.078C12.9891 18.0782 13.0979 18.0767 13.2324 18.0706C13.5016 18.0584 13.8731 18.0274 14.2889 17.9528C15.1236 17.8032 16.1231 17.4807 16.8381 16.7965C17.481 16.1825 17.8092 15.353 17.8092 14.3201C17.8092 13.3053 17.4513 12.4562 16.7443 11.782C16.351 12.489 15.6772 12.9794 15.0879 13.2978C14.4632 13.6353 13.9197 13.787 13.8686 13.8007C13.7779 13.825 13.6812 13.8123 13.5999 13.7654C13.5185 13.7186 13.4591 13.6414 13.4345 13.5509C13.3827 13.3618 13.494 13.1683 13.6822 13.1164C13.726 13.1037 14.2458 12.9526 14.8183 12.6325C15.4143 12.2993 16.0457 11.7949 16.2742 11.0931C16.3359 10.9018 16.3658 10.7109 16.3658 10.5118C16.3658 10.1831 16.2047 9.84335 15.9216 9.50262C15.6393 9.16283 15.2437 8.83184 14.7947 8.52304C13.9649 7.95226 12.9664 7.46648 12.2031 7.14668C12.2359 7.32955 12.2538 7.52971 12.2352 7.72439C12.2096 7.99273 12.1136 8.25971 11.8831 8.45038L11.8824 8.45096C11.7375 8.56872 11.5317 8.66898 11.29 8.78408C10.5603 9.13538 9.55662 9.627 9.27006 10.8771C10.6779 10.3621 12.0966 10.4294 12.1666 10.4327L12.168 10.4328C12.363 10.4445 12.5118 10.6096 12.5024 10.8051C12.4929 11.0015 12.3216 11.1527 12.1302 11.1407L12.1258 11.1404ZM12.1258 11.1404C12.1262 11.1404 12.1259 11.1404 12.1258 11.1404Z' stroke='#8254C6' stroke-width='0.2'/>\r\n<path d='M14.7133 17.2101C14.7317 17.2101 14.7517 17.2085 14.7717 17.2035C15.845 16.9485 16.5983 16.4368 17.0133 15.6818C17.675 14.4785 17.215 13.1118 17.195 13.0551C17.1732 12.9928 17.1277 12.9416 17.0685 12.9126C17.0092 12.8836 16.9409 12.8791 16.8783 12.9001C16.7483 12.9451 16.6783 13.0868 16.7233 13.2168C16.7283 13.2285 17.13 14.4368 16.5733 15.4435C16.2283 16.0668 15.5833 16.4951 14.6567 16.7151C14.5217 16.7468 14.44 16.8818 14.4717 17.0168C14.4983 17.1318 14.6 17.2101 14.7133 17.2101Z' fill='#8254C6'/>\r\n</g>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_191_515'>\r\n<rect width='25' height='25' fill='white'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n",
              iconselect:
                "<svg width='25' height='25' viewBox='0 0 25 25' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_191_515)'>\r\n<mask id='mask0_191_515' style='mask-type:luminance' maskUnits='userSpaceOnUse' x='0' y='0' width='25' height='25'>\r\n<path d='M25 0H0V25H25V0Z' fill='white'/>\r\n</mask>\r\n<g mask='url(#mask0_191_515)'>\r\n<path d='M21.3388 3.66114C18.9779 1.30024 15.8389 0 12.5 0C9.16115 0 6.02214 1.30024 3.66114 3.66114C1.30024 6.02214 0 9.16115 0 12.5C0 15.8389 1.30024 18.9779 3.66118 21.3389C6.02214 23.6997 9.16115 25 12.5 25C15.8389 25 18.9779 23.6997 21.3389 21.3389C23.6997 18.9779 25 15.8389 25 12.5C25 9.16115 23.6997 6.02214 21.3388 3.66114ZM20.303 20.3031C18.2188 22.3873 15.4476 23.5352 12.5 23.5352C9.5524 23.5352 6.7812 22.3873 4.69697 20.3031C2.6127 18.2187 1.46484 15.4476 1.46484 12.5C1.46484 9.55245 2.6127 6.78125 4.69697 4.69692C6.7812 2.6127 9.5524 1.46484 12.5 1.46484C15.4476 1.46484 18.2188 2.6127 20.303 4.69692C22.3873 6.78125 23.5352 9.55245 23.5352 12.5C23.5352 15.4476 22.3873 18.2187 20.303 20.3031Z' fill='white'/>\r\n<path d='M11.3328 6.69502C11.4021 6.85424 11.487 7.11945 11.5201 7.37023C11.5367 7.49564 11.5395 7.61226 11.5239 7.70794C11.508 7.8045 11.4754 7.86747 11.4322 7.90299L11.4312 7.90382C11.3978 7.93195 11.3405 7.96721 11.2602 8.00976C11.1815 8.05148 11.0871 8.09679 10.9836 8.14606C10.1888 8.52861 8.67808 9.25799 8.50084 11.2291C7.1835 11.9621 6.48584 13.1654 6.48584 14.7135C6.48584 15.8094 6.85917 16.715 7.6011 17.3984C8.27959 18.0238 9.16995 18.3733 10.0157 18.5671C10.8625 18.7611 11.673 18.801 12.2 18.801C12.5021 18.801 12.7114 18.7883 12.7838 18.7828C12.931 18.7882 13.6532 18.8019 14.5388 18.6286C15.4359 18.453 16.5124 18.0833 17.3253 17.3072C18.1168 16.55 18.5158 15.5413 18.5158 14.3168C18.5158 12.9993 18.009 11.9073 17.0128 11.071C17.0532 10.8871 17.0742 10.7002 17.0742 10.5118C17.0742 9.89809 16.7401 9.32861 16.2584 8.82507C15.7755 8.32023 15.1327 7.8695 14.4885 7.49153C13.1997 6.73533 11.8854 6.25939 11.7769 6.22044C11.6446 6.17314 11.4956 6.20856 11.3988 6.31247C11.3025 6.41585 11.2761 6.56497 11.3328 6.69502ZM11.4283 6.65346C11.3883 6.56179 11.4067 6.45679 11.475 6.38346C11.5433 6.31012 11.6483 6.28512 11.7417 6.31846L8.60001 11.2935C8.74834 9.34346 10.225 8.62679 11.0283 8.24012C11.235 8.14179 11.4133 8.05512 11.4983 7.98346C11.78 7.75179 11.5733 6.98679 11.4283 6.65346ZM11.8824 8.45096L11.8831 8.45038C12.1136 8.25971 12.2096 7.99273 12.2352 7.72439C12.2538 7.52971 12.2359 7.32955 12.2031 7.14668C12.9664 7.46648 13.9649 7.95226 14.7947 8.52304C15.2437 8.83184 15.6393 9.16283 15.9216 9.50262C16.2047 9.84335 16.3658 10.1831 16.3658 10.5118C16.3658 10.7109 16.3359 10.9018 16.2742 11.0931C16.0457 11.7949 15.4143 12.2993 14.8183 12.6325C14.2458 12.9526 13.726 13.1037 13.6822 13.1164C13.494 13.1683 13.3827 13.3618 13.4345 13.5509C13.4591 13.6414 13.5185 13.7186 13.5999 13.7654C13.6812 13.8123 13.7779 13.825 13.8686 13.8007C13.9197 13.787 14.4632 13.6353 15.0879 13.2978C15.6772 12.9794 16.351 12.489 16.7443 11.782C17.4513 12.4562 17.8092 13.3053 17.8092 14.3201C17.8092 15.353 17.481 16.1825 16.8381 16.7965C16.1231 17.4807 15.1236 17.8032 14.2889 17.9528C13.8731 18.0274 13.5016 18.0584 13.2324 18.0706C13.0979 18.0767 12.9891 18.0782 12.9133 18.078C12.8755 18.078 12.8459 18.0775 12.8255 18.0771C12.8044 18.0766 12.7942 18.0761 12.7945 18.0762L12.7883 18.076H12.7567H12.7509L12.7452 18.0766C12.7418 18.0768 12.693 18.0807 12.6049 18.0844C12.5147 18.0884 12.3855 18.0921 12.226 18.0919C11.907 18.0917 11.4681 18.0759 10.9814 18.0147C10.0033 17.8917 8.85115 17.5876 8.08063 16.8769C7.49464 16.3373 7.19417 15.6114 7.19417 14.7135C7.19417 14.031 7.34673 13.4455 7.64579 12.9563C7.94475 12.4672 8.39397 12.0684 8.99688 11.7649C9.69574 11.415 10.4747 11.2579 11.0844 11.189C11.683 11.1214 12.11 11.1398 12.1258 11.1404C12.1259 11.1404 12.1262 11.1404 12.1258 11.1404L12.1302 11.1407C12.3216 11.1527 12.4929 11.0015 12.5024 10.8051C12.5118 10.6096 12.363 10.4445 12.168 10.4328L12.1666 10.4327C12.0966 10.4294 10.6779 10.3621 9.27006 10.8771C9.55662 9.627 10.5603 9.13538 11.29 8.78408C11.5317 8.66898 11.7375 8.56872 11.8824 8.45096Z' fill='white'/>\r\n<path d='M11.4283 6.65346L11.3328 6.69502M11.4283 6.65346C11.3883 6.56179 11.4067 6.45679 11.475 6.38346C11.5433 6.31012 11.6483 6.28512 11.7417 6.31846L8.60001 11.2935C8.74834 9.34346 10.225 8.62679 11.0283 8.24012C11.235 8.14179 11.4133 8.05512 11.4983 7.98346C11.78 7.75179 11.5733 6.98679 11.4283 6.65346ZM11.3328 6.69502C11.4021 6.85424 11.487 7.11945 11.5201 7.37023C11.5367 7.49564 11.5395 7.61226 11.5239 7.70794C11.508 7.8045 11.4754 7.86747 11.4322 7.90299L11.4312 7.90382C11.3978 7.93195 11.3405 7.96721 11.2602 8.00976C11.1815 8.05148 11.0871 8.09679 10.9836 8.14606C10.1888 8.52861 8.67808 9.25799 8.50084 11.2291C7.1835 11.9621 6.48584 13.1654 6.48584 14.7135C6.48584 15.8094 6.85917 16.715 7.6011 17.3984C8.27959 18.0238 9.16995 18.3733 10.0157 18.5671C10.8625 18.7611 11.673 18.801 12.2 18.801C12.5021 18.801 12.7114 18.7883 12.7838 18.7828C12.931 18.7882 13.6532 18.8019 14.5388 18.6286C15.4359 18.453 16.5124 18.0833 17.3253 17.3072C18.1168 16.55 18.5158 15.5413 18.5158 14.3168C18.5158 12.9993 18.009 11.9073 17.0128 11.071C17.0532 10.8871 17.0742 10.7002 17.0742 10.5118C17.0742 9.89809 16.7401 9.32861 16.2584 8.82507C15.7755 8.32023 15.1327 7.8695 14.4885 7.49153C13.1997 6.73533 11.8854 6.25939 11.7769 6.22044C11.6446 6.17314 11.4956 6.20856 11.3988 6.31247C11.3025 6.41585 11.2761 6.56497 11.3328 6.69502ZM12.1258 11.1404C12.11 11.1398 11.683 11.1214 11.0844 11.189C10.4747 11.2579 9.69574 11.415 8.99688 11.7649C8.39397 12.0684 7.94475 12.4672 7.64579 12.9563C7.34673 13.4455 7.19417 14.031 7.19417 14.7135C7.19417 15.6114 7.49464 16.3373 8.08063 16.8769C8.85115 17.5876 10.0033 17.8917 10.9814 18.0147C11.4681 18.0759 11.907 18.0917 12.226 18.0919C12.3855 18.0921 12.5147 18.0884 12.6049 18.0844C12.693 18.0807 12.7418 18.0768 12.7452 18.0766L12.7509 18.076H12.7567H12.7883L12.7945 18.0762C12.7942 18.0761 12.8044 18.0766 12.8255 18.0771C12.8459 18.0775 12.8755 18.078 12.9133 18.078C12.9891 18.0782 13.0979 18.0767 13.2324 18.0706C13.5016 18.0584 13.8731 18.0274 14.2889 17.9528C15.1236 17.8032 16.1231 17.4807 16.8381 16.7965C17.481 16.1825 17.8092 15.353 17.8092 14.3201C17.8092 13.3053 17.4513 12.4562 16.7443 11.782C16.351 12.489 15.6772 12.9794 15.0879 13.2978C14.4632 13.6353 13.9197 13.787 13.8686 13.8007C13.7779 13.825 13.6812 13.8123 13.5999 13.7654C13.5185 13.7186 13.4591 13.6414 13.4345 13.5509C13.3827 13.3618 13.494 13.1683 13.6822 13.1164C13.726 13.1037 14.2458 12.9526 14.8183 12.6325C15.4143 12.2993 16.0457 11.7949 16.2742 11.0931C16.3359 10.9018 16.3658 10.7109 16.3658 10.5118C16.3658 10.1831 16.2047 9.84335 15.9216 9.50262C15.6393 9.16283 15.2437 8.83184 14.7947 8.52304C13.9649 7.95226 12.9664 7.46648 12.2031 7.14668C12.2359 7.32955 12.2538 7.52971 12.2352 7.72439C12.2096 7.99273 12.1136 8.25971 11.8831 8.45038L11.8824 8.45096C11.7375 8.56872 11.5317 8.66898 11.29 8.78408C10.5603 9.13538 9.55662 9.627 9.27006 10.8771C10.6779 10.3621 12.0966 10.4294 12.1666 10.4327L12.168 10.4328C12.363 10.4445 12.5118 10.6096 12.5024 10.8051C12.4929 11.0015 12.3216 11.1527 12.1302 11.1407L12.1258 11.1404ZM12.1258 11.1404C12.1262 11.1404 12.1259 11.1404 12.1258 11.1404Z' stroke='white' stroke-width='0.2'/>\r\n<path d='M14.7133 17.2101C14.7317 17.2101 14.7517 17.2085 14.7717 17.2035C15.845 16.9485 16.5983 16.4368 17.0133 15.6818C17.675 14.4785 17.215 13.1118 17.195 13.0551C17.1732 12.9928 17.1277 12.9416 17.0685 12.9126C17.0092 12.8836 16.9409 12.8791 16.8783 12.9001C16.7483 12.9451 16.6783 13.0868 16.7233 13.2168C16.7283 13.2285 17.13 14.4368 16.5733 15.4435C16.2283 16.0668 15.5833 16.4951 14.6567 16.7151C14.5217 16.7468 14.44 16.8818 14.4717 17.0168C14.4983 17.1318 14.6 17.2101 14.7133 17.2101Z' fill='white'/>\r\n</g>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_191_515'>\r\n<rect width='25' height='25' fill='white'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
            },
            {
              value: "eggWhite",
              meaning:
                "\u0633\u0641\u06cc\u062f\u0647 \u062a\u062e\u0645 \u0645\u0631\u063a\u06cc",
              icon: "<svg width='25' height='25' viewBox='0 0 25 25' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_191_523)'>\r\n<mask id='mask0_191_523' style='mask-type:luminance' maskUnits='userSpaceOnUse' x='0' y='0' width='25' height='25'>\r\n<path d='M25 0H0V25H25V0Z' fill='white'/>\r\n</mask>\r\n<g mask='url(#mask0_191_523)'>\r\n<path d='M21.3388 3.66114C18.9779 1.30024 15.8389 0 12.5 0C9.16115 0 6.02214 1.30024 3.66114 3.66114C1.30024 6.02214 0 9.16115 0 12.5C0 15.8389 1.30024 18.9779 3.66118 21.3389C6.02214 23.6997 9.16115 25 12.5 25C15.8389 25 18.9779 23.6997 21.3389 21.3389C23.6997 18.9779 25 15.8389 25 12.5C25 9.16115 23.6997 6.02214 21.3388 3.66114ZM20.303 20.3031C18.2188 22.3873 15.4476 23.5352 12.5 23.5352C9.5524 23.5352 6.7812 22.3873 4.69697 20.3031C2.6127 18.2187 1.46484 15.4476 1.46484 12.5C1.46484 9.55245 2.6127 6.78125 4.69697 4.69692C6.7812 2.6127 9.5524 1.46484 12.5 1.46484C15.4476 1.46484 18.2188 2.6127 20.303 4.69692C22.3873 6.78125 23.5352 9.55245 23.5352 12.5C23.5352 15.4476 22.3873 18.2187 20.303 20.3031Z' fill='#8254C6'/>\r\n</g>\r\n<g clip-path='url(#clip1_191_523)'>\r\n<path d='M19.6699 11.5635C19.6628 11.419 19.6558 11.2759 19.6493 11.1348C19.5653 9.29025 19.229 6.99518 17.3595 5.6084C16.4332 4.92133 15.345 4.40817 14.2951 4.16348C13.0286 3.86823 11.8638 3.97433 10.9271 4.47017C10.0687 4.92449 9.50653 5.66183 9.01046 6.3124C8.42605 7.07884 7.92133 7.74075 7.05433 7.92087C6.25404 8.08712 5.52595 8.71722 5.0041 9.6951C4.53963 10.5655 4.27319 11.6583 4.27319 12.6933C4.27319 15.0806 5.74786 15.6316 7.04892 16.1176C7.47874 16.2782 7.92321 16.4443 8.30962 16.6727C8.82193 16.9756 9.17378 17.4366 9.54634 17.9247C10.0023 18.5221 10.4738 19.1399 11.2705 19.5257C11.9197 19.8401 12.7021 20 13.5372 20C14.0918 20 14.6699 19.9294 15.2474 19.7869C16.7055 19.4268 17.9383 18.6588 18.6297 17.6799C19.8835 15.9049 19.77 13.5985 19.6699 11.5635ZM17.8312 17.116C17.2735 17.9057 16.2462 18.5333 15.013 18.8378C13.8019 19.1369 12.5622 19.0652 11.6968 18.6459C11.1096 18.3616 10.7278 17.8613 10.3235 17.3316C9.91047 16.7905 9.48346 16.231 8.80715 15.8312C8.3463 15.5588 7.86068 15.3773 7.39108 15.2019C6.14851 14.7377 5.25079 14.4022 5.25079 12.6933C5.25079 10.8824 6.18648 9.0996 7.25314 8.878C8.47743 8.62366 9.14359 7.75003 9.78781 6.90512C10.2651 6.27918 10.7159 5.68799 11.3844 5.33418C11.8571 5.08396 12.3878 4.97499 12.9406 4.97499C14.2567 4.97499 15.6978 5.5929 16.7771 6.39352C18.316 7.53506 18.5985 9.55079 18.6728 11.1794C18.6793 11.3217 18.6864 11.4659 18.6935 11.6116C18.7859 13.4887 18.8905 15.6162 17.8312 17.116Z' fill='#8254C6'/>\r\n<path d='M13.576 9.60248C11.5333 9.60248 9.87134 11.2644 9.87134 13.3071C9.87134 15.3499 11.5333 17.0119 13.576 17.0119C15.6188 17.0119 17.2807 15.3499 17.2807 13.3071C17.2807 11.2644 15.6188 9.60248 13.576 9.60248ZM13.576 16.0343C12.0723 16.0343 10.8489 14.8109 10.8489 13.3072C10.8489 11.8035 12.0723 10.5801 13.576 10.5801C15.0798 10.5801 16.3031 11.8035 16.3031 13.3072C16.3032 14.8109 15.0798 16.0343 13.576 16.0343Z' fill='#8254C6'/>\r\n<path d='M12.331 13.099L12.3316 13.1025L11.3669 13.2607C11.3778 13.3267 11.6507 14.8826 13.2805 15.4259L13.5896 14.4985C12.5304 14.1454 12.3387 13.1416 12.331 13.099Z' fill='#8254C6'/>\r\n</g>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_191_523'>\r\n<rect width='25' height='25' fill='white'/>\r\n</clipPath>\r\n<clipPath id='clip1_191_523'>\r\n<rect width='16' height='16' fill='white' transform='translate(4 4)'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n",
              iconselect:
                "<svg width='25' height='25' viewBox='0 0 25 25' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_191_523)'>\r\n<mask id='mask0_191_523' style='mask-type:luminance' maskUnits='userSpaceOnUse' x='0' y='0' width='25' height='25'>\r\n<path d='M25 0H0V25H25V0Z' fill='white'/>\r\n</mask>\r\n<g mask='url(#mask0_191_523)'>\r\n<path d='M21.3388 3.66114C18.9779 1.30024 15.8389 0 12.5 0C9.16115 0 6.02214 1.30024 3.66114 3.66114C1.30024 6.02214 0 9.16115 0 12.5C0 15.8389 1.30024 18.9779 3.66118 21.3389C6.02214 23.6997 9.16115 25 12.5 25C15.8389 25 18.9779 23.6997 21.3389 21.3389C23.6997 18.9779 25 15.8389 25 12.5C25 9.16115 23.6997 6.02214 21.3388 3.66114ZM20.303 20.3031C18.2188 22.3873 15.4476 23.5352 12.5 23.5352C9.5524 23.5352 6.7812 22.3873 4.69697 20.3031C2.6127 18.2187 1.46484 15.4476 1.46484 12.5C1.46484 9.55245 2.6127 6.78125 4.69697 4.69692C6.7812 2.6127 9.5524 1.46484 12.5 1.46484C15.4476 1.46484 18.2188 2.6127 20.303 4.69692C22.3873 6.78125 23.5352 9.55245 23.5352 12.5C23.5352 15.4476 22.3873 18.2187 20.303 20.3031Z' fill='white'/>\r\n</g>\r\n<g clip-path='url(#clip1_191_523)'>\r\n<path d='M19.6699 11.5635C19.6628 11.419 19.6558 11.2759 19.6493 11.1348C19.5653 9.29025 19.229 6.99518 17.3595 5.6084C16.4332 4.92133 15.345 4.40817 14.2951 4.16348C13.0286 3.86823 11.8638 3.97433 10.9271 4.47017C10.0687 4.92449 9.50653 5.66183 9.01046 6.3124C8.42605 7.07884 7.92133 7.74075 7.05433 7.92087C6.25405 8.08712 5.52595 8.71722 5.0041 9.6951C4.53963 10.5655 4.27319 11.6583 4.27319 12.6933C4.27319 15.0806 5.74786 15.6316 7.04892 16.1176C7.47874 16.2782 7.92321 16.4443 8.30962 16.6727C8.82193 16.9756 9.17378 17.4366 9.54634 17.9247C10.0023 18.5221 10.4738 19.1399 11.2705 19.5257C11.9197 19.8401 12.7021 20 13.5372 20C14.0918 20 14.6699 19.9294 15.2474 19.7869C16.7055 19.4268 17.9383 18.6588 18.6297 17.6799C19.8835 15.9049 19.77 13.5985 19.6699 11.5635ZM17.8312 17.116C17.2735 17.9057 16.2462 18.5333 15.013 18.8378C13.8019 19.1369 12.5622 19.0652 11.6968 18.6459C11.1096 18.3616 10.7277 17.8613 10.3235 17.3316C9.91047 16.7905 9.48346 16.231 8.80715 15.8312C8.3463 15.5588 7.86068 15.3773 7.39108 15.2019C6.14851 14.7377 5.25079 14.4022 5.25079 12.6933C5.25079 10.8824 6.18648 9.0996 7.25314 8.878C8.47743 8.62366 9.14359 7.75003 9.78781 6.90512C10.2651 6.27918 10.7159 5.68799 11.3844 5.33418C11.8571 5.08396 12.3878 4.97499 12.9406 4.97499C14.2567 4.97499 15.6978 5.5929 16.7771 6.39352C18.316 7.53506 18.5985 9.55079 18.6728 11.1794C18.6793 11.3217 18.6864 11.4659 18.6935 11.6116C18.7859 13.4887 18.8905 15.6162 17.8312 17.116Z' fill='white'/>\r\n<path d='M13.576 9.60248C11.5333 9.60248 9.87134 11.2644 9.87134 13.3071C9.87134 15.3499 11.5333 17.0119 13.576 17.0119C15.6188 17.0119 17.2807 15.3499 17.2807 13.3071C17.2807 11.2644 15.6188 9.60248 13.576 9.60248ZM13.576 16.0343C12.0723 16.0343 10.8489 14.8109 10.8489 13.3072C10.8489 11.8035 12.0723 10.5801 13.576 10.5801C15.0798 10.5801 16.3031 11.8035 16.3031 13.3072C16.3032 14.8109 15.0798 16.0343 13.576 16.0343Z' fill='white'/>\r\n<path d='M12.331 13.099L12.3316 13.1025L11.3669 13.2607C11.3778 13.3267 11.6507 14.8826 13.2805 15.4259L13.5896 14.4985C12.5304 14.1454 12.3387 13.1416 12.331 13.099Z' fill='white'/>\r\n</g>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_191_523'>\r\n<rect width='25' height='25' fill='white'/>\r\n</clipPath>\r\n<clipPath id='clip1_191_523'>\r\n<rect width='16' height='16' fill='white' transform='translate(4 4)'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
            },
            {
              value: "watery",
              meaning: "\u0622\u0628\u06a9\u06cc",
              icon: "<svg width='25' height='25' viewBox='0 0 25 25' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_191_557)'>\r\n<mask id='mask0_191_557' style='mask-type:luminance' maskUnits='userSpaceOnUse' x='0' y='0' width='25' height='25'>\r\n<path d='M25 0H0V25H25V0Z' fill='white'/>\r\n</mask>\r\n<g mask='url(#mask0_191_557)'>\r\n<path d='M21.3388 3.66114C18.9779 1.30024 15.8389 0 12.5 0C9.16115 0 6.02214 1.30024 3.66114 3.66114C1.30024 6.02214 0 9.16115 0 12.5C0 15.8389 1.30024 18.9779 3.66118 21.3389C6.02214 23.6997 9.16115 25 12.5 25C15.8389 25 18.9779 23.6997 21.3389 21.3389C23.6997 18.9779 25 15.8389 25 12.5C25 9.16115 23.6997 6.02214 21.3388 3.66114ZM20.303 20.3031C18.2188 22.3873 15.4476 23.5352 12.5 23.5352C9.5524 23.5352 6.7812 22.3873 4.69697 20.3031C2.6127 18.2187 1.46484 15.4476 1.46484 12.5C1.46484 9.55245 2.6127 6.78125 4.69697 4.69692C6.7812 2.6127 9.5524 1.46484 12.5 1.46484C15.4476 1.46484 18.2188 2.6127 20.303 4.69692C22.3873 6.78125 23.5352 9.55245 23.5352 12.5C23.5352 15.4476 22.3873 18.2187 20.303 20.3031Z' fill='#8254C6'/>\r\n<path d='M14.5968 14.9384C13.813 14.9384 13.1776 15.5808 13.1776 16.3731V16.7945C13.1776 17.5869 13.813 18.2291 14.5968 18.2291C15.3806 18.2291 16.0159 17.5868 16.0159 16.7945V16.3731C16.0159 15.5808 15.3805 14.9384 14.5968 14.9384Z' stroke='#8254C6' stroke-miterlimit='10' stroke-linecap='round' stroke-linejoin='round'/>\r\n</g>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_191_557'>\r\n<rect width='25' height='25' fill='white'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n",
              iconselect:
                "<svg width='25' height='25' viewBox='0 0 25 25' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_191_557)'>\r\n<mask id='mask0_191_557' style='mask-type:luminance' maskUnits='userSpaceOnUse' x='0' y='0' width='25' height='25'>\r\n<path d='M25 0H0V25H25V0Z' fill='white'/>\r\n</mask>\r\n<g mask='url(#mask0_191_557)'>\r\n<path d='M21.3388 3.66114C18.9779 1.30024 15.8389 0 12.5 0C9.16115 0 6.02214 1.30024 3.66114 3.66114C1.30024 6.02214 0 9.16115 0 12.5C0 15.8389 1.30024 18.9779 3.66118 21.3389C6.02214 23.6997 9.16115 25 12.5 25C15.8389 25 18.9779 23.6997 21.3389 21.3389C23.6997 18.9779 25 15.8389 25 12.5C25 9.16115 23.6997 6.02214 21.3388 3.66114ZM20.303 20.3031C18.2188 22.3873 15.4476 23.5352 12.5 23.5352C9.5524 23.5352 6.7812 22.3873 4.69697 20.3031C2.6127 18.2187 1.46484 15.4476 1.46484 12.5C1.46484 9.55245 2.6127 6.78125 4.69697 4.69692C6.7812 2.6127 9.5524 1.46484 12.5 1.46484C15.4476 1.46484 18.2188 2.6127 20.303 4.69692C22.3873 6.78125 23.5352 9.55245 23.5352 12.5C23.5352 15.4476 22.3873 18.2187 20.303 20.3031Z' fill='white'/>\r\n<path d='M14.5968 14.9384C13.813 14.9384 13.1776 15.5808 13.1776 16.3731V16.7945C13.1776 17.5869 13.813 18.2291 14.5968 18.2291C15.3806 18.2291 16.0159 17.5868 16.0159 16.7945V16.3731C16.0159 15.5808 15.3805 14.9384 14.5968 14.9384Z' stroke='white' stroke-miterlimit='10' stroke-linecap='round' stroke-linejoin='round'/>\r\n</g>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_191_557'>\r\n<rect width='25' height='25' fill='white'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
            },
            {
              value: "unusual",
              meaning: "\u063a\u06cc\u0631 \u0645\u0639\u0645\u0648\u0644",
              icon: "<svg width='25' height='25' viewBox='0 0 25 25' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_191_549)'>\r\n<mask id='mask0_191_549' style='mask-type:luminance' maskUnits='userSpaceOnUse' x='0' y='0' width='25' height='25'>\r\n<path d='M25 0H0V25H25V0Z' fill='white'/>\r\n</mask>\r\n<g mask='url(#mask0_191_549)'>\r\n<path d='M21.3388 3.66114C18.9779 1.30024 15.8389 0 12.5 0C9.16115 0 6.02214 1.30024 3.66114 3.66114C1.30024 6.02214 0 9.16115 0 12.5C0 15.8389 1.30024 18.9779 3.66118 21.3389C6.02214 23.6997 9.16115 25 12.5 25C15.8389 25 18.9779 23.6997 21.3389 21.3389C23.6997 18.9779 25 15.8389 25 12.5C25 9.16115 23.6997 6.02214 21.3388 3.66114ZM20.303 20.3031C18.2188 22.3873 15.4476 23.5352 12.5 23.5352C9.5524 23.5352 6.7812 22.3873 4.69697 20.3031C2.6127 18.2187 1.46484 15.4476 1.46484 12.5C1.46484 9.55245 2.6127 6.78125 4.69697 4.69692C6.7812 2.6127 9.5524 1.46484 12.5 1.46484C15.4476 1.46484 18.2188 2.6127 20.303 4.69692C22.3873 6.78125 23.5352 9.55245 23.5352 12.5C23.5352 15.4476 22.3873 18.2187 20.303 20.3031Z' fill='#8254C6'/>\r\n<path d='M13.2812 11.4583C13.2812 11.2511 13.199 11.0524 13.0524 10.9059C12.9059 10.7594 12.7072 10.6771 12.5 10.6771C12.2928 10.6771 12.0941 10.7594 11.9476 10.9059C11.801 11.0524 11.7188 11.2511 11.7188 11.4583V17.7083C11.7188 17.9155 11.801 18.1142 11.9476 18.2608C12.0941 18.4073 12.2928 18.4896 12.5 18.4896C12.7072 18.4896 12.9059 18.4073 13.0524 18.2608C13.199 18.1142 13.2812 17.9155 13.2812 17.7083V11.4583Z' fill='#8254C6'/>\r\n<path d='M13.5417 8.33335C13.5417 8.6096 13.432 8.87455 13.2366 9.06992C13.0412 9.26528 12.7763 9.37502 12.5 9.37502C12.2238 9.37502 11.9588 9.26528 11.7635 9.06992C11.5681 8.87455 11.4584 8.6096 11.4584 8.33335C11.4584 8.0571 11.5681 7.79216 11.7635 7.59679C11.9588 7.40143 12.2238 7.29169 12.5 7.29169C12.7763 7.29169 13.0412 7.40143 13.2366 7.59679C13.432 7.79216 13.5417 8.0571 13.5417 8.33335Z' fill='#8254C6'/>\r\n</g>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_191_549'>\r\n<rect width='25' height='25' fill='white'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n",
              iconselect:
                "<svg width='25' height='25' viewBox='0 0 25 25' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_191_549)'>\r\n<mask id='mask0_191_549' style='mask-type:luminance' maskUnits='userSpaceOnUse' x='0' y='0' width='25' height='25'>\r\n<path d='M25 0H0V25H25V0Z' fill='white'/>\r\n</mask>\r\n<g mask='url(#mask0_191_549)'>\r\n<path d='M21.3388 3.66114C18.9779 1.30024 15.8389 0 12.5 0C9.16115 0 6.02214 1.30024 3.66114 3.66114C1.30024 6.02214 0 9.16115 0 12.5C0 15.8389 1.30024 18.9779 3.66118 21.3389C6.02214 23.6997 9.16115 25 12.5 25C15.8389 25 18.9779 23.6997 21.3389 21.3389C23.6997 18.9779 25 15.8389 25 12.5C25 9.16115 23.6997 6.02214 21.3388 3.66114ZM20.303 20.3031C18.2188 22.3873 15.4476 23.5352 12.5 23.5352C9.5524 23.5352 6.7812 22.3873 4.69697 20.3031C2.6127 18.2187 1.46484 15.4476 1.46484 12.5C1.46484 9.55245 2.6127 6.78125 4.69697 4.69692C6.7812 2.6127 9.5524 1.46484 12.5 1.46484C15.4476 1.46484 18.2188 2.6127 20.303 4.69692C22.3873 6.78125 23.5352 9.55245 23.5352 12.5C23.5352 15.4476 22.3873 18.2187 20.303 20.3031Z' fill='white'/>\r\n<path d='M13.2812 11.4583C13.2812 11.2511 13.199 11.0524 13.0524 10.9059C12.9059 10.7594 12.7072 10.6771 12.5 10.6771C12.2928 10.6771 12.0941 10.7594 11.9476 10.9059C11.801 11.0524 11.7188 11.2511 11.7188 11.4583V17.7083C11.7188 17.9155 11.801 18.1142 11.9476 18.2608C12.0941 18.4073 12.2928 18.4896 12.5 18.4896C12.7072 18.4896 12.9059 18.4073 13.0524 18.2608C13.199 18.1142 13.2812 17.9155 13.2812 17.7083V11.4583Z' fill='white'/>\r\n<path d='M13.5417 8.33335C13.5417 8.6096 13.432 8.87455 13.2366 9.06992C13.0412 9.26528 12.7763 9.37502 12.5 9.37502C12.2238 9.37502 11.9588 9.26528 11.7635 9.06992C11.5681 8.87455 11.4584 8.6096 11.4584 8.33335C11.4584 8.0571 11.5681 7.79216 11.7635 7.59679C11.9588 7.40143 12.2238 7.29169 12.5 7.29169C12.7763 7.29169 13.0412 7.40143 13.2366 7.59679C13.432 7.79216 13.5417 8.0571 13.5417 8.33335Z' fill='white'/>\r\n</g>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_191_549'>\r\n<rect width='25' height='25' fill='white'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
            }
          ],
          Status: [
            {
              value: "happy",
              meaning: "\u062e\u0648\u0634\u062d\u0627\u0644",
              icon: "\ud83d\ude04"
            },
            {
              value: "calm",
              meaning: "\u0622\u0631\u0627\u0645",
              icon: "\ud83d\ude42"
            },
            {
              value: "depressed",
              meaning: "\u0627\u0641\u0633\u0631\u062f\u0647",
              icon: "\ud83d\ude41"
            },
            {
              value: "sad",
              meaning: "\u0646\u0627\u0631\u0627\u062d\u062a",
              icon: "\ud83d\ude22"
            },
            {
              value: "tired",
              meaning: "\u062e\u0633\u062a\u0647",
              icon: "\ud83e\udd71"
            },
            {
              value: "sick",
              meaning: "\u0645\u0631\u064a\u0636",
              icon: "\ud83e\udd12"
            },
            {
              value: "angry",
              meaning: "\u0639\u0635\u0628\u0627\u0646\u06cc",
              icon: "\ud83d\ude20"
            }
          ],
          sex: [
            {
              value: "any",
              meaning:
                " \u0631\u0627\u0628\u0637\u0647 \u0646\u062f\u0627\u0634\u062a\u0645 ",
              icon: "\ud83d\ude04"
            },
            {
              value: "noProtected",
              meaning:
                "\u0645\u062d\u0627\u0641\u0638\u062a \u0646\u0634\u062f\u0647",
              icon: "\ud83d\ude42"
            },
            {
              value: "protected",
              meaning:
                " \u0645\u062d\u0627\u0641\u0638\u062a \u0634\u062f\u0647 ",
              icon: "\ud83d\ude41"
            }
          ]
        })
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "color.selectOne",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "intensity.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.inDay.Intensity || [];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "intensity.selectOne",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "water",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.inDay.Water || 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "waters",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.inDay.Waters || 8;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 8;
              }
              throw e;
            }
          })()
      },
      {
        path: "dialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pickers.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 8
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "discharge.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.inDay.Discharge || [];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "discharge.selectOne",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "status.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.inDay.Status || [];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "status.selectOne",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "medicine.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button7.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "inputnameMedicine.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "numberOfMedicin.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "allMedicine",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            name: "\u0627\u0633\u062a\u0627\u0645\u06cc\u0646\u0648\u0641\u0646",
            english_name: "Acetaminophen"
          },
          {
            name: "\u0627\u0633\u062a\u0627\u0645\u06cc\u0646\u0648\u0641\u0646 \u06a9\u062f\u0626\u06cc\u0646",
            english_name: "Acetaminophen with Codeine"
          },
          {
            name: "\u0627\u0633\u062a\u0627\u0645\u06cc\u0646\u0648\u0641\u0646 \u06a9\u0627\u0641\u0626\u06cc\u0646",
            english_name: "Acetaminophen with Caffeine"
          },
          {
            name: "\u0622\u0633\u067e\u0631\u06cc\u0646",
            english_name: "Aspirin"
          },
          { name: "\u0698\u0644\u0648\u0641\u0646", english_name: "Ibuprofen" },
          {
            name: "\u0646\u0627\u067e\u0631\u0648\u06a9\u0633\u0646",
            english_name: "Naproxen"
          },
          {
            name: "\u062f\u06cc\u06a9\u0644\u0648\u0641\u0646\u0627\u06a9",
            english_name: "Diclofenac"
          },
          {
            name: "\u0633\u06cc\u062a\u0631\u06cc\u0632\u06cc\u0646",
            english_name: "Cetirizine"
          },
          {
            name: "\u0644\u0648\u0631\u0627\u062a\u0627\u062f\u06cc\u0646",
            english_name: "Loratadine"
          },
          {
            name: "\u0627\u0648\u0645\u067e\u0631\u0627\u0632\u0648\u0644",
            english_name: "Omeprazole"
          },
          {
            name: "\u0631\u0627\u0646\u06cc\u062a\u06cc\u062f\u06cc\u0646",
            english_name: "Ranitidine"
          },
          {
            name: "\u0641\u0627\u0645\u0648\u062a\u06cc\u062f\u06cc\u0646",
            english_name: "Famotidine"
          },
          {
            name: "\u0645\u062a\u0648\u06a9\u0644\u0648\u067e\u0631\u0627\u0645\u06cc\u062f",
            english_name: "Metoclopramide"
          },
          {
            name: "\u062f\u0648\u0645\u067e\u0631\u06cc\u062f\u0648\u0646",
            english_name: "Domperidone"
          },
          {
            name: "\u067e\u0631\u0648\u067e\u0631\u0627\u0646\u0648\u0644\u0648\u0644",
            english_name: "Propranolol"
          },
          {
            name: "\u0622\u062a\u0648\u0631\u0648\u0627\u0633\u062a\u0627\u062a\u06cc\u0646",
            english_name: "Atorvastatin"
          },
          {
            name: "\u0633\u06cc\u0645\u0648\u0627\u0633\u062a\u0627\u062a\u06cc\u0646",
            english_name: "Simvastatin"
          },
          {
            name: "\u0641\u0631\u0648\u0633 \u0633\u0648\u0644\u0641\u0627\u062a",
            english_name: "Ferrous Sulfate"
          },
          {
            name: "\u0648\u06cc\u062a\u0627\u0645\u06cc\u0646 D",
            english_name: "Vitamin D"
          },
          {
            name: "\u0648\u06cc\u062a\u0627\u0645\u06cc\u0646 C",
            english_name: "Vitamin C"
          },
          {
            name: "\u0648\u06cc\u062a\u0627\u0645\u06cc\u0646 B12",
            english_name: "Vitamin B12"
          },
          {
            name: "\u0648\u06cc\u062a\u0627\u0645\u06cc\u0646 B \u06a9\u0645\u067e\u0644\u06a9\u0633",
            english_name: "Vitamin B Complex"
          },
          { name: "\u0627\u0645\u06af\u0627 3", english_name: "Omega-3" },
          { name: "\u06a9\u0644\u0633\u06cc\u0645", english_name: "Calcium" },
          {
            name: "\u0645\u0646\u06cc\u0632\u06cc\u0645",
            english_name: "Magnesium"
          },
          { name: "\u0631\u0648\u06cc", english_name: "Zinc" },
          {
            name: "\u0641\u0648\u0644\u06cc\u06a9 \u0627\u0633\u06cc\u062f",
            english_name: "Folic Acid"
          },
          {
            name: "\u067e\u0646\u06cc\u200c\u0633\u06cc\u0644\u06cc\u0646",
            english_name: "Penicillin"
          },
          {
            name: "\u0622\u0645\u0648\u06a9\u0633\u06cc\u200c\u0633\u06cc\u0644\u06cc\u0646",
            english_name: "Amoxicillin"
          },
          {
            name: "\u0633\u06cc\u067e\u0631\u0648\u0641\u0644\u0648\u06a9\u0633\u0627\u0633\u06cc\u0646",
            english_name: "Ciprofloxacin"
          },
          {
            name: "\u0622\u0632\u06cc\u062a\u0631\u0648\u0645\u0627\u06cc\u0633\u06cc\u0646",
            english_name: "Azithromycin"
          },
          {
            name: "\u062f\u0627\u06a9\u0633\u06cc\u200c\u0633\u0627\u06cc\u06a9\u0644\u06cc\u0646",
            english_name: "Doxycycline"
          },
          {
            name: "\u067e\u0627\u0631\u0627\u0633\u062a\u0627\u0645\u0648\u0644",
            english_name: "Paracetamol"
          },
          {
            name: "\u06a9\u0644\u0631\u0641\u0646\u06cc\u0631\u0627\u0645\u06cc\u0646",
            english_name: "Chlorpheniramine"
          },
          {
            name: "\u0641\u06a9\u0633\u0648\u0641\u0646\u0627\u062f\u06cc\u0646",
            english_name: "Fexofenadine"
          },
          {
            name: "\u0645\u0648\u0644\u062a\u06cc\u200c\u0648\u06cc\u062a\u0627\u0645\u06cc\u0646",
            english_name: "Multivitamin"
          },
          {
            name: "\u06af\u0627\u0628\u0627\u067e\u0646\u062a\u06cc\u0646",
            english_name: "Gabapentin"
          },
          {
            name: "\u067e\u0631\u06af\u0627\u0628\u0627\u0644\u06cc\u0646",
            english_name: "Pregabalin"
          },
          {
            name: "\u062a\u0631\u0627\u0645\u0627\u062f\u0648\u0644",
            english_name: "Tramadol"
          },
          {
            name: "\u0645\u0648\u0631\u0641\u06cc\u0646",
            english_name: "Morphine"
          },
          { name: "\u06a9\u062f\u0626\u06cc\u0646", english_name: "Codeine" },
          {
            name: "\u0647\u06cc\u062f\u0631\u0648\u06a9\u0648\u062f\u0648\u0646",
            english_name: "Hydrocodone"
          },
          {
            name: "\u0648\u0627\u0644\u067e\u0631\u0648\u0626\u06cc\u06a9 \u0627\u0633\u06cc\u062f",
            english_name: "Valproic Acid"
          },
          {
            name: "\u06a9\u0627\u0631\u0628\u0627\u0645\u0627\u0632\u067e\u06cc\u0646",
            english_name: "Carbamazepine"
          },
          {
            name: "\u0641\u0646\u06cc\u200c\u062a\u0648\u0626\u06cc\u0646",
            english_name: "Phenytoin"
          },
          {
            name: "\u0641\u0644\u0648\u06a9\u0633\u062a\u06cc\u0646",
            english_name: "Fluoxetine"
          },
          {
            name: "\u0633\u0631\u062a\u0631\u0627\u0644\u06cc\u0646",
            english_name: "Sertraline"
          },
          {
            name: "\u067e\u0627\u0631\u0648\u06a9\u0633\u062a\u06cc\u0646",
            english_name: "Paroxetine"
          },
          {
            name: "\u0627\u0644\u067e\u0631\u0627\u0632\u0648\u0644\u0627\u0645",
            english_name: "Alprazolam"
          },
          {
            name: "\u06a9\u0644\u0648\u0646\u0627\u0632\u067e\u0627\u0645",
            english_name: "Clonazepam"
          },
          {
            name: "\u062f\u06cc\u0627\u0632\u067e\u0627\u0645",
            english_name: "Diazepam"
          },
          {
            name: "\u0644\u0648\u0631\u0627\u0632\u067e\u0627\u0645",
            english_name: "Lorazepam"
          },
          {
            name: "\u0632\u0648\u0644\u067e\u06cc\u062f\u0645",
            english_name: "Zolpidem"
          },
          {
            name: "\u0645\u0644\u0627\u06a9\u0633\u06cc\u0646",
            english_name: "Melatonin"
          },
          {
            name: "\u0645\u062a\u0641\u0631\u0645\u06cc\u0646",
            english_name: "Metformin"
          },
          {
            name: "\u0627\u0646\u0633\u0648\u0644\u06cc\u0646",
            english_name: "Insulin"
          },
          {
            name: "\u06af\u0644\u06cc\u200c\u0628\u0646 \u06a9\u0644\u0627\u0645\u06cc\u062f",
            english_name: "Glibenclamide"
          },
          {
            name: "\u06af\u0644\u06cc\u200c\u06a9\u0644\u0627\u0632\u06cc\u062f",
            english_name: "Gliclazide"
          },
          {
            name: "\u0644\u06cc\u0632\u0648\u067e\u0631\u06cc\u0644",
            english_name: "Lisinopril"
          },
          {
            name: "\u0648\u0627\u0644\u0632\u0627\u0631\u062a\u0627\u0646",
            english_name: "Valsartan"
          },
          {
            name: "\u0622\u0645\u0644\u0648\u062f\u06cc\u067e\u06cc\u0646",
            english_name: "Amlodipine"
          },
          {
            name: "\u0646\u06cc\u0641\u062f\u06cc\u067e\u06cc\u0646",
            english_name: "Nifedipine"
          },
          {
            name: "\u0648\u0631\u0627\u067e\u0627\u0645\u06cc\u0644",
            english_name: "Verapamil"
          },
          {
            name: "\u062f\u06cc\u06af\u0648\u06a9\u0633\u06cc\u0646",
            english_name: "Digoxin"
          },
          {
            name: "\u0648\u0627\u0631\u0641\u0627\u0631\u06cc\u0646",
            english_name: "Warfarin"
          },
          {
            name: "\u0647\u067e\u0627\u0631\u06cc\u0646",
            english_name: "Heparin"
          },
          {
            name: "\u0641\u0648\u0631\u0648\u0632\u0645\u0627\u06cc\u062f",
            english_name: "Furosemide"
          },
          {
            name: "\u0627\u0633\u067e\u06cc\u0631\u0648\u0646\u0648\u0644\u0627\u06a9\u062a\u0648\u0646",
            english_name: "Spironolactone"
          },
          {
            name: "\u0647\u06cc\u062f\u0631\u0648\u06a9\u0644\u0631\u0648\u062a\u06cc\u0627\u0632\u06cc\u062f",
            english_name: "Hydrochlorothiazide"
          },
          {
            name: "\u067e\u0631\u062f\u0646\u06cc\u0632\u0648\u0644\u0648\u0646",
            english_name: "Prednisolone"
          },
          {
            name: "\u062f\u06af\u0632\u0627\u0645\u062a\u0627\u0632\u0648\u0646",
            english_name: "Dexamethasone"
          },
          {
            name: "\u0628\u062a\u0627\u0645\u062a\u0627\u0632\u0648\u0646",
            english_name: "Betamethasone"
          },
          {
            name: "\u0641\u0644\u0648\u062a\u06cc\u06a9\u0627\u0632\u0648\u0646",
            english_name: "Fluticasone"
          },
          {
            name: "\u0628\u0648\u062f\u0632\u0648\u0646\u0627\u06cc\u062f",
            english_name: "Budesonide"
          },
          {
            name: "\u0645\u0648\u0646\u062a\u0644\u0648\u06a9\u0627\u0633\u062a",
            english_name: "Montelukast"
          },
          {
            name: "\u0633\u0627\u0644\u0628\u0648\u062a\u0627\u0645\u0648\u0644",
            english_name: "Salbutamol"
          },
          {
            name: "\u0627\u06cc\u067e\u0631\u0627\u062a\u0631\u0648\u067e\u06cc\u0648\u0645",
            english_name: "Ipratropium"
          },
          {
            name: "\u062a\u0626\u0648\u0641\u06cc\u0644\u06cc\u0646",
            english_name: "Theophylline"
          },
          {
            name: "\u0641\u0646\u0648\u0628\u0627\u0631\u0628\u06cc\u062a\u0627\u0644",
            english_name: "Phenobarbital"
          },
          {
            name: "\u067e\u0646\u062a\u0648\u067e\u0631\u0627\u0632\u0648\u0644",
            english_name: "Pantoprazole"
          },
          {
            name: "\u0644\u0627\u0646\u0632\u0648\u067e\u0631\u0627\u0632\u0648\u0644",
            english_name: "Lansoprazole"
          },
          {
            name: "\u0631\u0628\u067e\u0631\u0627\u0632\u0648\u0644",
            english_name: "Rabeprazole"
          },
          {
            name: "\u0633\u0648\u06a9\u0631\u0627\u0644\u0641\u0627\u062a",
            english_name: "Sucralfate"
          },
          {
            name: "\u0628\u06cc\u0633\u0645\u0648\u062a \u0633\u0627\u0628\u200c\u0633\u06cc\u062a\u0631\u0627\u062a",
            english_name: "Bismuth Subcitrate"
          },
          {
            name: "\u0645\u062a\u0631\u0648\u0646\u06cc\u062f\u0627\u0632\u0648\u0644",
            english_name: "Metronidazole"
          },
          {
            name: "\u06a9\u0644\u0627\u0631\u06cc\u062a\u0631\u0648\u0645\u0627\u06cc\u0633\u06cc\u0646",
            english_name: "Clarithromycin"
          },
          {
            name: "\u062a\u062a\u0631\u0627\u0633\u0627\u06cc\u06a9\u0644\u06cc\u0646",
            english_name: "Tetracycline"
          },
          {
            name: "\u0648\u0627\u0646\u06a9\u0648\u0645\u0627\u06cc\u0633\u06cc\u0646",
            english_name: "Vancomycin"
          },
          {
            name: "\u0645\u06cc\u06a9\u0648\u0641\u0646\u0648\u0644\u0627\u062a",
            english_name: "Mycophenolate"
          },
          {
            name: "\u0633\u06cc\u06a9\u0644\u0648\u0633\u067e\u0648\u0631\u06cc\u0646",
            english_name: "Cyclosporine"
          },
          {
            name: "\u062a\u0627\u06a9\u0631\u0648\u0644\u06cc\u0645\u0648\u0633",
            english_name: "Tacrolimus"
          },
          {
            name: "\u0633\u06cc\u067e\u0631\u0648\u0647\u067e\u062a\u0627\u062f\u06cc\u0646",
            english_name: "Cyproheptadine"
          },
          {
            name: "\u0641\u0646\u0627\u0632\u0648\u067e\u06cc\u0631\u06cc\u062f\u06cc\u0646",
            english_name: "Phenazopyridine"
          },
          {
            name: "\u0641\u0646\u06cc\u0644\u200c\u0641\u0631\u06cc\u0646",
            english_name: "Phenylephrine"
          },
          {
            name: "\u067e\u0632\u0648\u062f\u0648\u0627\u0641\u062f\u0631\u06cc\u0646",
            english_name: "Pseudoephedrine"
          },
          {
            name: "\u062f\u06a9\u0633\u062a\u0631\u0648\u0645\u062a\u0648\u0631\u0641\u0627\u0646",
            english_name: "Dextromethorphan"
          },
          {
            name: "\u06af\u0627\u06cc\u0627\u0641\u0646\u0632\u06cc\u0646",
            english_name: "Guaifenesin"
          },
          {
            name: "\u0628\u0646\u0632\u0648\u0646\u0627\u062a\u0627\u062a",
            english_name: "Benzonatate"
          },
          {
            name: "\u06a9\u0644\u0648\u0626\u06cc\u062f\u06cc\u0646",
            english_name: "Clonidine"
          },
          {
            name: "\u0645\u06cc\u062f\u0627\u0632\u0648\u0644\u0627\u0645",
            english_name: "Midazolam"
          },
          {
            name: "\u067e\u0631\u0648\u067e\u0648\u0641\u0648\u0644",
            english_name: "Propofol"
          },
          {
            name: "\u06a9\u062a\u0627\u0645\u06cc\u0646",
            english_name: "Ketamine"
          },
          {
            name: "\u0641\u0646\u062a\u0627\u0646\u06cc\u0644",
            english_name: "Fentanyl"
          },
          {
            name: "\u0645\u067e\u0631\u06cc\u062f\u06cc\u0646",
            english_name: "Meperidine"
          },
          {
            name: "\u0628\u0648\u067e\u0631\u0648\u067e\u06cc\u0648\u0646",
            english_name: "Bupropion"
          },
          {
            name: "\u0648\u0646\u0644\u0627\u0641\u0627\u06a9\u0633\u06cc\u0646",
            english_name: "Venlafaxine"
          },
          {
            name: "\u062f\u0648\u0644\u0648\u06a9\u0633\u062a\u06cc\u0646",
            english_name: "Duloxetine"
          },
          {
            name: "\u0645\u06cc\u0631\u062a\u0627\u0632\u0627\u067e\u06cc\u0646",
            english_name: "Mirtazapine"
          },
          {
            name: "\u062a\u0631\u0627\u0632\u0648\u062f\u0648\u0646",
            english_name: "Trazodone"
          },
          {
            name: "\u06a9\u0648\u062a\u06cc\u0627\u067e\u06cc\u0646",
            english_name: "Quetiapine"
          },
          {
            name: "\u0627\u0648\u0644\u0627\u0646\u0632\u0627\u067e\u06cc\u0646",
            english_name: "Olanzapine"
          },
          {
            name: "\u0631\u06cc\u0633\u067e\u0631\u06cc\u062f\u0648\u0646",
            english_name: "Risperidone"
          },
          {
            name: "\u0622\u0631\u06cc\u067e\u06cc\u067e\u0631\u0627\u0632\u0648\u0644",
            english_name: "Aripiprazole"
          },
          {
            name: "\u06a9\u0644\u0648\u0632\u0627\u067e\u06cc\u0646",
            english_name: "Clozapine"
          },
          {
            name: "\u0647\u0627\u0644\u0648\u067e\u0631\u06cc\u062f\u0648\u0644",
            english_name: "Haloperidol"
          },
          {
            name: "\u0632\u06cc\u067e\u0631\u0627\u0633\u06cc\u062f\u0648\u0646",
            english_name: "Ziprasidone"
          },
          {
            name: "\u067e\u0627\u0644\u06cc\u200c\u067e\u0631\u06cc\u062f\u0648\u0646",
            english_name: "Paliperidone"
          },
          {
            name: "\u0622\u0633\u0646\u0627\u067e\u06cc\u0646",
            english_name: "Asenapine"
          },
          {
            name: "\u0627\u06cc\u0644\u0648\u067e\u0631\u06cc\u062f\u0648\u0646",
            english_name: "Iloperidone"
          },
          {
            name: "\u0644\u0648\u0631\u0627\u0633\u06cc\u062f\u0648\u0646",
            english_name: "Lurasidone"
          },
          {
            name: "\u06a9\u0627\u0631\u067e\u0631\u06af\u0648\u0644\u06cc\u0646",
            english_name: "Carpergoline"
          },
          {
            name: "\u067e\u0631\u0627\u0645\u06cc\u200c\u067e\u06a9\u0633\u0648\u0644",
            english_name: "Pramipexole"
          },
          {
            name: "\u0631\u0648\u067e\u06cc\u0646\u06cc\u0631\u0648\u0644",
            english_name: "Ropinirole"
          },
          {
            name: "\u0622\u0645\u0627\u0646\u062a\u0627\u062f\u06cc\u0646",
            english_name: "Amantadine"
          },
          {
            name: "\u0644\u0648\u0648\u062f\u0648\u067e\u0627",
            english_name: "Levodopa"
          },
          {
            name: "\u06a9\u0627\u0631\u0628\u06cc\u200c\u062f\u0648\u067e\u0627",
            english_name: "Carbidopa"
          },
          {
            name: "\u0633\u0644\u0698\u06cc\u0644\u06cc\u0646",
            english_name: "Selegiline"
          },
          {
            name: "\u0631\u0627\u0633\u0627\u0698\u06cc\u0644\u06cc\u0646",
            english_name: "Rasagiline"
          },
          {
            name: "\u062a\u0648\u06a9\u0631\u06cc\u0646",
            english_name: "Tocilizumab"
          },
          {
            name: "\u0627\u06cc\u0646\u0641\u0644\u06cc\u06a9\u0633\u06cc\u0645\u0627\u0628",
            english_name: "Infliximab"
          },
          {
            name: "\u0627\u062f\u0627\u0644\u06cc\u0645\u0648\u0645\u0627\u0628",
            english_name: "Adalimumab"
          },
          {
            name: "\u0627\u062a\u0627\u0646\u0631\u0633\u067e\u062a",
            english_name: "Etanercept"
          },
          {
            name: "\u0631\u06cc\u062a\u0648\u06a9\u0633\u06cc\u0645\u0627\u0628",
            english_name: "Rituximab"
          },
          {
            name: "\u062a\u0631\u0627\u0633\u062a\u0648\u0632\u0648\u0645\u0627\u0628",
            english_name: "Trastuzumab"
          },
          {
            name: "\u067e\u0645\u0628\u0631\u0648\u0644\u06cc\u0632\u0648\u0645\u0627\u0628",
            english_name: "Pembrolizumab"
          },
          {
            name: "\u0646\u06cc\u0648\u0648\u0644\u0648\u0645\u0627\u0628",
            english_name: "Nivolumab"
          },
          {
            name: "\u0622\u062a\u0632\u0648\u0644\u06cc\u0632\u0648\u0645\u0627\u0628",
            english_name: "Atezolizumab"
          },
          {
            name: "\u062f\u0648\u0631\u0648\u0627\u0644\u0648\u0645\u0627\u0628",
            english_name: "Durvalumab"
          },
          {
            name: "\u0622\u0648\u0644\u0648\u0645\u0627\u0628",
            english_name: "Avelumab"
          },
          {
            name: "\u0633\u0648\u062a\u0648\u0631\u0648\u0644\u06cc\u0645\u0627\u0628",
            english_name: "Sotorasib"
          },
          {
            name: "\u0644\u0627\u0631\u0648\u062a\u0631\u06a9\u062a\u06cc\u0646\u06cc\u0628",
            english_name: "Larotrectinib"
          },
          {
            name: "\u0627\u0646\u062a\u0631\u06a9\u062a\u06cc\u0646\u06cc\u0628",
            english_name: "Entrectinib"
          },
          {
            name: "\u0628\u0631\u06cc\u06af\u0627\u062a\u06cc\u0646\u06cc\u0628",
            english_name: "Brigatinib"
          },
          {
            name: "\u0644\u0648\u0631\u0644\u0648\u062a\u06cc\u0646\u06cc\u0628",
            english_name: "Lorlatinib"
          },
          {
            name: "\u0633\u0631\u06cc\u062a\u06cc\u0646\u06cc\u0628",
            english_name: "Ceritinib"
          },
          {
            name: "\u0627\u0644\u06a9\u062a\u06cc\u0646\u06cc\u0628",
            english_name: "Alectinib"
          },
          {
            name: "\u06a9\u0631\u06cc\u0632\u0648\u062a\u06cc\u0646\u06cc\u0628",
            english_name: "Crizotinib"
          },
          {
            name: "\u0627\u0648\u067e\u0627\u062f\u06cc\u0628",
            english_name: "Osimertinib"
          },
          {
            name: "\u06af\u0641\u06cc\u062a\u06cc\u0646\u06cc\u0628",
            english_name: "Gefitinib"
          },
          {
            name: "\u0627\u0631\u0644\u0648\u062a\u06cc\u0646\u06cc\u0628",
            english_name: "Erlotinib"
          },
          {
            name: "\u0622\u0641\u0627\u062a\u06cc\u0646\u06cc\u0628",
            english_name: "Afatinib"
          },
          {
            name: "\u062f\u0627\u0633\u0627\u062a\u06cc\u0646\u06cc\u0628",
            english_name: "Dasatinib"
          },
          {
            name: "\u0646\u06cc\u0644\u0648\u062a\u06cc\u0646\u06cc\u0628",
            english_name: "Nilotinib"
          },
          {
            name: "\u0627\u06cc\u0645\u0627\u062a\u06cc\u0646\u06cc\u0628",
            english_name: "Imatinib"
          },
          {
            name: "\u067e\u0648\u0646\u0627\u062a\u06cc\u0646\u06cc\u0628",
            english_name: "Ponatinib"
          }
        ]
      },
      {
        path: "filterMedicine",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.allMedicine;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button10.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "openBox",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textinput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "nameMedicine.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button8.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "number3.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pickers2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "button11.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedMedicine",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.inDay.selectedMedicine || [];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "checkbox[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "todolist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return ($state.inDay.todolist || []).filter(
                item => item !== null
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "todoDialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "jobinput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button13.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sex.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.inDay.sex || [];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "sex.selectOne",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "memory.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.inDay.Memory || "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", TextArea_Helpers)
      },
      {
        path: "month",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const daysOfWeek = ["ی", "د", "س", "چ", "پ", "ج", "ش"];

                const daysInMonth = window.jalaali.jalaaliMonthLength(
                  $state.jalali.jy,
                  $state.jalali.jm
                );
                let options = [];
                for (let day = 1; day <= daysInMonth; day++) {
                  const gregorian = window.jalaali.toGregorian(
                    $state.jalali.jy,
                    $state.jalali.jm,
                    day
                  );
                  const date = new Date(
                    gregorian.gy,
                    gregorian.gm - 1,
                    gregorian.gd
                  );
                  const timezoneOffset = date.getTimezoneOffset() * 60000;
                  const localDate = new Date(date.getTime() - timezoneOffset);
                  const dayOfWeek = date.getDay();
                  options.push({
                    value: localDate.toISOString().split("T")[0],
                    label: `${daysOfWeek[dayOfWeek]} - ${day}`
                  });
                }
                return options;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "date",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return new Date().toLocaleString("en-CA").split(",")[0];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "statusDay",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.getSign.data?.data
                  ? JSON.parse($state.getSign.data.data)
                  : [] || [];
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "inDay",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.statusDay.find(item => item.date == $state.date) || {}
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "currentYear",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                var today = new Date();
                return today.getFullYear();
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "currentMonth",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u0641\u0631\u0648\u0631\u062f\u06cc\u0646",
          "\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a",
          "\u062e\u0631\u062f\u0627\u062f",
          "\u062a\u06cc\u0631",
          "\u0645\u0631\u062f\u0627\u062f",
          "\u0634\u0647\u0631\u06cc\u0648\u0631",
          "\u0645\u0647\u0631",
          "\u0622\u0628\u0627\u0646",
          "\u0622\u0630\u0631",
          "\u062f\u06cc",
          "\u0628\u0647\u0645\u0646",
          "\u0627\u0633\u0641\u0646\u062f"
        ]
      },
      {
        path: "jalali",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const today = new Date();
                const currentYear = today.getFullYear();
                const currentMonth = today.getMonth() + 1;
                const currentDay = today.getDate();
                return window.jalaali.toJalaali(
                  currentYear,
                  currentMonth,
                  currentDay
                );
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "white"
      },
      {
        path: "button14.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "white"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__bv9VP)}
            code={
              '<script src="https://cdn.jsdelivr.net/npm/jalaali-js/dist/jalaali.js"></script>\r\n'
            }
          />

          <section className={classNames(projectcss.all, sty.section___4ZTIh)}>
            <HeaderLiom
              data-plasmic-name={"headerLiom"}
              data-plasmic-override={overrides.headerLiom}
              className={classNames("__wab_instance", sty.headerLiom)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___4N6A)}
              >
                <XIcon
                  className={classNames(projectcss.all, sty.svg__nal9E)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return window.history.back();
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p77Xf
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          var today = new Date();
                          const daysOfWeekFull = [
                            "یکشنبه",
                            "دوشنبه",
                            "سه‌شنبه",
                            "چهارشنبه",
                            "پنجشنبه",
                            "جمعه",
                            "شنبه"
                          ];

                          if (
                            today.toLocaleString("en-CA").split(",")[0] ==
                            $state.date
                          )
                            return "وضعیت امروز";
                          else {
                            today = new Date($state.date);
                            const currentYear = today.getFullYear();
                            const currentMonth = today.getMonth() + 1;
                            const currentDay = today.getDate();
                            const week = today.getDay();
                            var j = window.jalaali.toJalaali(
                              currentYear,
                              currentMonth,
                              currentDay
                            );
                            return `وضعیت ${daysOfWeekFull[week]} ${j.jd} ${
                              $state.currentMonth[j.jm - 1]
                            } ${j.jy}`;
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u0648\u06cc\u0698\u0647";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            </HeaderLiom>
          </section>
          <AntdModal
            data-plasmic-name={"number2"}
            data-plasmic-override={overrides.number2}
            className={classNames("__wab_instance", sty.number2)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_S8WZNr2PRhkQ"]]: true
            })}
            modalScopeClassName={sty["number2__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["number2", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["number2", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zAuO8
                )}
              >
                {
                  "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0647\u0645\u06cc\u0627\u0631 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u06cc\u0646\u062c\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646."
                }
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_ojN51dDM9QOL"]]: true })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zrbwv)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__pj7Qm)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__slX9Y
                  )}
                >
                  {
                    "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__ampoo,
                    "negative"
                  )}
                >
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    antdInput2={(() => {
                      const child$Props = {
                        "aria-label": ``,
                        bordered: false,
                        className: classNames("__wab_instance", sty.antdInput),
                        id: "inputMobile1",
                        maxLength: (() => {
                          try {
                            return $state.number.startsWith("0") ? 11 : 10;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["antdInput", "value"],
                            Input_Helpers
                          ).apply(null, eventArgs);

                          (async event => {
                            const $steps = {};

                            $steps["updateNumber"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["number"]
                                    },
                                    operation: 0,
                                    value: $state.antdInput.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateNumber"] != null &&
                              typeof $steps["updateNumber"] === "object" &&
                              typeof $steps["updateNumber"].then === "function"
                            ) {
                              $steps["updateNumber"] = await $steps[
                                "updateNumber"
                              ];
                            }
                          }).apply(null, eventArgs);
                        },
                        placeholder: "9123456789",
                        size: "large",
                        type: "tel",
                        value: generateStateValueProp($state, [
                          "antdInput",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "antdInput.value"
                          }
                        ],
                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Input
                          data-plasmic-name={"antdInput"}
                          data-plasmic-override={overrides.antdInput}
                          {...child$Props}
                        />
                      );
                    })()}
                    className={classNames("__wab_instance", sty.textInput)}
                    endIcon={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__u7Le6
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nefLk,
                            "negative"
                          )}
                        >
                          {"+98 "}
                        </div>
                        <Icon111Icon
                          className={classNames(projectcss.all, sty.svg__cYArr)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async event => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"09123456789"}
                    required={false}
                    showEndIcon={true}
                    type={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "tel"
                        : "tel"
                    }
                    value={
                      generateStateValueProp($state, ["textInput", "value"]) ??
                      ""
                    }
                  />
                </div>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__e5Qox)}>
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  color={generateStateValueProp($state, ["button2", "color"])}
                  isDisabled={(() => {
                    try {
                      return $state.number.startsWith("0")
                        ? $state.number.length != 11
                        : $state.number.length != 10;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateNumber2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["number2", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateNumber2Open"] != null &&
                      typeof $steps["updateNumber2Open"] === "object" &&
                      typeof $steps["updateNumber2Open"].then === "function"
                    ) {
                      $steps["updateNumber2Open"] = await $steps[
                        "updateNumber2Open"
                      ];
                    }

                    $steps["updateName2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["name2", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateName2Open"] != null &&
                      typeof $steps["updateName2Open"] === "object" &&
                      typeof $steps["updateName2Open"].then === "function"
                    ) {
                      $steps["updateName2Open"] = await $steps[
                        "updateName2Open"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nGde
                    )}
                  >
                    {"\u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
              </div>
            </Stack__>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"name2"}
            data-plasmic-override={overrides.name2}
            className={classNames("__wab_instance", sty.name2)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_Kzj3K941uPrg"]]: true
            })}
            modalScopeClassName={sty["name2__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["name2", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["name2", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__whFE
                )}
              >
                {
                  "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0647\u0645\u06cc\u0627\u0631\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                }
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_nYjJvcyG9mGw"]]: true })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__l0Wjh)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3Dh4K)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6EdJg
                  )}
                >
                  {
                    "\u0646\u0627\u0645 \u0647\u0645\u06cc\u0627\u0631 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__mmQsQ,
                    "negative"
                  )}
                >
                  <TextInput
                    data-plasmic-name={"textInput2"}
                    data-plasmic-override={overrides.textInput2}
                    antdInput2={(() => {
                      const child$Props = {
                        "aria-label": ``,
                        bordered: false,
                        className: classNames("__wab_instance", sty.antdInput2),
                        id: "inputMobile1",
                        maxLength: (() => {
                          try {
                            return $state.number.startsWith("0") ? 11 : 10;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["antdInput2", "value"],
                            Input_Helpers
                          ).apply(null, eventArgs);

                          (async event => {
                            const $steps = {};

                            $steps["updateName"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["name"]
                                    },
                                    operation: 0,
                                    value: $state.antdInput2.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateName"] != null &&
                              typeof $steps["updateName"] === "object" &&
                              typeof $steps["updateName"].then === "function"
                            ) {
                              $steps["updateName"] = await $steps["updateName"];
                            }
                          }).apply(null, eventArgs);
                        },
                        placeholder:
                          "\u0645\u062b\u0644\u0627 \u0639\u0644\u06cc\u060c \u0639\u0634\u0642\u0645\u060c \u0645\u0627\u0645\u0627\u0646 \u0632\u0647\u0631\u0647\u060c \u0628\u0627\u0628\u0627\u060c \u0645\u06cc\u0646\u0627\u060c ...",
                        size: "large",
                        type: "text",
                        value: generateStateValueProp($state, [
                          "antdInput2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "antdInput2.value"
                          }
                        ],
                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Input
                          data-plasmic-name={"antdInput2"}
                          data-plasmic-override={overrides.antdInput2}
                          {...child$Props}
                        />
                      );
                    })()}
                    className={classNames("__wab_instance", sty.textInput2)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput2",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async event => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"09123456789"}
                    required={false}
                    type={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "tel"
                        : "text"
                    }
                    value={
                      generateStateValueProp($state, ["textInput2", "value"]) ??
                      ""
                    }
                  />
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0363G)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ca3J9
                  )}
                >
                  {
                    "\u0686\u0647 \u0646\u0633\u0628\u062a\u06cc \u0628\u0627\u0647\u0645 \u062f\u0627\u0631\u06cc\u062f\u061f"
                  }
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bpRPp)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [
                          {
                            type: "mother",
                            text: "مادر هستند"
                          },
                          {
                            type: "husband",
                            text: "همسر هستند"
                          }
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <RadioGrop
                        data-plasmic-name={"radioGrop"}
                        data-plasmic-override={overrides.radioGrop}
                        className={classNames("__wab_instance", sty.radioGrop)}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateRelation"] =
                            $state.getSign.data.result.filter(
                              item => item.rel.relation == currentItem.type
                            ).length == 0
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["relation"]
                                    },
                                    operation: 0,
                                    value: currentItem.type
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateRelation"] != null &&
                            typeof $steps["updateRelation"] === "object" &&
                            typeof $steps["updateRelation"].then === "function"
                          ) {
                            $steps["updateRelation"] = await $steps[
                              "updateRelation"
                            ];
                          }

                          $steps["invokeGlobalAction"] =
                            $state.getSign.data.result.filter(
                              item => item.rel.relation == currentItem.type
                            ).length != 0
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      (() => {
                                        try {
                                          return `فقط یک همیار با نسبت ${
                                            currentItem.text.split("هستند")[0]
                                          }میتونید اضافه کنید.`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      "bottom-center"
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        selectedLine={(() => {
                          try {
                            return currentItem.type == $state.relation;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___90Ix
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.text;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u0627\u062f\u0631 \u0647\u0633\u062a\u0646\u062f";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </RadioGrop>
                    );
                  })}
                </Stack__>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__pq0E)}>
                <Button
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames("__wab_instance", sty.button3)}
                  color={generateStateValueProp($state, ["button3", "color"])}
                  isDisabled={(() => {
                    try {
                      return (
                        $state.name.length == 0 ||
                        $state.relation.length == 0 ||
                        $state.loadingBtn
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  loading={(() => {
                    try {
                      return $state.loadingBtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadingBtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingBtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingBtn2"] != null &&
                      typeof $steps["updateLoadingBtn2"] === "object" &&
                      typeof $steps["updateLoadingBtn2"].then === "function"
                    ) {
                      $steps["updateLoadingBtn2"] = await $steps[
                        "updateLoadingBtn2"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "PUT",
                              "https://n8n.staas.ir/webhook/rest/user/hamyar/add",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    authorization: $state.userId,
                                    mobile: $state.number,
                                    name: $state.name,
                                    type: $state.type,
                                    relation: $state.relation
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] =
                      $steps.invokeGlobalAction?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f.",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["updateMasseg"] =
                      $steps.invokeGlobalAction?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["masseg"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction.data.result
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateMasseg"] != null &&
                      typeof $steps["updateMasseg"] === "object" &&
                      typeof $steps["updateMasseg"].then === "function"
                    ) {
                      $steps["updateMasseg"] = await $steps["updateMasseg"];
                    }

                    $steps["updateErrror"] =
                      $steps.invokeGlobalAction?.data?.success == false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["errror"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction.data.error
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateErrror"] != null &&
                      typeof $steps["updateErrror"] === "object" &&
                      typeof $steps["updateErrror"].then === "function"
                    ) {
                      $steps["updateErrror"] = await $steps["updateErrror"];
                    }

                    $steps["invokeGlobalAction3"] =
                      $steps.invokeGlobalAction?.data?.success == false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                (() => {
                                  try {
                                    return $state.errror.message;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                "bottom-center",
                                10000
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["updateSmsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["sms", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSmsOpen"] != null &&
                      typeof $steps["updateSmsOpen"] === "object" &&
                      typeof $steps["updateSmsOpen"].then === "function"
                    ) {
                      $steps["updateSmsOpen"] = await $steps["updateSmsOpen"];
                    }

                    $steps["updateName2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["name2", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateName2Open"] != null &&
                      typeof $steps["updateName2Open"] === "object" &&
                      typeof $steps["updateName2Open"].then === "function"
                    ) {
                      $steps["updateName2Open"] = await $steps[
                        "updateName2Open"
                      ];
                    }

                    $steps["updateV"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["v"]
                            },
                            operation: 0,
                            value: $state.v + "s"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateV"] != null &&
                      typeof $steps["updateV"] === "object" &&
                      typeof $steps["updateV"].then === "function"
                    ) {
                      $steps["updateV"] = await $steps["updateV"];
                    }

                    $steps["updateLoadingBtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingBtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingBtn"] != null &&
                      typeof $steps["updateLoadingBtn"] === "object" &&
                      typeof $steps["updateLoadingBtn"].then === "function"
                    ) {
                      $steps["updateLoadingBtn"] = await $steps[
                        "updateLoadingBtn"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lm4G
                    )}
                  >
                    {"\u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
              </div>
            </Stack__>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"sms"}
            data-plasmic-override={overrides.sms}
            className={classNames("__wab_instance", sty.sms)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_-DIfZzlD9_--"]]: true
            })}
            modalScopeClassName={sty["sms__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["sms", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["sms", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0BIhf
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.masseg.title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0647\u0645\u06cc\u0627\u0631\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_mIIg7azf6T1J"]]: true })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___7ODu)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hrXb9)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lSvul
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.masseg.message;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___9OuWb)}
              >
                <Button
                  data-plasmic-name={"button4"}
                  data-plasmic-override={overrides.button4}
                  className={classNames("__wab_instance", sty.button4)}
                  color={generateStateValueProp($state, ["button4", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                let shareText = $state.masseg.message;
                                if (navigator.share) {
                                  return navigator.share({
                                    title: "لیوم | تقویم قاعدگی",
                                    text: shareText
                                  });
                                } else {
                                  $$.copyToClipboard(shareText);
                                  return alert(
                                    "مرورگر شما از قابلیت اشتراک‌گذاری پشتیبانی نمی‌کند.\nمتن در کلیپ‌بورد کپی شد. حالا می‌توانید آن را در برنامه‌های دیگر به اشتراک بگذارید."
                                  );
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button4", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tWRA
                    )}
                  >
                    {
                      "\u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc"
                    }
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button5"}
                  data-plasmic-override={overrides.button5}
                  className={classNames("__wab_instance", sty.button5)}
                  color={generateStateValueProp($state, ["button5", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateName2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["sms", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateName2Open"] != null &&
                      typeof $steps["updateName2Open"] === "object" &&
                      typeof $steps["updateName2Open"].then === "function"
                    ) {
                      $steps["updateName2Open"] = await $steps[
                        "updateName2Open"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.staas.ir/webhook/rest/user/hamyar/add",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    authorization: $state.userId,
                                    id: $state.masseg.id
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] =
                      $steps.invokeGlobalAction?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0628\u0647 \u0647\u0645\u06cc\u0627\u0631\u062a \u0627\u0631\u0633\u0627\u0644 \u0634\u062f.",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button5", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qaDif
                    )}
                  >
                    {
                      "\u0644\u06cc\u0646\u06a9 \u062f\u0639\u0648\u062a \u062a\u0648\u0633\u0637 \u0644\u06cc\u0648\u0645 \u0628\u0631\u0627\u06cc \u0647\u0645\u06cc\u0627\u0631\u0645 \u0627\u0631\u0633\u0627\u0644 \u0634\u0648\u062f  >"
                    }
                  </div>
                </Button>
              </Stack__>
            </Stack__>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"remove"}
            data-plasmic-override={overrides.remove}
            className={classNames("__wab_instance", sty.remove)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_MR9naW4edH_C"]]: true,
              [sty["pcls_OXzARPY8lLi8"]]: hasVariant(
                globalVariants,
                "screen",
                "mobile"
              )
            })}
            modalScopeClassName={sty["remove__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["remove", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["remove", "open"])}
            title={
              <div className={classNames(projectcss.all, sty.freeBox__wFu3C)}>
                <Icon157Icon
                  className={classNames(projectcss.all, sty.svg___9VR8H)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pi1BD
                  )}
                >
                  {"\u062d\u0630\u0641 \u0647\u0645\u06cc\u0627\u0631"}
                </div>
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_cxTEZ_elXKqO"]]: true })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ibrIu)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yvelw
                )}
              >
                {
                  "\u0628\u0627 \u062d\u0630\u0641 \u0647\u0645\u06cc\u0627\u0631\u060c \u062f\u06cc\u06af\u0647 \u067e\u06cc\u0627\u0645\u06a9\u06cc \u0628\u0631\u0627\u0634 \u0627\u0631\u0633\u0627\u0644 \u0646\u0645\u06cc\u0634\u0647. \u0627\u0632 \u0627\u0646\u062c\u0627\u0645 \u0627\u06cc\u0646\u06a9\u0627\u0631 \u0645\u0637\u0645\u0626\u0646\u06cc \u061f"
                }
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__srpxd)}
              >
                <Button
                  data-plasmic-name={"removeBtn"}
                  data-plasmic-override={overrides.removeBtn}
                  className={classNames("__wab_instance", sty.removeBtn)}
                  color={generateStateValueProp($state, ["removeBtn", "color"])}
                  isDisabled={(() => {
                    try {
                      return $state.loadingBtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  loading={(() => {
                    try {
                      return $state.loadingBtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadingBtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingBtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingBtn"] != null &&
                      typeof $steps["updateLoadingBtn"] === "object" &&
                      typeof $steps["updateLoadingBtn"].then === "function"
                    ) {
                      $steps["updateLoadingBtn"] = await $steps[
                        "updateLoadingBtn"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "PATCH",
                              "https://n8n.staas.ir/webhook/rest/user/hamyar/add",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    id: $state.removeItem.hamyar.id,
                                    type: $state.type,
                                    hamyarType: "myHamyar",
                                    authorization: $state.userId
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateV"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["v"]
                            },
                            operation: 0,
                            value: $state.v + "s"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateV"] != null &&
                      typeof $steps["updateV"] === "object" &&
                      typeof $steps["updateV"].then === "function"
                    ) {
                      $steps["updateV"] = await $steps["updateV"];
                    }

                    $steps["updateRemoveOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["remove", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateRemoveOpen"] != null &&
                      typeof $steps["updateRemoveOpen"] === "object" &&
                      typeof $steps["updateRemoveOpen"].then === "function"
                    ) {
                      $steps["updateRemoveOpen"] = await $steps[
                        "updateRemoveOpen"
                      ];
                    }

                    $steps["updateLoadingBtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingBtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingBtn2"] != null &&
                      typeof $steps["updateLoadingBtn2"] === "object" &&
                      typeof $steps["updateLoadingBtn2"].then === "function"
                    ) {
                      $steps["updateLoadingBtn2"] = await $steps[
                        "updateLoadingBtn2"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["removeBtn", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  size={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "minimal"
                      : undefined
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p4Rvr
                    )}
                  >
                    {"\u062d\u0630\u0641"}
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button9"}
                  data-plasmic-override={overrides.button9}
                  className={classNames("__wab_instance", sty.button9)}
                  color={generateStateValueProp($state, ["button9", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateName2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["remove", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateName2Open"] != null &&
                      typeof $steps["updateName2Open"] === "object" &&
                      typeof $steps["updateName2Open"].then === "function"
                    ) {
                      $steps["updateName2Open"] = await $steps[
                        "updateName2Open"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button9", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  size={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "compact"
                      : "compact"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r0LkO
                    )}
                  >
                    {"\u0641\u0639\u0644\u0627 \u0646\u0647"}
                  </div>
                </Button>
              </Stack__>
            </Stack__>
          </AntdModal>
          <ApiRequest
            data-plasmic-name={"getSign"}
            data-plasmic-override={overrides.getSign}
            className={classNames("__wab_instance", sty.getSign)}
            errorDisplay={null}
            loadingDisplay={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jiSLo)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___0UPhx)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___0GoxW,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__zDo7U,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__hN9FN,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__kdXez,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__aDi0X,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__vaXcx,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__mr6Gm,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__j8Mb8,
                      "shimmer"
                    )}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__h4QaM)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__hhNvG,
                      "shimmer"
                    )}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__flVtA)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__tyd3Y,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__utlHe,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__qUmcz,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__n3Tgr,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__yYfbw,
                        "shimmer"
                      )}
                    />
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wEkZo)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__xdZh7,
                      "shimmer"
                    )}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dbsc0)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___28Qzm,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3YrZy,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__oueyp,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__cmDdw,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__rhMv3,
                        "shimmer"
                      )}
                    />
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zg9Vl)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__a7Y9C,
                      "shimmer"
                    )}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yQsGl)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__ynPzn,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__q3VbU,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__kq1J1,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__muZOy,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__zUsXg,
                        "shimmer"
                      )}
                    />
                  </Stack__>
                </Stack__>
              </Stack__>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getSign", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getSign", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getSign", "data"]).apply(
                null,
                eventArgs
              );

              (async data => {
                const $steps = {};

                $steps["updateStatusDay"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["statusDay"]
                        },
                        operation: 0,
                        value: $state.getSign.data?.data
                          ? $state.getSign.data.data
                          : [] || []
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStatusDay"] != null &&
                  typeof $steps["updateStatusDay"] === "object" &&
                  typeof $steps["updateStatusDay"].then === "function"
                ) {
                  $steps["updateStatusDay"] = await $steps["updateStatusDay"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = { args: [800] };
                      return $globalActions["Fragment.wait"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const list =
                              document.getElementById("my-scroll-date");
                            if (!list) {
                              return;
                            }
                            const list2 = list.firstElementChild;
                            if (!list2) {
                              return;
                            }
                            if (!Array.isArray($state.month)) {
                              return;
                            }
                            if (!$state.date) {
                              return;
                            }
                            if ($state.month.length === 0) {
                              return;
                            }
                            const index =
                              $state.month.findIndex(
                                item => item.value === $state.date
                              ) + 1;
                            if (index === -1) {
                              return;
                            }
                            const fourthItem = list2.children[index];
                            if (fourthItem) {
                              const itemPosition =
                                fourthItem.offsetLeft -
                                list.offsetWidth / 2 +
                                fourthItem.offsetWidth / 2;
                              return list.scrollTo({
                                left: itemPosition,
                                behavior: "smooth"
                              });
                            } else {
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }).apply(null, eventArgs);
            }}
            params={(() => {
              try {
                return { userId: $state.userId };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/status_day"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__akQn)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zFbgt)}
                id={"my-scroll-date"}
              >
                <Button
                  data-plasmic-name={"button14"}
                  data-plasmic-override={overrides.button14}
                  className={classNames("__wab_instance", sty.button14)}
                  color={generateStateValueProp($state, ["button14", "color"])}
                  endIcon={
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__kjov)}
                      role={"img"}
                    />
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.jalali.jm -= 1;
                                if ($state.jalali.jm < 1) {
                                  $state.jalali.jm = 12;
                                  return ($state.jalali.jy -= 1);
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button14", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={"rounded"}
                  showStartIcon={true}
                  size={"compact"}
                  startIcon={
                    <ChevronRightIcon
                      className={classNames(projectcss.all, sty.svg__n2Svi)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bphj1
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            var m = $state.jalali.jm - 1;
                            if (m < 1) {
                              m = 12;
                            }
                            return $state.currentMonth[m - 1];
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return " ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Button>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.month;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <TabWeek2
                      data-plasmic-name={"tabWeek2"}
                      data-plasmic-override={overrides.tabWeek2}
                      className={classNames("__wab_instance", sty.tabWeek2)}
                      currentWeek={(() => {
                        try {
                          return (() => {
                            const today = new Date();
                            return (
                              today.toLocaleString("en-CA").split(",")[0] ==
                              currentItem.value
                            );
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      haveData={(() => {
                        try {
                          return $state.statusDay.find(
                            item => item.date == currentItem.value
                          )
                            ? true
                            : false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDate"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["date"]
                                },
                                operation: 0,
                                value: currentItem.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDate"] != null &&
                          typeof $steps["updateDate"] === "object" &&
                          typeof $steps["updateDate"].then === "function"
                        ) {
                          $steps["updateDate"] = await $steps["updateDate"];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    const list =
                                      document.getElementById("my-scroll-date");
                                    if (!list) {
                                      return;
                                    }
                                    const list2 = list.firstElementChild;
                                    if (!list2) {
                                      return;
                                    }
                                    if (!Array.isArray($state.month)) {
                                      return;
                                    }
                                    if (!$state.date) {
                                      return;
                                    }
                                    if ($state.month.length === 0) {
                                      return;
                                    }
                                    const index =
                                      $state.month.findIndex(
                                        item => item.value === $state.date
                                      ) + 1;
                                    if (index === -1) {
                                      return;
                                    }
                                    const fourthItem = list2.children[index];
                                    if (fourthItem) {
                                      const itemPosition =
                                        fourthItem.offsetLeft -
                                        list.offsetWidth / 2 +
                                        fourthItem.offsetWidth / 2;
                                      return list.scrollTo({
                                        left: itemPosition,
                                        behavior: "smooth"
                                      });
                                    } else {
                                    }
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      selected={(() => {
                        try {
                          return $state.date == currentItem.value;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      slot={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__baZoo
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  var a = currentItem.label.split("-");
                                  return `${a[0]}`;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1VfrJ
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                var a = currentItem.label.split("-");
                                return `${a[1].split(",")[0].trim()}`;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0645\u0631\u0648\u0632";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </TabWeek2>
                  );
                })}
                <Button
                  data-plasmic-name={"button12"}
                  data-plasmic-override={overrides.button12}
                  className={classNames("__wab_instance", sty.button12)}
                  color={generateStateValueProp($state, ["button12", "color"])}
                  endIcon={
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__glXeh)}
                      role={"img"}
                    />
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.jalali.jm += 1;
                                if ($state.jalali.jm > 12) {
                                  $state.jalali.jm = 1;
                                  return ($state.jalali.jy += 1);
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button12", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={"rounded"}
                  showEndIcon={true}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Sq5C
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            var m = $state.jalali.jm + 1;
                            if (m > 12) {
                              m = 1;
                            }
                            return $state.currentMonth[m - 1];
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return " ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Button>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox"}
                data-plasmic-override={overrides.selectionBox}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox)}
              >
                <VigetLiom2
                  className={classNames(
                    "__wab_instance",
                    sty.vigetLiom2__m7GP6
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gXZix
                    )}
                  >
                    {
                      "\u0631\u0646\u06af \u062e\u0648\u0646 \u067e\u0631\u06cc\u0648\u062f"
                    }
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__o1Rsy
                    )}
                    code={"<hr></hr>"}
                  />

                  <Choices
                    data-plasmic-name={"color"}
                    data-plasmic-override={overrides.color}
                    beforList={(() => {
                      try {
                        return $state.signs.color;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              title: "\u0633\u0631\u062f\u0631\u062f",
                              selected: false
                            },
                            { title: "\u062f\u0644 \u062f\u0631\u062f" },
                            {
                              title:
                                "\u062f\u0631\u062f \u0633\u06cc\u0646\u0647"
                            },
                            { title: "\u06a9\u0648\u0641\u062a\u06af\u06cc" },
                            { title: "\u06a9\u0645\u0631\u062f\u0631\u062f" },
                            { title: "\u062f\u0631\u062f \u067e\u0627" },
                            {
                              title:
                                "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639"
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    circl={true}
                    className={classNames("__wab_instance", sty.color)}
                    html={(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    list={generateStateValueProp($state, ["color", "list"])}
                    onListChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "color",
                        "list"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onSelectOneChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "color",
                        "selectOne"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    selectOne={generateStateValueProp($state, [
                      "color",
                      "selectOne"
                    ])}
                    shape={(() => {
                      try {
                        return "circle";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </VigetLiom2>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox2"}
                data-plasmic-override={overrides.selectionBox2}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox2)}
              >
                <VigetLiom2
                  className={classNames(
                    "__wab_instance",
                    sty.vigetLiom2__wCf4X
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bjLOo
                    )}
                  >
                    {
                      "\u0634\u062f\u062a \u062e\u0648\u0646\u0631\u06cc\u0632\u06cc"
                    }
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml___5I8Ii
                    )}
                    code={"<hr></hr>"}
                  />

                  <Choices
                    data-plasmic-name={"intensity"}
                    data-plasmic-override={overrides.intensity}
                    beforList={(() => {
                      try {
                        return $state.signs.Intensity;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              title: "\u0633\u0631\u062f\u0631\u062f",
                              selected: false
                            },
                            { title: "\u062f\u0644 \u062f\u0631\u062f" },
                            {
                              title:
                                "\u062f\u0631\u062f \u0633\u06cc\u0646\u0647"
                            },
                            { title: "\u06a9\u0648\u0641\u062a\u06af\u06cc" },
                            { title: "\u06a9\u0645\u0631\u062f\u0631\u062f" },
                            { title: "\u062f\u0631\u062f \u067e\u0627" },
                            {
                              title:
                                "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639"
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    circl={true}
                    className={classNames("__wab_instance", sty.intensity)}
                    html={(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    list={generateStateValueProp($state, ["intensity", "list"])}
                    onListChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "intensity",
                        "list"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onSelectOneChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "intensity",
                        "selectOne"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    selectOne={generateStateValueProp($state, [
                      "intensity",
                      "selectOne"
                    ])}
                    shape={(() => {
                      try {
                        return "circle";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </VigetLiom2>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox3"}
                data-plasmic-override={overrides.selectionBox3}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox3)}
              >
                <VigetLiom2
                  className={classNames(
                    "__wab_instance",
                    sty.vigetLiom2__yiHNi
                  )}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__aMEpq)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5Q5Wy
                      )}
                    >
                      {"\u0622\u0628"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l5Tkb
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDialogOpendialog"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog", "opendialog"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogOpendialog"] != null &&
                          typeof $steps["updateDialogOpendialog"] ===
                            "object" &&
                          typeof $steps["updateDialogOpendialog"].then ===
                            "function"
                        ) {
                          $steps["updateDialogOpendialog"] = await $steps[
                            "updateDialogOpendialog"
                          ];
                        }
                      }}
                    >
                      {"\u062a\u063a\u06cc\u06cc\u0631 \u0647\u062f\u0641"}
                    </div>
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml___9Axue
                    )}
                    code={"<hr></hr>"}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__zqctG)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l8Mwu
                      )}
                    >
                      {"\u062a\u0627 \u0627\u0644\u0627\u0646 "}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eXbqc
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.water;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062a\u0627 \u0627\u0644\u0627\u0646 0 \u0644\u06cc\u0648\u0627\u0646 \u0622\u0628 \u062e\u0648\u0631\u062f\u06cc";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mvtL
                      )}
                    >
                      {
                        " \u0644\u06cc\u0648\u0627\u0646 \u0622\u0628 \u062e\u0648\u0631\u062f\u06cc"
                      }
                    </div>
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___2VQbZ)}
                  >
                    <Icon161Icon
                      className={classNames(projectcss.all, sty.svg___2Eo4)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] =
                          $state.water < $state.waters
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return $state.water++;
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      role={"img"}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__tF89)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__t0Jyx
                        )}
                        style={{ direction: "ltr" }}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return (() => {
                                return Array.from(
                                  { length: $state.waters },
                                  (_, i) => i + 1
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <Water
                              data-plasmic-name={"water"}
                              data-plasmic-override={overrides.water}
                              className={classNames(
                                "__wab_instance",
                                sty.water
                              )}
                              end={(() => {
                                try {
                                  return currentItem == $state.waters;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              key={currentIndex}
                              select={(() => {
                                try {
                                  return currentItem <= $state.water;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                              text={(() => {
                                try {
                                  return currentItem;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          );
                        })}
                      </div>
                    </div>
                    <Icon164Icon
                      className={classNames(projectcss.all, sty.svg__qEMl)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] =
                          $state.water > 0
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return $state.water--;
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      role={"img"}
                    />
                  </Stack__>
                </VigetLiom2>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox4"}
                data-plasmic-override={overrides.selectionBox4}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox4)}
              >
                <VigetLiom2
                  className={classNames(
                    "__wab_instance",
                    sty.vigetLiom2__jBunb
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gvHt
                    )}
                  >
                    {
                      "\u062a\u0631\u0634\u062d\u0627\u062a \u0648\u0627\u0698\u0646"
                    }
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__xuk3
                    )}
                    code={"<hr></hr>"}
                  />

                  <Choices
                    data-plasmic-name={"discharge"}
                    data-plasmic-override={overrides.discharge}
                    beforList={(() => {
                      try {
                        return $state.signs.Discharge;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              title: "\u0633\u0631\u062f\u0631\u062f",
                              selected: false
                            },
                            { title: "\u062f\u0644 \u062f\u0631\u062f" },
                            {
                              title:
                                "\u062f\u0631\u062f \u0633\u06cc\u0646\u0647"
                            },
                            { title: "\u06a9\u0648\u0641\u062a\u06af\u06cc" },
                            { title: "\u06a9\u0645\u0631\u062f\u0631\u062f" },
                            { title: "\u062f\u0631\u062f \u067e\u0627" },
                            {
                              title:
                                "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639"
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    circl={true}
                    className={classNames("__wab_instance", sty.discharge)}
                    html={(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    list={generateStateValueProp($state, ["discharge", "list"])}
                    onListChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "discharge",
                        "list"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onSelectOneChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "discharge",
                        "selectOne"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    selectOne={generateStateValueProp($state, [
                      "discharge",
                      "selectOne"
                    ])}
                    shape={(() => {
                      try {
                        return "circle";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </VigetLiom2>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox5"}
                data-plasmic-override={overrides.selectionBox5}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox5)}
              >
                <VigetLiom2
                  className={classNames("__wab_instance", sty.vigetLiom2__tvoV)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wPfDg
                    )}
                  >
                    {"\u062d\u0627\u0644"}
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__rwCGv
                    )}
                    code={"<hr></hr>"}
                  />

                  <Choices
                    data-plasmic-name={"status"}
                    data-plasmic-override={overrides.status}
                    beforList={(() => {
                      try {
                        return $state.signs.Status;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              title: "\u0633\u0631\u062f\u0631\u062f",
                              selected: false
                            },
                            { title: "\u062f\u0644 \u062f\u0631\u062f" },
                            {
                              title:
                                "\u062f\u0631\u062f \u0633\u06cc\u0646\u0647"
                            },
                            { title: "\u06a9\u0648\u0641\u062a\u06af\u06cc" },
                            { title: "\u06a9\u0645\u0631\u062f\u0631\u062f" },
                            { title: "\u062f\u0631\u062f \u067e\u0627" },
                            {
                              title:
                                "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639"
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    circl={true}
                    className={classNames("__wab_instance", sty.status)}
                    html={(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    list={generateStateValueProp($state, ["status", "list"])}
                    onListChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "status",
                        "list"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onSelectOneChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "status",
                        "selectOne"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    selectOne={generateStateValueProp($state, [
                      "status",
                      "selectOne"
                    ])}
                    shape={(() => {
                      try {
                        return "circle";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </VigetLiom2>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox6"}
                data-plasmic-override={overrides.selectionBox6}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox6)}
              >
                <VigetLiom2
                  className={classNames(
                    "__wab_instance",
                    sty.vigetLiom2__j8Cgy
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pbkec
                    )}
                  >
                    {
                      "\u062f\u0627\u0631\u0648\u200c\u0647\u0627\u06cc \u0645\u0635\u0631\u0641\u06cc:"
                    }
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__ciVJd
                    )}
                    code={"<hr></hr>"}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__gGjaN)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.selectedMedicine;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sjbLy
                          )}
                          key={currentIndex}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eX3H7
                            )}
                          >
                            <Icon165Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___1Id8M
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qiNw
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Stack__>
                          {(() => {
                            try {
                              return currentItem.number;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jhpMg
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5U3Ty
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.number;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "3";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kqrTl
                                )}
                              >
                                {"\u0639\u062f\u062f"}
                              </div>
                            </Stack__>
                          ) : null}
                        </div>
                      );
                    })}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__u2Uzp
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateMedicineOpendialog"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["medicine", "opendialog"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateMedicineOpendialog"] != null &&
                        typeof $steps["updateMedicineOpendialog"] ===
                          "object" &&
                        typeof $steps["updateMedicineOpendialog"].then ===
                          "function"
                      ) {
                        $steps["updateMedicineOpendialog"] = await $steps[
                          "updateMedicineOpendialog"
                        ];
                      }
                    }}
                  >
                    {
                      "\u0627\u0641\u0632\u0648\u062f\u0646 \u062f\u0627\u0631\u0648\u06cc \u062c\u062f\u06cc\u062f"
                    }
                  </div>
                </VigetLiom2>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox7"}
                data-plasmic-override={overrides.selectionBox7}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox7)}
              >
                <VigetLiom2
                  className={classNames("__wab_instance", sty.vigetLiom2__nmjF)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fO4ED
                    )}
                  >
                    {
                      "\u0644\u06cc\u0633\u062a \u06a9\u0627\u0631\u200c\u0647\u0627\u06cc \u0628\u0631\u0627\u06cc \u0627\u0646\u062c\u0627\u0645:"
                    }
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__lo59G
                    )}
                    code={"<hr></hr>"}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__rfg5Y)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.todolist;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__l5KNa
                          )}
                          key={currentIndex}
                        >
                          {(() => {
                            const child$Props = {
                              circle: true,
                              className: classNames(
                                "__wab_instance",
                                sty.checkbox
                              ),
                              isChecked:
                                generateStateValueProp($state, [
                                  "checkbox",
                                  __plasmic_idx_0,
                                  "isChecked"
                                ]) ?? false,
                              onChange: async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "checkbox",
                                    __plasmic_idx_0,
                                    "isChecked"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async isChecked => {
                                  const $steps = {};

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              return ($state.todolist[
                                                currentIndex
                                              ].done =
                                                $state.checkbox[
                                                  currentIndex
                                                ].isChecked);
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }
                                }).apply(null, eventArgs);
                              }
                            };

                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "checkbox[].isChecked",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return currentItem.done;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <Checkbox
                                data-plasmic-name={"checkbox"}
                                data-plasmic-override={overrides.checkbox}
                                {...child$Props}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__y8Ihm
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </Checkbox>
                            );
                          })()}
                          <Icon169Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__dt6EV
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          return delete $state.todolist[
                                            currentIndex
                                          ];
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                            role={"img"}
                          />
                        </div>
                      );
                    })}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vdjNw
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateTodoDialogOpendialog"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["todoDialog", "opendialog"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTodoDialogOpendialog"] != null &&
                        typeof $steps["updateTodoDialogOpendialog"] ===
                          "object" &&
                        typeof $steps["updateTodoDialogOpendialog"].then ===
                          "function"
                      ) {
                        $steps["updateTodoDialogOpendialog"] = await $steps[
                          "updateTodoDialogOpendialog"
                        ];
                      }
                    }}
                  >
                    {
                      "\u0627\u0641\u0632\u0648\u062f\u0646 \u06a9\u0627\u0631 \u062c\u062f\u06cc\u062f"
                    }
                  </div>
                </VigetLiom2>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox8"}
                data-plasmic-override={overrides.selectionBox8}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox8)}
              >
                <VigetLiom2
                  className={classNames(
                    "__wab_instance",
                    sty.vigetLiom2__bDpi4
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__le6Oc
                    )}
                  >
                    {
                      "\u0648\u0636\u0639\u06cc\u062a \u0631\u0627\u0628\u0637\u0647 \u062c\u0646\u0633\u06cc:"
                    }
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml___7UKx
                    )}
                    code={"<hr></hr>"}
                  />

                  <Choices
                    data-plasmic-name={"sex"}
                    data-plasmic-override={overrides.sex}
                    beforList={(() => {
                      try {
                        return $state.signs.sex;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              title: "\u0633\u0631\u062f\u0631\u062f",
                              selected: false
                            },
                            { title: "\u062f\u0644 \u062f\u0631\u062f" },
                            {
                              title:
                                "\u062f\u0631\u062f \u0633\u06cc\u0646\u0647"
                            },
                            { title: "\u06a9\u0648\u0641\u062a\u06af\u06cc" },
                            { title: "\u06a9\u0645\u0631\u062f\u0631\u062f" },
                            { title: "\u062f\u0631\u062f \u067e\u0627" },
                            {
                              title:
                                "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639"
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    className={classNames("__wab_instance", sty.sex)}
                    html={(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    list={generateStateValueProp($state, ["sex", "list"])}
                    onListChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, ["sex", "list"]).apply(
                        null,
                        eventArgs
                      );

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onSelectOneChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "sex",
                        "selectOne"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    rectangle={true}
                    selectOne={generateStateValueProp($state, [
                      "sex",
                      "selectOne"
                    ])}
                    shape={(() => {
                      try {
                        return "rectangle";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </VigetLiom2>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox9"}
                data-plasmic-override={overrides.selectionBox9}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox9)}
              >
                <VigetLiom2
                  className={classNames(
                    "__wab_instance",
                    sty.vigetLiom2__pdwEr
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__odbSx
                    )}
                  >
                    {"\u062b\u0628\u062a \u062e\u0627\u0637\u0631\u0647"}
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__qiYly
                    )}
                    code={"<hr></hr>"}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox___9JS7M)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput7"}
                      data-plasmic-override={overrides.textInput7}
                      antdInput2={(() => {
                        const child$Props = {
                          autoSize: { minRows: 5, maxRows: 100 },
                          bordered: false,
                          className: classNames("__wab_instance", sty.memory),
                          id: "inputMobile",
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["memory", "value"],
                              TextArea_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u0627\u0645\u0631\u0648\u0632 \u0686\u0637\u0648\u0631 \u0628\u0648\u062f\u061f",
                          showCount: false,
                          value: generateStateValueProp($state, [
                            "memory",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "memory.value"
                            }
                          ],
                          [],
                          TextArea_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <TextArea
                            data-plasmic-name={"memory"}
                            data-plasmic-override={overrides.memory}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput7)}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput7",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      value={
                        generateStateValueProp($state, [
                          "textInput7",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </VigetLiom2>
              </Stack__>
              <section
                className={classNames(projectcss.all, sty.section__jr0Da)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__lwpfQ)}>
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={generateStateValueProp($state, ["button", "color"])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction2"] =
                        $state.color.list.length > 0 ||
                        $state.intensity.list.length > 0 ||
                        $state.discharge.list.length > 0 ||
                        $state.water > 0 ||
                        $state.status.list.length > 0 ||
                        $state.todolist.length > 0 ||
                        $state.selectedMedicine.length > 1 ||
                        $state.sex.list.length > 0 ||
                        $state.memory.value != ""
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.staas.ir/webhook/status_day",
                                  undefined,
                                  (() => {
                                    try {
                                      return (() => {
                                        var status_day = $state.statusDay;
                                        var new_data = {
                                          date: $state.date,
                                          color: $state.color.list,
                                          Intensity: $state.intensity.list,
                                          Discharge: $state.discharge.list,
                                          Water: $state.water,
                                          Waters: $state.waters,
                                          Status: $state.status.list,
                                          todolist: $state.todolist,
                                          selectedMedicine:
                                            $state.selectedMedicine,
                                          sex: $state.sex.list,
                                          Memory: $state.memory.value
                                        };
                                        var foundIndex = status_day.findIndex(
                                          item => item.date === new_data.date
                                        );
                                        if (foundIndex !== -1) {
                                          status_day[foundIndex] = new_data;
                                        } else {
                                          status_day.push(new_data);
                                        }
                                        return {
                                          userId: $state.userId,
                                          data: status_day
                                        };
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction"] =
                        $state.color.list.length > 0 ||
                        $state.intensity.list.length > 0 ||
                        $state.discharge.list.length > 0 ||
                        $state.water > 0 ||
                        $state.status.list.length > 0 ||
                        $state.todolist.length > 0 ||
                        $state.selectedMedicine.length > 1 ||
                        $state.sex.list.length > 0 ||
                        $state.memory.value != ""
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["invokeGlobalAction3"] = !(
                        $state.color.list.length > 0 ||
                        $state.intensity.list.length > 0 ||
                        $state.discharge.list.length > 0 ||
                        $state.water > 0 ||
                        $state.status.list.length > 0 ||
                        $state.todolist.length > 0 ||
                        $state.selectedMedicine.length > 1 ||
                        $state.sex.list.length > 0 ||
                        $state.memory.value != ""
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a\u06cc \u0628\u0631\u0627\u06cc \u0630\u062e\u06cc\u0631\u0647 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f.",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["runCode"] =
                        $ctx.query.close == "true"
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return window.history.back();
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qgki1
                      )}
                    >
                      {
                        "\u0630\u062e\u06cc\u0631\u0647 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
                      }
                    </div>
                  </Button>
                </div>
              </section>
            </Stack__>
          </ApiRequest>
          <div className={classNames(projectcss.all, sty.freeBox__gxAUj)} />

          <Dialog
            data-plasmic-name={"dialog"}
            data-plasmic-override={overrides.dialog}
            className={classNames("__wab_instance", sty.dialog)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog", "opendialog"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog",
              "opendialog"
            ])}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jdHP
              )}
            >
              {
                "\u0631\u0648\u0632\u0627\u0646\u0647 \u0686\u0646\u062f \u0644\u06cc\u0648\u0627\u0646 \u0622\u0628 \u0645\u06cc\u0646\u0648\u0634\u06cc\u062f\u061f"
              }
            </div>
            <Pickers
              data-plasmic-name={"pickers"}
              data-plasmic-override={overrides.pickers}
              className={classNames("__wab_instance", sty.pickers)}
              data={(() => {
                try {
                  return (() => {
                    return Array.from({ length: 100 }, (_, i) => ({
                      label: `${i + 2}`,
                      value: i + 2
                    }));
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              initialValue={generateStateValueProp($state, [
                "pickers",
                "value"
              ])}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["pickers", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
            />

            <Button
              data-plasmic-name={"button6"}
              data-plasmic-override={overrides.button6}
              className={classNames("__wab_instance", sty.button6)}
              color={generateStateValueProp($state, ["button6", "color"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateWaters"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["waters"]
                        },
                        operation: 0,
                        value: $state.pickers.value
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateWaters"] != null &&
                  typeof $steps["updateWaters"] === "object" &&
                  typeof $steps["updateWaters"].then === "function"
                ) {
                  $steps["updateWaters"] = await $steps["updateWaters"];
                }

                $steps["updateDialogOpendialog"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dialog", "opendialog"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialogOpendialog"] != null &&
                  typeof $steps["updateDialogOpendialog"] === "object" &&
                  typeof $steps["updateDialogOpendialog"].then === "function"
                ) {
                  $steps["updateDialogOpendialog"] = await $steps[
                    "updateDialogOpendialog"
                  ];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button6", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jkghk
                )}
              >
                {"\u0627\u0646\u062a\u062e\u0627\u0628"}
              </div>
            </Button>
          </Dialog>
          <Dialog
            data-plasmic-name={"number3"}
            data-plasmic-override={overrides.number3}
            className={classNames("__wab_instance", sty.number3)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "number3",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "number3",
              "opendialog"
            ])}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tjA9G
              )}
            >
              {
                "\u0647\u0631 \u062f\u0648\u0631\u0647 \u0686\u0646\u062f\u062a\u0627"
              }
            </div>
            <Pickers
              data-plasmic-name={"pickers2"}
              data-plasmic-override={overrides.pickers2}
              className={classNames("__wab_instance", sty.pickers2)}
              data={(() => {
                try {
                  return Array.from({ length: 10 }, (_, i) => ({
                    label: `${i + 1}`,
                    value: i + 1
                  }));
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              initialValue={generateStateValueProp($state, [
                "pickers2",
                "value"
              ])}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["pickers2", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
            />

            <Button
              data-plasmic-name={"button11"}
              data-plasmic-override={overrides.button11}
              className={classNames("__wab_instance", sty.button11)}
              color={generateStateValueProp($state, ["button11", "color"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateNumberOfMedicinValue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["numberOfMedicin", "value"]
                        },
                        operation: 0,
                        value: $state.pickers2.value
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNumberOfMedicinValue"] != null &&
                  typeof $steps["updateNumberOfMedicinValue"] === "object" &&
                  typeof $steps["updateNumberOfMedicinValue"].then ===
                    "function"
                ) {
                  $steps["updateNumberOfMedicinValue"] = await $steps[
                    "updateNumberOfMedicinValue"
                  ];
                }

                $steps["updateDialogOpendialog"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["number3", "opendialog"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialogOpendialog"] != null &&
                  typeof $steps["updateDialogOpendialog"] === "object" &&
                  typeof $steps["updateDialogOpendialog"].then === "function"
                ) {
                  $steps["updateDialogOpendialog"] = await $steps[
                    "updateDialogOpendialog"
                  ];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button11", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bNtrP
                )}
              >
                {"\u0627\u0646\u062a\u062e\u0627\u0628"}
              </div>
            </Button>
          </Dialog>
          <Dialog
            data-plasmic-name={"medicine"}
            data-plasmic-override={overrides.medicine}
            className={classNames("__wab_instance", sty.medicine)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "medicine",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "medicine",
              "opendialog"
            ])}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__s6Mg6)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ppZg)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cRzql
                  )}
                >
                  {"\u0627\u0633\u0645 \u062f\u0627\u0631\u0648"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__o9Run)}>
                  <TextInput
                    data-plasmic-name={"textInput3"}
                    data-plasmic-override={overrides.textInput3}
                    antdInput2={(() => {
                      const child$Props = {
                        "aria-label": ``,
                        bordered: false,
                        className: classNames(
                          "__wab_instance",
                          sty.inputnameMedicine
                        ),
                        disabled: false,
                        id: "inputMobile",
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputnameMedicine", "value"],
                            Input_Helpers
                          ).apply(null, eventArgs);

                          (async event => {
                            const $steps = {};
                          }).apply(null, eventArgs);
                        },
                        size: "middle",
                        value: generateStateValueProp($state, [
                          "inputnameMedicine",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "inputnameMedicine.value"
                          }
                        ],
                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Input
                          data-plasmic-name={"inputnameMedicine"}
                          data-plasmic-override={overrides.inputnameMedicine}
                          {...child$Props}
                        />
                      );
                    })()}
                    className={classNames("__wab_instance", sty.textInput3)}
                    endIcon={
                      <Icon26Icon
                        className={classNames(projectcss.all, sty.svg__l9RDy)}
                        role={"img"}
                        style={(() => {
                          try {
                            return {
                              transform:
                                $state.openBox == true
                                  ? "rotate(180deg)"
                                  : "rotate(0deg)"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    }
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput3",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showEndIcon={true}
                    value={
                      generateStateValueProp($state, ["textInput3", "value"]) ??
                      ""
                    }
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox___7Qzcy)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateOpenBox"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["openBox"]
                              },
                              operation: 4,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateOpenBox"] != null &&
                        typeof $steps["updateOpenBox"] === "object" &&
                        typeof $steps["updateOpenBox"].then === "function"
                      ) {
                        $steps["updateOpenBox"] = await $steps["updateOpenBox"];
                      }
                    }}
                  />
                </div>
                <Medisene
                  data-plasmic-name={"medisene"}
                  data-plasmic-override={overrides.medisene}
                  className={classNames("__wab_instance", sty.medisene)}
                  filterMedicine={$state.filterMedicine}
                  open={(() => {
                    try {
                      return $state.openBox;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "open";
                      }
                      throw e;
                    }
                  })()}
                >
                  <TextInput
                    data-plasmic-name={"textinput"}
                    data-plasmic-override={overrides.textinput}
                    antdInput2={(() => {
                      const child$Props = {
                        "aria-label": ``,
                        bordered: false,
                        className: classNames(
                          "__wab_instance",
                          sty.nameMedicine
                        ),
                        disabled: false,
                        id: "inputMobile",
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["nameMedicine", "value"],
                            Input_Helpers
                          ).apply(null, eventArgs);

                          (async event => {
                            const $steps = {};
                          }).apply(null, eventArgs);
                        },
                        placeholder:
                          "\u0627\u0633\u0645 \u062f\u0627\u0631\u0648 ...",
                        size: "middle",
                        value: generateStateValueProp($state, [
                          "nameMedicine",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "nameMedicine.value"
                          }
                        ],
                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Input
                          data-plasmic-name={"nameMedicine"}
                          data-plasmic-override={overrides.nameMedicine}
                          {...child$Props}
                        />
                      );
                    })()}
                    className={classNames("__wab_instance", sty.textinput)}
                    endIcon={
                      <Reveal
                        data-plasmic-name={"reveal"}
                        data-plasmic-override={overrides.reveal}
                        className={classNames("__wab_instance", sty.reveal)}
                        damping={0.3}
                        effect={"fade"}
                        reverse={false}
                        triggerOnce={true}
                      >
                        <Button
                          data-plasmic-name={"button8"}
                          data-plasmic-override={overrides.button8}
                          className={classNames("__wab_instance", sty.button8)}
                          color={generateStateValueProp($state, [
                            "button8",
                            "color"
                          ])}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateInputnameMedicineValue"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "inputnameMedicine",
                                        "value"
                                      ]
                                    },
                                    operation: 0,
                                    value: $state.nameMedicine.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateInputnameMedicineValue"] != null &&
                              typeof $steps["updateInputnameMedicineValue"] ===
                                "object" &&
                              typeof $steps["updateInputnameMedicineValue"]
                                .then === "function"
                            ) {
                              $steps["updateInputnameMedicineValue"] =
                                await $steps["updateInputnameMedicineValue"];
                            }

                            $steps["updateOpenBox"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["openBox"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateOpenBox"] != null &&
                              typeof $steps["updateOpenBox"] === "object" &&
                              typeof $steps["updateOpenBox"].then === "function"
                            ) {
                              $steps["updateOpenBox"] = await $steps[
                                "updateOpenBox"
                              ];
                            }
                          }}
                          onColorChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button8",
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          size={"minimal"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__as4Ae
                            )}
                          >
                            {"\u0627\u0641\u0632\u0648\u062f\u0646"}
                          </div>
                        </Button>
                      </Reveal>
                    }
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textinput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async event => {
                        const $steps = {};

                        $steps["updateFilterMedicine"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["filterMedicine"]
                                },
                                operation: 0,
                                value: (() => {
                                  if ($state.nameMedicine.value?.length !== 0) {
                                    return $state.allMedicine.filter(item =>
                                      item.name.includes(
                                        $state.nameMedicine.value
                                      )
                                    );
                                  } else {
                                    return $state.allMedicine;
                                  }
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFilterMedicine"] != null &&
                          typeof $steps["updateFilterMedicine"] === "object" &&
                          typeof $steps["updateFilterMedicine"].then ===
                            "function"
                        ) {
                          $steps["updateFilterMedicine"] = await $steps[
                            "updateFilterMedicine"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    showEndIcon={(() => {
                      try {
                        return (
                          $state.nameMedicine.value?.length > 0 &&
                          $state.nameMedicine.value != undefined
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "showEndIcon";
                        }
                        throw e;
                      }
                    })()}
                    value={
                      generateStateValueProp($state, ["textinput", "value"]) ??
                      ""
                    }
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yBsmM)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.filterMedicine;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ooV8S
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateInputnameMedicineValue"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "inputnameMedicine",
                                        "value"
                                      ]
                                    },
                                    operation: 0,
                                    value: currentItem.name
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateInputnameMedicineValue"] != null &&
                              typeof $steps["updateInputnameMedicineValue"] ===
                                "object" &&
                              typeof $steps["updateInputnameMedicineValue"]
                                .then === "function"
                            ) {
                              $steps["updateInputnameMedicineValue"] =
                                await $steps["updateInputnameMedicineValue"];
                            }

                            $steps["updateOpenBox"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["openBox"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateOpenBox"] != null &&
                              typeof $steps["updateOpenBox"] === "object" &&
                              typeof $steps["updateOpenBox"].then === "function"
                            ) {
                              $steps["updateOpenBox"] = await $steps[
                                "updateOpenBox"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zKo6
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kt0U1
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                      );
                    })}
                  </Stack__>
                </Medisene>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sjCiW)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5R4Te
                  )}
                >
                  {"\u0686\u0646\u062a\u0627"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__vg0Zj)}>
                  <TextInput
                    data-plasmic-name={"textInput4"}
                    data-plasmic-override={overrides.textInput4}
                    antdInput2={(() => {
                      const child$Props = {
                        "aria-label": ``,
                        bordered: false,
                        className: classNames(
                          "__wab_instance",
                          sty.numberOfMedicin
                        ),
                        id: "inputMobile",
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["numberOfMedicin", "value"],
                            Input_Helpers
                          ).apply(null, eventArgs);

                          (async event => {
                            const $steps = {};
                          }).apply(null, eventArgs);
                        },
                        placeholder:
                          "\u0647\u0631 \u062f\u0648\u0631\u0647 \u0686\u0646\u062a\u0627",
                        size: "middle",
                        value: generateStateValueProp($state, [
                          "numberOfMedicin",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "numberOfMedicin.value"
                          }
                        ],
                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Input
                          data-plasmic-name={"numberOfMedicin"}
                          data-plasmic-override={overrides.numberOfMedicin}
                          {...child$Props}
                        />
                      );
                    })()}
                    className={classNames("__wab_instance", sty.textInput4)}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput4",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    value={
                      generateStateValueProp($state, ["textInput4", "value"]) ??
                      ""
                    }
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__ycTd)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateNumber3Opendialog"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["number3", "opendialog"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNumber3Opendialog"] != null &&
                        typeof $steps["updateNumber3Opendialog"] === "object" &&
                        typeof $steps["updateNumber3Opendialog"].then ===
                          "function"
                      ) {
                        $steps["updateNumber3Opendialog"] = await $steps[
                          "updateNumber3Opendialog"
                        ];
                      }
                    }}
                  />
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sizzW)}
            >
              <Button
                data-plasmic-name={"button7"}
                data-plasmic-override={overrides.button7}
                className={classNames("__wab_instance", sty.button7)}
                color={generateStateValueProp($state, ["button7", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] =
                    $state.inputnameMedicine.value.length == 0 ||
                    $state.inputnameMedicine.value == undefined
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0639\u0632\u06cc\u0632\u0645 \u0627\u0633\u0645 \u062f\u0627\u0631\u0648 \u0627\u0636\u0627\u0641\u0647 \u0646\u06a9\u0631\u062f\u06cc.",
                              "bottom-center"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["updateSelectedMedicine"] =
                    $state.inputnameMedicine.value.length != 0 &&
                    $state.inputnameMedicine.value != undefined
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectedMedicine"]
                            },
                            operation: 5,
                            value: {
                              name: $state.inputnameMedicine.value,
                              number: $state.numberOfMedicin.value
                            }
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const arr = $stateGet(objRoot, variablePath);
                            arr.push(value);
                            return arr;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateSelectedMedicine"] != null &&
                    typeof $steps["updateSelectedMedicine"] === "object" &&
                    typeof $steps["updateSelectedMedicine"].then === "function"
                  ) {
                    $steps["updateSelectedMedicine"] = await $steps[
                      "updateSelectedMedicine"
                    ];
                  }

                  $steps["updateMedicineOpendialog"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["medicine", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateMedicineOpendialog"] != null &&
                    typeof $steps["updateMedicineOpendialog"] === "object" &&
                    typeof $steps["updateMedicineOpendialog"].then ===
                      "function"
                  ) {
                    $steps["updateMedicineOpendialog"] = await $steps[
                      "updateMedicineOpendialog"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button7", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2CTkE
                  )}
                >
                  {
                    "\u0630\u062e\u06cc\u0631\u0647 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
                  }
                </div>
              </Button>
              <Button
                data-plasmic-name={"button10"}
                data-plasmic-override={overrides.button10}
                className={classNames("__wab_instance", sty.button10)}
                color={generateStateValueProp($state, ["button10", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateMedicineOpendialog"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["medicine", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateMedicineOpendialog"] != null &&
                    typeof $steps["updateMedicineOpendialog"] === "object" &&
                    typeof $steps["updateMedicineOpendialog"].then ===
                      "function"
                  ) {
                    $steps["updateMedicineOpendialog"] = await $steps[
                      "updateMedicineOpendialog"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button10", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oPFt
                  )}
                >
                  {"\u0628\u0627\u0632\u06af\u0634\u062a"}
                </div>
              </Button>
            </Stack__>
          </Dialog>
          <Dialog
            data-plasmic-name={"todoDialog"}
            data-plasmic-override={overrides.todoDialog}
            className={classNames("__wab_instance", sty.todoDialog)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "todoDialog",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "todoDialog",
              "opendialog"
            ])}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__n8B3Y)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hevRt)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kvIvk
                  )}
                >
                  {
                    "\u0627\u0641\u0632\u0648\u062f\u0646 \u06a9\u0627\u0631 \u062c\u062f\u06cc\u062f"
                  }
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__caI8E)}>
                  <TextInput
                    data-plasmic-name={"textInput6"}
                    data-plasmic-override={overrides.textInput6}
                    antdInput2={(() => {
                      const child$Props = {
                        "aria-label": ``,
                        bordered: false,
                        className: classNames("__wab_instance", sty.jobinput),
                        id: "inputMobile",
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["jobinput", "value"],
                            Input_Helpers
                          ).apply(null, eventArgs);

                          (async event => {
                            const $steps = {};
                          }).apply(null, eventArgs);
                        },
                        placeholder:
                          '\u0645\u062b\u0644\u0627: " \u0635\u062d\u0628\u062a \u06a9\u0631\u062f\u0646 \u0631\u0627\u062c\u0639 \u0628\u0647 \u062f\u063a\u062f\u063a\u0647 \u0647\u0627\u0645 \u0628\u0627 \u06a9\u0633\u06cc \u06a9\u0647 \u0642\u0636\u0627\u0648\u062a\u0645 \u0646\u0645\u06cc \u06a9\u0646\u0647 ."',
                        size: "middle",
                        value: generateStateValueProp($state, [
                          "jobinput",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "jobinput.value"
                          }
                        ],
                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Input
                          data-plasmic-name={"jobinput"}
                          data-plasmic-override={overrides.jobinput}
                          {...child$Props}
                        />
                      );
                    })()}
                    className={classNames("__wab_instance", sty.textInput6)}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput6",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    value={
                      generateStateValueProp($state, ["textInput6", "value"]) ??
                      ""
                    }
                  />
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__csmat)}
            >
              <Button
                data-plasmic-name={"button13"}
                data-plasmic-override={overrides.button13}
                className={classNames("__wab_instance", sty.button13)}
                color={generateStateValueProp($state, ["button13", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateTodolist"] = $state.jobinput.value
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["todolist"]
                          },
                          operation: 5,
                          value: {
                            text: $state.jobinput.value,
                            done: false
                          }
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const arr = $stateGet(objRoot, variablePath);
                          arr.push(value);
                          return arr;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateTodolist"] != null &&
                    typeof $steps["updateTodolist"] === "object" &&
                    typeof $steps["updateTodolist"].then === "function"
                  ) {
                    $steps["updateTodolist"] = await $steps["updateTodolist"];
                  }

                  $steps["invokeGlobalAction"] = !$state.jobinput.value
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            "\u067e\u0631 \u06a9\u0631\u062f\u0646 \u0646\u0627\u0645 \u06a9\u0627\u0631 \u0644\u0627\u0632\u0645 \u0627\u0633\u062a.",
                            "bottom-center"
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["updateTodoDialogOpendialog"] = $state.jobinput.value
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["todoDialog", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateTodoDialogOpendialog"] != null &&
                    typeof $steps["updateTodoDialogOpendialog"] === "object" &&
                    typeof $steps["updateTodoDialogOpendialog"].then ===
                      "function"
                  ) {
                    $steps["updateTodoDialogOpendialog"] = await $steps[
                      "updateTodoDialogOpendialog"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button13", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b0JRx
                  )}
                >
                  {"\u0627\u0641\u0632\u0648\u062f\u0646"}
                </div>
              </Button>
            </Stack__>
          </Dialog>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLiom",
    "number2",
    "textInput",
    "antdInput",
    "button2",
    "name2",
    "textInput2",
    "antdInput2",
    "radioGrop",
    "button3",
    "sms",
    "button4",
    "button5",
    "remove",
    "removeBtn",
    "button9",
    "getSign",
    "button14",
    "tabWeek2",
    "button12",
    "selectionBox",
    "color",
    "selectionBox2",
    "intensity",
    "selectionBox3",
    "water",
    "selectionBox4",
    "discharge",
    "selectionBox5",
    "status",
    "selectionBox6",
    "selectionBox7",
    "checkbox",
    "selectionBox8",
    "sex",
    "selectionBox9",
    "textInput7",
    "memory",
    "button",
    "dialog",
    "pickers",
    "button6",
    "number3",
    "pickers2",
    "button11",
    "medicine",
    "textInput3",
    "inputnameMedicine",
    "medisene",
    "textinput",
    "nameMedicine",
    "reveal",
    "button8",
    "textInput4",
    "numberOfMedicin",
    "button7",
    "button10",
    "todoDialog",
    "textInput6",
    "jobinput",
    "button13"
  ],
  headerLiom: ["headerLiom"],
  number2: ["number2", "textInput", "antdInput", "button2"],
  textInput: ["textInput", "antdInput"],
  antdInput: ["antdInput"],
  button2: ["button2"],
  name2: ["name2", "textInput2", "antdInput2", "radioGrop", "button3"],
  textInput2: ["textInput2", "antdInput2"],
  antdInput2: ["antdInput2"],
  radioGrop: ["radioGrop"],
  button3: ["button3"],
  sms: ["sms", "button4", "button5"],
  button4: ["button4"],
  button5: ["button5"],
  remove: ["remove", "removeBtn", "button9"],
  removeBtn: ["removeBtn"],
  button9: ["button9"],
  getSign: [
    "getSign",
    "button14",
    "tabWeek2",
    "button12",
    "selectionBox",
    "color",
    "selectionBox2",
    "intensity",
    "selectionBox3",
    "water",
    "selectionBox4",
    "discharge",
    "selectionBox5",
    "status",
    "selectionBox6",
    "selectionBox7",
    "checkbox",
    "selectionBox8",
    "sex",
    "selectionBox9",
    "textInput7",
    "memory",
    "button"
  ],
  button14: ["button14"],
  tabWeek2: ["tabWeek2"],
  button12: ["button12"],
  selectionBox: ["selectionBox", "color"],
  color: ["color"],
  selectionBox2: ["selectionBox2", "intensity"],
  intensity: ["intensity"],
  selectionBox3: ["selectionBox3", "water"],
  water: ["water"],
  selectionBox4: ["selectionBox4", "discharge"],
  discharge: ["discharge"],
  selectionBox5: ["selectionBox5", "status"],
  status: ["status"],
  selectionBox6: ["selectionBox6"],
  selectionBox7: ["selectionBox7", "checkbox"],
  checkbox: ["checkbox"],
  selectionBox8: ["selectionBox8", "sex"],
  sex: ["sex"],
  selectionBox9: ["selectionBox9", "textInput7", "memory"],
  textInput7: ["textInput7", "memory"],
  memory: ["memory"],
  button: ["button"],
  dialog: ["dialog", "pickers", "button6"],
  pickers: ["pickers"],
  button6: ["button6"],
  number3: ["number3", "pickers2", "button11"],
  pickers2: ["pickers2"],
  button11: ["button11"],
  medicine: [
    "medicine",
    "textInput3",
    "inputnameMedicine",
    "medisene",
    "textinput",
    "nameMedicine",
    "reveal",
    "button8",
    "textInput4",
    "numberOfMedicin",
    "button7",
    "button10"
  ],
  textInput3: ["textInput3", "inputnameMedicine"],
  inputnameMedicine: ["inputnameMedicine"],
  medisene: ["medisene", "textinput", "nameMedicine", "reveal", "button8"],
  textinput: ["textinput", "nameMedicine", "reveal", "button8"],
  nameMedicine: ["nameMedicine"],
  reveal: ["reveal", "button8"],
  button8: ["button8"],
  textInput4: ["textInput4", "numberOfMedicin"],
  numberOfMedicin: ["numberOfMedicin"],
  button7: ["button7"],
  button10: ["button10"],
  todoDialog: ["todoDialog", "textInput6", "jobinput", "button13"],
  textInput6: ["textInput6", "jobinput"],
  jobinput: ["jobinput"],
  button13: ["button13"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLiom: typeof HeaderLiom;
  number2: typeof AntdModal;
  textInput: typeof TextInput;
  antdInput: typeof Input;
  button2: typeof Button;
  name2: typeof AntdModal;
  textInput2: typeof TextInput;
  antdInput2: typeof Input;
  radioGrop: typeof RadioGrop;
  button3: typeof Button;
  sms: typeof AntdModal;
  button4: typeof Button;
  button5: typeof Button;
  remove: typeof AntdModal;
  removeBtn: typeof Button;
  button9: typeof Button;
  getSign: typeof ApiRequest;
  button14: typeof Button;
  tabWeek2: typeof TabWeek2;
  button12: typeof Button;
  selectionBox: "div";
  color: typeof Choices;
  selectionBox2: "div";
  intensity: typeof Choices;
  selectionBox3: "div";
  water: typeof Water;
  selectionBox4: "div";
  discharge: typeof Choices;
  selectionBox5: "div";
  status: typeof Choices;
  selectionBox6: "div";
  selectionBox7: "div";
  checkbox: typeof Checkbox;
  selectionBox8: "div";
  sex: typeof Choices;
  selectionBox9: "div";
  textInput7: typeof TextInput;
  memory: typeof TextArea;
  button: typeof Button;
  dialog: typeof Dialog;
  pickers: typeof Pickers;
  button6: typeof Button;
  number3: typeof Dialog;
  pickers2: typeof Pickers;
  button11: typeof Button;
  medicine: typeof Dialog;
  textInput3: typeof TextInput;
  inputnameMedicine: typeof Input;
  medisene: typeof Medisene;
  textinput: typeof TextInput;
  nameMedicine: typeof Input;
  reveal: typeof Reveal;
  button8: typeof Button;
  textInput4: typeof TextInput;
  numberOfMedicin: typeof Input;
  button7: typeof Button;
  button10: typeof Button;
  todoDialog: typeof Dialog;
  textInput6: typeof TextInput;
  jobinput: typeof Input;
  button13: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStatusDay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStatusDay__VariantsArgs;
    args?: PlasmicStatusDay__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStatusDay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStatusDay__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStatusDay__ArgProps,
          internalVariantPropNames: PlasmicStatusDay__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStatusDay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStatusDay";
  } else {
    func.displayName = `PlasmicStatusDay.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicStatusDay = Object.assign(
  // Top-level PlasmicStatusDay renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    headerLiom: makeNodeComponent("headerLiom"),
    number2: makeNodeComponent("number2"),
    textInput: makeNodeComponent("textInput"),
    antdInput: makeNodeComponent("antdInput"),
    button2: makeNodeComponent("button2"),
    name2: makeNodeComponent("name2"),
    textInput2: makeNodeComponent("textInput2"),
    antdInput2: makeNodeComponent("antdInput2"),
    radioGrop: makeNodeComponent("radioGrop"),
    button3: makeNodeComponent("button3"),
    sms: makeNodeComponent("sms"),
    button4: makeNodeComponent("button4"),
    button5: makeNodeComponent("button5"),
    remove: makeNodeComponent("remove"),
    removeBtn: makeNodeComponent("removeBtn"),
    button9: makeNodeComponent("button9"),
    getSign: makeNodeComponent("getSign"),
    button14: makeNodeComponent("button14"),
    tabWeek2: makeNodeComponent("tabWeek2"),
    button12: makeNodeComponent("button12"),
    selectionBox: makeNodeComponent("selectionBox"),
    color: makeNodeComponent("color"),
    selectionBox2: makeNodeComponent("selectionBox2"),
    intensity: makeNodeComponent("intensity"),
    selectionBox3: makeNodeComponent("selectionBox3"),
    water: makeNodeComponent("water"),
    selectionBox4: makeNodeComponent("selectionBox4"),
    discharge: makeNodeComponent("discharge"),
    selectionBox5: makeNodeComponent("selectionBox5"),
    status: makeNodeComponent("status"),
    selectionBox6: makeNodeComponent("selectionBox6"),
    selectionBox7: makeNodeComponent("selectionBox7"),
    checkbox: makeNodeComponent("checkbox"),
    selectionBox8: makeNodeComponent("selectionBox8"),
    sex: makeNodeComponent("sex"),
    selectionBox9: makeNodeComponent("selectionBox9"),
    textInput7: makeNodeComponent("textInput7"),
    memory: makeNodeComponent("memory"),
    button: makeNodeComponent("button"),
    dialog: makeNodeComponent("dialog"),
    pickers: makeNodeComponent("pickers"),
    button6: makeNodeComponent("button6"),
    number3: makeNodeComponent("number3"),
    pickers2: makeNodeComponent("pickers2"),
    button11: makeNodeComponent("button11"),
    medicine: makeNodeComponent("medicine"),
    textInput3: makeNodeComponent("textInput3"),
    inputnameMedicine: makeNodeComponent("inputnameMedicine"),
    medisene: makeNodeComponent("medisene"),
    textinput: makeNodeComponent("textinput"),
    nameMedicine: makeNodeComponent("nameMedicine"),
    reveal: makeNodeComponent("reveal"),
    button8: makeNodeComponent("button8"),
    textInput4: makeNodeComponent("textInput4"),
    numberOfMedicin: makeNodeComponent("numberOfMedicin"),
    button7: makeNodeComponent("button7"),
    button10: makeNodeComponent("button10"),
    todoDialog: makeNodeComponent("todoDialog"),
    textInput6: makeNodeComponent("textInput6"),
    jobinput: makeNodeComponent("jobinput"),
    button13: makeNodeComponent("button13"),

    // Metadata about props expected for PlasmicStatusDay
    internalVariantProps: PlasmicStatusDay__VariantProps,
    internalArgProps: PlasmicStatusDay__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicStatusDay;
/* prettier-ignore-end */
