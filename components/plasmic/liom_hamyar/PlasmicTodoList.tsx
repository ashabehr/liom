// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 0x91e3BeeLCM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import Checkbox from "../../Checkbox"; // plasmic-import: IwXl9xUH-ZMp/component
import BuyComponenct from "../../BuyComponenct"; // plasmic-import: Ww7_RchUYDdQ/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicTodoList.module.css"; // plasmic-import: 0x91e3BeeLCM/css

createPlasmicElementProxy;

export type PlasmicTodoList__VariantMembers = {
  darkMod: "darkMod";
};
export type PlasmicTodoList__VariantsArgs = {
  darkMod?: SingleBooleanChoiceArg<"darkMod">;
};
type VariantPropType = keyof PlasmicTodoList__VariantsArgs;
export const PlasmicTodoList__VariantProps = new Array<VariantPropType>(
  "darkMod"
);

export type PlasmicTodoList__ArgsType = {
  title?: string;
  tasks?: any;
  loading?: boolean;
  userId?: string;
  week?: string;
};
type ArgPropType = keyof PlasmicTodoList__ArgsType;
export const PlasmicTodoList__ArgProps = new Array<ArgPropType>(
  "title",
  "tasks",
  "loading",
  "userId",
  "week"
);

export type PlasmicTodoList__OverridesType = {
  root?: Flex__<"div">;
  collapse?: Flex__<typeof AntdSingleCollapse>;
  lottie?: Flex__<typeof LottieWrapper>;
  checkbox2?: Flex__<typeof Checkbox>;
  buyComponenct?: Flex__<typeof BuyComponenct>;
};

export interface DefaultTodoListProps {
  title?: string;
  tasks?: any;
  loading?: boolean;
  userId?: string;
  week?: string;
  darkMod?: SingleBooleanChoiceArg<"darkMod">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTodoList__RenderFunc(props: {
  variants: PlasmicTodoList__VariantsArgs;
  args: PlasmicTodoList__ArgsType;
  overrides: PlasmicTodoList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          loading: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "darkMod",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.darkMod
      },
      {
        path: "checkbox2[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "collapse.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootdarkMod]: hasVariant($state, "darkMod", "darkMod") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___13YdZ, {
          [sty.freeBoxdarkMod___13YdZkgh4P]: hasVariant(
            $state,
            "darkMod",
            "darkMod"
          )
        })}
      >
        {(() => {
          const child$Props = {
            bordered: true,
            className: classNames("__wab_instance", sty.collapse),
            defaultOpen: true,
            expandIcon: (
              <React.Fragment>
                {(() => {
                  try {
                    return $state.collapse.open;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___6Hv)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"25px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image31.svg",
                      fullWidth: 16,
                      fullHeight: 16,
                      aspectRatio: 1
                    }}
                  />
                ) : null}
                {(() => {
                  try {
                    return !$state.collapse.open;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___4JxkN)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"15px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image32.svg",
                      fullWidth: 16,
                      fullHeight: 16,
                      aspectRatio: 1
                    }}
                  />
                ) : null}
              </React.Fragment>
            ),
            expandIconPosition: "end",
            ghost: true,
            label2: (
              <div className={classNames(projectcss.all, sty.freeBox___46Bd3)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qy4Jx,
                    {
                      [sty.textdarkMod__qy4Jxkgh4P]: hasVariant(
                        $state,
                        "darkMod",
                        "darkMod"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {$props.title.replace(":", "")}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___01IeR,
                    {
                      [sty.textdarkMod___01IeRkgh4P]: hasVariant(
                        $state,
                        "darkMod",
                        "darkMod"
                      )
                    }
                  )}
                >
                  <React.Fragment>{"هفته " + $props.week}</React.Fragment>
                </div>
              </div>
            ),
            onChange: async (...eventArgs: any) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                "open",
                ["collapse", "open"],
                AntdSingleCollapse_Helpers
              ).apply(null, eventArgs);
            },
            open: generateStateValueProp($state, ["collapse", "open"]),
            showArrow: true,
            size: "small"
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "open",
                plasmicStateName: "collapse.open"
              }
            ],
            [],
            AntdSingleCollapse_Helpers ?? {},
            child$Props
          );

          return (
            <AntdSingleCollapse
              data-plasmic-name={"collapse"}
              data-plasmic-override={overrides.collapse}
              {...child$Props}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__jThwy, {
                  [sty.freeBoxdarkMod__jThwyKgh4P]: hasVariant(
                    $state,
                    "darkMod",
                    "darkMod"
                  )
                })}
              >
                {(() => {
                  try {
                    return $props.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <LottieWrapper
                    data-plasmic-name={"lottie"}
                    data-plasmic-override={overrides.lottie}
                    animationData={{
                      nm: "Loading Dots",
                      ddd: 0,
                      h: 50,
                      w: 100,
                      meta: { g: "@lottiefiles/toolkit-js 0.33.2" },
                      layers: [
                        {
                          ty: 4,
                          nm: "Dot4",
                          sr: 1,
                          st: 0,
                          op: 360,
                          ip: 0,
                          hd: false,
                          ddd: 0,
                          bm: 0,
                          hasMask: false,
                          ao: 0,
                          ks: {
                            a: { a: 0, k: [-284, 92, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [2.61, 2.32, 100],
                                  t: 25
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [3.91, 3.47, 100],
                                  t: 39
                                },
                                { s: [2.61, 2.32, 100], t: 55 }
                              ],
                              ix: 6
                            },
                            sk: { a: 0, k: 0 },
                            p: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [59.48, 25, 0],
                                  t: 25
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [59.48, 23.15, 0],
                                  t: 39
                                },
                                { s: [59.48, 25, 0], t: 55 }
                              ],
                              ix: 2
                            },
                            r: { a: 0, k: 0, ix: 10 },
                            sa: { a: 0, k: 0 },
                            o: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [25],
                                  t: 25
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [100],
                                  t: 39
                                },
                                { s: [25], t: 55 }
                              ],
                              ix: 11
                            }
                          },
                          ef: [],
                          shapes: [
                            {
                              ty: "gr",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Group",
                              nm: "Ellipse 1",
                              ix: 1,
                              cix: 2,
                              np: 3,
                              it: [
                                {
                                  ty: "el",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Shape - Ellipse",
                                  nm: "Ellipse Path 1",
                                  d: 1,
                                  p: { a: 0, k: [0, 0], ix: 3 },
                                  s: { a: 0, k: [120, 120], ix: 2 }
                                },
                                {
                                  ty: "fl",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Graphic - Fill",
                                  nm: "Fill 1",
                                  c: {
                                    a: 0,
                                    k: [0.5098, 0.3294, 0.7765],
                                    ix: 4
                                  },
                                  r: 1,
                                  o: { a: 0, k: 100, ix: 5 }
                                },
                                {
                                  ty: "tr",
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  p: { a: 0, k: [-284, 92], ix: 2 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  o: { a: 0, k: 100, ix: 7 }
                                }
                              ]
                            }
                          ],
                          ind: 1
                        },
                        {
                          ty: 4,
                          nm: "Dot3",
                          sr: 1,
                          st: 0,
                          op: 360,
                          ip: 0,
                          hd: false,
                          ddd: 0,
                          bm: 0,
                          hasMask: false,
                          ao: 0,
                          ks: {
                            a: { a: 0, k: [-284, 92, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [2.61, 2.32, 100],
                                  t: 17
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [3.91, 3.47, 100],
                                  t: 31
                                },
                                { s: [2.61, 2.32, 100], t: 47 }
                              ],
                              ix: 6
                            },
                            sk: { a: 0, k: 0 },
                            p: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [53.23, 25, 0],
                                  t: 17
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [53.23, 23.15, 0],
                                  t: 31
                                },
                                { s: [53.23, 25, 0], t: 47 }
                              ],
                              ix: 2
                            },
                            r: { a: 0, k: 0, ix: 10 },
                            sa: { a: 0, k: 0 },
                            o: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [25],
                                  t: 17
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [100],
                                  t: 31
                                },
                                { s: [25], t: 47 }
                              ],
                              ix: 11
                            }
                          },
                          ef: [],
                          shapes: [
                            {
                              ty: "gr",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Group",
                              nm: "Ellipse 1",
                              ix: 1,
                              cix: 2,
                              np: 3,
                              it: [
                                {
                                  ty: "el",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Shape - Ellipse",
                                  nm: "Ellipse Path 1",
                                  d: 1,
                                  p: { a: 0, k: [0, 0], ix: 3 },
                                  s: { a: 0, k: [120, 120], ix: 2 }
                                },
                                {
                                  ty: "fl",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Graphic - Fill",
                                  nm: "Fill 1",
                                  c: {
                                    a: 0,
                                    k: [0.5098, 0.3294, 0.7765],
                                    ix: 4
                                  },
                                  r: 1,
                                  o: { a: 0, k: 100, ix: 5 }
                                },
                                {
                                  ty: "tr",
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  p: { a: 0, k: [-284, 92], ix: 2 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  o: { a: 0, k: 100, ix: 7 }
                                }
                              ]
                            }
                          ],
                          ind: 2
                        },
                        {
                          ty: 4,
                          nm: "Dot2",
                          sr: 1,
                          st: 0,
                          op: 360,
                          ip: 0,
                          hd: false,
                          ddd: 0,
                          bm: 0,
                          hasMask: false,
                          ao: 0,
                          ks: {
                            a: { a: 0, k: [-284, 92, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [2.61, 2.32, 100],
                                  t: 9
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [3.91, 3.47, 100],
                                  t: 23
                                },
                                { s: [2.61, 2.32, 100], t: 39 }
                              ],
                              ix: 6
                            },
                            sk: { a: 0, k: 0 },
                            p: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [46.98, 25, 0],
                                  t: 9
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [46.98, 23.15, 0],
                                  t: 23
                                },
                                { s: [46.98, 25, 0], t: 39 }
                              ],
                              ix: 2
                            },
                            r: { a: 0, k: 0, ix: 10 },
                            sa: { a: 0, k: 0 },
                            o: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [25],
                                  t: 9
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [100],
                                  t: 23
                                },
                                { s: [25], t: 39 }
                              ],
                              ix: 11
                            }
                          },
                          ef: [],
                          shapes: [
                            {
                              ty: "gr",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Group",
                              nm: "Ellipse 1",
                              ix: 1,
                              cix: 2,
                              np: 3,
                              it: [
                                {
                                  ty: "el",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Shape - Ellipse",
                                  nm: "Ellipse Path 1",
                                  d: 1,
                                  p: { a: 0, k: [0, 0], ix: 3 },
                                  s: { a: 0, k: [120, 120], ix: 2 }
                                },
                                {
                                  ty: "fl",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Graphic - Fill",
                                  nm: "Fill 1",
                                  c: {
                                    a: 0,
                                    k: [0.5098, 0.3294, 0.7765],
                                    ix: 4
                                  },
                                  r: 1,
                                  o: { a: 0, k: 100, ix: 5 }
                                },
                                {
                                  ty: "tr",
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  p: { a: 0, k: [-284, 92], ix: 2 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  o: { a: 0, k: 100, ix: 7 }
                                }
                              ]
                            }
                          ],
                          ind: 3
                        },
                        {
                          ty: 4,
                          nm: "Dot1",
                          sr: 1,
                          st: 0,
                          op: 360,
                          ip: 0,
                          hd: false,
                          ddd: 0,
                          bm: 0,
                          hasMask: false,
                          ao: 0,
                          ks: {
                            a: { a: 0, k: [-284, 92, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [2.61, 2.32, 100],
                                  t: 0
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [3.91, 3.47, 100],
                                  t: 14
                                },
                                { s: [2.61, 2.32, 100], t: 30 }
                              ],
                              ix: 6
                            },
                            sk: { a: 0, k: 0 },
                            p: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [40.73, 25, 0],
                                  t: 0
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [40.73, 23.15, 0],
                                  t: 14
                                },
                                { s: [40.73, 25, 0], t: 30 }
                              ],
                              ix: 2
                            },
                            r: { a: 0, k: 0, ix: 10 },
                            sa: { a: 0, k: 0 },
                            o: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [25],
                                  t: 0
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [100],
                                  t: 14
                                },
                                { s: [25], t: 30 }
                              ],
                              ix: 11
                            }
                          },
                          ef: [],
                          shapes: [
                            {
                              ty: "gr",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Group",
                              nm: "Ellipse 1",
                              ix: 1,
                              cix: 2,
                              np: 3,
                              it: [
                                {
                                  ty: "el",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Shape - Ellipse",
                                  nm: "Ellipse Path 1",
                                  d: 1,
                                  p: { a: 0, k: [0, 0], ix: 3 },
                                  s: { a: 0, k: [120, 120], ix: 2 }
                                },
                                {
                                  ty: "fl",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Graphic - Fill",
                                  nm: "Fill 1",
                                  c: {
                                    a: 0,
                                    k: [0.5098, 0.3294, 0.7765],
                                    ix: 4
                                  },
                                  r: 1,
                                  o: { a: 0, k: 100, ix: 5 }
                                },
                                {
                                  ty: "tr",
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  p: { a: 0, k: [-284, 92], ix: 2 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  o: { a: 0, k: 100, ix: 7 }
                                }
                              ]
                            }
                          ],
                          ind: 4
                        }
                      ],
                      v: "5.7.11",
                      fr: 60,
                      op: 81,
                      ip: 0,
                      assets: []
                    }}
                    className={classNames("__wab_instance", sty.lottie)}
                  />
                ) : null}
                {(() => {
                  try {
                    return !$props.loading && $props.tasks[0].id != null;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()
                  ? (_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $props.tasks.length > 0 ? $props.tasks : [];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.checkbox2,
                            {
                              [sty.checkbox2darkMod]: hasVariant(
                                $state,
                                "darkMod",
                                "darkMod"
                              )
                            }
                          ),
                          isChecked:
                            generateStateValueProp($state, [
                              "checkbox2",
                              __plasmic_idx_0,
                              "isChecked"
                            ]) ?? false,
                          key: currentIndex,
                          onChange: async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "checkbox2",
                                __plasmic_idx_0,
                                "isChecked"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }

                            (async isChecked => {
                              const $steps = {};

                              $steps["invokeGlobalAction"] = isChecked
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        "https://n8n.staas.ir/webhook/task",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              userId: $props.userId,
                                              todoId: currentItem.id
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }

                              $steps["invokeGlobalAction2"] = !isChecked
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "PUT",
                                        "https://n8n.staas.ir/webhook/task",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              userId: $props.userId.slice(
                                                4,
                                                $props.userId.length - 4
                                              ),
                                              id: currentItem.id
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction2"] != null &&
                                typeof $steps["invokeGlobalAction2"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction2"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction2"] = await $steps[
                                  "invokeGlobalAction2"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "checkbox2[].isChecked",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return $props.tasks[currentIndex]
                                      .is_completed;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <Checkbox
                            data-plasmic-name={"checkbox2"}
                            data-plasmic-override={overrides.checkbox2}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gT1Zi
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__wPm7B
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__y5IhO
                                  )}
                                >
                                  <React.Fragment>
                                    {$props.tasks?.[currentIndex]?.tile}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__iTkxe
                                  )}
                                >
                                  <React.Fragment>
                                    {$props.tasks?.[currentIndex]?.text}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          </Checkbox>
                        );
                      })();
                    })
                  : null}
              </div>
              <BuyComponenct
                data-plasmic-name={"buyComponenct"}
                data-plasmic-override={overrides.buyComponenct}
                className={classNames("__wab_instance", sty.buyComponenct)}
              />
            </AntdSingleCollapse>
          );
        })()}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "collapse", "lottie", "checkbox2", "buyComponenct"],
  collapse: ["collapse", "lottie", "checkbox2", "buyComponenct"],
  lottie: ["lottie"],
  checkbox2: ["checkbox2"],
  buyComponenct: ["buyComponenct"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  collapse: typeof AntdSingleCollapse;
  lottie: typeof LottieWrapper;
  checkbox2: typeof Checkbox;
  buyComponenct: typeof BuyComponenct;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTodoList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTodoList__VariantsArgs;
    args?: PlasmicTodoList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTodoList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTodoList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTodoList__ArgProps,
          internalVariantPropNames: PlasmicTodoList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTodoList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTodoList";
  } else {
    func.displayName = `PlasmicTodoList.${nodeName}`;
  }
  return func;
}

export const PlasmicTodoList = Object.assign(
  // Top-level PlasmicTodoList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    collapse: makeNodeComponent("collapse"),
    lottie: makeNodeComponent("lottie"),
    checkbox2: makeNodeComponent("checkbox2"),
    buyComponenct: makeNodeComponent("buyComponenct"),

    // Metadata about props expected for PlasmicTodoList
    internalVariantProps: PlasmicTodoList__VariantProps,
    internalArgProps: PlasmicTodoList__ArgProps
  }
);

export default PlasmicTodoList;
/* prettier-ignore-end */
