/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: q5NYbKztjYXR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import LineClomp from "../../LineClomp"; // plasmic-import: XsM8QG4wUKlk/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Load from "../../Load"; // plasmic-import: MJo5g_R-znVP/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSelfCare2.module.css"; // plasmic-import: q5NYbKztjYXR/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon188Icon from "./icons/PlasmicIcon__Icon188"; // plasmic-import: Ap0CNp82zKxk/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: DnjmD0szshuz/icon

createPlasmicElementProxy;

export type PlasmicSelfCare2__VariantMembers = {};
export type PlasmicSelfCare2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelfCare2__VariantsArgs;
export const PlasmicSelfCare2__VariantProps = new Array<VariantPropType>();

export type PlasmicSelfCare2__ArgsType = {
  subItems?: any;
  onSubItemsChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicSelfCare2__ArgsType;
export const PlasmicSelfCare2__ArgProps = new Array<ArgPropType>(
  "subItems",
  "onSubItemsChange"
);

export type PlasmicSelfCare2__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  lineClomp?: Flex__<typeof LineClomp>;
  button?: Flex__<typeof Button>;
  embedHtml?: Flex__<typeof Embed>;
  img?: Flex__<typeof PlasmicImg__>;
  lineClomp2?: Flex__<typeof LineClomp>;
  load?: Flex__<typeof Load>;
};

export interface DefaultSelfCare2Props {
  subItems?: any;
  onSubItemsChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfCare2__RenderFunc(props: {
  variants: PlasmicSelfCare2__VariantsArgs;
  args: PlasmicSelfCare2__ArgsType;
  overrides: PlasmicSelfCare2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "relation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "hamyar"
      },
      {
        path: "masseg",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "errror",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "popoverOpen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [false, false]
      },
      {
        path: "removeItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loadingBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "v",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "care",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "lineClomp[].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "selfCare2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({ loading: true })
      },
      {
        path: "tools",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  type: "#inAppWebView",
                  action: `/self-sms-page?token=${localStorage.getItem(
                    "token"
                  )}&inApp=false`
                },
                {
                  type: "#hamyarInfo",
                  action: `/hamyar-add/?token=${localStorage.getItem("token")}`
                },
                {
                  type: "#biorhythm",
                  action: `/Biorhythm/?token=${localStorage.getItem("token")}`
                },
                {
                  type: "#appoinment",
                  action: `/clinic/?token=${localStorage.getItem(
                    "token"
                  )}&userId=${
                    JSON.parse(window.localStorage.getItem("userinfo")).user.id
                  }`
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "lineClomp2[].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "load.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "subItems",
        type: "writable",
        variableType: "object",

        valueProp: "subItems",
        onChangeProp: "onSubItemsChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["params"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      const queryString = window.location.search;
                      const urlParams = new URLSearchParams(queryString);
                      return urlParams.forEach((value, key) => {
                        $state.paramsObject[key] = value;
                      });
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["params"] != null &&
            typeof $steps["params"] === "object" &&
            typeof $steps["params"].then === "function"
          ) {
            $steps["params"] = await $steps["params"];
          }

          $steps["clearParams"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      const searchParams = new URLSearchParams(
                        window.location.search
                      );
                      searchParams.delete("token");
                      searchParams.delete("userId");
                      searchParams.delete("user_id");
                      const newUrl = `${
                        window.location.pathname
                      }?${searchParams.toString()}`;
                      return window.history.replaceState(null, "", newUrl);
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["clearParams"] != null &&
            typeof $steps["clearParams"] === "object" &&
            typeof $steps["clearParams"].then === "function"
          ) {
            $steps["clearParams"] = await $steps["clearParams"];
          }

          $steps["setCookie"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      if (
                        $state.paramsObject?.token !== undefined &&
                        $state.paramsObject?.token?.trim() !== ""
                      ) {
                        if (!$state.paramsObject.token.startsWith("ey"))
                          $state.paramsObject.token =
                            $state.paramsObject.token.slice(6, -3);
                        var setCookie = (name, value, days) => {
                          const expires = new Date(
                            Date.now() + days * 86400000
                          ).toUTCString();
                          document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                        };
                        return setCookie(
                          "token",
                          JSON.stringify([$state.paramsObject.token]),
                          100
                        );
                      }
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["setCookie"] != null &&
            typeof $steps["setCookie"] === "object" &&
            typeof $steps["setCookie"].then === "function"
          ) {
            $steps["setCookie"] = await $steps["setCookie"];
          }

          $steps["getCookie"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      var getCookie = name => {
                        const cookies = document.cookie.split("; ");
                        for (let cookie of cookies) {
                          const [key, value] = cookie.split("=");
                          if (key === name) return JSON.parse(value)[0];
                        }
                        return "";
                      };
                      return ($state.token = getCookie("token"));
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["getCookie"] != null &&
            typeof $steps["getCookie"] === "object" &&
            typeof $steps["getCookie"].then === "function"
          ) {
            $steps["getCookie"] = await $steps["getCookie"];
          }

          $steps["userGuset"] =
            $state.token == ""
              ? (() => {
                  const actionArgs = {
                    args: [
                      "POST",
                      "https://api.liom.app/auth/signup/guest",
                      undefined,
                      (() => {
                        try {
                          return (() => {
                            function pseudoUUID() {
                              let timestamp = Date.now().toString(36);
                              let randomStr = Math.random()
                                .toString(36)
                                .substr(2, 8);
                              return timestamp + "-" + randomStr;
                            }
                            return {
                              name: "کاربر مهمان",
                              gateway: "self_care",
                              country: "98",
                              isCountryPending: false,
                              lang: "fa",
                              version: "",
                              os: (() => {
                                const userAgent = window.navigator.userAgent;
                                const platform = window.navigator.userAgent;
                                if (/Windows/i.test(platform)) return "Windows";
                                if (/Mac/i.test(platform)) return "macOS";
                                if (/Linux/i.test(platform)) return "Linux";
                                if (/Android/i.test(userAgent))
                                  return "Android";
                                if (/iPhone|iPad|iPod/i.test(userAgent))
                                  return "iOS";
                                return "Unknown OS";
                              })(),
                              osVersion: (() => {
                                const userAgent = window.navigator.userAgent;
                                if (/Windows NT 10.0/.test(userAgent))
                                  return "Windows 10";
                                if (/Windows NT 6.3/.test(userAgent))
                                  return "Windows 8.1";
                                if (/Windows NT 6.2/.test(userAgent))
                                  return "Windows 8";
                                if (/Windows NT 6.1/.test(userAgent))
                                  return "Windows 7";
                                if (/Mac OS X (\d+[\._]\d+)/.test(userAgent))
                                  return `macOS ${RegExp.$1.replace("_", ".")}`;
                                if (/Android (\d+(\.\d+)?)/.test(userAgent))
                                  return `Android ${RegExp.$1}`;
                                if (
                                  /CPU (iPhone )?OS (\d+_\d+)/.test(userAgent)
                                )
                                  return `iOS ${RegExp.$2.replace("_", ".")}`;
                                return "Unknown Version";
                              })(),
                              sex: $state.gender || "",
                              additionalData: {
                                ip: "132465",
                                name: "test1"
                              },
                              device: (() => {
                                const userAgent = window.navigator.userAgent;
                                if (
                                  /Mobi|Android|iPhone|iPad|iPod/i.test(
                                    userAgent
                                  )
                                ) {
                                  return "Mobile";
                                } else if (/Tablet|iPad/i.test(userAgent)) {
                                  return "Tablet";
                                } else {
                                  return "Desktop";
                                }
                              })(),
                              fcm:
                                window.localStorage.getItem("fcmToken") || " ",
                              uniqueId: pseudoUUID(),
                              device_type: window.navigator.platform,
                              postLang: "fa"
                            };
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
          if (
            $steps["userGuset"] != null &&
            typeof $steps["userGuset"] === "object" &&
            typeof $steps["userGuset"].then === "function"
          ) {
            $steps["userGuset"] = await $steps["userGuset"];
          }

          $steps["setCookieGust"] =
            $steps.userGuset?.data?.success ?? false
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        var setCookie = (name, value, days) => {
                          const expires = new Date(
                            Date.now() + days * 86400000
                          ).toUTCString();
                          document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                        };
                        setCookie(
                          "token",
                          JSON.stringify([$steps.userGuset.data.result.token]),
                          100
                        );
                        return ($state.token =
                          $steps.userGuset.data.result.token);
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["setCookieGust"] != null &&
            typeof $steps["setCookieGust"] === "object" &&
            typeof $steps["setCookieGust"].then === "function"
          ) {
            $steps["setCookieGust"] = await $steps["setCookieGust"];
          }

          $steps["invokeGlobalAction"] =
            window.sessionStorage.getItem("hamyar") != "true"
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      "https://n8n.staas.ir/webhook/rest/tools/selfCare",
                      (() => {
                        try {
                          return { authorization: $state.token };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
          if (
            $steps["invokeGlobalAction"] != null &&
            typeof $steps["invokeGlobalAction"] === "object" &&
            typeof $steps["invokeGlobalAction"].then === "function"
          ) {
            $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
          }

          $steps["invokeGlobalAction3"] =
            window.sessionStorage.getItem("hamyar") == "true"
              ? (() => {
                  const actionArgs = {
                    args: [
                      "POST",
                      "https://n8n.staas.ir/webhook/rest/tools/selfCare",
                      undefined,
                      (() => {
                        try {
                          return { authorization: $state.token };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
          if (
            $steps["invokeGlobalAction3"] != null &&
            typeof $steps["invokeGlobalAction3"] === "object" &&
            typeof $steps["invokeGlobalAction3"].then === "function"
          ) {
            $steps["invokeGlobalAction3"] = await $steps["invokeGlobalAction3"];
          }

          $steps["updateSelfCare2"] =
            $steps.invokeGlobalAction?.data?.success == true ||
            $steps.invokeGlobalAction3?.data?.success == true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["selfCare2"]
                    },
                    operation: 0,
                    value:
                      $steps.invokeGlobalAction?.data ||
                      $steps.invokeGlobalAction3?.data
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updateSelfCare2"] != null &&
            typeof $steps["updateSelfCare2"] === "object" &&
            typeof $steps["updateSelfCare2"].then === "function"
          ) {
            $steps["updateSelfCare2"] = await $steps["updateSelfCare2"];
          }

          $steps["invokeGlobalAction2"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    "POST",
                    "https://api.liom.app/service/log",
                    undefined,
                    (() => {
                      try {
                        return {
                          userId:
                            new URLSearchParams(window.location.search).get(
                              "userId"
                            ) ||
                            JSON.parse(window.localStorage.getItem("userinfo"))
                              .user.id,
                          pageName: "self-care",
                          action: "loadePage",
                          extraData: {}
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    {
                      headers: {
                        "Content-Type": "application/json",
                        Authorization:
                          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                      }
                    }
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["invokeGlobalAction2"] != null &&
            typeof $steps["invokeGlobalAction2"] === "object" &&
            typeof $steps["invokeGlobalAction2"].then === "function"
          ) {
            $steps["invokeGlobalAction2"] = await $steps["invokeGlobalAction2"];
          }
        }}
      />

      {(() => {
        try {
          return $state.selfCare2.loading != true;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__jCz3N)}>
          <div className={classNames(projectcss.all, sty.freeBox__pWe4J)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.selfCare2.result.list.items.filter(
                    item => item.type != "breast_health"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__mYyWb)}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["load", "loading"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadLoading"] != null &&
                      typeof $steps["updateLoadLoading"] === "object" &&
                      typeof $steps["updateLoadLoading"].then === "function"
                    ) {
                      $steps["updateLoadLoading"] = await $steps[
                        "updateLoadLoading"
                      ];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return window.sessionStorage.setItem(
                                "subItems",
                                JSON.stringify(currentItem)
                              );
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["runCode2"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return window.open("/subItems", "_self");
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode2"] != null &&
                      typeof $steps["runCode2"] === "object" &&
                      typeof $steps["runCode2"].then === "function"
                    ) {
                      $steps["runCode2"] = await $steps["runCode2"];
                    }

                    $steps["updateLoadLoading2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["load", "loading"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadLoading2"] != null &&
                      typeof $steps["updateLoadLoading2"] === "object" &&
                      typeof $steps["updateLoadLoading2"].then === "function"
                    ) {
                      $steps["updateLoadLoading2"] = await $steps[
                        "updateLoadLoading2"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://api.liom.app/service/log",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    userId:
                                      new URLSearchParams(
                                        window.location.search
                                      ).get("userId") ||
                                      JSON.parse(
                                        window.localStorage.getItem("userinfo")
                                      ).user.id,
                                    pageName: "self-care",
                                    action: "category",
                                    extraData: {
                                      type: currentItem.type
                                    }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              {
                                headers: {
                                  "Content-Type": "application/json",
                                  Authorization:
                                    "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                }
                              }
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }
                  }}
                  style={(() => {
                    try {
                      return {
                        "background-color": currentItem.backgorund_color1
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iQmjz
                    )}
                    style={(() => {
                      try {
                        return {
                          color: currentItem.text_color
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0633\u0644\u0627\u0645\u062a \u0631\u062d\u0645";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <LineClomp
                    data-plasmic-name={"lineClomp"}
                    data-plasmic-override={overrides.lineClomp}
                    className={classNames("__wab_instance", sty.lineClomp)}
                    numberOfLine={2}
                    onLineChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "lineClomp",
                        __plasmic_idx_0,
                        "line"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__slJMj
                      )}
                      style={(() => {
                        try {
                          return {
                            color: currentItem.text_color
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.text;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "-\u0646\u0627\u0645\u0646\u0638\u0645\u06cc \u067e\u0631\u06cc\u0648\u062f\n-\u062a\u0646\u0628\u0644\u06cc \u062a\u062e\u0645\u062f\u0627\u0646";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </LineClomp>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.button),
                      color: generateStateValueProp($state, [
                        "button",
                        __plasmic_idx_0,
                        "color"
                      ]),
                      onColorChange: async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button",
                            __plasmic_idx_0,
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      size: "compact"
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "button[].color",
                          initFunc: ({ $props, $state, $queries }) =>
                            "softBlack"
                        }
                      ],
                      [__plasmic_idx_0]
                    );
                    return (
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        {...child$Props}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xYylk
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.btn_text;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0648\u0631\u0648\u062f";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Button>
                    );
                  })()}
                </div>
              );
            })}
          </div>
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : (() => {
                  try {
                    return window.sessionStorage.getItem("hamyar") != "true";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml)}
              code={"<hr></hr>"}
            />
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__kupC8)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.selfCare2.result.list.other.filter(
                    item => item.action != "#notifSettings"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__mk0Aj)}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["load", "loading"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadLoading"] != null &&
                      typeof $steps["updateLoadLoading"] === "object" &&
                      typeof $steps["updateLoadLoading"].then === "function"
                    ) {
                      $steps["updateLoadLoading"] = await $steps[
                        "updateLoadLoading"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return (() => {
                                    if (currentItem.action == "#biorhythm") {
                                      return window.sessionStorage.getItem(
                                        "hamyar"
                                      ) == "true"
                                        ? "#bioritm"
                                        : currentItem.action;
                                    } else {
                                      return currentItem.action;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return $state.token;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              "lll",
                              "false",
                              undefined,
                              true,
                              (() => {
                                try {
                                  return window.sessionStorage.getItem(
                                    "hamyar"
                                  ) == "true"
                                    ? {
                                        gender: "male",
                                        "home-page": encodeURIComponent(
                                          window.location.href
                                        )
                                      }
                                    : {
                                        "home-page": encodeURIComponent(
                                          window.location.href
                                        )
                                      };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.deepLink"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateLoadLoading2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["load", "loading"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadLoading2"] != null &&
                      typeof $steps["updateLoadLoading2"] === "object" &&
                      typeof $steps["updateLoadLoading2"].then === "function"
                    ) {
                      $steps["updateLoadLoading2"] = await $steps[
                        "updateLoadLoading2"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yzRzQ)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"100%"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return currentItem.image;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1B2I3)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__phkLk)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5T1Tr
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {(() => {
                        try {
                          return currentItem.isNew;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__n0XXy
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__p5R3X
                            )}
                          >
                            {"new"}
                          </div>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return currentItem.isPremium;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__of40K
                          )}
                        >
                          <Icon188Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__r4UP1
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                    </div>
                    <LineClomp
                      data-plasmic-name={"lineClomp2"}
                      data-plasmic-override={overrides.lineClomp2}
                      className={classNames("__wab_instance", sty.lineClomp2)}
                      numberOfLine={2}
                      onLineChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "lineClomp2",
                          __plasmic_idx_0,
                          "line"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lbwJi
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </LineClomp>
                  </div>
                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg__x9K4M)}
                    role={"img"}
                  />
                </div>
              );
            })}
          </div>
        </div>
      ) : null}
      {(() => {
        try {
          return $state.selfCare2.loading == true;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__i7LEc)}
          style={(() => {
            try {
              return {
                "padding-top":
                  $state.paramsObject.hamyar == "true" ? "16px" : ""
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <div className={classNames(projectcss.all, sty.freeBox__nFIuU)}>
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__qaiLo,
                "shimmer"
              )}
            />

            <div
              className={classNames(
                projectcss.all,
                sty.freeBox___86Idt,
                "shimmer"
              )}
            />
          </div>
          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__hHqEh,
              "shimmer"
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__bU7Nc,
              "shimmer"
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox___6D6Tq,
              "shimmer"
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__naJ1M,
              "shimmer"
            )}
          />
        </div>
      ) : null}
      <Load
        data-plasmic-name={"load"}
        data-plasmic-override={overrides.load}
        className={classNames("__wab_instance", sty.load)}
        loading={generateStateValueProp($state, ["load", "loading"])}
        onLoadingChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["load", "loading"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "lineClomp",
    "button",
    "embedHtml",
    "img",
    "lineClomp2",
    "load"
  ],
  sideEffect: ["sideEffect"],
  lineClomp: ["lineClomp"],
  button: ["button"],
  embedHtml: ["embedHtml"],
  img: ["img"],
  lineClomp2: ["lineClomp2"],
  load: ["load"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  lineClomp: typeof LineClomp;
  button: typeof Button;
  embedHtml: typeof Embed;
  img: typeof PlasmicImg__;
  lineClomp2: typeof LineClomp;
  load: typeof Load;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfCare2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfCare2__VariantsArgs;
    args?: PlasmicSelfCare2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfCare2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelfCare2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfCare2__ArgProps,
          internalVariantPropNames: PlasmicSelfCare2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfCare2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfCare2";
  } else {
    func.displayName = `PlasmicSelfCare2.${nodeName}`;
  }
  return func;
}

export const PlasmicSelfCare2 = Object.assign(
  // Top-level PlasmicSelfCare2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    lineClomp: makeNodeComponent("lineClomp"),
    button: makeNodeComponent("button"),
    embedHtml: makeNodeComponent("embedHtml"),
    img: makeNodeComponent("img"),
    lineClomp2: makeNodeComponent("lineClomp2"),
    load: makeNodeComponent("load"),

    // Metadata about props expected for PlasmicSelfCare2
    internalVariantProps: PlasmicSelfCare2__VariantProps,
    internalArgProps: PlasmicSelfCare2__ArgProps
  }
);

export default PlasmicSelfCare2;
/* prettier-ignore-end */
