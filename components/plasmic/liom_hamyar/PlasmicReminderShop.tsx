/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 3q6J_8ClWpvX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Dialog } from "@plasmicpkgs/radix-ui";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { DialogContent } from "@plasmicpkgs/radix-ui";
import { DialogTitle } from "@plasmicpkgs/radix-ui";
import Radio from "../../Radio"; // plasmic-import: hOINlBYPAtM2/component
import { Input } from "@/fragment/components/input"; // plasmic-import: zZH7vV9pXyf8/codeComponent
import RadioGroupLiom from "../../RadioGroupLiom"; // plasmic-import: tXN0uQ-uT9R3/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicReminderShop.module.css"; // plasmic-import: 3q6J_8ClWpvX/css

import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: Wm-tjDMQJVfn/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: DnjmD0szshuz/icon
import TomanSvgIcon from "./icons/PlasmicIcon__TomanSvg"; // plasmic-import: mWa4pf2hHZTW/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicReminderShop__VariantMembers = {};
export type PlasmicReminderShop__VariantsArgs = {};
type VariantPropType = keyof PlasmicReminderShop__VariantsArgs;
export const PlasmicReminderShop__VariantProps = new Array<VariantPropType>();

export type PlasmicReminderShop__ArgsType = {
  opendialog?: boolean;
  onOpendialogChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicReminderShop__ArgsType;
export const PlasmicReminderShop__ArgProps = new Array<ArgPropType>(
  "opendialog",
  "onOpendialogChange"
);

export type PlasmicReminderShop__OverridesType = {
  dialog3?: Flex__<typeof Dialog>;
  button3?: Flex__<typeof Button>;
  dialogContent?: Flex__<typeof DialogContent>;
  h5?: Flex__<"h5">;
  radio?: Flex__<typeof Radio>;
  input?: Flex__<typeof Input>;
  radioGroupLiom?: Flex__<typeof RadioGroupLiom>;
  button?: Flex__<typeof Button>;
};

export interface DefaultReminderShopProps {
  opendialog?: boolean;
  onOpendialogChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReminderShop__RenderFunc(props: {
  variants: PlasmicReminderShop__VariantsArgs;
  args: PlasmicReminderShop__ArgsType;
  overrides: PlasmicReminderShop__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.opendialog;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "opendialog",
        type: "writable",
        variableType: "boolean",

        valueProp: "opendialog",
        onChangeProp: "onOpendialogChange"
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button3.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "radioGroupLiom.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "radioGroupLiom.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label:
              "\u06f5\u06f0 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
            value: "50000"
          },
          {
            label:
              "\u06f1\u06f0\u06f0 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
            value: "100000"
          },
          {
            label:
              "\u06f2\u06f0\u06f0 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
            value: "200000"
          }
        ]
      },
      {
        path: "radioGroupLiom.selects",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <Dialog
      data-plasmic-name={"dialog3"}
      data-plasmic-override={overrides.dialog3}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.dialog3
      )}
      defaultOpen={(() => {
        try {
          return $state.opendialog;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["dialog3", "open"]).apply(
          null,
          eventArgs
        );

        (async open => {
          const $steps = {};

          $steps["updateOpendialog"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["opendialog"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateOpendialog"] != null &&
            typeof $steps["updateOpendialog"] === "object" &&
            typeof $steps["updateOpendialog"].then === "function"
          ) {
            $steps["updateOpendialog"] = await $steps["updateOpendialog"];
          }
        }).apply(null, eventArgs);
      }}
      open={generateStateValueProp($state, ["dialog3", "open"])}
      overlayClassName={classNames({
        [sty["pcls_1PCLAvG9ExMY"]]: true,
        [sty["pcls_Drp69ItlDbPm"]]: hasVariant(
          globalVariants,
          "screen",
          "mobile"
        )
      })}
      themeResetClass={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames
      )}
      triggerSlot={
        <Button
          data-plasmic-name={"button3"}
          data-plasmic-override={overrides.button3}
          className={classNames("__wab_instance", sty.button3)}
          color={generateStateValueProp($state, ["button3", "color"])}
          endIcon={
            <ChevronLeftIcon
              className={classNames(projectcss.all, sty.svg__upx3Z)}
              role={"img"}
            />
          }
          load={generateStateValueProp($state, ["button3", "load"])}
          loading={generateStateValueProp($state, ["button3", "loading"])}
          onColorChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button3", "color"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLoadChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button3", "load"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLoadingChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button3", "loading"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          startIcon={
            <ChevronRightIcon
              className={classNames(projectcss.all, sty.svg__apoxf)}
              role={"img"}
            />
          }
        />
      }
    >
      <DialogContent
        data-plasmic-name={"dialogContent"}
        data-plasmic-override={overrides.dialogContent}
        className={classNames("__wab_instance", sty.dialogContent)}
        enterAnimations={
          hasVariant(globalVariants, "screen", "mobile")
            ? ["slide-in-from-bottom"]
            : ["zoom-enter", "fade-in"]
        }
        enterDuration={0.5}
        exitAnimations={
          hasVariant(globalVariants, "screen", "mobile")
            ? ["slide-out-to-bottom"]
            : ["zoom-exit", "fade-out"]
        }
        exitDuration={0.5}
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames
        )}
      >
        <DialogTitle
          className={classNames("__wab_instance", sty.dialogTitle__pDxSr)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___6Y6Yw
            )}
          >
            {"Sheet title"}
          </div>
        </DialogTitle>
        <div className={classNames(projectcss.all, sty.freeBox__h7SWx)}>
          <div
            className={classNames(projectcss.all, sty.freeBox__hbHmY)}
            dir={"rtl"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__mgQm3)} />

            <DialogTitle
              className={classNames("__wab_instance", sty.dialogTitle__qhn0N)}
            >
              <h5
                data-plasmic-name={"h5"}
                data-plasmic-override={overrides.h5}
                className={classNames(projectcss.all, projectcss.h5, sty.h5)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__x5JtE
                  )}
                >
                  {
                    "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0627\u0639\u062a\u0628\u0627\u0631"
                  }
                </div>
                <Radio
                  data-plasmic-name={"radio"}
                  data-plasmic-override={overrides.radio}
                  className={classNames("__wab_instance", sty.radio)}
                  label={null}
                />
              </h5>
            </DialogTitle>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__doG54)}>
            <div
              className={classNames(projectcss.all, sty.freeBox__dj26N)}
              dir={"rtl"}
            >
              <Input
                data-plasmic-name={"input"}
                data-plasmic-override={overrides.input}
                className={classNames("__wab_instance", sty.input)}
                maxLength={9}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["input", "value"]).apply(
                    null,
                    eventArgs
                  );

                  (async value => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                var selectedValue = $state.input.value;
                                return ($state.radioGroupLiom.selected =
                                  $state.radioGroupLiom.list.some(
                                    item => item.value === selectedValue
                                  )
                                    ? selectedValue
                                    : "");
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }).apply(null, eventArgs);
                }}
                placeholder={
                  "\u0645\u0628\u0644\u063a \u062f\u0644\u062e\u0648\u0627\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                }
                type={"amount"}
                value={generateStateValueProp($state, ["input", "value"])}
              />

              <TomanSvgIcon
                className={classNames(projectcss.all, sty.svg__upiWq)}
                role={"img"}
              />

              {(() => {
                try {
                  return parseInt($state.input.value) < 20000;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cvzTs
                  )}
                >
                  {
                    "\u0645\u0628\u0644\u063a \u0646\u0645\u06cc\u062a\u0648\u0627\u0646\u062f \u06a9\u0645\u062a\u0631 \u0627\u0632 20 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646 \u0628\u0627\u0634\u062f."
                  }
                </div>
              ) : null}
              {(() => {
                try {
                  return parseInt($state.input.value) >= 20000;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3Hv7
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          function numberToPersianText(number) {
                            const yekan = [
                              "",
                              "یک",
                              "دو",
                              "سه",
                              "چهار",
                              "پنج",
                              "شش",
                              "هفت",
                              "هشت",
                              "نه"
                            ];

                            const dahgan = [
                              "",
                              "ده",
                              "بیست",
                              "سی",
                              "چهل",
                              "پنجاه",
                              "شصت",
                              "هفتاد",
                              "هشتاد",
                              "نود"
                            ];

                            const sadgan = [
                              "",
                              "صد",
                              "دویست",
                              "سیصد",
                              "چهارصد",
                              "پانصد",
                              "ششصد",
                              "هفتصد",
                              "هشتصد",
                              "نهصد"
                            ];

                            const dahYek = [
                              "ده",
                              "یازده",
                              "دوازده",
                              "سیزده",
                              "چهارده",
                              "پانزده",
                              "شانزده",
                              "هفده",
                              "هجده",
                              "نوزده"
                            ];

                            const hazarha = [
                              "",
                              "هزار",
                              "میلیون",
                              "میلیارد",
                              "بیلیون"
                            ];

                            function threeDigitToText(num) {
                              num = parseInt(num, 10);
                              if (num === 0) return "";
                              let result = "";
                              if (Math.floor(num / 100) > 0) {
                                result += sadgan[Math.floor(num / 100)];
                              }
                              num %= 100;
                              if (num >= 10 && num <= 19) {
                                result +=
                                  (result ? " و " : "") + dahYek[num - 10];
                              } else {
                                if (Math.floor(num / 10) > 0) {
                                  result +=
                                    (result ? " و " : "") +
                                    dahgan[Math.floor(num / 10)];
                                }
                                if (num % 10 > 0) {
                                  result +=
                                    (result ? " و " : "") + yekan[num % 10];
                                }
                              }
                              return result;
                            }
                            if (number === 0) return "صفر";
                            let numStr = number.toString();
                            let chunks = [];
                            while (numStr.length > 0) {
                              chunks.push(numStr.slice(-3));
                              numStr = numStr.slice(0, -3);
                            }
                            let parts = [];
                            for (let i = 0; i < chunks.length; i++) {
                              let chunk = parseInt(chunks[i], 10);
                              if (chunk !== 0) {
                                let text = threeDigitToText(chunk);
                                if (hazarha[i]) {
                                  text += " " + hazarha[i];
                                }
                                parts.unshift(text);
                              }
                            }
                            return parts.join(" و ");
                          }
                          return (
                            numberToPersianText($state.input.value) + " تومان "
                          );
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0645\u0628\u0644\u063a \u0646\u0645\u06cc\u062a\u0648\u0627\u0646\u062f \u06a9\u0645\u062a\u0631 \u0627\u0632 20 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646 \u0628\u0627\u0634\u062f.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
            </div>
            <RadioGroupLiom
              data-plasmic-name={"radioGroupLiom"}
              data-plasmic-override={overrides.radioGroupLiom}
              className={classNames("__wab_instance", sty.radioGroupLiom)}
              click={async () => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.input.value =
                            $state.radioGroupLiom.selected);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              list={generateStateValueProp($state, ["radioGroupLiom", "list"])}
              onListChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "radioGroupLiom",
                  "list"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onSelectedChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "radioGroupLiom",
                  "selected"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onSelectsChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "radioGroupLiom",
                  "selects"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              selected={generateStateValueProp($state, [
                "radioGroupLiom",
                "selected"
              ])}
              selects={generateStateValueProp($state, [
                "radioGroupLiom",
                "selects"
              ])}
              size={"small"}
              unnamedVariant={true}
            />
          </div>
        </div>
        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          color={generateStateValueProp($state, ["button", "color"])}
          load={generateStateValueProp($state, ["button", "load"])}
          loading={generateStateValueProp($state, ["button", "loading"])}
          onColorChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button", "color"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLoadChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button", "load"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLoadingChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button", "loading"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yDfxd
            )}
          >
            {"\u067e\u0631\u062f\u0627\u062e\u062a"}
          </div>
        </Button>
      </DialogContent>
    </Dialog>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  dialog3: [
    "dialog3",
    "button3",
    "dialogContent",
    "h5",
    "radio",
    "input",
    "radioGroupLiom",
    "button"
  ],
  button3: ["button3"],
  dialogContent: [
    "dialogContent",
    "h5",
    "radio",
    "input",
    "radioGroupLiom",
    "button"
  ],
  h5: ["h5", "radio"],
  radio: ["radio"],
  input: ["input"],
  radioGroupLiom: ["radioGroupLiom"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  dialog3: typeof Dialog;
  button3: typeof Button;
  dialogContent: typeof DialogContent;
  h5: "h5";
  radio: typeof Radio;
  input: typeof Input;
  radioGroupLiom: typeof RadioGroupLiom;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReminderShop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReminderShop__VariantsArgs;
    args?: PlasmicReminderShop__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicReminderShop__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicReminderShop__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReminderShop__ArgProps,
          internalVariantPropNames: PlasmicReminderShop__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReminderShop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "dialog3") {
    func.displayName = "PlasmicReminderShop";
  } else {
    func.displayName = `PlasmicReminderShop.${nodeName}`;
  }
  return func;
}

export const PlasmicReminderShop = Object.assign(
  // Top-level PlasmicReminderShop renders the root element
  makeNodeComponent("dialog3"),
  {
    // Helper components rendering sub-elements
    button3: makeNodeComponent("button3"),
    dialogContent: makeNodeComponent("dialogContent"),
    h5: makeNodeComponent("h5"),
    radio: makeNodeComponent("radio"),
    input: makeNodeComponent("input"),
    radioGroupLiom: makeNodeComponent("radioGroupLiom"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicReminderShop
    internalVariantProps: PlasmicReminderShop__VariantProps,
    internalArgProps: PlasmicReminderShop__ArgProps
  }
);

export default PlasmicReminderShop;
/* prettier-ignore-end */
