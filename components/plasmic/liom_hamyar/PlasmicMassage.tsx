/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: Bqqk_Gx32qFA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Seen from "../../Seen"; // plasmic-import: JqwoohhEEPXm/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMassage.module.css"; // plasmic-import: Bqqk_Gx32qFA/css

import Icon97Icon from "./icons/PlasmicIcon__Icon97"; // plasmic-import: kvFh159WsbQ8/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicMassage__VariantMembers = {
  you: "you";
  end: "end";
};
export type PlasmicMassage__VariantsArgs = {
  you?: SingleBooleanChoiceArg<"you">;
  end?: SingleBooleanChoiceArg<"end">;
};
type VariantPropType = keyof PlasmicMassage__VariantsArgs;
export const PlasmicMassage__VariantProps = new Array<VariantPropType>(
  "you",
  "end"
);

export type PlasmicMassage__ArgsType = {
  rectangle6?: React.ReactNode;
  loading?: boolean;
  onLoadingChange?: (val: string) => void;
  onButtonclick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicMassage__ArgsType;
export const PlasmicMassage__ArgProps = new Array<ArgPropType>(
  "rectangle6",
  "loading",
  "onLoadingChange",
  "onButtonclick"
);

export type PlasmicMassage__OverridesType = {
  group2?: Flex__<"div">;
  rectangle5?: Flex__<"div">;
  helloDoctorIBel3?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  helloDoctorIBel4?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultMassageProps {
  rectangle6?: React.ReactNode;
  loading?: boolean;
  onLoadingChange?: (val: string) => void;
  onButtonclick?: (event: any) => void;
  you?: SingleBooleanChoiceArg<"you">;
  end?: SingleBooleanChoiceArg<"end">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMassage__RenderFunc(props: {
  variants: PlasmicMassage__VariantsArgs;
  args: PlasmicMassage__ArgsType;
  overrides: PlasmicMassage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "you",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.you
      },
      {
        path: "end",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.end
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "red"
      },
      {
        path: "loading",
        type: "writable",
        variableType: "boolean",

        valueProp: "loading",
        onChangeProp: "onLoadingChange"
      },
      {
        path: "button.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"group2"}
      data-plasmic-override={overrides.group2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.group2,
        {
          [sty.group2end]: hasVariant($state, "end", "end"),
          [sty.group2you]: hasVariant($state, "you", "you")
        }
      )}
    >
      <div
        data-plasmic-name={"rectangle5"}
        data-plasmic-override={overrides.rectangle5}
        className={classNames(projectcss.all, sty.rectangle5, {
          [sty.rectangle5end]: hasVariant($state, "end", "end"),
          [sty.rectangle5you]: hasVariant($state, "you", "you")
        })}
      >
        {(hasVariant($state, "end", "end") ? false : true)
          ? renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nUuru
                    )}
                  >
                    {
                      "\u0622\u06cc\u0627 \u062c\u0648\u0627\u0628\u062a\u0648 \u0627\u0632 \u062f\u06a9\u062a\u0631 \u06af\u0631\u0641\u062a\u06cc\u061f"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fHuP5,
                      {
                        [sty.textend__fHuP5QZsv]: hasVariant(
                          $state,
                          "end",
                          "end"
                        )
                      }
                    )}
                  >
                    {
                      "\u0622\u06cc\u0627 \u062c\u0648\u0627\u0628\u062a\u0648 \u0627\u0632 \u062f\u06a9\u062a\u0631 \u06af\u0631\u0641\u062a\u06cc\u061f"
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dt3N)}
                  >
                    <Seen
                      className={classNames(
                        "__wab_instance",
                        sty.seen___1VeD8,
                        {
                          [sty.seenyou___1VeD88X9HZ]: hasVariant(
                            $state,
                            "you",
                            "you"
                          )
                        }
                      )}
                    />

                    <Icon97Icon
                      className={classNames(projectcss.all, sty.svg__aV0YT, {
                        [sty.svgyou__aV0YT8X9HZ]: hasVariant(
                          $state,
                          "you",
                          "you"
                        )
                      })}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gHqyz
                      )}
                    >
                      {"10:13"}
                    </div>
                  </div>
                </React.Fragment>
              ),
              value: args.rectangle6
            })
          : null}
        {(hasVariant($state, "end", "end") ? true : false) ? (
          <div
            data-plasmic-name={"helloDoctorIBel3"}
            data-plasmic-override={overrides.helloDoctorIBel3}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.helloDoctorIBel3,
              { [sty.helloDoctorIBel3end]: hasVariant($state, "end", "end") }
            )}
          >
            {hasVariant($state, "end", "end")
              ? "\u0622\u06cc\u0627 \u062c\u0648\u0627\u0628\u062a \u0631\u0648 \u0627\u0632 \u062f\u06a9\u062a\u0631 \u06af\u0631\u0641\u062a\u06cc\u061f"
              : "\u0622\u06cc\u0627 \u062c\u0648\u0627\u0628\u062a\u0648 \u0627\u0632 \u062f\u06a9\u062a\u0631 \u06af\u0631\u0641\u062a\u06cc\u061f"}
          </div>
        ) : null}
      </div>
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button, {
          [sty.buttonend]: hasVariant($state, "end", "end")
        })}
        color={generateStateValueProp($state, ["button", "color"])}
        endIcon={
          <Icon115Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgend]: hasVariant($state, "end", "end")
            })}
            role={"img"}
          />
        }
        isDisabled={(() => {
          try {
            return $state.loading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()}
        load={generateStateValueProp($state, ["button", "load"])}
        loading={generateStateValueProp($state, ["button", "loading"])}
        onClick={args.onButtonclick}
        onColorChange={async (...eventArgs: any) => {
          ((...eventArgs) => {
            generateStateOnChangeProp($state, ["button", "color"])(
              eventArgs[0]
            );
          }).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onLoadChange={async (...eventArgs: any) => {
          ((...eventArgs) => {
            generateStateOnChangeProp($state, ["button", "load"])(eventArgs[0]);
          }).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onLoadingChange={async (...eventArgs: any) => {
          ((...eventArgs) => {
            generateStateOnChangeProp($state, ["button", "loading"])(
              eventArgs[0]
            );
          }).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        shape={"rounded"}
        showEndIcon={(() => {
          try {
            return $state.loading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()}
        size={"compact"}
      >
        {(
          hasVariant($state, "end", "end")
            ? (() => {
                try {
                  return !$state.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"helloDoctorIBel4"}
            data-plasmic-override={overrides.helloDoctorIBel4}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.helloDoctorIBel4,
              { [sty.helloDoctorIBel4end]: hasVariant($state, "end", "end") }
            )}
          >
            {hasVariant($state, "end", "end")
              ? "\u0622\u06cc\u0627 \u0627\u0632 \u0627\u06cc\u0646 \u0645\u0634\u0627\u0648\u0631\u0647 \u0631\u0627\u0636\u06cc \u0628\u0648\u062f\u06cc\u062f\u061f"
              : "\u0622\u06cc\u0627 \u062c\u0648\u0627\u0628\u062a\u0648 \u0627\u0632 \u062f\u06a9\u062a\u0631 \u06af\u0631\u0641\u062a\u06cc\u061f"}
          </div>
        ) : null}
      </Button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  group2: [
    "group2",
    "rectangle5",
    "helloDoctorIBel3",
    "button",
    "helloDoctorIBel4",
    "svg"
  ],
  rectangle5: ["rectangle5", "helloDoctorIBel3"],
  helloDoctorIBel3: ["helloDoctorIBel3"],
  button: ["button", "helloDoctorIBel4", "svg"],
  helloDoctorIBel4: ["helloDoctorIBel4"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  group2: "div";
  rectangle5: "div";
  helloDoctorIBel3: "div";
  button: typeof Button;
  helloDoctorIBel4: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMassage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMassage__VariantsArgs;
    args?: PlasmicMassage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMassage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMassage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMassage__ArgProps,
          internalVariantPropNames: PlasmicMassage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMassage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "group2") {
    func.displayName = "PlasmicMassage";
  } else {
    func.displayName = `PlasmicMassage.${nodeName}`;
  }
  return func;
}

export const PlasmicMassage = Object.assign(
  // Top-level PlasmicMassage renders the root element
  makeNodeComponent("group2"),
  {
    // Helper components rendering sub-elements
    rectangle5: makeNodeComponent("rectangle5"),
    helloDoctorIBel3: makeNodeComponent("helloDoctorIBel3"),
    button: makeNodeComponent("button"),
    helloDoctorIBel4: makeNodeComponent("helloDoctorIBel4"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicMassage
    internalVariantProps: PlasmicMassage__VariantProps,
    internalArgProps: PlasmicMassage__ArgProps
  }
);

export default PlasmicMassage;
/* prettier-ignore-end */
