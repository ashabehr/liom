/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: j_hR0f0gqi6e

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import MainPage from "../../MainPage"; // plasmic-import: mwylH28Efyne/component
import MainHeader from "../../MainHeader"; // plasmic-import: 1YQK_N8j3twT/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import FooterMain from "../../FooterMain"; // plasmic-import: ev8_tr4YKTDz/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import SettingCycle4 from "../../SettingCycle4"; // plasmic-import: C5hqeG28n8GP/component
import SubItemsComponnet from "../../SubItemsComponnet"; // plasmic-import: b9qrgB2b1TrW/component
import EditProfile2 from "../../EditProfile2"; // plasmic-import: BZ95kklWU6Jb/component
import { BackHandler } from "@/components/BackHandler"; // plasmic-import: wpIQCsQJqUoV/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMain.module.css"; // plasmic-import: j_hR0f0gqi6e/css

import Icon185Icon from "./icons/PlasmicIcon__Icon185"; // plasmic-import: 3QmHdQOUm1zK/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon

createPlasmicElementProxy;

export type PlasmicMain__VariantMembers = {
  setting: "setting";
  subItem: "subItem";
  edit: "edit";
};
export type PlasmicMain__VariantsArgs = {
  setting?: SingleBooleanChoiceArg<"setting">;
  subItem?: SingleBooleanChoiceArg<"subItem">;
  edit?: SingleBooleanChoiceArg<"edit">;
};
type VariantPropType = keyof PlasmicMain__VariantsArgs;
export const PlasmicMain__VariantProps = new Array<VariantPropType>(
  "setting",
  "subItem",
  "edit"
);

export type PlasmicMain__ArgsType = {};
type ArgPropType = keyof PlasmicMain__ArgsType;
export const PlasmicMain__ArgProps = new Array<ArgPropType>();

export type PlasmicMain__OverridesType = {
  root?: Flex__<"div">;
  main?: Flex__<"div">;
  mainPage?: Flex__<typeof MainPage>;
  mainHeader?: Flex__<typeof MainHeader>;
  freeBox?: Flex__<"div">;
  svg?: Flex__<"svg">;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  footerMain?: Flex__<typeof FooterMain>;
  settingCycle4?: Flex__<typeof SettingCycle4>;
  subItemsComponnet?: Flex__<typeof SubItemsComponnet>;
  editProfile2?: Flex__<typeof EditProfile2>;
  backHandler?: Flex__<typeof BackHandler>;
  serviceWorker?: Flex__<typeof Embed>;
};

export interface DefaultMainProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMain__RenderFunc(props: {
  variants: PlasmicMain__VariantsArgs;
  args: PlasmicMain__ArgsType;
  overrides: PlasmicMain__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "mainHeader.dopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "footerMain.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.sessionStorage.getItem("footer") || "calendar";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "page",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                { name: "calendar", namefa: "چرخه قاعدگی" },
                { name: "self", namefa: "مراقبت از خود" }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "setting",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.setting
      },
      {
        path: "settingCycle4.editTime",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "kjlkjkj"
      },
      {
        path: "mainPage.editTime",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.settingCycle4.editTime;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "mainPage.userInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "subItem",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.subItem
      },
      {
        path: "edit",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.edit
      },
      {
        path: "editProfile2.token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "edit", "edit")
            ? (() => {
                try {
                  return $state.mainPage.token;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ``
      },
      {
        path: "mainPage.token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "loadBack",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "notif",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.Notification.permission !== "default";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "promise",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "button2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root,
            {
              [sty.rootedit]: hasVariant($state, "edit", "edit"),
              [sty.rootsetting]: hasVariant($state, "setting", "setting"),
              [sty.rootsubItem]: hasVariant($state, "subItem", "subItem")
            }
          )}
        >
          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main, {
              [sty.mainedit]: hasVariant($state, "edit", "edit"),
              [sty.mainsetting]: hasVariant($state, "setting", "setting"),
              [sty.mainsubItem]: hasVariant($state, "subItem", "subItem")
            })}
          >
            <MainPage
              data-plasmic-name={"mainPage"}
              data-plasmic-override={overrides.mainPage}
              className={classNames("__wab_instance", sty.mainPage, {
                [sty.mainPageedit]: hasVariant($state, "edit", "edit"),
                [sty.mainPagesubItem]: hasVariant($state, "subItem", "subItem")
              })}
              editTime={generateStateValueProp($state, [
                "mainPage",
                "editTime"
              ])}
              onEditTimeChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "mainPage",
                  "editTime"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onTokenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["mainPage", "token"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onUserInfoChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "mainPage",
                  "userInfo"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              page={(() => {
                try {
                  return $state.footerMain.type;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              setting={async () => {
                const $steps = {};

                $steps["updateSetting"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "setting",
                        operation: 2,
                        value: "setting"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSetting"] != null &&
                  typeof $steps["updateSetting"] === "object" &&
                  typeof $steps["updateSetting"].then === "function"
                ) {
                  $steps["updateSetting"] = await $steps["updateSetting"];
                }
              }}
              token={generateStateValueProp($state, ["mainPage", "token"])}
              userInfo={generateStateValueProp($state, [
                "mainPage",
                "userInfo"
              ])}
            />

            <section className={classNames(projectcss.all, sty.section__n8IXm)}>
              <MainHeader
                data-plasmic-name={"mainHeader"}
                data-plasmic-override={overrides.mainHeader}
                className={classNames("__wab_instance", sty.mainHeader)}
                dopen={generateStateValueProp($state, ["mainHeader", "dopen"])}
                onDopenChange2={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "mainHeader",
                    "dopen"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                openEdit={async () => {
                  const $steps = {};

                  $steps["updateEdit"] = true
                    ? (() => {
                        const actionArgs = { vgroup: "edit", operation: 2 };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          const oldValue = $stateGet($state, vgroup);
                          $stateSet($state, vgroup, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEdit"] != null &&
                    typeof $steps["updateEdit"] === "object" &&
                    typeof $steps["updateEdit"].then === "function"
                  ) {
                    $steps["updateEdit"] = await $steps["updateEdit"];
                  }
                }}
                slot={
                  <React.Fragment>
                    {(() => {
                      try {
                        return !$state.notif;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        color={generateStateValueProp($state, [
                          "button",
                          "color"
                        ])}
                        endIcon={
                          <LottieWrapper
                            animationData={{
                              v: "5.7.4",
                              fr: 60,
                              ip: 0,
                              op: 190,
                              w: 200,
                              h: 200,
                              nm: "Notification_Updated",
                              ddd: 0,
                              assets: [],
                              layers: [
                                {
                                  ddd: 0,
                                  ind: 1,
                                  ty: 4,
                                  nm: "Bell 2",
                                  sr: 1,
                                  ks: {
                                    o: { a: 0, k: 100, ix: 11 },
                                    r: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 95,
                                          s: [0]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 110,
                                          s: [22]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 125,
                                          s: [-22]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 140,
                                          s: [15]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 155,
                                          s: [-10]
                                        },
                                        { t: 170, s: [0] }
                                      ],
                                      ix: 10
                                    },
                                    p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                                    a: {
                                      a: 0,
                                      k: [-14.219, -40.102, 0],
                                      ix: 1,
                                      l: 2
                                    },
                                    s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                                  },
                                  ao: 0,
                                  hasMask: true,
                                  masksProperties: [
                                    {
                                      inv: false,
                                      mode: "f",
                                      pt: {
                                        a: 0,
                                        k: {
                                          i: [
                                            [0, -1.934],
                                            [4.932, 0],
                                            [0, 0],
                                            [0.032, 4.223],
                                            [-1.547, 1.676],
                                            [0, 26.361],
                                            [-18.949, 3.932],
                                            [0, 0],
                                            [-4.544, 0],
                                            [0, -4.544],
                                            [0, 0],
                                            [0, -20.045],
                                            [-4.963, -5.35]
                                          ],
                                          o: [
                                            [-0.033, 4.223],
                                            [0, 0],
                                            [-4.931, 0],
                                            [0, -1.934],
                                            [4.963, -5.35],
                                            [0, -20.045],
                                            [0, 0],
                                            [0, -4.544],
                                            [4.544, 0],
                                            [0, 0],
                                            [18.949, 3.932],
                                            [0, 26.361],
                                            [1.547, 1.676]
                                          ],
                                          v: [
                                            [43.75, 49.5],
                                            [35.467, 57.75],
                                            [-63.468, 57.75],
                                            [-71.75, 49.5],
                                            [-69.527, 43.892],
                                            [-55.218, 4.125],
                                            [-22.25, -35.868],
                                            [-22.25, -41.25],
                                            [-14, -49.5],
                                            [-5.75, -41.25],
                                            [-5.75, -35.868],
                                            [27.217, 4.125],
                                            [41.526, 43.892]
                                          ],
                                          c: true
                                        },
                                        ix: 1
                                      },
                                      o: { a: 0, k: 100, ix: 3 },
                                      x: { a: 0, k: 0, ix: 4 },
                                      nm: "Bell"
                                    }
                                  ],
                                  shapes: [
                                    {
                                      ty: "gr",
                                      it: [
                                        {
                                          ty: "rc",
                                          d: 1,
                                          s: { a: 0, k: [200, 200], ix: 2 },
                                          p: { a: 0, k: [0, 0], ix: 3 },
                                          r: { a: 0, k: 0, ix: 4 },
                                          nm: "Rectangle Path 1",
                                          mn: "ADBE Vector Shape - Rect",
                                          hd: false
                                        },
                                        {
                                          ty: "fl",
                                          c: {
                                            a: 0,
                                            k: [0.447, 0.329, 0.776, 1],
                                            ix: 4
                                          },
                                          o: { a: 0, k: 100, ix: 5 },
                                          r: 1,
                                          bm: 0,
                                          nm: "Fill 1",
                                          mn: "ADBE Vector Graphic - Fill",
                                          hd: false
                                        },
                                        {
                                          ty: "tr",
                                          p: {
                                            a: 0,
                                            k: [-14.219, 20.398],
                                            ix: 2
                                          },
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          r: { a: 0, k: 0, ix: 6 },
                                          o: { a: 0, k: 100, ix: 7 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          nm: "Transform"
                                        }
                                      ],
                                      nm: "Rectangle 1",
                                      np: 3,
                                      cix: 2,
                                      bm: 0,
                                      ix: 1,
                                      mn: "ADBE Vector Group",
                                      hd: false
                                    }
                                  ],
                                  ip: 95,
                                  op: 190,
                                  st: 95,
                                  bm: 0
                                },
                                {
                                  ddd: 0,
                                  ind: 2,
                                  ty: 4,
                                  nm: "Spindle 2",
                                  sr: 1,
                                  ks: {
                                    o: { a: 0, k: 100, ix: 11 },
                                    r: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 95,
                                          s: [0]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 110,
                                          s: [35]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 125,
                                          s: [-35]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 140,
                                          s: [25]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 155,
                                          s: [-22]
                                        },
                                        { t: 170, s: [0] }
                                      ],
                                      ix: 10
                                    },
                                    p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                                    a: {
                                      a: 0,
                                      k: [-14.219, -40.102, 0],
                                      ix: 1,
                                      l: 2
                                    },
                                    s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                                  },
                                  ao: 0,
                                  hasMask: true,
                                  masksProperties: [
                                    {
                                      inv: false,
                                      mode: "f",
                                      pt: {
                                        a: 0,
                                        k: {
                                          i: [
                                            [0, 9.121],
                                            [0, 0],
                                            [9.12, 0]
                                          ],
                                          o: [
                                            [0, 0],
                                            [0, 9.121],
                                            [-9.12, 0]
                                          ],
                                          v: [
                                            [-30.5, 66],
                                            [2.5, 66],
                                            [-14, 82.5]
                                          ],
                                          c: true
                                        },
                                        ix: 1
                                      },
                                      o: { a: 0, k: 100, ix: 3 },
                                      x: { a: 0, k: 0, ix: 4 },
                                      nm: "Spindle"
                                    }
                                  ],
                                  shapes: [
                                    {
                                      ty: "gr",
                                      it: [
                                        {
                                          ty: "rc",
                                          d: 1,
                                          s: { a: 0, k: [200, 200], ix: 2 },
                                          p: { a: 0, k: [0, 0], ix: 3 },
                                          r: { a: 0, k: 0, ix: 4 },
                                          nm: "Rectangle Path 1",
                                          mn: "ADBE Vector Shape - Rect",
                                          hd: false
                                        },
                                        {
                                          ty: "fl",
                                          c: {
                                            a: 0,
                                            k: [0.447, 0.329, 0.776, 1],
                                            ix: 4
                                          },
                                          o: { a: 0, k: 100, ix: 5 },
                                          r: 1,
                                          bm: 0,
                                          nm: "Fill 1",
                                          mn: "ADBE Vector Graphic - Fill",
                                          hd: false
                                        },
                                        {
                                          ty: "tr",
                                          p: {
                                            a: 0,
                                            k: [-14.219, 20.398],
                                            ix: 2
                                          },
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          r: { a: 0, k: 0, ix: 6 },
                                          o: { a: 0, k: 100, ix: 7 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          nm: "Transform"
                                        }
                                      ],
                                      nm: "Rectangle 1",
                                      np: 3,
                                      cix: 2,
                                      bm: 0,
                                      ix: 1,
                                      mn: "ADBE Vector Group",
                                      hd: false
                                    }
                                  ],
                                  ip: 95,
                                  op: 190,
                                  st: 95,
                                  bm: 0
                                },
                                {
                                  ddd: 0,
                                  ind: 3,
                                  ty: 4,
                                  nm: "Bell",
                                  sr: 1,
                                  ks: {
                                    o: { a: 0, k: 100, ix: 11 },
                                    r: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 0,
                                          s: [0]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 15,
                                          s: [22]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 30,
                                          s: [-22]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 45,
                                          s: [15]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 60,
                                          s: [-10]
                                        },
                                        { t: 75, s: [0] }
                                      ],
                                      ix: 10
                                    },
                                    p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                                    a: {
                                      a: 0,
                                      k: [-14.219, -40.102, 0],
                                      ix: 1,
                                      l: 2
                                    },
                                    s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                                  },
                                  ao: 0,
                                  hasMask: true,
                                  masksProperties: [
                                    {
                                      inv: false,
                                      mode: "f",
                                      pt: {
                                        a: 0,
                                        k: {
                                          i: [
                                            [0, -1.934],
                                            [4.932, 0],
                                            [0, 0],
                                            [0.032, 4.223],
                                            [-1.547, 1.676],
                                            [0, 26.361],
                                            [-18.949, 3.932],
                                            [0, 0],
                                            [-4.544, 0],
                                            [0, -4.544],
                                            [0, 0],
                                            [0, -20.045],
                                            [-4.963, -5.35]
                                          ],
                                          o: [
                                            [-0.033, 4.223],
                                            [0, 0],
                                            [-4.931, 0],
                                            [0, -1.934],
                                            [4.963, -5.35],
                                            [0, -20.045],
                                            [0, 0],
                                            [0, -4.544],
                                            [4.544, 0],
                                            [0, 0],
                                            [18.949, 3.932],
                                            [0, 26.361],
                                            [1.547, 1.676]
                                          ],
                                          v: [
                                            [43.75, 49.5],
                                            [35.467, 57.75],
                                            [-63.468, 57.75],
                                            [-71.75, 49.5],
                                            [-69.527, 43.892],
                                            [-55.218, 4.125],
                                            [-22.25, -35.868],
                                            [-22.25, -41.25],
                                            [-14, -49.5],
                                            [-5.75, -41.25],
                                            [-5.75, -35.868],
                                            [27.217, 4.125],
                                            [41.526, 43.892]
                                          ],
                                          c: true
                                        },
                                        ix: 1
                                      },
                                      o: { a: 0, k: 100, ix: 3 },
                                      x: { a: 0, k: 0, ix: 4 },
                                      nm: "Bell"
                                    }
                                  ],
                                  shapes: [
                                    {
                                      ty: "gr",
                                      it: [
                                        {
                                          ty: "rc",
                                          d: 1,
                                          s: { a: 0, k: [200, 200], ix: 2 },
                                          p: { a: 0, k: [0, 0], ix: 3 },
                                          r: { a: 0, k: 0, ix: 4 },
                                          nm: "Rectangle Path 1",
                                          mn: "ADBE Vector Shape - Rect",
                                          hd: false
                                        },
                                        {
                                          ty: "fl",
                                          c: {
                                            a: 0,
                                            k: [0.447, 0.329, 0.776, 1],
                                            ix: 4
                                          },
                                          o: { a: 0, k: 100, ix: 5 },
                                          r: 1,
                                          bm: 0,
                                          nm: "Fill 1",
                                          mn: "ADBE Vector Graphic - Fill",
                                          hd: false
                                        },
                                        {
                                          ty: "tr",
                                          p: {
                                            a: 0,
                                            k: [-14.219, 20.398],
                                            ix: 2
                                          },
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          r: { a: 0, k: 0, ix: 6 },
                                          o: { a: 0, k: 100, ix: 7 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          nm: "Transform"
                                        }
                                      ],
                                      nm: "Rectangle 1",
                                      np: 3,
                                      cix: 2,
                                      bm: 0,
                                      ix: 1,
                                      mn: "ADBE Vector Group",
                                      hd: false
                                    }
                                  ],
                                  ip: 0,
                                  op: 95,
                                  st: 0,
                                  bm: 0
                                },
                                {
                                  ddd: 0,
                                  ind: 4,
                                  ty: 4,
                                  nm: "Spindle",
                                  sr: 1,
                                  ks: {
                                    o: { a: 0, k: 100, ix: 11 },
                                    r: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 0,
                                          s: [0]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 15,
                                          s: [35]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 30,
                                          s: [-35]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 45,
                                          s: [25]
                                        },
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 60,
                                          s: [-22]
                                        },
                                        { t: 75, s: [0] }
                                      ],
                                      ix: 10
                                    },
                                    p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                                    a: {
                                      a: 0,
                                      k: [-14.219, -40.102, 0],
                                      ix: 1,
                                      l: 2
                                    },
                                    s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                                  },
                                  ao: 0,
                                  hasMask: true,
                                  masksProperties: [
                                    {
                                      inv: false,
                                      mode: "f",
                                      pt: {
                                        a: 0,
                                        k: {
                                          i: [
                                            [0, 9.121],
                                            [0, 0],
                                            [9.12, 0]
                                          ],
                                          o: [
                                            [0, 0],
                                            [0, 9.121],
                                            [-9.12, 0]
                                          ],
                                          v: [
                                            [-30.5, 66],
                                            [2.5, 66],
                                            [-14, 82.5]
                                          ],
                                          c: true
                                        },
                                        ix: 1
                                      },
                                      o: { a: 0, k: 100, ix: 3 },
                                      x: { a: 0, k: 0, ix: 4 },
                                      nm: "Spindle"
                                    }
                                  ],
                                  shapes: [
                                    {
                                      ty: "gr",
                                      it: [
                                        {
                                          ty: "rc",
                                          d: 1,
                                          s: { a: 0, k: [200, 200], ix: 2 },
                                          p: { a: 0, k: [0, 0], ix: 3 },
                                          r: { a: 0, k: 0, ix: 4 },
                                          nm: "Rectangle Path 1",
                                          mn: "ADBE Vector Shape - Rect",
                                          hd: false
                                        },
                                        {
                                          ty: "fl",
                                          c: {
                                            a: 0,
                                            k: [0.447, 0.329, 0.776, 1],
                                            ix: 4
                                          },
                                          o: { a: 0, k: 100, ix: 5 },
                                          r: 1,
                                          bm: 0,
                                          nm: "Fill 1",
                                          mn: "ADBE Vector Graphic - Fill",
                                          hd: false
                                        },
                                        {
                                          ty: "tr",
                                          p: {
                                            a: 0,
                                            k: [-14.219, 20.398],
                                            ix: 2
                                          },
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          r: { a: 0, k: 0, ix: 6 },
                                          o: { a: 0, k: 100, ix: 7 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          nm: "Transform"
                                        }
                                      ],
                                      nm: "Rectangle 1",
                                      np: 3,
                                      cix: 2,
                                      bm: 0,
                                      ix: 1,
                                      mn: "ADBE Vector Group",
                                      hd: false
                                    }
                                  ],
                                  ip: 0,
                                  op: 95,
                                  st: 0,
                                  bm: 0
                                }
                              ],
                              markers: []
                            }}
                            className={classNames(
                              "__wab_instance",
                              sty.lottie__a1HZe
                            )}
                          />
                        }
                        load={generateStateValueProp($state, [
                          "button",
                          "load"
                        ])}
                        loading={generateStateValueProp($state, [
                          "button",
                          "loading"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return requestPermission().then(result => {
                                      $state.promise = result;
                                    });
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return $state.promise.ok == true
                                          ? "success"
                                          : "error";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return $state.promise.message;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    "top-left"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["updateNotif"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["notif"]
                                  },
                                  operation: 0,
                                  value: $state.promise.ok == true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateNotif"] != null &&
                            typeof $steps["updateNotif"] === "object" &&
                            typeof $steps["updateNotif"].then === "function"
                          ) {
                            $steps["updateNotif"] = await $steps["updateNotif"];
                          }
                        }}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button",
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadingChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button",
                              "loading"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        shape={"rounded"}
                        showEndIcon={true}
                        size={"compact"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7Hh8B
                          )}
                        >
                          {
                            "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u0634\u0646"
                          }
                        </div>
                      </Button>
                    ) : null}
                    <Button
                      data-plasmic-name={"button2"}
                      data-plasmic-override={overrides.button2}
                      children={null}
                      className={classNames("__wab_instance", sty.button2)}
                      color={generateStateValueProp($state, [
                        "button2",
                        "color"
                      ])}
                      endIcon={
                        <LottieWrapper
                          animationData={{
                            v: "5.7.4",
                            fr: 60,
                            ip: 0,
                            op: 190,
                            w: 200,
                            h: 200,
                            nm: "Notification_Updated",
                            ddd: 0,
                            assets: [],
                            layers: [
                              {
                                ddd: 0,
                                ind: 1,
                                ty: 4,
                                nm: "Bell 2",
                                sr: 1,
                                ks: {
                                  o: { a: 0, k: 100, ix: 11 },
                                  r: {
                                    a: 1,
                                    k: [
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 95,
                                        s: [0]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 110,
                                        s: [22]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 125,
                                        s: [-22]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 140,
                                        s: [15]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 155,
                                        s: [-10]
                                      },
                                      { t: 170, s: [0] }
                                    ],
                                    ix: 10
                                  },
                                  p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                                  a: {
                                    a: 0,
                                    k: [-14.219, -40.102, 0],
                                    ix: 1,
                                    l: 2
                                  },
                                  s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                                },
                                ao: 0,
                                hasMask: true,
                                masksProperties: [
                                  {
                                    inv: false,
                                    mode: "f",
                                    pt: {
                                      a: 0,
                                      k: {
                                        i: [
                                          [0, -1.934],
                                          [4.932, 0],
                                          [0, 0],
                                          [0.032, 4.223],
                                          [-1.547, 1.676],
                                          [0, 26.361],
                                          [-18.949, 3.932],
                                          [0, 0],
                                          [-4.544, 0],
                                          [0, -4.544],
                                          [0, 0],
                                          [0, -20.045],
                                          [-4.963, -5.35]
                                        ],
                                        o: [
                                          [-0.033, 4.223],
                                          [0, 0],
                                          [-4.931, 0],
                                          [0, -1.934],
                                          [4.963, -5.35],
                                          [0, -20.045],
                                          [0, 0],
                                          [0, -4.544],
                                          [4.544, 0],
                                          [0, 0],
                                          [18.949, 3.932],
                                          [0, 26.361],
                                          [1.547, 1.676]
                                        ],
                                        v: [
                                          [43.75, 49.5],
                                          [35.467, 57.75],
                                          [-63.468, 57.75],
                                          [-71.75, 49.5],
                                          [-69.527, 43.892],
                                          [-55.218, 4.125],
                                          [-22.25, -35.868],
                                          [-22.25, -41.25],
                                          [-14, -49.5],
                                          [-5.75, -41.25],
                                          [-5.75, -35.868],
                                          [27.217, 4.125],
                                          [41.526, 43.892]
                                        ],
                                        c: true
                                      },
                                      ix: 1
                                    },
                                    o: { a: 0, k: 100, ix: 3 },
                                    x: { a: 0, k: 0, ix: 4 },
                                    nm: "Bell"
                                  }
                                ],
                                shapes: [
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ty: "rc",
                                        d: 1,
                                        s: { a: 0, k: [200, 200], ix: 2 },
                                        p: { a: 0, k: [0, 0], ix: 3 },
                                        r: { a: 0, k: 0, ix: 4 },
                                        nm: "Rectangle Path 1",
                                        mn: "ADBE Vector Shape - Rect",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [0.447, 0.329, 0.776, 1],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: {
                                          a: 0,
                                          k: [-14.219, 20.398],
                                          ix: 2
                                        },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Rectangle 1",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 1,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  }
                                ],
                                ip: 95,
                                op: 190,
                                st: 95,
                                bm: 0
                              },
                              {
                                ddd: 0,
                                ind: 2,
                                ty: 4,
                                nm: "Spindle 2",
                                sr: 1,
                                ks: {
                                  o: { a: 0, k: 100, ix: 11 },
                                  r: {
                                    a: 1,
                                    k: [
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 95,
                                        s: [0]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 110,
                                        s: [35]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 125,
                                        s: [-35]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 140,
                                        s: [25]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 155,
                                        s: [-22]
                                      },
                                      { t: 170, s: [0] }
                                    ],
                                    ix: 10
                                  },
                                  p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                                  a: {
                                    a: 0,
                                    k: [-14.219, -40.102, 0],
                                    ix: 1,
                                    l: 2
                                  },
                                  s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                                },
                                ao: 0,
                                hasMask: true,
                                masksProperties: [
                                  {
                                    inv: false,
                                    mode: "f",
                                    pt: {
                                      a: 0,
                                      k: {
                                        i: [
                                          [0, 9.121],
                                          [0, 0],
                                          [9.12, 0]
                                        ],
                                        o: [
                                          [0, 0],
                                          [0, 9.121],
                                          [-9.12, 0]
                                        ],
                                        v: [
                                          [-30.5, 66],
                                          [2.5, 66],
                                          [-14, 82.5]
                                        ],
                                        c: true
                                      },
                                      ix: 1
                                    },
                                    o: { a: 0, k: 100, ix: 3 },
                                    x: { a: 0, k: 0, ix: 4 },
                                    nm: "Spindle"
                                  }
                                ],
                                shapes: [
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ty: "rc",
                                        d: 1,
                                        s: { a: 0, k: [200, 200], ix: 2 },
                                        p: { a: 0, k: [0, 0], ix: 3 },
                                        r: { a: 0, k: 0, ix: 4 },
                                        nm: "Rectangle Path 1",
                                        mn: "ADBE Vector Shape - Rect",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [0.447, 0.329, 0.776, 1],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: {
                                          a: 0,
                                          k: [-14.219, 20.398],
                                          ix: 2
                                        },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Rectangle 1",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 1,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  }
                                ],
                                ip: 95,
                                op: 190,
                                st: 95,
                                bm: 0
                              },
                              {
                                ddd: 0,
                                ind: 3,
                                ty: 4,
                                nm: "Bell",
                                sr: 1,
                                ks: {
                                  o: { a: 0, k: 100, ix: 11 },
                                  r: {
                                    a: 1,
                                    k: [
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 0,
                                        s: [0]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 15,
                                        s: [22]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 30,
                                        s: [-22]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 45,
                                        s: [15]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 60,
                                        s: [-10]
                                      },
                                      { t: 75, s: [0] }
                                    ],
                                    ix: 10
                                  },
                                  p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                                  a: {
                                    a: 0,
                                    k: [-14.219, -40.102, 0],
                                    ix: 1,
                                    l: 2
                                  },
                                  s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                                },
                                ao: 0,
                                hasMask: true,
                                masksProperties: [
                                  {
                                    inv: false,
                                    mode: "f",
                                    pt: {
                                      a: 0,
                                      k: {
                                        i: [
                                          [0, -1.934],
                                          [4.932, 0],
                                          [0, 0],
                                          [0.032, 4.223],
                                          [-1.547, 1.676],
                                          [0, 26.361],
                                          [-18.949, 3.932],
                                          [0, 0],
                                          [-4.544, 0],
                                          [0, -4.544],
                                          [0, 0],
                                          [0, -20.045],
                                          [-4.963, -5.35]
                                        ],
                                        o: [
                                          [-0.033, 4.223],
                                          [0, 0],
                                          [-4.931, 0],
                                          [0, -1.934],
                                          [4.963, -5.35],
                                          [0, -20.045],
                                          [0, 0],
                                          [0, -4.544],
                                          [4.544, 0],
                                          [0, 0],
                                          [18.949, 3.932],
                                          [0, 26.361],
                                          [1.547, 1.676]
                                        ],
                                        v: [
                                          [43.75, 49.5],
                                          [35.467, 57.75],
                                          [-63.468, 57.75],
                                          [-71.75, 49.5],
                                          [-69.527, 43.892],
                                          [-55.218, 4.125],
                                          [-22.25, -35.868],
                                          [-22.25, -41.25],
                                          [-14, -49.5],
                                          [-5.75, -41.25],
                                          [-5.75, -35.868],
                                          [27.217, 4.125],
                                          [41.526, 43.892]
                                        ],
                                        c: true
                                      },
                                      ix: 1
                                    },
                                    o: { a: 0, k: 100, ix: 3 },
                                    x: { a: 0, k: 0, ix: 4 },
                                    nm: "Bell"
                                  }
                                ],
                                shapes: [
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ty: "rc",
                                        d: 1,
                                        s: { a: 0, k: [200, 200], ix: 2 },
                                        p: { a: 0, k: [0, 0], ix: 3 },
                                        r: { a: 0, k: 0, ix: 4 },
                                        nm: "Rectangle Path 1",
                                        mn: "ADBE Vector Shape - Rect",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [0.447, 0.329, 0.776, 1],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: {
                                          a: 0,
                                          k: [-14.219, 20.398],
                                          ix: 2
                                        },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Rectangle 1",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 1,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  }
                                ],
                                ip: 0,
                                op: 95,
                                st: 0,
                                bm: 0
                              },
                              {
                                ddd: 0,
                                ind: 4,
                                ty: 4,
                                nm: "Spindle",
                                sr: 1,
                                ks: {
                                  o: { a: 0, k: 100, ix: 11 },
                                  r: {
                                    a: 1,
                                    k: [
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 0,
                                        s: [0]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 15,
                                        s: [35]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 30,
                                        s: [-35]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 45,
                                        s: [25]
                                      },
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        t: 60,
                                        s: [-22]
                                      },
                                      { t: 75, s: [0] }
                                    ],
                                    ix: 10
                                  },
                                  p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                                  a: {
                                    a: 0,
                                    k: [-14.219, -40.102, 0],
                                    ix: 1,
                                    l: 2
                                  },
                                  s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                                },
                                ao: 0,
                                hasMask: true,
                                masksProperties: [
                                  {
                                    inv: false,
                                    mode: "f",
                                    pt: {
                                      a: 0,
                                      k: {
                                        i: [
                                          [0, 9.121],
                                          [0, 0],
                                          [9.12, 0]
                                        ],
                                        o: [
                                          [0, 0],
                                          [0, 9.121],
                                          [-9.12, 0]
                                        ],
                                        v: [
                                          [-30.5, 66],
                                          [2.5, 66],
                                          [-14, 82.5]
                                        ],
                                        c: true
                                      },
                                      ix: 1
                                    },
                                    o: { a: 0, k: 100, ix: 3 },
                                    x: { a: 0, k: 0, ix: 4 },
                                    nm: "Spindle"
                                  }
                                ],
                                shapes: [
                                  {
                                    ty: "gr",
                                    it: [
                                      {
                                        ty: "rc",
                                        d: 1,
                                        s: { a: 0, k: [200, 200], ix: 2 },
                                        p: { a: 0, k: [0, 0], ix: 3 },
                                        r: { a: 0, k: 0, ix: 4 },
                                        nm: "Rectangle Path 1",
                                        mn: "ADBE Vector Shape - Rect",
                                        hd: false
                                      },
                                      {
                                        ty: "fl",
                                        c: {
                                          a: 0,
                                          k: [0.447, 0.329, 0.776, 1],
                                          ix: 4
                                        },
                                        o: { a: 0, k: 100, ix: 5 },
                                        r: 1,
                                        bm: 0,
                                        nm: "Fill 1",
                                        mn: "ADBE Vector Graphic - Fill",
                                        hd: false
                                      },
                                      {
                                        ty: "tr",
                                        p: {
                                          a: 0,
                                          k: [-14.219, 20.398],
                                          ix: 2
                                        },
                                        a: { a: 0, k: [0, 0], ix: 1 },
                                        s: { a: 0, k: [100, 100], ix: 3 },
                                        r: { a: 0, k: 0, ix: 6 },
                                        o: { a: 0, k: 100, ix: 7 },
                                        sk: { a: 0, k: 0, ix: 4 },
                                        sa: { a: 0, k: 0, ix: 5 },
                                        nm: "Transform"
                                      }
                                    ],
                                    nm: "Rectangle 1",
                                    np: 3,
                                    cix: 2,
                                    bm: 0,
                                    ix: 1,
                                    mn: "ADBE Vector Group",
                                    hd: false
                                  }
                                ],
                                ip: 0,
                                op: 95,
                                st: 0,
                                bm: 0
                              }
                            ],
                            markers: []
                          }}
                          className={classNames(
                            "__wab_instance",
                            sty.lottie__p9ZxS
                          )}
                        />
                      }
                      load={generateStateValueProp($state, ["button2", "load"])}
                      loading={generateStateValueProp($state, [
                        "button2",
                        "loading"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return requestPermission().then(result => {
                                    $state.promise = result;
                                  });
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return $state.promise.ok == true
                                        ? "success"
                                        : "error";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  (() => {
                                    try {
                                      return $state.promise.message;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  "top-left"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["updateNotif"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["notif"]
                                },
                                operation: 0,
                                value: $state.promise.ok == true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateNotif"] != null &&
                          typeof $steps["updateNotif"] === "object" &&
                          typeof $steps["updateNotif"].then === "function"
                        ) {
                          $steps["updateNotif"] = await $steps["updateNotif"];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button2",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button2",
                            "load"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadingChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button2",
                            "loading"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      shape={"rounded"}
                      showEndIcon={true}
                      size={"compact"}
                    />
                  </React.Fragment>
                }
                token={(() => {
                  try {
                    return localStorage.getItem("token");
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                userinfo={(() => {
                  try {
                    return JSON.parse(window.localStorage.getItem("userinfo"))
                      .user;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {};
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <Icon185Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateMainHeaderDopen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["mainHeader", "dopen"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateMainHeaderDopen"] != null &&
                        typeof $steps["updateMainHeaderDopen"] === "object" &&
                        typeof $steps["updateMainHeaderDopen"].then ===
                          "function"
                      ) {
                        $steps["updateMainHeaderDopen"] = await $steps[
                          "updateMainHeaderDopen"
                        ];
                      }
                    }}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ajJTs
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.page.find(
                            item => item.name == $state.footerMain.type
                          ).namefa;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u0648\u06cc\u0698\u0647";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </MainHeader>
            </section>
            <section className={classNames(projectcss.all, sty.section__vtIx7)}>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.footerMain),
                  footer2: (() => {
                    try {
                      return $state.footerMain.type;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "calendar";
                      }
                      throw e;
                    }
                  })(),
                  onTypeChange: async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "footerMain",
                      "type"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  },
                  type: generateStateValueProp($state, ["footerMain", "type"])
                };

                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "footerMain.type",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return (
                              window.sessionStorage.getItem("footer") ||
                              "calendar"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],
                  []
                );
                return (
                  <FooterMain
                    data-plasmic-name={"footerMain"}
                    data-plasmic-override={overrides.footerMain}
                    {...child$Props}
                  />
                );
              })()}
            </section>
          </div>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__xy1Bv, {
              [sty.revealsetting__xy1BvH13CE]: hasVariant(
                $state,
                "setting",
                "setting"
              ),
              [sty.revealsubItem__xy1BvaUdim]: hasVariant(
                $state,
                "subItem",
                "subItem"
              )
            })}
            damping={0.2}
            effect={"fade"}
            triggerOnce={true}
          >
            <SettingCycle4
              data-plasmic-name={"settingCycle4"}
              data-plasmic-override={overrides.settingCycle4}
              active={(() => {
                try {
                  return $state.setting == true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.settingCycle4, {
                [sty.settingCycle4setting]: hasVariant(
                  $state,
                  "setting",
                  "setting"
                )
              })}
              editTime={generateStateValueProp($state, [
                "settingCycle4",
                "editTime"
              ])}
              onBack={async event => {
                const $steps = {};

                $steps["updateSetting"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "setting",
                        operation: 2,
                        value: "setting"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSetting"] != null &&
                  typeof $steps["updateSetting"] === "object" &&
                  typeof $steps["updateSetting"].then === "function"
                ) {
                  $steps["updateSetting"] = await $steps["updateSetting"];
                }
              }}
              onEditTimeChange2={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "settingCycle4",
                  "editTime"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async val => {
                  const $steps = {};

                  $steps["updateMainPageEditTime"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["mainPage", "editTime"]
                          },
                          operation: 0,
                          value: $state.settingCycle4.editTime
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateMainPageEditTime"] != null &&
                    typeof $steps["updateMainPageEditTime"] === "object" &&
                    typeof $steps["updateMainPageEditTime"].then === "function"
                  ) {
                    $steps["updateMainPageEditTime"] = await $steps[
                      "updateMainPageEditTime"
                    ];
                  }

                  $steps["updateMainHeaderDopen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["mainHeader", "dopen"]
                          },
                          operation: 0,
                          value: console.log($state.settingCycle4.editTime)
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateMainHeaderDopen"] != null &&
                    typeof $steps["updateMainHeaderDopen"] === "object" &&
                    typeof $steps["updateMainHeaderDopen"].then === "function"
                  ) {
                    $steps["updateMainHeaderDopen"] = await $steps[
                      "updateMainHeaderDopen"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              userStatus={(() => {
                try {
                  return $state.mainPage.userInfo.result.userStatus;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </Reveal>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__xsDwA, {
              [sty.revealsetting__xsDwAh13CE]: hasVariant(
                $state,
                "setting",
                "setting"
              ),
              [sty.revealsubItem__xsDwAaUdim]: hasVariant(
                $state,
                "subItem",
                "subItem"
              )
            })}
            damping={0.2}
            effect={"fade"}
            triggerOnce={true}
          >
            <SubItemsComponnet
              data-plasmic-name={"subItemsComponnet"}
              data-plasmic-override={overrides.subItemsComponnet}
              className={classNames("__wab_instance", sty.subItemsComponnet)}
            />
          </Reveal>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__dIf5, {
              [sty.revealedit__dIf50J1ZH]: hasVariant($state, "edit", "edit"),
              [sty.revealsetting__dIf5H13CE]: hasVariant(
                $state,
                "setting",
                "setting"
              ),
              [sty.revealsubItem__dIf5AUdim]: hasVariant(
                $state,
                "subItem",
                "subItem"
              )
            })}
            damping={0.2}
            effect={"fade"}
            triggerOnce={true}
          >
            <EditProfile2
              data-plasmic-name={"editProfile2"}
              data-plasmic-override={overrides.editProfile2}
              active={(() => {
                try {
                  return $state.edit == true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()}
              back={async () => {
                const $steps = {};

                $steps["updateEdit"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "edit", operation: 2 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEdit"] != null &&
                  typeof $steps["updateEdit"] === "object" &&
                  typeof $steps["updateEdit"].then === "function"
                ) {
                  $steps["updateEdit"] = await $steps["updateEdit"];
                }
              }}
              className={classNames("__wab_instance", sty.editProfile2, {
                [sty.editProfile2edit]: hasVariant($state, "edit", "edit")
              })}
              onTokenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "editProfile2",
                  "token"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              token={generateStateValueProp($state, ["editProfile2", "token"])}
            />
          </Reveal>
          <BackHandler
            data-plasmic-name={"backHandler"}
            data-plasmic-override={overrides.backHandler}
            active={(() => {
              try {
                return $state.loadBack;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.backHandler)}
            onBack={async () => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = { args: ["custom", "hi", "top-center"] };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }}
          />

          <SideEffect
            className={classNames("__wab_instance", sty.sideEffect__nf1SX)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function cleanUrlParams() {
                            const searchParams = new URLSearchParams(
                              window.location.search
                            );
                            const paramsToDelete = [
                              "token",
                              "userId",
                              "user_id"
                            ];

                            let removed = false;
                            paramsToDelete.forEach(param => {
                              if (searchParams.has(param)) {
                                searchParams.delete(param);
                                removed = true;
                              }
                            });
                            const queryString = searchParams.toString();
                            const newUrl = queryString
                              ? `${window.location.pathname}?${queryString}`
                              : window.location.pathname;
                            window.history.replaceState(null, "", newUrl);
                            if (removed) {
                              console.log(
                                "\u2705 پارامترهای خواسته‌شده به ترتیب حذف شدند"
                              );
                            } else {
                              console.log(
                                "ℹ️ هیچ‌کدوم از پارامترها وجود نداشتند"
                              );
                            }
                          }
                          return cleanUrlParams();
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return window.history.back();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateLoadBack"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["loadBack"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateLoadBack"] != null &&
                typeof $steps["updateLoadBack"] === "object" &&
                typeof $steps["updateLoadBack"].then === "function"
              ) {
                $steps["updateLoadBack"] = await $steps["updateLoadBack"];
              }
            }}
          />

          <SideEffect
            className={classNames("__wab_instance", sty.sideEffect__jmdmg)}
            onMount={async () => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://n8n.staas.ir/webhook/version",
                        undefined,
                        (() => {
                          try {
                            return {
                              platform: (() => {
                                const userAgent = window.navigator.userAgent;
                                const platform = window.navigator.userAgent;
                                if (/Windows/i.test(platform)) return "Windows";
                                if (/Mac/i.test(platform)) return "macOS";
                                if (/Linux/i.test(platform)) return "Linux";
                                if (/Android/i.test(userAgent))
                                  return "Android";
                                if (/iPhone|iPad|iPod/i.test(userAgent))
                                  return "iOS";
                                return "Unknown OS";
                              })(),
                              store: "pwa",
                              versionCode: 1,
                              versionName: "PWA 1.0.0",
                              isUpdate: true,
                              Authorization: (() => {
                                var getCookie = name => {
                                  const cookies =
                                    window.document.cookie.split("; ");
                                  for (let cookie of cookies) {
                                    const [key, value] = cookie.split("=");
                                    if (key === name)
                                      return JSON.parse(value)[0];
                                  }
                                  return "";
                                };
                                return getCookie("token");
                              })()
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }}
          />

          <Embed
            data-plasmic-name={"serviceWorker"}
            data-plasmic-override={overrides.serviceWorker}
            className={classNames("__wab_instance", sty.serviceWorker)}
            code={
              '<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>\r\n<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-messaging-compat.js"></script>\r\n\r\n<script>\r\n  // \u062a\u0646\u0638\u06cc\u0645\u0627\u062a Firebase\r\n  var firebaseConfig = {\r\n    apiKey: "AIzaSyBVtKyIzcD0xVEMOjeMYjDdNRozFVVrmRo",\r\n    authDomain: "liom-31952.firebaseapp.com",\r\n    databaseURL: "https://liom-31952.firebaseio.com",\r\n    projectId: "liom-31952",\r\n    storageBucket: "liom-31952.appspot.com",\r\n    messagingSenderId: "518322220404",\r\n    appId: "1:518322220404:web:09527c8a42f2f017d89021",\r\n    measurementId: "G-TVWYWYEH1D"\r\n  };\r\n\r\n  // \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 initialize \u062f\u0648\u0628\u0627\u0631\u0647\r\n  if (!firebase.apps.length) {\r\n    firebase.initializeApp(firebaseConfig);\r\n  }\r\n\r\n  // \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 \u062a\u0639\u0631\u06cc\u0641 \u062f\u0648\u0628\u0627\u0631\u0647 messaging\r\n  var messaging = window.messaging || firebase.messaging();\r\n  window.messaging = messaging;\r\n\r\n  // \u06af\u0631\u0641\u062a\u0646 \u06a9\u0648\u06a9\u06cc\r\n  function getCookie(name) {\r\n    var cookies = document.cookie.split("; ");\r\n    for (let cookie of cookies) {\r\n      var [key, value] = cookie.split("=");\r\n      if (key === name) {\r\n        try {\r\n          return JSON.parse(value)[0];\r\n        } catch (e) {\r\n          return value;\r\n        }\r\n      }\r\n    }\r\n    return "";\r\n  }\r\n\r\n  function sendTokenToServer(token) {\r\n    var authToken = getCookie("token");\r\n    if (!authToken) {\r\n      console.warn("\u274c \u062a\u0648\u06a9\u0646 \u06a9\u0627\u0631\u0628\u0631 \u0645\u0648\u062c\u0648\u062f \u0646\u06cc\u0633\u062a\u060c \u0627\u0631\u0633\u0627\u0644 FCM \u0644\u063a\u0648 \u0634\u062f.");\r\n      return;\r\n    }\r\n\r\n    console.log("\ud83d\udce1 \u0627\u0631\u0633\u0627\u0644 \u062a\u0648\u06a9\u0646 FCM \u0628\u0647 \u0633\u0631\u0648\u0631...", token);\r\n\r\n    fetch("https://n8n.staas.ir/webhook/rest/user/setFcm", {\r\n      method: "POST",\r\n      headers: {\r\n        "Content-Type": "application/json"\r\n      },\r\n      body: JSON.stringify({\r\n        fcm: token,\r\n        Authorization: authToken\r\n      })\r\n    })\r\n      .then(res => {\r\n        if (!res.ok) throw new Error("\u062e\u0637\u0627 \u062f\u0631 \u0627\u0631\u0633\u0627\u0644 \u062a\u0648\u06a9\u0646");\r\n        return res.json();\r\n      })\r\n      .then(data => console.log("\u2705 \u062a\u0648\u06a9\u0646 FCM \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0628\u0647 \u0633\u0631\u0648\u0631 \u0627\u0631\u0633\u0627\u0644 \u0634\u062f:", data))\r\n      .catch(err => console.error("\u274c \u062e\u0637\u0627 \u062f\u0631 \u0627\u0631\u0633\u0627\u0644 \u062a\u0648\u06a9\u0646 FCM:", err));\r\n  }\r\n\r\n  function requestPermission() {\r\n    return new Promise((resolve) => {\r\n      if (!("Notification" in window)) {\r\n        return resolve({ ok: false, message: "\u0645\u0631\u0648\u0631\u06af\u0631 \u0634\u0645\u0627 Notification \u0631\u0627 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u0646\u0645\u06cc\u200c\u06a9\u0646\u062f." });\r\n      }\r\n\r\n      Notification.requestPermission().then(permission => {\r\n        if (permission === "granted") {\r\n          // \u0627\u0648\u0644 \u062a\u0648\u06a9\u0646 \u0642\u0628\u0644\u06cc \u0631\u0648 \u062d\u0630\u0641 \u0645\u06cc\u200c\u06a9\u0646\u06cc\u0645\r\n          messaging.deleteToken().then(() => {\r\n            console.log("\u267b\ufe0f \u062a\u0648\u06a9\u0646 \u0642\u0628\u0644\u06cc \u062d\u0630\u0641 \u0634\u062f\u060c \u062f\u0631\u06cc\u0627\u0641\u062a \u062a\u0648\u06a9\u0646 \u062c\u062f\u06cc\u062f...");\r\n\r\n            messaging.getToken({\r\n              vapidKey: "BDroVn6KRs9iN1laogFt-J47xc9WsWIfblgIBCi2QllonFT-PAu9up26gRlL-9uL7R1FSllN7I13eTR6IZiH72g"\r\n            })\r\n            .then(currentToken => {\r\n              if (currentToken) {\r\n                sendTokenToServer(currentToken);\r\n                return resolve({ ok: true, message: " Notification \u0641\u0639\u0627\u0644 \u0634\u062f \u0648 \u062a\u0648\u06a9\u0646 \u062c\u062f\u06cc\u062f \u062f\u0631\u06cc\u0627\u0641\u062a \u0634\u062f." });\r\n              } else {\r\n                return resolve({ ok: false, message: " \u062f\u0633\u062a\u0631\u0633\u06cc \u0641\u0639\u0627\u0644 \u0646\u0634\u062f\u060c \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f." });\r\n              }\r\n            })\r\n            .catch(err => {\r\n              console.error("\u274c \u062e\u0637\u0627 \u062f\u0631 \u06af\u0631\u0641\u062a\u0646 \u062a\u0648\u06a9\u0646:", err);\r\n              return resolve({ ok: false, message: "\u062e\u0637\u0627 \u062f\u0631 \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc Notification." });\r\n            });\r\n          });\r\n\r\n        } else if (permission === "denied") {\r\n          return resolve({ ok: false, message: " \u062f\u0633\u062a\u0631\u0633\u06cc Notification \u0631\u062f \u0634\u062f." });\r\n        } else {\r\n          return resolve({ ok: false, message: "\u062f\u0633\u062a\u0631\u0633\u06cc Notification \u0647\u0646\u0648\u0632 \u062f\u0627\u062f\u0647 \u0646\u0634\u062f\u0647." });\r\n        }\r\n      });\r\n    });\r\n  }\r\n</script>\r\n\r\n'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "main",
    "mainPage",
    "mainHeader",
    "freeBox",
    "svg",
    "button",
    "button2",
    "footerMain",
    "settingCycle4",
    "subItemsComponnet",
    "editProfile2",
    "backHandler",
    "serviceWorker"
  ],
  main: [
    "main",
    "mainPage",
    "mainHeader",
    "freeBox",
    "svg",
    "button",
    "button2",
    "footerMain"
  ],
  mainPage: ["mainPage"],
  mainHeader: ["mainHeader", "freeBox", "svg", "button", "button2"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"],
  button: ["button"],
  button2: ["button2"],
  footerMain: ["footerMain"],
  settingCycle4: ["settingCycle4"],
  subItemsComponnet: ["subItemsComponnet"],
  editProfile2: ["editProfile2"],
  backHandler: ["backHandler"],
  serviceWorker: ["serviceWorker"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  main: "div";
  mainPage: typeof MainPage;
  mainHeader: typeof MainHeader;
  freeBox: "div";
  svg: "svg";
  button: typeof Button;
  button2: typeof Button;
  footerMain: typeof FooterMain;
  settingCycle4: typeof SettingCycle4;
  subItemsComponnet: typeof SubItemsComponnet;
  editProfile2: typeof EditProfile2;
  backHandler: typeof BackHandler;
  serviceWorker: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMain__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMain__VariantsArgs;
    args?: PlasmicMain__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMain__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMain__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMain__ArgProps,
          internalVariantPropNames: PlasmicMain__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMain";
  } else {
    func.displayName = `PlasmicMain.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicMain = Object.assign(
  // Top-level PlasmicMain renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    main: makeNodeComponent("main"),
    mainPage: makeNodeComponent("mainPage"),
    mainHeader: makeNodeComponent("mainHeader"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    footerMain: makeNodeComponent("footerMain"),
    settingCycle4: makeNodeComponent("settingCycle4"),
    subItemsComponnet: makeNodeComponent("subItemsComponnet"),
    editProfile2: makeNodeComponent("editProfile2"),
    backHandler: makeNodeComponent("backHandler"),
    serviceWorker: makeNodeComponent("serviceWorker"),

    // Metadata about props expected for PlasmicMain
    internalVariantProps: PlasmicMain__VariantProps,
    internalArgProps: PlasmicMain__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMain;
/* prettier-ignore-end */
