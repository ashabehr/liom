// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 9yeKzhziT4oA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import LoginBox from "../../LoginBox"; // plasmic-import: eH_yQdxVywwP/component
import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import RadioGrop from "../../RadioGrop"; // plasmic-import: mcNKMbL_6N75/component
import Checkbox from "../../Checkbox"; // plasmic-import: IwXl9xUH-ZMp/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: 9yeKzhziT4oA/css

import Icon107Icon from "./icons/PlasmicIcon__Icon107"; // plasmic-import: HFiB--0uZfh5/icon
import Icon108Icon from "./icons/PlasmicIcon__Icon108"; // plasmic-import: P364T549veD9/icon
import Icon109Icon from "./icons/PlasmicIcon__Icon109"; // plasmic-import: rDm5lm_Drjuw/icon
import Icon110Icon from "./icons/PlasmicIcon__Icon110"; // plasmic-import: yNwSkfuj5hYK/icon
import IconIcon from "../radix_ui/icons/PlasmicIcon__Icon"; // plasmic-import: MbDRsJU0e3bw/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: rjflJ2D4OoXB/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon116Icon from "./icons/PlasmicIcon__Icon116"; // plasmic-import: VyeEoKQrulIJ/icon
import Icon117Icon from "./icons/PlasmicIcon__Icon117"; // plasmic-import: LYjQaTZDlGsf/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 32haUKsu6raY/icon

import { v4 as __lib_uuid__v4 } from "uuid";

createPlasmicElementProxy;

export type PlasmicLogin__VariantMembers = {
  loginPage:
    | "mobile"
    | "email"
    | "mobileCode"
    | "name"
    | "emailCode"
    | "userNameLogin"
    | "userNameSingup";
};
export type PlasmicLogin__VariantsArgs = {
  loginPage?: SingleChoiceArg<
    | "mobile"
    | "email"
    | "mobileCode"
    | "name"
    | "emailCode"
    | "userNameLogin"
    | "userNameSingup"
  >;
};
type VariantPropType = keyof PlasmicLogin__VariantsArgs;
export const PlasmicLogin__VariantProps = new Array<VariantPropType>(
  "loginPage"
);

export type PlasmicLogin__ArgsType = {};
type ArgPropType = keyof PlasmicLogin__ArgsType;
export const PlasmicLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicLogin__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  textInput?: Flex__<typeof TextInput>;
  antdInput?: Flex__<typeof Input>;
  button?: Flex__<typeof Button>;
  textInput7?: Flex__<typeof TextInput>;
  antdInput7?: Flex__<typeof Input>;
  textInput8?: Flex__<typeof TextInput>;
  antdInput8?: Flex__<typeof Input>;
  button2?: Flex__<typeof Button>;
  textInput9?: Flex__<typeof TextInput>;
  antdInput9?: Flex__<typeof Input>;
  textInput10?: Flex__<typeof TextInput>;
  antdInput10?: Flex__<typeof Input>;
  textInput11?: Flex__<typeof TextInput>;
  antdInput11?: Flex__<typeof Input>;
  button6?: Flex__<typeof Button>;
  textInput4?: Flex__<typeof TextInput>;
  antdInput2?: Flex__<typeof Input>;
  radioGrop?: Flex__<typeof RadioGrop>;
  textInput6?: Flex__<typeof TextInput>;
  antdInput3?: Flex__<typeof Input>;
  checkbox?: Flex__<typeof Checkbox>;
  button4?: Flex__<typeof Button>;
  mobileCode?: Flex__<typeof Reveal>;
  textInput3?: Flex__<typeof TextInput>;
  antdInput4?: Flex__<typeof Input>;
  button3?: Flex__<typeof Button>;
  emailCode?: Flex__<typeof Reveal>;
  textInput5?: Flex__<typeof TextInput>;
  antdInput6?: Flex__<typeof Input>;
  button7?: Flex__<typeof Button>;
  textInput2?: Flex__<typeof TextInput>;
  antdInput5?: Flex__<typeof Input>;
  button5?: Flex__<typeof Button>;
  rules?: Flex__<typeof AntdModal>;
  top?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultLoginProps {}

const $$ = {
  uuid: {
    v4: __lib_uuid__v4
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLogin__RenderFunc(props: {
  variants: PlasmicLogin__VariantsArgs;
  args: PlasmicLogin__ArgsType;
  overrides: PlasmicLogin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loginPage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loginPage
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "emailCode")
            ? (() => {
                try {
                  return $state.number;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "loginPage", "mobileCode")
            ? (() => {
                try {
                  return $state.number;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ""
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "cods",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "time",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 30
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "gender",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.sex;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "antdInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "name")
            ? (() => {
                try {
                  return "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "antdInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "antdInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "emailCode")
            ? (() => {
                try {
                  return $state.number;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "loginPage", "mobileCode")
            ? (() => {
                try {
                  return $state.number;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "antdInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "loadedbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "loginData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "typeLogin",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "email",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "emailCode")
            ? (() => {
                try {
                  return $state.number;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "loginPage", "mobileCode")
            ? (() => {
                try {
                  return $state.number;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ""
      },
      {
        path: "antdInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "emailCode")
            ? (() => {
                try {
                  return $state.email;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "loginPage", "mobileCode")
            ? (() => {
                try {
                  return $state.number;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button7.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rules.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "name") ? false : undefined
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "username",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "userNameSingup")
            ? (() => {
                try {
                  return "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ""
      },
      {
        path: "antdInput9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "textInput10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "userNameSingup")
            ? (() => {
                try {
                  return "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ""
      },
      {
        path: "antdInput10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "userNameSingup")
            ? (() => {
                try {
                  return "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ""
      },
      {
        path: "antdInput11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootloginPage_emailCode]: hasVariant(
                $state,
                "loginPage",
                "emailCode"
              ),
              [sty.rootloginPage_email]: hasVariant(
                $state,
                "loginPage",
                "email"
              ),
              [sty.rootloginPage_mobileCode]: hasVariant(
                $state,
                "loginPage",
                "mobileCode"
              ),
              [sty.rootloginPage_mobile]: hasVariant(
                $state,
                "loginPage",
                "mobile"
              ),
              [sty.rootloginPage_name]: hasVariant($state, "loginPage", "name"),
              [sty.rootloginPage_userNameLogin]: hasVariant(
                $state,
                "loginPage",
                "userNameLogin"
              ),
              [sty.rootloginPage_userNameSingup]: hasVariant(
                $state,
                "loginPage",
                "userNameSingup"
              )
            }
          )}
        >
          <Reveal
            className={classNames("__wab_instance", sty.reveal__jmKkx, {
              [sty.revealloginPage_emailCode__jmKkXwqwJl]: hasVariant(
                $state,
                "loginPage",
                "emailCode"
              ),
              [sty.revealloginPage_email__jmKkxiYwOs]: hasVariant(
                $state,
                "loginPage",
                "email"
              ),
              [sty.revealloginPage_mobileCode__jmKkXm2GXn]: hasVariant(
                $state,
                "loginPage",
                "mobileCode"
              ),
              [sty.revealloginPage_mobile__jmKkx6MmOa]: hasVariant(
                $state,
                "loginPage",
                "mobile"
              ),
              [sty.revealloginPage_name__jmKkXhUiKy]: hasVariant(
                $state,
                "loginPage",
                "name"
              ),
              [sty.revealloginPage_userNameLogin__jmKkxh7MIy]: hasVariant(
                $state,
                "loginPage",
                "userNameLogin"
              ),
              [sty.revealloginPage_userNameSingup__jmKkXnuYv7]: hasVariant(
                $state,
                "loginPage",
                "userNameSingup"
              )
            })}
            effect={"fade"}
            triggerOnce={true}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ncvgt, {
                [sty.freeBoxloginPage_emailCode__ncvgtwqwJl]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.freeBoxloginPage_email__ncvgtIYwOs]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.freeBoxloginPage_mobileCode__ncvgtm2GXn]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.freeBoxloginPage_mobile__ncvgt6MmOa]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.freeBoxloginPage_name__ncvgthUiKy]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.freeBoxloginPage_userNameLogin__ncvgtH7MIy]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.freeBoxloginPage_userNameSingup__ncvgtnuYv7]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "100px"
                    : "150px"
                }
                src={{
                  src: "/plasmic/liom_hamyar/images/image35.png",
                  fullWidth: 1029,
                  fullHeight: 1029,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5FL9W
                )}
              >
                {
                  "\u0644\u06cc\u0648\u0645  | \u062a\u0642\u0648\u06cc\u0645 \u067e\u0631\u06cc\u0648\u062f\u06cc"
                }
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fajjl)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uddEg,
                    {
                      [sty.textloginPage_emailCode__uddEgwqwJl]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.textloginPage_email__uddEgIYwOs]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.textloginPage_mobileCode__uddEgm2GXn]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.textloginPage_mobile__uddEg6MmOa]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.textloginPage_name__uddEghUiKy]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.textloginPage_userNameLogin__uddEgH7MIy]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.textloginPage_userNameSingup__uddEgnuYv7]:
                        hasVariant($state, "loginPage", "userNameSingup")
                    }
                  )}
                >
                  {
                    "\u0628\u0631\u0627\u06cc \u0648\u0631\u0648\u062f \u06cc\u0627 \u062b\u0628\u062a \u0646\u0627\u0645 \u06cc\u06a9\u06cc \u0627\u0632 \u06af\u0632\u06cc\u0646\u0647 \u0647\u0627\u06cc \u0632\u06cc\u0631 \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646."
                  }
                </div>
                <LoginBox
                  className={classNames("__wab_instance", sty.loginBox__aUvGc, {
                    [sty.loginBoxloginPage_emailCode__aUvGCwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.loginBoxloginPage_mobileCode__aUvGCm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.loginBoxloginPage_mobile__aUvGc6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.loginBoxloginPage_userNameLogin__aUvGch7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.loginBoxloginPage_userNameSingup__aUvGCnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return (
                                  "https://user.paziresh24.com/realms/paziresh24/protocol/openid-connect/auth?client_id=liom&response_type=code&redirect_uri=https://api.liom.app/authenticate/callback?appKey=eyiaiwkisehi20edihoMhEFLJEf@jopk56!seoS245epj445&scope=openid&kc_idp_hint=google&state=https://apps.liom.app/login/?redirect_url=" +
                                  $ctx.query.redirect_url
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                  slot={
                    "\u0648\u0631\u0648\u062f \u0628\u0627 \u062d\u0633\u0627\u0628 \u06af\u0648\u06af\u0644"
                  }
                />

                <LoginBox
                  className={classNames("__wab_instance", sty.loginBox__tWiTd, {
                    [sty.loginBoxloginPage_emailCode__tWiTdwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.loginBoxloginPage_email__tWiTdIYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.loginBoxloginPage_mobileCode__tWiTdm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.loginBoxloginPage_mobile__tWiTd6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.loginBoxloginPage_name__tWiTdhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.loginBoxloginPage_userNameLogin__tWiTdH7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.loginBoxloginPage_userNameSingup__tWiTdnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: "mobile"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }

                    $steps["updateType"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["type"]
                            },
                            operation: 0,
                            value: "mobile"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateType"] != null &&
                      typeof $steps["updateType"] === "object" &&
                      typeof $steps["updateType"].then === "function"
                    ) {
                      $steps["updateType"] = await $steps["updateType"];
                    }
                  }}
                  slot={
                    "\u0648\u0631\u0648\u062f \u0628\u0627 \u0645\u0648\u0628\u0627\u06cc\u0644"
                  }
                >
                  <Icon108Icon
                    className={classNames(projectcss.all, sty.svg___8EFS)}
                    role={"img"}
                  />
                </LoginBox>
                <LoginBox
                  className={classNames("__wab_instance", sty.loginBox___67EL)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateType"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["type"]
                            },
                            operation: 0,
                            value: "email"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateType"] != null &&
                      typeof $steps["updateType"] === "object" &&
                      typeof $steps["updateType"].then === "function"
                    ) {
                      $steps["updateType"] = await $steps["updateType"];
                    }

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: "email"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                  slot={
                    "\u0648\u0631\u0648\u062f \u0628\u0627 \u0627\u06cc\u0645\u06cc\u0644"
                  }
                >
                  <Icon109Icon
                    className={classNames(projectcss.all, sty.svg__wuBf)}
                    role={"img"}
                  />
                </LoginBox>
                <LoginBox
                  className={classNames("__wab_instance", sty.loginBox__nlWB, {
                    [sty.loginBoxloginPage_name__nlWBhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.loginBoxloginPage_userNameLogin__nlWBh7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.loginBoxloginPage_userNameSingup__nlWBnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateType"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["type"]
                            },
                            operation: 0,
                            value: "userName"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateType"] != null &&
                      typeof $steps["updateType"] === "object" &&
                      typeof $steps["updateType"].then === "function"
                    ) {
                      $steps["updateType"] = await $steps["updateType"];
                    }

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: "userNameLogin"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                  slot={
                    "\u0648\u0631\u0648\u062f \u0628\u0627 \u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                  }
                >
                  <Icon110Icon
                    className={classNames(projectcss.all, sty.svg__dI22L)}
                    role={"img"}
                  />
                </LoginBox>
              </Stack__>
            </Stack__>
          </Reveal>
          {(
            hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__hzsaP, {
                [sty.revealloginPage_emailCode__hzsaPwqwJl]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.revealloginPage_email__hzsaPiYwOs]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.revealloginPage_mobileCode__hzsaPm2GXn]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.revealloginPage_mobile__hzsaP6MmOa]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.revealloginPage_name__hzsaPhUiKy]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.revealloginPage_userNameLogin__hzsaPh7MIy]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.revealloginPage_userNameSingup__hzsaPnuYv7]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vh5G1, {
                  [sty.freeBoxloginPage_emailCode__vh5G1WqwJl]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email__vh5G1IYwOs]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode__vh5G1M2GXn]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile__vh5G16MmOa]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__vh5G1HUiKy]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_userNameLogin__vh5G1H7MIy]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup__vh5G1NuYv7]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___9Kp8K, {
                    [sty.freeBoxloginPage_emailCode___9Kp8KwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email___9Kp8KiYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode___9Kp8Km2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile___9Kp8K6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name___9Kp8KhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin___9Kp8Kh7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup___9Kp8KnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: []
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__b2S9S, {
                      [sty.svgloginPage_emailCode__b2S9SwqwJl]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__b2S9SiYwOs]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__b2S9Sm2GXn]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__b2S9S6MmOa]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__b2S9ShUiKy]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_userNameLogin__b2S9Sh7MIy]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__b2S9SnuYv7]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__iex27, {
                    [sty.freeBoxloginPage_emailCode__iex27WqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__iex27IYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__iex27M2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__iex276MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__iex27HUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__iex27H7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__iex27NuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ckWzj,
                      {
                        [sty.textloginPage_emailCode__ckWzJwqwJl]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__ckWzjiYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__ckWzJm2GXn]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__ckWzj6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__ckWzJhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_userNameLogin__ckWzjh7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__ckWzJnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___8Bjk,
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode___8BjkWqwJl]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email___8BjkIYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode___8BjkM2GXn]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile___8Bjk6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name___8BjkHUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_userNameLogin___8BjkH7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup___8BjkNuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput,
                            {
                              [sty.antdInputloginPage_email]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.antdInputloginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              ),
                              [sty.antdInputloginPage_userNameLogin]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.antdInputloginPage_userNameSingup]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: "9123456789",
                          size: "large",
                          type: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "tel"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "tel"
                            : hasVariant($state, "loginPage", "mobile")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput"}
                            data-plasmic-override={overrides.antdInput}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput, {
                        [sty.textInputloginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInputloginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInputloginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInputloginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInputloginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInputloginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInputloginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__n30Fi
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oan3F,
                              hasVariant($state, "loginPage", "userNameSingup")
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? "negative"
                                : hasVariant($state, "loginPage", "emailCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "name")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "email")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobile")
                                ? "negative"
                                : undefined,
                              {
                                [sty.textloginPage_emailCode__oan3FwqwJl]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.textloginPage_email__oan3FiYwOs]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.textloginPage_mobileCode__oan3Fm2GXn]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.textloginPage_mobile__oan3F6MmOa]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.textloginPage_name__oan3FhUiKy]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.textloginPage_userNameLogin__oan3Fh7MIy]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.textloginPage_userNameSingup__oan3FnuYv7]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                          >
                            {hasVariant($state, "loginPage", "userNameSingup")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "emailCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "name")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobileCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "email")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobile")
                              ? "+98 "
                              : "Enter some text"}
                          </div>
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant($state, "loginPage", "userNameSingup")
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "emailCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "name")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "email")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobile")
                                ? Icon111Icon
                                : "div"
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__dqkSf,
                              {
                                [sty.svgloginPage_emailCode__dqkSFwqwJl]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.svgloginPage_email__dqkSfiYwOs]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.svgloginPage_mobileCode__dqkSFm2GXn]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.svgloginPage_mobile__dqkSf6MmOa]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.svgloginPage_name__dqkSFhUiKy]: hasVariant(
                                  $state,
                                  "loginPage",
                                  "name"
                                ),
                                [sty.svgloginPage_userNameLogin__dqkSfh7MIy]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.svgloginPage_userNameSingup__dqkSFnuYv7]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                            role={"img"}
                          />
                        </React.Fragment>
                      }
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateNumber"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["number"]
                                  },
                                  operation: 0,
                                  value: $state.textInput.antdInputValue
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateNumber"] != null &&
                            typeof $steps["updateNumber"] === "object" &&
                            typeof $steps["updateNumber"].then === "function"
                          ) {
                            $steps["updateNumber"] = await $steps[
                              "updateNumber"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "9123456789"
                      }
                      showEndIcon={true}
                      type={
                        hasVariant($state, "loginPage", "userNameSingup") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : "tel"
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox___2Rjei, {
                    [sty.freeBoxloginPage_emailCode___2RjeiwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email___2RjeiIYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode___2Rjeim2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile___2Rjei6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name___2RjeihUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin___2RjeiH7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup___2RjeinuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button, {
                      [sty.buttonloginPage_emailCode]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.buttonloginPage_email]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.buttonloginPage_mobileCode]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.buttonloginPage_mobile]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.buttonloginPage_name]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.buttonloginPage_userNameLogin]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.buttonloginPage_userNameSingup]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    color={generateStateValueProp($state, ["button", "color"])}
                    endIcon={
                      <Icon115Icon
                        className={classNames(projectcss.all, sty.svg__r8Jo)}
                        role={"img"}
                      />
                    }
                    isDisabled={
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? (() => {
                            try {
                              return (
                                !(
                                  $state.antdInput.value.length === 10 ||
                                  $state.antdInput.value.length === 11
                                ) || $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? (() => {
                            try {
                              return (
                                !(
                                  $state.antdInput.value.length === 10 ||
                                  $state.antdInput.value.length === 11
                                ) || $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "mobile")
                        ? (() => {
                            try {
                              return (
                                !(
                                  $state.antdInput.value.length === 10 ||
                                  $state.antdInput.value.length === 11
                                ) || $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                    loading={(() => {
                      try {
                        return $state.loadedbtn;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadedbtn"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn"] != null &&
                        typeof $steps["updateLoadedbtn"] === "object" &&
                        typeof $steps["updateLoadedbtn"].then === "function"
                      ) {
                        $steps["updateLoadedbtn"] = await $steps[
                          "updateLoadedbtn"
                        ];
                      }

                      $steps["updateNumber"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["number"]
                              },
                              operation: 0,
                              value: $state.antdInput.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNumber"] != null &&
                        typeof $steps["updateNumber"] === "object" &&
                        typeof $steps["updateNumber"].then === "function"
                      ) {
                        $steps["updateNumber"] = await $steps["updateNumber"];
                      }

                      $steps["invokeGlobalAction2"] = (() => {
                        const phoneRegex = /^0?\d{10}$/;
                        return !phoneRegex.test($state.number);
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0635\u062d\u06cc\u062d \u0646\u06cc\u0633\u062a.",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction"] = (() => {
                        const phoneRegex = /^0?\d{10}$/;
                        return (
                          phoneRegex.test($state.number) &&
                          $state.type == "mobile"
                        );
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.liom.app/auth/signup/send-code-v2",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      type: "mobile",
                                      country: "98",
                                      smsType: "sms",
                                      data: $state.number
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["invokeGlobalAction3"] = (() => {
                        const phoneRegex = /^0?\d{10}$/;
                        return (
                          phoneRegex.test($state.number) &&
                          $state.type != "mobile"
                        );
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.liom.app/rest/user/setMobileSendCode",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      data: $state.number,
                                      smsType: "sms"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        Authorization:
                                          "Bearer " +
                                          ($state.loginData.result.token || "")
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["updateTypeLogin"] = $steps.invokeGlobalAction
                        ?.data?.result?.type
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["typeLogin"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction.data.result.type
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTypeLogin"] != null &&
                        typeof $steps["updateTypeLogin"] === "object" &&
                        typeof $steps["updateTypeLogin"].then === "function"
                      ) {
                        $steps["updateTypeLogin"] = await $steps[
                          "updateTypeLogin"
                        ];
                      }

                      $steps["updateTypeLogin2"] =
                        $state.gender == "male" &&
                        ($state.type == "userName" || $state.type == "email")
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["typeLogin"]
                                },
                                operation: 0,
                                value: "login"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateTypeLogin2"] != null &&
                        typeof $steps["updateTypeLogin2"] === "object" &&
                        typeof $steps["updateTypeLogin2"].then === "function"
                      ) {
                        $steps["updateTypeLogin2"] = await $steps[
                          "updateTypeLogin2"
                        ];
                      }

                      $steps["updateLoginPage"] =
                        $steps.invokeGlobalAction?.data?.success == true ||
                        $steps.invokeGlobalAction3?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                vgroup: "loginPage",
                                operation: 0,
                                value: "mobileCode"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateLoginPage"] != null &&
                        typeof $steps["updateLoginPage"] === "object" &&
                        typeof $steps["updateLoginPage"].then === "function"
                      ) {
                        $steps["updateLoginPage"] = await $steps[
                          "updateLoginPage"
                        ];
                      }

                      $steps["updateTextInputValue2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTextInputValue2"] != null &&
                        typeof $steps["updateTextInputValue2"] === "object" &&
                        typeof $steps["updateTextInputValue2"].then ===
                          "function"
                      ) {
                        $steps["updateTextInputValue2"] = await $steps[
                          "updateTextInputValue2"
                        ];
                      }
                    }}
                    onColorChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "color"])(
                        eventArgs[0]
                      );
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kKx7,
                        {
                          [sty.textloginPage_emailCode__kKx7WqwJl]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.textloginPage_email__kKx7IYwOs]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode__kKx7M2GXn]: hasVariant(
                            $state,
                            "loginPage",
                            "mobileCode"
                          ),
                          [sty.textloginPage_mobile__kKx76MmOa]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name__kKx7HUiKy]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_userNameLogin__kKx7H7MIy]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup__kKx7NuYv7]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      {hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : "Button"}
                    </div>
                  </Button>
                </div>
              </Stack__>
            </Reveal>
          ) : null}
          {(
            hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__uAroZ, {
                [sty.revealloginPage_emailCode__uAroZwqwJl]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.revealloginPage_email__uAroZiYwOs]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.revealloginPage_mobileCode__uAroZm2GXn]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.revealloginPage_mobile__uAroZ6MmOa]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.revealloginPage_name__uAroZhUiKy]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.revealloginPage_userNameLogin__uAroZh7MIy]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.revealloginPage_userNameSingup__uAroZnuYv7]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jve76, {
                  [sty.freeBoxloginPage_emailCode__jve76WqwJl]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email__jve76IYwOs]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode__jve76M2GXn]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile__jve766MmOa]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__jve76HUiKy]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_userNameLogin__jve76H7MIy]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup__jve76NuYv7]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__qzusC, {
                    [sty.freeBoxloginPage_emailCode__qzusCwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__qzusCiYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__qzusCm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__qzusC6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__qzusChUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__qzusCh7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__qzusCnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: []
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__tsQ8Y, {
                      [sty.svgloginPage_emailCode__tsQ8YwqwJl]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__tsQ8YIYwOs]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__tsQ8Ym2GXn]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__tsQ8Y6MmOa]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__tsQ8YhUiKy]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_userNameLogin__tsQ8YH7MIy]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__tsQ8YnuYv7]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__k1Vj, {
                    [sty.freeBoxloginPage_emailCode__k1VjwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__k1VjIYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__k1Vjm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__k1Vj6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__k1VjhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__k1VjH7MIy]: hasVariant(
                      $state,
                      "loginPage",
                      "userNameLogin"
                    ),
                    [sty.freeBoxloginPage_userNameSingup__k1VjnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8YcTr,
                      {
                        [sty.textloginPage_emailCode___8YcTrwqwJl]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email___8YcTrIYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode___8YcTrm2GXn]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile___8YcTr6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name___8YcTrhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_userNameLogin___8YcTrH7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup___8YcTrnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__utYkk,
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__utYkKwqwJl]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__utYkkiYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__utYkKm2GXn]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__utYkk6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__utYkKhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_userNameLogin__utYkkh7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__utYkKnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput7"}
                      data-plasmic-override={overrides.textInput7}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput7,
                            {
                              [sty.antdInput7loginPage_email]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.antdInput7loginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              ),
                              [sty.antdInput7loginPage_userNameLogin]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.antdInput7loginPage_userNameSingup]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput7", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "sara_mohammadi"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "sara_mohammadi"
                            : "9123456789",
                          size: "large",
                          type: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "text"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "text"
                            : hasVariant($state, "loginPage", "mobile")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput7",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput7.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput7"}
                            data-plasmic-override={overrides.antdInput7}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput7, {
                        [sty.textInput7loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput7loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput7loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput7loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput7loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput7loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput7loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput7",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};
                        }).apply(null, eventArgs);
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "9123456789"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? undefined
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? undefined
                          : true
                      }
                      showStartIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? true
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? true
                          : undefined
                      }
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "loginPage", "userNameSingup")
                              ? Icon116Icon
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? Icon116Icon
                              : SearchSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg__vK3PR,
                            {
                              [sty.svgloginPage_userNameLogin__vK3PRh7MIy]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.svgloginPage_userNameSingup__vK3PRnuYv7]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          )}
                          role={"img"}
                        />
                      }
                      type={
                        hasVariant($state, "loginPage", "userNameSingup") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : "tel"
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput7",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kaqwm, {
                    [sty.freeBoxloginPage_emailCode__kaqwmwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__kaqwmIYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__kaqwmm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__kaqwm6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__kaqwmhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__kaqwmH7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__kaqwmnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tbAhx,
                      {
                        [sty.textloginPage_emailCode__tbAhxwqwJl]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__tbAhxIYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__tbAhxm2GXn]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__tbAhx6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__tbAhxhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_userNameLogin__tbAhxH7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__tbAhxnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___9TEt0,
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode___9TEt0WqwJl]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email___9TEt0IYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode___9TEt0M2GXn]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile___9TEt06MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name___9TEt0HUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_userNameLogin___9TEt0H7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup___9TEt0NuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput8"}
                      data-plasmic-override={overrides.textInput8}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput8,
                            {
                              [sty.antdInput8loginPage_email]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.antdInput8loginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              ),
                              [sty.antdInput8loginPage_userNameLogin]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.antdInput8loginPage_userNameSingup]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput8", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "\u0631\u0645\u0632 ..."
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "\u0631\u0645\u0632 ..."
                            : "9123456789",
                          size: "large",
                          type: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "password"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "password"
                            : hasVariant($state, "loginPage", "mobile")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput8",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput8.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput8"}
                            data-plasmic-override={overrides.antdInput8}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput8, {
                        [sty.textInput8loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput8loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput8loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput8loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput8loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput8loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput8loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput8",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateNumber"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["number"]
                                  },
                                  operation: 0,
                                  value: $state.textInput.antdInputValue
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateNumber"] != null &&
                            typeof $steps["updateNumber"] === "object" &&
                            typeof $steps["updateNumber"].then === "function"
                          ) {
                            $steps["updateNumber"] = await $steps[
                              "updateNumber"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "9123456789"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? undefined
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? undefined
                          : true
                      }
                      showStartIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? true
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? true
                          : undefined
                      }
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "loginPage", "userNameSingup")
                              ? Icon117Icon
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? Icon117Icon
                              : SearchSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg__s6Y0X,
                            {
                              [sty.svgloginPage_userNameLogin__s6Y0XH7MIy]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.svgloginPage_userNameSingup__s6Y0XnuYv7]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          )}
                          role={"img"}
                        />
                      }
                      type={
                        hasVariant($state, "loginPage", "userNameSingup") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : "tel"
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput8",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox__j8TxI, {
                    [sty.freeBoxloginPage_emailCode__j8TxIwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__j8TxIiYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__j8TxIm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__j8TxI6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__j8TxIhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__j8TxIh7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__j8TxInuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <Button
                    data-plasmic-name={"button2"}
                    data-plasmic-override={overrides.button2}
                    className={classNames("__wab_instance", sty.button2, {
                      [sty.button2loginPage_emailCode]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.button2loginPage_email]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.button2loginPage_mobileCode]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.button2loginPage_mobile]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.button2loginPage_name]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.button2loginPage_userNameLogin]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.button2loginPage_userNameSingup]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    color={generateStateValueProp($state, ["button2", "color"])}
                    endIcon={
                      <Icon115Icon
                        className={classNames(projectcss.all, sty.svg__tlnch)}
                        role={"img"}
                      />
                    }
                    isDisabled={
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? (() => {
                            try {
                              return (
                                ($state.antdInput7.value?.length < 2 &&
                                  $state.antdInput8.value.length < 7) ||
                                $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? (() => {
                            try {
                              return (
                                ($state.antdInput7.value?.length < 2 &&
                                  $state.antdInput8.value.length < 7) ||
                                $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "mobile")
                        ? (() => {
                            try {
                              return (
                                !(
                                  $state.antdInput7.value.length === 10 ||
                                  $state.antdInput7.value.length === 11
                                ) || $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                    loading={(() => {
                      try {
                        return $state.loadedbtn;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadedbtn"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn"] != null &&
                        typeof $steps["updateLoadedbtn"] === "object" &&
                        typeof $steps["updateLoadedbtn"].then === "function"
                      ) {
                        $steps["updateLoadedbtn"] = await $steps[
                          "updateLoadedbtn"
                        ];
                      }

                      $steps["updateUsername"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["username"]
                              },
                              operation: 0,
                              value: $state.antdInput7.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUsername"] != null &&
                        typeof $steps["updateUsername"] === "object" &&
                        typeof $steps["updateUsername"].then === "function"
                      ) {
                        $steps["updateUsername"] = await $steps[
                          "updateUsername"
                        ];
                      }

                      $steps["updatePassword"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["password"]
                              },
                              operation: 0,
                              value: $state.antdInput8.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePassword"] != null &&
                        typeof $steps["updatePassword"] === "object" &&
                        typeof $steps["updatePassword"].then === "function"
                      ) {
                        $steps["updatePassword"] = await $steps[
                          "updatePassword"
                        ];
                      }

                      $steps["invokeGlobalAction2"] = (() => {
                        const phoneRegex = /^.{8,}$/;
                        const input = $state.password;
                        const hasPersianCharacters = /[\u0600-\u06FF]/.test(
                          input
                        );
                        return !phoneRegex.test(input) || hasPersianCharacters;
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0646\u0627\u0645\u0639\u0646\u0628\u0631\u0627\u0633\u062a.",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction"] = (() => {
                        const phoneRegex = /^.{8,}$/;
                        const input = $state.password;
                        const hasPersianCharacters = /[\u0600-\u06FF]/.test(
                          input
                        );
                        return phoneRegex.test(input) && !hasPersianCharacters;
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.liom.app/auth/signin",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      password: $state.password,
                                      username: $state.username,
                                      data: "",
                                      target: "calendar",
                                      version: "",
                                      device: (() => {
                                        const userAgent =
                                          window.navigator.userAgent;
                                        if (
                                          /Mobi|Android|iPhone|iPad|iPod/i.test(
                                            userAgent
                                          )
                                        ) {
                                          return "Mobile";
                                        } else if (
                                          /Tablet|iPad/i.test(userAgent)
                                        ) {
                                          return "Tablet";
                                        } else {
                                          return "Desktop";
                                        }
                                      })(),
                                      uniqueId: $$.uuid.v4(),
                                      fcm: "",
                                      os: (() => {
                                        const userAgent =
                                          window.navigator.userAgent;
                                        const platform =
                                          window.navigator.userAgent;
                                        if (/Windows/i.test(platform))
                                          return "Windows";
                                        if (/Mac/i.test(platform))
                                          return "macOS";
                                        if (/Linux/i.test(platform))
                                          return "Linux";
                                        if (/Android/i.test(userAgent))
                                          return "Android";
                                        if (/iPhone|iPad|iPod/i.test(userAgent))
                                          return "iOS";
                                        return "Unknown OS";
                                      })(),
                                      osVersion: (() => {
                                        const userAgent =
                                          window.navigator.userAgent;
                                        if (/Windows NT 10.0/.test(userAgent))
                                          return "Windows 10";
                                        if (/Windows NT 6.3/.test(userAgent))
                                          return "Windows 8.1";
                                        if (/Windows NT 6.2/.test(userAgent))
                                          return "Windows 8";
                                        if (/Windows NT 6.1/.test(userAgent))
                                          return "Windows 7";
                                        if (
                                          /Mac OS X (\d+[\._]\d+)/.test(
                                            userAgent
                                          )
                                        )
                                          return `macOS ${RegExp.$1.replace(
                                            "_",
                                            "."
                                          )}`;
                                        if (
                                          /Android (\d+(\.\d+)?)/.test(
                                            userAgent
                                          )
                                        )
                                          return `Android ${RegExp.$1}`;
                                        if (
                                          /CPU (iPhone )?OS (\d+_\d+)/.test(
                                            userAgent
                                          )
                                        )
                                          return `iOS ${RegExp.$2.replace(
                                            "_",
                                            "."
                                          )}`;
                                        return "Unknown Version";
                                      })(),
                                      additionalData: {
                                        ip: "132465",
                                        name: "test1"
                                      },
                                      device_type: window.navigator.platform
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateLoginData"] =
                        $steps.invokeGlobalAction?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loginData"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction.data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateLoginData"] != null &&
                        typeof $steps["updateLoginData"] === "object" &&
                        typeof $steps["updateLoginData"].then === "function"
                      ) {
                        $steps["updateLoginData"] = await $steps[
                          "updateLoginData"
                        ];
                      }

                      $steps["invokeGlobalAction3"] =
                        $steps.invokeGlobalAction?.data?.success == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u06cc\u0627 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0646\u0627\u062f\u0631\u0633\u062a \u0627\u0633\u062a.",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["goToPage"] =
                        $steps.invokeGlobalAction?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return (
                                      $ctx.query.redirect_url +
                                      "?token=" +
                                      $$.uuid.v4().slice(0, 6) +
                                      $state.loginData.result.token +
                                      $$.uuid.v4().slice(10, 13) +
                                      "&userId=" +
                                      $$.uuid.v4().slice(0, 4) +
                                      $state.loginData.result.userId +
                                      $$.uuid.v4().slice(0, 4)
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["updateTextInputValue2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTextInputValue2"] != null &&
                        typeof $steps["updateTextInputValue2"] === "object" &&
                        typeof $steps["updateTextInputValue2"].then ===
                          "function"
                      ) {
                        $steps["updateTextInputValue2"] = await $steps[
                          "updateTextInputValue2"
                        ];
                      }
                    }}
                    onColorChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "color"])(
                        eventArgs[0]
                      );
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pkjZk,
                        {
                          [sty.textloginPage_emailCode__pkjZKwqwJl]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.textloginPage_email__pkjZkiYwOs]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode__pkjZKm2GXn]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile__pkjZk6MmOa]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name__pkjZKhUiKy]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_userNameLogin__pkjZkh7MIy]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup__pkjZKnuYv7]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      {hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : "Button"}
                    </div>
                  </Button>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kV31Z,
                    {
                      [sty.textloginPage_emailCode__kV31ZwqwJl]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.textloginPage_userNameLogin__kV31Zh7MIy]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.textloginPage_userNameSingup__kV31ZnuYv7]:
                        hasVariant($state, "loginPage", "userNameSingup")
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: "userNameSingup"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  {hasVariant($state, "loginPage", "userNameSingup")
                    ? "\u0627\u06af\u0631 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0646\u062f\u0627\u0631\u06cc \u0628\u0631\u0627\u06cc \u062b\u0628\u062a \u0646\u0627\u0645 \u0627\u06cc\u0646\u062c\u0627 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646 >"
                    : hasVariant($state, "loginPage", "userNameLogin")
                    ? "\u0627\u06af\u0631 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0646\u062f\u0627\u0631\u06cc \u0628\u0631\u0627\u06cc \u062b\u0628\u062a \u0646\u0627\u0645 \u0627\u06cc\u0646\u062c\u0627 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646 >"
                    : "Enter some text"}
                </div>
              </Stack__>
            </Reveal>
          ) : null}
          {(
            hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__m6Ecj, {
                [sty.revealloginPage_emailCode__m6EcJwqwJl]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.revealloginPage_email__m6EcjiYwOs]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.revealloginPage_mobileCode__m6EcJm2GXn]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.revealloginPage_mobile__m6Ecj6MmOa]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.revealloginPage_name__m6EcJhUiKy]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.revealloginPage_userNameLogin__m6Ecjh7MIy]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.revealloginPage_userNameSingup__m6EcJnuYv7]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jy23R, {
                  [sty.freeBoxloginPage_emailCode__jy23RwqwJl]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email__jy23RiYwOs]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode__jy23Rm2GXn]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile__jy23R6MmOa]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__jy23RhUiKy]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_userNameLogin__jy23Rh7MIy]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup__jy23RnuYv7]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__rwddx, {
                    [sty.freeBoxloginPage_emailCode__rwddxwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__rwddxIYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__rwddxm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__rwddx6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__rwddxhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__rwddxH7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__rwddxnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: []
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__dbu9W, {
                      [sty.svgloginPage_emailCode__dbu9WwqwJl]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__dbu9WiYwOs]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__dbu9Wm2GXn]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__dbu9W6MmOa]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__dbu9WhUiKy]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_userNameLogin__dbu9Wh7MIy]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__dbu9WnuYv7]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nLdmL, {
                    [sty.freeBoxloginPage_emailCode__nLdmLwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__nLdmLiYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__nLdmLm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__nLdmL6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__nLdmLhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__nLdmLh7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__nLdmLnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rtEbU,
                      {
                        [sty.textloginPage_emailCode__rtEbUwqwJl]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__rtEbUiYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__rtEbUm2GXn]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__rtEbU6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__rtEbUhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_userNameLogin__rtEbUh7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__rtEbUnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__vwzCl,
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__vwzClwqwJl]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__vwzClIYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__vwzClm2GXn]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__vwzCl6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__vwzClhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_userNameLogin__vwzClH7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__vwzClnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput9"}
                      data-plasmic-override={overrides.textInput9}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput9,
                            {
                              [sty.antdInput9loginPage_email]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.antdInput9loginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              ),
                              [sty.antdInput9loginPage_userNameLogin]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.antdInput9loginPage_userNameSingup]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput9", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "sara_mohammadi"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "sara_mohammadi"
                            : "9123456789",
                          size: "large",
                          type: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "text"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "text"
                            : hasVariant($state, "loginPage", "mobile")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput9",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput9.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput9"}
                            data-plasmic-override={overrides.antdInput9}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput9, {
                        [sty.textInput9loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput9loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput9loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput9loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput9loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput9loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput9loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput9",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};
                        }).apply(null, eventArgs);
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "9123456789"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? undefined
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? undefined
                          : true
                      }
                      showStartIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? true
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? true
                          : undefined
                      }
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "loginPage", "userNameSingup")
                              ? Icon116Icon
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? Icon116Icon
                              : SearchSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg__ihRls,
                            {
                              [sty.svgloginPage_userNameLogin__ihRlsh7MIy]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.svgloginPage_userNameSingup__ihRlSnuYv7]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          )}
                          role={"img"}
                        />
                      }
                      type={
                        hasVariant($state, "loginPage", "userNameSingup") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : "tel"
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput9",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kmk0E, {
                    [sty.freeBoxloginPage_emailCode__kmk0EwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__kmk0EiYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__kmk0Em2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__kmk0E6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__kmk0EhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__kmk0Eh7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__kmk0EnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ihmP,
                      {
                        [sty.textloginPage_emailCode__ihmPwqwJl]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__ihmPiYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__ihmPm2GXn]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__ihmP6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__ihmPhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_userNameLogin__ihmPh7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__ihmPnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u06cc\u06a9 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0628\u0627 \u062d\u062f\u0627\u0642\u0644 8 \u06a9\u0627\u0631\u0627\u06a9\u062a\u0631 \u0628\u0646\u0648\u06cc\u0633"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__td6Vv,
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__td6VVwqwJl]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__td6VviYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__td6VVm2GXn]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__td6Vv6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__td6VVhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_userNameLogin__td6Vvh7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__td6VVnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput10"}
                      data-plasmic-override={overrides.textInput10}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput10,
                            {
                              [sty.antdInput10loginPage_email]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.antdInput10loginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              ),
                              [sty.antdInput10loginPage_userNameLogin]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.antdInput10loginPage_userNameSingup]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput10", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "\u0631\u0645\u0632 ..."
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "\u0631\u0645\u0632 ..."
                            : "9123456789",
                          size: "large",
                          type: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "password"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "password"
                            : hasVariant($state, "loginPage", "mobile")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput10",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput10.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput10"}
                            data-plasmic-override={overrides.antdInput10}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput10, {
                        [sty.textInput10loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput10loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput10loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput10loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput10loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput10loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput10loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput10",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateNumber"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["number"]
                                  },
                                  operation: 0,
                                  value: $state.textInput.antdInputValue
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateNumber"] != null &&
                            typeof $steps["updateNumber"] === "object" &&
                            typeof $steps["updateNumber"].then === "function"
                          ) {
                            $steps["updateNumber"] = await $steps[
                              "updateNumber"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "9123456789"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? undefined
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? undefined
                          : true
                      }
                      showStartIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? true
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? true
                          : undefined
                      }
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "loginPage", "userNameSingup")
                              ? Icon117Icon
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? Icon117Icon
                              : SearchSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg__kSjEu,
                            {
                              [sty.svgloginPage_userNameLogin__kSjEuH7MIy]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.svgloginPage_userNameSingup__kSjEunuYv7]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          )}
                          role={"img"}
                        />
                      }
                      type={
                        hasVariant($state, "loginPage", "userNameSingup") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : "tel"
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput10",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dInFc, {
                    [sty.freeBoxloginPage_emailCode__dInFCwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__dInFciYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__dInFCm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__dInFc6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__dInFChUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__dInFch7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__dInFCnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cYt2T,
                      {
                        [sty.textloginPage_emailCode__cYt2TwqwJl]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__cYt2TIYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__cYt2Tm2GXn]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__cYt2T6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__cYt2ThUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_userNameLogin__cYt2TH7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__cYt2TnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u062a\u06a9\u0631\u0627\u0631 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 ..."
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__e3Xxx,
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__e3XxxwqwJl]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__e3XxxIYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__e3Xxxm2GXn]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__e3Xxx6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__e3XxxhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_userNameLogin__e3XxxH7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__e3XxxnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput11"}
                      data-plasmic-override={overrides.textInput11}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput11,
                            {
                              [sty.antdInput11loginPage_email]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.antdInput11loginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              ),
                              [sty.antdInput11loginPage_userNameLogin]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.antdInput11loginPage_userNameSingup]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput11", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "\u062a\u06a9\u0631\u0627\u0631 \u0631\u0645\u0632 ..."
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "\u0631\u0645\u0632 ..."
                            : "9123456789",
                          size: "large",
                          type: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "password"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "password"
                            : hasVariant($state, "loginPage", "mobile")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput11",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput11.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput11"}
                            data-plasmic-override={overrides.antdInput11}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput11, {
                        [sty.textInput11loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput11loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput11loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput11loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput11loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput11loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput11loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput11",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateNumber"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["number"]
                                  },
                                  operation: 0,
                                  value: $state.textInput.antdInputValue
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateNumber"] != null &&
                            typeof $steps["updateNumber"] === "object" &&
                            typeof $steps["updateNumber"].then === "function"
                          ) {
                            $steps["updateNumber"] = await $steps[
                              "updateNumber"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "9123456789"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? undefined
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? undefined
                          : true
                      }
                      showStartIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? true
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? true
                          : undefined
                      }
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "loginPage", "userNameSingup")
                              ? Icon117Icon
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? Icon117Icon
                              : SearchSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg__v0QMr,
                            {
                              [sty.svgloginPage_userNameLogin__v0QMrh7MIy]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.svgloginPage_userNameSingup__v0QMRnuYv7]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          )}
                          role={"img"}
                        />
                      }
                      type={
                        hasVariant($state, "loginPage", "userNameSingup") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : "tel"
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput11",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox__b966O, {
                    [sty.freeBoxloginPage_emailCode__b966OwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__b966OiYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__b966Om2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__b966O6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__b966OhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__b966Oh7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__b966OnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <Button
                    data-plasmic-name={"button6"}
                    data-plasmic-override={overrides.button6}
                    className={classNames("__wab_instance", sty.button6, {
                      [sty.button6loginPage_emailCode]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.button6loginPage_email]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.button6loginPage_mobileCode]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.button6loginPage_mobile]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.button6loginPage_name]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.button6loginPage_userNameLogin]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.button6loginPage_userNameSingup]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    color={generateStateValueProp($state, ["button6", "color"])}
                    endIcon={
                      <Icon115Icon
                        className={classNames(projectcss.all, sty.svg__plN9)}
                        role={"img"}
                      />
                    }
                    isDisabled={
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? (() => {
                            try {
                              return (
                                ($state.antdInput9.value?.length < 2 &&
                                  $state.antdInput10.value.length < 7 &&
                                  $state.antdInput11.value.length < 7) ||
                                $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? (() => {
                            try {
                              return (
                                ($state.antdInput9.value?.length < 2 &&
                                  $state.antdInput10.value.length < 7) ||
                                $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "mobile")
                        ? (() => {
                            try {
                              return (
                                !(
                                  $state.antdInput9.value.length === 10 ||
                                  $state.antdInput9.value.length === 11
                                ) || $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                    loading={(() => {
                      try {
                        return $state.loadedbtn;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadedbtn"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn"] != null &&
                        typeof $steps["updateLoadedbtn"] === "object" &&
                        typeof $steps["updateLoadedbtn"].then === "function"
                      ) {
                        $steps["updateLoadedbtn"] = await $steps[
                          "updateLoadedbtn"
                        ];
                      }

                      $steps["updateUsername"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["username"]
                              },
                              operation: 0,
                              value: $state.antdInput9.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUsername"] != null &&
                        typeof $steps["updateUsername"] === "object" &&
                        typeof $steps["updateUsername"].then === "function"
                      ) {
                        $steps["updateUsername"] = await $steps[
                          "updateUsername"
                        ];
                      }

                      $steps["updatePassword"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["password"]
                              },
                              operation: 0,
                              value: $state.antdInput10.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePassword"] != null &&
                        typeof $steps["updatePassword"] === "object" &&
                        typeof $steps["updatePassword"].then === "function"
                      ) {
                        $steps["updatePassword"] = await $steps[
                          "updatePassword"
                        ];
                      }

                      $steps["invokeGlobalAction2"] = (() => {
                        const phoneRegex = /^.{8,}$/;
                        const input = $state.password;
                        const hasPersianCharacters = /[\u0600-\u06FF]/.test(
                          input
                        );
                        return !phoneRegex.test(input) || hasPersianCharacters;
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0646\u0627\u0645\u0639\u0646\u0628\u0631\u0627\u0633\u062a.",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction4"] =
                        $state.password != $state.antdInput11.value
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0648 \u062a\u06a9\u0631\u0627\u0631 \u0622\u0646 \u0628\u0627\u0647\u0645 \u0645\u063a\u0627\u06cc\u0631\u062a \u062f\u0627\u0631\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction4"] != null &&
                        typeof $steps["invokeGlobalAction4"] === "object" &&
                        typeof $steps["invokeGlobalAction4"].then === "function"
                      ) {
                        $steps["invokeGlobalAction4"] = await $steps[
                          "invokeGlobalAction4"
                        ];
                      }

                      $steps["invokeGlobalAction"] = (() => {
                        const phoneRegex = /^.{8,}$/;
                        const input = $state.password;
                        const hasPersianCharacters = /[\u0600-\u06FF]/.test(
                          input
                        );
                        return (
                          phoneRegex.test(input) &&
                          !hasPersianCharacters &&
                          $state.password == $state.antdInput11.value
                        );
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.liom.app/auth/check/username",
                                undefined,
                                (() => {
                                  try {
                                    return { username: $state.username };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["invokeGlobalAction3"] =
                        $steps.invokeGlobalAction?.data?.success == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0648\u062c\u0648\u062f \u062f\u0627\u0631\u062f. ",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["updateLoginPage"] =
                        $steps.invokeGlobalAction?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                vgroup: "loginPage",
                                operation: 0,
                                value: "name"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateLoginPage"] != null &&
                        typeof $steps["updateLoginPage"] === "object" &&
                        typeof $steps["updateLoginPage"].then === "function"
                      ) {
                        $steps["updateLoginPage"] = await $steps[
                          "updateLoginPage"
                        ];
                      }

                      $steps["updateTextInputValue2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTextInputValue2"] != null &&
                        typeof $steps["updateTextInputValue2"] === "object" &&
                        typeof $steps["updateTextInputValue2"].then ===
                          "function"
                      ) {
                        $steps["updateTextInputValue2"] = await $steps[
                          "updateTextInputValue2"
                        ];
                      }
                    }}
                    onColorChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["button6", "color"])(
                        eventArgs[0]
                      );
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9I7Gs,
                        {
                          [sty.textloginPage_emailCode___9I7GswqwJl]:
                            hasVariant($state, "loginPage", "emailCode"),
                          [sty.textloginPage_email___9I7GsIYwOs]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode___9I7Gsm2GXn]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile___9I7Gs6MmOa]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name___9I7GshUiKy]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_userNameLogin___9I7GsH7MIy]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup___9I7GsnuYv7]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      {hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : "Button"}
                    </div>
                  </Button>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hHocd,
                    {
                      [sty.textloginPage_emailCode__hHocDwqwJl]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.textloginPage_userNameLogin__hHocdh7MIy]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.textloginPage_userNameSingup__hHocDnuYv7]:
                        hasVariant($state, "loginPage", "userNameSingup")
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: "userNameLogin"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  {hasVariant($state, "loginPage", "userNameSingup")
                    ? "\u062f\u0631 \u0644\u06cc\u0648\u0645 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u062f\u0627\u0631\u0645 \u0645\u06cc\u062e\u0648\u0627\u0645 \u0628\u0647 \u0622\u0646 \u0648\u0631\u0648\u062f \u06a9\u0646\u0645 >"
                    : hasVariant($state, "loginPage", "userNameLogin")
                    ? "\u0627\u06af\u0631 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0646\u062f\u0627\u0631\u06cc \u0628\u0631\u0627\u06cc \u062b\u0628\u062a \u0646\u0627\u0645 \u0627\u06cc\u0646\u062c\u0627 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646 >"
                    : "Enter some text"}
                </div>
              </Stack__>
            </Reveal>
          ) : null}
          {(
            hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__tW85V, {
                [sty.revealloginPage_emailCode__tW85VwqwJl]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.revealloginPage_email__tW85VIYwOs]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.revealloginPage_mobileCode__tW85Vm2GXn]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.revealloginPage_mobile__tW85V6MmOa]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.revealloginPage_name__tW85VhUiKy]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.revealloginPage_userNameLogin__tW85VH7MIy]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.revealloginPage_userNameSingup__tW85VnuYv7]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xbB9E, {
                  [sty.freeBoxloginPage_emailCode__xbB9EwqwJl]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email__xbB9EIYwOs]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode__xbB9Em2GXn]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile__xbB9E6MmOa]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__xbB9EhUiKy]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_userNameLogin__xbB9EH7MIy]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup__xbB9EnuYv7]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__o4Bz, {
                    [sty.freeBoxloginPage_emailCode__o4BzwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__o4BzIYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__o4Bzm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__o4Bz6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__o4BzhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__o4BzH7MIy]: hasVariant(
                      $state,
                      "loginPage",
                      "userNameLogin"
                    ),
                    [sty.freeBoxloginPage_userNameSingup__o4BznuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__rnQ7D, {
                      [sty.svgloginPage_emailCode__rnQ7DwqwJl]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__rnQ7DIYwOs]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__rnQ7Dm2GXn]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__rnQ7D6MmOa]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__rnQ7DhUiKy]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_userNameLogin__rnQ7DH7MIy]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__rnQ7DnuYv7]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__iXeee, {
                    [sty.freeBoxloginPage_emailCode__iXeeewqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__iXeeeIYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__iXeeem2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__iXeee6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__iXeeehUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__iXeeeH7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__iXeeenuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gtQh4,
                      {
                        [sty.textloginPage_emailCode__gtQh4WqwJl]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__gtQh4IYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__gtQh4M2GXn]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__gtQh46MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__gtQh4HUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_userNameLogin__gtQh4H7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__gtQh4NuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0644\u0637\u0641\u0627 \u0627\u0633\u0645\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__iMMwE,
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__iMMwEwqwJl]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__iMMwEiYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__iMMwEm2GXn]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__iMMwE6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__iMMwEhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_userNameLogin__iMMwEh7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__iMMwEnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput4"}
                      data-plasmic-override={overrides.textInput4}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput2,
                            {
                              [sty.antdInput2loginPage_name]: hasVariant(
                                $state,
                                "loginPage",
                                "name"
                              )
                            }
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput2", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: (() => {
                            try {
                              return (() => {
                                switch ($state.gender) {
                                  case "":
                                    return "علی محمدی";
                                    break;
                                  case "female":
                                    return "سارا محمدی";
                                    break;
                                  case "male":
                                    return "علی محمدی";
                                    break;
                                  default:
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          size: "large",
                          value: generateStateValueProp($state, [
                            "antdInput2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput2.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput2"}
                            data-plasmic-override={overrides.antdInput2}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput4, {
                        [sty.textInput4loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput4loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput4loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput4loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput4loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput4loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput4loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xrKh,
                              {
                                [sty.freeBoxloginPage_name__xrKhhUiKy]:
                                  hasVariant($state, "loginPage", "name")
                              }
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xfueF,
                              hasVariant($state, "loginPage", "userNameSingup")
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? "negative"
                                : hasVariant($state, "loginPage", "emailCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "name")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "email")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobile")
                                ? "negative"
                                : undefined,
                              {
                                [sty.textloginPage_emailCode__xfueFwqwJl]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.textloginPage_email__xfueFiYwOs]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.textloginPage_mobileCode__xfueFm2GXn]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.textloginPage_mobile__xfueF6MmOa]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.textloginPage_name__xfueFhUiKy]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.textloginPage_userNameLogin__xfueFh7MIy]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.textloginPage_userNameSingup__xfueFnuYv7]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                          >
                            {hasVariant($state, "loginPage", "userNameSingup")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "emailCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "name")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobileCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "email")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobile")
                              ? "+98 "
                              : "Enter some text"}
                          </div>
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant($state, "loginPage", "userNameSingup")
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "emailCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "name")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "email")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobile")
                                ? Icon111Icon
                                : "div"
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__advgG,
                              {
                                [sty.svgloginPage_emailCode__advgGwqwJl]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.svgloginPage_email__advgGiYwOs]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.svgloginPage_mobileCode__advgGm2GXn]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.svgloginPage_mobile__advgG6MmOa]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.svgloginPage_name__advgGhUiKy]: hasVariant(
                                  $state,
                                  "loginPage",
                                  "name"
                                ),
                                [sty.svgloginPage_userNameLogin__advgGh7MIy]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.svgloginPage_userNameSingup__advgGnuYv7]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                            role={"img"}
                          />
                        </React.Fragment>
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput4",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "\u0645\u062b\u0644\u0627: \u0639\u0644\u06cc \u0645\u062d\u0645\u062f\u06cc"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : ``
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "name")
                          ? undefined
                          : true
                      }
                      type={
                        hasVariant($state, "loginPage", "userNameSingup") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "text"
                          : hasVariant($state, "loginPage", "name")
                          ? "text"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : undefined
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput4",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__chggi, {
                    [sty.freeBoxloginPage_emailCode__chggIwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__chggiiYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__chggIm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__chggi6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__chggIhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__chggih7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__chggInuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hAmz0,
                      {
                        [sty.textloginPage_emailCode__hAmz0WqwJl]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__hAmz0IYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__hAmz0M2GXn]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__hAmz06MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__hAmz0HUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_userNameLogin__hAmz0H7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__hAmz0NuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0644\u0637\u0641\u0627 \u062c\u0646\u0633\u06cc\u062a \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__ve2B1,
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__ve2B1WqwJl]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__ve2B1IYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__ve2B1M2GXn]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__ve2B16MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__ve2B1HUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_userNameLogin__ve2B1H7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__ve2B1NuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [
                            { value: "female", label: "زن" },
                            { value: "male", label: "مرد ( همیار قاعدگی )" }
                          ];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <RadioGrop
                          data-plasmic-name={"radioGrop"}
                          data-plasmic-override={overrides.radioGrop}
                          className={classNames(
                            "__wab_instance",
                            sty.radioGrop,
                            {
                              [sty.radioGroploginPage_name]: hasVariant(
                                $state,
                                "loginPage",
                                "name"
                              )
                            }
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateGender"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["gender"]
                                    },
                                    operation: 0,
                                    value: currentItem.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateGender"] != null &&
                              typeof $steps["updateGender"] === "object" &&
                              typeof $steps["updateGender"].then === "function"
                            ) {
                              $steps["updateGender"] = await $steps[
                                "updateGender"
                              ];
                            }
                          }}
                          selected={(() => {
                            try {
                              return currentItem.value == $state.gender;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wjNxq
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.label;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </RadioGrop>
                      );
                    })}
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ihXz3, {
                    [sty.freeBoxloginPage_emailCode__ihXz3WqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__ihXz3IYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__ihXz3M2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__ihXz36MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__ihXz3HUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__ihXz3H7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__ihXz3NuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zRbjB,
                      {
                        [sty.textloginPage_emailCode__zRbjBwqwJl]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__zRbjBiYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__zRbjBm2GXn]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__zRbjB6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__zRbjBhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_userNameLogin__zRbjBh7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__zRbjBnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0627\u06af\u0647 \u06a9\u062f \u0645\u0639\u0631\u0641 \u062f\u0627\u0631\u06cc\u060c \u0627\u06cc\u0646\u062c\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646 (\u0627\u062e\u062a\u06cc\u0627\u0631\u06cc)"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__aAaMw,
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__aAaMwwqwJl]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__aAaMwIYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__aAaMwm2GXn]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__aAaMw6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__aAaMwhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_userNameLogin__aAaMwH7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__aAaMwnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput6"}
                      data-plasmic-override={overrides.textInput6}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput3
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput3", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          size: "large",
                          value: generateStateValueProp($state, [
                            "antdInput3",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput3.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput3"}
                            data-plasmic-override={overrides.antdInput3}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput6, {
                        [sty.textInput6loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput6loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput6loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput6loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput6loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput6loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput6loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__u4Kam,
                              {
                                [sty.freeBoxloginPage_name__u4KamhUiKy]:
                                  hasVariant($state, "loginPage", "name")
                              }
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kwWcw,
                              hasVariant($state, "loginPage", "userNameSingup")
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? "negative"
                                : hasVariant($state, "loginPage", "emailCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "name")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "email")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobile")
                                ? "negative"
                                : undefined,
                              {
                                [sty.textloginPage_emailCode__kwWcwwqwJl]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.textloginPage_email__kwWcwIYwOs]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.textloginPage_mobileCode__kwWcwm2GXn]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.textloginPage_mobile__kwWcw6MmOa]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.textloginPage_name__kwWcwhUiKy]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.textloginPage_userNameLogin__kwWcwH7MIy]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.textloginPage_userNameSingup__kwWcwnuYv7]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                          >
                            {hasVariant($state, "loginPage", "userNameSingup")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "emailCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "name")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobileCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "email")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobile")
                              ? "+98 "
                              : "Enter some text"}
                          </div>
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant($state, "loginPage", "userNameSingup")
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "emailCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "name")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "email")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobile")
                                ? Icon111Icon
                                : "div"
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__lqzCk,
                              {
                                [sty.svgloginPage_emailCode__lqzCkwqwJl]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.svgloginPage_email__lqzCkIYwOs]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.svgloginPage_mobileCode__lqzCkm2GXn]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.svgloginPage_mobile__lqzCk6MmOa]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.svgloginPage_name__lqzCkhUiKy]: hasVariant(
                                  $state,
                                  "loginPage",
                                  "name"
                                ),
                                [sty.svgloginPage_userNameLogin__lqzCkH7MIy]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.svgloginPage_userNameSingup__lqzCknuYv7]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                            role={"img"}
                          />
                        </React.Fragment>
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput6",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "liom"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "liom"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "name")
                          ? undefined
                          : true
                      }
                      type={
                        hasVariant($state, "loginPage", "userNameSingup") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "text"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : undefined
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput6",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox__kpeHu, {
                    [sty.freeBoxloginPage_emailCode__kpeHUwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__kpeHuiYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__kpeHUm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__kpeHu6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__kpeHUhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__kpeHuh7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__kpeHUnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jikjM, {
                      [sty.freeBoxloginPage_name__jikjMhUiKy]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      )
                    })}
                  >
                    <Checkbox
                      data-plasmic-name={"checkbox"}
                      data-plasmic-override={overrides.checkbox}
                      className={classNames("__wab_instance", sty.checkbox, {
                        [sty.checkboxloginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        )
                      })}
                      isChecked={
                        generateStateValueProp($state, [
                          "checkbox",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      {hasVariant($state, "loginPage", "name")
                        ? "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a \u0631\u0627 \u0645\u06cc\u067e\u0630\u06cc\u0631\u0645!"
                        : "Enter some text"}
                    </Checkbox>
                    <Button
                      data-plasmic-name={"button4"}
                      data-plasmic-override={overrides.button4}
                      className={classNames("__wab_instance", sty.button4, {
                        [sty.button4loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.button4loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.button4loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.button4loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.button4loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.button4loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.button4loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      color={generateStateValueProp($state, [
                        "button4",
                        "color"
                      ])}
                      disabled={
                        hasVariant($state, "loginPage", "name")
                          ? undefined
                          : (() => {
                              try {
                                return (
                                  ($state.antdInput2.value.length < 4 &&
                                    $state.gender == "") ||
                                  $state.loadedbtn
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                      }
                      isDisabled={
                        hasVariant($state, "loginPage", "name")
                          ? (() => {
                              try {
                                return (
                                  !(
                                    $state.antdInput2.value?.trim().length >
                                      2 &&
                                    $state.gender != "" &&
                                    $state.checkbox.isChecked == true
                                  ) || $state.loadedbtn
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          : undefined
                      }
                      loading={(() => {
                        try {
                          return $state.loadedbtn;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoadedbtn"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadedbtn"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadedbtn"] != null &&
                          typeof $steps["updateLoadedbtn"] === "object" &&
                          typeof $steps["updateLoadedbtn"].then === "function"
                        ) {
                          $steps["updateLoadedbtn"] = await $steps[
                            "updateLoadedbtn"
                          ];
                        }

                        $steps["invokeGlobalAction"] =
                          $state.type == "mobile" || $state.type == "email"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://api.liom.app/auth/signup/user",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          type: $state.type,
                                          name: $state.antdInput2.value || "",
                                          data:
                                            $state.number || $state.email || "",
                                          username: $state.username || "",
                                          target: "calendar",
                                          sex: $state.gender || "",
                                          token: $state.token || "",
                                          version: "",
                                          lang: "fa",
                                          country: "98",
                                          anotherLang: "fa",
                                          device: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            if (
                                              /Mobi|Android|iPhone|iPad|iPod/i.test(
                                                userAgent
                                              )
                                            ) {
                                              return "Mobile";
                                            } else if (
                                              /Tablet|iPad/i.test(userAgent)
                                            ) {
                                              return "Tablet";
                                            } else {
                                              return "Desktop";
                                            }
                                          })(),
                                          uniqueId: $$.uuid.v4(),
                                          fcm: "  ",
                                          os: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            const platform =
                                              window.navigator.userAgent;
                                            if (/Windows/i.test(platform))
                                              return "Windows";
                                            if (/Mac/i.test(platform))
                                              return "macOS";
                                            if (/Linux/i.test(platform))
                                              return "Linux";
                                            if (/Android/i.test(userAgent))
                                              return "Android";
                                            if (
                                              /iPhone|iPad|iPod/i.test(
                                                userAgent
                                              )
                                            )
                                              return "iOS";
                                            return "Unknown OS";
                                          })(),
                                          osVersion: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            if (
                                              /Windows NT 10.0/.test(userAgent)
                                            )
                                              return "Windows 10";
                                            if (
                                              /Windows NT 6.3/.test(userAgent)
                                            )
                                              return "Windows 8.1";
                                            if (
                                              /Windows NT 6.2/.test(userAgent)
                                            )
                                              return "Windows 8";
                                            if (
                                              /Windows NT 6.1/.test(userAgent)
                                            )
                                              return "Windows 7";
                                            if (
                                              /Mac OS X (\d+[\._]\d+)/.test(
                                                userAgent
                                              )
                                            )
                                              return `macOS ${RegExp.$1.replace(
                                                "_",
                                                "."
                                              )}`;
                                            if (
                                              /Android (\d+(\.\d+)?)/.test(
                                                userAgent
                                              )
                                            )
                                              return `Android ${RegExp.$1}`;
                                            if (
                                              /CPU (iPhone )?OS (\d+_\d+)/.test(
                                                userAgent
                                              )
                                            )
                                              return `iOS ${RegExp.$2.replace(
                                                "_",
                                                "."
                                              )}`;
                                            return "Unknown Version";
                                          })(),
                                          password: $state.password || "",
                                          postLang: "fa",
                                          refCode:
                                            $state.antdInput3.value || "",
                                          isCountryPending: false,
                                          device_type:
                                            window.navigator.platform,
                                          additionalData: {
                                            ip: "132465",
                                            name: "test1"
                                          },
                                          city: null,
                                          state: null,
                                          birthYear: null,
                                          religious: 0
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["invokeGlobalAction2"] =
                          $state.type == "userName"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://api.liom.app/auth/signup",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          type: $state.type,
                                          name: $state.antdInput2.value || "",
                                          data: $state.number,
                                          username: $state.username,
                                          target: "calendar",
                                          sex: $state.gender || "",
                                          token: $state.token || "",
                                          version: "",
                                          lang: "fa",
                                          country: "98",
                                          anotherLang: "fa",
                                          device: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            if (
                                              /Mobi|Android|iPhone|iPad|iPod/i.test(
                                                userAgent
                                              )
                                            ) {
                                              return "Mobile";
                                            } else if (
                                              /Tablet|iPad/i.test(userAgent)
                                            ) {
                                              return "Tablet";
                                            } else {
                                              return "Desktop";
                                            }
                                          })(),
                                          uniqueId: $$.uuid.v4(),
                                          fcm: "  ",
                                          os: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            const platform =
                                              window.navigator.userAgent;
                                            if (/Windows/i.test(platform))
                                              return "Windows";
                                            if (/Mac/i.test(platform))
                                              return "macOS";
                                            if (/Linux/i.test(platform))
                                              return "Linux";
                                            if (/Android/i.test(userAgent))
                                              return "Android";
                                            if (
                                              /iPhone|iPad|iPod/i.test(
                                                userAgent
                                              )
                                            )
                                              return "iOS";
                                            return "Unknown OS";
                                          })(),
                                          osVersion: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            if (
                                              /Windows NT 10.0/.test(userAgent)
                                            )
                                              return "Windows 10";
                                            if (
                                              /Windows NT 6.3/.test(userAgent)
                                            )
                                              return "Windows 8.1";
                                            if (
                                              /Windows NT 6.2/.test(userAgent)
                                            )
                                              return "Windows 8";
                                            if (
                                              /Windows NT 6.1/.test(userAgent)
                                            )
                                              return "Windows 7";
                                            if (
                                              /Mac OS X (\d+[\._]\d+)/.test(
                                                userAgent
                                              )
                                            )
                                              return `macOS ${RegExp.$1.replace(
                                                "_",
                                                "."
                                              )}`;
                                            if (
                                              /Android (\d+(\.\d+)?)/.test(
                                                userAgent
                                              )
                                            )
                                              return `Android ${RegExp.$1}`;
                                            if (
                                              /CPU (iPhone )?OS (\d+_\d+)/.test(
                                                userAgent
                                              )
                                            )
                                              return `iOS ${RegExp.$2.replace(
                                                "_",
                                                "."
                                              )}`;
                                            return "Unknown Version";
                                          })(),
                                          password: $state.password,
                                          postLang: "fa",
                                          refCode:
                                            $state.antdInput3.value || "",
                                          isCountryPending: false,
                                          device_type:
                                            window.navigator.platform,
                                          additionalData: {
                                            ip: "132465",
                                            name: "test1"
                                          },
                                          city: null,
                                          state: null,
                                          birthYear: null,
                                          religious: 0
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }

                        $steps["updateLoginData"] =
                          $steps.invokeGlobalAction?.data?.success == true ||
                          $steps.invokeGlobalAction2?.data?.success == true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loginData"]
                                  },
                                  operation: 0,
                                  value:
                                    $steps.invokeGlobalAction.data ||
                                    $steps.invokeGlobalAction2.data
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateLoginData"] != null &&
                          typeof $steps["updateLoginData"] === "object" &&
                          typeof $steps["updateLoginData"].then === "function"
                        ) {
                          $steps["updateLoginData"] = await $steps[
                            "updateLoginData"
                          ];
                        }

                        $steps["goToPage"] =
                          ($steps.invokeGlobalAction?.data?.success == true ||
                            $steps.invokeGlobalAction2?.data?.success ==
                              true) &&
                          ($state.type == "mobile" || $state.gender == "female")
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return (
                                        $ctx.query.redirect_url +
                                        "?token=" +
                                        $$.uuid.v4().slice(0, 6) +
                                        $state.loginData.result.token +
                                        $$.uuid.v4().slice(10, 13) +
                                        "&userId=" +
                                        $$.uuid.v4().slice(0, 4) +
                                        $state.loginData.result.userId +
                                        $$.uuid.v4().slice(0, 4)
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }

                        $steps["updateLoginPage2"] =
                          $state.gender == "male" && $state.number == ""
                            ? (() => {
                                const actionArgs = {
                                  vgroup: "loginPage",
                                  operation: 0,
                                  value: "mobile"
                                };
                                return (({ vgroup, value }) => {
                                  if (typeof value === "string") {
                                    value = [value];
                                  }

                                  $stateSet($state, vgroup, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateLoginPage2"] != null &&
                          typeof $steps["updateLoginPage2"] === "object" &&
                          typeof $steps["updateLoginPage2"].then === "function"
                        ) {
                          $steps["updateLoginPage2"] = await $steps[
                            "updateLoginPage2"
                          ];
                        }

                        $steps["updateLoadedbtn2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadedbtn"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadedbtn2"] != null &&
                          typeof $steps["updateLoadedbtn2"] === "object" &&
                          typeof $steps["updateLoadedbtn2"].then === "function"
                        ) {
                          $steps["updateLoadedbtn2"] = await $steps[
                            "updateLoadedbtn2"
                          ];
                        }

                        $steps["updateLoginData2"] =
                          $state.type == "google"
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loginData"]
                                  },
                                  operation: 0,
                                  value: {
                                    success: true,
                                    result: {
                                      token: $ctx.query.token,
                                      userId: $ctx.query.userId
                                    }
                                  }
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateLoginData2"] != null &&
                          typeof $steps["updateLoginData2"] === "object" &&
                          typeof $steps["updateLoginData2"].then === "function"
                        ) {
                          $steps["updateLoginData2"] = await $steps[
                            "updateLoginData2"
                          ];
                        }
                      }}
                      onColorChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, ["button4", "color"])(
                          eventArgs[0]
                        );
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zaY8Q,
                          {
                            [sty.textloginPage_emailCode__zaY8QwqwJl]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_email__zaY8QIYwOs]: hasVariant(
                              $state,
                              "loginPage",
                              "email"
                            ),
                            [sty.textloginPage_mobileCode__zaY8Qm2GXn]:
                              hasVariant($state, "loginPage", "mobileCode"),
                            [sty.textloginPage_mobile__zaY8Q6MmOa]: hasVariant(
                              $state,
                              "loginPage",
                              "mobile"
                            ),
                            [sty.textloginPage_name__zaY8QhUiKy]: hasVariant(
                              $state,
                              "loginPage",
                              "name"
                            ),
                            [sty.textloginPage_userNameLogin__zaY8QH7MIy]:
                              hasVariant($state, "loginPage", "userNameLogin"),
                            [sty.textloginPage_userNameSingup__zaY8QnuYv7]:
                              hasVariant($state, "loginPage", "userNameSingup")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "userNameSingup")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "name")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "email")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : "Button"}
                      </div>
                    </Button>
                  </div>
                </div>
              </Stack__>
            </Reveal>
          ) : null}
          {(
            hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              data-plasmic-name={"mobileCode"}
              data-plasmic-override={overrides.mobileCode}
              className={classNames("__wab_instance", sty.mobileCode, {
                [sty.mobileCodeloginPage_emailCode]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.mobileCodeloginPage_email]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.mobileCodeloginPage_mobileCode]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.mobileCodeloginPage_mobile]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.mobileCodeloginPage_name]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.mobileCodeloginPage_userNameLogin]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.mobileCodeloginPage_userNameSingup]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ns0Tj, {
                  [sty.freeBoxloginPage_emailCode__ns0TJwqwJl]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email__ns0TjiYwOs]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode__ns0TJm2GXn]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile__ns0Tj6MmOa]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__ns0TJhUiKy]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_userNameLogin__ns0Tjh7MIy]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup__ns0TJnuYv7]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__k2Qk, {
                    [sty.freeBoxloginPage_emailCode__k2QkWqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__k2QkIYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__k2QkM2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__k2Qk6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__k2QkHUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__k2QkH7MIy]: hasVariant(
                      $state,
                      "loginPage",
                      "userNameLogin"
                    ),
                    [sty.freeBoxloginPage_userNameSingup__k2QkNuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: "mobile"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__aydpl, {
                      [sty.svgloginPage_emailCode__aydplwqwJl]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__aydplIYwOs]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__aydplm2GXn]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__aydpl6MmOa]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__aydplhUiKy]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_userNameLogin__aydplH7MIy]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__aydplnuYv7]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cmdIp, {
                    [sty.freeBoxloginPage_emailCode__cmdIpwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__cmdIpIYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__cmdIpm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__cmdIp6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__cmdIphUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__cmdIpH7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__cmdIpnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pOmUn, {
                      [sty.freeBoxloginPage_emailCode__pOmUnwqwJl]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.freeBoxloginPage_mobileCode__pOmUnm2GXn]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0LxR,
                        {
                          [sty.textloginPage_emailCode___0LxRwqwJl]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.textloginPage_email___0LxRiYwOs]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode___0LxRm2GXn]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile___0LxR6MmOa]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name___0LxRhUiKy]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_userNameLogin___0LxRh7MIy]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup___0LxRnuYv7]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      {hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : "Enter some text"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ua1Oz,
                        {
                          [sty.textloginPage_emailCode__ua1OzwqwJl]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.textloginPage_email__ua1OzIYwOs]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode__ua1Ozm2GXn]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile__ua1Oz6MmOa]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name__ua1OzhUiKy]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_userNameLogin__ua1OzH7MIy]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup__ua1OznuYv7]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoginPage"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: "loginPage",
                                operation: 0,
                                value: "mobile"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoginPage"] != null &&
                          typeof $steps["updateLoginPage"] === "object" &&
                          typeof $steps["updateLoginPage"].then === "function"
                        ) {
                          $steps["updateLoginPage"] = await $steps[
                            "updateLoginPage"
                          ];
                        }
                      }}
                    >
                      {hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : "Enter some text"}
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___7YOd7,
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode___7YOd7WqwJl]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email___7YOd7IYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode___7YOd7M2GXn]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile___7YOd76MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name___7YOd7HUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_userNameLogin___7YOd7H7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup___7YOd7NuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput3"}
                      data-plasmic-override={overrides.textInput3}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput4,
                            {
                              [sty.antdInput4loginPage_emailCode]: hasVariant(
                                $state,
                                "loginPage",
                                "emailCode"
                              ),
                              [sty.antdInput4loginPage_mobileCode]: hasVariant(
                                $state,
                                "loginPage",
                                "mobileCode"
                              )
                            }
                          ),
                          disabled: hasVariant($state, "loginPage", "emailCode")
                            ? true
                            : hasVariant($state, "loginPage", "mobileCode")
                            ? true
                            : undefined,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput4", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          size: "large",
                          type: hasVariant($state, "loginPage", "emailCode")
                            ? "tel"
                            : hasVariant($state, "loginPage", "mobileCode")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput4",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput4.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput4"}
                            data-plasmic-override={overrides.antdInput4}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput3, {
                        [sty.textInput3loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput3loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput3loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput3loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput3loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput3loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput3loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___0Mq8T
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bZkn,
                              hasVariant($state, "loginPage", "userNameSingup")
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? "negative"
                                : hasVariant($state, "loginPage", "emailCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "name")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "email")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobile")
                                ? "negative"
                                : undefined,
                              {
                                [sty.textloginPage_emailCode__bZknwqwJl]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.textloginPage_email__bZknIYwOs]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.textloginPage_mobileCode__bZknm2GXn]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.textloginPage_mobile__bZkn6MmOa]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.textloginPage_name__bZknhUiKy]: hasVariant(
                                  $state,
                                  "loginPage",
                                  "name"
                                ),
                                [sty.textloginPage_userNameLogin__bZknH7MIy]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.textloginPage_userNameSingup__bZknnuYv7]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                          >
                            {hasVariant($state, "loginPage", "userNameSingup")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "emailCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "name")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobileCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "email")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobile")
                              ? "+98 "
                              : "Enter some text"}
                          </div>
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant($state, "loginPage", "userNameSingup")
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "emailCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "name")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "email")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobile")
                                ? Icon111Icon
                                : "div"
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__xjj9F,
                              {
                                [sty.svgloginPage_emailCode__xjj9FwqwJl]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.svgloginPage_email__xjj9FiYwOs]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.svgloginPage_mobileCode__xjj9Fm2GXn]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.svgloginPage_mobile__xjj9F6MmOa]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.svgloginPage_name__xjj9FhUiKy]: hasVariant(
                                  $state,
                                  "loginPage",
                                  "name"
                                ),
                                [sty.svgloginPage_userNameLogin__xjj9Fh7MIy]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.svgloginPage_userNameSingup__xjj9FnuYv7]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                            role={"img"}
                          />
                        </React.Fragment>
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput3",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "09123456789"
                      }
                      showEndIcon={true}
                      type={
                        hasVariant($state, "loginPage", "userNameSingup") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : undefined
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput3",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__nn8DP,
                      {
                        [sty.embedHtmlloginPage_emailCode__nn8DPwqwJl]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.embedHtmlloginPage_mobileCode__nn8DPm2GXn]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.embedHtmlloginPage_mobile__nn8DP6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.embedHtmlloginPage_name__nn8DPhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.embedHtmlloginPage_userNameLogin__nn8DPh7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.embedHtmlloginPage_userNameSingup__nn8DPnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                    code={
                      hasVariant($state, "loginPage", "emailCode") &&
                      hasVariant(globalVariants, "screen", "mobile")
                        ? '<div style="display: flex; justify-content: space-between; align-items: center; width: 100%; box-sizing: border-box; direction: ltr;">\r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit1" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 0, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit2" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 1, \'digit3\')" onkeydown="moveToPrev(event, \'digit1\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit3" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 2, \'digit4\')" onkeydown="moveToPrev(event, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit4" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 3)" onkeydown="moveToPrev(event, \'digit3\')">\r\n</div>\r\n\r\n<script>\r\n    // \u062a\u0639\u0631\u06cc\u0641 \u0645\u062a\u063a\u06cc\u0631 \u0622\u0631\u0627\u06cc\u0647\u200c\u0627\u06cc \u062f\u0631 window\r\n    window.inputValues = ["", "", "", ""];\r\n\r\n    function handleInput(current, index, nextFieldId) {\r\n        // \u0630\u062e\u06cc\u0631\u0647 \u0645\u0642\u062f\u0627\u0631 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u062f\u0631 \u0622\u0631\u0627\u06cc\u0647\r\n        window.inputValues[index] = current.value;\r\n        \r\n        // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc \u062f\u0631 \u0635\u0648\u0631\u062a \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0645\u0642\u062f\u0627\u0631\r\n        if (current.value.length === 1 && nextFieldId) {\r\n            document.getElementById(nextFieldId).focus();\r\n        }\r\n    }\r\n\r\n    function moveToPrev(event, prevFieldId) {\r\n        if (event.key === "Backspace" && !event.target.value) {\r\n            document.getElementById(prevFieldId).focus();\r\n        }\r\n    }\r\n</script>\r\n'
                        : hasVariant($state, "loginPage", "emailCode")
                        ? '<div style="display: flex; justify-content: space-between; align-items: center; width: 100%; box-sizing: border-box; direction: ltr;">\r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit1" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput2(this, 0, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit2" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput2(this, 1, \'digit3\')" onkeydown="moveToPrev2(event, \'digit1\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit3" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput2(this, 2, \'digit4\')" onkeydown="moveToPrev2(event, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit4" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput2(this, 3)" onkeydown="moveToPrev2(event, \'digit3\')">\r\n</div>\r\n\r\n<script>\r\n    // \u062a\u0639\u0631\u06cc\u0641 \u0645\u062a\u063a\u06cc\u0631 \u0622\u0631\u0627\u06cc\u0647\u200c\u0627\u06cc \u062f\u0631 window\r\n    window.inputValues = ["", "", "", ""];\r\n\r\n    function handleInput2(current, index, nextFieldId) {\r\n        // \u0630\u062e\u06cc\u0631\u0647 \u0645\u0642\u062f\u0627\u0631 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u062f\u0631 \u0622\u0631\u0627\u06cc\u0647\r\n        window.inputValues[index] = current.value;\r\n        \r\n        // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc \u062f\u0631 \u0635\u0648\u0631\u062a \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0645\u0642\u062f\u0627\u0631\r\n        if (current.value.length === 1 && nextFieldId) {\r\n            document.getElementById(nextFieldId).focus();\r\n        }\r\n    }\r\n\r\n    function moveToPrev2(event, prevFieldId) {\r\n        if (event.key === "Backspace" && !event.target.value) {\r\n            document.getElementById(prevFieldId).focus();\r\n        }\r\n    }\r\n</script>\r\n'
                        : hasVariant($state, "loginPage", "mobileCode") &&
                          hasVariant(globalVariants, "screen", "mobile")
                        ? '<div style="display: flex; justify-content: space-between; align-items: center; width: 100%; box-sizing: border-box; direction: ltr;">\r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit1" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 0, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit2" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 1, \'digit3\')" onkeydown="moveToPrev(event, \'digit1\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit3" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 2, \'digit4\')" onkeydown="moveToPrev(event, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit4" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 3)" onkeydown="moveToPrev(event, \'digit3\')">\r\n</div>\r\n\r\n<script>\r\n    // \u062a\u0639\u0631\u06cc\u0641 \u0645\u062a\u063a\u06cc\u0631 \u0622\u0631\u0627\u06cc\u0647\u200c\u0627\u06cc \u062f\u0631 window\r\n    window.inputValues = ["", "", "", ""];\r\n\r\n    function handleInput(current, index, nextFieldId) {\r\n        // \u0630\u062e\u06cc\u0631\u0647 \u0645\u0642\u062f\u0627\u0631 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u062f\u0631 \u0622\u0631\u0627\u06cc\u0647\r\n        window.inputValues[index] = current.value;\r\n        \r\n        // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc \u062f\u0631 \u0635\u0648\u0631\u062a \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0645\u0642\u062f\u0627\u0631\r\n        if (current.value.length === 1 && nextFieldId) {\r\n            document.getElementById(nextFieldId).focus();\r\n        }\r\n    }\r\n\r\n    function moveToPrev(event, prevFieldId) {\r\n        if (event.key === "Backspace" && !event.target.value) {\r\n            document.getElementById(prevFieldId).focus();\r\n        }\r\n    }\r\n</script>\r\n'
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? '<div style="display: flex; justify-content: space-between; align-items: center; width: 100%; box-sizing: border-box; direction: ltr;">\r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit1" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 0, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit2" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 1, \'digit3\')" onkeydown="moveToPrev(event, \'digit1\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit3" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 2, \'digit4\')" onkeydown="moveToPrev(event, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit4" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 3)" onkeydown="moveToPrev(event, \'digit3\')">\r\n</div>\r\n\r\n<script>\r\n    // \u062a\u0639\u0631\u06cc\u0641 \u0645\u062a\u063a\u06cc\u0631 \u0622\u0631\u0627\u06cc\u0647\u200c\u0627\u06cc \u062f\u0631 window\r\n    window.inputValues = ["", "", "", ""];\r\n\r\n    function handleInput(current, index, nextFieldId) {\r\n        // \u0630\u062e\u06cc\u0631\u0647 \u0645\u0642\u062f\u0627\u0631 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u062f\u0631 \u0622\u0631\u0627\u06cc\u0647\r\n        window.inputValues[index] = current.value;\r\n        \r\n        // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc \u062f\u0631 \u0635\u0648\u0631\u062a \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0645\u0642\u062f\u0627\u0631\r\n        if (current.value.length === 1 && nextFieldId) {\r\n            document.getElementById(nextFieldId).focus();\r\n        }\r\n    }\r\n\r\n    function moveToPrev(event, prevFieldId) {\r\n        if (event.key === "Backspace" && !event.target.value) {\r\n            document.getElementById(prevFieldId).focus();\r\n        }\r\n    }\r\n</script>\r\n'
                        : hasVariant(globalVariants, "screen", "mobile")
                        ? '<div style="display: flex; justify-content: space-between; align-items: center; width: 100%; box-sizing: border-box;">\r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit1" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="moveToNext(this, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit2" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="moveToNext(this, \'digit3\')" onkeydown="moveToPrev(event, \'digit1\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit3" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="moveToNext(this, \'digit4\')" onkeydown="moveToPrev(event, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit4" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           onkeydown="moveToPrev(event, \'digit3\')">\r\n</div>\r\n\r\n<script>\r\n    function moveToNext(current, nextFieldId) {\r\n        if (current.value.length === 1) {\r\n            document.getElementById(nextFieldId).focus();\r\n        }\r\n    }\r\n\r\n    function moveToPrev(event, prevFieldId) {\r\n        if (event.key === "Backspace" && !event.target.value) {\r\n            document.getElementById(prevFieldId).focus();\r\n        }\r\n    }\r\n</script>\r\n'
                        : '<div style="display: flex; justify-content: space-between; align-items: center; width: 100%; box-sizing: border-box; direction: ltr;">\r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit1" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput2(this, 0, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit2" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput2(this, 1, \'digit3\')" onkeydown="moveToPrev2(event, \'digit1\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit3" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput2(this, 2, \'digit4\')" onkeydown="moveToPrev2(event, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit4" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput2(this, 3)" onkeydown="moveToPrev2(event, \'digit3\')">\r\n</div>\r\n\r\n<script>\r\n    // \u062a\u0639\u0631\u06cc\u0641 \u0645\u062a\u063a\u06cc\u0631 \u0622\u0631\u0627\u06cc\u0647\u200c\u0627\u06cc \u062f\u0631 window\r\n    window.inputValues = ["", "", "", ""];\r\n\r\n    function handleInput2(current, index, nextFieldId) {\r\n        // \u0630\u062e\u06cc\u0631\u0647 \u0645\u0642\u062f\u0627\u0631 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u062f\u0631 \u0622\u0631\u0627\u06cc\u0647\r\n        window.inputValues[index] = current.value;\r\n        \r\n        // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc \u062f\u0631 \u0635\u0648\u0631\u062a \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0645\u0642\u062f\u0627\u0631\r\n        if (current.value.length === 1 && nextFieldId) {\r\n            document.getElementById(nextFieldId).focus();\r\n        }\r\n    }\r\n\r\n    function moveToPrev2(event, prevFieldId) {\r\n        if (event.key === "Backspace" && !event.target.value) {\r\n            document.getElementById(prevFieldId).focus();\r\n        }\r\n    }\r\n</script>\r\n'
                    }
                  />

                  {(
                    hasVariant($state, "loginPage", "emailCode")
                      ? (() => {
                          try {
                            return $state.time != 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? (() => {
                          try {
                            return $state.time != 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__dIhpA,
                        {
                          [sty.freeBoxloginPage_emailCode__dIhpAwqwJl]:
                            hasVariant($state, "loginPage", "emailCode"),
                          [sty.freeBoxloginPage_mobileCode__dIhpAm2GXn]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.freeBoxloginPage_mobile__dIhpA6MmOa]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.freeBoxloginPage_userNameLogin__dIhpAh7MIy]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.freeBoxloginPage_userNameSingup__dIhpAnuYv7]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zsVmp,
                          {
                            [sty.textloginPage_emailCode__zsVmpwqwJl]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_mobileCode__zsVmpm2GXn]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "emailCode") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.time;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "0";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : hasVariant($state, "loginPage", "mobileCode") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.time;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "0";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          "Enter some text"
                        )}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__juCsk,
                          {
                            [sty.textloginPage_emailCode__juCsKwqwJl]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_mobileCode__juCsKm2GXn]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "emailCode")
                          ? "\u062a\u0627 \u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u06a9\u062f \u0645\u0627\u0646\u062f\u0647 \u0627\u0633\u062a"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "\u062a\u0627 \u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u06a9\u062f \u0645\u0627\u0646\u062f\u0647 \u0627\u0633\u062a"
                          : "Enter some text"}
                      </div>
                      <Timer
                        className={classNames(
                          "__wab_instance",
                          sty.timer__ruoI,
                          {
                            [sty.timerloginPage_emailCode__ruoIwqwJl]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.timerloginPage_mobileCode__ruoIm2GXn]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                        intervalSeconds={
                          hasVariant($state, "loginPage", "emailCode")
                            ? 1
                            : hasVariant($state, "loginPage", "mobileCode")
                            ? 1
                            : undefined
                        }
                        isRunning={true}
                        onTick={async () => {
                          const $steps = {};

                          $steps["updateTime"] =
                            $state.time > 0
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["time"]
                                    },
                                    operation: 0,
                                    value: $state.time - 1
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateTime"] != null &&
                            typeof $steps["updateTime"] === "object" &&
                            typeof $steps["updateTime"].then === "function"
                          ) {
                            $steps["updateTime"] = await $steps["updateTime"];
                          }
                        }}
                        runWhileEditing={false}
                      />
                    </Stack__>
                  ) : null}
                  {(
                    hasVariant($state, "loginPage", "emailCode")
                      ? (() => {
                          try {
                            return $state.time == 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? (() => {
                          try {
                            return $state.time == 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__xdA4U,
                        {
                          [sty.freeBoxloginPage_emailCode__xdA4UwqwJl]:
                            hasVariant($state, "loginPage", "emailCode"),
                          [sty.freeBoxloginPage_mobileCode__xdA4Um2GXn]:
                            hasVariant($state, "loginPage", "mobileCode")
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nqFb,
                          {
                            [sty.textloginPage_emailCode__nqFbwqwJl]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_mobileCode__nqFbm2GXn]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "emailCode")
                          ? "23"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "23"
                          : "Enter some text"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hNv,
                          {
                            [sty.textloginPage_emailCode__hNvwqwJl]: hasVariant(
                              $state,
                              "loginPage",
                              "emailCode"
                            ),
                            [sty.textloginPage_mobileCode__hNvm2GXn]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateTime"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["time"]
                                  },
                                  operation: 0,
                                  value: 30
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTime"] != null &&
                            typeof $steps["updateTime"] === "object" &&
                            typeof $steps["updateTime"].then === "function"
                          ) {
                            $steps["updateTime"] = await $steps["updateTime"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://api.liom.app/auth/signup/send-code-v2",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          type: "mobile",
                                          country: "98",
                                          smsType: "sms",
                                          data: $state.number
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["invokeGlobalAction2"] =
                            $steps.invokeGlobalAction?.data?.success == true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      undefined,
                                      "\u06a9\u062f \u0645\u062c\u062f\u062f\u0627\u064b \u0628\u0631\u0627\u06cc \u0634\u0645\u0627 \u0627\u0631\u0633\u0627\u0644 \u0634\u062f.",
                                      "top-left"
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction2"] != null &&
                            typeof $steps["invokeGlobalAction2"] === "object" &&
                            typeof $steps["invokeGlobalAction2"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction2"] = await $steps[
                              "invokeGlobalAction2"
                            ];
                          }
                        }}
                      >
                        {hasVariant($state, "loginPage", "emailCode")
                          ? "\u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u062c\u062f\u062f \u06a9\u062f"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "\u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u062c\u062f\u062f \u06a9\u062f"
                          : "Enter some text"}
                      </div>
                    </Stack__>
                  ) : null}
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox__iXvYk, {
                    [sty.freeBoxloginPage_emailCode__iXvYkwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__iXvYkIYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__iXvYkm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__iXvYk6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__iXvYkhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__iXvYkH7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__iXvYknuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <Button
                    data-plasmic-name={"button3"}
                    data-plasmic-override={overrides.button3}
                    className={classNames("__wab_instance", sty.button3, {
                      [sty.button3loginPage_emailCode]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.button3loginPage_email]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.button3loginPage_mobileCode]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.button3loginPage_mobile]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.button3loginPage_name]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.button3loginPage_userNameLogin]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.button3loginPage_userNameSingup]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    color={generateStateValueProp($state, ["button3", "color"])}
                    endIcon={
                      <Icon115Icon
                        className={classNames(projectcss.all, sty.svg__opVjO, {
                          [sty.svgloginPage_emailCode__opVjOwqwJl]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.svgloginPage_mobileCode__opVjOm2GXn]: hasVariant(
                            $state,
                            "loginPage",
                            "mobileCode"
                          )
                        })}
                        role={"img"}
                      />
                    }
                    isDisabled={
                      hasVariant($state, "loginPage", "emailCode")
                        ? (() => {
                            try {
                              return $state.loadedbtn;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? (() => {
                            try {
                              return $state.loadedbtn;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                    loading={
                      hasVariant($state, "loginPage", "emailCode")
                        ? (() => {
                            try {
                              return $state.loadedbtn;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? (() => {
                            try {
                              return $state.loadedbtn;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadedbtn"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn"] != null &&
                        typeof $steps["updateLoadedbtn"] === "object" &&
                        typeof $steps["updateLoadedbtn"].then === "function"
                      ) {
                        $steps["updateLoadedbtn"] = await $steps[
                          "updateLoadedbtn"
                        ];
                      }

                      $steps["updateCods"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["cods"]
                              },
                              operation: 0,
                              value: parseInt(window.inputValues.join(""))
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCods"] != null &&
                        typeof $steps["updateCods"] === "object" &&
                        typeof $steps["updateCods"].then === "function"
                      ) {
                        $steps["updateCods"] = await $steps["updateCods"];
                      }

                      $steps["invokeGlobalAction"] =
                        $state.typeLogin == "signup" && $state.type == "mobile"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/auth/signup/validate",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        code: $state.cods,
                                        data: $state.number
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["invokeGlobalAction3"] =
                        $state.typeLogin == "login" && $state.type == "mobile"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/auth/login",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        code: $state.cods,
                                        type: $state.type,
                                        name: "",
                                        data: $state.number || $state.email,
                                        username: "",
                                        target: "calendar",
                                        sex: $state.gender || "",
                                        token: $state.token || "",
                                        version: "",
                                        lang: "fa",
                                        country: "98",
                                        anotherLang: "fa",
                                        device: (() => {
                                          const userAgent =
                                            window.navigator.userAgent;
                                          if (
                                            /Mobi|Android|iPhone|iPad|iPod/i.test(
                                              userAgent
                                            )
                                          ) {
                                            return "Mobile";
                                          } else if (
                                            /Tablet|iPad/i.test(userAgent)
                                          ) {
                                            return "Tablet";
                                          } else {
                                            return "Desktop";
                                          }
                                        })(),
                                        uniqueId: $$.uuid.v4(),
                                        fcm: "  ",
                                        os: (() => {
                                          const userAgent =
                                            window.navigator.userAgent;
                                          const platform =
                                            window.navigator.userAgent;
                                          if (/Windows/i.test(platform))
                                            return "Windows";
                                          if (/Mac/i.test(platform))
                                            return "macOS";
                                          if (/Linux/i.test(platform))
                                            return "Linux";
                                          if (/Android/i.test(userAgent))
                                            return "Android";
                                          if (
                                            /iPhone|iPad|iPod/i.test(userAgent)
                                          )
                                            return "iOS";
                                          return "Unknown OS";
                                        })(),
                                        osVersion: (() => {
                                          const userAgent =
                                            window.navigator.userAgent;
                                          if (/Windows NT 10.0/.test(userAgent))
                                            return "Windows 10";
                                          if (/Windows NT 6.3/.test(userAgent))
                                            return "Windows 8.1";
                                          if (/Windows NT 6.2/.test(userAgent))
                                            return "Windows 8";
                                          if (/Windows NT 6.1/.test(userAgent))
                                            return "Windows 7";
                                          if (
                                            /Mac OS X (\d+[\._]\d+)/.test(
                                              userAgent
                                            )
                                          )
                                            return `macOS ${RegExp.$1.replace(
                                              "_",
                                              "."
                                            )}`;
                                          if (
                                            /Android (\d+(\.\d+)?)/.test(
                                              userAgent
                                            )
                                          )
                                            return `Android ${RegExp.$1}`;
                                          if (
                                            /CPU (iPhone )?OS (\d+_\d+)/.test(
                                              userAgent
                                            )
                                          )
                                            return `iOS ${RegExp.$2.replace(
                                              "_",
                                              "."
                                            )}`;
                                          return "Unknown Version";
                                        })(),
                                        password: "",
                                        postLang: "fa",
                                        refCode: $state.antdInput3.value || "",
                                        isCountryPending: false,
                                        device_type: window.navigator.platform,
                                        additionalData: {
                                          ip: "132465",
                                          name: "test1"
                                        },
                                        city: null,
                                        state: null,
                                        birthYear: null,
                                        religious: 0
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["invokeGlobalAction4"] =
                        $state.type != "mobile"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/rest/user/setMobileValidate",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        data: $state.number,
                                        name: $state.antdInput2.value || "",
                                        email: $state.email || "",
                                        gender: $state.gender,
                                        type: "mobile",
                                        code: $state.cods
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  (() => {
                                    try {
                                      return {
                                        headers: {
                                          Authorization:
                                            "Bearer " +
                                            ($state.loginData.result.token ||
                                              "")
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction4"] != null &&
                        typeof $steps["invokeGlobalAction4"] === "object" &&
                        typeof $steps["invokeGlobalAction4"].then === "function"
                      ) {
                        $steps["invokeGlobalAction4"] = await $steps[
                          "invokeGlobalAction4"
                        ];
                      }

                      $steps["updateToken"] =
                        $steps.invokeGlobalAction?.data?.success == true &&
                        $state.typeLogin == "signup" &&
                        $state.type == "mobile"
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["token"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction.data.result
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateToken"] != null &&
                        typeof $steps["updateToken"] === "object" &&
                        typeof $steps["updateToken"].then === "function"
                      ) {
                        $steps["updateToken"] = await $steps["updateToken"];
                      }

                      $steps["updateLoginPage"] =
                        $steps.invokeGlobalAction?.data?.success == true &&
                        $state.typeLogin == "signup"
                          ? (() => {
                              const actionArgs = {
                                vgroup: "loginPage",
                                operation: 0,
                                value: "name"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateLoginPage"] != null &&
                        typeof $steps["updateLoginPage"] === "object" &&
                        typeof $steps["updateLoginPage"].then === "function"
                      ) {
                        $steps["updateLoginPage"] = await $steps[
                          "updateLoginPage"
                        ];
                      }

                      $steps["updateLoginData"] =
                        ($steps.invokeGlobalAction4?.data?.success == true ||
                          $steps.invokeGlobalAction3?.data?.success == true) &&
                        $state.typeLogin == "login"
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loginData"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction3.data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateLoginData"] != null &&
                        typeof $steps["updateLoginData"] === "object" &&
                        typeof $steps["updateLoginData"].then === "function"
                      ) {
                        $steps["updateLoginData"] = await $steps[
                          "updateLoginData"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction?.data?.success == false ||
                        $steps.invokeGlobalAction3?.data?.success == false ||
                        $steps.invokeGlobalAction4?.data?.success == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u06a9\u062f \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0635\u062d\u06cc\u062d \u0646\u06cc\u0633\u062a.",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["goToPage"] =
                        ($steps.invokeGlobalAction4?.data?.success == true ||
                          $steps.invokeGlobalAction3?.data?.success == true) &&
                        $state.typeLogin == "login"
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return (
                                      $ctx.query.redirect_url +
                                      "?token=" +
                                      $$.uuid.v4().slice(0, 6) +
                                      $state.loginData.result.token +
                                      $$.uuid.v4().slice(10, 13) +
                                      "&userId=" +
                                      $$.uuid.v4().slice(0, 4) +
                                      $state.loginData.result.userId +
                                      $$.uuid.v4().slice(0, 4)
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["updateLoadedbtn2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn2"] != null &&
                        typeof $steps["updateLoadedbtn2"] === "object" &&
                        typeof $steps["updateLoadedbtn2"].then === "function"
                      ) {
                        $steps["updateLoadedbtn2"] = await $steps[
                          "updateLoadedbtn2"
                        ];
                      }
                    }}
                    onColorChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "color"])(
                        eventArgs[0]
                      );
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xsc0N,
                        {
                          [sty.textloginPage_emailCode__xsc0NwqwJl]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.textloginPage_email__xsc0NIYwOs]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode__xsc0Nm2GXn]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile__xsc0N6MmOa]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name__xsc0NhUiKy]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_userNameLogin__xsc0NH7MIy]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup__xsc0NnuYv7]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      {hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : "Button"}
                    </div>
                  </Button>
                </div>
              </Stack__>
            </Reveal>
          ) : null}
          {(
            hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              data-plasmic-name={"emailCode"}
              data-plasmic-override={overrides.emailCode}
              className={classNames("__wab_instance", sty.emailCode, {
                [sty.emailCodeloginPage_emailCode]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.emailCodeloginPage_email]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.emailCodeloginPage_mobileCode]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.emailCodeloginPage_mobile]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.emailCodeloginPage_name]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.emailCodeloginPage_userNameLogin]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.emailCodeloginPage_userNameSingup]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__aMseF, {
                  [sty.freeBoxloginPage_emailCode__aMseFwqwJl]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email__aMseFiYwOs]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode__aMseFm2GXn]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile__aMseF6MmOa]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__aMseFhUiKy]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_userNameLogin__aMseFh7MIy]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup__aMseFnuYv7]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___6Y0Uu, {
                    [sty.freeBoxloginPage_emailCode___6Y0UuwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email___6Y0UuIYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode___6Y0Uum2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile___6Y0Uu6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name___6Y0UuhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin___6Y0UuH7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup___6Y0UunuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: "email"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__ynPqQ, {
                      [sty.svgloginPage_emailCode__ynPqQwqwJl]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__ynPqQiYwOs]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__ynPqQm2GXn]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__ynPqQ6MmOa]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__ynPqQhUiKy]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_userNameLogin__ynPqQh7MIy]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__ynPqQnuYv7]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__eepWs, {
                    [sty.freeBoxloginPage_emailCode__eepWSwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__eepWsiYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__eepWSm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__eepWs6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__eepWShUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__eepWsh7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__eepWSnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vyo85, {
                      [sty.freeBoxloginPage_emailCode__vyo85WqwJl]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.freeBoxloginPage_mobileCode__vyo85M2GXn]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___25YoX,
                        {
                          [sty.textloginPage_emailCode___25YoXwqwJl]:
                            hasVariant($state, "loginPage", "emailCode"),
                          [sty.textloginPage_email___25YoXiYwOs]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode___25YoXm2GXn]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile___25YoX6MmOa]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name___25YoXhUiKy]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_userNameLogin___25YoXh7MIy]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup___25YoXnuYv7]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      {hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u0627\u06cc\u0645\u06cc\u0644"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : "Enter some text"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7R0Wq,
                        {
                          [sty.textloginPage_emailCode___7R0WQwqwJl]:
                            hasVariant($state, "loginPage", "emailCode"),
                          [sty.textloginPage_email___7R0WqiYwOs]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode___7R0WQm2GXn]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile___7R0Wq6MmOa]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name___7R0WQhUiKy]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_userNameLogin___7R0Wqh7MIy]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup___7R0WQnuYv7]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoginPage"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: "loginPage",
                                operation: 0,
                                value: "email"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoginPage"] != null &&
                          typeof $steps["updateLoginPage"] === "object" &&
                          typeof $steps["updateLoginPage"].then === "function"
                        ) {
                          $steps["updateLoginPage"] = await $steps[
                            "updateLoginPage"
                          ];
                        }
                      }}
                    >
                      {hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0627\u06cc\u0645\u06cc\u0644"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : "Enter some text"}
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__ddMJo,
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__ddMJowqwJl]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__ddMJoIYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__ddMJom2GXn]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__ddMJo6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__ddMJohUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_userNameLogin__ddMJoH7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__ddMJonuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput5"}
                      data-plasmic-override={overrides.textInput5}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput6,
                            {
                              [sty.antdInput6loginPage_emailCode]: hasVariant(
                                $state,
                                "loginPage",
                                "emailCode"
                              ),
                              [sty.antdInput6loginPage_mobileCode]: hasVariant(
                                $state,
                                "loginPage",
                                "mobileCode"
                              )
                            }
                          ),
                          disabled: hasVariant($state, "loginPage", "emailCode")
                            ? true
                            : hasVariant($state, "loginPage", "mobileCode")
                            ? true
                            : undefined,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput6", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          )
                            ? "liom@gmail.com"
                            : undefined,
                          size: "large",
                          type: hasVariant($state, "loginPage", "emailCode")
                            ? "email"
                            : hasVariant($state, "loginPage", "mobileCode")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput6",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput6.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput6"}
                            data-plasmic-override={overrides.antdInput6}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput5, {
                        [sty.textInput5loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput5loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput5loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput5loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput5loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput5loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput5loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___8Z1Qe,
                              {
                                [sty.freeBoxloginPage_emailCode___8Z1QEwqwJl]:
                                  hasVariant($state, "loginPage", "emailCode")
                              }
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lNsEe,
                              hasVariant($state, "loginPage", "userNameSingup")
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? "negative"
                                : hasVariant($state, "loginPage", "emailCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "name")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "email")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobile")
                                ? "negative"
                                : undefined,
                              {
                                [sty.textloginPage_emailCode__lNsEEwqwJl]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.textloginPage_email__lNsEeiYwOs]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.textloginPage_mobileCode__lNsEEm2GXn]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.textloginPage_mobile__lNsEe6MmOa]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.textloginPage_name__lNsEEhUiKy]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.textloginPage_userNameLogin__lNsEeh7MIy]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.textloginPage_userNameSingup__lNsEEnuYv7]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                          >
                            {hasVariant($state, "loginPage", "userNameSingup")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "emailCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "name")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobileCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "email")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobile")
                              ? "+98 "
                              : "Enter some text"}
                          </div>
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant($state, "loginPage", "userNameSingup")
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "emailCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "name")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "email")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobile")
                                ? Icon111Icon
                                : "div"
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg___1J9Qb,
                              {
                                [sty.svgloginPage_emailCode___1J9QbwqwJl]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.svgloginPage_email___1J9QbIYwOs]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.svgloginPage_mobileCode___1J9Qbm2GXn]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.svgloginPage_mobile___1J9Qb6MmOa]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.svgloginPage_name___1J9QbhUiKy]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.svgloginPage_userNameLogin___1J9QbH7MIy]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.svgloginPage_userNameSingup___1J9QbnuYv7]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                            role={"img"}
                          />
                        </React.Fragment>
                      }
                      isDisabled={
                        hasVariant($state, "loginPage", "emailCode")
                          ? true
                          : undefined
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput5",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "09123456789"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "emailCode")
                          ? undefined
                          : true
                      }
                      showStartIcon={
                        hasVariant($state, "loginPage", "emailCode")
                          ? true
                          : undefined
                      }
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "loginPage", "emailCode")
                              ? Icon109Icon
                              : SearchSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg__en0Jf,
                            {
                              [sty.svgloginPage_emailCode__en0JfwqwJl]:
                                hasVariant($state, "loginPage", "emailCode")
                            }
                          )}
                          role={"img"}
                        />
                      }
                      type={
                        hasVariant($state, "loginPage", "userNameSingup") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : undefined
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput5",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j8SB,
                      {
                        [sty.textloginPage_emailCode__j8SBwqwJl]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "emailCode")
                      ? "\u0644\u0637\u0641\u0627 \u0639\u0644\u0627\u0648\u0647 \u0628\u0631 \u0644\u06cc\u0633\u062a \u0627\u06cc\u0645\u06cc\u0644 \u0647\u0627\u060c \u067e\u0648\u0634\u0647 \u0647\u0631\u0632\u0646\u0627\u0645\u0647 (spam) \u0631\u0627 \u0647\u0645 \u0686\u06a9 \u06a9\u0646\u06cc\u062f."
                      : "Enter some text"}
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__bV0Cs,
                      {
                        [sty.embedHtmlloginPage_emailCode__bV0CswqwJl]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.embedHtmlloginPage_mobileCode__bV0Csm2GXn]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.embedHtmlloginPage_mobile__bV0Cs6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.embedHtmlloginPage_name__bV0CshUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.embedHtmlloginPage_userNameLogin__bV0CsH7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.embedHtmlloginPage_userNameSingup__bV0CsnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                    code={
                      hasVariant($state, "loginPage", "emailCode") &&
                      hasVariant(globalVariants, "screen", "mobile")
                        ? '<div style="display: flex; justify-content: space-between; align-items: center; width: 100%; box-sizing: border-box; direction: ltr;">\r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit1" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 0, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit2" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 1, \'digit3\')" onkeydown="moveToPrev(event, \'digit1\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit3" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 2, \'digit4\')" onkeydown="moveToPrev(event, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit4" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 3)" onkeydown="moveToPrev(event, \'digit3\')">\r\n</div>\r\n\r\n<script>\r\n    // \u062a\u0639\u0631\u06cc\u0641 \u0645\u062a\u063a\u06cc\u0631 \u0622\u0631\u0627\u06cc\u0647\u200c\u0627\u06cc \u062f\u0631 window\r\n    window.inputValues = ["", "", "", ""];\r\n\r\n    function handleInput(current, index, nextFieldId) {\r\n        // \u0630\u062e\u06cc\u0631\u0647 \u0645\u0642\u062f\u0627\u0631 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u062f\u0631 \u0622\u0631\u0627\u06cc\u0647\r\n        window.inputValues[index] = current.value;\r\n        \r\n        // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc \u062f\u0631 \u0635\u0648\u0631\u062a \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0645\u0642\u062f\u0627\u0631\r\n        if (current.value.length === 1 && nextFieldId) {\r\n            document.getElementById(nextFieldId).focus();\r\n        }\r\n    }\r\n\r\n    function moveToPrev(event, prevFieldId) {\r\n        if (event.key === "Backspace" && !event.target.value) {\r\n            document.getElementById(prevFieldId).focus();\r\n        }\r\n    }\r\n</script>\r\n'
                        : hasVariant($state, "loginPage", "emailCode")
                        ? '<div style="display: flex; justify-content: space-between; align-items: center; width: 100%; box-sizing: border-box; direction: ltr;">\r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit5" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 0, \'digit6\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit6" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 1, \'digit7\')" onkeydown="moveToPrev(event, \'digit5\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit7" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 2, \'digit8\')" onkeydown="moveToPrev(event, \'digit6\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit8" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 3)" onkeydown="moveToPrev(event, \'digit7\')">\r\n</div>\r\n\r\n<script>\r\n    // \u062a\u0639\u0631\u06cc\u0641 \u0645\u062a\u063a\u06cc\u0631 \u0622\u0631\u0627\u06cc\u0647\u200c\u0627\u06cc \u062f\u0631 window\r\n    window.inputValues = ["", "", "", ""];\r\n\r\n    function handleInput(current, index, nextFieldId) {\r\n        // \u0630\u062e\u06cc\u0631\u0647 \u0645\u0642\u062f\u0627\u0631 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u062f\u0631 \u0622\u0631\u0627\u06cc\u0647\r\n        window.inputValues[index] = current.value;\r\n        \r\n        // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc \u062f\u0631 \u0635\u0648\u0631\u062a \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0645\u0642\u062f\u0627\u0631\r\n        if (current.value.length === 1 && nextFieldId) {\r\n            document.getElementById(nextFieldId).focus();\r\n        }\r\n    }\r\n\r\n    function moveToPrev(event, prevFieldId) {\r\n        if (event.key === "Backspace" && !event.target.value) {\r\n            document.getElementById(prevFieldId).focus();\r\n        }\r\n    }\r\n</script>\r\n'
                        : hasVariant($state, "loginPage", "mobileCode") &&
                          hasVariant(globalVariants, "screen", "mobile")
                        ? '<div style="display: flex; justify-content: space-between; align-items: center; width: 100%; box-sizing: border-box; direction: ltr;">\r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit1" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 0, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit2" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 1, \'digit3\')" onkeydown="moveToPrev(event, \'digit1\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit3" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 2, \'digit4\')" onkeydown="moveToPrev(event, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit4" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 3)" onkeydown="moveToPrev(event, \'digit3\')">\r\n</div>\r\n\r\n<script>\r\n    // \u062a\u0639\u0631\u06cc\u0641 \u0645\u062a\u063a\u06cc\u0631 \u0622\u0631\u0627\u06cc\u0647\u200c\u0627\u06cc \u062f\u0631 window\r\n    window.inputValues = ["", "", "", ""];\r\n\r\n    function handleInput(current, index, nextFieldId) {\r\n        // \u0630\u062e\u06cc\u0631\u0647 \u0645\u0642\u062f\u0627\u0631 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u062f\u0631 \u0622\u0631\u0627\u06cc\u0647\r\n        window.inputValues[index] = current.value;\r\n        \r\n        // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc \u062f\u0631 \u0635\u0648\u0631\u062a \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0645\u0642\u062f\u0627\u0631\r\n        if (current.value.length === 1 && nextFieldId) {\r\n            document.getElementById(nextFieldId).focus();\r\n        }\r\n    }\r\n\r\n    function moveToPrev(event, prevFieldId) {\r\n        if (event.key === "Backspace" && !event.target.value) {\r\n            document.getElementById(prevFieldId).focus();\r\n        }\r\n    }\r\n</script>\r\n'
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? '<div style="display: flex; justify-content: space-between; align-items: center; width: 100%; box-sizing: border-box; direction: ltr;">\r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit1" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 0, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit2" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 1, \'digit3\')" onkeydown="moveToPrev(event, \'digit1\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit3" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 2, \'digit4\')" onkeydown="moveToPrev(event, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit4" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 3)" onkeydown="moveToPrev(event, \'digit3\')">\r\n</div>\r\n\r\n<script>\r\n    // \u062a\u0639\u0631\u06cc\u0641 \u0645\u062a\u063a\u06cc\u0631 \u0622\u0631\u0627\u06cc\u0647\u200c\u0627\u06cc \u062f\u0631 window\r\n    window.inputValues = ["", "", "", ""];\r\n\r\n    function handleInput(current, index, nextFieldId) {\r\n        // \u0630\u062e\u06cc\u0631\u0647 \u0645\u0642\u062f\u0627\u0631 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u062f\u0631 \u0622\u0631\u0627\u06cc\u0647\r\n        window.inputValues[index] = current.value;\r\n        \r\n        // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc \u062f\u0631 \u0635\u0648\u0631\u062a \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0645\u0642\u062f\u0627\u0631\r\n        if (current.value.length === 1 && nextFieldId) {\r\n            document.getElementById(nextFieldId).focus();\r\n        }\r\n    }\r\n\r\n    function moveToPrev(event, prevFieldId) {\r\n        if (event.key === "Backspace" && !event.target.value) {\r\n            document.getElementById(prevFieldId).focus();\r\n        }\r\n    }\r\n</script>\r\n'
                        : hasVariant(globalVariants, "screen", "mobile")
                        ? '<div style="display: flex; justify-content: space-between; align-items: center; width: 100%; box-sizing: border-box;">\r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit1" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="moveToNext(this, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit2" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="moveToNext(this, \'digit3\')" onkeydown="moveToPrev(event, \'digit1\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit3" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="moveToNext(this, \'digit4\')" onkeydown="moveToPrev(event, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit4" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           onkeydown="moveToPrev(event, \'digit3\')">\r\n</div>\r\n\r\n<script>\r\n    function moveToNext(current, nextFieldId) {\r\n        if (current.value.length === 1) {\r\n            document.getElementById(nextFieldId).focus();\r\n        }\r\n    }\r\n\r\n    function moveToPrev(event, prevFieldId) {\r\n        if (event.key === "Backspace" && !event.target.value) {\r\n            document.getElementById(prevFieldId).focus();\r\n        }\r\n    }\r\n</script>\r\n'
                        : '<div style="display: flex; justify-content: space-between; align-items: center; width: 100%; box-sizing: border-box; direction: ltr;">\r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit5" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 0, \'digit6\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit6" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 1, \'digit7\')" onkeydown="moveToPrev(event, \'digit5\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit7" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 2, \'digit8\')" onkeydown="moveToPrev(event, \'digit6\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit8" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 3)" onkeydown="moveToPrev(event, \'digit7\')">\r\n</div>\r\n\r\n<script>\r\n    // \u062a\u0639\u0631\u06cc\u0641 \u0645\u062a\u063a\u06cc\u0631 \u0622\u0631\u0627\u06cc\u0647\u200c\u0627\u06cc \u062f\u0631 window\r\n    window.inputValues = ["", "", "", ""];\r\n\r\n    function handleInput(current, index, nextFieldId) {\r\n        // \u0630\u062e\u06cc\u0631\u0647 \u0645\u0642\u062f\u0627\u0631 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u062f\u0631 \u0622\u0631\u0627\u06cc\u0647\r\n        window.inputValues[index] = current.value;\r\n        \r\n        // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc \u062f\u0631 \u0635\u0648\u0631\u062a \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0645\u0642\u062f\u0627\u0631\r\n        if (current.value.length === 1 && nextFieldId) {\r\n            document.getElementById(nextFieldId).focus();\r\n        }\r\n    }\r\n\r\n    function moveToPrev(event, prevFieldId) {\r\n        if (event.key === "Backspace" && !event.target.value) {\r\n            document.getElementById(prevFieldId).focus();\r\n        }\r\n    }\r\n</script>\r\n'
                    }
                  />

                  {(
                    hasVariant($state, "loginPage", "emailCode")
                      ? (() => {
                          try {
                            return $state.time != 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? (() => {
                          try {
                            return $state.time != 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__jKhJ2,
                        {
                          [sty.freeBoxloginPage_emailCode__jKhJ2WqwJl]:
                            hasVariant($state, "loginPage", "emailCode"),
                          [sty.freeBoxloginPage_mobileCode__jKhJ2M2GXn]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.freeBoxloginPage_mobile__jKhJ26MmOa]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.freeBoxloginPage_userNameLogin__jKhJ2H7MIy]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.freeBoxloginPage_userNameSingup__jKhJ2NuYv7]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yfiev,
                          {
                            [sty.textloginPage_emailCode__yfieVwqwJl]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_mobileCode__yfieVm2GXn]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "emailCode") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.time;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "0";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : hasVariant($state, "loginPage", "mobileCode") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.time;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "0";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          "Enter some text"
                        )}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nXf,
                          {
                            [sty.textloginPage_emailCode__nXfWqwJl]: hasVariant(
                              $state,
                              "loginPage",
                              "emailCode"
                            ),
                            [sty.textloginPage_mobileCode__nXfM2GXn]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "emailCode")
                          ? "\u062a\u0627 \u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u06a9\u062f \u0645\u0627\u0646\u062f\u0647 \u0627\u0633\u062a"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "\u062a\u0627 \u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u06a9\u062f \u0645\u0627\u0646\u062f\u0647 \u0627\u0633\u062a"
                          : "Enter some text"}
                      </div>
                      <Timer
                        className={classNames(
                          "__wab_instance",
                          sty.timer__k1TTg,
                          {
                            [sty.timerloginPage_emailCode__k1TTGwqwJl]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.timerloginPage_mobileCode__k1TTGm2GXn]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                        intervalSeconds={
                          hasVariant($state, "loginPage", "emailCode")
                            ? 1
                            : hasVariant($state, "loginPage", "mobileCode")
                            ? 1
                            : undefined
                        }
                        isRunning={true}
                        onTick={async () => {
                          const $steps = {};

                          $steps["updateTime"] =
                            $state.time > 0
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["time"]
                                    },
                                    operation: 0,
                                    value: $state.time - 1
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateTime"] != null &&
                            typeof $steps["updateTime"] === "object" &&
                            typeof $steps["updateTime"].then === "function"
                          ) {
                            $steps["updateTime"] = await $steps["updateTime"];
                          }
                        }}
                        runWhileEditing={false}
                      />
                    </Stack__>
                  ) : null}
                  {(
                    hasVariant($state, "loginPage", "emailCode")
                      ? (() => {
                          try {
                            return $state.time == 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? (() => {
                          try {
                            return $state.time == 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__v7T1L,
                        {
                          [sty.freeBoxloginPage_emailCode__v7T1LwqwJl]:
                            hasVariant($state, "loginPage", "emailCode"),
                          [sty.freeBoxloginPage_mobileCode__v7T1Lm2GXn]:
                            hasVariant($state, "loginPage", "mobileCode")
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xgTq,
                          {
                            [sty.textloginPage_emailCode__xgTqWqwJl]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_mobileCode__xgTqM2GXn]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "emailCode")
                          ? "23"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "23"
                          : "Enter some text"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__abwir,
                          {
                            [sty.textloginPage_emailCode__abwirwqwJl]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_mobileCode__abwirm2GXn]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateTime"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["time"]
                                  },
                                  operation: 0,
                                  value: 30
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTime"] != null &&
                            typeof $steps["updateTime"] === "object" &&
                            typeof $steps["updateTime"].then === "function"
                          ) {
                            $steps["updateTime"] = await $steps["updateTime"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://api.liom.app/auth/signup/send-code-v2",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          type: $state.type,
                                          country: "98",
                                          smsType: "sms",
                                          data: $state.email
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["invokeGlobalAction2"] =
                            $steps.invokeGlobalAction?.data?.success == true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      undefined,
                                      "\u06a9\u062f \u0645\u062c\u062f\u062f\u0627\u064b \u0628\u0631\u0627\u06cc \u0634\u0645\u0627 \u0627\u0631\u0633\u0627\u0644 \u0634\u062f.",
                                      "top-left"
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction2"] != null &&
                            typeof $steps["invokeGlobalAction2"] === "object" &&
                            typeof $steps["invokeGlobalAction2"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction2"] = await $steps[
                              "invokeGlobalAction2"
                            ];
                          }
                        }}
                      >
                        {hasVariant($state, "loginPage", "emailCode")
                          ? "\u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u062c\u062f\u062f \u06a9\u062f"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "\u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u062c\u062f\u062f \u06a9\u062f"
                          : "Enter some text"}
                      </div>
                    </Stack__>
                  ) : null}
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox__tCt3Y, {
                    [sty.freeBoxloginPage_emailCode__tCt3YwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__tCt3YiYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__tCt3Ym2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__tCt3Y6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__tCt3YhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__tCt3Yh7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__tCt3YnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <Button
                    data-plasmic-name={"button7"}
                    data-plasmic-override={overrides.button7}
                    className={classNames("__wab_instance", sty.button7, {
                      [sty.button7loginPage_emailCode]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.button7loginPage_email]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.button7loginPage_mobileCode]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.button7loginPage_mobile]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.button7loginPage_name]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.button7loginPage_userNameLogin]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.button7loginPage_userNameSingup]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    color={generateStateValueProp($state, ["button7", "color"])}
                    endIcon={
                      <Icon115Icon
                        className={classNames(projectcss.all, sty.svg__nnd9U, {
                          [sty.svgloginPage_emailCode__nnd9UwqwJl]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.svgloginPage_mobileCode__nnd9Um2GXn]: hasVariant(
                            $state,
                            "loginPage",
                            "mobileCode"
                          )
                        })}
                        role={"img"}
                      />
                    }
                    isDisabled={
                      hasVariant($state, "loginPage", "emailCode")
                        ? (() => {
                            try {
                              return $state.loadedbtn;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? (() => {
                            try {
                              return $state.loadedbtn;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                    loading={
                      hasVariant($state, "loginPage", "emailCode")
                        ? (() => {
                            try {
                              return $state.loadedbtn;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? (() => {
                            try {
                              return $state.loadedbtn;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadedbtn"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn"] != null &&
                        typeof $steps["updateLoadedbtn"] === "object" &&
                        typeof $steps["updateLoadedbtn"].then === "function"
                      ) {
                        $steps["updateLoadedbtn"] = await $steps[
                          "updateLoadedbtn"
                        ];
                      }

                      $steps["updateCods"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["cods"]
                              },
                              operation: 0,
                              value: parseInt(window.inputValues.join(""))
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCods"] != null &&
                        typeof $steps["updateCods"] === "object" &&
                        typeof $steps["updateCods"].then === "function"
                      ) {
                        $steps["updateCods"] = await $steps["updateCods"];
                      }

                      $steps["invokeGlobalAction"] =
                        $state.typeLogin == "signup"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/auth/signup/validate",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        code: $state.cods,
                                        data: $state.email
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["invokeGlobalAction3"] =
                        $state.typeLogin == "login"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/auth/login",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        code: $state.cods,
                                        type: $state.type,
                                        name: "",
                                        data: $state.number || $state.email,
                                        username: "",
                                        target: "calendar",
                                        sex: $state.gender || "",
                                        token: $state.token || "",
                                        version: "",
                                        lang: "fa",
                                        country: "98",
                                        anotherLang: "fa",
                                        device: (() => {
                                          const userAgent =
                                            window.navigator.userAgent;
                                          if (
                                            /Mobi|Android|iPhone|iPad|iPod/i.test(
                                              userAgent
                                            )
                                          ) {
                                            return "Mobile";
                                          } else if (
                                            /Tablet|iPad/i.test(userAgent)
                                          ) {
                                            return "Tablet";
                                          } else {
                                            return "Desktop";
                                          }
                                        })(),
                                        uniqueId: $$.uuid.v4(),
                                        fcm: "  ",
                                        os: (() => {
                                          const userAgent =
                                            window.navigator.userAgent;
                                          const platform =
                                            window.navigator.userAgent;
                                          if (/Windows/i.test(platform))
                                            return "Windows";
                                          if (/Mac/i.test(platform))
                                            return "macOS";
                                          if (/Linux/i.test(platform))
                                            return "Linux";
                                          if (/Android/i.test(userAgent))
                                            return "Android";
                                          if (
                                            /iPhone|iPad|iPod/i.test(userAgent)
                                          )
                                            return "iOS";
                                          return "Unknown OS";
                                        })(),
                                        osVersion: (() => {
                                          const userAgent =
                                            window.navigator.userAgent;
                                          if (/Windows NT 10.0/.test(userAgent))
                                            return "Windows 10";
                                          if (/Windows NT 6.3/.test(userAgent))
                                            return "Windows 8.1";
                                          if (/Windows NT 6.2/.test(userAgent))
                                            return "Windows 8";
                                          if (/Windows NT 6.1/.test(userAgent))
                                            return "Windows 7";
                                          if (
                                            /Mac OS X (\d+[\._]\d+)/.test(
                                              userAgent
                                            )
                                          )
                                            return `macOS ${RegExp.$1.replace(
                                              "_",
                                              "."
                                            )}`;
                                          if (
                                            /Android (\d+(\.\d+)?)/.test(
                                              userAgent
                                            )
                                          )
                                            return `Android ${RegExp.$1}`;
                                          if (
                                            /CPU (iPhone )?OS (\d+_\d+)/.test(
                                              userAgent
                                            )
                                          )
                                            return `iOS ${RegExp.$2.replace(
                                              "_",
                                              "."
                                            )}`;
                                          return "Unknown Version";
                                        })(),
                                        password: "",
                                        postLang: "fa",
                                        refCode: $state.antdInput3.value || "",
                                        isCountryPending: false,
                                        device_type: window.navigator.platform,
                                        additionalData: {
                                          ip: "132465",
                                          name: "test1"
                                        },
                                        city: null,
                                        state: null,
                                        birthYear: null,
                                        religious: 0
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["updateToken"] =
                        $steps.invokeGlobalAction?.data?.success == true &&
                        $state.typeLogin == "signup"
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["token"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction.data.result
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateToken"] != null &&
                        typeof $steps["updateToken"] === "object" &&
                        typeof $steps["updateToken"].then === "function"
                      ) {
                        $steps["updateToken"] = await $steps["updateToken"];
                      }

                      $steps["updateLoginPage"] =
                        $steps.invokeGlobalAction?.data?.success == true &&
                        $state.typeLogin == "signup"
                          ? (() => {
                              const actionArgs = {
                                vgroup: "loginPage",
                                operation: 0,
                                value: "name"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateLoginPage"] != null &&
                        typeof $steps["updateLoginPage"] === "object" &&
                        typeof $steps["updateLoginPage"].then === "function"
                      ) {
                        $steps["updateLoginPage"] = await $steps[
                          "updateLoginPage"
                        ];
                      }

                      $steps["updateLoginData"] =
                        $steps.invokeGlobalAction3?.data?.success == true &&
                        $state.typeLogin == "login"
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loginData"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction3.data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateLoginData"] != null &&
                        typeof $steps["updateLoginData"] === "object" &&
                        typeof $steps["updateLoginData"].then === "function"
                      ) {
                        $steps["updateLoginData"] = await $steps[
                          "updateLoginData"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction?.data?.success == false ||
                        $steps.invokeGlobalAction3?.data?.success == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u06a9\u062f \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0635\u062d\u06cc\u062d \u0646\u06cc\u0633\u062a.",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["goToPage"] =
                        $steps.invokeGlobalAction3?.data?.success == true &&
                        $state.typeLogin == "login"
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return (
                                      $ctx.query.redirect_url +
                                      "?token=" +
                                      $$.uuid.v4().slice(0, 6) +
                                      $state.loginData.result.token +
                                      $$.uuid.v4().slice(10, 13) +
                                      "&userId=" +
                                      $$.uuid.v4().slice(0, 4) +
                                      $state.loginData.result.userId +
                                      $$.uuid.v4().slice(0, 4)
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["updateLoadedbtn2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn2"] != null &&
                        typeof $steps["updateLoadedbtn2"] === "object" &&
                        typeof $steps["updateLoadedbtn2"].then === "function"
                      ) {
                        $steps["updateLoadedbtn2"] = await $steps[
                          "updateLoadedbtn2"
                        ];
                      }
                    }}
                    onColorChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["button7", "color"])(
                        eventArgs[0]
                      );
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fDbQh,
                        {
                          [sty.textloginPage_emailCode__fDbQhwqwJl]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.textloginPage_email__fDbQhIYwOs]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode__fDbQhm2GXn]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile__fDbQh6MmOa]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name__fDbQhhUiKy]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_userNameLogin__fDbQhH7MIy]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup__fDbQhnuYv7]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      {hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : "Button"}
                    </div>
                  </Button>
                </div>
              </Stack__>
            </Reveal>
          ) : null}
          {(
            hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__iNn9, {
                [sty.revealloginPage_emailCode__iNn9WqwJl]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.revealloginPage_email__iNn9IYwOs]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.revealloginPage_mobileCode__iNn9M2GXn]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.revealloginPage_mobile__iNn96MmOa]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.revealloginPage_name__iNn9HUiKy]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.revealloginPage_userNameLogin__iNn9H7MIy]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.revealloginPage_userNameSingup__iNn9NuYv7]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xWvNp, {
                  [sty.freeBoxloginPage_emailCode__xWvNPwqwJl]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email__xWvNpiYwOs]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode__xWvNPm2GXn]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile__xWvNp6MmOa]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__xWvNPhUiKy]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_userNameLogin__xWvNph7MIy]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup__xWvNPnuYv7]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__v8Tou, {
                    [sty.freeBoxloginPage_emailCode__v8TouwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__v8TouIYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__v8Toum2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__v8Tou6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__v8TouhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__v8TouH7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__v8TounuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: []
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__ia5Kc, {
                      [sty.svgloginPage_emailCode__ia5KcwqwJl]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__ia5KcIYwOs]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__ia5Kcm2GXn]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__ia5Kc6MmOa]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__ia5KchUiKy]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_userNameLogin__ia5KcH7MIy]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__ia5KcnuYv7]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ljycN, {
                    [sty.freeBoxloginPage_emailCode__ljycNwqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__ljycNiYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__ljycNm2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__ljycN6MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__ljycNhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__ljycNh7MIy]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__ljycNnuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cHEeF,
                      {
                        [sty.textloginPage_emailCode__cHEeFwqwJl]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__cHEeFiYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__cHEeFm2GXn]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__cHEeF6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__cHEeFhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_userNameLogin__cHEeFh7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__cHEeFnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0627\u06cc\u0645\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__sOEh,
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__sOEHwqwJl]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.freeBoxloginPage_email__sOEhiYwOs]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__sOEHm2GXn]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__sOEh6MmOa]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__sOEHhUiKy]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_userNameLogin__sOEhh7MIy]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__sOEHnuYv7]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput2"}
                      data-plasmic-override={overrides.textInput2}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput5,
                            {
                              [sty.antdInput5loginPage_email]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.antdInput5loginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              ),
                              [sty.antdInput5loginPage_userNameLogin]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.antdInput5loginPage_userNameSingup]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput5", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: hasVariant($state, "loginPage", "email")
                            ? "liom@gmail.com"
                            : undefined,
                          size: "large",
                          type: hasVariant($state, "loginPage", "email")
                            ? "email"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput5",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput5.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput5"}
                            data-plasmic-override={overrides.antdInput5}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput2, {
                        [sty.textInput2loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput2loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput2loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput2loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput2loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput2loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput2loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5I2Tq,
                              {
                                [sty.freeBoxloginPage_email___5I2TqIYwOs]:
                                  hasVariant($state, "loginPage", "email")
                              }
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bJLfG,
                              hasVariant($state, "loginPage", "userNameSingup")
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? "negative"
                                : hasVariant($state, "loginPage", "emailCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "name")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "email")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobile")
                                ? "negative"
                                : undefined,
                              {
                                [sty.textloginPage_emailCode__bJLfGwqwJl]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.textloginPage_email__bJLfGiYwOs]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.textloginPage_mobileCode__bJLfGm2GXn]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.textloginPage_mobile__bJLfG6MmOa]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.textloginPage_name__bJLfGhUiKy]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.textloginPage_userNameLogin__bJLfGh7MIy]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.textloginPage_userNameSingup__bJLfGnuYv7]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                          >
                            {hasVariant($state, "loginPage", "userNameSingup")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "emailCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "name")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobileCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "email")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobile")
                              ? "+98 "
                              : "Enter some text"}
                          </div>
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant($state, "loginPage", "userNameSingup")
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "emailCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "name")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "email")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobile")
                                ? Icon111Icon
                                : "div"
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__rt0Yq,
                              {
                                [sty.svgloginPage_emailCode__rt0YqwqwJl]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.svgloginPage_email__rt0YqIYwOs]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.svgloginPage_mobileCode__rt0Yqm2GXn]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.svgloginPage_mobile__rt0Yq6MmOa]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.svgloginPage_name__rt0YqhUiKy]: hasVariant(
                                  $state,
                                  "loginPage",
                                  "name"
                                ),
                                [sty.svgloginPage_userNameLogin__rt0YqH7MIy]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.svgloginPage_userNameSingup__rt0YqnuYv7]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                            role={"img"}
                          />
                        </React.Fragment>
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput2",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "\u0627\u06cc\u0645\u06cc\u0644"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "09123456789"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "email")
                          ? undefined
                          : true
                      }
                      showStartIcon={
                        hasVariant($state, "loginPage", "email")
                          ? true
                          : undefined
                      }
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "loginPage", "email")
                              ? Icon109Icon
                              : SearchSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg__j4B4H,
                            {
                              [sty.svgloginPage_email__j4B4HiYwOs]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              )
                            }
                          )}
                          role={"img"}
                        />
                      }
                      type={
                        hasVariant($state, "loginPage", "userNameSingup") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "email"
                          : hasVariant($state, "loginPage", "email")
                          ? "email"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : undefined
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput2",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox__wh17, {
                    [sty.freeBoxloginPage_emailCode__wh17WqwJl]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__wh17IYwOs]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__wh17M2GXn]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__wh176MmOa]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__wh17HUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__wh17H7MIy]: hasVariant(
                      $state,
                      "loginPage",
                      "userNameLogin"
                    ),
                    [sty.freeBoxloginPage_userNameSingup__wh17NuYv7]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <Button
                    data-plasmic-name={"button5"}
                    data-plasmic-override={overrides.button5}
                    className={classNames("__wab_instance", sty.button5, {
                      [sty.button5loginPage_emailCode]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.button5loginPage_email]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.button5loginPage_mobileCode]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.button5loginPage_mobile]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.button5loginPage_name]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.button5loginPage_userNameLogin]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.button5loginPage_userNameSingup]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    color={generateStateValueProp($state, ["button5", "color"])}
                    endIcon={
                      <Icon115Icon
                        className={classNames(projectcss.all, sty.svg___4Mx1E)}
                        role={"img"}
                      />
                    }
                    isDisabled={
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? (() => {
                            try {
                              return (
                                !(
                                  $state.antdInput.value.length === 10 ||
                                  $state.antdInput.value.length === 11
                                ) || $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? (() => {
                            try {
                              return (
                                !(
                                  $state.antdInput.value.length === 10 ||
                                  $state.antdInput.value.length === 11
                                ) || $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "email")
                        ? (() => {
                            try {
                              return (
                                $state.loadedbtn ||
                                (() => {
                                  const emailRegex =
                                    /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                                  return !emailRegex.test(
                                    $state.antdInput5.value
                                  );
                                })()
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "mobile")
                        ? (() => {
                            try {
                              return (
                                !(
                                  $state.antdInput.value.length === 10 ||
                                  $state.antdInput.value.length === 11
                                ) || $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                    loading={
                      hasVariant($state, "loginPage", "email")
                        ? (() => {
                            try {
                              return $state.loadedbtn;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.loadedbtn;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadedbtn"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn"] != null &&
                        typeof $steps["updateLoadedbtn"] === "object" &&
                        typeof $steps["updateLoadedbtn"].then === "function"
                      ) {
                        $steps["updateLoadedbtn"] = await $steps[
                          "updateLoadedbtn"
                        ];
                      }

                      $steps["updateEmail"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["email"]
                              },
                              operation: 0,
                              value: $state.antdInput5.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEmail"] != null &&
                        typeof $steps["updateEmail"] === "object" &&
                        typeof $steps["updateEmail"].then === "function"
                      ) {
                        $steps["updateEmail"] = await $steps["updateEmail"];
                      }

                      $steps["invokeGlobalAction2"] = (() => {
                        const emailRegex =
                          /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
                        return !emailRegex.test($state.email);
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0627\u06cc\u0645\u06cc\u0644 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0635\u062d\u06cc\u062d \u0646\u06cc\u0633\u062a.",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction"] = (() => {
                        const emailRegex =
                          /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
                        return emailRegex.test($state.email);
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.liom.app/auth/signup/send-code-v2",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      type: "email",
                                      country: "98",
                                      smsType: "sms",
                                      data: $state.email
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateTypeLogin"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["typeLogin"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction.data.result.type
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTypeLogin"] != null &&
                        typeof $steps["updateTypeLogin"] === "object" &&
                        typeof $steps["updateTypeLogin"].then === "function"
                      ) {
                        $steps["updateTypeLogin"] = await $steps[
                          "updateTypeLogin"
                        ];
                      }

                      $steps["updateLoginPage"] =
                        $steps.invokeGlobalAction?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                vgroup: "loginPage",
                                operation: 0,
                                value: "emailCode"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateLoginPage"] != null &&
                        typeof $steps["updateLoginPage"] === "object" &&
                        typeof $steps["updateLoginPage"].then === "function"
                      ) {
                        $steps["updateLoginPage"] = await $steps[
                          "updateLoginPage"
                        ];
                      }

                      $steps["updateTextInputValue2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTextInputValue2"] != null &&
                        typeof $steps["updateTextInputValue2"] === "object" &&
                        typeof $steps["updateTextInputValue2"].then ===
                          "function"
                      ) {
                        $steps["updateTextInputValue2"] = await $steps[
                          "updateTextInputValue2"
                        ];
                      }
                    }}
                    onColorChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["button5", "color"])(
                        eventArgs[0]
                      );
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dqVzE,
                        {
                          [sty.textloginPage_emailCode__dqVzEwqwJl]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.textloginPage_email__dqVzEiYwOs]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode__dqVzEm2GXn]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile__dqVzE6MmOa]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name__dqVzEhUiKy]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_userNameLogin__dqVzEh7MIy]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup__dqVzEnuYv7]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      {hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : "Button"}
                    </div>
                  </Button>
                </div>
              </Stack__>
            </Reveal>
          ) : null}
          <AntdModal
            data-plasmic-name={"rules"}
            data-plasmic-override={overrides.rules}
            className={classNames("__wab_instance", sty.rules, {
              [sty.rulesloginPage_name]: hasVariant($state, "loginPage", "name")
            })}
            closeIcon={
              <SearchSvgIcon
                className={classNames(projectcss.all, sty.svg__uPqGf, {
                  [sty.svgloginPage_name__uPqGfhUiKy]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  )
                })}
                role={"img"}
              />
            }
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={
              hasVariant($state, "loginPage", "name") ? true : undefined
            }
            maskClosable={
              hasVariant($state, "loginPage", "name") ? false : undefined
            }
            modalContentClassName={classNames({
              [sty["pcls__PIcEQBAC1VH"]]: hasVariant(
                $state,
                "loginPage",
                "name"
              )
            })}
            modalScopeClassName={sty["rules__modal"]}
            onOpenChange={generateStateOnChangeProp($state, ["rules", "open"])}
            open={generateStateValueProp($state, ["rules", "open"])}
            title={null}
            trigger={null}
            width={
              hasVariant($state, "loginPage", "name") ? "100vw" : undefined
            }
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__jsaqc, {
                [sty.freeBoxloginPage_name__jsaqChUiKy]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qilRr,
                  {
                    [sty.textloginPage_name__qilRrhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    )
                  }
                )}
              >
                {hasVariant($state, "loginPage", "name") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return " محدودیت سنی\nلیوم محدودیت سنی ندارد\n\n- انتشار محتوایی که به طور مستقیم یا غیرمستقیم توهین به اسلام تلقی بشود ممنوع است.\n -  انتشار پستهای فانتزی مثبت هیجده ممنوع است.\n- انتشار محتوای سیاسی که همراه با توهین و نفرت پراکنی باشد ممنوع است.\n\n - پست مثبت هیجده درصورتی مجاز به انتشار می باشد که به اموزش بپردازد و  یا نیاز ب کمک داشته باشد که در هر دو صورت باید حتما  تگ مثبت هیجده توسط صاحب پست فعال شود . ( توجه شود که در هیچ صورتی پست های مثبت هیجده به بخش داغترین ورود نخواهند پیدا کرد)\n\n-  فعال نکردن تگ مثبت هیجده تخلف است و در صورتیکه چندین بار تکرار شود و رعایت نکنید،  پست شما در ابتدا مستقیما حذف میشود و در ادامه منجر به بلاک اکانت شما خواهد شد . \n\n - اگر نمیخواهید محتواهای مثبت هیجده را مشاهده کنید از بخش تنظیمات آن را برای خود فعال کنید .\n\nانجام موارد زیر ممنوع می باشد \n• تبلیغ انواع مواد مخدر ممنوع است.\n• محتوایی که جزئیات آموزشی در مورد نحوه انجام یک فعالیت خطرناک(خودکشی،قاچاق،ترور،خودآزاری) را توضیح یا ارائه می دهد.\n• بازی‌های خطرناک که در آن از فرد کارهایی که ناهنجار است و عرف نیست طلب میشود که ممکن است منجر به آسیب بدنی یا آسیب مالی شوند.\n• ترویج خودکشی و خودآزاری در لیوم ممنوع است.\n• محتوایی که دستورالعمل‌هایی برای خودکشی یا نحوه خودآزاری ارائه می‌دهد.\n• بازی های خودکشی یا آسیب رساندن به خود،چالش ها، پیمان ها یا کلاهبرداری ها.\n• محتوایی که حاوی زبان صریح جنسی برای ارضای جنسی است.\n \n\n• محتوایی که آزار و اذیت هماهنگ را تشویق می کند.\n• محتوایی که قربانیان تراژدی های خشونت آمیز را تحقیر می کند.\n• محتوایی که آسیب یا ارعاب عمدی را به تصویر می‌کشد، مانند تعقیب سایبری.\n• محتوایی که آرزوی مرگ، بیماری جدی یا آسیب جدی دیگر را برای فردی دارد.\n• محتوایی که تهدید به افشای داده‌های شخصی یا اطلاعات شناسایی شخصی می‌کند.\n• محتوایی که خشونت، طرد، جداسازی، یا تبعیض علیه فرد یا گروه خاصی  را ترویج یا توجیه می‌کند.\n• محتوای سیاسی که باعث ایجاد تنش بین دو گروه شود.\n• استفاده از خدمات لیوم  برای اهداف غیرقانونی و یا پیشبرد اهداف غیرقانونی.\n\n\n - توجه شود که تمامی قوانین برای بخش بحث آزاد نیز صادق می باشند . \n\n\n\nدر هنگام مواجه با هر یک از موارد بالا .میتوانید با گزارش دادن محتوا یا شخص  ما را مطلع سازید تا  با آن محتوا/شخص برخورد کنیم\n\nتوهین و نظر  شخصی : \n• محتوایی که به فرد دیگری توهین می کند یا فردی را بر اساس ویژگی هایی مانند عقل، ظاهر، ویژگی های شخصیتی یا بهداشت تحقیر می کند در لیوم ممنوع است .\nتوجه شود که “نظر شخصی “ با توهین متفاوت است . اگر نظر خود را طوری بیان کنید که محوریت بحث خارج نشود .موردی ندارد. \n مثلا : \n*هر کس که کیدراما دوست نداره بی سلیقه س ( موردی ندارد و نظر شخصی فرد تلقی میشود و اگر اذیتتان میکند فرد را پنهان کنید)  \n*هر کس که کیدراما دوست نداره یک مغز زنگ زده داره و بی سلیقه اس و...  دهنش.( توهین است و تخلف صورت گرفته است)\n\n\nبرخی از پر تکرار ترین کلماتی که باعث میشوند نظر شخصی  شما با توهین اشتباه گرفته شود در زیر اورده شده است:  الفاظ رکیک،  بیشعور،  نفهم،  نادان،  مغز زنگ زده،  ارزشی،  عرزشی،  انتی عرزشی،  امل،  الفاظی که براساس دین فرد مورد نظر به اون نسبت داده میشود،  عقب مونده،  نسبت دادن صفات به قومیتی خاص و...\n\nپشتیبانی\nتیم پشتیبانی پاسخگو ابهامات و مشکلات گزارش شده  در اسرع وقت می باشند .\n\nنقض قوانین\nنقض قوانین :\nشما میتونید در صورت مشاهده نقض قوانین از طریق دکمه ریپورت که در هر بخش از اپلیکیشن برای پست ها ٬ کامنت ها٬ پروفایل کاربران طراحی شده است ما را از آن مطلع کنید تا به بصورت زیر رفتار کنیم .\n\nدر صورت نقض هر یک از قوانین ٬ محتوا شما تا ۵ بار اول حذف خواهد شد. سپس حساب شما به طور موقت مسدود می شود و در آخرین مرحله حساب شما به طور کامل مسدود میشود \n\nمحتوای تولید شده\nمسئولیت تمامی محتوای تولید شده بر عهده شخصی است که مطلب را منتشر کرده است و لیوم هیچ مسئولیتی در این خصوص ندارد";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : (
                  "Modal content"
                )}
              </div>
            </div>
            {(hasVariant($state, "loginPage", "name") ? true : false) ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"top"}
                data-plasmic-override={overrides.top}
                hasGap={true}
                className={classNames(projectcss.all, sty.top, {
                  [sty.toploginPage_name]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  )
                })}
              >
                <Icon22Icon
                  className={classNames(projectcss.all, sty.svg__zkt2Y, {
                    [sty.svgloginPage_name__zkt2YhUiKy]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oz73D,
                    {
                      [sty.textloginPage_name__oz73DhUiKy]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "loginPage", "name")
                    ? "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a"
                    : "Dr. Bellamy Nich\u2026"}
                </div>
              </Stack__>
            ) : null}
          </AntdModal>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest, {
              [sty.apiRequestloginPage_name]: hasVariant(
                $state,
                "loginPage",
                "name"
              )
            })}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={generateStateOnChangeProp($state, ["apiRequest", "error"])}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
              (async loading => {
                const $steps = {};

                $steps["updateLoginPage"] =
                  $ctx.query.token != "" &&
                  $ctx.query.token != null &&
                  $ctx.query.isLogin == "false"
                    ? (() => {
                        const actionArgs = {
                          vgroup: "loginPage",
                          operation: 0,
                          value: "name"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateLoginPage"] != null &&
                  typeof $steps["updateLoginPage"] === "object" &&
                  typeof $steps["updateLoginPage"].then === "function"
                ) {
                  $steps["updateLoginPage"] = await $steps["updateLoginPage"];
                }

                $steps["goToPage"] =
                  $ctx.query.isLogin == "true"
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return (
                                $ctx.query.redirect_url +
                                "?token=" +
                                $$.uuid.v4().slice(0, 6) +
                                $ctx.query.token +
                                $$.uuid.v4().slice(10, 13) +
                                "&userId=" +
                                $$.uuid.v4().slice(0, 4) +
                                $ctx.query.userId +
                                $$.uuid.v4().slice(0, 4)
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }

                $steps["updateType"] =
                  $ctx.query.isLogin == "false"
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["type"]
                          },
                          operation: 0,
                          value: "google"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateType"] != null &&
                  typeof $steps["updateType"] === "object" &&
                  typeof $steps["updateType"].then === "function"
                ) {
                  $steps["updateType"] = await $steps["updateType"];
                }
              }).apply(null, eventArgs);
            }}
            onSuccess={generateStateOnChangeProp($state, [
              "apiRequest",
              "data"
            ])}
            url={"/"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "textInput",
    "antdInput",
    "button",
    "textInput7",
    "antdInput7",
    "textInput8",
    "antdInput8",
    "button2",
    "textInput9",
    "antdInput9",
    "textInput10",
    "antdInput10",
    "textInput11",
    "antdInput11",
    "button6",
    "textInput4",
    "antdInput2",
    "radioGrop",
    "textInput6",
    "antdInput3",
    "checkbox",
    "button4",
    "mobileCode",
    "textInput3",
    "antdInput4",
    "button3",
    "emailCode",
    "textInput5",
    "antdInput6",
    "button7",
    "textInput2",
    "antdInput5",
    "button5",
    "rules",
    "top",
    "apiRequest"
  ],
  img: ["img"],
  textInput: ["textInput", "antdInput"],
  antdInput: ["antdInput"],
  button: ["button"],
  textInput7: ["textInput7", "antdInput7"],
  antdInput7: ["antdInput7"],
  textInput8: ["textInput8", "antdInput8"],
  antdInput8: ["antdInput8"],
  button2: ["button2"],
  textInput9: ["textInput9", "antdInput9"],
  antdInput9: ["antdInput9"],
  textInput10: ["textInput10", "antdInput10"],
  antdInput10: ["antdInput10"],
  textInput11: ["textInput11", "antdInput11"],
  antdInput11: ["antdInput11"],
  button6: ["button6"],
  textInput4: ["textInput4", "antdInput2"],
  antdInput2: ["antdInput2"],
  radioGrop: ["radioGrop"],
  textInput6: ["textInput6", "antdInput3"],
  antdInput3: ["antdInput3"],
  checkbox: ["checkbox"],
  button4: ["button4"],
  mobileCode: ["mobileCode", "textInput3", "antdInput4", "button3"],
  textInput3: ["textInput3", "antdInput4"],
  antdInput4: ["antdInput4"],
  button3: ["button3"],
  emailCode: ["emailCode", "textInput5", "antdInput6", "button7"],
  textInput5: ["textInput5", "antdInput6"],
  antdInput6: ["antdInput6"],
  button7: ["button7"],
  textInput2: ["textInput2", "antdInput5"],
  antdInput5: ["antdInput5"],
  button5: ["button5"],
  rules: ["rules", "top"],
  top: ["top"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  textInput: typeof TextInput;
  antdInput: typeof Input;
  button: typeof Button;
  textInput7: typeof TextInput;
  antdInput7: typeof Input;
  textInput8: typeof TextInput;
  antdInput8: typeof Input;
  button2: typeof Button;
  textInput9: typeof TextInput;
  antdInput9: typeof Input;
  textInput10: typeof TextInput;
  antdInput10: typeof Input;
  textInput11: typeof TextInput;
  antdInput11: typeof Input;
  button6: typeof Button;
  textInput4: typeof TextInput;
  antdInput2: typeof Input;
  radioGrop: typeof RadioGrop;
  textInput6: typeof TextInput;
  antdInput3: typeof Input;
  checkbox: typeof Checkbox;
  button4: typeof Button;
  mobileCode: typeof Reveal;
  textInput3: typeof TextInput;
  antdInput4: typeof Input;
  button3: typeof Button;
  emailCode: typeof Reveal;
  textInput5: typeof TextInput;
  antdInput6: typeof Input;
  button7: typeof Button;
  textInput2: typeof TextInput;
  antdInput5: typeof Input;
  button5: typeof Button;
  rules: typeof AntdModal;
  top: "div";
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogin__VariantsArgs;
    args?: PlasmicLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLogin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    textInput: makeNodeComponent("textInput"),
    antdInput: makeNodeComponent("antdInput"),
    button: makeNodeComponent("button"),
    textInput7: makeNodeComponent("textInput7"),
    antdInput7: makeNodeComponent("antdInput7"),
    textInput8: makeNodeComponent("textInput8"),
    antdInput8: makeNodeComponent("antdInput8"),
    button2: makeNodeComponent("button2"),
    textInput9: makeNodeComponent("textInput9"),
    antdInput9: makeNodeComponent("antdInput9"),
    textInput10: makeNodeComponent("textInput10"),
    antdInput10: makeNodeComponent("antdInput10"),
    textInput11: makeNodeComponent("textInput11"),
    antdInput11: makeNodeComponent("antdInput11"),
    button6: makeNodeComponent("button6"),
    textInput4: makeNodeComponent("textInput4"),
    antdInput2: makeNodeComponent("antdInput2"),
    radioGrop: makeNodeComponent("radioGrop"),
    textInput6: makeNodeComponent("textInput6"),
    antdInput3: makeNodeComponent("antdInput3"),
    checkbox: makeNodeComponent("checkbox"),
    button4: makeNodeComponent("button4"),
    mobileCode: makeNodeComponent("mobileCode"),
    textInput3: makeNodeComponent("textInput3"),
    antdInput4: makeNodeComponent("antdInput4"),
    button3: makeNodeComponent("button3"),
    emailCode: makeNodeComponent("emailCode"),
    textInput5: makeNodeComponent("textInput5"),
    antdInput6: makeNodeComponent("antdInput6"),
    button7: makeNodeComponent("button7"),
    textInput2: makeNodeComponent("textInput2"),
    antdInput5: makeNodeComponent("antdInput5"),
    button5: makeNodeComponent("button5"),
    rules: makeNodeComponent("rules"),
    top: makeNodeComponent("top"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
