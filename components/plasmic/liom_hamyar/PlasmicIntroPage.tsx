/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: Po-Hnx9Mj1kJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { SwiperSlider } from "@/components/SwiperSlider"; // plasmic-import: hd-bzFw1zcpE/codeComponent
import IntroComponent from "../../IntroComponent"; // plasmic-import: Bw86EHWi2EN9/component
import SignsComponent from "../../SignsComponent"; // plasmic-import: gsWLWidDp5XD/component
import HamyarAddComponent from "../../HamyarAddComponent"; // plasmic-import: RArtpE5tE0Da/component
import ShopComponent from "../../ShopComponent"; // plasmic-import: gkIHYHT9LpaR/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicIntroPage.module.css"; // plasmic-import: Po-Hnx9Mj1kJ/css

import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicIntroPage__VariantMembers = {};
export type PlasmicIntroPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicIntroPage__VariantsArgs;
export const PlasmicIntroPage__VariantProps = new Array<VariantPropType>();

export type PlasmicIntroPage__ArgsType = {};
type ArgPropType = keyof PlasmicIntroPage__ArgsType;
export const PlasmicIntroPage__ArgProps = new Array<ArgPropType>();

export type PlasmicIntroPage__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  swiperSlider?: Flex__<typeof SwiperSlider>;
  signsComponent?: Flex__<typeof SignsComponent>;
  hamyarAddComponent?: Flex__<typeof HamyarAddComponent>;
  shopComponent?: Flex__<typeof ShopComponent>;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
};

export interface DefaultIntroPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIntroPage__RenderFunc(props: {
  variants: PlasmicIntroPage__VariantsArgs;
  args: PlasmicIntroPage__ArgsType;
  overrides: PlasmicIntroPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImI5MmFlY2UzLWIyOTItNGEwOS1hZDc0LTIxZTA4NzQxZGNlNiIsInR5cGUiOiJzZXNzaW9uIn0.wa2BGGpGdL49QTwXPhcp0xHwW3h9KCp5nPVJ_fSOD5U"
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["getParams"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          return urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getParams"] != null &&
                typeof $steps["getParams"] === "object" &&
                typeof $steps["getParams"].then === "function"
              ) {
                $steps["getParams"] = await $steps["getParams"];
              }

              $steps["clearParams"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const searchParams = new URLSearchParams(
                            window.location.search
                          );
                          searchParams.delete("token");
                          const newUrl = `${
                            window.location.pathname
                          }?${searchParams.toString()}`;
                          return window.history.replaceState(null, "", newUrl);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["clearParams"] != null &&
                typeof $steps["clearParams"] === "object" &&
                typeof $steps["clearParams"].then === "function"
              ) {
                $steps["clearParams"] = await $steps["clearParams"];
              }

              $steps["setCookie"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (
                            $state.paramsObject.token !== undefined &&
                            $state.paramsObject.token.trim() !== ""
                          ) {
                            if (!$state.paramsObject.token.startsWith("ey"))
                              $state.paramsObject.token =
                                $state.paramsObject.token.slice(6, -3);
                            var setCookie = (name, value, days) => {
                              const expires = new Date(
                                Date.now() + days * 86400000
                              ).toUTCString();
                              document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                            };
                            return setCookie(
                              "token",
                              JSON.stringify([$state.paramsObject.token]),
                              100
                            );
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["setCookie"] != null &&
                typeof $steps["setCookie"] === "object" &&
                typeof $steps["setCookie"].then === "function"
              ) {
                $steps["setCookie"] = await $steps["setCookie"];
              }

              $steps["getCookie"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var getCookie = name => {
                            const cookies = document.cookie.split("; ");
                            for (let cookie of cookies) {
                              const [key, value] = cookie.split("=");
                              if (key === name) return JSON.parse(value)[0];
                            }
                            return "";
                          };
                          return ($state.token = getCookie("token"));
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getCookie"] != null &&
                typeof $steps["getCookie"] === "object" &&
                typeof $steps["getCookie"].then === "function"
              ) {
                $steps["getCookie"] = await $steps["getCookie"];
              }

              $steps["userGuest"] =
                $state.token == ""
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://api.liom.app/auth/signup/guest",
                          undefined,
                          (() => {
                            try {
                              return (() => {
                                function pseudoUUID() {
                                  let timestamp = Date.now().toString(36);
                                  let randomStr = Math.random()
                                    .toString(36)
                                    .substr(2, 8);
                                  return timestamp + "-" + randomStr;
                                }
                                return {
                                  name: "کاربر مهمان",
                                  gateway: "intro",
                                  country: "98",
                                  isCountryPending: false,
                                  lang: "fa",
                                  version: "",
                                  os: (() => {
                                    const userAgent =
                                      window.navigator.userAgent;
                                    const platform = window.navigator.userAgent;
                                    if (/Windows/i.test(platform))
                                      return "Windows";
                                    if (/Mac/i.test(platform)) return "macOS";
                                    if (/Linux/i.test(platform)) return "Linux";
                                    if (/Android/i.test(userAgent))
                                      return "Android";
                                    if (/iPhone|iPad|iPod/i.test(userAgent))
                                      return "iOS";
                                    return "Unknown OS";
                                  })(),
                                  osVersion: (() => {
                                    const userAgent =
                                      window.navigator.userAgent;
                                    if (/Windows NT 10.0/.test(userAgent))
                                      return "Windows 10";
                                    if (/Windows NT 6.3/.test(userAgent))
                                      return "Windows 8.1";
                                    if (/Windows NT 6.2/.test(userAgent))
                                      return "Windows 8";
                                    if (/Windows NT 6.1/.test(userAgent))
                                      return "Windows 7";
                                    if (
                                      /Mac OS X (\d+[\._]\d+)/.test(userAgent)
                                    )
                                      return `macOS ${RegExp.$1.replace(
                                        "_",
                                        "."
                                      )}`;
                                    if (/Android (\d+(\.\d+)?)/.test(userAgent))
                                      return `Android ${RegExp.$1}`;
                                    if (
                                      /CPU (iPhone )?OS (\d+_\d+)/.test(
                                        userAgent
                                      )
                                    )
                                      return `iOS ${RegExp.$2.replace(
                                        "_",
                                        "."
                                      )}`;
                                    return "Unknown Version";
                                  })(),
                                  sex: $state.gender || "",
                                  additionalData: {
                                    ip: "132465",
                                    name: "test1"
                                  },
                                  device: (() => {
                                    const userAgent =
                                      window.navigator.userAgent;
                                    if (
                                      /Mobi|Android|iPhone|iPad|iPod/i.test(
                                        userAgent
                                      )
                                    ) {
                                      return "Mobile";
                                    } else if (/Tablet|iPad/i.test(userAgent)) {
                                      return "Tablet";
                                    } else {
                                      return "Desktop";
                                    }
                                  })(),
                                  fcm:
                                    window.localStorage.getItem("fcmToken") ||
                                    " ",
                                  uniqueId: pseudoUUID(),
                                  device_type: window.navigator.platform,
                                  postLang: "fa"
                                };
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["userGuest"] != null &&
                typeof $steps["userGuest"] === "object" &&
                typeof $steps["userGuest"].then === "function"
              ) {
                $steps["userGuest"] = await $steps["userGuest"];
              }

              $steps["setCookie2"] =
                $steps.userGuest?.data?.success ?? false
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            var setCookie = (name, value, days) => {
                              const expires = new Date(
                                Date.now() + days * 86400000
                              ).toUTCString();
                              document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                            };
                            setCookie(
                              "token",
                              JSON.stringify([
                                $steps.userGuest.data.result.token
                              ]),
                              100
                            );
                            return ($state.token =
                              $steps.userGuest.data.result.token);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["setCookie2"] != null &&
                typeof $steps["setCookie2"] === "object" &&
                typeof $steps["setCookie2"].then === "function"
              ) {
                $steps["setCookie2"] = await $steps["setCookie2"];
              }
            }}
          />

          <SwiperSlider
            data-plasmic-name={"swiperSlider"}
            data-plasmic-override={overrides.swiperSlider}
            activeBulletColor={"#5519B0"}
            autoplay={false}
            autoplayDelay={3000}
            bulletColor={true ? "var(--antd-colorPrimaryActive)" : undefined}
            className={
              classNames({ [sty["pcls_9X-ZqRU2eYN8"]]: true }) +
              " " +
              classNames("__wab_instance", sty.swiperSlider)
            }
            loop={false}
            nextButtonSlot={
              <Button
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                className={classNames("__wab_instance", sty.button2)}
                color={generateStateValueProp($state, ["button2", "color"])}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button2", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                shape={"rounded"}
                size={"compact"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xrMl
                  )}
                >
                  {"\u0642\u0628\u0644\u06cc"}
                </div>
              </Button>
            }
            prevButtonSlot={
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                color={generateStateValueProp($state, ["button", "color"])}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                shape={"rounded"}
                size={"compact"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pAlWc
                  )}
                >
                  {"\u0628\u0639\u062f\u06cc"}
                </div>
              </Button>
            }
            showNavigationButtons={true}
            showPagination={true}
          >
            <div className={classNames(projectcss.all, sty.freeBox__u4DXd)}>
              <IntroComponent
                className={classNames(
                  "__wab_instance",
                  sty.introComponent__mnQGe
                )}
                text={
                  "\u0627\u06cc\u0646\u062c\u0627 7 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062e\u0631\u06cc\u062f\u0627\u0631\u060c \u062a\u062c\u0631\u0628\u0647 \u062e\u0631\u06cc\u062f\u0634\u0627\u0646 \u0631\u0627 \u0628\u0627 \u062c\u0632\u064a\u06cc\u0627\u062a \u0646\u0648\u0634\u062a\u0647 \u0627\u0646\u062f\u060c \u0642\u0628\u0644 \u0627\u0632 \u062e\u0631\u06cc\u062f\u060c \u062f\u06cc\u062f\u06af\u0627\u0647 \u0647\u0627 \u0631\u0627 \u0628\u062e.\u0627\u0646 . \u0622\u06af\u0627\u0647 \u0628\u0627\u0634."
                }
                title={
                  "\u0627\u0633\u0644\u0627\u06cc\u062f \u0627\u0648\u0644"
                }
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__jVFuV)}>
              <IntroComponent
                className={classNames(
                  "__wab_instance",
                  sty.introComponent__zPgI
                )}
                text={
                  "\u0627\u06cc\u0646\u062c\u0627 7 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062e\u0631\u06cc\u062f\u0627\u0631\u060c \u062a\u062c\u0631\u0628\u0647 \u062e\u0631\u06cc\u062f\u0634\u0627\u0646 \u0631\u0627 \u0628\u0627 \u062c\u0632\u064a\u06cc\u0627\u062a \u0646\u0648\u0634\u062a\u0647 \u0627\u0646\u062f\u060c \u0642\u0628\u0644 \u0627\u0632 \u062e\u0631\u06cc\u062f\u060c \u062f\u06cc\u062f\u06af\u0627\u0647 \u0647\u0627 \u0631\u0627 \u0628\u062e.\u0627\u0646 . \u0622\u06af\u0627\u0647 \u0628\u0627\u0634."
                }
                title={
                  "\u0627\u0633\u0644\u0627\u06cc\u062f \u062f\u0648\u0645"
                }
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__iCrU)}>
              <IntroComponent
                className={classNames(
                  "__wab_instance",
                  sty.introComponent___5PhuJ
                )}
                text={
                  "\u0627\u06cc\u0646\u062c\u0627 7 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062e\u0631\u06cc\u062f\u0627\u0631\u060c \u062a\u062c\u0631\u0628\u0647 \u062e\u0631\u06cc\u062f\u0634\u0627\u0646 \u0631\u0627 \u0628\u0627 \u062c\u0632\u064a\u06cc\u0627\u062a \u0646\u0648\u0634\u062a\u0647 \u0627\u0646\u062f\u060c \u0642\u0628\u0644 \u0627\u0632 \u062e\u0631\u06cc\u062f\u060c \u062f\u06cc\u062f\u06af\u0627\u0647 \u0647\u0627 \u0631\u0627 \u0628\u062e.\u0627\u0646 . \u0622\u06af\u0627\u0647 \u0628\u0627\u0634."
                }
                title={
                  "\u0627\u0633\u0644\u0627\u06cc\u062f \u0633\u0648\u0645"
                }
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__pPc)}>
              <IntroComponent
                className={classNames(
                  "__wab_instance",
                  sty.introComponent__ibO44
                )}
                text={
                  "\u0627\u06cc\u0646\u062c\u0627 7 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062e\u0631\u06cc\u062f\u0627\u0631\u060c \u062a\u062c\u0631\u0628\u0647 \u062e\u0631\u06cc\u062f\u0634\u0627\u0646 \u0631\u0627 \u0628\u0627 \u062c\u0632\u064a\u06cc\u0627\u062a \u0646\u0648\u0634\u062a\u0647 \u0627\u0646\u062f\u060c \u0642\u0628\u0644 \u0627\u0632 \u062e\u0631\u06cc\u062f\u060c \u062f\u06cc\u062f\u06af\u0627\u0647 \u0647\u0627 \u0631\u0627 \u0628\u062e.\u0627\u0646 . \u0622\u06af\u0627\u0647 \u0628\u0627\u0634."
                }
                title={
                  "\u0627\u0633\u0644\u0627\u06cc\u062f \u0686\u0647\u0627\u0631\u0645"
                }
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__nte5V)}>
              <SignsComponent
                data-plasmic-name={"signsComponent"}
                data-plasmic-override={overrides.signsComponent}
                className={classNames("__wab_instance", sty.signsComponent)}
                token={(() => {
                  try {
                    return $state.token;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___2Wo28)}>
              <HamyarAddComponent
                data-plasmic-name={"hamyarAddComponent"}
                data-plasmic-override={overrides.hamyarAddComponent}
                className={classNames("__wab_instance", sty.hamyarAddComponent)}
                token2={(() => {
                  try {
                    return $state.token;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zf5KZ)}>
              <ShopComponent
                data-plasmic-name={"shopComponent"}
                data-plasmic-override={overrides.shopComponent}
                className={classNames("__wab_instance", sty.shopComponent)}
                token={(() => {
                  try {
                    return $state.token;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          </SwiperSlider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "swiperSlider",
    "signsComponent",
    "hamyarAddComponent",
    "shopComponent",
    "button",
    "button2"
  ],
  sideEffect: ["sideEffect"],
  swiperSlider: [
    "swiperSlider",
    "signsComponent",
    "hamyarAddComponent",
    "shopComponent",
    "button",
    "button2"
  ],
  signsComponent: ["signsComponent"],
  hamyarAddComponent: ["hamyarAddComponent"],
  shopComponent: ["shopComponent"],
  button: ["button"],
  button2: ["button2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  swiperSlider: typeof SwiperSlider;
  signsComponent: typeof SignsComponent;
  hamyarAddComponent: typeof HamyarAddComponent;
  shopComponent: typeof ShopComponent;
  button: typeof Button;
  button2: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIntroPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIntroPage__VariantsArgs;
    args?: PlasmicIntroPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIntroPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicIntroPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIntroPage__ArgProps,
          internalVariantPropNames: PlasmicIntroPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIntroPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIntroPage";
  } else {
    func.displayName = `PlasmicIntroPage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicIntroPage = Object.assign(
  // Top-level PlasmicIntroPage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    swiperSlider: makeNodeComponent("swiperSlider"),
    signsComponent: makeNodeComponent("signsComponent"),
    hamyarAddComponent: makeNodeComponent("hamyarAddComponent"),
    shopComponent: makeNodeComponent("shopComponent"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),

    // Metadata about props expected for PlasmicIntroPage
    internalVariantProps: PlasmicIntroPage__VariantProps,
    internalArgProps: PlasmicIntroPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIntroPage;
/* prettier-ignore-end */
