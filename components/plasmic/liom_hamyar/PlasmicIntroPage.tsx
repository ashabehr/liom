/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: Po-Hnx9Mj1kJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SwiperSlider } from "@/components/SwiperSlider"; // plasmic-import: hd-bzFw1zcpE/codeComponent
import IntroComponent from "../../IntroComponent"; // plasmic-import: Bw86EHWi2EN9/component
import SignsComponent from "../../SignsComponent"; // plasmic-import: gsWLWidDp5XD/component
import HamyarAddComponent from "../../HamyarAddComponent"; // plasmic-import: RArtpE5tE0Da/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicIntroPage.module.css"; // plasmic-import: Po-Hnx9Mj1kJ/css

createPlasmicElementProxy;

export type PlasmicIntroPage__VariantMembers = {};
export type PlasmicIntroPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicIntroPage__VariantsArgs;
export const PlasmicIntroPage__VariantProps = new Array<VariantPropType>();

export type PlasmicIntroPage__ArgsType = {};
type ArgPropType = keyof PlasmicIntroPage__ArgsType;
export const PlasmicIntroPage__ArgProps = new Array<ArgPropType>();

export type PlasmicIntroPage__OverridesType = {
  root?: Flex__<"div">;
  swiperSlider?: Flex__<typeof SwiperSlider>;
  signsComponent?: Flex__<typeof SignsComponent>;
  hamyarAddComponent?: Flex__<typeof HamyarAddComponent>;
};

export interface DefaultIntroPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIntroPage__RenderFunc(props: {
  variants: PlasmicIntroPage__VariantsArgs;
  args: PlasmicIntroPage__ArgsType;
  overrides: PlasmicIntroPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <SwiperSlider
            data-plasmic-name={"swiperSlider"}
            data-plasmic-override={overrides.swiperSlider}
            activeBulletColor={"#5519B0"}
            autoplay={false}
            autoplayDelay={3000}
            bulletColor={true ? "var(--antd-colorPrimaryActive)" : undefined}
            className={classNames("__wab_instance", sty.swiperSlider)}
            loop={true}
            showPagination={true}
          >
            <div className={classNames(projectcss.all, sty.freeBox__u4DXd)}>
              <IntroComponent
                className={classNames(
                  "__wab_instance",
                  sty.introComponent__mnQGe
                )}
                text={
                  "\u0627\u06cc\u0646\u062c\u0627 7 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062e\u0631\u06cc\u062f\u0627\u0631\u060c \u062a\u062c\u0631\u0628\u0647 \u062e\u0631\u06cc\u062f\u0634\u0627\u0646 \u0631\u0627 \u0628\u0627 \u062c\u0632\u064a\u06cc\u0627\u062a \u0646\u0648\u0634\u062a\u0647 \u0627\u0646\u062f\u060c \u0642\u0628\u0644 \u0627\u0632 \u062e\u0631\u06cc\u062f\u060c \u062f\u06cc\u062f\u06af\u0627\u0647 \u0647\u0627 \u0631\u0627 \u0628\u062e.\u0627\u0646 . \u0622\u06af\u0627\u0647 \u0628\u0627\u0634."
                }
                title={
                  "\u0627\u0633\u0644\u0627\u06cc\u062f \u0627\u0648\u0644"
                }
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__jVFuV)}>
              <IntroComponent
                className={classNames(
                  "__wab_instance",
                  sty.introComponent__zPgI
                )}
                text={
                  "\u0627\u06cc\u0646\u062c\u0627 7 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062e\u0631\u06cc\u062f\u0627\u0631\u060c \u062a\u062c\u0631\u0628\u0647 \u062e\u0631\u06cc\u062f\u0634\u0627\u0646 \u0631\u0627 \u0628\u0627 \u062c\u0632\u064a\u06cc\u0627\u062a \u0646\u0648\u0634\u062a\u0647 \u0627\u0646\u062f\u060c \u0642\u0628\u0644 \u0627\u0632 \u062e\u0631\u06cc\u062f\u060c \u062f\u06cc\u062f\u06af\u0627\u0647 \u0647\u0627 \u0631\u0627 \u0628\u062e.\u0627\u0646 . \u0622\u06af\u0627\u0647 \u0628\u0627\u0634."
                }
                title={
                  "\u0627\u0633\u0644\u0627\u06cc\u062f \u062f\u0648\u0645"
                }
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__iCrU)}>
              <IntroComponent
                className={classNames(
                  "__wab_instance",
                  sty.introComponent___5PhuJ
                )}
                text={
                  "\u0627\u06cc\u0646\u062c\u0627 7 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062e\u0631\u06cc\u062f\u0627\u0631\u060c \u062a\u062c\u0631\u0628\u0647 \u062e\u0631\u06cc\u062f\u0634\u0627\u0646 \u0631\u0627 \u0628\u0627 \u062c\u0632\u064a\u06cc\u0627\u062a \u0646\u0648\u0634\u062a\u0647 \u0627\u0646\u062f\u060c \u0642\u0628\u0644 \u0627\u0632 \u062e\u0631\u06cc\u062f\u060c \u062f\u06cc\u062f\u06af\u0627\u0647 \u0647\u0627 \u0631\u0627 \u0628\u062e.\u0627\u0646 . \u0622\u06af\u0627\u0647 \u0628\u0627\u0634."
                }
                title={
                  "\u0627\u0633\u0644\u0627\u06cc\u062f \u0633\u0648\u0645"
                }
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__pPc)}>
              <IntroComponent
                className={classNames(
                  "__wab_instance",
                  sty.introComponent__ibO44
                )}
                text={
                  "\u0627\u06cc\u0646\u062c\u0627 7 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062e\u0631\u06cc\u062f\u0627\u0631\u060c \u062a\u062c\u0631\u0628\u0647 \u062e\u0631\u06cc\u062f\u0634\u0627\u0646 \u0631\u0627 \u0628\u0627 \u062c\u0632\u064a\u06cc\u0627\u062a \u0646\u0648\u0634\u062a\u0647 \u0627\u0646\u062f\u060c \u0642\u0628\u0644 \u0627\u0632 \u062e\u0631\u06cc\u062f\u060c \u062f\u06cc\u062f\u06af\u0627\u0647 \u0647\u0627 \u0631\u0627 \u0628\u062e.\u0627\u0646 . \u0622\u06af\u0627\u0647 \u0628\u0627\u0634."
                }
                title={
                  "\u0627\u0633\u0644\u0627\u06cc\u062f \u0686\u0647\u0627\u0631\u0645"
                }
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__nte5V)}>
              <SignsComponent
                data-plasmic-name={"signsComponent"}
                data-plasmic-override={overrides.signsComponent}
                className={classNames("__wab_instance", sty.signsComponent)}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___2Wo28)}>
              <HamyarAddComponent
                data-plasmic-name={"hamyarAddComponent"}
                data-plasmic-override={overrides.hamyarAddComponent}
                className={classNames("__wab_instance", sty.hamyarAddComponent)}
              />
            </div>
          </SwiperSlider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "swiperSlider", "signsComponent", "hamyarAddComponent"],
  swiperSlider: ["swiperSlider", "signsComponent", "hamyarAddComponent"],
  signsComponent: ["signsComponent"],
  hamyarAddComponent: ["hamyarAddComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  swiperSlider: typeof SwiperSlider;
  signsComponent: typeof SignsComponent;
  hamyarAddComponent: typeof HamyarAddComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIntroPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIntroPage__VariantsArgs;
    args?: PlasmicIntroPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIntroPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicIntroPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIntroPage__ArgProps,
          internalVariantPropNames: PlasmicIntroPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIntroPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIntroPage";
  } else {
    func.displayName = `PlasmicIntroPage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicIntroPage = Object.assign(
  // Top-level PlasmicIntroPage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    swiperSlider: makeNodeComponent("swiperSlider"),
    signsComponent: makeNodeComponent("signsComponent"),
    hamyarAddComponent: makeNodeComponent("hamyarAddComponent"),

    // Metadata about props expected for PlasmicIntroPage
    internalVariantProps: PlasmicIntroPage__VariantProps,
    internalArgProps: PlasmicIntroPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIntroPage;
/* prettier-ignore-end */
