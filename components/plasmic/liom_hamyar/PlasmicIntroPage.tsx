/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: Po-Hnx9Mj1kJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SwiperSlider } from "@/components/SwiperSlider"; // plasmic-import: hd-bzFw1zcpE/codeComponent
import IntroComponent from "../../IntroComponent"; // plasmic-import: Bw86EHWi2EN9/component
import HamyarAddComponent from "../../HamyarAddComponent"; // plasmic-import: RArtpE5tE0Da/component
import SignsComponent from "../../SignsComponent"; // plasmic-import: gsWLWidDp5XD/component
import ShopComponent from "../../ShopComponent"; // plasmic-import: gkIHYHT9LpaR/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicIntroPage.module.css"; // plasmic-import: Po-Hnx9Mj1kJ/css

import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicIntroPage__VariantMembers = {};
export type PlasmicIntroPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicIntroPage__VariantsArgs;
export const PlasmicIntroPage__VariantProps = new Array<VariantPropType>();

export type PlasmicIntroPage__ArgsType = {};
type ArgPropType = keyof PlasmicIntroPage__ArgsType;
export const PlasmicIntroPage__ArgProps = new Array<ArgPropType>();

export type PlasmicIntroPage__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  embedHtml?: Flex__<typeof Embed>;
  swiperSlider?: Flex__<typeof SwiperSlider>;
  hamyarAddComponent?: Flex__<typeof HamyarAddComponent>;
  signsComponent?: Flex__<typeof SignsComponent>;
  signsComponent2?: Flex__<typeof SignsComponent>;
  shopComponent?: Flex__<typeof ShopComponent>;
  button2?: Flex__<typeof Button>;
  button?: Flex__<typeof Button>;
};

export interface DefaultIntroPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIntroPage__RenderFunc(props: {
  variants: PlasmicIntroPage__VariantsArgs;
  args: PlasmicIntroPage__ArgsType;
  overrides: PlasmicIntroPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImJkMTdiNmJkLTkzZmYtNGYzZS04ZGYzLTQwMDNkOTU2NGJkOCIsInR5cGUiOiJzZXNzaW9uIiwiaWF0IjoxNzQ2MjU3MDQ1fQ.VGtD4MdU57dGqdh7uxLTL3lCugmBcv_kybVqfb_2dSI"
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "buyLater",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return window.localStorage.getItem("buyLater") || "false";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "swiperSlider.activeSlideIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "signData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "swiperSlider.lockSlides",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "signsComponent.beforList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData.result.before || [];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signsComponent2.beforList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData.result.before || [];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signsComponent.psychologicalList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData.result.psychological;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signsComponent2.psychologicalList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData.result.psychological;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signsComponent.vaginalList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData.result.vaginal;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signsComponent2.vaginalList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData.result.vaginal;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signsComponent.womanList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData.result.womans;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signsComponent2.womanList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData.result.womans;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signsComponent.hereditaryList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData.result.hereditary;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signsComponent2.hereditaryList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData.result.hereditary;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signsComponent.venerealList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData.result.venereal;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signsComponent2.venerealList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData.result.venereal;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signsComponent.befurList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData.result.current;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signsComponent2.befurList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData.result.current;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "hamyarAddComponent.goNext",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "signsComponent.signData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.signData;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "signsComponent2.signData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "hamyarAddComponent.relation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "husband"
      },
      {
        path: "hamyarAddComponent.name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "hamyarAddComponent.number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "message",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "errorr",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "shopComponent.packValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "shopComponent.shopList",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
          style={(() => {
            try {
              return {
                overflow: "hidden"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["getParams"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          return urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getParams"] != null &&
                typeof $steps["getParams"] === "object" &&
                typeof $steps["getParams"].then === "function"
              ) {
                $steps["getParams"] = await $steps["getParams"];
              }

              $steps["clearParams"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const searchParams = new URLSearchParams(
                            window.location.search
                          );
                          searchParams.delete("token");
                          const newUrl = `${
                            window.location.pathname
                          }?${searchParams.toString()}`;
                          return window.history.replaceState(null, "", newUrl);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["clearParams"] != null &&
                typeof $steps["clearParams"] === "object" &&
                typeof $steps["clearParams"].then === "function"
              ) {
                $steps["clearParams"] = await $steps["clearParams"];
              }

              $steps["setCookie"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (
                            $state.paramsObject.token !== undefined &&
                            $state.paramsObject.token.trim() !== ""
                          ) {
                            if (!$state.paramsObject.token.startsWith("ey"))
                              $state.paramsObject.token =
                                $state.paramsObject.token.slice(6, -3);
                            var setCookie = (name, value, days) => {
                              const expires = new Date(
                                Date.now() + days * 86400000
                              ).toUTCString();
                              document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                            };
                            return setCookie(
                              "token",
                              JSON.stringify([$state.paramsObject.token]),
                              100
                            );
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["setCookie"] != null &&
                typeof $steps["setCookie"] === "object" &&
                typeof $steps["setCookie"].then === "function"
              ) {
                $steps["setCookie"] = await $steps["setCookie"];
              }

              $steps["getCookie"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var getCookie = name => {
                            const cookies = document.cookie.split("; ");
                            for (let cookie of cookies) {
                              const [key, value] = cookie.split("=");
                              if (key === name) return JSON.parse(value)[0];
                            }
                            return "";
                          };
                          return ($state.token = getCookie("token"));
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getCookie"] != null &&
                typeof $steps["getCookie"] === "object" &&
                typeof $steps["getCookie"].then === "function"
              ) {
                $steps["getCookie"] = await $steps["getCookie"];
              }

              $steps["userGuest"] = false
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://api.liom.app/auth/signup/guest",
                        undefined,
                        (() => {
                          try {
                            return (() => {
                              function pseudoUUID() {
                                let timestamp = Date.now().toString(36);
                                let randomStr = Math.random()
                                  .toString(36)
                                  .substr(2, 8);
                                return timestamp + "-" + randomStr;
                              }
                              return {
                                name: "کاربر مهمان",
                                gateway: "intro",
                                country: "98",
                                isCountryPending: false,
                                lang: "fa",
                                version: "",
                                os: (() => {
                                  const userAgent = window.navigator.userAgent;
                                  const platform = window.navigator.userAgent;
                                  if (/Windows/i.test(platform))
                                    return "Windows";
                                  if (/Mac/i.test(platform)) return "macOS";
                                  if (/Linux/i.test(platform)) return "Linux";
                                  if (/Android/i.test(userAgent))
                                    return "Android";
                                  if (/iPhone|iPad|iPod/i.test(userAgent))
                                    return "iOS";
                                  return "Unknown OS";
                                })(),
                                osVersion: (() => {
                                  const userAgent = window.navigator.userAgent;
                                  if (/Windows NT 10.0/.test(userAgent))
                                    return "Windows 10";
                                  if (/Windows NT 6.3/.test(userAgent))
                                    return "Windows 8.1";
                                  if (/Windows NT 6.2/.test(userAgent))
                                    return "Windows 8";
                                  if (/Windows NT 6.1/.test(userAgent))
                                    return "Windows 7";
                                  if (/Mac OS X (\d+[\._]\d+)/.test(userAgent))
                                    return `macOS ${RegExp.$1.replace(
                                      "_",
                                      "."
                                    )}`;
                                  if (/Android (\d+(\.\d+)?)/.test(userAgent))
                                    return `Android ${RegExp.$1}`;
                                  if (
                                    /CPU (iPhone )?OS (\d+_\d+)/.test(userAgent)
                                  )
                                    return `iOS ${RegExp.$2.replace("_", ".")}`;
                                  return "Unknown Version";
                                })(),
                                sex: $state.gender || "",
                                additionalData: {
                                  ip: "132465",
                                  name: "test1"
                                },
                                device: (() => {
                                  const userAgent = window.navigator.userAgent;
                                  if (
                                    /Mobi|Android|iPhone|iPad|iPod/i.test(
                                      userAgent
                                    )
                                  ) {
                                    return "Mobile";
                                  } else if (/Tablet|iPad/i.test(userAgent)) {
                                    return "Tablet";
                                  } else {
                                    return "Desktop";
                                  }
                                })(),
                                fcm:
                                  window.localStorage.getItem("fcmToken") ||
                                  " ",
                                uniqueId: pseudoUUID(),
                                device_type: window.navigator.platform,
                                postLang: "fa"
                              };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["userGuest"] != null &&
                typeof $steps["userGuest"] === "object" &&
                typeof $steps["userGuest"].then === "function"
              ) {
                $steps["userGuest"] = await $steps["userGuest"];
              }

              $steps["setCookie2"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var setCookie = (name, value, days) => {
                            const expires = new Date(
                              Date.now() + days * 86400000
                            ).toUTCString();
                            document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                          };
                          setCookie(
                            "token",
                            JSON.stringify([
                              $steps.userGuest.data.result.token
                            ]),
                            100
                          );
                          return ($state.token =
                            $steps.userGuest.data.result.token);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["setCookie2"] != null &&
                typeof $steps["setCookie2"] === "object" &&
                typeof $steps["setCookie2"].then === "function"
              ) {
                $steps["setCookie2"] = await $steps["setCookie2"];
              }

              $steps["getSign"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/calendar/getSign",
                        (() => {
                          try {
                            return { authorization: $state.token };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getSign"] != null &&
                typeof $steps["getSign"] === "object" &&
                typeof $steps["getSign"].then === "function"
              ) {
                $steps["getSign"] = await $steps["getSign"];
              }

              $steps["updateSignData"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["signData"]
                      },
                      operation: 0,
                      value: $steps.getSign.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSignData"] != null &&
                typeof $steps["updateSignData"] === "object" &&
                typeof $steps["updateSignData"].then === "function"
              ) {
                $steps["updateSignData"] = await $steps["updateSignData"];
              }

              $steps["getShopList"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/get/pmsSms",
                        (() => {
                          try {
                            return {
                              type: $state.shopComponent.packValue,
                              authorization: $state.token
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getShopList"] != null &&
                typeof $steps["getShopList"] === "object" &&
                typeof $steps["getShopList"].then === "function"
              ) {
                $steps["getShopList"] = await $steps["getShopList"];
              }

              $steps["updateShopComponentShopList"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["shopComponent", "shopList"]
                      },
                      operation: 0,
                      value: $steps.getShopList.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateShopComponentShopList"] != null &&
                typeof $steps["updateShopComponentShopList"] === "object" &&
                typeof $steps["updateShopComponentShopList"].then === "function"
              ) {
                $steps["updateShopComponentShopList"] = await $steps[
                  "updateShopComponentShopList"
                ];
              }
            }}
          />

          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              "<script>\n  function setVh() {\n    const vh = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n  }\n\n  setVh();\n  window.addEventListener('resize', setVh);\n  \n</script>"
            }
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__debOo,
              "viewPager"
            )}
          >
            <SwiperSlider
              data-plasmic-name={"swiperSlider"}
              data-plasmic-override={overrides.swiperSlider}
              activeBulletColor={"#5519B0"}
              activeSlideIndex={generateStateValueProp($state, [
                "swiperSlider",
                "activeSlideIndex"
              ])}
              autoplay={false}
              autoplayDelay={3000}
              bulletColor={true ? "var(--antd-colorPrimaryActive)" : undefined}
              className={
                classNames({ [sty["pcls_9X-ZqRU2eYN8"]]: true }) +
                " " +
                classNames("__wab_instance", sty.swiperSlider)
              }
              disablePaginationClick={true}
              lockSlides={generateStateValueProp($state, [
                "swiperSlider",
                "lockSlides"
              ])}
              loop={false}
              nextButtonSlot={
                <div className={classNames(projectcss.all, sty.freeBox__v3H2Y)}>
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={generateStateValueProp($state, ["button", "color"])}
                    loading={(() => {
                      try {
                        return $state.loading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading"] != null &&
                        typeof $steps["updateLoading"] === "object" &&
                        typeof $steps["updateLoading"].then === "function"
                      ) {
                        $steps["updateLoading"] = await $steps["updateLoading"];
                      }

                      $steps["invokeGlobalAction"] = (() => {
                        if (
                          $state.swiperSlider.activeSlideIndex == 5 &&
                          $state.signsComponent.beforList.length > 0
                        )
                          return true;
                        else if (
                          $state.swiperSlider.activeSlideIndex == 6 &&
                          $state.signsComponent2.psychologicalList.length > 0
                        )
                          return true;
                        else return false;
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/calendar/getSign",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      authorization: $state.token,
                                      before: $state.signsComponent.beforList,
                                      current: $state.signsComponent.befurList,
                                      psychological:
                                        $state.signsComponent2
                                          .psychologicalList,
                                      vaginal:
                                        $state.signsComponent.vaginalList,
                                      hereditary:
                                        $state.signsComponent.hereditaryList,
                                      venereal:
                                        $state.signsComponent.venerealList,
                                      womans: $state.signsComponent.womanList,
                                      others: ["stomach_ache"]
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $state.swiperSlider.activeSlideIndex == 4 &&
                        $state.hamyarAddComponent.goNext == false &&
                        $state.hamyarAddComponent.name == "" &&
                        $state.hamyarAddComponent.number == ""
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0627 \u0628\u0647 \u062f\u0631\u0633\u062a\u06cc \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction3"] =
                        $state.swiperSlider.activeSlideIndex == 4 &&
                        $state.hamyarAddComponent.goNext == false &&
                        $state.hamyarAddComponent.name != "" &&
                        $state.hamyarAddComponent.number != ""
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "PUT",
                                  "https://n8n.staas.ir/webhook/rest/user/hamyar/add",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        authorization: $state.token,
                                        mobile:
                                          $state.hamyarAddComponent.number,
                                        name: $state.hamyarAddComponent.name,
                                        type: "hamyar",
                                        relation:
                                          $state.hamyarAddComponent.relation
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["invokeGlobalAction4"] =
                        $steps.invokeGlobalAction3?.data?.success == true &&
                        $state.swiperSlider.activeSlideIndex == 4 &&
                        $state.hamyarAddComponent.goNext == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f.",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction4"] != null &&
                        typeof $steps["invokeGlobalAction4"] === "object" &&
                        typeof $steps["invokeGlobalAction4"].then === "function"
                      ) {
                        $steps["invokeGlobalAction4"] = await $steps[
                          "invokeGlobalAction4"
                        ];
                      }

                      $steps["updateMessage"] =
                        $steps.invokeGlobalAction3?.data?.success == true &&
                        $state.swiperSlider.activeSlideIndex == 4 &&
                        $state.hamyarAddComponent.goNext == false
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["message"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction3.data.result
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateMessage"] != null &&
                        typeof $steps["updateMessage"] === "object" &&
                        typeof $steps["updateMessage"].then === "function"
                      ) {
                        $steps["updateMessage"] = await $steps["updateMessage"];
                      }

                      $steps["updateErrorr"] =
                        $steps.invokeGlobalAction3?.data?.success == false &&
                        $state.swiperSlider.activeSlideIndex == 4 &&
                        $state.hamyarAddComponent.goNext == false
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["errorr"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction3.data.error
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateErrorr"] != null &&
                        typeof $steps["updateErrorr"] === "object" &&
                        typeof $steps["updateErrorr"].then === "function"
                      ) {
                        $steps["updateErrorr"] = await $steps["updateErrorr"];
                      }

                      $steps["invokeGlobalAction5"] =
                        $steps.invokeGlobalAction3?.data?.success == false &&
                        $state.swiperSlider.activeSlideIndex == 4 &&
                        $state.hamyarAddComponent.goNext == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  (() => {
                                    try {
                                      return $state.errorr.message;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction5"] != null &&
                        typeof $steps["invokeGlobalAction5"] === "object" &&
                        typeof $steps["invokeGlobalAction5"].then === "function"
                      ) {
                        $steps["invokeGlobalAction5"] = await $steps[
                          "invokeGlobalAction5"
                        ];
                      }

                      $steps["updateHamyarAddComponentGoNext"] =
                        ($state.swiperSlider.activeSlideIndex == 4 &&
                          $steps.invokeGlobalAction3?.data?.success == true) ||
                        ($steps.invokeGlobalAction3?.data?.error.code ==
                          1220138 &&
                          $state.hamyarAddComponent.goNext == false)
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["hamyarAddComponent", "goNext"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateHamyarAddComponentGoNext"] != null &&
                        typeof $steps["updateHamyarAddComponentGoNext"] ===
                          "object" &&
                        typeof $steps["updateHamyarAddComponentGoNext"].then ===
                          "function"
                      ) {
                        $steps["updateHamyarAddComponentGoNext"] = await $steps[
                          "updateHamyarAddComponentGoNext"
                        ];
                      }

                      $steps["updateSwiperSliderLockSlides"] =
                        $state.swiperSlider.activeSlideIndex == 4 &&
                        $state.hamyarAddComponent.goNext == true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["swiperSlider", "lockSlides"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateSwiperSliderLockSlides"] != null &&
                        typeof $steps["updateSwiperSliderLockSlides"] ===
                          "object" &&
                        typeof $steps["updateSwiperSliderLockSlides"].then ===
                          "function"
                      ) {
                        $steps["updateSwiperSliderLockSlides"] = await $steps[
                          "updateSwiperSliderLockSlides"
                        ];
                      }

                      $steps["updateSwiperSliderActiveSlideIndex"] =
                        $state.swiperSlider.activeSlideIndex == 4 &&
                        $state.hamyarAddComponent.goNext == true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: [
                                    "swiperSlider",
                                    "activeSlideIndex"
                                  ]
                                },
                                operation: 0,
                                value: 5
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateSwiperSliderActiveSlideIndex"] != null &&
                        typeof $steps["updateSwiperSliderActiveSlideIndex"] ===
                          "object" &&
                        typeof $steps["updateSwiperSliderActiveSlideIndex"]
                          .then === "function"
                      ) {
                        $steps["updateSwiperSliderActiveSlideIndex"] =
                          await $steps["updateSwiperSliderActiveSlideIndex"];
                      }

                      $steps["updateLoading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading2"] != null &&
                        typeof $steps["updateLoading2"] === "object" &&
                        typeof $steps["updateLoading2"].then === "function"
                      ) {
                        $steps["updateLoading2"] = await $steps[
                          "updateLoading2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    shape={"rounded"}
                    size={"compact"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pAlWc
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.swiperSlider.activeSlideIndex == 5 ||
                              $state.swiperSlider.activeSlideIndex == 6
                              ? "ذخیره و ادامه"
                              : $state.swiperSlider.activeSlideIndex == 4
                              ? "ذخیره و ادامه"
                              : "ادامه";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0628\u0639\u062f\u06cc";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Button>
                </div>
              }
              onActiveSlideIndexChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "swiperSlider",
                  "activeSlideIndex"
                ]).apply(null, eventArgs);

                (async index => {
                  const $steps = {};

                  $steps["updateSwiperSliderLockSlides"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["swiperSlider", "lockSlides"]
                          },
                          operation: 0,
                          value: (() => {
                            if (
                              $state.swiperSlider.activeSlideIndex == 4 &&
                              !$state.hamyarAddComponent.goNext
                            ) {
                              return true;
                            } else {
                              return false;
                            }
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSwiperSliderLockSlides"] != null &&
                    typeof $steps["updateSwiperSliderLockSlides"] ===
                      "object" &&
                    typeof $steps["updateSwiperSliderLockSlides"].then ===
                      "function"
                  ) {
                    $steps["updateSwiperSliderLockSlides"] = await $steps[
                      "updateSwiperSliderLockSlides"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              onLockSlidesChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "swiperSlider",
                  "lockSlides"
                ]).apply(null, eventArgs);
              }}
              prevButtonSlot={
                <div className={classNames(projectcss.all, sty.freeBox__v5Mo)}>
                  <Button
                    data-plasmic-name={"button2"}
                    data-plasmic-override={overrides.button2}
                    className={classNames("__wab_instance", sty.button2)}
                    color={generateStateValueProp($state, ["button2", "color"])}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button2", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    shape={"rounded"}
                    size={"compact"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xrMl
                      )}
                    >
                      {"\u0642\u0628\u0644\u06cc"}
                    </div>
                  </Button>
                </div>
              }
              showNavigationButtons={true}
              showPagination={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__u4DXd,
                  "viewPager"
                )}
              >
                <IntroComponent
                  className={classNames(
                    "__wab_instance",
                    sty.introComponent__mnQGe
                  )}
                  image={"https://apps.liom.app/love3-2.svg"}
                  text={
                    "\u062a\u0648\u06cc \u0631\u0648\u0632\u0627\u06cc\u06cc \u06a9\u0647 \u062d\u0627\u0644\u062a \u062e\u0648\u0628 \u0646\u06cc\u0633\u062a\u060c \u06cc\u0647 \u067e\u0627\u0631\u062a\u0646\u0631 \u0622\u06af\u0627\u0647 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u062d\u0627\u0644 \u062f\u0648\u062a\u0627\u062a\u0648\u0646\u0648 \u0628\u0647\u062a\u0631 \u06a9\u0646\u0647."
                  }
                  title={
                    "\u0622\u06af\u0627\u0647\u06cc\u0650 \u067e\u0627\u0631\u062a\u0646\u0631\u060c \u062d\u0627\u0644 \u062f\u0648\u062a\u0627\u062a\u0648\u0646\u0648 \u0628\u0647\u062a\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0647."
                  }
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__iCrU,
                  "viewPager"
                )}
              >
                <IntroComponent
                  className={classNames(
                    "__wab_instance",
                    sty.introComponent___5PhuJ
                  )}
                  image={"https://apps.liom.app/love4-2.svg"}
                  text={
                    "\u0646\u0647 \u06a9\u0627\u062f\u0648\u060c \u0646\u0647 \u0633\u0648\u0631\u067e\u0631\u0627\u06cc\u0632.\u0627\u06af\u0647 \u062d\u0648\u0627\u0633\u0634 \u0628\u0647 \u062d\u0627\u0644\u062a \u0628\u0627\u0634\u0647\u060c \u062e\u0648\u062f\u0634 \u0628\u0647\u062a\u0631\u06cc\u0646 \u06a9\u0627\u062f\u0648\u0639\u0647."
                  }
                  title={
                    " \u06af\u0627\u0647\u06cc \u0641\u0642\u0637 \u062a\u0648\u062c\u0647 \u06a9\u0627\u0641\u06cc\u0647\u060c \u0646\u0647 \u0647\u062f\u06cc\u0647."
                  }
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__pPc,
                  "viewPager"
                )}
              >
                <IntroComponent
                  className={classNames(
                    "__wab_instance",
                    sty.introComponent__ibO44
                  )}
                  image={"https://apps.liom.app/love1-2.svg"}
                  text={
                    "\u06af\u0627\u0647\u06cc \u0641\u0642\u0637 \u06cc\u0647 \u062c\u0645\u0644\u0647\u200c\u06cc \u0633\u0627\u062f\u0647\u060c \u06cc\u0627 \u06cc\u0647 \u062d\u0631\u06a9\u062a \u06a9\u0648\u0686\u06cc\u06a9\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u062d\u0627\u0644\u062a\u0648 \u0627\u0632 \u0627\u06cc\u0646\u200c\u0631\u0648 \u0628\u0647 \u0627\u0648\u0646\u200c\u0631\u0648 \u06a9\u0646\u0647\u2026 "
                  }
                  title={
                    "\u062d\u0631\u0641 \u062f\u0631\u0633\u062a\u060c \u06a9\u0627\u0631 \u062f\u0631\u0633\u062a"
                  }
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__jVFuV,
                  "viewPager"
                )}
              >
                <IntroComponent
                  className={classNames(
                    "__wab_instance",
                    sty.introComponent__zPgI
                  )}
                  image={"https://apps.liom.app/love2-2.svg"}
                  text={
                    "\u0646\u06af\u0631\u0627\u0646 \u0646\u0628\u0627\u0634\u060c \u0645\u0627 \u0628\u0647\u0634 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u0645\u06cc\u200c\u06a9\u0646\u06cc\u0645."
                  }
                  title={
                    " \u0646\u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u062d\u0627\u0644\u062a\u0648 \u0628\u0631\u0627\u0634 \u062a\u0648\u0636\u06cc\u062d \u0628\u062f\u06cc\u061f"
                  }
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___2Wo28,
                  "viewPager"
                )}
              >
                <HamyarAddComponent
                  data-plasmic-name={"hamyarAddComponent"}
                  data-plasmic-override={overrides.hamyarAddComponent}
                  className={classNames(
                    "__wab_instance",
                    sty.hamyarAddComponent
                  )}
                  goNext={generateStateValueProp($state, [
                    "hamyarAddComponent",
                    "goNext"
                  ])}
                  name={generateStateValueProp($state, [
                    "hamyarAddComponent",
                    "name"
                  ])}
                  number={generateStateValueProp($state, [
                    "hamyarAddComponent",
                    "number"
                  ])}
                  onGoNextChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "hamyarAddComponent",
                      "goNext"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }

                    (async val => {
                      const $steps = {};

                      $steps["updateSwiperSliderLockSlides"] =
                        $state.swiperSlider.activeSlideIndex == 4
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["swiperSlider", "lockSlides"]
                                },
                                operation: 0,
                                value: !$state.hamyarAddComponent.goNext
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateSwiperSliderLockSlides"] != null &&
                        typeof $steps["updateSwiperSliderLockSlides"] ===
                          "object" &&
                        typeof $steps["updateSwiperSliderLockSlides"].then ===
                          "function"
                      ) {
                        $steps["updateSwiperSliderLockSlides"] = await $steps[
                          "updateSwiperSliderLockSlides"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  onNameChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "hamyarAddComponent",
                      "name"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onNumberChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "hamyarAddComponent",
                      "number"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onRelationChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "hamyarAddComponent",
                      "relation"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  relation={generateStateValueProp($state, [
                    "hamyarAddComponent",
                    "relation"
                  ])}
                  token2={(() => {
                    try {
                      return $state.token;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__nte5V,
                  "viewPager"
                )}
              >
                <SignsComponent
                  data-plasmic-name={"signsComponent"}
                  data-plasmic-override={overrides.signsComponent}
                  beforList={generateStateValueProp($state, [
                    "signsComponent",
                    "beforList"
                  ])}
                  befurList={generateStateValueProp($state, [
                    "signsComponent",
                    "befurList"
                  ])}
                  className={classNames("__wab_instance", sty.signsComponent)}
                  data={(() => {
                    try {
                      return $state.signData.result.before;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  hereditaryList={generateStateValueProp($state, [
                    "signsComponent",
                    "hereditaryList"
                  ])}
                  onBeforListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent",
                      "beforList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onBefurListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent",
                      "befurList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onHereditaryListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent",
                      "hereditaryList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onPsychologicalListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent",
                      "psychologicalList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onSignDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent",
                      "signData"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onVaginalListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent",
                      "vaginalList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onVenerealListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent",
                      "venerealList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onWomanListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent",
                      "womanList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  psychologicalList={generateStateValueProp($state, [
                    "signsComponent",
                    "psychologicalList"
                  ])}
                  signData={generateStateValueProp($state, [
                    "signsComponent",
                    "signData"
                  ])}
                  token={(() => {
                    try {
                      return $state.token;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  types={{ list: ["befor"] }}
                  vaginalList={generateStateValueProp($state, [
                    "signsComponent",
                    "vaginalList"
                  ])}
                  venerealList={generateStateValueProp($state, [
                    "signsComponent",
                    "venerealList"
                  ])}
                  womanList={generateStateValueProp($state, [
                    "signsComponent",
                    "womanList"
                  ])}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___52Efx,
                  "viewPager"
                )}
              >
                <SignsComponent
                  data-plasmic-name={"signsComponent2"}
                  data-plasmic-override={overrides.signsComponent2}
                  beforList={generateStateValueProp($state, [
                    "signsComponent2",
                    "beforList"
                  ])}
                  befurList={generateStateValueProp($state, [
                    "signsComponent2",
                    "befurList"
                  ])}
                  className={classNames("__wab_instance", sty.signsComponent2)}
                  data={(() => {
                    try {
                      return $state.signData.result.psychological;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  hereditaryList={generateStateValueProp($state, [
                    "signsComponent2",
                    "hereditaryList"
                  ])}
                  loading={(() => {
                    try {
                      return ($state.signData?.success || false) != true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  onBeforListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent2",
                      "beforList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onBefurListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent2",
                      "befurList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onHereditaryListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent2",
                      "hereditaryList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onPsychologicalListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent2",
                      "psychologicalList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onSignDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent2",
                      "signData"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onVaginalListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent2",
                      "vaginalList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onVenerealListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent2",
                      "venerealList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onWomanListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signsComponent2",
                      "womanList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  psychologicalList={generateStateValueProp($state, [
                    "signsComponent2",
                    "psychologicalList"
                  ])}
                  signData={generateStateValueProp($state, [
                    "signsComponent2",
                    "signData"
                  ])}
                  token={(() => {
                    try {
                      return $state.token;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  types={{ list: ["psychological"] }}
                  vaginalList={generateStateValueProp($state, [
                    "signsComponent2",
                    "vaginalList"
                  ])}
                  venerealList={generateStateValueProp($state, [
                    "signsComponent2",
                    "venerealList"
                  ])}
                  womanList={generateStateValueProp($state, [
                    "signsComponent2",
                    "womanList"
                  ])}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__zf5KZ,
                  "viewPager"
                )}
              >
                <ShopComponent
                  data-plasmic-name={"shopComponent"}
                  data-plasmic-override={overrides.shopComponent}
                  className={classNames("__wab_instance", sty.shopComponent)}
                  onPackValueChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "shopComponent",
                      "packValue"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onShopListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "shopComponent",
                      "shopList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  packValue={generateStateValueProp($state, [
                    "shopComponent",
                    "packValue"
                  ])}
                  shopList={generateStateValueProp($state, [
                    "shopComponent",
                    "shopList"
                  ])}
                  token={(() => {
                    try {
                      return $state.token;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
            </SwiperSlider>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "embedHtml",
    "swiperSlider",
    "hamyarAddComponent",
    "signsComponent",
    "signsComponent2",
    "shopComponent",
    "button2",
    "button"
  ],
  sideEffect: ["sideEffect"],
  embedHtml: ["embedHtml"],
  swiperSlider: [
    "swiperSlider",
    "hamyarAddComponent",
    "signsComponent",
    "signsComponent2",
    "shopComponent",
    "button2",
    "button"
  ],
  hamyarAddComponent: ["hamyarAddComponent"],
  signsComponent: ["signsComponent"],
  signsComponent2: ["signsComponent2"],
  shopComponent: ["shopComponent"],
  button2: ["button2"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  embedHtml: typeof Embed;
  swiperSlider: typeof SwiperSlider;
  hamyarAddComponent: typeof HamyarAddComponent;
  signsComponent: typeof SignsComponent;
  signsComponent2: typeof SignsComponent;
  shopComponent: typeof ShopComponent;
  button2: typeof Button;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIntroPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIntroPage__VariantsArgs;
    args?: PlasmicIntroPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIntroPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicIntroPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIntroPage__ArgProps,
          internalVariantPropNames: PlasmicIntroPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIntroPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIntroPage";
  } else {
    func.displayName = `PlasmicIntroPage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicIntroPage = Object.assign(
  // Top-level PlasmicIntroPage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    embedHtml: makeNodeComponent("embedHtml"),
    swiperSlider: makeNodeComponent("swiperSlider"),
    hamyarAddComponent: makeNodeComponent("hamyarAddComponent"),
    signsComponent: makeNodeComponent("signsComponent"),
    signsComponent2: makeNodeComponent("signsComponent2"),
    shopComponent: makeNodeComponent("shopComponent"),
    button2: makeNodeComponent("button2"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicIntroPage
    internalVariantProps: PlasmicIntroPage__VariantProps,
    internalArgProps: PlasmicIntroPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIntroPage;
/* prettier-ignore-end */
