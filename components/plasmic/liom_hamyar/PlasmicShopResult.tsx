// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 9CvmaDZqnu-C

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicShopResult.module.css"; // plasmic-import: 9CvmaDZqnu-C/css

import EmojiHappySquareSvgrepoComSvg2Icon from "./icons/PlasmicIcon__EmojiHappySquareSvgrepoComSvg2"; // plasmic-import: xOMaWtcuO4fo/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon2Icon from "../todo_mvc_app/icons/PlasmicIcon__Icon2"; // plasmic-import: EwJmqOfKx7up/icon
import EmojiSadSquareSvgrepoComSvgIcon from "./icons/PlasmicIcon__EmojiSadSquareSvgrepoComSvg"; // plasmic-import: r-c9byRGfifF/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: 8DTE5iQ0tvze/icon

createPlasmicElementProxy;

export type PlasmicShopResult__VariantMembers = {
  unnamedVariant: "unnamedVariant";
};
export type PlasmicShopResult__VariantsArgs = {
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
};
type VariantPropType = keyof PlasmicShopResult__VariantsArgs;
export const PlasmicShopResult__VariantProps = new Array<VariantPropType>(
  "unnamedVariant"
);

export type PlasmicShopResult__ArgsType = {};
type ArgPropType = keyof PlasmicShopResult__ArgsType;
export const PlasmicShopResult__ArgProps = new Array<ArgPropType>();

export type PlasmicShopResult__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  button3?: Flex__<typeof Button>;
  fragmentApiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultShopResultProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShopResult__RenderFunc(props: {
  variants: PlasmicShopResult__VariantsArgs;
  args: PlasmicShopResult__ArgsType;
  overrides: PlasmicShopResult__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "unnamedVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.status == "false";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.unnamedVariant
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "green"
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "unnamedVariant", "unnamedVariant") ? [] : "green"
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "unnamedVariant", "unnamedVariant")
            ? "sand"
            : "green"
      },
      {
        path: "fragmentApiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loadingbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootunnamedVariant]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            }
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__zoAdj, {
              [sty.freeBoxunnamedVariant__zoAdj1GaC]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
          >
            <EmojiHappySquareSvgrepoComSvg2Icon
              className={classNames(projectcss.all, sty.svg__ep8Ay)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ff4I
              )}
            >
              {"\u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0648\u0641\u0642"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___5ZiK2,
                {
                  [sty.textunnamedVariant___5ZiK21GaC]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                }
              )}
            >
              {
                "\u0627\u0632 \u0627\u0646\u062a\u062e\u0627\u0628 \u0634\u0645\u0627 \u0633\u067e\u0627\u0633\u06af\u0632\u0627\u0631\u06cc\u0645. \u0627\u0634\u062a\u0631\u0627\u06a9 \u0634\u0645\u0627 \u0627\u06a9\u0646\u0648\u0646 \u0641\u0639\u0627\u0644 \u0627\u0633\u062a \u0648 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0645\u0627 \u0628\u0647\u0631\u0647\u200c\u0645\u0646\u062f \u0634\u0648\u06cc\u062f. \u062f\u0631 \u0635\u0648\u0631\u062a \u062f\u0627\u0634\u062a\u0646 \u0647\u0631\u06af\u0648\u0646\u0647 \u0633\u0648\u0627\u0644 \u06cc\u0627 \u0646\u06cc\u0627\u0632 \u060c \u0631\u0627\u0647\u200c\u0647\u0627\u06cc \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u062f\u0631 \u062f\u0633\u062a\u0631\u0633 \u0634\u0645\u0627\u0633\u062a."
              }
            </div>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={generateStateValueProp($state, ["button", "color"])}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return (
                              "https://apps.liom.app/hamyar/?refCode=" +
                              $ctx.query.refCode +
                              "&mobile=" +
                              $ctx.query.mobile
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
              onColorChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["button", "color"])(
                  eventArgs[0]
                );
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4GcQr
                )}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </div>
            </Button>
          </Stack__>
          {(
            hasVariant($state, "unnamedVariant", "unnamedVariant")
              ? true
              : false
          ) ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___7YdS, {
                [sty.freeBoxunnamedVariant___7YdS1GaC]: hasVariant(
                  $state,
                  "unnamedVariant",
                  "unnamedVariant"
                )
              })}
            >
              <EmojiSadSquareSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__lbPmL, {
                  [sty.svgunnamedVariant__lbPmL1GaC]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kGoPd,
                  {
                    [sty.textunnamedVariant__kGoPd1GaC]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  }
                )}
              >
                {
                  "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0627\u0645\u0648\u0641\u0642"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rd3K,
                  {
                    [sty.textunnamedVariant__rd3K1GaC]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  }
                )}
              >
                {
                  "\u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0627\u062f \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0627\u0648\u0645\u062f\u0647 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0634\u062f\u0647. \u0644\u0637\u0641\u0627\u064b \u06cc\u0647 \u0628\u0627\u0631 \u062f\u06cc\u06af\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0648 \u0628\u0631\u0631\u0633\u06cc \u0648 \u062f\u0648\u0628\u0627\u0631\u0647 \u0627\u0645\u062a\u062d\u0627\u0646 \u06a9\u0646\u06cc\u062f. \u0627\u06af\u0631 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u0631\u0627\u0647\u0646\u0645\u0627\u06cc\u06cc \u062f\u0627\u0634\u062a\u06cc\u062f\u060c \u0645\u0627 \u0627\u06cc\u0646\u062c\u0627\u06cc\u06cc\u0645 \u062a\u0627 \u06a9\u0645\u06a9\u062a\u0648\u0646 \u06a9\u0646\u06cc\u0645."
                }
              </div>
              {(
                hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                hasVariant(globalVariants, "screen", "mobile")
                  ? (() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : true
              ) ? (
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2, {
                    [sty.button2unnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  color={generateStateValueProp($state, ["button2", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://api.liom.app/hamyar/shopBuy",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    appKey:
                                      "wejieiuedoioo-xxluySEJKLSjho5[afeawd2012-qigwi-1457W#idq",
                                    id: $ctx.query.buyId,
                                    offCode: $ctx.query.offCode,
                                    refCode: $ctx.query.refCode,
                                    redirectUrl:
                                      "https://apps.liom.app/shop-result?refCode=" +
                                      $state.refCode +
                                      "&mobile=" +
                                      $state.mobile +
                                      "&buyId=" +
                                      $state.buyId +
                                      "&offCode=" +
                                      $state.discountCode
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization:
                                        $state.fragmentApiRequest.data.result
                                          .token
                                    }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["goToPage"] =
                      $steps.invokeGlobalAction.data.success == true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return $steps.invokeGlobalAction.data.result;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }

                    $steps["updateLoadingbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingbtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingbtn"] != null &&
                      typeof $steps["updateLoadingbtn"] === "object" &&
                      typeof $steps["updateLoadingbtn"].then === "function"
                    ) {
                      $steps["updateLoadingbtn"] = await $steps[
                        "updateLoadingbtn"
                      ];
                    }

                    $steps["invokeGlobalAction2"] = true
                      ? (() => {
                          const actionArgs = { args: [2000] };
                          return $globalActions["Fragment.wait"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["updateLoadingbtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingbtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingbtn2"] != null &&
                      typeof $steps["updateLoadingbtn2"] === "object" &&
                      typeof $steps["updateLoadingbtn2"].then === "function"
                    ) {
                      $steps["updateLoadingbtn2"] = await $steps[
                        "updateLoadingbtn2"
                      ];
                    }
                  }}
                  onColorChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["button2", "color"])(
                      eventArgs[0]
                    );
                  }}
                >
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? (() => {
                          try {
                            return !$state.loadingbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___18V2G,
                        {
                          [sty.textunnamedVariant___18V2G1GaC]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "unnamedVariant", "unnamedVariant")
                        ? "\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"
                        : "\u062a\u0627\u06cc\u06cc\u062f"}
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant(globalVariants, "screen", "mobile")
                      ? (() => {
                          try {
                            return $state.loadingbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? (() => {
                          try {
                            return $state.loadingbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <Icon11Icon
                      className={classNames(projectcss.all, sty.svg__xSQy, {
                        [sty.svgunnamedVariant__xSQy1GaC]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      })}
                      role={"img"}
                    />
                  ) : null}
                </Button>
              ) : null}
              <Button
                data-plasmic-name={"button3"}
                data-plasmic-override={overrides.button3}
                className={classNames("__wab_instance", sty.button3, {
                  [sty.button3unnamedVariant]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                })}
                color={generateStateValueProp($state, ["button3", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return (
                                "https://apps.liom.app/hamyar/?refCode=" +
                                $ctx.query.refCode +
                                "&mobile=" +
                                $ctx.query.mobile
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
                onColorChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["button3", "color"])(
                    eventArgs[0]
                  );
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dR1Ba,
                    {
                      [sty.textunnamedVariant__dR1Ba1GaC]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0635\u0641\u062d\u0647 \u0627\u0635\u0644\u06cc"
                    : "\u062a\u0627\u06cc\u06cc\u062f"}
                </div>
              </Button>
            </Stack__>
          ) : null}
          <ApiRequest
            data-plasmic-name={"fragmentApiRequest"}
            data-plasmic-override={overrides.fragmentApiRequest}
            body={
              hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? (() => {
                    try {
                      return {
                        refCode: $ctx.query.refCode,
                        mobile: $ctx.query.mobile,
                        appKey:
                          "wejieiuedoioo-xxluySEJKLSjho5[afeawd2012-qigwi-1457W#idq"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
            className={classNames("__wab_instance", sty.fragmentApiRequest, {
              [sty.fragmentApiRequestunnamedVariant]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
            config={
              hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? { headers: { "Content-Type": "application/json" } }
                : undefined
            }
            errorDisplay={null}
            loadingDisplay={null}
            method={
              hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? "POST"
                : "GET"
            }
            onError={generateStateOnChangeProp($state, [
              "fragmentApiRequest",
              "error"
            ])}
            onLoading={generateStateOnChangeProp($state, [
              "fragmentApiRequest",
              "loading"
            ])}
            onSuccess={generateStateOnChangeProp($state, [
              "fragmentApiRequest",
              "data"
            ])}
            url={
              hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? "https://api.liom.app/hamyar/privateCalenderV2"
                : undefined
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button", "button2", "button3", "fragmentApiRequest"],
  button: ["button"],
  button2: ["button2"],
  button3: ["button3"],
  fragmentApiRequest: ["fragmentApiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
  button2: typeof Button;
  button3: typeof Button;
  fragmentApiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShopResult__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShopResult__VariantsArgs;
    args?: PlasmicShopResult__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShopResult__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicShopResult__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShopResult__ArgProps,
          internalVariantPropNames: PlasmicShopResult__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShopResult__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShopResult";
  } else {
    func.displayName = `PlasmicShopResult.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicShopResult = Object.assign(
  // Top-level PlasmicShopResult renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    button3: makeNodeComponent("button3"),
    fragmentApiRequest: makeNodeComponent("fragmentApiRequest"),

    // Metadata about props expected for PlasmicShopResult
    internalVariantProps: PlasmicShopResult__VariantProps,
    internalArgProps: PlasmicShopResult__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicShopResult;
/* prettier-ignore-end */
