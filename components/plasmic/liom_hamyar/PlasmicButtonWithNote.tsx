/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: rV9-uXl-J5jS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicButtonWithNote.module.css"; // plasmic-import: rV9-uXl-J5jS/css

import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: PX6bE9276cHV/icon

createPlasmicElementProxy;

export type PlasmicButtonWithNote__VariantMembers = {
  select: "select";
  shaoe: "circle" | "rectangle";
};
export type PlasmicButtonWithNote__VariantsArgs = {
  select?: SingleBooleanChoiceArg<"select">;
  shaoe?: MultiChoiceArg<"circle" | "rectangle">;
};
type VariantPropType = keyof PlasmicButtonWithNote__VariantsArgs;
export const PlasmicButtonWithNote__VariantProps = new Array<VariantPropType>(
  "select",
  "shaoe"
);

export type PlasmicButtonWithNote__ArgsType = {
  onSelectChange?: (val: any) => void;
  arraylist?: any;
  onArraylistChange?: (val: string) => void;
  name?: string;
  onClick?: (event: any) => void;
  html?: string;
  text?: string;
  onTextChange?: (val: string) => void;
  slot?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicButtonWithNote__ArgsType;
export const PlasmicButtonWithNote__ArgProps = new Array<ArgPropType>(
  "onSelectChange",
  "arraylist",
  "onArraylistChange",
  "name",
  "onClick",
  "html",
  "text",
  "onTextChange",
  "slot",
  "children"
);

export type PlasmicButtonWithNote__OverridesType = {
  butWithNote?: Flex__<"div">;
  butBox?: Flex__<"div">;
  text?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultButtonWithNoteProps {
  onSelectChange?: (val: any) => void;
  arraylist?: any;
  onArraylistChange?: (val: string) => void;
  name?: string;
  onClick?: (event: any) => void;
  html?: string;
  text?: string;
  onTextChange?: (val: string) => void;
  slot?: React.ReactNode;
  children?: React.ReactNode;
  select?: SingleBooleanChoiceArg<"select">;
  shaoe?: MultiChoiceArg<"circle" | "rectangle">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicButtonWithNote__RenderFunc(props: {
  variants: PlasmicButtonWithNote__VariantsArgs;
  args: PlasmicButtonWithNote__ArgsType;
  overrides: PlasmicButtonWithNote__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          html: "<svg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'> <g clip-path='url(#clip0_161_599)'> <path d='M24.2386 22.7515C24.2955 22.8127 24.3651 22.8608 24.4424 22.8926C24.5196 22.9243 24.6029 22.939 24.6864 22.9357C24.7699 22.9322 24.8517 22.9109 24.9262 22.873C25.0007 22.835 25.0661 22.7814 25.1179 22.7159C25.1723 22.6473 25.2104 22.5674 25.2295 22.482C25.2486 22.3966 25.2481 22.308 25.2282 22.2228C25.066 21.5311 23.8892 20.0797 22.3961 19.0211C21.2589 18.2094 20.2156 17.2736 19.2854 16.231C18.4347 15.2836 16.721 13.6944 14.8015 13.6944C14.568 13.6754 14.333 13.7074 14.1131 13.7882C13.8932 13.8691 13.6935 13.9967 13.5278 14.1624C13.3621 14.3281 13.2344 14.5278 13.1536 14.7478C13.0728 14.9677 13.0407 15.2026 13.0598 15.4361C13.0598 17.6082 15.5397 18.6942 19.049 19.9935C21.0143 20.7214 23.0462 21.474 24.2386 22.7515ZM19.4465 18.9023C16.4858 17.8063 14.221 16.8549 14.221 15.436C14.221 14.9966 14.3622 14.8555 14.8015 14.8555C16.2704 14.8555 17.7 16.2032 18.4214 17.0066C19.2587 17.9428 20.1812 18.7994 21.1769 19.5651C20.5964 19.3283 20.0112 19.1115 19.4465 18.9023ZM20.3477 24.7867C18.3159 25.803 15.0933 24.2216 15.0607 24.2057C14.9229 24.1373 14.7635 24.1262 14.6176 24.1751C14.4717 24.224 14.3511 24.3287 14.2822 24.4663C14.2135 24.6039 14.2023 24.7632 14.251 24.9092C14.2996 25.0551 14.4043 25.1758 14.5419 25.2447C15.8485 25.8735 17.2703 26.2274 18.7193 26.2845C19.4612 26.3003 20.1965 26.1431 20.867 25.8253C21.0044 25.7562 21.1088 25.6355 21.1572 25.4896C21.2056 25.3437 21.1942 25.1845 21.1255 25.047C21.0567 24.9094 20.9362 24.8047 20.7904 24.756C20.6446 24.7072 20.4854 24.7182 20.3477 24.7867Z' fill='#8254C6'/> <path d='M36.1636 14.0225C35.0326 10.64 32.9652 8.61606 31.3168 7.00209C30.4378 6.25386 29.6916 5.36247 29.1095 4.36557C29.0542 4.24541 29.0075 4.12144 28.9698 3.99461C28.8677 3.63012 28.6491 3.30909 28.3473 3.08057C28.0455 2.85206 27.6772 2.72862 27.2987 2.72913H3.87948C3.76386 2.72904 3.64851 2.74028 3.53508 2.76268C2.74335 2.91824 2.16418 3.60047 2.13921 4.407L2.13139 4.62116L2.10801 5.25947C2.1013 5.43689 2.09418 5.6341 2.08712 5.82647L2.07937 6.0364C2.07599 6.13095 2.07287 6.22952 2.06948 6.32733C2.06167 6.55387 2.05413 6.78538 2.04693 7.02679C2.04507 7.09035 2.04341 7.15441 2.04161 7.21908C2.03303 7.51915 2.02556 7.8291 2.01913 8.14909L2.01809 8.20435C1.92236 13.0635 2.13277 20.0745 4.4859 25.749V35.8223C4.48694 36.7838 5.26615 37.563 6.22762 37.564H27.7701C28.6667 37.5574 29.414 36.8758 29.5028 35.9836C29.7228 33.9857 30.6298 32.1261 32.0689 30.7228C34.2142 28.8655 35.7481 26.4031 36.4695 23.6586C36.5002 23.5443 36.5303 23.4297 36.5584 23.3143C36.5981 23.149 36.6369 22.9834 36.6713 22.8156C36.7269 22.5485 36.7752 22.2798 36.8163 22.0101C36.8312 21.9107 36.8431 21.81 36.8561 21.7099C36.8911 21.445 36.9193 21.1775 36.9409 20.9076C36.9489 20.8078 36.9563 20.7081 36.9624 20.6075C36.9838 20.2637 36.9985 19.9174 36.9985 19.5661C37.023 17.6852 36.7411 15.8127 36.1636 14.0225ZM28.3484 35.8574C28.3378 36.0042 28.2725 36.1417 28.1654 36.2427C28.0584 36.3437 27.9173 36.4008 27.7701 36.4029H6.22762C6.07372 36.4026 5.92617 36.3414 5.81733 36.2326C5.7085 36.1237 5.64728 35.9762 5.64707 35.8223V28.1092C7.77152 32.0565 11.7163 34.6924 16.1761 35.1447C16.5556 35.1908 16.9396 35.1114 17.2697 34.9186C17.5998 34.7258 17.8577 34.4302 18.004 34.0771C18.4057 33.2432 18.8704 32.4412 19.3942 31.678C20.4482 30.0315 21.6201 28.1897 21.8538 26.5251C21.8856 26.3358 21.9022 26.1443 21.9033 25.9524C21.9028 25.8461 21.8947 25.7401 21.8792 25.6351C21.6354 23.6497 19.1169 22.7131 16.4527 21.7267C13.1385 20.4997 9.71116 19.2309 9.71116 16.0825C9.69395 15.6967 9.75731 15.3116 9.89709 14.9516C10.0369 14.5917 10.2502 14.2647 10.5232 13.9916C10.7962 13.7186 11.1232 13.5053 11.4832 13.3656C11.8431 13.2258 12.2282 13.1624 12.614 13.1796C14.8658 13.1796 16.7651 14.7683 17.9617 16.101C18.8345 17.0797 19.8133 17.9584 20.8803 18.7207C22.0479 19.5412 23.0457 20.5798 23.819 21.7792C23.8267 21.7978 23.8354 21.816 23.845 21.8337C24.0698 22.2016 24.2005 22.6191 24.2257 23.0496C24.2726 25.1497 23.6515 27.2105 22.452 28.935L22.4404 28.9534C22.2666 29.227 22.1146 29.4671 21.9936 29.7001C21.9826 29.7214 21.9717 29.7424 21.9613 29.7636L21.9526 29.7812C21.787 30.1069 21.5142 30.55 21.2259 31.0183C20.757 31.7452 20.3329 32.5001 19.9562 33.2788C19.8835 33.4276 19.8499 33.5924 19.8584 33.7577C19.8669 33.923 19.9174 34.0835 20.005 34.224C20.0987 34.3634 20.2264 34.4766 20.3759 34.5531C20.5255 34.6296 20.6921 34.6667 20.86 34.6611H21.301C21.8877 34.6626 22.4738 34.6611 23.0604 34.6653C23.1474 34.6709 23.2343 34.6545 23.3132 34.6176C23.3922 34.5808 23.4607 34.5247 23.5122 34.4545C23.5672 34.388 23.6066 34.31 23.6277 34.2264C23.6487 34.1427 23.6508 34.0554 23.6339 33.9708L23.6331 33.9665C23.6229 33.916 23.6062 33.8671 23.5832 33.8211C23.259 33.2353 23.0007 32.6154 22.8127 31.9728C22.6662 31.403 22.7341 30.7991 23.0034 30.2761C23.1049 30.0732 23.2566 29.8342 23.4324 29.5575C24.7571 27.6501 25.4416 25.3712 25.387 23.0495V23.0399C25.3693 22.5013 25.2299 21.9737 24.9794 21.4966C25.0794 21.2253 25.1966 20.9606 25.3303 20.7043C25.7319 20.0032 25.951 19.2125 25.9676 18.4048C25.8996 17.4595 25.5694 16.5518 25.014 15.7838C24.5739 15.1925 24.3016 14.4934 24.2259 13.7603C24.2259 11.1884 24.9857 10.2767 27.1288 10.2767C28.7866 10.2767 28.8705 13.6621 28.8705 14.3408C28.9157 14.7182 29.0737 15.0731 29.3241 15.359C30.208 16.5797 30.6611 18.0597 30.6122 19.566C30.6122 22.5009 28.2681 25.176 27.2603 26.1897C27.0335 26.4171 26.8537 26.6871 26.7315 26.9841C26.6093 27.2812 26.547 27.5995 26.5482 27.9207V27.9845C26.5464 28.1623 26.509 28.3381 26.4382 28.5012C26.3674 28.6644 26.2647 28.8117 26.136 28.9344C25.7389 29.294 25.4169 29.7287 25.1887 30.2134C24.9605 30.6981 24.8306 31.2232 24.8064 31.7583C24.807 31.9038 24.8194 32.0491 24.8436 32.1926C24.8884 32.4651 24.9944 32.7239 25.1538 32.9495C25.3131 33.1751 25.5216 33.3616 25.7635 33.4949C26.0082 33.6326 26.2811 33.7129 26.5614 33.7296C26.8418 33.7464 27.1222 33.6992 27.3816 33.5916C28.0245 33.3246 28.6515 33.0211 29.2597 32.6824C28.7794 33.6819 28.4713 34.7554 28.3484 35.8574ZM16.3709 29.4305C17.5107 29.4481 18.645 29.2698 19.7244 28.9033C19.3252 29.6262 18.8607 30.3575 18.4162 31.0517C17.854 31.8712 17.3575 32.734 16.9316 33.632C16.8834 33.7516 16.7969 33.8518 16.6856 33.9169C16.5744 33.9821 16.4446 34.0085 16.3167 33.992C15.8435 33.9343 15.3898 33.8528 14.9495 33.7558C15.0113 32.2664 15.4956 30.439 16.3709 29.4305ZM16.0976 28.2747C11.9306 28.2747 9.71116 26.2518 9.71116 24.7912C9.71116 24.2172 10.332 23.63 14.9364 23.63C18.3804 23.63 20.0384 24.4068 20.5559 25.295C20.5694 25.3187 20.5817 25.3424 20.5937 25.3663C20.6161 25.4095 20.6363 25.4538 20.6542 25.4992C20.6691 25.5384 20.6806 25.5786 20.6917 25.6187C20.7011 25.6525 20.712 25.6864 20.7184 25.7201C20.7335 25.7966 20.7415 25.8744 20.7422 25.9524C20.7395 26.1218 20.7231 26.2906 20.6933 26.4574C20.5251 27.1984 19.7448 28.2747 16.0976 28.2747ZM22.137 33.5005C21.9184 33.5 21.6997 33.4998 21.4813 33.5H21.1354C21.3055 33.1549 21.5145 32.7861 21.7319 32.4207C21.8396 32.7903 21.975 33.1512 22.137 33.5005ZM35.8039 20.532C35.7983 20.6198 35.7921 20.7074 35.785 20.795C35.7639 21.0617 35.7358 21.3278 35.7004 21.593C35.6932 21.6465 35.6886 21.701 35.6808 21.7543C35.6393 22.04 35.5861 22.3207 35.5283 22.5992C35.5026 22.7208 35.4752 22.8419 35.4461 22.9626C35.4071 23.1259 35.3651 23.2884 35.32 23.4501C35.2381 23.7456 35.1463 24.0384 35.0449 24.3277C35.0242 24.3868 35.0055 24.4469 34.9841 24.5055C34.9107 24.7029 34.8326 24.8986 34.7498 25.0923C34.736 25.1248 34.7218 25.1572 34.7079 25.1895C33.9635 26.8904 32.8671 28.4142 31.4909 29.6604C31.4368 29.7098 31.3891 29.7646 31.3363 29.815C30.0309 30.9543 28.5447 31.868 26.9387 32.5182C26.8407 32.5585 26.7349 32.576 26.6293 32.5696C26.5236 32.563 26.4207 32.5326 26.3286 32.4805C26.2396 32.432 26.1628 32.3639 26.104 32.2813C26.0452 32.1988 26.006 32.1039 25.9892 32.004C25.9752 31.9228 25.9679 31.8406 25.9673 31.7582C26.0201 30.9894 26.3733 30.2722 26.9505 29.7616C27.1893 29.5311 27.3794 29.2551 27.5097 28.9499C27.64 28.6446 27.7078 28.3163 27.709 27.9845V27.9207C27.7083 27.7515 27.741 27.5838 27.8051 27.4273C27.8694 27.2707 27.9639 27.1284 28.0833 27.0085C29.1929 25.8924 31.7731 22.9333 31.7731 19.5661C31.8223 17.8283 31.3 16.1224 30.2865 14.7099C30.1797 14.5515 30.0467 14.3545 30.0314 14.3408C30.0314 11.0201 28.9735 9.11561 27.1285 9.11561C23.5262 9.11561 23.0645 11.5978 23.0645 13.7603C23.1325 14.7057 23.4627 15.6134 24.0181 16.3814C24.4582 16.9727 24.7305 17.6717 24.8061 18.4049C24.7882 19.0343 24.6101 19.6486 24.2889 20.19L24.2282 20.3131C23.4594 19.3452 22.5583 18.4903 21.5514 17.7733C20.555 17.0608 19.6408 16.2399 18.8257 15.3254C17.4709 13.8168 15.2938 12.0186 12.614 12.0186C12.3634 12.0187 12.1133 12.0402 11.8664 12.0829L11.4305 11.0383C11.3526 10.8503 11.3128 10.6487 11.3134 10.4452C11.3069 10.2416 11.3457 10.0391 11.4267 9.85222C11.5078 9.66534 11.6292 9.49871 11.7823 9.36428C12.2794 8.94717 12.5933 8.35196 12.6568 7.70618C12.7546 7.31407 12.9697 6.96109 13.2731 6.69428C13.5767 6.42747 13.9543 6.25951 14.3557 6.21279C14.6666 6.19226 14.9744 6.28395 15.2234 6.47121C14.6598 6.65899 14.1653 7.01124 13.8037 7.48258C13.4422 7.95392 13.23 8.52274 13.1946 9.11575C13.1946 9.98121 13.9923 10.8575 15.5169 10.8575C17.0869 10.7798 18.3422 9.52448 18.4198 7.95457C18.3731 7.01267 17.62 6.25947 16.6781 6.21285C16.6091 6.21285 16.5434 6.21866 16.4761 6.2217C16.2833 5.83446 15.9771 5.5151 15.5984 5.3061C15.2196 5.0971 14.7862 5.00835 14.3557 5.05168C12.9445 5.15447 11.7763 6.18858 11.503 7.57697C11.4741 7.91837 11.3132 8.23504 11.0546 8.45973C10.7666 8.70327 10.5363 9.0077 10.3802 9.35107C10.2241 9.69444 10.1463 10.0682 10.1522 10.4453C10.1519 10.8031 10.2224 11.1574 10.3597 11.4877L10.7552 12.4352C9.35401 13.0975 8.48536 14.5343 8.54997 16.0828C8.54997 19.6832 11.9924 21.2808 15.13 22.4717C15.0648 22.4711 15.0028 22.4692 14.9364 22.4692C10.8916 22.4692 8.54997 22.8491 8.54997 24.7915C8.54997 26.5759 10.5596 29.0297 14.9824 29.3876C14.2924 30.6377 13.8886 32.0255 13.8005 33.4507C9.65122 32.1361 7.09275 28.9879 5.52837 25.1782C5.44011 24.9633 5.35856 24.7438 5.27652 24.5247C5.21081 24.3493 5.14109 24.1766 5.07925 23.9989C4.94615 23.6156 4.8223 23.2292 4.7078 22.8398C4.66491 22.6952 4.62749 22.5479 4.58689 22.4021C4.50769 22.1167 4.42966 21.8307 4.35869 21.5416C4.32522 21.4059 4.29429 21.2695 4.26262 21.1332C4.18783 20.8124 4.11775 20.4905 4.05241 20.1677C4.03235 20.0682 4.01222 19.9688 3.99299 19.8691C3.91327 19.4573 3.84036 19.0442 3.77427 18.6301L3.76901 18.5986C3.27555 15.1654 3.07821 11.6962 3.17919 8.22919L3.18154 8.11194C3.18743 7.81769 3.19448 7.53388 3.20216 7.25802C3.20451 7.17592 3.20672 7.09236 3.20914 7.01184C3.21564 6.79244 3.22263 6.5825 3.22969 6.37665C3.23342 6.26771 3.23709 6.1533 3.24082 6.04801L3.24677 5.88685C3.25404 5.68847 3.26137 5.49168 3.26828 5.30803L3.29187 4.66231L3.29969 4.44844C3.30452 4.29822 3.36782 4.15583 3.47612 4.05161C3.58441 3.94739 3.72912 3.88958 3.87941 3.89051H27.2983C27.4255 3.89201 27.5488 3.93501 27.6495 4.013C27.7501 4.09098 27.8224 4.19966 27.8557 4.32255C28.2346 5.61016 29.2864 6.63978 30.5043 7.83186C32.8801 10.1582 35.8372 13.0532 35.8372 19.5663C35.8373 19.8922 35.8236 20.2132 35.8039 20.532ZM16.6781 7.37375C16.825 7.39386 16.9613 7.46149 17.0661 7.56632C17.1709 7.67115 17.2386 7.80741 17.2587 7.9543C17.1785 8.88098 16.4436 9.61586 15.5169 9.69602C14.7628 9.69602 14.3557 9.39693 14.3557 9.11547C14.3557 8.27774 15.2436 7.37375 16.6781 7.37375Z' fill='#8254C6'/> </g> <defs> <clipPath id='clip0_161_599'> <rect width='35' height='35' fill='white' transform='translate(2 2)'/> </clipPath> </defs> </svg>"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select",
        type: "writable",
        variableType: "variant",

        valueProp: "select",
        onChangeProp: "onSelectChange"
      },
      {
        path: "arraylist",
        type: "writable",
        variableType: "array",

        valueProp: "arraylist",
        onChangeProp: "onArraylistChange"
      },
      {
        path: "selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "shaoe",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.shaoe
      },
      {
        path: "text",
        type: "writable",
        variableType: "text",

        valueProp: "text",
        onChangeProp: "onTextChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"butWithNote"}
      data-plasmic-override={overrides.butWithNote}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.butWithNote,
        {
          [sty.butWithNoteselect]: hasVariant($state, "select", "select"),
          [sty.butWithNoteselect_shaoe_circle]:
            hasVariant($state, "shaoe", "circle") &&
            hasVariant($state, "select", "select"),
          [sty.butWithNoteshaoe_circle]: hasVariant($state, "shaoe", "circle"),
          [sty.butWithNoteshaoe_rectangle]: hasVariant(
            $state,
            "shaoe",
            "rectangle"
          )
        }
      )}
      onClick={async event => {
        const $steps = {};
      }}
    >
      <div
        data-plasmic-name={"butBox"}
        data-plasmic-override={overrides.butBox}
        className={classNames(projectcss.all, sty.butBox, {
          [sty.butBoxselect]: hasVariant($state, "select", "select"),
          [sty.butBoxselect_shaoe_circle]:
            hasVariant($state, "shaoe", "circle") &&
            hasVariant($state, "select", "select"),
          [sty.butBoxselect_shaoe_rectangle]:
            hasVariant($state, "shaoe", "rectangle") &&
            hasVariant($state, "select", "select"),
          [sty.butBoxselect_shaoe_rectangle_shaoe_circle]:
            hasVariant($state, "shaoe", "rectangle") &&
            hasVariant($state, "select", "select") &&
            hasVariant($state, "shaoe", "circle"),
          [sty.butBoxshaoe_circle]: hasVariant($state, "shaoe", "circle"),
          [sty.butBoxshaoe_rectangle]: hasVariant($state, "shaoe", "rectangle")
        })}
        onClick={args.onClick}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <Icon29Icon
              className={classNames(projectcss.all, sty.svg__klQw5, {
                [sty.svgshaoe_rectangle__klQw5NmugW]: hasVariant(
                  $state,
                  "shaoe",
                  "rectangle"
                )
              })}
              role={"img"}
            />
          ),

          value: args.slot
        })}
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textselect_shaoe_rectangle]:
                hasVariant($state, "shaoe", "rectangle") &&
                hasVariant($state, "select", "select"),
              [sty.textshaoe_rectangle]: hasVariant(
                $state,
                "shaoe",
                "rectangle"
              )
            }
          )}
        >
          {hasVariant($state, "shaoe", "rectangle") ? (
            <React.Fragment>
              {(() => {
                try {
                  return $state.text;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          ) : (
            "Enter some text"
          )}
        </div>
      </div>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxselect]: hasVariant($state, "select", "select"),
          [sty.freeBoxselect_shaoe_circle]:
            hasVariant($state, "shaoe", "circle") &&
            hasVariant($state, "select", "select"),
          [sty.freeBoxselect_shaoe_rectangle]:
            hasVariant($state, "shaoe", "rectangle") &&
            hasVariant($state, "select", "select"),
          [sty.freeBoxselect_shaoe_rectangle_shaoe_circle]:
            hasVariant($state, "shaoe", "rectangle") &&
            hasVariant($state, "select", "select") &&
            hasVariant($state, "shaoe", "circle"),
          [sty.freeBoxshaoe_rectangle]: hasVariant($state, "shaoe", "rectangle")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "\u0633\u0631\u062f\u0631\u062f",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenselect]: hasVariant(
              $state,
              "select",
              "select"
            ),
            [sty.slotTargetChildrenselect_shaoe_circle]:
              hasVariant($state, "shaoe", "circle") &&
              hasVariant($state, "select", "select"),
            [sty.slotTargetChildrenshaoe_circle]: hasVariant(
              $state,
              "shaoe",
              "circle"
            ),
            [sty.slotTargetChildrenshaoe_rectangle]: hasVariant(
              $state,
              "shaoe",
              "rectangle"
            )
          })
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  butWithNote: ["butWithNote", "butBox", "text", "freeBox"],
  butBox: ["butBox", "text"],
  text: ["text"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  butWithNote: "div";
  butBox: "div";
  text: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonWithNote__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonWithNote__VariantsArgs;
    args?: PlasmicButtonWithNote__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButtonWithNote__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButtonWithNote__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButtonWithNote__ArgProps,
          internalVariantPropNames: PlasmicButtonWithNote__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButtonWithNote__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "butWithNote") {
    func.displayName = "PlasmicButtonWithNote";
  } else {
    func.displayName = `PlasmicButtonWithNote.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonWithNote = Object.assign(
  // Top-level PlasmicButtonWithNote renders the root element
  makeNodeComponent("butWithNote"),
  {
    // Helper components rendering sub-elements
    butBox: makeNodeComponent("butBox"),
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicButtonWithNote
    internalVariantProps: PlasmicButtonWithNote__VariantProps,
    internalArgProps: PlasmicButtonWithNote__ArgProps
  }
);

export default PlasmicButtonWithNote;
/* prettier-ignore-end */
