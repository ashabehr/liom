// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: rV9-uXl-J5jS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicButtonWithNote.module.css"; // plasmic-import: rV9-uXl-J5jS/css

import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: PX6bE9276cHV/icon

createPlasmicElementProxy;

export type PlasmicButtonWithNote__VariantMembers = {
  select: "select";
};
export type PlasmicButtonWithNote__VariantsArgs = {
  select?: SingleBooleanChoiceArg<"select">;
};
type VariantPropType = keyof PlasmicButtonWithNote__VariantsArgs;
export const PlasmicButtonWithNote__VariantProps = new Array<VariantPropType>(
  "select"
);

export type PlasmicButtonWithNote__ArgsType = {
  onSelectChange?: (val: any) => void;
  arraylist?: any;
  onArraylistChange?: (val: string) => void;
  name?: string;
  onClick?: (event: any) => void;
  slot?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicButtonWithNote__ArgsType;
export const PlasmicButtonWithNote__ArgProps = new Array<ArgPropType>(
  "onSelectChange",
  "arraylist",
  "onArraylistChange",
  "name",
  "onClick",
  "slot",
  "children"
);

export type PlasmicButtonWithNote__OverridesType = {
  butWithNote?: Flex__<"div">;
  butBox?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultButtonWithNoteProps {
  onSelectChange?: (val: any) => void;
  arraylist?: any;
  onArraylistChange?: (val: string) => void;
  name?: string;
  onClick?: (event: any) => void;
  slot?: React.ReactNode;
  children?: React.ReactNode;
  select?: SingleBooleanChoiceArg<"select">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicButtonWithNote__RenderFunc(props: {
  variants: PlasmicButtonWithNote__VariantsArgs;
  args: PlasmicButtonWithNote__ArgsType;
  overrides: PlasmicButtonWithNote__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select",
        type: "writable",
        variableType: "variant",

        valueProp: "select",
        onChangeProp: "onSelectChange"
      },
      {
        path: "arraylist",
        type: "writable",
        variableType: "array",

        valueProp: "arraylist",
        onChangeProp: "onArraylistChange"
      },
      {
        path: "selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"butWithNote"}
      data-plasmic-override={overrides.butWithNote}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.butWithNote,
        { [sty.butWithNoteselect]: hasVariant($state, "select", "select") }
      )}
      onClick={async event => {
        const $steps = {};
      }}
    >
      <div
        data-plasmic-name={"butBox"}
        data-plasmic-override={overrides.butBox}
        className={classNames(projectcss.all, sty.butBox, {
          [sty.butBoxselect]: hasVariant($state, "select", "select")
        })}
        onClick={args.onClick}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <Icon29Icon
              className={classNames(projectcss.all, sty.svg__klQw5)}
              role={"img"}
            />
          ),

          value: args.slot
        })}
      </div>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxselect]: hasVariant($state, "select", "select")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "\u0633\u0631\u062f\u0631\u062f",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenselect]: hasVariant(
              $state,
              "select",
              "select"
            )
          })
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  butWithNote: ["butWithNote", "butBox", "freeBox"],
  butBox: ["butBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  butWithNote: "div";
  butBox: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonWithNote__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonWithNote__VariantsArgs;
    args?: PlasmicButtonWithNote__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButtonWithNote__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicButtonWithNote__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButtonWithNote__ArgProps,
          internalVariantPropNames: PlasmicButtonWithNote__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButtonWithNote__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "butWithNote") {
    func.displayName = "PlasmicButtonWithNote";
  } else {
    func.displayName = `PlasmicButtonWithNote.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonWithNote = Object.assign(
  // Top-level PlasmicButtonWithNote renders the root element
  makeNodeComponent("butWithNote"),
  {
    // Helper components rendering sub-elements
    butBox: makeNodeComponent("butBox"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicButtonWithNote
    internalVariantProps: PlasmicButtonWithNote__VariantProps,
    internalArgProps: PlasmicButtonWithNote__ArgProps
  }
);

export default PlasmicButtonWithNote;
/* prettier-ignore-end */
