/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: dIQxBnzf8Ez0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import MainHeader from "../../MainHeader"; // plasmic-import: 1YQK_N8j3twT/component
import Story from "../../Story"; // plasmic-import: SYaNz6kkwV8r/component
import RadioGrop2 from "../../RadioGrop2"; // plasmic-import: S5lwX58ZN_a3/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSocialMain.module.css"; // plasmic-import: dIQxBnzf8Ez0/css

import Icon185Icon from "./icons/PlasmicIcon__Icon185"; // plasmic-import: 3QmHdQOUm1zK/icon
import Icon222Icon from "./icons/PlasmicIcon__Icon222"; // plasmic-import: 9jhVYc_p6C9E/icon
import Icon223Icon from "./icons/PlasmicIcon__Icon223"; // plasmic-import: 0ISCKAZ1VQ2U/icon
import Icon179Icon from "./icons/PlasmicIcon__Icon179"; // plasmic-import: qlPLXoOalpf5/icon
import Icon218Icon from "./icons/PlasmicIcon__Icon218"; // plasmic-import: efUVKFegcS0a/icon

createPlasmicElementProxy;

export type PlasmicSocialMain__VariantMembers = {};
export type PlasmicSocialMain__VariantsArgs = {};
type VariantPropType = keyof PlasmicSocialMain__VariantsArgs;
export const PlasmicSocialMain__VariantProps = new Array<VariantPropType>();

export type PlasmicSocialMain__ArgsType = {};
type ArgPropType = keyof PlasmicSocialMain__ArgsType;
export const PlasmicSocialMain__ArgProps = new Array<ArgPropType>();

export type PlasmicSocialMain__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  mainHeader?: Flex__<typeof MainHeader>;
  story?: Flex__<"div">;
  groupBy?: Flex__<"div">;
  radioGrop2?: Flex__<typeof RadioGrop2>;
  getInfo?: Flex__<typeof ApiRequest>;
};

export interface DefaultSocialMainProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSocialMain__RenderFunc(props: {
  variants: PlasmicSocialMain__VariantsArgs;
  args: PlasmicSocialMain__ArgsType;
  overrides: PlasmicSocialMain__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $ctx.query.token ||
                new URLSearchParams(window.location.search).get("token")
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "getInfo.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getInfo.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getInfo.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "mainHeader.dopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "choiceType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <MainHeader
              data-plasmic-name={"mainHeader"}
              data-plasmic-override={overrides.mainHeader}
              className={classNames("__wab_instance", sty.mainHeader)}
              dopen={generateStateValueProp($state, ["mainHeader", "dopen"])}
              onDopenChange2={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "mainHeader",
                  "dopen"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              slot={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___4Bgn1)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ufykt)}
                  >
                    <Icon222Icon
                      className={classNames(projectcss.all, sty.svg__e7Ln2)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4Pi0E)}
                  >
                    <Icon223Icon
                      className={classNames(projectcss.all, sty.svg__gGyXh)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tjxlw)}
                  >
                    <Icon179Icon
                      className={classNames(projectcss.all, sty.svg__nafDg)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__egJpI)}
                  >
                    <Icon218Icon
                      className={classNames(projectcss.all, sty.svg__fAha)}
                      role={"img"}
                    />
                  </div>
                </Stack__>
              }
            />
          </section>
          <div className={classNames(projectcss.all, sty.freeBox___2BKpP)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"story"}
              data-plasmic-override={overrides.story}
              hasGap={true}
              className={classNames(projectcss.all, sty.story)}
              style={(() => {
                try {
                  return undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return [
                      2,
                      3,
                      4,
                      ,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      22,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      22,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      22
                    ];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Story
                    className={classNames("__wab_instance", sty.story__sYbB)}
                    key={currentIndex}
                  />
                );
              })}
            </Stack__>
            <div
              data-plasmic-name={"groupBy"}
              data-plasmic-override={overrides.groupBy}
              className={classNames(projectcss.all, sty.groupBy)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__leuuy)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.getInfo.data.result.buttons;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <RadioGrop2
                      data-plasmic-name={"radioGrop2"}
                      data-plasmic-override={overrides.radioGrop2}
                      className={classNames("__wab_instance", sty.radioGrop2)}
                      color={"light"}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateToken"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["token"]
                                },
                                operation: 0
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateToken"] != null &&
                          typeof $steps["updateToken"] === "object" &&
                          typeof $steps["updateToken"].then === "function"
                        ) {
                          $steps["updateToken"] = await $steps["updateToken"];
                        }
                      }}
                      selected={(() => {
                        try {
                          return $state.choiceType == currentItem.type;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      style2={"line"}
                      text={(() => {
                        try {
                          return currentItem.text;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
              </Stack__>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__rjNb)}>
            <div className={classNames(projectcss.all, sty.freeBox__ybpyR)} />

            <ApiRequest
              data-plasmic-name={"getInfo"}
              data-plasmic-override={overrides.getInfo}
              className={classNames("__wab_instance", sty.getInfo)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fr80O
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lRjE4
                  )}
                >
                  {"Loading..."}
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["getInfo", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["getInfo", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["getInfo", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              params={(() => {
                try {
                  return {
                    authorization: $state.token
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              url={"https://n8n.staas.ir/webhook/rest/social"}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "mainHeader",
    "story",
    "groupBy",
    "radioGrop2",
    "getInfo"
  ],
  section: ["section", "mainHeader"],
  mainHeader: ["mainHeader"],
  story: ["story"],
  groupBy: ["groupBy", "radioGrop2"],
  radioGrop2: ["radioGrop2"],
  getInfo: ["getInfo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  mainHeader: typeof MainHeader;
  story: "div";
  groupBy: "div";
  radioGrop2: typeof RadioGrop2;
  getInfo: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSocialMain__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSocialMain__VariantsArgs;
    args?: PlasmicSocialMain__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSocialMain__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSocialMain__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSocialMain__ArgProps,
          internalVariantPropNames: PlasmicSocialMain__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSocialMain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocialMain";
  } else {
    func.displayName = `PlasmicSocialMain.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSocialMain = Object.assign(
  // Top-level PlasmicSocialMain renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    mainHeader: makeNodeComponent("mainHeader"),
    story: makeNodeComponent("story"),
    groupBy: makeNodeComponent("groupBy"),
    radioGrop2: makeNodeComponent("radioGrop2"),
    getInfo: makeNodeComponent("getInfo"),

    // Metadata about props expected for PlasmicSocialMain
    internalVariantProps: PlasmicSocialMain__VariantProps,
    internalArgProps: PlasmicSocialMain__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSocialMain;
/* prettier-ignore-end */
