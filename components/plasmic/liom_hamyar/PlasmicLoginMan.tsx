/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 9tzYn9LtBZOf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import LoginBox from "../../LoginBox"; // plasmic-import: eH_yQdxVywwP/component
import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import RadioGrop from "../../RadioGrop"; // plasmic-import: mcNKMbL_6N75/component
import Checkbox from "../../Checkbox"; // plasmic-import: IwXl9xUH-ZMp/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import AddToHome from "../../AddToHome"; // plasmic-import: XwX6W3jU5LyW/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicLoginMan.module.css"; // plasmic-import: 9tzYn9LtBZOf/css

import Icon107Icon from "./icons/PlasmicIcon__Icon107"; // plasmic-import: HFiB--0uZfh5/icon
import Icon108Icon from "./icons/PlasmicIcon__Icon108"; // plasmic-import: P364T549veD9/icon
import Icon109Icon from "./icons/PlasmicIcon__Icon109"; // plasmic-import: rDm5lm_Drjuw/icon
import Icon110Icon from "./icons/PlasmicIcon__Icon110"; // plasmic-import: yNwSkfuj5hYK/icon
import IconIcon from "../radix_ui/icons/PlasmicIcon__Icon"; // plasmic-import: MbDRsJU0e3bw/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: rjflJ2D4OoXB/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon116Icon from "./icons/PlasmicIcon__Icon116"; // plasmic-import: VyeEoKQrulIJ/icon
import Icon117Icon from "./icons/PlasmicIcon__Icon117"; // plasmic-import: LYjQaTZDlGsf/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 32haUKsu6raY/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: 8DTE5iQ0tvze/icon

import { v4 as __lib_uuid__v4 } from "uuid";

createPlasmicElementProxy;

export type PlasmicLoginMan__VariantMembers = {
  loginPage:
    | "mobile"
    | "email"
    | "mobileCode"
    | "name"
    | "emailCode"
    | "userNameLogin"
    | "userNameSingup"
    | "selectstatus";
};
export type PlasmicLoginMan__VariantsArgs = {
  loginPage?: SingleChoiceArg<
    | "mobile"
    | "email"
    | "mobileCode"
    | "name"
    | "emailCode"
    | "userNameLogin"
    | "userNameSingup"
    | "selectstatus"
  >;
};
type VariantPropType = keyof PlasmicLoginMan__VariantsArgs;
export const PlasmicLoginMan__VariantProps = new Array<VariantPropType>(
  "loginPage"
);

export type PlasmicLoginMan__ArgsType = {};
type ArgPropType = keyof PlasmicLoginMan__ArgsType;
export const PlasmicLoginMan__ArgProps = new Array<ArgPropType>();

export type PlasmicLoginMan__OverridesType = {
  root?: Flex__<"div">;
  favicon?: Flex__<typeof Embed>;
  sideEffect?: Flex__<typeof SideEffect>;
  textInput?: Flex__<typeof TextInput>;
  antdInput?: Flex__<typeof Input>;
  button?: Flex__<typeof Button>;
  textInput7?: Flex__<typeof TextInput>;
  antdInput7?: Flex__<typeof Input>;
  textInput8?: Flex__<typeof TextInput>;
  antdInput8?: Flex__<typeof Input>;
  button2?: Flex__<typeof Button>;
  textInput9?: Flex__<typeof TextInput>;
  antdInput9?: Flex__<typeof Input>;
  textInput10?: Flex__<typeof TextInput>;
  antdInput10?: Flex__<typeof Input>;
  textInput11?: Flex__<typeof TextInput>;
  antdInput11?: Flex__<typeof Input>;
  button6?: Flex__<typeof Button>;
  textInput4?: Flex__<typeof TextInput>;
  antdInput2?: Flex__<typeof Input>;
  textInput6?: Flex__<typeof TextInput>;
  antdInput3?: Flex__<typeof Input>;
  checkbox?: Flex__<typeof Checkbox>;
  button4?: Flex__<typeof Button>;
  textInput12?: Flex__<typeof TextInput>;
  antdInput12?: Flex__<typeof Input>;
  checkbox2?: Flex__<typeof Checkbox>;
  button8?: Flex__<typeof Button>;
  button9?: Flex__<typeof Button>;
  mobileCode?: Flex__<typeof Reveal>;
  textInput3?: Flex__<typeof TextInput>;
  antdInput4?: Flex__<typeof Input>;
  button3?: Flex__<typeof Button>;
  emailCode?: Flex__<typeof Reveal>;
  textInput5?: Flex__<typeof TextInput>;
  antdInput6?: Flex__<typeof Input>;
  button7?: Flex__<typeof Button>;
  textInput2?: Flex__<typeof TextInput>;
  antdInput5?: Flex__<typeof Input>;
  button5?: Flex__<typeof Button>;
  rules?: Flex__<typeof AntdModal>;
  top?: Flex__<"div">;
  addToHome?: Flex__<typeof AddToHome>;
};

export interface DefaultLoginManProps {}

const $$ = {
  uuid: {
    v4: __lib_uuid__v4
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLoginMan__RenderFunc(props: {
  variants: PlasmicLoginMan__VariantsArgs;
  args: PlasmicLoginMan__ArgsType;
  overrides: PlasmicLoginMan__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loginPage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loginPage
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "emailCode")
            ? (() => {
                try {
                  return $state.number;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "loginPage", "mobileCode")
            ? (() => {
                try {
                  return $state.number;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ""
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "cods",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "time",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 30
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "gender",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return "male";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "antdInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "selectstatus")
            ? (() => {
                try {
                  return "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "loginPage", "name")
            ? (() => {
                try {
                  return "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "antdInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "antdInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "emailCode")
            ? (() => {
                try {
                  return $state.number;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "loginPage", "mobileCode")
            ? (() => {
                try {
                  return $state.number;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "antdInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "loadedbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "loginData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          result: { token: "" }
        })
      },
      {
        path: "typeLogin",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "email",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "emailCode")
            ? (() => {
                try {
                  return $state.number;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "loginPage", "mobileCode")
            ? (() => {
                try {
                  return $state.number;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ""
      },
      {
        path: "antdInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "emailCode")
            ? (() => {
                try {
                  return $state.email;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "loginPage", "mobileCode")
            ? (() => {
                try {
                  return $state.number;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button7.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rules.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "selectstatus")
            ? false
            : hasVariant($state, "loginPage", "name")
            ? false
            : undefined
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "username",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "userNameSingup")
            ? (() => {
                try {
                  return "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ""
      },
      {
        path: "antdInput9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "textInput10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "userNameSingup")
            ? (() => {
                try {
                  return "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ""
      },
      {
        path: "antdInput10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "userNameSingup")
            ? (() => {
                try {
                  return "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ""
      },
      {
        path: "antdInput11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "textInput12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "selectstatus")
            ? (() => {
                try {
                  return "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "loginPage", "name")
            ? (() => {
                try {
                  return "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "checkbox2.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button8.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button9.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "addHome",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("addHome") ? true : false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "button.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button2.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button6.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button4.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button8.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button9.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button7.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button5.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadedbtn;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadedbtn;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button6.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadedbtn;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button4.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadedbtn;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button8.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadedbtn;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button9.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadedbtn;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button3.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "emailCode")
            ? (() => {
                try {
                  return $state.loadedbtn;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "loginPage", "mobileCode")
            ? (() => {
                try {
                  return $state.loadedbtn;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            : undefined
      },
      {
        path: "button7.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "emailCode")
            ? (() => {
                try {
                  return $state.loadedbtn;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "loginPage", "mobileCode")
            ? (() => {
                try {
                  return $state.loadedbtn;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            : undefined
      },
      {
        path: "button5.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginPage", "email")
            ? (() => {
                try {
                  return $state.loadedbtn;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $state.loadedbtn;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicLoginMan.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicLoginMan.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicLoginMan.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root,
            {
              [sty.rootglobal_newView_newView]: hasVariant(
                globalVariants,
                "newView",
                "newView"
              ),
              [sty.rootloginPage_emailCode]: hasVariant(
                $state,
                "loginPage",
                "emailCode"
              ),
              [sty.rootloginPage_email]: hasVariant(
                $state,
                "loginPage",
                "email"
              ),
              [sty.rootloginPage_mobileCode]: hasVariant(
                $state,
                "loginPage",
                "mobileCode"
              ),
              [sty.rootloginPage_mobile]: hasVariant(
                $state,
                "loginPage",
                "mobile"
              ),
              [sty.rootloginPage_name]: hasVariant($state, "loginPage", "name"),
              [sty.rootloginPage_selectstatus]: hasVariant(
                $state,
                "loginPage",
                "selectstatus"
              ),
              [sty.rootloginPage_userNameLogin]: hasVariant(
                $state,
                "loginPage",
                "userNameLogin"
              ),
              [sty.rootloginPage_userNameSingup]: hasVariant(
                $state,
                "loginPage",
                "userNameSingup"
              )
            }
          )}
          onLoad={async event => {
            const $steps = {};
          }}
        >
          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon, {
              [sty.faviconloginPage_mobileCode]: hasVariant(
                $state,
                "loginPage",
                "mobileCode"
              ),
              [sty.faviconloginPage_name]: hasVariant(
                $state,
                "loginPage",
                "name"
              ),
              [sty.faviconloginPage_selectstatus]: hasVariant(
                $state,
                "loginPage",
                "selectstatus"
              )
            })}
            code={
              hasVariant($state, "loginPage", "mobileCode")
                ? "<script>\r\n(function() {\r\n    // \u0627\u06cc\u062c\u0627\u062f \u06cc\u0627 \u0628\u0647\u200c\u0631\u0648\u0632\u0631\u0633\u0627\u0646\u06cc favicon\r\n    var faviconLink = document.querySelector(\"link[rel='icon']\");\r\n    if (!faviconLink) {\r\n        faviconLink = document.createElement('link');\r\n        faviconLink.rel = 'icon';\r\n        document.head.appendChild(faviconLink);\r\n    }\r\n    faviconLink.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n\r\n    // \u0627\u06cc\u062c\u0627\u062f \u06cc\u0627 \u0628\u0647\u200c\u0631\u0648\u0632\u0631\u0633\u0627\u0646\u06cc apple-touch-icon\r\n    var appleTouchIconLink = document.querySelector(\"link[rel='apple-touch-icon']\");\r\n    if (!appleTouchIconLink) {\r\n        appleTouchIconLink = document.createElement('link');\r\n        appleTouchIconLink.rel = 'apple-touch-icon';\r\n        document.head.appendChild(appleTouchIconLink);\r\n    }\r\n    appleTouchIconLink.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n\r\n\r\nwindow.setCookie = (name, value, days) => {\r\n  const expires = new Date(Date.now() + days * 864e5).toUTCString();\r\n  document.cookie = ${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax;\r\n};\r\n\r\nwindow.getCookie = (name) => {\r\n  const cookies = document.cookie.split(\"; \");\r\n  for (let cookie of cookies) {\r\n    const [key, value] = cookie.split(\"=\");\r\n    if (key === name) return value;\r\n  }\r\n  return null;\r\n};\r\n</script>"
                : hasVariant(globalVariants, "screen", "mobile")
                ? "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
                : "<script>\r\n(function() {\r\n    // \u0627\u06cc\u062c\u0627\u062f \u06cc\u0627 \u0628\u0647\u200c\u0631\u0648\u0632\u0631\u0633\u0627\u0646\u06cc favicon\r\n    var faviconLink = document.querySelector(\"link[rel='icon']\");\r\n    if (!faviconLink) {\r\n        faviconLink = document.createElement('link');\r\n        faviconLink.rel = 'icon';\r\n        document.head.appendChild(faviconLink);\r\n    }\r\n    faviconLink.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n\r\n    // \u0627\u06cc\u062c\u0627\u062f \u06cc\u0627 \u0628\u0647\u200c\u0631\u0648\u0632\u0631\u0633\u0627\u0646\u06cc apple-touch-icon\r\n    var appleTouchIconLink = document.querySelector(\"link[rel='apple-touch-icon']\");\r\n    if (!appleTouchIconLink) {\r\n        appleTouchIconLink = document.createElement('link');\r\n        appleTouchIconLink.rel = 'apple-touch-icon';\r\n        document.head.appendChild(appleTouchIconLink);\r\n    }\r\n    appleTouchIconLink.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>"
            }
          />

          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect, {
              [sty.sideEffectloginPage_mobileCode]: hasVariant(
                $state,
                "loginPage",
                "mobileCode"
              ),
              [sty.sideEffectloginPage_mobile]: hasVariant(
                $state,
                "loginPage",
                "mobile"
              ),
              [sty.sideEffectloginPage_name]: hasVariant(
                $state,
                "loginPage",
                "name"
              ),
              [sty.sideEffectloginPage_selectstatus]: hasVariant(
                $state,
                "loginPage",
                "selectstatus"
              ),
              [sty.sideEffectloginPage_userNameLogin]: hasVariant(
                $state,
                "loginPage",
                "userNameLogin"
              )
            })}
            onMount={async () => {
              const $steps = {};

              $steps["runCode4"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (window.history.length == 1)
                            localStorage.setItem("addHome", "true");
                          return ($state.addHome = false);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode4"] != null &&
                typeof $steps["runCode4"] === "object" &&
                typeof $steps["runCode4"].then === "function"
              ) {
                $steps["runCode4"] = await $steps["runCode4"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                          const redirectUrl = $state.paramsObject?.redirect_url;
                          let isValid = false;
                          if (redirectUrl && redirectUrl != "") {
                            try {
                              const domain = new URL(redirectUrl).hostname;
                              isValid =
                                domain === "apps.liom.app" ||
                                domain === "tools.liom.app";
                            } catch (e) {
                              isValid = false;
                            }
                          }
                          if (redirectUrl && isValid) {
                            console.log("ok");
                          } else if (redirectUrl) {
                            window.location.href = "/expired";
                            console.log("no");
                          }
                          var getCookie = name => {
                            const cookies = document.cookie.split("; ");
                            for (let cookie of cookies) {
                              const [key, value] = cookie.split("=");
                              if (key === name) return JSON.parse(value)[0];
                            }
                            return "";
                          };
                          return ($state.token = getCookie("token"));
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateType"] =
                $state.paramsObject?.isLogin == "false"
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type"]
                        },
                        operation: 0,
                        value: "google"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateType"] != null &&
                typeof $steps["updateType"] === "object" &&
                typeof $steps["updateType"].then === "function"
              ) {
                $steps["updateType"] = await $steps["updateType"];
              }

              $steps["runCode2"] =
                $state.paramsObject.isLogin == "true"
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            var setCookie = (name, value, days) => {
                              const expires = new Date(
                                Date.now() + days * 86400000
                              ).toUTCString();
                              document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                            };
                            setCookie(
                              "token",
                              JSON.stringify([$state.paramsObject.token]),
                              100
                            );
                            return ($state.token = $state.paramsObject.token);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }

              $steps["updateLoginData"] =
                $state.paramsObject.token != null &&
                $state.paramsObject.isLogin == "false"
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loginData"]
                        },
                        operation: 0,
                        value: {
                          success: true,
                          result: {
                            token: $state.paramsObject.token,
                            userId: $state.paramsObject.userId,
                            maleUrl:
                              $state.paramsObject.sex == "male"
                                ? "https://apps.liom.app/hamyar"
                                : ""
                          }
                        }
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateLoginData"] != null &&
                typeof $steps["updateLoginData"] === "object" &&
                typeof $steps["updateLoginData"].then === "function"
              ) {
                $steps["updateLoginData"] = await $steps["updateLoginData"];
              }

              $steps["updateLoginPage"] =
                $state.paramsObject.token != null &&
                $state.paramsObject.isLogin == "false"
                  ? (() => {
                      const actionArgs = {
                        vgroup: "loginPage",
                        operation: 0,
                        value: "name"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateLoginPage"] != null &&
                typeof $steps["updateLoginPage"] === "object" &&
                typeof $steps["updateLoginPage"].then === "function"
              ) {
                $steps["updateLoginPage"] = await $steps["updateLoginPage"];
              }

              $steps["runCode3"] = false
                ? (() => {
                    const actionArgs = {
                      destination: (() => {
                        try {
                          return (() => {
                            if (
                              $state.paramsObject.redirect_url != null &&
                              $state.paramsObject.redirect_url != ""
                            ) {
                              var baseUrl =
                                window.location.href.split(
                                  "redirect_url="
                                )[1] || "";
                              baseUrl = new URL(baseUrl);
                              const origin = baseUrl.origin;
                              const pathname =
                                baseUrl.pathname.split("&")[0] || "";
                              const searchParams =
                                baseUrl.searchParams.toString();
                              baseUrl = searchParams
                                ? `${origin}${pathname}?${searchParams}`
                                : `${origin}${pathname}`;
                            } else if ($state.loginData.result.maleUrl != "")
                              var baseUrl = "https://apps.liom.app/hamyar";
                            else if (
                              $state.loginData.result.healthStatus ==
                              "pregnancy"
                            )
                              var baseUrl = "https://apps.liom.app/pregnancy/";
                            else var baseUrl = "https://apps.liom.app/main/";
                            var separator = baseUrl.includes("?")
                              ? "&token="
                              : "?token=";
                            var redirectUrl =
                              baseUrl +
                              separator +
                              ($state.loginData.result.token || "") +
                              "&userId=" +
                              $$.uuid.v4().slice(0, 4) +
                              ($state.loginData.result.userId || "") +
                              $$.uuid.v4().slice(0, 4);
                            return redirectUrl;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode3"] != null &&
                typeof $steps["runCode3"] === "object" &&
                typeof $steps["runCode3"].then === "function"
              ) {
                $steps["runCode3"] = await $steps["runCode3"];
              }

              $steps["urlToken"] =
                $state.token != ""
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://n8n.staas.ir/webhook/users/profile",
                          (() => {
                            try {
                              return {
                                redirectTo: $state.paramsObject.redirect_url
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          (() => {
                            try {
                              return {
                                headers: {
                                  Authorization: $state.token,
                                  area: "login"
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["urlToken"] != null &&
                typeof $steps["urlToken"] === "object" &&
                typeof $steps["urlToken"].then === "function"
              ) {
                $steps["urlToken"] = await $steps["urlToken"];
              }

              $steps["runCode5"] = (
                $steps.urlToken?.data?.success ? true : false
              )
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return window.open($steps.urlToken.data.url, "_self");
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode5"] != null &&
                typeof $steps["runCode5"] === "object" &&
                typeof $steps["runCode5"].then === "function"
              ) {
                $steps["runCode5"] = await $steps["runCode5"];
              }

              $steps["updateLoading"] =
                $state.token == ""
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateLoading"] != null &&
                typeof $steps["updateLoading"] === "object" &&
                typeof $steps["updateLoading"].then === "function"
              ) {
                $steps["updateLoading"] = await $steps["updateLoading"];
              }
            }}
          />

          <Reveal
            className={classNames("__wab_instance", sty.reveal___0G9S3, {
              [sty.revealglobal_newView_newView___0G9S30DHva]: hasVariant(
                globalVariants,
                "newView",
                "newView"
              ),
              [sty.revealloginPage_emailCode___0G9S3HTfDf]: hasVariant(
                $state,
                "loginPage",
                "emailCode"
              ),
              [sty.revealloginPage_email___0G9S3KkEIz]: hasVariant(
                $state,
                "loginPage",
                "email"
              ),
              [sty.revealloginPage_mobileCode___0G9S3Hp6Ne]: hasVariant(
                $state,
                "loginPage",
                "mobileCode"
              ),
              [sty.revealloginPage_mobile___0G9S3N9Ake]: hasVariant(
                $state,
                "loginPage",
                "mobile"
              ),
              [sty.revealloginPage_name___0G9S37Yteu]: hasVariant(
                $state,
                "loginPage",
                "name"
              ),
              [sty.revealloginPage_selectstatus___0G9S3ZJyl9]: hasVariant(
                $state,
                "loginPage",
                "selectstatus"
              ),
              [sty.revealloginPage_userNameLogin___0G9S3GVbwZ]: hasVariant(
                $state,
                "loginPage",
                "userNameLogin"
              ),
              [sty.revealloginPage_userNameSingup___0G9S3IiJc3]: hasVariant(
                $state,
                "loginPage",
                "userNameSingup"
              )
            })}
            effect={"fade"}
            triggerOnce={true}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___12I38, {
                [sty.freeBoxglobal_newView_newView___12I380DHva]: hasVariant(
                  globalVariants,
                  "newView",
                  "newView"
                ),
                [sty.freeBoxloginPage_emailCode___12I38HTfDf]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.freeBoxloginPage_email___12I38KkEIz]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.freeBoxloginPage_mobileCode___12I38Hp6Ne]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.freeBoxloginPage_mobile___12I38N9Ake]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.freeBoxloginPage_name___12I387Yteu]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.freeBoxloginPage_selectstatus___12I38ZJyl9]: hasVariant(
                  $state,
                  "loginPage",
                  "selectstatus"
                ),
                [sty.freeBoxloginPage_userNameLogin___12I38GVbwZ]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.freeBoxloginPage_userNameSingup___12I38IiJc3]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__q4YXs, {
                  [sty.imgglobal_newView_newView__q4YXs0DHva]: hasVariant(
                    globalVariants,
                    "newView",
                    "newView"
                  )
                })}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "80px"
                    : "100px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "80px"
                    : "100px"
                }
                src={{
                  src: "/plasmic/liom_hamyar/images/image35.png",
                  fullWidth: 1029,
                  fullHeight: 1029,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wjn9A,
                  {
                    [sty.textglobal_newView_newView__wjn9A0DHva]: hasVariant(
                      globalVariants,
                      "newView",
                      "newView"
                    ),
                    [sty.textloginPage_selectstatus__wjn9AzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    )
                  }
                )}
              >
                {"\u0644\u06cc\u0648\u0645 | Liom"}
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__naJ7P, {
                  [sty.freeBoxglobal_newView_newView__naJ7P0DHva]: hasVariant(
                    globalVariants,
                    "newView",
                    "newView"
                  ),
                  [sty.freeBoxloginPage_emailCode__naJ7PhTfDf]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_mobileCode__naJ7PHp6Ne]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_name__naJ7P7Yteu]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_selectstatus__naJ7PzJyl9]: hasVariant(
                    $state,
                    "loginPage",
                    "selectstatus"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__usck0,
                    {
                      [sty.textglobal_newView_newView__usck00DHva]: hasVariant(
                        globalVariants,
                        "newView",
                        "newView"
                      ),
                      [sty.textloginPage_emailCode__usck0HTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.textloginPage_email__usck0KkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.textloginPage_mobileCode__usck0Hp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.textloginPage_mobile__usck0N9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.textloginPage_name__usck07Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.textloginPage_selectstatus__usck0ZJyl9]: hasVariant(
                        $state,
                        "loginPage",
                        "selectstatus"
                      ),
                      [sty.textloginPage_userNameLogin__usck0GVbwZ]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.textloginPage_userNameSingup__usck0IiJc3]:
                        hasVariant($state, "loginPage", "userNameSingup")
                    }
                  )}
                >
                  {
                    "\u0628\u0631\u0627\u06cc \u0648\u0631\u0648\u062f \u06cc\u0627 \u062b\u0628\u062a \u0646\u0627\u0645 \u06cc\u06a9\u06cc \u0627\u0632 \u06af\u0632\u06cc\u0646\u0647 \u0647\u0627\u06cc \u0632\u06cc\u0631 \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646."
                  }
                </div>
                <LoginBox
                  className={classNames(
                    "__wab_instance",
                    sty.loginBox___9F4Rf,
                    {
                      [sty.loginBoxglobal_newView_newView___9F4Rf0DHva]:
                        hasVariant(globalVariants, "newView", "newView"),
                      [sty.loginBoxloginPage_emailCode___9F4RfhTfDf]:
                        hasVariant($state, "loginPage", "emailCode"),
                      [sty.loginBoxloginPage_email___9F4RfKkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.loginBoxloginPage_mobileCode___9F4RfHp6Ne]:
                        hasVariant($state, "loginPage", "mobileCode"),
                      [sty.loginBoxloginPage_mobile___9F4Rfn9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.loginBoxloginPage_selectstatus___9F4RfzJyl9]:
                        hasVariant($state, "loginPage", "selectstatus"),
                      [sty.loginBoxloginPage_userNameLogin___9F4RfGVbwZ]:
                        hasVariant($state, "loginPage", "userNameLogin"),
                      [sty.loginBoxloginPage_userNameSingup___9F4RfIiJc3]:
                        hasVariant($state, "loginPage", "userNameSingup")
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode2"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                var googleLoginUrl = "";
                                const redirectUrl =
                                  $ctx.query.redirect_url?.trim() || "";
                                const stateUrl =
                                  redirectUrl === ""
                                    ? "https://apps.liom.app/login/"
                                    : `https://apps.liom.app/login/?redirect_url=${encodeURIComponent(
                                        redirectUrl
                                      )}`;
                                const encodedState =
                                  encodeURIComponent(stateUrl);
                                const encodedRedirectUri = encodeURIComponent(
                                  "https://api.liom.app/authenticate/callback?appKey=eyiaiwkisehi20edihoMhEFLJEf@jopk56!seoS245epj445"
                                );
                                googleLoginUrl =
                                  `https://user.paziresh24.com/realms/paziresh24/protocol/openid-connect/auth` +
                                  `?client_id=liom` +
                                  `&response_type=code` +
                                  `&redirect_uri=${encodedRedirectUri}` +
                                  `&scope=openid` +
                                  `&kc_idp_hint=google` +
                                  `&state=${encodedState}`;
                                return window.open(googleLoginUrl, "_self");
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode2"] != null &&
                      typeof $steps["runCode2"] === "object" &&
                      typeof $steps["runCode2"].then === "function"
                    ) {
                      $steps["runCode2"] = await $steps["runCode2"];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return requestPermission();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fWjJd
                      )}
                    >
                      {
                        "\u0648\u0631\u0648\u062f \u0628\u0627 \u062d\u0633\u0627\u0628 \u06af\u0648\u06af\u0644"
                      }
                    </div>
                  }
                />

                <LoginBox
                  className={classNames("__wab_instance", sty.loginBox__bQgYl, {
                    [sty.loginBoxloginPage_emailCode__bQgYLhTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.loginBoxloginPage_email__bQgYlKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.loginBoxloginPage_mobileCode__bQgYlHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.loginBoxloginPage_mobile__bQgYLn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.loginBoxloginPage_name__bQgYl7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.loginBoxloginPage_selectstatus__bQgYLzJyl9]:
                      hasVariant($state, "loginPage", "selectstatus"),
                    [sty.loginBoxloginPage_userNameLogin__bQgYlgVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.loginBoxloginPage_userNameSingup__bQgYliiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: "mobile"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }

                    $steps["updateType"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["type"]
                            },
                            operation: 0,
                            value: "mobile"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateType"] != null &&
                      typeof $steps["updateType"] === "object" &&
                      typeof $steps["updateType"].then === "function"
                    ) {
                      $steps["updateType"] = await $steps["updateType"];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return requestPermission();
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tDiJ,
                        {
                          [sty.textloginPage_mobile__tDiJn9Ake]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          )
                        }
                      )}
                    >
                      {
                        "\u0648\u0631\u0648\u062f \u0628\u0627 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      }
                    </div>
                  }
                >
                  <Icon108Icon
                    className={classNames(projectcss.all, sty.svg__gXbYo)}
                    role={"img"}
                  />
                </LoginBox>
                <LoginBox
                  className={classNames("__wab_instance", sty.loginBox__hj8J)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateType"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["type"]
                            },
                            operation: 0,
                            value: "email"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateType"] != null &&
                      typeof $steps["updateType"] === "object" &&
                      typeof $steps["updateType"].then === "function"
                    ) {
                      $steps["updateType"] = await $steps["updateType"];
                    }

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: "email"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                  slot={
                    "\u0648\u0631\u0648\u062f \u0628\u0627 \u0627\u06cc\u0645\u06cc\u0644"
                  }
                >
                  <Icon109Icon
                    className={classNames(projectcss.all, sty.svg__x2A3)}
                    role={"img"}
                  />
                </LoginBox>
                <LoginBox
                  className={classNames("__wab_instance", sty.loginBox__gYpQm, {
                    [sty.loginBoxloginPage_mobileCode__gYpQmHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.loginBoxloginPage_name__gYpQm7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.loginBoxloginPage_selectstatus__gYpQMzJyl9]:
                      hasVariant($state, "loginPage", "selectstatus"),
                    [sty.loginBoxloginPage_userNameLogin__gYpQmgVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.loginBoxloginPage_userNameSingup__gYpQmiiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateType"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["type"]
                            },
                            operation: 0,
                            value: "userName"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateType"] != null &&
                      typeof $steps["updateType"] === "object" &&
                      typeof $steps["updateType"].then === "function"
                    ) {
                      $steps["updateType"] = await $steps["updateType"];
                    }

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: "userNameLogin"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return requestPermission();
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__i6CT
                      )}
                    >
                      {
                        "\u0648\u0631\u0648\u062f \u0628\u0627 \u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                      }
                    </div>
                  }
                >
                  <Icon110Icon
                    className={classNames(projectcss.all, sty.svg__wDb6J)}
                    role={"img"}
                  />
                </LoginBox>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eRozH,
                  {
                    [sty.textloginPage_name__eRozH7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.textloginPage_selectstatus__eRozHzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateType"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["type"]
                          },
                          operation: 0,
                          value: "guest"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateType"] != null &&
                    typeof $steps["updateType"] === "object" &&
                    typeof $steps["updateType"].then === "function"
                  ) {
                    $steps["updateType"] = await $steps["updateType"];
                  }

                  $steps["updateLoginPage"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "loginPage",
                          operation: 0,
                          value: "name"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoginPage"] != null &&
                    typeof $steps["updateLoginPage"] === "object" &&
                    typeof $steps["updateLoginPage"].then === "function"
                  ) {
                    $steps["updateLoginPage"] = await $steps["updateLoginPage"];
                  }
                }}
              >
                {
                  "\u0648\u0631\u0648\u062f \u0628\u0647 \u0635\u0648\u0631\u062a \u0645\u0647\u0645\u0627\u0646 >"
                }
              </div>
            </div>
          </Reveal>
          {(
            hasVariant($state, "loginPage", "selectstatus")
              ? true
              : hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__fysTl, {
                [sty.revealloginPage_emailCode__fysTLhTfDf]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.revealloginPage_email__fysTlKkEIz]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.revealloginPage_mobileCode__fysTlHp6Ne]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.revealloginPage_mobile__fysTLn9Ake]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.revealloginPage_name__fysTl7Yteu]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.revealloginPage_selectstatus__fysTLzJyl9]: hasVariant(
                  $state,
                  "loginPage",
                  "selectstatus"
                ),
                [sty.revealloginPage_userNameLogin__fysTlgVbwZ]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.revealloginPage_userNameSingup__fysTliiJc3]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__fog6D, {
                  [sty.freeBoxglobal_newView_newView__fog6D0DHva]: hasVariant(
                    globalVariants,
                    "newView",
                    "newView"
                  ),
                  [sty.freeBoxloginPage_emailCode__fog6DhTfDf]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email__fog6DKkEIz]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode__fog6DHp6Ne]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile__fog6Dn9Ake]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__fog6D7Yteu]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_selectstatus__fog6DzJyl9]: hasVariant(
                    $state,
                    "loginPage",
                    "selectstatus"
                  ),
                  [sty.freeBoxloginPage_userNameLogin__fog6DgVbwZ]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup__fog6DiiJc3]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__v7Rh3, {
                    [sty.freeBoxloginPage_emailCode__v7Rh3HTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__v7Rh3KkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__v7Rh3Hp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__v7Rh3N9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__v7Rh37Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__v7Rh3ZJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__v7Rh3GVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__v7Rh3IiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: []
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__enY3A, {
                      [sty.svgloginPage_emailCode__enY3AhTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__enY3AKkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__enY3AHp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__enY3An9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__enY3A7Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_selectstatus__enY3AzJyl9]: hasVariant(
                        $state,
                        "loginPage",
                        "selectstatus"
                      ),
                      [sty.svgloginPage_userNameLogin__enY3AgVbwZ]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__enY3AiiJc3]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___88Oh, {
                    [sty.freeBoxloginPage_emailCode___88OHhTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email___88OhKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode___88OhHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile___88OHn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name___88Oh7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus___88OHzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin___88OhgVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup___88OhiiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uuScr,
                      {
                        [sty.textloginPage_emailCode__uuScrhTfDf]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__uuScrKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__uuScrHp6Ne]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__uuScrn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__uuScr7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_selectstatus__uuScrzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.textloginPage_userNameLogin__uuScrGVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__uuScrIiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "selectstatus")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__i7JL2,
                      hasVariant($state, "loginPage", "selectstatus")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__i7JL2HTfDf]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__i7JL2KkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__i7JL2Hp6Ne]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__i7JL2N9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__i7JL27Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_selectstatus__i7JL2ZJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.freeBoxloginPage_userNameLogin__i7JL2GVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__i7JL2IiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: hasVariant($state, "loginPage", "mobile")
                            ? false
                            : false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput,
                            {
                              [sty.antdInputloginPage_email]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.antdInputloginPage_mobileCode]: hasVariant(
                                $state,
                                "loginPage",
                                "mobileCode"
                              ),
                              [sty.antdInputloginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              ),
                              [sty.antdInputloginPage_name]: hasVariant(
                                $state,
                                "loginPage",
                                "name"
                              ),
                              [sty.antdInputloginPage_selectstatus]: hasVariant(
                                $state,
                                "loginPage",
                                "selectstatus"
                              ),
                              [sty.antdInputloginPage_userNameLogin]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.antdInputloginPage_userNameSingup]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          ),
                          id: hasVariant($state, "loginPage", "mobile")
                            ? "inputMobile1"
                            : undefined,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: "9123456789",
                          size:
                            hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                              ? "large"
                              : "large",
                          type: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "tel"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "tel"
                            : hasVariant($state, "loginPage", "mobile")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput"}
                            data-plasmic-override={overrides.antdInput}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput, {
                        [sty.textInputloginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInputloginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInputloginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInputloginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInputloginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInputloginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.textInputloginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInputloginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__i1ZYh,
                              {
                                [sty.freeBoxloginPage_mobile__i1ZYhn9Ake]:
                                  hasVariant($state, "loginPage", "mobile")
                              }
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oTcX,
                              hasVariant($state, "loginPage", "selectstatus")
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? "negative"
                                : hasVariant($state, "loginPage", "emailCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "name")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "email")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobile")
                                ? "negative"
                                : undefined,
                              {
                                [sty.textloginPage_emailCode__oTcXhTfDf]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.textloginPage_email__oTcXKkEIz]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.textloginPage_mobileCode__oTcXHp6Ne]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.textloginPage_mobile__oTcXn9Ake]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.textloginPage_name__oTcX7Yteu]: hasVariant(
                                  $state,
                                  "loginPage",
                                  "name"
                                ),
                                [sty.textloginPage_selectstatus__oTcXzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  ),
                                [sty.textloginPage_userNameLogin__oTcXgVbwZ]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.textloginPage_userNameSingup__oTcXiiJc3]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                          >
                            {hasVariant($state, "loginPage", "selectstatus")
                              ? "+98 "
                              : hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                              ? "+98 "
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "emailCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "name")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobileCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "email")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobile")
                              ? "+98 "
                              : "Enter some text"}
                          </div>
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant($state, "loginPage", "selectstatus")
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "emailCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "name")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "email")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobile")
                                ? Icon111Icon
                                : "div"
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__grt1K,
                              {
                                [sty.svgloginPage_emailCode__grt1KhTfDf]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.svgloginPage_email__grt1KKkEIz]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.svgloginPage_mobileCode__grt1KHp6Ne]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.svgloginPage_mobile__grt1Kn9Ake]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.svgloginPage_name__grt1K7Yteu]: hasVariant(
                                  $state,
                                  "loginPage",
                                  "name"
                                ),
                                [sty.svgloginPage_selectstatus__grt1KzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  ),
                                [sty.svgloginPage_userNameLogin__grt1KgVbwZ]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.svgloginPage_userNameSingup__grt1KiiJc3]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                            role={"img"}
                          />
                        </React.Fragment>
                      }
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async event => {
                          const $steps = {};

                          $steps["updateNumber"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["number"]
                                  },
                                  operation: 0,
                                  value: $state.textInput.antdInputValue
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateNumber"] != null &&
                            typeof $steps["updateNumber"] === "object" &&
                            typeof $steps["updateNumber"].then === "function"
                          ) {
                            $steps["updateNumber"] = await $steps[
                              "updateNumber"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "9123456789"
                      }
                      showEndIcon={true}
                      type={
                        hasVariant($state, "loginPage", "selectstatus") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "selectstatus")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : "tel"
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </div>
                <section
                  className={classNames(projectcss.all, sty.section___1OtGo, {
                    [sty.sectionloginPage_mobile___1OtGOn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    )
                  })}
                >
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button, {
                      [sty.buttonloginPage_emailCode]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.buttonloginPage_email]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.buttonloginPage_mobileCode]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.buttonloginPage_mobile]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.buttonloginPage_name]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.buttonloginPage_selectstatus]: hasVariant(
                        $state,
                        "loginPage",
                        "selectstatus"
                      ),
                      [sty.buttonloginPage_userNameLogin]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.buttonloginPage_userNameSingup]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    color={generateStateValueProp($state, ["button", "color"])}
                    endIcon={
                      <Icon115Icon
                        className={classNames(projectcss.all, sty.svg___1Wjir)}
                        role={"img"}
                      />
                    }
                    isDisabled={
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? (() => {
                            try {
                              return (
                                !(
                                  $state.antdInput.value.length === 10 ||
                                  $state.antdInput.value.length === 11
                                ) || $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? (() => {
                            try {
                              return (
                                !(
                                  $state.antdInput.value.length === 10 ||
                                  $state.antdInput.value.length === 11
                                ) || $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "mobile")
                        ? (() => {
                            try {
                              return (
                                !(
                                  $state.antdInput.value.length === 10 ||
                                  $state.antdInput.value.length === 11
                                ) || $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                    load={generateStateValueProp($state, ["button", "load"])}
                    loading={generateStateValueProp($state, [
                      "button",
                      "loading"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadedbtn"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn"] != null &&
                        typeof $steps["updateLoadedbtn"] === "object" &&
                        typeof $steps["updateLoadedbtn"].then === "function"
                      ) {
                        $steps["updateLoadedbtn"] = await $steps[
                          "updateLoadedbtn"
                        ];
                      }

                      $steps["updateNumber"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["number"]
                              },
                              operation: 0,
                              value: $state.antdInput.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNumber"] != null &&
                        typeof $steps["updateNumber"] === "object" &&
                        typeof $steps["updateNumber"].then === "function"
                      ) {
                        $steps["updateNumber"] = await $steps["updateNumber"];
                      }

                      $steps["invokeGlobalAction2"] = (() => {
                        const phoneRegex = /^0?\d{10}$/;
                        return !phoneRegex.test($state.number);
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0635\u062d\u06cc\u062d \u0646\u06cc\u0633\u062a.",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction"] = (() => {
                        const phoneRegex = /^0?\d{10}$/;
                        return (
                          phoneRegex.test($state.number) &&
                          $state.type == "mobile"
                        );
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.liom.app/auth/signup/send-code-v2",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      type: "mobile",
                                      country: "98",
                                      smsType: "sms",
                                      data: $state.number
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["invokeGlobalAction3"] = (() => {
                        const phoneRegex = /^0?\d{10}$/;
                        return (
                          phoneRegex.test($state.number) &&
                          $state.type != "mobile"
                        );
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.liom.app/rest/user/setMobileSendCode",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      data: $state.number,
                                      smsType: "sms"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        Authorization:
                                          "Bearer " +
                                          ($state.loginData.result.token || "")
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["updateTypeLogin"] = $steps.invokeGlobalAction
                        ?.data?.result?.type
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["typeLogin"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction.data.result.type
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTypeLogin"] != null &&
                        typeof $steps["updateTypeLogin"] === "object" &&
                        typeof $steps["updateTypeLogin"].then === "function"
                      ) {
                        $steps["updateTypeLogin"] = await $steps[
                          "updateTypeLogin"
                        ];
                      }

                      $steps["updateTypeLogin2"] =
                        $state.gender == "male" &&
                        ($state.type == "userName" || $state.type == "email")
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["typeLogin"]
                                },
                                operation: 0,
                                value: "login"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateTypeLogin2"] != null &&
                        typeof $steps["updateTypeLogin2"] === "object" &&
                        typeof $steps["updateTypeLogin2"].then === "function"
                      ) {
                        $steps["updateTypeLogin2"] = await $steps[
                          "updateTypeLogin2"
                        ];
                      }

                      $steps["updateLoginPage"] =
                        $steps.invokeGlobalAction?.data?.success == true ||
                        $steps.invokeGlobalAction3?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                vgroup: "loginPage",
                                operation: 0,
                                value: "mobileCode"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateLoginPage"] != null &&
                        typeof $steps["updateLoginPage"] === "object" &&
                        typeof $steps["updateLoginPage"].then === "function"
                      ) {
                        $steps["updateLoginPage"] = await $steps[
                          "updateLoginPage"
                        ];
                      }

                      $steps["updateTime"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["time"]
                              },
                              operation: 0,
                              value: 30
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTime"] != null &&
                        typeof $steps["updateTime"] === "object" &&
                        typeof $steps["updateTime"].then === "function"
                      ) {
                        $steps["updateTime"] = await $steps["updateTime"];
                      }

                      $steps["updateTextInputValue2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTextInputValue2"] != null &&
                        typeof $steps["updateTextInputValue2"] === "object" &&
                        typeof $steps["updateTextInputValue2"].then ===
                          "function"
                      ) {
                        $steps["updateTextInputValue2"] = await $steps[
                          "updateTextInputValue2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button", "load"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button",
                          "loading"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ed7Tg,
                        {
                          [sty.textloginPage_emailCode__ed7TghTfDf]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.textloginPage_email__ed7TgKkEIz]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode__ed7TgHp6Ne]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile__ed7Tgn9Ake]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name__ed7Tg7Yteu]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_selectstatus__ed7TgzJyl9]:
                            hasVariant($state, "loginPage", "selectstatus"),
                          [sty.textloginPage_userNameLogin__ed7TgGVbwZ]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup__ed7TgIiJc3]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      {hasVariant($state, "loginPage", "selectstatus")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : "Button"}
                    </div>
                  </Button>
                </section>
              </div>
            </Reveal>
          ) : null}
          {(
            hasVariant($state, "loginPage", "selectstatus")
              ? true
              : hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__cQo75, {
                [sty.revealloginPage_emailCode__cQo75HTfDf]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.revealloginPage_email__cQo75KkEIz]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.revealloginPage_mobileCode__cQo75Hp6Ne]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.revealloginPage_mobile__cQo75N9Ake]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.revealloginPage_name__cQo757Yteu]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.revealloginPage_selectstatus__cQo75ZJyl9]: hasVariant(
                  $state,
                  "loginPage",
                  "selectstatus"
                ),
                [sty.revealloginPage_userNameLogin__cQo75GVbwZ]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.revealloginPage_userNameSingup__cQo75IiJc3]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__bo5Gv, {
                  [sty.freeBoxloginPage_emailCode__bo5GVhTfDf]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email__bo5GvKkEIz]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode__bo5GvHp6Ne]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile__bo5GVn9Ake]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__bo5Gv7Yteu]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_selectstatus__bo5GVzJyl9]: hasVariant(
                    $state,
                    "loginPage",
                    "selectstatus"
                  ),
                  [sty.freeBoxloginPage_userNameLogin__bo5GvgVbwZ]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup__bo5GviiJc3]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___6KT07, {
                    [sty.freeBoxloginPage_emailCode___6KT07HTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email___6KT07KkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode___6KT07Hp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile___6KT07N9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name___6KT077Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus___6KT07ZJyl9]:
                      hasVariant($state, "loginPage", "selectstatus"),
                    [sty.freeBoxloginPage_userNameLogin___6KT07GVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup___6KT07IiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: []
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__wHjoy, {
                      [sty.svgloginPage_emailCode__wHjoyhTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__wHjoyKkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__wHjoyHp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__wHjoyn9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__wHjoy7Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_selectstatus__wHjoyzJyl9]: hasVariant(
                        $state,
                        "loginPage",
                        "selectstatus"
                      ),
                      [sty.svgloginPage_userNameLogin__wHjoyGVbwZ]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__wHjoyIiJc3]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___6Cxpp, {
                    [sty.freeBoxloginPage_emailCode___6CxpphTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email___6CxppKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode___6CxppHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile___6Cxppn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name___6Cxpp7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus___6CxppzJyl9]:
                      hasVariant($state, "loginPage", "selectstatus"),
                    [sty.freeBoxloginPage_userNameLogin___6CxppGVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup___6CxppIiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ss899,
                      {
                        [sty.textloginPage_emailCode__ss899HTfDf]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__ss899KkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__ss899Hp6Ne]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__ss899N9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__ss8997Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_selectstatus__ss899ZJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.textloginPage_userNameLogin__ss899GVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__ss899IiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "selectstatus")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___77Oa1,
                      hasVariant($state, "loginPage", "selectstatus")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode___77Oa1HTfDf]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email___77Oa1KkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode___77Oa1Hp6Ne]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile___77Oa1N9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name___77Oa17Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_selectstatus___77Oa1ZJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.freeBoxloginPage_userNameLogin___77Oa1GVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup___77Oa1IiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput7"}
                      data-plasmic-override={overrides.textInput7}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput7,
                            {
                              [sty.antdInput7loginPage_email]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.antdInput7loginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              ),
                              [sty.antdInput7loginPage_userNameLogin]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.antdInput7loginPage_userNameSingup]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          ),
                          id: hasVariant($state, "loginPage", "userNameLogin")
                            ? "inputMobile4"
                            : undefined,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput7", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "sara_mohammadi"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "user_name"
                            : "9123456789",
                          size: "large",
                          type: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "text"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "email"
                            : hasVariant($state, "loginPage", "mobile")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput7",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput7.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput7"}
                            data-plasmic-override={overrides.antdInput7}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput7, {
                        [sty.textInput7loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput7loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput7loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput7loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput7loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput7loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.textInput7loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput7loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput7",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async event => {
                          const $steps = {};
                        }).apply(null, eventArgs);
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "9123456789"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? undefined
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? undefined
                          : true
                      }
                      showStartIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? true
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? true
                          : undefined
                      }
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "loginPage", "userNameSingup")
                              ? Icon116Icon
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? Icon116Icon
                              : SearchSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg__chI4Y,
                            {
                              [sty.svgloginPage_userNameLogin__chI4YGVbwZ]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.svgloginPage_userNameSingup__chI4YIiJc3]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          )}
                          role={"img"}
                        />
                      }
                      type={
                        hasVariant($state, "loginPage", "selectstatus") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "selectstatus")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : "tel"
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput7",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___34PZz, {
                    [sty.freeBoxloginPage_emailCode___34PZzhTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email___34PZzKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode___34PZzHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile___34PZzn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name___34PZz7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus___34PZzzJyl9]:
                      hasVariant($state, "loginPage", "selectstatus"),
                    [sty.freeBoxloginPage_userNameLogin___34PZzGVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup___34PZzIiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vJ6S9,
                      {
                        [sty.textloginPage_emailCode__vJ6S9HTfDf]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__vJ6S9KkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__vJ6S9Hp6Ne]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__vJ6S9N9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__vJ6S97Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_selectstatus__vJ6S9ZJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.textloginPage_userNameLogin__vJ6S9GVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__vJ6S9IiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "selectstatus")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__wyWBj,
                      hasVariant($state, "loginPage", "selectstatus")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__wyWBjhTfDf]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__wyWBjKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__wyWBjHp6Ne]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__wyWBjn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__wyWBj7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_selectstatus__wyWBjzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.freeBoxloginPage_userNameLogin__wyWBjGVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__wyWBjIiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput8"}
                      data-plasmic-override={overrides.textInput8}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput8,
                            {
                              [sty.antdInput8loginPage_email]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.antdInput8loginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              ),
                              [sty.antdInput8loginPage_userNameLogin]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.antdInput8loginPage_userNameSingup]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          ),
                          id: hasVariant($state, "loginPage", "userNameLogin")
                            ? "inputMobile5"
                            : undefined,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput8", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "\u0631\u0645\u0632 ..."
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                            : "9123456789",
                          size: "large",
                          type: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "password"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "password"
                            : hasVariant($state, "loginPage", "mobile")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput8",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput8.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput8"}
                            data-plasmic-override={overrides.antdInput8}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput8, {
                        [sty.textInput8loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput8loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput8loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput8loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput8loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput8loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.textInput8loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput8loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput8",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async event => {
                          const $steps = {};

                          $steps["updateNumber"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["number"]
                                  },
                                  operation: 0,
                                  value: $state.textInput.antdInputValue
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateNumber"] != null &&
                            typeof $steps["updateNumber"] === "object" &&
                            typeof $steps["updateNumber"].then === "function"
                          ) {
                            $steps["updateNumber"] = await $steps[
                              "updateNumber"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "9123456789"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? undefined
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? undefined
                          : true
                      }
                      showStartIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? true
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? true
                          : undefined
                      }
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "loginPage", "userNameSingup")
                              ? Icon117Icon
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? Icon117Icon
                              : SearchSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg__mvl1S,
                            {
                              [sty.svgloginPage_userNameLogin__mvl1SGVbwZ]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.svgloginPage_userNameSingup__mvl1SIiJc3]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          )}
                          role={"img"}
                        />
                      }
                      type={
                        hasVariant($state, "loginPage", "selectstatus") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "selectstatus")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : "tel"
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput8",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </div>
                <section
                  className={classNames(projectcss.all, sty.section__o7CNe, {
                    [sty.sectionloginPage_userNameLogin__o7CNeGVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin")
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yQxoC, {
                      [sty.freeBoxloginPage_emailCode__yQxoChTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.freeBoxloginPage_email__yQxoCKkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.freeBoxloginPage_mobileCode__yQxoCHp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.freeBoxloginPage_mobile__yQxoCn9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.freeBoxloginPage_name__yQxoC7Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.freeBoxloginPage_selectstatus__yQxoCzJyl9]:
                        hasVariant($state, "loginPage", "selectstatus"),
                      [sty.freeBoxloginPage_userNameLogin__yQxoCgVbwZ]:
                        hasVariant($state, "loginPage", "userNameLogin"),
                      [sty.freeBoxloginPage_userNameSingup__yQxoCiiJc3]:
                        hasVariant($state, "loginPage", "userNameSingup")
                    })}
                  >
                    <Button
                      data-plasmic-name={"button2"}
                      data-plasmic-override={overrides.button2}
                      className={classNames("__wab_instance", sty.button2, {
                        [sty.button2loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.button2loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.button2loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.button2loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.button2loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.button2loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.button2loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.button2loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      color={generateStateValueProp($state, [
                        "button2",
                        "color"
                      ])}
                      endIcon={
                        <Icon115Icon
                          className={classNames(projectcss.all, sty.svg__kfTb2)}
                          role={"img"}
                        />
                      }
                      isDisabled={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? (() => {
                              try {
                                return (
                                  ($state.antdInput7.value?.length < 2 &&
                                    $state.antdInput8.value.length < 7) ||
                                  $state.loadedbtn
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? (() => {
                              try {
                                return (
                                  ($state.antdInput7.value?.length < 2 &&
                                    $state.antdInput8.value.length < 7) ||
                                  $state.loadedbtn
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          : hasVariant($state, "loginPage", "mobile")
                          ? (() => {
                              try {
                                return (
                                  !(
                                    $state.antdInput7.value.length === 10 ||
                                    $state.antdInput7.value.length === 11
                                  ) || $state.loadedbtn
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          : undefined
                      }
                      load={generateStateValueProp($state, ["button2", "load"])}
                      loading={generateStateValueProp($state, [
                        "button2",
                        "loading"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoadedbtn"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadedbtn"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadedbtn"] != null &&
                          typeof $steps["updateLoadedbtn"] === "object" &&
                          typeof $steps["updateLoadedbtn"].then === "function"
                        ) {
                          $steps["updateLoadedbtn"] = await $steps[
                            "updateLoadedbtn"
                          ];
                        }

                        $steps["updateUsername"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["username"]
                                },
                                operation: 0,
                                value: $state.antdInput7.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUsername"] != null &&
                          typeof $steps["updateUsername"] === "object" &&
                          typeof $steps["updateUsername"].then === "function"
                        ) {
                          $steps["updateUsername"] = await $steps[
                            "updateUsername"
                          ];
                        }

                        $steps["updatePassword"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["password"]
                                },
                                operation: 0,
                                value: $state.antdInput8.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePassword"] != null &&
                          typeof $steps["updatePassword"] === "object" &&
                          typeof $steps["updatePassword"].then === "function"
                        ) {
                          $steps["updatePassword"] = await $steps[
                            "updatePassword"
                          ];
                        }

                        $steps["invokeGlobalAction2"] = (() => {
                          const phoneRegex = /^.{8,}$/;
                          const input = $state.password;
                          const hasPersianCharacters = /[\u0600-\u06FF]/.test(
                            input
                          );
                          return (
                            !phoneRegex.test(input) || hasPersianCharacters
                          );
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0646\u0627\u0645\u0639\u0646\u0628\u0631\u0627\u0633\u062a.",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }

                        $steps["invokeGlobalAction"] = (() => {
                          const phoneRegex = /^.{8,}$/;
                          const input = $state.password;
                          const hasPersianCharacters = /[\u0600-\u06FF]/.test(
                            input
                          );
                          return (
                            phoneRegex.test(input) && !hasPersianCharacters
                          );
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/auth/signin",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        password: $state.password,
                                        username: $state.username,
                                        gateway: $ctx.query.gateway || "",
                                        data: "",
                                        target: "calendar",
                                        version: "",
                                        device: (() => {
                                          const userAgent =
                                            window.navigator.userAgent;
                                          if (
                                            /Mobi|Android|iPhone|iPad|iPod/i.test(
                                              userAgent
                                            )
                                          ) {
                                            return "Mobile";
                                          } else if (
                                            /Tablet|iPad/i.test(userAgent)
                                          ) {
                                            return "Tablet";
                                          } else {
                                            return "Desktop";
                                          }
                                        })(),
                                        uniqueId: $$.uuid.v4(),
                                        fcm:
                                          window.localStorage.getItem(
                                            "fcmToken"
                                          ) || " ",

                                        os: (() => {
                                          const userAgent =
                                            window.navigator.userAgent;
                                          const platform =
                                            window.navigator.userAgent;
                                          if (/Windows/i.test(platform))
                                            return "Windows";
                                          if (/Mac/i.test(platform))
                                            return "macOS";
                                          if (/Linux/i.test(platform))
                                            return "Linux";
                                          if (/Android/i.test(userAgent))
                                            return "Android";
                                          if (
                                            /iPhone|iPad|iPod/i.test(userAgent)
                                          )
                                            return "iOS";
                                          return "Unknown OS";
                                        })(),
                                        osVersion: (() => {
                                          const userAgent =
                                            window.navigator.userAgent;
                                          if (/Windows NT 10.0/.test(userAgent))
                                            return "Windows 10";
                                          if (/Windows NT 6.3/.test(userAgent))
                                            return "Windows 8.1";
                                          if (/Windows NT 6.2/.test(userAgent))
                                            return "Windows 8";
                                          if (/Windows NT 6.1/.test(userAgent))
                                            return "Windows 7";
                                          if (
                                            /Mac OS X (\d+[\._]\d+)/.test(
                                              userAgent
                                            )
                                          )
                                            return `macOS ${RegExp.$1.replace(
                                              "_",
                                              "."
                                            )}`;
                                          if (
                                            /Android (\d+(\.\d+)?)/.test(
                                              userAgent
                                            )
                                          )
                                            return `Android ${RegExp.$1}`;
                                          if (
                                            /CPU (iPhone )?OS (\d+_\d+)/.test(
                                              userAgent
                                            )
                                          )
                                            return `iOS ${RegExp.$2.replace(
                                              "_",
                                              "."
                                            )}`;
                                          return "Unknown Version";
                                        })(),
                                        additionalData: {
                                          ip: "132465",
                                          name: "test1"
                                        },
                                        device_type: window.navigator.platform
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["updateLoginData"] =
                          $steps.invokeGlobalAction?.data?.success == true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loginData"]
                                  },
                                  operation: 0,
                                  value: $steps.invokeGlobalAction.data
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateLoginData"] != null &&
                          typeof $steps["updateLoginData"] === "object" &&
                          typeof $steps["updateLoginData"].then === "function"
                        ) {
                          $steps["updateLoginData"] = await $steps[
                            "updateLoginData"
                          ];
                        }

                        $steps["runCode"] =
                          $steps.invokeGlobalAction?.data?.success == true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      var setCookie = (name, value, days) => {
                                        const expires = new Date(
                                          Date.now() + days * 86400000
                                        ).toUTCString();
                                        document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                                      };
                                      return setCookie(
                                        "token",
                                        JSON.stringify([
                                          $state.loginData.result.token
                                        ]),
                                        100
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["invokeGlobalAction3"] =
                          $steps.invokeGlobalAction?.data?.success == false
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u06cc\u0627 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0646\u0627\u062f\u0631\u0633\u062a \u0627\u0633\u062a.",
                                    "bottom-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction3"] != null &&
                          typeof $steps["invokeGlobalAction3"] === "object" &&
                          typeof $steps["invokeGlobalAction3"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction3"] = await $steps[
                            "invokeGlobalAction3"
                          ];
                        }

                        $steps["goToPage"] =
                          $steps.invokeGlobalAction?.data?.success == true
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return (() => {
                                        if (
                                          $state.paramsObject.redirect_url !=
                                            null &&
                                          $state.paramsObject.redirect_url != ""
                                        ) {
                                          var baseUrl =
                                            window.location.href.split(
                                              "redirect_url="
                                            )[1] || "";
                                          baseUrl = new URL(baseUrl);
                                          const origin = baseUrl.origin;
                                          const pathname =
                                            baseUrl.pathname.split("&")[0] ||
                                            "";
                                          const searchParams =
                                            baseUrl.searchParams.toString();
                                          baseUrl = searchParams
                                            ? `${origin}${pathname}?${searchParams}`
                                            : `${origin}${pathname}`;
                                        } else if (
                                          $state.loginData.result.maleUrl != ""
                                        )
                                          var baseUrl =
                                            "https://apps.liom.app/hamyar";
                                        else if (
                                          $state.loginData.result
                                            .healthStatus == "pregnancy"
                                        )
                                          var baseUrl =
                                            "https://apps.liom.app/pregnancy/";
                                        else
                                          var baseUrl =
                                            "https://apps.liom.app/main/";
                                        var separator = baseUrl.includes("?")
                                          ? "&token="
                                          : "?token=";
                                        var redirectUrl =
                                          baseUrl +
                                          separator +
                                          ($state.loginData.result.token ||
                                            "") +
                                          "&userId=" +
                                          $$.uuid.v4().slice(0, 4) +
                                          ($state.loginData.result.userId ||
                                            "") +
                                          $$.uuid.v4().slice(0, 4);
                                        return redirectUrl;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }

                        $steps["updateTextInputValue2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadedbtn"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTextInputValue2"] != null &&
                          typeof $steps["updateTextInputValue2"] === "object" &&
                          typeof $steps["updateTextInputValue2"].then ===
                            "function"
                        ) {
                          $steps["updateTextInputValue2"] = await $steps[
                            "updateTextInputValue2"
                          ];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button2",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button2",
                            "load"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadingChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button2",
                            "loading"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3HpbU,
                          {
                            [sty.textloginPage_emailCode___3HpbUhTfDf]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_email___3HpbUKkEIz]: hasVariant(
                              $state,
                              "loginPage",
                              "email"
                            ),
                            [sty.textloginPage_mobileCode___3HpbUHp6Ne]:
                              hasVariant($state, "loginPage", "mobileCode"),
                            [sty.textloginPage_mobile___3HpbUn9Ake]: hasVariant(
                              $state,
                              "loginPage",
                              "mobile"
                            ),
                            [sty.textloginPage_name___3HpbU7Yteu]: hasVariant(
                              $state,
                              "loginPage",
                              "name"
                            ),
                            [sty.textloginPage_selectstatus___3HpbUzJyl9]:
                              hasVariant($state, "loginPage", "selectstatus"),
                            [sty.textloginPage_userNameLogin___3HpbUgVbwZ]:
                              hasVariant($state, "loginPage", "userNameLogin"),
                            [sty.textloginPage_userNameSingup___3HpbUiiJc3]:
                              hasVariant($state, "loginPage", "userNameSingup")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "selectstatus")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "name")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "email")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : "Button"}
                      </div>
                    </Button>
                  </div>
                </section>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ttJem,
                    {
                      [sty.textloginPage_emailCode__ttJemhTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.textloginPage_userNameLogin__ttJemGVbwZ]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.textloginPage_userNameSingup__ttJemIiJc3]:
                        hasVariant($state, "loginPage", "userNameSingup")
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: "userNameSingup"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  {hasVariant($state, "loginPage", "userNameSingup")
                    ? "\u0627\u06af\u0631 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0646\u062f\u0627\u0631\u06cc \u0628\u0631\u0627\u06cc \u062b\u0628\u062a \u0646\u0627\u0645 \u0627\u06cc\u0646\u062c\u0627 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646 >"
                    : hasVariant($state, "loginPage", "userNameLogin")
                    ? "\u0627\u06af\u0631 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0646\u062f\u0627\u0631\u06cc \u0628\u0631\u0627\u06cc \u062b\u0628\u062a \u0646\u0627\u0645 \u0627\u06cc\u0646\u062c\u0627 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646 >"
                    : "Enter some text"}
                </div>
              </div>
            </Reveal>
          ) : null}
          {(
            hasVariant($state, "loginPage", "selectstatus")
              ? true
              : hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__d4OCh, {
                [sty.revealloginPage_emailCode__d4OChhTfDf]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.revealloginPage_email__d4OChKkEIz]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.revealloginPage_mobileCode__d4OChHp6Ne]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.revealloginPage_mobile__d4OChn9Ake]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.revealloginPage_name__d4OCh7Yteu]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.revealloginPage_selectstatus__d4OChzJyl9]: hasVariant(
                  $state,
                  "loginPage",
                  "selectstatus"
                ),
                [sty.revealloginPage_userNameLogin__d4OChGVbwZ]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.revealloginPage_userNameSingup__d4OChIiJc3]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__oeYvG, {
                  [sty.freeBoxloginPage_emailCode__oeYvGhTfDf]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email__oeYvGKkEIz]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode__oeYvGHp6Ne]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile__oeYvGn9Ake]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__oeYvG7Yteu]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_selectstatus__oeYvGzJyl9]: hasVariant(
                    $state,
                    "loginPage",
                    "selectstatus"
                  ),
                  [sty.freeBoxloginPage_userNameLogin__oeYvGgVbwZ]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup__oeYvGiiJc3]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__fuILx, {
                    [sty.freeBoxloginPage_emailCode__fuILxhTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__fuILxKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__fuILxHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__fuILxn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__fuILx7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__fuILxzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__fuILxGVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__fuILxIiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: []
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__xoc1F, {
                      [sty.svgloginPage_emailCode__xoc1FhTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__xoc1FKkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__xoc1FHp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__xoc1Fn9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__xoc1F7Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_selectstatus__xoc1FzJyl9]: hasVariant(
                        $state,
                        "loginPage",
                        "selectstatus"
                      ),
                      [sty.svgloginPage_userNameLogin__xoc1FGVbwZ]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__xoc1FIiJc3]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__wiWqm, {
                    [sty.freeBoxloginPage_emailCode__wiWqmhTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__wiWqmKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__wiWqmHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__wiWqmn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__wiWqm7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__wiWqmzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__wiWqmGVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__wiWqmIiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wtKzo,
                      {
                        [sty.textloginPage_emailCode__wtKzOhTfDf]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__wtKzoKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__wtKzoHp6Ne]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__wtKzOn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__wtKzo7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_selectstatus__wtKzOzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.textloginPage_userNameLogin__wtKzogVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__wtKzoiiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "selectstatus")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__gvvzF,
                      hasVariant($state, "loginPage", "selectstatus")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__gvvzFhTfDf]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__gvvzFKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__gvvzFHp6Ne]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__gvvzFn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__gvvzF7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_selectstatus__gvvzFzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.freeBoxloginPage_userNameLogin__gvvzFgVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__gvvzFiiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput9"}
                      data-plasmic-override={overrides.textInput9}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput9,
                            {
                              [sty.antdInput9loginPage_email]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.antdInput9loginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              ),
                              [sty.antdInput9loginPage_userNameLogin]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.antdInput9loginPage_userNameSingup]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          ),
                          id: hasVariant($state, "loginPage", "userNameSingup")
                            ? "inputMobile6"
                            : undefined,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput9", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "user_name"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "sara_mohammadi"
                            : "9123456789",
                          size: "large",
                          type: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "email"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "text"
                            : hasVariant($state, "loginPage", "mobile")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput9",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput9.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput9"}
                            data-plasmic-override={overrides.antdInput9}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput9, {
                        [sty.textInput9loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput9loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput9loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput9loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput9loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput9loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.textInput9loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput9loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput9",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async event => {
                          const $steps = {};
                        }).apply(null, eventArgs);
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "9123456789"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? undefined
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? undefined
                          : true
                      }
                      showStartIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? true
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? true
                          : undefined
                      }
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "loginPage", "userNameSingup")
                              ? Icon116Icon
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? Icon116Icon
                              : SearchSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg__gw1YT,
                            {
                              [sty.svgloginPage_userNameLogin__gw1YTgVbwZ]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.svgloginPage_userNameSingup__gw1YTiiJc3]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          )}
                          role={"img"}
                        />
                      }
                      type={
                        hasVariant($state, "loginPage", "selectstatus") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "selectstatus")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : "tel"
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput9",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__lxw6M, {
                    [sty.freeBoxloginPage_emailCode__lxw6MhTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__lxw6MKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__lxw6MHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__lxw6Mn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__lxw6M7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__lxw6MzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__lxw6MGVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__lxw6MIiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bwisb,
                      {
                        [sty.textloginPage_emailCode__bwisbhTfDf]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__bwisbKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__bwisbHp6Ne]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__bwisbn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__bwisb7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_selectstatus__bwisbzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.textloginPage_userNameLogin__bwisbGVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__bwisbIiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "selectstatus")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u06cc\u06a9 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0628\u0627 \u062d\u062f\u0627\u0642\u0644 8 \u06a9\u0627\u0631\u0627\u06a9\u062a\u0631 \u0628\u0646\u0648\u06cc\u0633"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__cbeGe,
                      hasVariant($state, "loginPage", "selectstatus")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__cbeGehTfDf]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__cbeGeKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__cbeGeHp6Ne]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__cbeGen9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__cbeGe7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_selectstatus__cbeGezJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.freeBoxloginPage_userNameLogin__cbeGeGVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__cbeGeIiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput10"}
                      data-plasmic-override={overrides.textInput10}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput10,
                            {
                              [sty.antdInput10loginPage_email]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.antdInput10loginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              ),
                              [sty.antdInput10loginPage_userNameLogin]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.antdInput10loginPage_userNameSingup]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          ),
                          id: hasVariant($state, "loginPage", "userNameSingup")
                            ? "inputMobile7"
                            : undefined,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput10", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? " \u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "\u0631\u0645\u0632 ..."
                            : "9123456789",
                          size: "large",
                          type: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "password"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "password"
                            : hasVariant($state, "loginPage", "mobile")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput10",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput10.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput10"}
                            data-plasmic-override={overrides.antdInput10}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput10, {
                        [sty.textInput10loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput10loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput10loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput10loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput10loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput10loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.textInput10loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput10loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput10",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async event => {
                          const $steps = {};

                          $steps["updateNumber"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["number"]
                                  },
                                  operation: 0,
                                  value: $state.textInput.antdInputValue
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateNumber"] != null &&
                            typeof $steps["updateNumber"] === "object" &&
                            typeof $steps["updateNumber"].then === "function"
                          ) {
                            $steps["updateNumber"] = await $steps[
                              "updateNumber"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "9123456789"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? undefined
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? undefined
                          : true
                      }
                      showStartIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? true
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? true
                          : undefined
                      }
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "loginPage", "userNameSingup")
                              ? Icon117Icon
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? Icon117Icon
                              : SearchSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg___8Bht4,
                            {
                              [sty.svgloginPage_userNameLogin___8Bht4GVbwZ]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.svgloginPage_userNameSingup___8Bht4IiJc3]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          )}
                          role={"img"}
                        />
                      }
                      type={
                        hasVariant($state, "loginPage", "selectstatus") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "selectstatus")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : "tel"
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput10",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__f3Guq, {
                    [sty.freeBoxloginPage_emailCode__f3GuqhTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__f3GuqKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__f3GuqHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__f3Guqn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__f3Guq7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__f3GuqzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__f3GuqGVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__f3GuqIiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sRuu,
                      {
                        [sty.textloginPage_emailCode__sRuuHTfDf]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__sRuuKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__sRuuHp6Ne]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__sRuuN9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__sRuu7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_selectstatus__sRuuZJyl9]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.textloginPage_userNameLogin__sRuuGVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__sRuuIiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "selectstatus")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u062a\u06a9\u0631\u0627\u0631 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 ..."
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___7Ftg0,
                      hasVariant($state, "loginPage", "selectstatus")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode___7Ftg0HTfDf]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email___7Ftg0KkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode___7Ftg0Hp6Ne]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile___7Ftg0N9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name___7Ftg07Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_selectstatus___7Ftg0ZJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.freeBoxloginPage_userNameLogin___7Ftg0GVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup___7Ftg0IiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput11"}
                      data-plasmic-override={overrides.textInput11}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput11,
                            {
                              [sty.antdInput11loginPage_email]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.antdInput11loginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              ),
                              [sty.antdInput11loginPage_userNameLogin]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.antdInput11loginPage_userNameSingup]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          ),
                          id: hasVariant($state, "loginPage", "userNameSingup")
                            ? "inputMobile8"
                            : ``,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput11", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "\u062a\u06a9\u0631\u0627\u0631  \u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "\u0631\u0645\u0632 ..."
                            : "\u0631\u0645\u0632 ...",
                          size: "large",
                          type: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                            ? "password"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "password"
                            : hasVariant($state, "loginPage", "mobile")
                            ? "tel"
                            : "password",
                          value: generateStateValueProp($state, [
                            "antdInput11",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput11.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput11"}
                            data-plasmic-override={overrides.antdInput11}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput11, {
                        [sty.textInput11loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput11loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput11loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput11loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput11loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput11loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.textInput11loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput11loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput11",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async event => {
                          const $steps = {};

                          $steps["updateNumber"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["number"]
                                  },
                                  operation: 0,
                                  value: $state.textInput.antdInputValue
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateNumber"] != null &&
                            typeof $steps["updateNumber"] === "object" &&
                            typeof $steps["updateNumber"].then === "function"
                          ) {
                            $steps["updateNumber"] = await $steps[
                              "updateNumber"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "9123456789"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? undefined
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? undefined
                          : true
                      }
                      showStartIcon={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? true
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? true
                          : undefined
                      }
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "loginPage", "userNameSingup")
                              ? Icon117Icon
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? Icon117Icon
                              : SearchSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg__boP90,
                            {
                              [sty.svgloginPage_userNameLogin__boP90GVbwZ]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.svgloginPage_userNameSingup__boP90IiJc3]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          )}
                          role={"img"}
                        />
                      }
                      type={
                        hasVariant($state, "loginPage", "selectstatus") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "selectstatus")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : "tel"
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput11",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </div>
                <section
                  className={classNames(projectcss.all, sty.section__jPciK, {
                    [sty.sectionloginPage_userNameSingup__jPciKiiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cFp22, {
                      [sty.freeBoxloginPage_emailCode__cFp22HTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.freeBoxloginPage_email__cFp22KkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.freeBoxloginPage_mobileCode__cFp22Hp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.freeBoxloginPage_mobile__cFp22N9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.freeBoxloginPage_name__cFp227Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.freeBoxloginPage_selectstatus__cFp22ZJyl9]:
                        hasVariant($state, "loginPage", "selectstatus"),
                      [sty.freeBoxloginPage_userNameLogin__cFp22GVbwZ]:
                        hasVariant($state, "loginPage", "userNameLogin"),
                      [sty.freeBoxloginPage_userNameSingup__cFp22IiJc3]:
                        hasVariant($state, "loginPage", "userNameSingup")
                    })}
                  >
                    <Button
                      data-plasmic-name={"button6"}
                      data-plasmic-override={overrides.button6}
                      className={classNames("__wab_instance", sty.button6, {
                        [sty.button6loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.button6loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.button6loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.button6loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.button6loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.button6loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.button6loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.button6loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      color={generateStateValueProp($state, [
                        "button6",
                        "color"
                      ])}
                      endIcon={
                        <Icon115Icon
                          className={classNames(projectcss.all, sty.svg__jEqSz)}
                          role={"img"}
                        />
                      }
                      isDisabled={
                        hasVariant($state, "loginPage", "userNameSingup")
                          ? (() => {
                              try {
                                return (
                                  ($state.antdInput9.value?.length < 2 &&
                                    $state.antdInput10.value.length < 7 &&
                                    $state.antdInput11.value.length < 7) ||
                                  $state.loadedbtn
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? (() => {
                              try {
                                return (
                                  ($state.antdInput9.value?.length < 2 &&
                                    $state.antdInput10.value.length < 7) ||
                                  $state.loadedbtn
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          : hasVariant($state, "loginPage", "mobile")
                          ? (() => {
                              try {
                                return (
                                  !(
                                    $state.antdInput9.value.length === 10 ||
                                    $state.antdInput9.value.length === 11
                                  ) || $state.loadedbtn
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          : undefined
                      }
                      load={generateStateValueProp($state, ["button6", "load"])}
                      loading={generateStateValueProp($state, [
                        "button6",
                        "loading"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoadedbtn"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadedbtn"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadedbtn"] != null &&
                          typeof $steps["updateLoadedbtn"] === "object" &&
                          typeof $steps["updateLoadedbtn"].then === "function"
                        ) {
                          $steps["updateLoadedbtn"] = await $steps[
                            "updateLoadedbtn"
                          ];
                        }

                        $steps["updateUsername"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["username"]
                                },
                                operation: 0,
                                value: $state.antdInput9.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUsername"] != null &&
                          typeof $steps["updateUsername"] === "object" &&
                          typeof $steps["updateUsername"].then === "function"
                        ) {
                          $steps["updateUsername"] = await $steps[
                            "updateUsername"
                          ];
                        }

                        $steps["updatePassword"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["password"]
                                },
                                operation: 0,
                                value: $state.antdInput10.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePassword"] != null &&
                          typeof $steps["updatePassword"] === "object" &&
                          typeof $steps["updatePassword"].then === "function"
                        ) {
                          $steps["updatePassword"] = await $steps[
                            "updatePassword"
                          ];
                        }

                        $steps["invokeGlobalAction2"] = (() => {
                          const phoneRegex = /^.{8,}$/;
                          const input = $state.password;
                          const hasPersianCharacters = /[\u0600-\u06FF]/.test(
                            input
                          );
                          return (
                            !phoneRegex.test(input) || hasPersianCharacters
                          );
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0646\u0627\u0645\u0639\u0646\u0628\u0631\u0627\u0633\u062a.",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }

                        $steps["invokeGlobalAction4"] =
                          $state.password != $state.antdInput11.value
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0648 \u062a\u06a9\u0631\u0627\u0631 \u0622\u0646 \u0628\u0627\u0647\u0645 \u0645\u063a\u0627\u06cc\u0631\u062a \u062f\u0627\u0631\u062f."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction4"] != null &&
                          typeof $steps["invokeGlobalAction4"] === "object" &&
                          typeof $steps["invokeGlobalAction4"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction4"] = await $steps[
                            "invokeGlobalAction4"
                          ];
                        }

                        $steps["invokeGlobalAction"] = (() => {
                          const phoneRegex = /^.{8,}$/;
                          const input = $state.password;
                          const hasPersianCharacters = /[\u0600-\u06FF]/.test(
                            input
                          );
                          return (
                            phoneRegex.test(input) &&
                            !hasPersianCharacters &&
                            $state.password == $state.antdInput11.value
                          );
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/auth/check/username",
                                  undefined,
                                  (() => {
                                    try {
                                      return { username: $state.username };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["invokeGlobalAction3"] =
                          $steps.invokeGlobalAction?.data?.success == false
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0648\u062c\u0648\u062f \u062f\u0627\u0631\u062f. ",
                                    "bottom-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction3"] != null &&
                          typeof $steps["invokeGlobalAction3"] === "object" &&
                          typeof $steps["invokeGlobalAction3"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction3"] = await $steps[
                            "invokeGlobalAction3"
                          ];
                        }

                        $steps["updateLoginPage"] =
                          $steps.invokeGlobalAction?.data?.success == true
                            ? (() => {
                                const actionArgs = {
                                  vgroup: "loginPage",
                                  operation: 0,
                                  value: "name"
                                };
                                return (({ vgroup, value }) => {
                                  if (typeof value === "string") {
                                    value = [value];
                                  }

                                  $stateSet($state, vgroup, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateLoginPage"] != null &&
                          typeof $steps["updateLoginPage"] === "object" &&
                          typeof $steps["updateLoginPage"].then === "function"
                        ) {
                          $steps["updateLoginPage"] = await $steps[
                            "updateLoginPage"
                          ];
                        }

                        $steps["updateTextInputValue2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadedbtn"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTextInputValue2"] != null &&
                          typeof $steps["updateTextInputValue2"] === "object" &&
                          typeof $steps["updateTextInputValue2"].then ===
                            "function"
                        ) {
                          $steps["updateTextInputValue2"] = await $steps[
                            "updateTextInputValue2"
                          ];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button6",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button6",
                            "load"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadingChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button6",
                            "loading"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9SNdy,
                          {
                            [sty.textloginPage_emailCode___9SNdyhTfDf]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_email___9SNdyKkEIz]: hasVariant(
                              $state,
                              "loginPage",
                              "email"
                            ),
                            [sty.textloginPage_mobileCode___9SNdyHp6Ne]:
                              hasVariant($state, "loginPage", "mobileCode"),
                            [sty.textloginPage_mobile___9SNdyn9Ake]: hasVariant(
                              $state,
                              "loginPage",
                              "mobile"
                            ),
                            [sty.textloginPage_name___9SNdy7Yteu]: hasVariant(
                              $state,
                              "loginPage",
                              "name"
                            ),
                            [sty.textloginPage_selectstatus___9SNdyzJyl9]:
                              hasVariant($state, "loginPage", "selectstatus"),
                            [sty.textloginPage_userNameLogin___9SNdyGVbwZ]:
                              hasVariant($state, "loginPage", "userNameLogin"),
                            [sty.textloginPage_userNameSingup___9SNdyIiJc3]:
                              hasVariant($state, "loginPage", "userNameSingup")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "selectstatus")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "name")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "email")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : "Button"}
                      </div>
                    </Button>
                  </div>
                </section>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yqHs0,
                    {
                      [sty.textloginPage_emailCode__yqHs0HTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.textloginPage_userNameLogin__yqHs0GVbwZ]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.textloginPage_userNameSingup__yqHs0IiJc3]:
                        hasVariant($state, "loginPage", "userNameSingup")
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: "userNameLogin"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  {hasVariant($state, "loginPage", "userNameSingup")
                    ? "\u062f\u0631 \u0644\u06cc\u0648\u0645 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u062f\u0627\u0631\u0645 \u0645\u06cc\u062e\u0648\u0627\u0645 \u0628\u0647 \u0622\u0646 \u0648\u0631\u0648\u062f \u06a9\u0646\u0645 >"
                    : hasVariant($state, "loginPage", "userNameLogin")
                    ? "\u0627\u06af\u0631 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0646\u062f\u0627\u0631\u06cc \u0628\u0631\u0627\u06cc \u062b\u0628\u062a \u0646\u0627\u0645 \u0627\u06cc\u0646\u062c\u0627 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646 >"
                    : "Enter some text"}
                </div>
              </div>
            </Reveal>
          ) : null}
          {(
            hasVariant($state, "loginPage", "selectstatus")
              ? true
              : hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__mbcum, {
                [sty.revealloginPage_emailCode__mbcumhTfDf]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.revealloginPage_email__mbcumKkEIz]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.revealloginPage_mobileCode__mbcumHp6Ne]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.revealloginPage_mobile__mbcumn9Ake]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.revealloginPage_name__mbcum7Yteu]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.revealloginPage_selectstatus__mbcumzJyl9]: hasVariant(
                  $state,
                  "loginPage",
                  "selectstatus"
                ),
                [sty.revealloginPage_userNameLogin__mbcumGVbwZ]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.revealloginPage_userNameSingup__mbcumIiJc3]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__sDakZ, {
                  [sty.freeBoxloginPage_emailCode__sDakZhTfDf]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email__sDakZKkEIz]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode__sDakZHp6Ne]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile__sDakZn9Ake]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__sDakZ7Yteu]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_selectstatus__sDakZzJyl9]: hasVariant(
                    $state,
                    "loginPage",
                    "selectstatus"
                  ),
                  [sty.freeBoxloginPage_userNameLogin__sDakZgVbwZ]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup__sDakZiiJc3]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__c27Xc, {
                    [sty.freeBoxloginPage_emailCode__c27XchTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__c27XcKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__c27XcHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__c27Xcn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__c27Xc7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__c27XczJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__c27XcGVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__c27XcIiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__bfXwK, {
                      [sty.svgloginPage_emailCode__bfXwKhTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__bfXwKKkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__bfXwKHp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__bfXwKn9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__bfXwK7Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_selectstatus__bfXwKzJyl9]: hasVariant(
                        $state,
                        "loginPage",
                        "selectstatus"
                      ),
                      [sty.svgloginPage_userNameLogin__bfXwKgVbwZ]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__bfXwKiiJc3]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__wlUqc, {
                    [sty.freeBoxloginPage_emailCode__wlUqchTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__wlUqcKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__wlUqcHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__wlUqcn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__wlUqc7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__wlUqczJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__wlUqcGVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__wlUqcIiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nGuKs,
                      {
                        [sty.textloginPage_emailCode__nGuKshTfDf]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__nGuKsKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__nGuKsHp6Ne]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__nGuKsn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__nGuKs7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_selectstatus__nGuKszJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.textloginPage_userNameLogin__nGuKsGVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__nGuKsIiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "selectstatus")
                      ? "\u0644\u0637\u0641\u0627 \u0627\u0633\u0645\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                      : hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0644\u0637\u0641\u0627 \u0627\u0633\u0645\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__wdq0S,
                      hasVariant($state, "loginPage", "selectstatus")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__wdq0ShTfDf]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__wdq0SKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__wdq0SHp6Ne]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__wdq0Sn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__wdq0S7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_selectstatus__wdq0SzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.freeBoxloginPage_userNameLogin__wdq0SGVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__wdq0SIiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput4"}
                      data-plasmic-override={overrides.textInput4}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput2,
                            {
                              [sty.antdInput2loginPage_name]: hasVariant(
                                $state,
                                "loginPage",
                                "name"
                              ),
                              [sty.antdInput2loginPage_selectstatus]:
                                hasVariant($state, "loginPage", "selectstatus")
                            }
                          ),
                          id: hasVariant($state, "loginPage", "selectstatus")
                            ? "inputMobile2"
                            : hasVariant($state, "loginPage", "name")
                            ? "inputMobile2"
                            : undefined,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput2", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: (() => {
                            try {
                              return (() => {
                                switch ($state.gender) {
                                  case "":
                                    return "علی محمدی";
                                    break;
                                  case "female":
                                    return "سارا محمدی";
                                    break;
                                  case "male":
                                    return "علی محمدی";
                                    break;
                                  default:
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          size: "large",
                          value: generateStateValueProp($state, [
                            "antdInput2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput2.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput2"}
                            data-plasmic-override={overrides.antdInput2}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput4, {
                        [sty.textInput4loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput4loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput4loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput4loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput4loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput4loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.textInput4loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput4loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xLZaF,
                              {
                                [sty.freeBoxloginPage_name__xLZaF7Yteu]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.freeBoxloginPage_selectstatus__xLZaFzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  )
                              }
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iBzj2,
                              hasVariant($state, "loginPage", "selectstatus")
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? "negative"
                                : hasVariant($state, "loginPage", "emailCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "name")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "email")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobile")
                                ? "negative"
                                : undefined,
                              {
                                [sty.textloginPage_emailCode__iBzj2HTfDf]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.textloginPage_email__iBzj2KkEIz]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.textloginPage_mobileCode__iBzj2Hp6Ne]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.textloginPage_mobile__iBzj2N9Ake]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.textloginPage_name__iBzj27Yteu]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.textloginPage_selectstatus__iBzj2ZJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  ),
                                [sty.textloginPage_userNameLogin__iBzj2GVbwZ]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.textloginPage_userNameSingup__iBzj2IiJc3]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                          >
                            {hasVariant($state, "loginPage", "selectstatus")
                              ? "+98 "
                              : hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                              ? "+98 "
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "emailCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "name")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobileCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "email")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobile")
                              ? "+98 "
                              : "Enter some text"}
                          </div>
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant($state, "loginPage", "selectstatus")
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "emailCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "name")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "email")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobile")
                                ? Icon111Icon
                                : "div"
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__nfGCi,
                              {
                                [sty.svgloginPage_emailCode__nfGCihTfDf]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.svgloginPage_email__nfGCiKkEIz]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.svgloginPage_mobileCode__nfGCiHp6Ne]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.svgloginPage_mobile__nfGCin9Ake]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.svgloginPage_name__nfGCi7Yteu]: hasVariant(
                                  $state,
                                  "loginPage",
                                  "name"
                                ),
                                [sty.svgloginPage_selectstatus__nfGCizJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  ),
                                [sty.svgloginPage_userNameLogin__nfGCiGVbwZ]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.svgloginPage_userNameSingup__nfGCiIiJc3]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                            role={"img"}
                          />
                        </React.Fragment>
                      }
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput4",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? "\u0645\u062b\u0644\u0627: \u0639\u0644\u06cc \u0645\u062d\u0645\u062f\u06cc"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "\u0645\u062b\u0644\u0627: \u0639\u0644\u06cc \u0645\u062d\u0645\u062f\u06cc"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : ``
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? undefined
                          : hasVariant($state, "loginPage", "name")
                          ? undefined
                          : true
                      }
                      type={
                        hasVariant($state, "loginPage", "selectstatus") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "text"
                          : hasVariant($state, "loginPage", "selectstatus")
                          ? "text"
                          : hasVariant($state, "loginPage", "userNameSingup") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "text"
                          : hasVariant($state, "loginPage", "name")
                          ? "text"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : undefined
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput4",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__klmXa, {
                    [sty.freeBoxloginPage_emailCode__klmXAhTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__klmXaKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__klmXaHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__klmXAn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__klmXa7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__klmXAzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__klmXagVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__klmXaiiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iPvxj,
                      {
                        [sty.textloginPage_emailCode__iPvxjhTfDf]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__iPvxjKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__iPvxjHp6Ne]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__iPvxjn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__iPvxj7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_selectstatus__iPvxjzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.textloginPage_userNameLogin__iPvxjGVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__iPvxjIiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "selectstatus")
                      ? "\u0644\u0637\u0641\u0627 \u062c\u0646\u0633\u06cc\u062a \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                      : hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0644\u0637\u0641\u0627 \u062c\u0646\u0633\u06cc\u062a \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__uvmnJ,
                      hasVariant($state, "loginPage", "selectstatus")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__uvmnJhTfDf]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__uvmnJKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__uvmnJHp6Ne]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__uvmnJn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__uvmnJ7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_selectstatus__uvmnJzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.freeBoxloginPage_userNameLogin__uvmnJgVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__uvmnJiiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [
                            { value: "female", label: "زن" },
                            { value: "male", label: "مرد ( همیار قاعدگی )" }
                          ];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <RadioGrop
                          className={classNames(
                            "__wab_instance",
                            sty.radioGrop__eoO30,
                            {
                              [sty.radioGroploginPage_emailCode__eoO30HTfDf]:
                                hasVariant($state, "loginPage", "emailCode"),
                              [sty.radioGroploginPage_mobileCode__eoO30Hp6Ne]:
                                hasVariant($state, "loginPage", "mobileCode"),
                              [sty.radioGroploginPage_name__eoO307Yteu]:
                                hasVariant($state, "loginPage", "name"),
                              [sty.radioGroploginPage_selectstatus__eoO30ZJyl9]:
                                hasVariant($state, "loginPage", "selectstatus"),
                              [sty.radioGroploginPage_userNameLogin__eoO30GVbwZ]:
                                hasVariant($state, "loginPage", "userNameLogin")
                            }
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateGender"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["gender"]
                                    },
                                    operation: 0,
                                    value: currentItem.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateGender"] != null &&
                              typeof $steps["updateGender"] === "object" &&
                              typeof $steps["updateGender"].then === "function"
                            ) {
                              $steps["updateGender"] = await $steps[
                                "updateGender"
                              ];
                            }
                          }}
                          selected={(() => {
                            try {
                              return currentItem.value == $state.gender;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0HxGa,
                              {
                                [sty.textloginPage_name___0HxGa7Yteu]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.textloginPage_selectstatus___0HxGAzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  )
                              }
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.label;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </RadioGrop>
                      );
                    })}
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__zQoT, {
                    [sty.freeBoxloginPage_emailCode__zQoThTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__zQoTKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__zQoTHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__zQoTn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__zQoT7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__zQoTzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__zQoTgVbwZ]: hasVariant(
                      $state,
                      "loginPage",
                      "userNameLogin"
                    ),
                    [sty.freeBoxloginPage_userNameSingup__zQoTiiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9IMzo,
                      {
                        [sty.textloginPage_emailCode___9IMzOhTfDf]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email___9IMzoKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode___9IMzoHp6Ne]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile___9IMzOn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name___9IMzo7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_selectstatus___9IMzOzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.textloginPage_userNameLogin___9IMzogVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup___9IMzoiiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "selectstatus")
                      ? "\u0627\u06af\u0647 \u06a9\u062f \u0645\u0639\u0631\u0641 \u062f\u0627\u0631\u06cc\u060c \u0627\u06cc\u0646\u062c\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646 (\u0627\u062e\u062a\u06cc\u0627\u0631\u06cc)"
                      : hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0627\u06af\u0647 \u06a9\u062f \u0645\u0639\u0631\u0641 \u062f\u0627\u0631\u06cc\u060c \u0627\u06cc\u0646\u062c\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646 (\u0627\u062e\u062a\u06cc\u0627\u0631\u06cc)"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__zHb7K,
                      hasVariant($state, "loginPage", "selectstatus")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__zHb7KhTfDf]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__zHb7KKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__zHb7KHp6Ne]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__zHb7Kn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__zHb7K7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_selectstatus__zHb7KzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.freeBoxloginPage_userNameLogin__zHb7KgVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__zHb7KiiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput6"}
                      data-plasmic-override={overrides.textInput6}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput3,
                            {
                              [sty.antdInput3loginPage_name]: hasVariant(
                                $state,
                                "loginPage",
                                "name"
                              ),
                              [sty.antdInput3loginPage_selectstatus]:
                                hasVariant($state, "loginPage", "selectstatus"),
                              [sty.antdInput3loginPage_userNameLogin]:
                                hasVariant($state, "loginPage", "userNameLogin")
                            }
                          ),
                          id: hasVariant($state, "loginPage", "selectstatus")
                            ? "inputMobile3"
                            : hasVariant($state, "loginPage", "name")
                            ? "inputMobile3"
                            : undefined,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput3", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          size: "large",
                          value: generateStateValueProp($state, [
                            "antdInput3",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput3.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput3"}
                            data-plasmic-override={overrides.antdInput3}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput6, {
                        [sty.textInput6loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput6loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput6loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput6loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput6loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput6loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.textInput6loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput6loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pSmw,
                              {
                                [sty.freeBoxloginPage_name__pSmw7Yteu]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.freeBoxloginPage_selectstatus__pSmwzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  )
                              }
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hKVoS,
                              hasVariant($state, "loginPage", "selectstatus")
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? "negative"
                                : hasVariant($state, "loginPage", "emailCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "name")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "email")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobile")
                                ? "negative"
                                : undefined,
                              {
                                [sty.textloginPage_emailCode__hKVoShTfDf]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.textloginPage_email__hKVoSKkEIz]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.textloginPage_mobileCode__hKVoSHp6Ne]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.textloginPage_mobile__hKVoSn9Ake]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.textloginPage_name__hKVoS7Yteu]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.textloginPage_selectstatus__hKVoSzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  ),
                                [sty.textloginPage_userNameLogin__hKVoSgVbwZ]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.textloginPage_userNameSingup__hKVoSiiJc3]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                          >
                            {hasVariant($state, "loginPage", "selectstatus")
                              ? "+98 "
                              : hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                              ? "+98 "
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "emailCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "name")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobileCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "email")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobile")
                              ? "+98 "
                              : "Enter some text"}
                          </div>
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant($state, "loginPage", "selectstatus")
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "emailCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "name")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "email")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobile")
                                ? Icon111Icon
                                : "div"
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__pu5ML,
                              {
                                [sty.svgloginPage_emailCode__pu5MLhTfDf]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.svgloginPage_email__pu5MLKkEIz]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.svgloginPage_mobileCode__pu5MLHp6Ne]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.svgloginPage_mobile__pu5MLn9Ake]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.svgloginPage_name__pu5ML7Yteu]: hasVariant(
                                  $state,
                                  "loginPage",
                                  "name"
                                ),
                                [sty.svgloginPage_selectstatus__pu5MLzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  ),
                                [sty.svgloginPage_userNameLogin__pu5MLgVbwZ]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.svgloginPage_userNameSingup__pu5MLiiJc3]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                            role={"img"}
                          />
                        </React.Fragment>
                      }
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput6",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? "liom"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "liom"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "liom"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? undefined
                          : hasVariant($state, "loginPage", "name")
                          ? undefined
                          : true
                      }
                      type={
                        hasVariant($state, "loginPage", "selectstatus") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "selectstatus")
                          ? "text"
                          : hasVariant($state, "loginPage", "userNameSingup") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "text"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : undefined
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput6",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </div>
                <section
                  className={classNames(projectcss.all, sty.section__wcWpy, {
                    [sty.sectionloginPage_name__wcWpy7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__l2B9V, {
                      [sty.freeBoxloginPage_emailCode__l2B9VhTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.freeBoxloginPage_email__l2B9VKkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.freeBoxloginPage_mobileCode__l2B9VHp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.freeBoxloginPage_mobile__l2B9Vn9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.freeBoxloginPage_name__l2B9V7Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.freeBoxloginPage_selectstatus__l2B9VzJyl9]:
                        hasVariant($state, "loginPage", "selectstatus"),
                      [sty.freeBoxloginPage_userNameLogin__l2B9VgVbwZ]:
                        hasVariant($state, "loginPage", "userNameLogin"),
                      [sty.freeBoxloginPage_userNameSingup__l2B9ViiJc3]:
                        hasVariant($state, "loginPage", "userNameSingup")
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__bBqbz,
                        {
                          [sty.freeBoxloginPage_name__bBqbz7Yteu]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.freeBoxloginPage_selectstatus__bBqbZzJyl9]:
                            hasVariant($state, "loginPage", "selectstatus")
                        }
                      )}
                    >
                      <Checkbox
                        data-plasmic-name={"checkbox"}
                        data-plasmic-override={overrides.checkbox}
                        className={classNames("__wab_instance", sty.checkbox, {
                          [sty.checkboxloginPage_emailCode]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.checkboxloginPage_name]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.checkboxloginPage_selectstatus]: hasVariant(
                            $state,
                            "loginPage",
                            "selectstatus"
                          )
                        })}
                        isChecked={
                          generateStateValueProp($state, [
                            "checkbox",
                            "isChecked"
                          ]) ?? false
                        }
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "checkbox",
                              "isChecked"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wDBx,
                            {
                              [sty.textloginPage_name__wDBx7Yteu]: hasVariant(
                                $state,
                                "loginPage",
                                "name"
                              ),
                              [sty.textloginPage_selectstatus__wDBxZJyl9]:
                                hasVariant($state, "loginPage", "selectstatus")
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateRulesOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["rules", "open"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateRulesOpen"] != null &&
                              typeof $steps["updateRulesOpen"] === "object" &&
                              typeof $steps["updateRulesOpen"].then ===
                                "function"
                            ) {
                              $steps["updateRulesOpen"] = await $steps[
                                "updateRulesOpen"
                              ];
                            }
                          }}
                        >
                          {hasVariant($state, "loginPage", "selectstatus")
                            ? "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a \u0631\u0627 \u0645\u06cc\u067e\u0630\u06cc\u0631\u0645!"
                            : hasVariant($state, "loginPage", "name")
                            ? "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a \u0631\u0627 \u0645\u06cc\u067e\u0630\u06cc\u0631\u0645!"
                            : "Enter some text"}
                        </div>
                      </Checkbox>
                      <Button
                        data-plasmic-name={"button4"}
                        data-plasmic-override={overrides.button4}
                        className={classNames("__wab_instance", sty.button4, {
                          [sty.button4loginPage_emailCode]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.button4loginPage_email]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.button4loginPage_mobileCode]: hasVariant(
                            $state,
                            "loginPage",
                            "mobileCode"
                          ),
                          [sty.button4loginPage_mobile]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.button4loginPage_name]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.button4loginPage_selectstatus]: hasVariant(
                            $state,
                            "loginPage",
                            "selectstatus"
                          ),
                          [sty.button4loginPage_userNameLogin]: hasVariant(
                            $state,
                            "loginPage",
                            "userNameLogin"
                          ),
                          [sty.button4loginPage_userNameSingup]: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                        })}
                        color={generateStateValueProp($state, [
                          "button4",
                          "color"
                        ])}
                        disabled={
                          hasVariant($state, "loginPage", "selectstatus")
                            ? undefined
                            : hasVariant($state, "loginPage", "name")
                            ? undefined
                            : (() => {
                                try {
                                  return (
                                    ($state.antdInput2.value.length < 4 &&
                                      $state.gender == "") ||
                                    $state.loadedbtn
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                        }
                        isDisabled={
                          hasVariant($state, "loginPage", "selectstatus")
                            ? (() => {
                                try {
                                  return (
                                    !(
                                      $state.antdInput2.value?.trim().length >
                                        2 &&
                                      $state.gender != "" &&
                                      $state.checkbox.isChecked == true
                                    ) || $state.loadedbtn
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            : hasVariant($state, "loginPage", "name")
                            ? (() => {
                                try {
                                  return (
                                    !(
                                      $state.antdInput2.value?.trim().length >
                                        2 &&
                                      $state.gender != "" &&
                                      $state.checkbox.isChecked == true
                                    ) || $state.loadedbtn
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            : undefined
                        }
                        load={generateStateValueProp($state, [
                          "button4",
                          "load"
                        ])}
                        loading={generateStateValueProp($state, [
                          "button4",
                          "loading"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateLoadedbtn"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadedbtn"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoadedbtn"] != null &&
                            typeof $steps["updateLoadedbtn"] === "object" &&
                            typeof $steps["updateLoadedbtn"].then === "function"
                          ) {
                            $steps["updateLoadedbtn"] = await $steps[
                              "updateLoadedbtn"
                            ];
                          }

                          $steps["invokeGlobalAction"] =
                            ($state.type == "mobile" ||
                              $state.type === "email") &&
                            ($state.gender === "male" ||
                              ($state.gender === "female" &&
                                $ctx.query.redirect_url != null))
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://api.liom.app/auth/signup/user",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            type: $state.type,
                                            name: $state.antdInput2.value || "",
                                            gateway: $ctx.query.gateway || "",
                                            data:
                                              ($state.number != ""
                                                ? $state.number.startsWith("0")
                                                  ? $state.number
                                                  : "0" + $state.number
                                                : "") ||
                                              $state.email ||
                                              "",
                                            username: $state.username || "",
                                            target: "calendar",
                                            sex: $state.gender || "",
                                            token: $state.token || "",
                                            version: "",
                                            lang: "fa",
                                            country: "98",
                                            anotherLang: "fa",
                                            device: (() => {
                                              const userAgent =
                                                window.navigator.userAgent;
                                              if (
                                                /Mobi|Android|iPhone|iPad|iPod/i.test(
                                                  userAgent
                                                )
                                              ) {
                                                return "Mobile";
                                              } else if (
                                                /Tablet|iPad/i.test(userAgent)
                                              ) {
                                                return "Tablet";
                                              } else {
                                                return "Desktop";
                                              }
                                            })(),
                                            uniqueId: $$.uuid.v4(),
                                            fcm:
                                              window.localStorage.getItem(
                                                "fcmToken"
                                              ) || " ",
                                            os: (() => {
                                              const userAgent =
                                                window.navigator.userAgent;
                                              const platform =
                                                window.navigator.userAgent;
                                              if (/Windows/i.test(platform))
                                                return "Windows";
                                              if (/Mac/i.test(platform))
                                                return "macOS";
                                              if (/Linux/i.test(platform))
                                                return "Linux";
                                              if (/Android/i.test(userAgent))
                                                return "Android";
                                              if (
                                                /iPhone|iPad|iPod/i.test(
                                                  userAgent
                                                )
                                              )
                                                return "iOS";
                                              return "Unknown OS";
                                            })(),
                                            osVersion: (() => {
                                              const userAgent =
                                                window.navigator.userAgent;
                                              if (
                                                /Windows NT 10.0/.test(
                                                  userAgent
                                                )
                                              )
                                                return "Windows 10";
                                              if (
                                                /Windows NT 6.3/.test(userAgent)
                                              )
                                                return "Windows 8.1";
                                              if (
                                                /Windows NT 6.2/.test(userAgent)
                                              )
                                                return "Windows 8";
                                              if (
                                                /Windows NT 6.1/.test(userAgent)
                                              )
                                                return "Windows 7";
                                              if (
                                                /Mac OS X (\d+[\._]\d+)/.test(
                                                  userAgent
                                                )
                                              )
                                                return `macOS ${RegExp.$1.replace(
                                                  "_",
                                                  "."
                                                )}`;
                                              if (
                                                /Android (\d+(\.\d+)?)/.test(
                                                  userAgent
                                                )
                                              )
                                                return `Android ${RegExp.$1}`;
                                              if (
                                                /CPU (iPhone )?OS (\d+_\d+)/.test(
                                                  userAgent
                                                )
                                              )
                                                return `iOS ${RegExp.$2.replace(
                                                  "_",
                                                  "."
                                                )}`;
                                              return "Unknown Version";
                                            })(),
                                            password: $state.password || "",
                                            postLang: "fa",
                                            refCode:
                                              $state.antdInput3.value || "",
                                            isCountryPending: false,
                                            device_type:
                                              window.navigator.platform,
                                            additionalData: {
                                              ip: "132465",
                                              name: "test1"
                                            },
                                            city: null,
                                            state: null,
                                            birthYear: null,
                                            religious: 0
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["invokeGlobalAction2"] =
                            $state.type == "userName" &&
                            ($state.gender === "male" ||
                              ($state.gender === "female" &&
                                $ctx.query.redirect_url != null))
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://api.liom.app/auth/signup",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            type: $state.type,
                                            name: $state.antdInput2.value || "",
                                            gateway: $ctx.query.gateway || "",
                                            data:
                                              $state.number != ""
                                                ? $state.number.startsWith("0")
                                                  ? $state.number
                                                  : "0" + $state.number
                                                : "",
                                            username: $state.username,
                                            target: "calendar",
                                            sex: $state.gender || "",
                                            token: $state.token || "",
                                            version: "",
                                            lang: "fa",
                                            country: "98",
                                            anotherLang: "fa",
                                            device: (() => {
                                              const userAgent =
                                                window.navigator.userAgent;
                                              if (
                                                /Mobi|Android|iPhone|iPad|iPod/i.test(
                                                  userAgent
                                                )
                                              ) {
                                                return "Mobile";
                                              } else if (
                                                /Tablet|iPad/i.test(userAgent)
                                              ) {
                                                return "Tablet";
                                              } else {
                                                return "Desktop";
                                              }
                                            })(),
                                            uniqueId: $$.uuid.v4(),
                                            fcm:
                                              window.localStorage.getItem(
                                                "fcmToken"
                                              ) || " ",
                                            os: (() => {
                                              const userAgent =
                                                window.navigator.userAgent;
                                              const platform =
                                                window.navigator.userAgent;
                                              if (/Windows/i.test(platform))
                                                return "Windows";
                                              if (/Mac/i.test(platform))
                                                return "macOS";
                                              if (/Linux/i.test(platform))
                                                return "Linux";
                                              if (/Android/i.test(userAgent))
                                                return "Android";
                                              if (
                                                /iPhone|iPad|iPod/i.test(
                                                  userAgent
                                                )
                                              )
                                                return "iOS";
                                              return "Unknown OS";
                                            })(),
                                            osVersion: (() => {
                                              const userAgent =
                                                window.navigator.userAgent;
                                              if (
                                                /Windows NT 10.0/.test(
                                                  userAgent
                                                )
                                              )
                                                return "Windows 10";
                                              if (
                                                /Windows NT 6.3/.test(userAgent)
                                              )
                                                return "Windows 8.1";
                                              if (
                                                /Windows NT 6.2/.test(userAgent)
                                              )
                                                return "Windows 8";
                                              if (
                                                /Windows NT 6.1/.test(userAgent)
                                              )
                                                return "Windows 7";
                                              if (
                                                /Mac OS X (\d+[\._]\d+)/.test(
                                                  userAgent
                                                )
                                              )
                                                return `macOS ${RegExp.$1.replace(
                                                  "_",
                                                  "."
                                                )}`;
                                              if (
                                                /Android (\d+(\.\d+)?)/.test(
                                                  userAgent
                                                )
                                              )
                                                return `Android ${RegExp.$1}`;
                                              if (
                                                /CPU (iPhone )?OS (\d+_\d+)/.test(
                                                  userAgent
                                                )
                                              )
                                                return `iOS ${RegExp.$2.replace(
                                                  "_",
                                                  "."
                                                )}`;
                                              return "Unknown Version";
                                            })(),
                                            password: $state.password,
                                            postLang: "fa",
                                            refCode:
                                              $state.antdInput3.value || "",
                                            isCountryPending: false,
                                            device_type:
                                              window.navigator.platform,
                                            additionalData: {
                                              ip: "132465",
                                              name: "test1"
                                            },
                                            city: null,
                                            state: null,
                                            birthYear: null,
                                            religious: 0
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction2"] != null &&
                            typeof $steps["invokeGlobalAction2"] === "object" &&
                            typeof $steps["invokeGlobalAction2"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction2"] = await $steps[
                              "invokeGlobalAction2"
                            ];
                          }

                          $steps["invokeGlobalAction3"] =
                            $state.type == "guest" &&
                            ($state.gender === "male" ||
                              ($state.gender === "female" &&
                                $ctx.query.redirect_url != null))
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://api.liom.app/auth/signup/guest",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            name: $state.antdInput2.value || "",
                                            gateway: $ctx.query.gateway || "",
                                            country: "98",
                                            isCountryPending: false,
                                            lang: "fa",
                                            version: "",
                                            os: (() => {
                                              const userAgent =
                                                window.navigator.userAgent;
                                              const platform =
                                                window.navigator.userAgent;
                                              if (/Windows/i.test(platform))
                                                return "Windows";
                                              if (/Mac/i.test(platform))
                                                return "macOS";
                                              if (/Linux/i.test(platform))
                                                return "Linux";
                                              if (/Android/i.test(userAgent))
                                                return "Android";
                                              if (
                                                /iPhone|iPad|iPod/i.test(
                                                  userAgent
                                                )
                                              )
                                                return "iOS";
                                              return "Unknown OS";
                                            })(),
                                            osVersion: (() => {
                                              const userAgent =
                                                window.navigator.userAgent;
                                              if (
                                                /Windows NT 10.0/.test(
                                                  userAgent
                                                )
                                              )
                                                return "Windows 10";
                                              if (
                                                /Windows NT 6.3/.test(userAgent)
                                              )
                                                return "Windows 8.1";
                                              if (
                                                /Windows NT 6.2/.test(userAgent)
                                              )
                                                return "Windows 8";
                                              if (
                                                /Windows NT 6.1/.test(userAgent)
                                              )
                                                return "Windows 7";
                                              if (
                                                /Mac OS X (\d+[\._]\d+)/.test(
                                                  userAgent
                                                )
                                              )
                                                return `macOS ${RegExp.$1.replace(
                                                  "_",
                                                  "."
                                                )}`;
                                              if (
                                                /Android (\d+(\.\d+)?)/.test(
                                                  userAgent
                                                )
                                              )
                                                return `Android ${RegExp.$1}`;
                                              if (
                                                /CPU (iPhone )?OS (\d+_\d+)/.test(
                                                  userAgent
                                                )
                                              )
                                                return `iOS ${RegExp.$2.replace(
                                                  "_",
                                                  "."
                                                )}`;
                                              return "Unknown Version";
                                            })(),
                                            sex: $state.gender || "",
                                            additionalData: {
                                              ip: "132465",
                                              name: "test1"
                                            },
                                            device: (() => {
                                              const userAgent =
                                                window.navigator.userAgent;
                                              if (
                                                /Mobi|Android|iPhone|iPad|iPod/i.test(
                                                  userAgent
                                                )
                                              ) {
                                                return "Mobile";
                                              } else if (
                                                /Tablet|iPad/i.test(userAgent)
                                              ) {
                                                return "Tablet";
                                              } else {
                                                return "Desktop";
                                              }
                                            })(),
                                            fcm:
                                              window.localStorage.getItem(
                                                "fcmToken"
                                              ) || " ",
                                            uniqueId: $$.uuid.v4(),
                                            device_type:
                                              window.navigator.platform,
                                            postLang: "fa"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction3"] != null &&
                            typeof $steps["invokeGlobalAction3"] === "object" &&
                            typeof $steps["invokeGlobalAction3"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction3"] = await $steps[
                              "invokeGlobalAction3"
                            ];
                          }

                          $steps["updateLoginData"] =
                            $steps.invokeGlobalAction3?.data?.success == true ||
                            $steps.invokeGlobalAction?.data?.success == true ||
                            $steps.invokeGlobalAction2?.data?.success == true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loginData"]
                                    },
                                    operation: 0,
                                    value:
                                      $steps.invokeGlobalAction?.data ||
                                      $steps.invokeGlobalAction2?.data ||
                                      $steps.invokeGlobalAction3?.data
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateLoginData"] != null &&
                            typeof $steps["updateLoginData"] === "object" &&
                            typeof $steps["updateLoginData"].then === "function"
                          ) {
                            $steps["updateLoginData"] = await $steps[
                              "updateLoginData"
                            ];
                          }

                          $steps["goToPage"] =
                            ($steps.invokeGlobalAction3?.data?.success ==
                              true ||
                              $steps.invokeGlobalAction?.data?.success ==
                                true ||
                              $steps.invokeGlobalAction2?.data?.success ==
                                true) &&
                            ($state?.type == "mobile" ||
                              $state?.gender == "female") &&
                            $ctx.query.redirect_url != null
                              ? (() => {
                                  const actionArgs = {
                                    destination: (() => {
                                      try {
                                        return (() => {
                                          try {
                                            var baseUrl =
                                              window.location.href.split(
                                                "redirect_url="
                                              )[1] || "";
                                            baseUrl = new URL(baseUrl);
                                            const origin = baseUrl.origin;
                                            const pathname =
                                              baseUrl.pathname.split("&")[0] ||
                                              "";
                                            const searchParams =
                                              baseUrl.searchParams.toString();
                                            baseUrl = searchParams
                                              ? `${origin}${pathname}?${searchParams}`
                                              : `${origin}${pathname}`;
                                            var separator = baseUrl.includes(
                                              "?"
                                            )
                                              ? "&token="
                                              : "?token=";
                                            var redirectUrl =
                                              baseUrl +
                                              separator +
                                              ($state.loginData.result.token ||
                                                "") +
                                              "&userId=" +
                                              $$.uuid.v4().slice(0, 4) +
                                              ($state.loginData.result.userId ||
                                                "") +
                                              $$.uuid.v4().slice(0, 4);
                                            return redirectUrl;
                                          } catch {
                                            return window.location.href;
                                          }
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }

                          $steps["goToHamyar"] =
                            ($steps.invokeGlobalAction3?.data?.success ==
                              true ||
                              $steps.invokeGlobalAction?.data?.success ==
                                true ||
                              $steps.invokeGlobalAction2?.data?.success ==
                                true) &&
                            $state?.gender == "male" &&
                            $state.paramsObject.redirect_url == null
                              ? (() => {
                                  const actionArgs = {
                                    destination: (() => {
                                      try {
                                        return (() => {
                                          var baseUrl =
                                            "https://apps.liom.app/hamyar";
                                          var separator = baseUrl.includes("?")
                                            ? "&token="
                                            : "?token=";
                                          var redirectUrl =
                                            baseUrl +
                                            separator +
                                            ($state.loginData.result.token ||
                                              "") +
                                            "&userId=" +
                                            $$.uuid.v4().slice(0, 4) +
                                            ($state.loginData.result.userId ||
                                              "") +
                                            $$.uuid.v4().slice(0, 4);
                                          return redirectUrl;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["goToHamyar"] != null &&
                            typeof $steps["goToHamyar"] === "object" &&
                            typeof $steps["goToHamyar"].then === "function"
                          ) {
                            $steps["goToHamyar"] = await $steps["goToHamyar"];
                          }

                          $steps["updateTextInputValue5"] =
                            $state.gender == "female" &&
                            $ctx.query.redirect_url == null
                              ? (() => {
                                  const actionArgs = {
                                    vgroup: "loginPage",
                                    operation: 0,
                                    value: "selectstatus"
                                  };
                                  return (({ vgroup, value }) => {
                                    if (typeof value === "string") {
                                      value = [value];
                                    }

                                    $stateSet($state, vgroup, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateTextInputValue5"] != null &&
                            typeof $steps["updateTextInputValue5"] ===
                              "object" &&
                            typeof $steps["updateTextInputValue5"].then ===
                              "function"
                          ) {
                            $steps["updateTextInputValue5"] = await $steps[
                              "updateTextInputValue5"
                            ];
                          }

                          $steps["updateLoginPage2"] = false
                            ? (() => {
                                const actionArgs = {
                                  vgroup: "loginPage",
                                  operation: 0,
                                  value: "mobile"
                                };
                                return (({ vgroup, value }) => {
                                  if (typeof value === "string") {
                                    value = [value];
                                  }

                                  $stateSet($state, vgroup, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoginPage2"] != null &&
                            typeof $steps["updateLoginPage2"] === "object" &&
                            typeof $steps["updateLoginPage2"].then ===
                              "function"
                          ) {
                            $steps["updateLoginPage2"] = await $steps[
                              "updateLoginPage2"
                            ];
                          }

                          $steps["updateLoginData2"] =
                            $state.type == "google"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loginData"]
                                    },
                                    operation: 0,
                                    value: {
                                      success: true,
                                      result: {
                                        token: $ctx.query.token,
                                        userId: $ctx.query.userId
                                      }
                                    }
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateLoginData2"] != null &&
                            typeof $steps["updateLoginData2"] === "object" &&
                            typeof $steps["updateLoginData2"].then ===
                              "function"
                          ) {
                            $steps["updateLoginData2"] = await $steps[
                              "updateLoginData2"
                            ];
                          }

                          $steps["updateTextInputValue2"] =
                            $steps.invokeGlobalAction?.data?.success === true ||
                            $steps.invokeGlobalAction2?.data?.success ===
                              true ||
                            $steps.invokeGlobalAction3?.data?.success ===
                              true ||
                            $state.type == "google"
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        var setCookie = (name, value, days) => {
                                          const expires = new Date(
                                            Date.now() + days * 86400000
                                          ).toUTCString();
                                          document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                                        };
                                        return setCookie(
                                          "token",
                                          JSON.stringify([
                                            $state.loginData.result.token
                                          ]),
                                          100
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateTextInputValue2"] != null &&
                            typeof $steps["updateTextInputValue2"] ===
                              "object" &&
                            typeof $steps["updateTextInputValue2"].then ===
                              "function"
                          ) {
                            $steps["updateTextInputValue2"] = await $steps[
                              "updateTextInputValue2"
                            ];
                          }

                          $steps["updateTextInputValue3"] =
                            $state.type == "google" && $state.gender == "female"
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return window.open(
                                        $ctx.query.redirect_url +
                                          "?token=" +
                                          $ctx.query.token +
                                          "&userId=" +
                                          $$.uuid.v4().slice(0, 4) +
                                          $ctx.query.userId +
                                          $$.uuid.v4().slice(0, 4),
                                        "_self"
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateTextInputValue3"] != null &&
                            typeof $steps["updateTextInputValue3"] ===
                              "object" &&
                            typeof $steps["updateTextInputValue3"].then ===
                              "function"
                          ) {
                            $steps["updateTextInputValue3"] = await $steps[
                              "updateTextInputValue3"
                            ];
                          }

                          $steps["updateLoadedbtn2"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadedbtn"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoadedbtn2"] != null &&
                            typeof $steps["updateLoadedbtn2"] === "object" &&
                            typeof $steps["updateLoadedbtn2"].then ===
                              "function"
                          ) {
                            $steps["updateLoadedbtn2"] = await $steps[
                              "updateLoadedbtn2"
                            ];
                          }
                        }}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button4",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button4",
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadingChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button4",
                              "loading"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ptA4H,
                            {
                              [sty.textloginPage_emailCode__ptA4HhTfDf]:
                                hasVariant($state, "loginPage", "emailCode"),
                              [sty.textloginPage_email__ptA4HKkEIz]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.textloginPage_mobileCode__ptA4HHp6Ne]:
                                hasVariant($state, "loginPage", "mobileCode"),
                              [sty.textloginPage_mobile__ptA4Hn9Ake]:
                                hasVariant($state, "loginPage", "mobile"),
                              [sty.textloginPage_name__ptA4H7Yteu]: hasVariant(
                                $state,
                                "loginPage",
                                "name"
                              ),
                              [sty.textloginPage_selectstatus__ptA4HzJyl9]:
                                hasVariant($state, "loginPage", "selectstatus"),
                              [sty.textloginPage_userNameLogin__ptA4HgVbwZ]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.textloginPage_userNameSingup__ptA4HiiJc3]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          )}
                        >
                          {hasVariant($state, "loginPage", "selectstatus")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : hasVariant($state, "loginPage", "userNameSingup")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : hasVariant($state, "loginPage", "emailCode")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : hasVariant($state, "loginPage", "name")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : hasVariant($state, "loginPage", "mobileCode")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : hasVariant($state, "loginPage", "email")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : hasVariant($state, "loginPage", "mobile")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : "Button"}
                        </div>
                      </Button>
                    </div>
                  </div>
                </section>
              </div>
            </Reveal>
          ) : null}
          {(
            hasVariant($state, "loginPage", "selectstatus")
              ? true
              : hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__oeBs, {
                [sty.revealloginPage_emailCode__oeBShTfDf]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.revealloginPage_email__oeBsKkEIz]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.revealloginPage_mobileCode__oeBsHp6Ne]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.revealloginPage_mobile__oeBSn9Ake]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.revealloginPage_name__oeBs7Yteu]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.revealloginPage_selectstatus__oeBSzJyl9]: hasVariant(
                  $state,
                  "loginPage",
                  "selectstatus"
                ),
                [sty.revealloginPage_userNameLogin__oeBsgVbwZ]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.revealloginPage_userNameSingup__oeBsiiJc3]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__c7CAe, {
                  [sty.freeBoxloginPage_emailCode__c7CAehTfDf]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email__c7CAeKkEIz]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode__c7CAeHp6Ne]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile__c7CAen9Ake]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__c7CAe7Yteu]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_selectstatus__c7CAezJyl9]: hasVariant(
                    $state,
                    "loginPage",
                    "selectstatus"
                  ),
                  [sty.freeBoxloginPage_userNameLogin__c7CAeGVbwZ]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup__c7CAeIiJc3]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__kSio3, {
                    [sty.freeBoxloginPage_emailCode__kSio3HTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__kSio3KkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__kSio3Hp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__kSio3N9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__kSio37Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__kSio3ZJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__kSio3GVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__kSio3IiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__ejH3U, {
                      [sty.svgloginPage_emailCode__ejH3UhTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__ejH3UKkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__ejH3UHp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__ejH3Un9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__ejH3U7Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_selectstatus__ejH3UzJyl9]: hasVariant(
                        $state,
                        "loginPage",
                        "selectstatus"
                      ),
                      [sty.svgloginPage_userNameLogin__ejH3UGVbwZ]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__ejH3UIiJc3]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__on45, {
                    [sty.freeBoxloginPage_emailCode__on45HTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__on45KkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__on45Hp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__on45N9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__on457Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__on45ZJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__on45GVbwZ]: hasVariant(
                      $state,
                      "loginPage",
                      "userNameLogin"
                    ),
                    [sty.freeBoxloginPage_userNameSingup__on45IiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k4JXw,
                      {
                        [sty.textloginPage_emailCode__k4JXWhTfDf]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__k4JXwKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__k4JXwHp6Ne]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__k4JXWn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__k4JXw7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_selectstatus__k4JXWzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.textloginPage_userNameLogin__k4JXwgVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__k4JXwiiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "selectstatus")
                      ? "\u062f\u0631 \u0686\u0647 \u0648\u0636\u0639\u06cc\u062a\u06cc \u0647\u0633\u062a\u06cc\u061f"
                      : hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0644\u0637\u0641\u0627 \u0627\u0633\u0645\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__mBzMk,
                      hasVariant($state, "loginPage", "selectstatus")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__mBzMkhTfDf]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__mBzMkKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__mBzMkHp6Ne]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__mBzMkn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__mBzMk7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_selectstatus__mBzMkzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.freeBoxloginPage_userNameLogin__mBzMkGVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__mBzMkIiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput12"}
                      data-plasmic-override={overrides.textInput12}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput12,
                            {
                              [sty.antdInput12loginPage_name]: hasVariant(
                                $state,
                                "loginPage",
                                "name"
                              ),
                              [sty.antdInput12loginPage_selectstatus]:
                                hasVariant($state, "loginPage", "selectstatus")
                            }
                          ),
                          id: hasVariant($state, "loginPage", "selectstatus")
                            ? "inputMobile2"
                            : hasVariant($state, "loginPage", "name")
                            ? "inputMobile2"
                            : undefined,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput12", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: (() => {
                            try {
                              return (() => {
                                switch ($state.gender) {
                                  case "":
                                    return "علی محمدی";
                                    break;
                                  case "female":
                                    return "سارا محمدی";
                                    break;
                                  case "male":
                                    return "علی محمدی";
                                    break;
                                  default:
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          size: "large",
                          value: generateStateValueProp($state, [
                            "antdInput12",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput12.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput12"}
                            data-plasmic-override={overrides.antdInput12}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput12, {
                        [sty.textInput12loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput12loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput12loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput12loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput12loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput12loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.textInput12loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput12loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sVCl8,
                              {
                                [sty.freeBoxloginPage_name__sVCl87Yteu]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.freeBoxloginPage_selectstatus__sVCl8ZJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  )
                              }
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pgFjE,
                              hasVariant($state, "loginPage", "selectstatus")
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? "negative"
                                : hasVariant($state, "loginPage", "emailCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "name")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "email")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobile")
                                ? "negative"
                                : undefined,
                              {
                                [sty.textloginPage_emailCode__pgFjEhTfDf]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.textloginPage_email__pgFjEKkEIz]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.textloginPage_mobileCode__pgFjEHp6Ne]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.textloginPage_mobile__pgFjEn9Ake]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.textloginPage_name__pgFjE7Yteu]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.textloginPage_selectstatus__pgFjEzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  ),
                                [sty.textloginPage_userNameLogin__pgFjEgVbwZ]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.textloginPage_userNameSingup__pgFjEiiJc3]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                          >
                            {hasVariant($state, "loginPage", "selectstatus")
                              ? "+98 "
                              : hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                              ? "+98 "
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "emailCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "name")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobileCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "email")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobile")
                              ? "+98 "
                              : "Enter some text"}
                          </div>
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant($state, "loginPage", "selectstatus")
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "emailCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "name")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "email")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobile")
                                ? Icon111Icon
                                : "div"
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__kViBf,
                              {
                                [sty.svgloginPage_emailCode__kViBfhTfDf]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.svgloginPage_email__kViBfKkEIz]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.svgloginPage_mobileCode__kViBfHp6Ne]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.svgloginPage_mobile__kViBfn9Ake]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.svgloginPage_name__kViBf7Yteu]: hasVariant(
                                  $state,
                                  "loginPage",
                                  "name"
                                ),
                                [sty.svgloginPage_selectstatus__kViBfzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  ),
                                [sty.svgloginPage_userNameLogin__kViBfGVbwZ]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.svgloginPage_userNameSingup__kViBfIiJc3]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                            role={"img"}
                          />
                        </React.Fragment>
                      }
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput12",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? "\u0645\u062b\u0644\u0627: \u0639\u0644\u06cc \u0645\u062d\u0645\u062f\u06cc"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "\u0645\u062b\u0644\u0627: \u0639\u0644\u06cc \u0645\u062d\u0645\u062f\u06cc"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : ``
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? undefined
                          : hasVariant($state, "loginPage", "name")
                          ? undefined
                          : true
                      }
                      type={
                        hasVariant($state, "loginPage", "selectstatus") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "text"
                          : hasVariant($state, "loginPage", "selectstatus")
                          ? "text"
                          : hasVariant($state, "loginPage", "userNameSingup") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "text"
                          : hasVariant($state, "loginPage", "name")
                          ? "text"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : undefined
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput12",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bxtyK, {
                      [sty.freeBoxloginPage_selectstatus__bxtyKzJyl9]:
                        hasVariant($state, "loginPage", "selectstatus")
                    })}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [
                            {
                              title: "پریود",
                              type: "period",
                              text: "با تقویم قاعدگی می‌توانی پریود و حالات روزانه‌ات را ثبت و دنبال کنی.",
                              icon: `<svg width="19" height="23" viewBox="0 0 19 23" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10.1359 1.30208C9.76089 1.01042 9.24006 1.01042 8.86506 1.30208C6.88588 2.8125 1.04212 7.73958 1.07337 13.4792C1.07337 18.125 4.85462 21.9167 9.51089 21.9167C14.1671 21.9167 17.9484 18.1354 17.9484 13.4896C17.9588 7.83333 12.1046 2.82292 10.1359 1.30208Z" stroke="#292D32" stroke-width="1.5" stroke-miterlimit="10"/>
</svg>
`
                            },
                            {
                              title: "بارداری",
                              type: "pregnancy",
                              text: "با تقویم بارداری هفته به هفته می‌توانی اطلاعات زیادی در مورد تغییرات بدنت و رشد جنین به دست بیاری.",
                              icon: `<svg width="18" height="21" viewBox="0 0 18 21" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_116_6)">
<path d="M13.3039 7.05239C14.1315 6.4842 14.6512 5.54215 14.6512 4.5255C14.6512 3.55204 14.174 2.62553 13.3749 2.04713L10.7126 0.120381C10.6046 0.0421846 10.4738 -8.52538e-06 10.3395 1.29209e-09H0.962791C0.544981 1.29209e-09 0.245177 0.392027 0.358828 0.783563L2.21605 7.18114C2.67735 8.77008 2.34879 10.5077 1.33719 11.8292C0.474907 12.9557 0 14.3517 0 15.7599V20.3848C0 20.7245 0.281135 21 0.627907 21H10.6141C14.6143 21 17.9613 17.8691 17.9997 13.8916C18.0294 10.8125 16.0781 8.11322 13.3039 7.05239ZM10.6141 19.7695H1.25581V15.7599C1.25581 14.6162 1.64152 13.4825 2.34184 12.5675C3.56781 10.9659 4.00713 8.85339 3.42398 6.84448L1.79422 1.23047H10.1328L12.6288 3.03688C13.1088 3.38428 13.3953 3.94078 13.3953 4.5255C13.3953 5.29262 12.9028 5.98902 12.1698 6.25833L11.2303 6.60352H10.0047C9.65788 6.60352 9.37674 6.87898 9.37674 7.21875C9.37674 7.55852 9.65788 7.83398 10.0047 7.83398H11.3097C14.3888 8.14607 16.7737 10.7963 16.7439 13.88C16.7126 17.1275 13.9627 19.7695 10.6141 19.7695Z" fill="#292D32"/>
<path d="M12.3487 10.2129C11.7818 10.2129 11.2199 10.3964 10.7664 10.7297L10.3394 11.0435L9.91241 10.7297C9.45893 10.3964 8.897 10.2129 8.33008 10.2129C6.87593 10.2129 5.69287 11.3721 5.69287 12.7969C5.6935 13.3239 5.81875 13.8436 6.05869 14.3152C6.7897 15.7478 7.99746 16.9312 9.45952 17.6475L10.0586 17.9409C10.1458 17.9836 10.2419 18.0059 10.3394 18.0059C10.4369 18.0059 10.533 17.9836 10.6202 17.9409L11.2193 17.6474C12.6813 16.9312 13.8891 15.7478 14.6201 14.3152C14.8601 13.8436 14.9852 13.3239 14.9859 12.7969C14.9859 11.3721 13.8028 10.2129 12.3487 10.2129ZM13.4968 13.765C12.8866 14.9609 11.8782 15.9489 10.6576 16.5469L10.3394 16.7028L10.0211 16.5469C8.80051 15.9488 7.79217 14.9609 7.18189 13.7649C7.02893 13.4642 6.9491 13.1329 6.94869 12.7969C6.94869 12.0506 7.56839 11.4434 8.33008 11.4434C8.62888 11.444 8.91952 11.5389 9.15892 11.7141L9.96264 12.3047C10.0713 12.3845 10.2035 12.4277 10.3394 12.4277C10.4753 12.4277 10.6075 12.3845 10.7161 12.3047L11.5198 11.7141C11.7592 11.5389 12.0499 11.444 12.3487 11.4434C13.1104 11.4434 13.7301 12.0506 13.7301 12.7969C13.7301 13.1312 13.6494 13.4659 13.4968 13.765Z" fill="#292D32"/>
</g>
<defs>
<clipPath id="clip0_116_6">
<rect width="18" height="21" fill="white"/>
</clipPath>
</defs>
</svg>
`
                            }
                          ];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <RadioGrop
                          className={classNames(
                            "__wab_instance",
                            sty.radioGrop__rmkL,
                            {
                              [sty.radioGroploginPage_selectstatus__rmkLzJyl9]:
                                hasVariant($state, "loginPage", "selectstatus")
                            }
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateStatus"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["status"]
                                    },
                                    operation: 0,
                                    value: currentItem.type
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStatus"] != null &&
                              typeof $steps["updateStatus"] === "object" &&
                              typeof $steps["updateStatus"].then === "function"
                            ) {
                              $steps["updateStatus"] = await $steps[
                                "updateStatus"
                              ];
                            }
                          }}
                          selectedLine={(() => {
                            try {
                              return $state.status == currentItem.type;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aJ7Wz,
                              {
                                [sty.freeBoxloginPage_selectstatus__aJ7WzzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  )
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___14Cw3,
                                {
                                  [sty.freeBoxloginPage_selectstatus___14Cw3ZJyl9]:
                                    hasVariant(
                                      $state,
                                      "loginPage",
                                      "selectstatus"
                                    )
                                }
                              )}
                            >
                              <Embed
                                className={classNames(
                                  "__wab_instance",
                                  sty.embedHtml__cvxk,
                                  {
                                    [sty.embedHtmlloginPage_selectstatus__cvxkzJyl9]:
                                      hasVariant(
                                        $state,
                                        "loginPage",
                                        "selectstatus"
                                      )
                                  }
                                )}
                                code={
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  )
                                    ? (() => {
                                        try {
                                          return currentItem.icon;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "<div>Paste your embed code via the right sidebar</div>";
                                          }
                                          throw e;
                                        }
                                      })()
                                    : "<div>Paste your embed code via the right sidebar</div>"
                                }
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__c7ICg,
                                  {
                                    [sty.textloginPage_emailCode__c7ICGhTfDf]:
                                      hasVariant(
                                        $state,
                                        "loginPage",
                                        "emailCode"
                                      ),
                                    [sty.textloginPage_email__c7ICgKkEIz]:
                                      hasVariant($state, "loginPage", "email"),
                                    [sty.textloginPage_mobileCode__c7ICgHp6Ne]:
                                      hasVariant(
                                        $state,
                                        "loginPage",
                                        "mobileCode"
                                      ),
                                    [sty.textloginPage_mobile__c7ICGn9Ake]:
                                      hasVariant($state, "loginPage", "mobile"),
                                    [sty.textloginPage_name__c7ICg7Yteu]:
                                      hasVariant($state, "loginPage", "name"),
                                    [sty.textloginPage_selectstatus__c7ICGzJyl9]:
                                      hasVariant(
                                        $state,
                                        "loginPage",
                                        "selectstatus"
                                      ),
                                    [sty.textloginPage_userNameLogin__c7ICggVbwZ]:
                                      hasVariant(
                                        $state,
                                        "loginPage",
                                        "userNameLogin"
                                      ),
                                    [sty.textloginPage_userNameSingup__c7ICgiiJc3]:
                                      hasVariant(
                                        $state,
                                        "loginPage",
                                        "userNameSingup"
                                      )
                                  }
                                )}
                              >
                                {hasVariant(
                                  $state,
                                  "loginPage",
                                  "selectstatus"
                                ) ? (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u067e\u0631\u06cc\u0648\u062f\r";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                ) : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  ) ? (
                                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                                ) : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ) ? (
                                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                                ) : hasVariant(
                                    $state,
                                    "loginPage",
                                    "emailCode"
                                  ) ? (
                                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                                ) : hasVariant($state, "loginPage", "name") ? (
                                  "\u0644\u0637\u0641\u0627 \u0627\u0633\u0645\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                                ) : hasVariant(
                                    $state,
                                    "loginPage",
                                    "mobileCode"
                                  ) ? (
                                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                                ) : hasVariant($state, "loginPage", "email") ? (
                                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                                ) : hasVariant(
                                    $state,
                                    "loginPage",
                                    "mobile"
                                  ) ? (
                                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                                ) : (
                                  "Enter some text"
                                )}
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jnfY2,
                                {
                                  [sty.textloginPage_selectstatus__jnfY2ZJyl9]:
                                    hasVariant(
                                      $state,
                                      "loginPage",
                                      "selectstatus"
                                    )
                                }
                              )}
                            >
                              {hasVariant(
                                $state,
                                "loginPage",
                                "selectstatus"
                              ) ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.text;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0645\u06cc \u062a\u0648\u0646\u06cc \u0628\u0647 \u06a9\u0645\u06a9 \u062a\u0642\u0648\u06cc\u0645 \u0642\u0627\u0639\u062f\u06af\u06cc \u0628\u0631\u0627\u06cc \u062b\u0628\u062a \u0648 \u062f\u0646\u0628\u0627\u0644 \u06a9\u0631\u062f\u0646 \u067e\u0631\u06cc\u0648\u062f \u0648 \u062d\u0627\u0644\u0627\u062a \u0631\u0648\u0632\u0627\u0646\u0647 \u0627\u062a \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u06a9\u0646\u06cc.";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : (
                                "Enter some text"
                              )}
                            </div>
                          </div>
                        </RadioGrop>
                      );
                    })}
                  </div>
                </div>
                <section
                  className={classNames(projectcss.all, sty.section___6C3LI, {
                    [sty.sectionloginPage_selectstatus___6C3LIzJyl9]:
                      hasVariant($state, "loginPage", "selectstatus")
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__teIw, {
                      [sty.freeBoxloginPage_emailCode__teIwhTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.freeBoxloginPage_email__teIwKkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.freeBoxloginPage_mobileCode__teIwHp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.freeBoxloginPage_mobile__teIwn9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.freeBoxloginPage_name__teIw7Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.freeBoxloginPage_selectstatus__teIwzJyl9]:
                        hasVariant($state, "loginPage", "selectstatus"),
                      [sty.freeBoxloginPage_userNameLogin__teIwGVbwZ]:
                        hasVariant($state, "loginPage", "userNameLogin"),
                      [sty.freeBoxloginPage_userNameSingup__teIwIiJc3]:
                        hasVariant($state, "loginPage", "userNameSingup")
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__xqMlD,
                        {
                          [sty.freeBoxloginPage_name__xqMlD7Yteu]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.freeBoxloginPage_selectstatus__xqMlDzJyl9]:
                            hasVariant($state, "loginPage", "selectstatus")
                        }
                      )}
                    >
                      <Checkbox
                        data-plasmic-name={"checkbox2"}
                        data-plasmic-override={overrides.checkbox2}
                        className={classNames("__wab_instance", sty.checkbox2, {
                          [sty.checkbox2loginPage_emailCode]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.checkbox2loginPage_name]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.checkbox2loginPage_selectstatus]: hasVariant(
                            $state,
                            "loginPage",
                            "selectstatus"
                          )
                        })}
                        isChecked={
                          generateStateValueProp($state, [
                            "checkbox2",
                            "isChecked"
                          ]) ?? false
                        }
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "checkbox2",
                              "isChecked"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7EMr2,
                            {
                              [sty.textloginPage_name___7EMr27Yteu]: hasVariant(
                                $state,
                                "loginPage",
                                "name"
                              ),
                              [sty.textloginPage_selectstatus___7EMr2ZJyl9]:
                                hasVariant($state, "loginPage", "selectstatus")
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateRulesOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["rules", "open"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateRulesOpen"] != null &&
                              typeof $steps["updateRulesOpen"] === "object" &&
                              typeof $steps["updateRulesOpen"].then ===
                                "function"
                            ) {
                              $steps["updateRulesOpen"] = await $steps[
                                "updateRulesOpen"
                              ];
                            }
                          }}
                        >
                          {hasVariant($state, "loginPage", "selectstatus")
                            ? "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a \u0631\u0627 \u0645\u06cc\u067e\u0630\u06cc\u0631\u0645!"
                            : hasVariant($state, "loginPage", "name")
                            ? "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a \u0631\u0627 \u0645\u06cc\u067e\u0630\u06cc\u0631\u0645!"
                            : "Enter some text"}
                        </div>
                      </Checkbox>
                      <Button
                        data-plasmic-name={"button8"}
                        data-plasmic-override={overrides.button8}
                        className={classNames("__wab_instance", sty.button8, {
                          [sty.button8loginPage_emailCode]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.button8loginPage_email]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.button8loginPage_mobileCode]: hasVariant(
                            $state,
                            "loginPage",
                            "mobileCode"
                          ),
                          [sty.button8loginPage_mobile]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.button8loginPage_name]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.button8loginPage_selectstatus]: hasVariant(
                            $state,
                            "loginPage",
                            "selectstatus"
                          ),
                          [sty.button8loginPage_userNameLogin]: hasVariant(
                            $state,
                            "loginPage",
                            "userNameLogin"
                          ),
                          [sty.button8loginPage_userNameSingup]: hasVariant(
                            $state,
                            "loginPage",
                            "userNameSingup"
                          )
                        })}
                        color={generateStateValueProp($state, [
                          "button8",
                          "color"
                        ])}
                        disabled={
                          hasVariant($state, "loginPage", "selectstatus")
                            ? undefined
                            : hasVariant($state, "loginPage", "name")
                            ? undefined
                            : (() => {
                                try {
                                  return (
                                    ($state.antdInput12.value.length < 4 &&
                                      $state.gender == "") ||
                                    $state.loadedbtn
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                        }
                        isDisabled={
                          hasVariant($state, "loginPage", "selectstatus")
                            ? (() => {
                                try {
                                  return $state.status == "";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            : hasVariant($state, "loginPage", "name")
                            ? (() => {
                                try {
                                  return (
                                    !(
                                      $state.antdInput12.value?.trim().length >
                                        2 &&
                                      $state.gender != "" &&
                                      $state.checkbox2.isChecked == true
                                    ) || $state.loadedbtn
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            : undefined
                        }
                        load={generateStateValueProp($state, [
                          "button8",
                          "load"
                        ])}
                        loading={generateStateValueProp($state, [
                          "button8",
                          "loading"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.loginData.result.healthStatus =
                                        $state.status.includes("pregnancy")
                                          ? "pregnancy"
                                          : "period";
                                      return localStorage.setItem(
                                        "loginInfo",
                                        JSON.stringify($state.loginData)
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["updateLoadedbtn"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadedbtn"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoadedbtn"] != null &&
                            typeof $steps["updateLoadedbtn"] === "object" &&
                            typeof $steps["updateLoadedbtn"].then === "function"
                          ) {
                            $steps["updateLoadedbtn"] = await $steps[
                              "updateLoadedbtn"
                            ];
                          }

                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return (() => {
                                        var baseUrl = $state.status;
                                        var separator = baseUrl.includes("?")
                                          ? "&token="
                                          : "?token=";
                                        var redirectUrl =
                                          baseUrl +
                                          separator +
                                          $$.uuid.v4().slice(0, 6) +
                                          ($state.loginData.result.token ||
                                            "") +
                                          $$.uuid.v4().slice(10, 13) +
                                          "&userId=" +
                                          $$.uuid.v4().slice(0, 4) +
                                          ($state.loginData.result.userId ||
                                            "") +
                                          $$.uuid.v4().slice(0, 4);
                                        return redirectUrl;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }
                        }}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button8",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button8",
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadingChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button8",
                              "loading"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mp82F,
                            {
                              [sty.textloginPage_emailCode__mp82FhTfDf]:
                                hasVariant($state, "loginPage", "emailCode"),
                              [sty.textloginPage_email__mp82FKkEIz]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.textloginPage_mobileCode__mp82FHp6Ne]:
                                hasVariant($state, "loginPage", "mobileCode"),
                              [sty.textloginPage_mobile__mp82Fn9Ake]:
                                hasVariant($state, "loginPage", "mobile"),
                              [sty.textloginPage_name__mp82F7Yteu]: hasVariant(
                                $state,
                                "loginPage",
                                "name"
                              ),
                              [sty.textloginPage_selectstatus__mp82FzJyl9]:
                                hasVariant($state, "loginPage", "selectstatus"),
                              [sty.textloginPage_userNameLogin__mp82FGVbwZ]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.textloginPage_userNameSingup__mp82FIiJc3]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          )}
                        >
                          {hasVariant($state, "loginPage", "selectstatus")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : hasVariant($state, "loginPage", "userNameSingup")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : hasVariant($state, "loginPage", "userNameLogin")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : hasVariant($state, "loginPage", "emailCode")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : hasVariant($state, "loginPage", "name")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : hasVariant($state, "loginPage", "mobileCode")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : hasVariant($state, "loginPage", "email")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : hasVariant($state, "loginPage", "mobile")
                            ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                            : "Button"}
                        </div>
                      </Button>
                    </div>
                    <Button
                      data-plasmic-name={"button9"}
                      data-plasmic-override={overrides.button9}
                      className={classNames("__wab_instance", sty.button9, {
                        [sty.button9loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.button9loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.button9loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.button9loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.button9loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.button9loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.button9loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.button9loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      color={generateStateValueProp($state, [
                        "button9",
                        "color"
                      ])}
                      disabled={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? undefined
                          : hasVariant($state, "loginPage", "name")
                          ? undefined
                          : (() => {
                              try {
                                return (
                                  ($state.antdInput2.value.length < 4 &&
                                    $state.gender == "") ||
                                  $state.loadedbtn
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                      }
                      isDisabled={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? (() => {
                              try {
                                return $state.status == "" || $state.loadedbtn;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          : hasVariant($state, "loginPage", "name")
                          ? (() => {
                              try {
                                return (
                                  !(
                                    $state.antdInput2.value?.trim().length >
                                      2 &&
                                    $state.gender != "" &&
                                    $state.checkbox.isChecked == true
                                  ) || $state.loadedbtn
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          : undefined
                      }
                      load={generateStateValueProp($state, ["button9", "load"])}
                      loading={generateStateValueProp($state, [
                        "button9",
                        "loading"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoadedbtn"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadedbtn"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadedbtn"] != null &&
                          typeof $steps["updateLoadedbtn"] === "object" &&
                          typeof $steps["updateLoadedbtn"].then === "function"
                        ) {
                          $steps["updateLoadedbtn"] = await $steps[
                            "updateLoadedbtn"
                          ];
                        }

                        $steps["invokeGlobalAction"] =
                          $state.type == "mobile" || $state.type == "email"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://api.liom.app/auth/signup/user",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          type: $state.type,
                                          name: $state.antdInput2.value || "",
                                          gateway: $ctx.query.gateway || "",
                                          data:
                                            ($state.number != ""
                                              ? $state.number.startsWith("0")
                                                ? $state.number
                                                : "0" + $state.number
                                              : "") ||
                                            $state.email ||
                                            "",
                                          username: $state.username || "",
                                          target: "calendar",
                                          sex: $state.gender || "",
                                          token: $state.token || "",
                                          version: "pwa.1.0.0",
                                          lang: "fa",
                                          country: "98",
                                          anotherLang: "fa",
                                          device: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            if (
                                              /Mobi|Android|iPhone|iPad|iPod/i.test(
                                                userAgent
                                              )
                                            ) {
                                              return "Mobile";
                                            } else if (
                                              /Tablet|iPad/i.test(userAgent)
                                            ) {
                                              return "Tablet";
                                            } else {
                                              return "Desktop";
                                            }
                                          })(),
                                          uniqueId: $$.uuid.v4(),
                                          fcm:
                                            window.localStorage.getItem(
                                              "fcmToken"
                                            ) || " ",
                                          os: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            const platform =
                                              window.navigator.userAgent;
                                            if (/Windows/i.test(platform))
                                              return "Windows";
                                            if (/Mac/i.test(platform))
                                              return "macOS";
                                            if (/Linux/i.test(platform))
                                              return "Linux";
                                            if (/Android/i.test(userAgent))
                                              return "Android";
                                            if (
                                              /iPhone|iPad|iPod/i.test(
                                                userAgent
                                              )
                                            )
                                              return "iOS";
                                            return "Unknown OS";
                                          })(),
                                          osVersion: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            if (
                                              /Windows NT 10.0/.test(userAgent)
                                            )
                                              return "Windows 10";
                                            if (
                                              /Windows NT 6.3/.test(userAgent)
                                            )
                                              return "Windows 8.1";
                                            if (
                                              /Windows NT 6.2/.test(userAgent)
                                            )
                                              return "Windows 8";
                                            if (
                                              /Windows NT 6.1/.test(userAgent)
                                            )
                                              return "Windows 7";
                                            if (
                                              /Mac OS X (\d+[\._]\d+)/.test(
                                                userAgent
                                              )
                                            )
                                              return `macOS ${RegExp.$1.replace(
                                                "_",
                                                "."
                                              )}`;
                                            if (
                                              /Android (\d+(\.\d+)?)/.test(
                                                userAgent
                                              )
                                            )
                                              return `Android ${RegExp.$1}`;
                                            if (
                                              /CPU (iPhone )?OS (\d+_\d+)/.test(
                                                userAgent
                                              )
                                            )
                                              return `iOS ${RegExp.$2.replace(
                                                "_",
                                                "."
                                              )}`;
                                            return "Unknown Version";
                                          })(),
                                          password: $state.password || "",
                                          postLang: "fa",
                                          refCode:
                                            $state.antdInput3.value || "",
                                          isCountryPending: false,
                                          device_type:
                                            window.navigator.platform,
                                          additionalData: {
                                            ip: "132465",
                                            name: "test1"
                                          },
                                          city: null,
                                          state: null,
                                          birthYear: null,
                                          religious: 0,
                                          healthStatus: $state.status
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["invokeGlobalAction2"] =
                          $state.type == "userName"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://api.liom.app/auth/signup",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          type: $state.type,
                                          name: $state.antdInput2.value || "",
                                          gateway: $ctx.query.gateway || "",
                                          data:
                                            $state.number != ""
                                              ? $state.number.startsWith("0")
                                                ? $state.number
                                                : "0" + $state.number
                                              : "",
                                          username: $state.username,
                                          target: "calendar",
                                          sex: $state.gender || "",
                                          token: $state.token || "",
                                          version: "pwa.1.0.0",
                                          lang: "fa",
                                          country: "98",
                                          anotherLang: "fa",
                                          device: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            if (
                                              /Mobi|Android|iPhone|iPad|iPod/i.test(
                                                userAgent
                                              )
                                            ) {
                                              return "Mobile";
                                            } else if (
                                              /Tablet|iPad/i.test(userAgent)
                                            ) {
                                              return "Tablet";
                                            } else {
                                              return "Desktop";
                                            }
                                          })(),
                                          uniqueId: $$.uuid.v4(),
                                          fcm:
                                            window.localStorage.getItem(
                                              "fcmToken"
                                            ) || " ",
                                          os: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            const platform =
                                              window.navigator.userAgent;
                                            if (/Windows/i.test(platform))
                                              return "Windows";
                                            if (/Mac/i.test(platform))
                                              return "macOS";
                                            if (/Linux/i.test(platform))
                                              return "Linux";
                                            if (/Android/i.test(userAgent))
                                              return "Android";
                                            if (
                                              /iPhone|iPad|iPod/i.test(
                                                userAgent
                                              )
                                            )
                                              return "iOS";
                                            return "Unknown OS";
                                          })(),
                                          osVersion: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            if (
                                              /Windows NT 10.0/.test(userAgent)
                                            )
                                              return "Windows 10";
                                            if (
                                              /Windows NT 6.3/.test(userAgent)
                                            )
                                              return "Windows 8.1";
                                            if (
                                              /Windows NT 6.2/.test(userAgent)
                                            )
                                              return "Windows 8";
                                            if (
                                              /Windows NT 6.1/.test(userAgent)
                                            )
                                              return "Windows 7";
                                            if (
                                              /Mac OS X (\d+[\._]\d+)/.test(
                                                userAgent
                                              )
                                            )
                                              return `macOS ${RegExp.$1.replace(
                                                "_",
                                                "."
                                              )}`;
                                            if (
                                              /Android (\d+(\.\d+)?)/.test(
                                                userAgent
                                              )
                                            )
                                              return `Android ${RegExp.$1}`;
                                            if (
                                              /CPU (iPhone )?OS (\d+_\d+)/.test(
                                                userAgent
                                              )
                                            )
                                              return `iOS ${RegExp.$2.replace(
                                                "_",
                                                "."
                                              )}`;
                                            return "Unknown Version";
                                          })(),
                                          password: $state.password,
                                          postLang: "fa",
                                          refCode:
                                            $state.antdInput3.value || "",
                                          isCountryPending: false,
                                          device_type:
                                            window.navigator.platform,
                                          additionalData: {
                                            ip: "132465",
                                            name: "test1"
                                          },
                                          city: null,
                                          state: null,
                                          birthYear: null,
                                          religious: 0,
                                          healthStatus: $state.status
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }

                        $steps["invokeGlobalAction3"] =
                          $state.type == "guest"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://api.liom.app/auth/signup/guest",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          name: $state.antdInput2.value || "",
                                          gateway: $ctx.query.gateway || "",
                                          country: "98",
                                          isCountryPending: false,
                                          lang: "fa",
                                          version: "pwa.1.0.0",
                                          os: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            const platform =
                                              window.navigator.userAgent;
                                            if (/Windows/i.test(platform))
                                              return "Windows";
                                            if (/Mac/i.test(platform))
                                              return "macOS";
                                            if (/Linux/i.test(platform))
                                              return "Linux";
                                            if (/Android/i.test(userAgent))
                                              return "Android";
                                            if (
                                              /iPhone|iPad|iPod/i.test(
                                                userAgent
                                              )
                                            )
                                              return "iOS";
                                            return "Unknown OS";
                                          })(),
                                          osVersion: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            if (
                                              /Windows NT 10.0/.test(userAgent)
                                            )
                                              return "Windows 10";
                                            if (
                                              /Windows NT 6.3/.test(userAgent)
                                            )
                                              return "Windows 8.1";
                                            if (
                                              /Windows NT 6.2/.test(userAgent)
                                            )
                                              return "Windows 8";
                                            if (
                                              /Windows NT 6.1/.test(userAgent)
                                            )
                                              return "Windows 7";
                                            if (
                                              /Mac OS X (\d+[\._]\d+)/.test(
                                                userAgent
                                              )
                                            )
                                              return `macOS ${RegExp.$1.replace(
                                                "_",
                                                "."
                                              )}`;
                                            if (
                                              /Android (\d+(\.\d+)?)/.test(
                                                userAgent
                                              )
                                            )
                                              return `Android ${RegExp.$1}`;
                                            if (
                                              /CPU (iPhone )?OS (\d+_\d+)/.test(
                                                userAgent
                                              )
                                            )
                                              return `iOS ${RegExp.$2.replace(
                                                "_",
                                                "."
                                              )}`;
                                            return "Unknown Version";
                                          })(),
                                          sex: $state.gender || "",
                                          additionalData: {
                                            ip: "132465",
                                            name: "test1"
                                          },
                                          device: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            if (
                                              /Mobi|Android|iPhone|iPad|iPod/i.test(
                                                userAgent
                                              )
                                            ) {
                                              return "Mobile";
                                            } else if (
                                              /Tablet|iPad/i.test(userAgent)
                                            ) {
                                              return "Tablet";
                                            } else {
                                              return "Desktop";
                                            }
                                          })(),
                                          fcm:
                                            window.localStorage.getItem(
                                              "fcmToken"
                                            ) || " ",
                                          uniqueId: $$.uuid.v4(),
                                          device_type:
                                            window.navigator.platform,
                                          postLang: "fa",
                                          healthStatus: $state.status
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction3"] != null &&
                          typeof $steps["invokeGlobalAction3"] === "object" &&
                          typeof $steps["invokeGlobalAction3"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction3"] = await $steps[
                            "invokeGlobalAction3"
                          ];
                        }

                        $steps["updateLoginData"] =
                          $steps.invokeGlobalAction3?.data?.success == true ||
                          $steps.invokeGlobalAction?.data?.success == true ||
                          $steps.invokeGlobalAction2?.data?.success == true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loginData"]
                                  },
                                  operation: 0,
                                  value:
                                    $steps.invokeGlobalAction?.data ||
                                    $steps.invokeGlobalAction2?.data ||
                                    $steps.invokeGlobalAction3?.data
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateLoginData"] != null &&
                          typeof $steps["updateLoginData"] === "object" &&
                          typeof $steps["updateLoginData"].then === "function"
                        ) {
                          $steps["updateLoginData"] = await $steps[
                            "updateLoginData"
                          ];
                        }

                        $steps["updateTextInputValue2"] =
                          $steps.invokeGlobalAction?.data?.success === true ||
                          $steps.invokeGlobalAction2?.data?.success === true ||
                          $steps.invokeGlobalAction3?.data?.success === true ||
                          $state.type == "google"
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      var setCookie = (name, value, days) => {
                                        const expires = new Date(
                                          Date.now() + days * 86400000
                                        ).toUTCString();
                                        document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                                      };
                                      return setCookie(
                                        "token",
                                        JSON.stringify([
                                          $state.loginData.result.token
                                        ]),
                                        100
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateTextInputValue2"] != null &&
                          typeof $steps["updateTextInputValue2"] === "object" &&
                          typeof $steps["updateTextInputValue2"].then ===
                            "function"
                        ) {
                          $steps["updateTextInputValue2"] = await $steps[
                            "updateTextInputValue2"
                          ];
                        }

                        $steps["goToPage"] =
                          $steps.invokeGlobalAction3?.data?.success == true ||
                          $steps.invokeGlobalAction?.data?.success == true ||
                          $steps.invokeGlobalAction2?.data?.success == true
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return (() => {
                                        if ($state.status == "pregnancy")
                                          var baseUrl =
                                            "https://apps.liom.app/pregnancy/";
                                        else
                                          var baseUrl =
                                            "https://apps.liom.app/main/";
                                        var separator = baseUrl.includes("?")
                                          ? "&token="
                                          : "?token=";
                                        var redirectUrl =
                                          baseUrl +
                                          separator +
                                          $$.uuid.v4().slice(0, 6) +
                                          ($state.loginData.result.token ||
                                            "") +
                                          $$.uuid.v4().slice(10, 13) +
                                          "&userId=" +
                                          $$.uuid.v4().slice(0, 4) +
                                          ($state.loginData.result.userId ||
                                            "") +
                                          $$.uuid.v4().slice(0, 4);
                                        return redirectUrl;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button9",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button9",
                            "load"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadingChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button9",
                            "loading"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__inEjF,
                          {
                            [sty.textloginPage_emailCode__inEjFhTfDf]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_email__inEjFKkEIz]: hasVariant(
                              $state,
                              "loginPage",
                              "email"
                            ),
                            [sty.textloginPage_mobileCode__inEjFHp6Ne]:
                              hasVariant($state, "loginPage", "mobileCode"),
                            [sty.textloginPage_mobile__inEjFn9Ake]: hasVariant(
                              $state,
                              "loginPage",
                              "mobile"
                            ),
                            [sty.textloginPage_name__inEjF7Yteu]: hasVariant(
                              $state,
                              "loginPage",
                              "name"
                            ),
                            [sty.textloginPage_selectstatus__inEjFzJyl9]:
                              hasVariant($state, "loginPage", "selectstatus"),
                            [sty.textloginPage_userNameLogin__inEjFgVbwZ]:
                              hasVariant($state, "loginPage", "userNameLogin"),
                            [sty.textloginPage_userNameSingup__inEjFiiJc3]:
                              hasVariant($state, "loginPage", "userNameSingup")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "selectstatus")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "name")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "email")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : "Button"}
                      </div>
                    </Button>
                  </div>
                </section>
              </div>
            </Reveal>
          ) : null}
          {(
            hasVariant($state, "loginPage", "selectstatus")
              ? true
              : hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              data-plasmic-name={"mobileCode"}
              data-plasmic-override={overrides.mobileCode}
              className={classNames("__wab_instance", sty.mobileCode, {
                [sty.mobileCodeloginPage_emailCode]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.mobileCodeloginPage_email]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.mobileCodeloginPage_mobileCode]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.mobileCodeloginPage_mobile]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.mobileCodeloginPage_name]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.mobileCodeloginPage_selectstatus]: hasVariant(
                  $state,
                  "loginPage",
                  "selectstatus"
                ),
                [sty.mobileCodeloginPage_userNameLogin]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.mobileCodeloginPage_userNameSingup]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__ppNdb, {
                  [sty.freeBoxloginPage_emailCode__ppNdbhTfDf]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email__ppNdbKkEIz]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode__ppNdbHp6Ne]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile__ppNdbn9Ake]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__ppNdb7Yteu]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_selectstatus__ppNdbzJyl9]: hasVariant(
                    $state,
                    "loginPage",
                    "selectstatus"
                  ),
                  [sty.freeBoxloginPage_userNameLogin__ppNdbGVbwZ]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup__ppNdbIiJc3]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___0PFpf, {
                    [sty.freeBoxloginPage_emailCode___0PFpfhTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email___0PFpfKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode___0PFpfHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile___0PFpfn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name___0PFpf7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus___0PFpfzJyl9]:
                      hasVariant($state, "loginPage", "selectstatus"),
                    [sty.freeBoxloginPage_userNameLogin___0PFpfGVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup___0PFpfIiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: "mobile"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__l367V, {
                      [sty.svgloginPage_emailCode__l367VhTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__l367VKkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__l367VHp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__l367Vn9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__l367V7Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_selectstatus__l367VzJyl9]: hasVariant(
                        $state,
                        "loginPage",
                        "selectstatus"
                      ),
                      [sty.svgloginPage_userNameLogin__l367VGVbwZ]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__l367VIiJc3]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__nduq6, {
                    [sty.freeBoxloginPage_emailCode__nduq6HTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__nduq6KkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__nduq6Hp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__nduq6N9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__nduq67Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__nduq6ZJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__nduq6GVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__nduq6IiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zaqij, {
                      [sty.freeBoxloginPage_emailCode__zaqijhTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.freeBoxloginPage_mobileCode__zaqijHp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___473BX,
                        {
                          [sty.textloginPage_emailCode___473BXhTfDf]:
                            hasVariant($state, "loginPage", "emailCode"),
                          [sty.textloginPage_email___473BXKkEIz]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode___473BXHp6Ne]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile___473BXn9Ake]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name___473BX7Yteu]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_selectstatus___473BXzJyl9]:
                            hasVariant($state, "loginPage", "selectstatus"),
                          [sty.textloginPage_userNameLogin___473BXgVbwZ]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup___473BXiiJc3]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      {hasVariant($state, "loginPage", "selectstatus")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : "Enter some text"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zNtC,
                        {
                          [sty.textloginPage_emailCode__zNtChTfDf]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.textloginPage_email__zNtCKkEIz]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode__zNtCHp6Ne]: hasVariant(
                            $state,
                            "loginPage",
                            "mobileCode"
                          ),
                          [sty.textloginPage_mobile__zNtCn9Ake]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name__zNtC7Yteu]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_selectstatus__zNtCzJyl9]:
                            hasVariant($state, "loginPage", "selectstatus"),
                          [sty.textloginPage_userNameLogin__zNtCgVbwZ]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup__zNtCiiJc3]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoginPage"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: "loginPage",
                                operation: 0,
                                value: "mobile"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoginPage"] != null &&
                          typeof $steps["updateLoginPage"] === "object" &&
                          typeof $steps["updateLoginPage"].then === "function"
                        ) {
                          $steps["updateLoginPage"] = await $steps[
                            "updateLoginPage"
                          ];
                        }
                      }}
                    >
                      {hasVariant($state, "loginPage", "selectstatus")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : "Enter some text"}
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__q14Ig,
                      hasVariant($state, "loginPage", "selectstatus")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__q14IghTfDf]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__q14IgKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__q14IgHp6Ne]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__q14Ign9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__q14Ig7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_selectstatus__q14IgzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.freeBoxloginPage_userNameLogin__q14IgGVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__q14IgIiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput3"}
                      data-plasmic-override={overrides.textInput3}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput4,
                            {
                              [sty.antdInput4loginPage_emailCode]: hasVariant(
                                $state,
                                "loginPage",
                                "emailCode"
                              ),
                              [sty.antdInput4loginPage_mobileCode]: hasVariant(
                                $state,
                                "loginPage",
                                "mobileCode"
                              ),
                              [sty.antdInput4loginPage_name]: hasVariant(
                                $state,
                                "loginPage",
                                "name"
                              ),
                              [sty.antdInput4loginPage_selectstatus]:
                                hasVariant($state, "loginPage", "selectstatus")
                            }
                          ),
                          disabled: hasVariant($state, "loginPage", "emailCode")
                            ? true
                            : hasVariant($state, "loginPage", "mobileCode")
                            ? true
                            : undefined,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput4", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          size: "large",
                          type: hasVariant($state, "loginPage", "emailCode")
                            ? "tel"
                            : hasVariant($state, "loginPage", "mobileCode")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput4",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput4.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput4"}
                            data-plasmic-override={overrides.antdInput4}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput3, {
                        [sty.textInput3loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput3loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput3loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput3loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput3loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput3loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.textInput3loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput3loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yVBm
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dTeAm,
                              hasVariant($state, "loginPage", "selectstatus")
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? "negative"
                                : hasVariant($state, "loginPage", "emailCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "name")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "email")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobile")
                                ? "negative"
                                : undefined,
                              {
                                [sty.textloginPage_emailCode__dTeAmhTfDf]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.textloginPage_email__dTeAmKkEIz]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.textloginPage_mobileCode__dTeAmHp6Ne]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.textloginPage_mobile__dTeAmn9Ake]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.textloginPage_name__dTeAm7Yteu]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.textloginPage_selectstatus__dTeAmzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  ),
                                [sty.textloginPage_userNameLogin__dTeAmGVbwZ]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.textloginPage_userNameSingup__dTeAmIiJc3]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                          >
                            {hasVariant($state, "loginPage", "selectstatus")
                              ? "+98 "
                              : hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                              ? "+98 "
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "emailCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "name")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobileCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "email")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobile")
                              ? "+98 "
                              : "Enter some text"}
                          </div>
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant($state, "loginPage", "selectstatus")
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "emailCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "name")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "email")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobile")
                                ? Icon111Icon
                                : "div"
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__ydrrm,
                              {
                                [sty.svgloginPage_emailCode__ydrrmhTfDf]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.svgloginPage_email__ydrrmKkEIz]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.svgloginPage_mobileCode__ydrrmHp6Ne]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.svgloginPage_mobile__ydrrmn9Ake]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.svgloginPage_name__ydrrm7Yteu]: hasVariant(
                                  $state,
                                  "loginPage",
                                  "name"
                                ),
                                [sty.svgloginPage_selectstatus__ydrrmzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  ),
                                [sty.svgloginPage_userNameLogin__ydrrmGVbwZ]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.svgloginPage_userNameSingup__ydrrmIiJc3]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                            role={"img"}
                          />
                        </React.Fragment>
                      }
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput3",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "09123456789"
                      }
                      showEndIcon={true}
                      type={
                        hasVariant($state, "loginPage", "selectstatus") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "selectstatus")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : undefined
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput3",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2Girx, {
                      [sty.freeBoxloginPage_mobileCode___2GirxHp6Ne]:
                        hasVariant($state, "loginPage", "mobileCode")
                    })}
                  >
                    <Embed
                      className={classNames(
                        "__wab_instance",
                        sty.embedHtml__jzSp,
                        {
                          [sty.embedHtmlloginPage_mobileCode__jzSpHp6Ne]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.embedHtmlloginPage_mobile__jzSpn9Ake]:
                            hasVariant($state, "loginPage", "mobile")
                        }
                      )}
                      code={
                        hasVariant($state, "loginPage", "mobileCode") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? '<div class="otp-wrapper">\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit1" class="otp-input"\r\n         onkeyup="handleInput(this, 0, \'digit2\')" />\r\n\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit2" class="otp-input"\r\n         onkeyup="handleInput(this, 1, \'digit3\')" onkeydown="moveToPrev(event, \'digit1\')" />\r\n\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit3" class="otp-input"\r\n         onkeyup="handleInput(this, 2, \'digit4\')" onkeydown="moveToPrev(event, \'digit2\')" />\r\n\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit4" class="otp-input"\r\n         onkeyup="handleInput(this, 3)" onkeydown="moveToPrev(event, \'digit3\')" />\r\n</div>\r\n\r\n\r\n<script>\r\n  window.inputValues = ["", "", "", ""];\r\n  window.codeCompleted = false;\r\n\r\n  function handleInput(current, index, nextFieldId) {\r\n    const value = current.value;\r\n\r\n    // \u0641\u0642\u0637 \u0639\u062f\u062f\r\n    if (!/^[0-9]$/.test(value)) {\r\n      current.value = \'\';\r\n      window.inputValues[index] = \'\';\r\n    } else {\r\n      window.inputValues[index] = value;\r\n    }\r\n\r\n    // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc\r\n    if (value.length === 1 && nextFieldId) {\r\n      document.getElementById(nextFieldId).focus();\r\n    }\r\n\r\n    // \u0627\u06af\u0647 \u06cc\u06a9\u06cc \u0627\u0632 \u0641\u06cc\u0644\u062f\u0647\u0627 \u062e\u0627\u0644\u06cc \u0628\u0634\u0647 \u2192 \u0627\u062c\u0627\u0632\u0647 \u0628\u062f\u0647 \u062f\u0648\u0628\u0627\u0631\u0647 log \u0628\u0634\u0647\r\n    if (window.inputValues.some(val => val === "")) {\r\n      window.codeCompleted = false;\r\n    }\r\n\r\n    // \u0641\u0642\u0637 \u0648\u0642\u062a\u06cc \u0647\u0645\u0647 \u067e\u0631 \u0628\u0648\u062f\u0646 \u0648 \u0642\u0628\u0644\u0627\u064b log \u0646\u0634\u062f\u0647:\r\n    if (window.inputValues.every(val => val !== "") && !window.codeCompleted) {\r\n      console.log("ok");\r\n      document.querySelector(\'#codeButten button\').click();\r\n      window.codeCompleted = true;\r\n    }\r\n  }\r\n\r\n  function moveToPrev(event, prevFieldId) {\r\n    if (event.key === "Backspace" && !event.target.value) {\r\n      document.getElementById(prevFieldId).focus();\r\n    }\r\n  }\r\n</script>\r\n'
                          : hasVariant(globalVariants, "screen", "mobile")
                          ? '<div class="otp-wrapper">\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit1" class="otp-input"\r\n         onkeyup="handleInput(this, 0, \'digit2\')" />\r\n\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit2" class="otp-input"\r\n         onkeyup="handleInput(this, 1, \'digit3\')" onkeydown="moveToPrev(event, \'digit1\')" />\r\n\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit3" class="otp-input"\r\n         onkeyup="handleInput(this, 2, \'digit4\')" onkeydown="moveToPrev(event, \'digit2\')" />\r\n\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit4" class="otp-input"\r\n         onkeyup="handleInput(this, 3)" onkeydown="moveToPrev(event, \'digit3\')" />\r\n</div>\r\n\r\n\r\n<script>\r\n  window.inputValues = ["", "", "", ""];\r\n  window.codeCompleted = false;\r\n\r\n  function handleInput(current, index, nextFieldId) {\r\n    const value = current.value;\r\n\r\n    // \u0641\u0642\u0637 \u0639\u062f\u062f\r\n    if (!/^[0-9]$/.test(value)) {\r\n      current.value = \'\';\r\n      window.inputValues[index] = \'\';\r\n    } else {\r\n      window.inputValues[index] = value;\r\n    }\r\n\r\n    // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc\r\n    if (value.length === 1 && nextFieldId) {\r\n      document.getElementById(nextFieldId).focus();\r\n    }\r\n\r\n    // \u0627\u06af\u0647 \u06cc\u06a9\u06cc \u0627\u0632 \u0641\u06cc\u0644\u062f\u0647\u0627 \u062e\u0627\u0644\u06cc \u0628\u0634\u0647 \u2192 \u0627\u062c\u0627\u0632\u0647 \u0628\u062f\u0647 \u062f\u0648\u0628\u0627\u0631\u0647 log \u0628\u0634\u0647\r\n    if (window.inputValues.some(val => val === "")) {\r\n      window.codeCompleted = false;\r\n    }\r\n\r\n    // \u0641\u0642\u0637 \u0648\u0642\u062a\u06cc \u0647\u0645\u0647 \u067e\u0631 \u0628\u0648\u062f\u0646 \u0648 \u0642\u0628\u0644\u0627\u064b log \u0646\u0634\u062f\u0647:\r\n    if (window.inputValues.every(val => val !== "") && !window.codeCompleted) {\r\n      console.log("ok");\r\n      document.querySelector(\'#codeButten button\').click();\r\n      window.codeCompleted = true;\r\n    }\r\n  }\r\n\r\n  function moveToPrev(event, prevFieldId) {\r\n    if (event.key === "Backspace" && !event.target.value) {\r\n      document.getElementById(prevFieldId).focus();\r\n    }\r\n  }\r\n</script>\r\n'
                          : '<div class="otp-wrapper">\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit1" class="otp-input"\r\n         onkeyup="handleInput(this, 0, \'digit2\')" />\r\n\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit2" class="otp-input"\r\n         onkeyup="handleInput(this, 1, \'digit3\')" onkeydown="moveToPrev(event, \'digit1\')" />\r\n\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit3" class="otp-input"\r\n         onkeyup="handleInput(this, 2, \'digit4\')" onkeydown="moveToPrev(event, \'digit2\')" />\r\n\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit4" class="otp-input"\r\n         onkeyup="handleInput(this, 3)" onkeydown="moveToPrev(event, \'digit3\')" />\r\n</div>\r\n\r\n<script>\r\n  window.inputValues = ["", "", "", ""];\r\n  window.codeCompleted = false;\r\n\r\n  function handleInput(current, index, nextFieldId) {\r\n    const value = current.value;\r\n\r\n    // \u0641\u0642\u0637 \u0639\u062f\u062f\r\n    if (!/^[0-9]$/.test(value)) {\r\n      current.value = \'\';\r\n      window.inputValues[index] = \'\';\r\n    } else {\r\n      window.inputValues[index] = value;\r\n    }\r\n\r\n    // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc\r\n    if (value.length === 1 && nextFieldId) {\r\n      document.getElementById(nextFieldId).focus();\r\n    }\r\n\r\n    // \u0627\u06af\u0647 \u06cc\u06a9\u06cc \u0627\u0632 \u0641\u06cc\u0644\u062f\u0647\u0627 \u062e\u0627\u0644\u06cc \u0628\u0634\u0647 \u2192 \u0627\u062c\u0627\u0632\u0647 \u0628\u062f\u0647 \u062f\u0648\u0628\u0627\u0631\u0647 log \u0628\u0634\u0647\r\n    if (window.inputValues.some(val => val === "")) {\r\n      window.codeCompleted = false;\r\n    }\r\n\r\n    // \u0641\u0642\u0637 \u0648\u0642\u062a\u06cc \u0647\u0645\u0647 \u067e\u0631 \u0628\u0648\u062f\u0646 \u0648 \u0642\u0628\u0644\u0627\u064b log \u0646\u0634\u062f\u0647:\r\n    if (window.inputValues.every(val => val !== "") && !window.codeCompleted) {\r\n      console.log("ok");\r\n      document.querySelector(\'#codeButten button\').click();\r\n      window.codeCompleted = true;\r\n    }\r\n  }\r\n\r\n  function moveToPrev(event, prevFieldId) {\r\n    if (event.key === "Backspace" && !event.target.value) {\r\n      document.getElementById(prevFieldId).focus();\r\n    }\r\n  }\r\n</script>\r\n'
                      }
                    />
                  </div>
                  {(
                    hasVariant($state, "loginPage", "emailCode")
                      ? (() => {
                          try {
                            return $state.time != 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? (() => {
                          try {
                            return $state.time != 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5Wg2G,
                        {
                          [sty.freeBoxloginPage_emailCode___5Wg2GhTfDf]:
                            hasVariant($state, "loginPage", "emailCode"),
                          [sty.freeBoxloginPage_mobileCode___5Wg2GHp6Ne]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.freeBoxloginPage_mobile___5Wg2Gn9Ake]:
                            hasVariant($state, "loginPage", "mobile"),
                          [sty.freeBoxloginPage_userNameLogin___5Wg2GGVbwZ]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.freeBoxloginPage_userNameSingup___5Wg2GIiJc3]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oXaHp,
                          {
                            [sty.textloginPage_emailCode__oXaHphTfDf]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_mobileCode__oXaHpHp6Ne]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "emailCode") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.time;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "0";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : hasVariant($state, "loginPage", "mobileCode") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.time;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "0";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          "Enter some text"
                        )}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zckQp,
                          {
                            [sty.textloginPage_emailCode__zckQphTfDf]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_mobileCode__zckQpHp6Ne]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "emailCode")
                          ? "\u062a\u0627 \u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u06a9\u062f \u0645\u0627\u0646\u062f\u0647 \u0627\u0633\u062a"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "\u062a\u0627 \u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u06a9\u062f \u0645\u0627\u0646\u062f\u0647 \u0627\u0633\u062a"
                          : "Enter some text"}
                      </div>
                      <Timer
                        className={classNames(
                          "__wab_instance",
                          sty.timer__rCv1D,
                          {
                            [sty.timerloginPage_emailCode__rCv1DhTfDf]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.timerloginPage_mobileCode__rCv1DHp6Ne]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                        intervalSeconds={
                          hasVariant($state, "loginPage", "emailCode")
                            ? 1
                            : hasVariant($state, "loginPage", "mobileCode")
                            ? 1
                            : undefined
                        }
                        isRunning={true}
                        onTick={async () => {
                          const $steps = {};

                          $steps["updateTime"] =
                            $state.time > 0
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["time"]
                                    },
                                    operation: 0,
                                    value: $state.time - 1
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateTime"] != null &&
                            typeof $steps["updateTime"] === "object" &&
                            typeof $steps["updateTime"].then === "function"
                          ) {
                            $steps["updateTime"] = await $steps["updateTime"];
                          }
                        }}
                        runWhileEditing={false}
                      />
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "loginPage", "emailCode")
                      ? (() => {
                          try {
                            return $state.time == 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? (() => {
                          try {
                            return $state.time == 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8QFy,
                        {
                          [sty.freeBoxloginPage_emailCode___8QFyHTfDf]:
                            hasVariant($state, "loginPage", "emailCode"),
                          [sty.freeBoxloginPage_mobileCode___8QFyHp6Ne]:
                            hasVariant($state, "loginPage", "mobileCode")
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__epQm,
                          {
                            [sty.textloginPage_emailCode__epQmhTfDf]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_mobileCode__epQmHp6Ne]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "emailCode")
                          ? "23"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "23"
                          : "Enter some text"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__avZ0Q,
                          {
                            [sty.textloginPage_emailCode__avZ0QhTfDf]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_mobileCode__avZ0QHp6Ne]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateTime"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["time"]
                                  },
                                  operation: 0,
                                  value: 30
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTime"] != null &&
                            typeof $steps["updateTime"] === "object" &&
                            typeof $steps["updateTime"].then === "function"
                          ) {
                            $steps["updateTime"] = await $steps["updateTime"];
                          }

                          $steps["invokeGlobalAction"] =
                            $state.type == "mobile"
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://api.liom.app/auth/signup/send-code-v2",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            type: "mobile",
                                            country: "98",
                                            smsType: "sms",
                                            data: $state.number
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["invokeGlobalAction3"] =
                            $state.type != "mobile"
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://api.liom.app/rest/user/setMobileSendCode",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            data: $state.number,
                                            smsType: "sms"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return {
                                            headers: {
                                              Authorization:
                                                "Bearer " +
                                                ($state.loginData.result
                                                  .token || "")
                                            }
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction3"] != null &&
                            typeof $steps["invokeGlobalAction3"] === "object" &&
                            typeof $steps["invokeGlobalAction3"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction3"] = await $steps[
                              "invokeGlobalAction3"
                            ];
                          }

                          $steps["invokeGlobalAction2"] =
                            $steps.invokeGlobalAction?.data?.success == true ||
                            $steps.invokeGlobalAction3?.data?.success == true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      undefined,
                                      "\u06a9\u062f \u0645\u062c\u062f\u062f\u0627\u064b \u0628\u0631\u0627\u06cc \u0634\u0645\u0627 \u0627\u0631\u0633\u0627\u0644 \u0634\u062f.",
                                      "top-left"
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction2"] != null &&
                            typeof $steps["invokeGlobalAction2"] === "object" &&
                            typeof $steps["invokeGlobalAction2"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction2"] = await $steps[
                              "invokeGlobalAction2"
                            ];
                          }
                        }}
                      >
                        {hasVariant($state, "loginPage", "emailCode")
                          ? "\u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u062c\u062f\u062f \u06a9\u062f"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "\u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u062c\u062f\u062f \u06a9\u062f"
                          : "Enter some text"}
                      </div>
                    </div>
                  ) : null}
                </div>
                <section
                  className={classNames(projectcss.all, sty.section__gac8N, {
                    [sty.sectionloginPage_mobileCode__gac8NHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__x7SK, {
                      [sty.freeBoxloginPage_emailCode__x7SKhTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.freeBoxloginPage_email__x7SKKkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.freeBoxloginPage_mobileCode__x7SKHp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.freeBoxloginPage_mobile__x7SKn9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.freeBoxloginPage_name__x7SK7Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.freeBoxloginPage_selectstatus__x7SKzJyl9]:
                        hasVariant($state, "loginPage", "selectstatus"),
                      [sty.freeBoxloginPage_userNameLogin__x7SKGVbwZ]:
                        hasVariant($state, "loginPage", "userNameLogin"),
                      [sty.freeBoxloginPage_userNameSingup__x7SKIiJc3]:
                        hasVariant($state, "loginPage", "userNameSingup")
                    })}
                    id={
                      hasVariant($state, "loginPage", "mobileCode")
                        ? "codeButten"
                        : undefined
                    }
                  >
                    <Button
                      data-plasmic-name={"button3"}
                      data-plasmic-override={overrides.button3}
                      className={classNames("__wab_instance", sty.button3, {
                        [sty.button3loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.button3loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.button3loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.button3loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.button3loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.button3loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.button3loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.button3loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      color={generateStateValueProp($state, [
                        "button3",
                        "color"
                      ])}
                      endIcon={
                        <Icon115Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg__keAfi,
                            {
                              [sty.svgloginPage_emailCode__keAfihTfDf]:
                                hasVariant($state, "loginPage", "emailCode"),
                              [sty.svgloginPage_mobileCode__keAfiHp6Ne]:
                                hasVariant($state, "loginPage", "mobileCode")
                            }
                          )}
                          role={"img"}
                        />
                      }
                      isDisabled={
                        hasVariant($state, "loginPage", "emailCode")
                          ? (() => {
                              try {
                                return $state.loadedbtn;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? (() => {
                              try {
                                return $state.loadedbtn;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          : undefined
                      }
                      load={generateStateValueProp($state, ["button3", "load"])}
                      loading={generateStateValueProp($state, [
                        "button3",
                        "loading"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoadedbtn"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadedbtn"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadedbtn"] != null &&
                          typeof $steps["updateLoadedbtn"] === "object" &&
                          typeof $steps["updateLoadedbtn"].then === "function"
                        ) {
                          $steps["updateLoadedbtn"] = await $steps[
                            "updateLoadedbtn"
                          ];
                        }

                        $steps["updateCods"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["cods"]
                                },
                                operation: 0,
                                value: parseInt(window.inputValues.join(""))
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateCods"] != null &&
                          typeof $steps["updateCods"] === "object" &&
                          typeof $steps["updateCods"].then === "function"
                        ) {
                          $steps["updateCods"] = await $steps["updateCods"];
                        }

                        $steps["invokeGlobalAction"] =
                          $state.typeLogin == "signup" &&
                          $state.type == "mobile"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://api.liom.app/auth/signup/validate",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          code: $state.cods,
                                          gateway: $ctx.query.gateway || "",
                                          data: $state.number
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["invokeGlobalAction3"] =
                          $state.typeLogin == "login" && $state.type == "mobile"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://api.liom.app/auth/login",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          code: $state.cods,
                                          gateway: $ctx.query.gateway || "",
                                          type: $state.type,
                                          name: "",
                                          data: $state.number || $state.email,
                                          username: "",
                                          target: "calendar",
                                          sex: $state.gender || "",
                                          token: $state.token || "",
                                          version: "",
                                          lang: "fa",
                                          country: "98",
                                          anotherLang: "fa",
                                          device: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            if (
                                              /Mobi|Android|iPhone|iPad|iPod/i.test(
                                                userAgent
                                              )
                                            ) {
                                              return "Mobile";
                                            } else if (
                                              /Tablet|iPad/i.test(userAgent)
                                            ) {
                                              return "Tablet";
                                            } else {
                                              return "Desktop";
                                            }
                                          })(),
                                          uniqueId: $$.uuid.v4(),
                                          fcm:
                                            window.localStorage.getItem(
                                              "fcmToken"
                                            ) || " ",
                                          os: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            const platform =
                                              window.navigator.userAgent;
                                            if (/Windows/i.test(platform))
                                              return "Windows";
                                            if (/Mac/i.test(platform))
                                              return "macOS";
                                            if (/Linux/i.test(platform))
                                              return "Linux";
                                            if (/Android/i.test(userAgent))
                                              return "Android";
                                            if (
                                              /iPhone|iPad|iPod/i.test(
                                                userAgent
                                              )
                                            )
                                              return "iOS";
                                            return "Unknown OS";
                                          })(),
                                          osVersion: (() => {
                                            const userAgent =
                                              window.navigator.userAgent;
                                            if (
                                              /Windows NT 10.0/.test(userAgent)
                                            )
                                              return "Windows 10";
                                            if (
                                              /Windows NT 6.3/.test(userAgent)
                                            )
                                              return "Windows 8.1";
                                            if (
                                              /Windows NT 6.2/.test(userAgent)
                                            )
                                              return "Windows 8";
                                            if (
                                              /Windows NT 6.1/.test(userAgent)
                                            )
                                              return "Windows 7";
                                            if (
                                              /Mac OS X (\d+[\._]\d+)/.test(
                                                userAgent
                                              )
                                            )
                                              return `macOS ${RegExp.$1.replace(
                                                "_",
                                                "."
                                              )}`;
                                            if (
                                              /Android (\d+(\.\d+)?)/.test(
                                                userAgent
                                              )
                                            )
                                              return `Android ${RegExp.$1}`;
                                            if (
                                              /CPU (iPhone )?OS (\d+_\d+)/.test(
                                                userAgent
                                              )
                                            )
                                              return `iOS ${RegExp.$2.replace(
                                                "_",
                                                "."
                                              )}`;
                                            return "Unknown Version";
                                          })(),
                                          password: "",
                                          postLang: "fa",
                                          refCode:
                                            $state.antdInput3.value || "",
                                          isCountryPending: false,
                                          device_type:
                                            window.navigator.platform,
                                          additionalData: {
                                            ip: "132465",
                                            name: "test1"
                                          },
                                          city: null,
                                          state: null,
                                          birthYear: null,
                                          religious: 0
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction3"] != null &&
                          typeof $steps["invokeGlobalAction3"] === "object" &&
                          typeof $steps["invokeGlobalAction3"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction3"] = await $steps[
                            "invokeGlobalAction3"
                          ];
                        }

                        $steps["invokeGlobalAction4"] =
                          $state.type != "mobile"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://api.liom.app/rest/user/setMobileValidate",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          data: $state.number,
                                          gateway: $ctx.query.gateway || "",
                                          name: $state.antdInput2.value || "",
                                          email: $state.email || "",
                                          gender: $state.gender,
                                          type: "mobile",
                                          code: $state.cods
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            Authorization:
                                              "Bearer " +
                                              ($state.loginData.result.token ||
                                                "")
                                          }
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction4"] != null &&
                          typeof $steps["invokeGlobalAction4"] === "object" &&
                          typeof $steps["invokeGlobalAction4"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction4"] = await $steps[
                            "invokeGlobalAction4"
                          ];
                        }

                        $steps["updateToken"] =
                          $steps.invokeGlobalAction?.data?.success == true &&
                          $state.typeLogin == "signup" &&
                          $state.type == "mobile"
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["token"]
                                  },
                                  operation: 0,
                                  value: $steps.invokeGlobalAction.data.result
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateToken"] != null &&
                          typeof $steps["updateToken"] === "object" &&
                          typeof $steps["updateToken"].then === "function"
                        ) {
                          $steps["updateToken"] = await $steps["updateToken"];
                        }

                        $steps["updateLoginPage"] =
                          $steps.invokeGlobalAction?.data?.success == true &&
                          $state.typeLogin == "signup"
                            ? (() => {
                                const actionArgs = {
                                  vgroup: "loginPage",
                                  operation: 0,
                                  value: "name"
                                };
                                return (({ vgroup, value }) => {
                                  if (typeof value === "string") {
                                    value = [value];
                                  }

                                  $stateSet($state, vgroup, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateLoginPage"] != null &&
                          typeof $steps["updateLoginPage"] === "object" &&
                          typeof $steps["updateLoginPage"].then === "function"
                        ) {
                          $steps["updateLoginPage"] = await $steps[
                            "updateLoginPage"
                          ];
                        }

                        $steps["updateLoginData"] =
                          ($steps.invokeGlobalAction4?.data?.success === true ||
                            $steps.invokeGlobalAction3?.data?.success ===
                              true) &&
                          $state.typeLogin === "login"
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loginData"]
                                  },
                                  operation: 0,
                                  value:
                                    $steps.invokeGlobalAction3?.data ||
                                    $steps.invokeGlobalAction4?.data
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateLoginData"] != null &&
                          typeof $steps["updateLoginData"] === "object" &&
                          typeof $steps["updateLoginData"].then === "function"
                        ) {
                          $steps["updateLoginData"] = await $steps[
                            "updateLoginData"
                          ];
                        }

                        $steps["runCode"] =
                          ($steps.invokeGlobalAction4?.data?.success === true ||
                            $steps.invokeGlobalAction3?.data?.success ===
                              true) &&
                          $state.typeLogin === "login"
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      var setCookie = (name, value, days) => {
                                        const expires = new Date(
                                          Date.now() + days * 86400000
                                        ).toUTCString();
                                        document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                                      };
                                      return setCookie(
                                        "token",
                                        JSON.stringify([
                                          $state.loginData.result.token
                                        ]),
                                        100
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["invokeGlobalAction2"] =
                          $steps.invokeGlobalAction?.data?.success == false ||
                          $steps.invokeGlobalAction3?.data?.success == false ||
                          $steps.invokeGlobalAction4?.data?.success == false
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u06a9\u062f \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0635\u062d\u06cc\u062d \u0646\u06cc\u0633\u062a.",
                                    "bottom-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }

                        $steps["goToPage"] =
                          ($steps.invokeGlobalAction4?.data?.success == true ||
                            $steps.invokeGlobalAction3?.data?.success ==
                              true) &&
                          $state.typeLogin == "login"
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return (() => {
                                        if (
                                          $state.paramsObject.redirect_url !=
                                            null &&
                                          $state.paramsObject.redirect_url != ""
                                        ) {
                                          var baseUrl =
                                            window.location.href.split(
                                              "redirect_url="
                                            )[1] || "";
                                          baseUrl = new URL(baseUrl);
                                          const origin = baseUrl.origin;
                                          const pathname =
                                            baseUrl.pathname.split("&")[0] ||
                                            "";
                                          const searchParams =
                                            baseUrl.searchParams.toString();
                                          baseUrl = searchParams
                                            ? `${origin}${pathname}?${searchParams}`
                                            : `${origin}${pathname}`;
                                        } else if (
                                          $state.loginData.result.maleUrl != ""
                                        )
                                          var baseUrl =
                                            "https://apps.liom.app/hamyar";
                                        else if (
                                          $state.loginData.result
                                            .healthStatus == "pregnancy"
                                        )
                                          var baseUrl =
                                            "https://apps.liom.app/pregnancy/";
                                        else
                                          var baseUrl =
                                            "https://apps.liom.app/main/";
                                        var separator = baseUrl.includes("?")
                                          ? "&token="
                                          : "?token=";
                                        var redirectUrl =
                                          baseUrl +
                                          separator +
                                          ($state.loginData.result.token ||
                                            "") +
                                          "&userId=" +
                                          $$.uuid.v4().slice(0, 4) +
                                          ($state.loginData.result.userId ||
                                            "") +
                                          $$.uuid.v4().slice(0, 4);
                                        return redirectUrl;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }

                        $steps["updateLoadedbtn2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadedbtn"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadedbtn2"] != null &&
                          typeof $steps["updateLoadedbtn2"] === "object" &&
                          typeof $steps["updateLoadedbtn2"].then === "function"
                        ) {
                          $steps["updateLoadedbtn2"] = await $steps[
                            "updateLoadedbtn2"
                          ];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button3",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button3",
                            "load"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadingChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button3",
                            "loading"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8V9Nx,
                          {
                            [sty.textloginPage_emailCode___8V9NxhTfDf]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_email___8V9NxKkEIz]: hasVariant(
                              $state,
                              "loginPage",
                              "email"
                            ),
                            [sty.textloginPage_mobileCode___8V9NxHp6Ne]:
                              hasVariant($state, "loginPage", "mobileCode"),
                            [sty.textloginPage_mobile___8V9Nxn9Ake]: hasVariant(
                              $state,
                              "loginPage",
                              "mobile"
                            ),
                            [sty.textloginPage_name___8V9Nx7Yteu]: hasVariant(
                              $state,
                              "loginPage",
                              "name"
                            ),
                            [sty.textloginPage_selectstatus___8V9NxzJyl9]:
                              hasVariant($state, "loginPage", "selectstatus"),
                            [sty.textloginPage_userNameLogin___8V9NxGVbwZ]:
                              hasVariant($state, "loginPage", "userNameLogin"),
                            [sty.textloginPage_userNameSingup___8V9NxIiJc3]:
                              hasVariant($state, "loginPage", "userNameSingup")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "selectstatus")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "name")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "email")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                          : "Button"}
                      </div>
                    </Button>
                  </div>
                </section>
              </div>
            </Reveal>
          ) : null}
          {(
            hasVariant($state, "loginPage", "selectstatus")
              ? true
              : hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              data-plasmic-name={"emailCode"}
              data-plasmic-override={overrides.emailCode}
              className={classNames("__wab_instance", sty.emailCode, {
                [sty.emailCodeloginPage_emailCode]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.emailCodeloginPage_email]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.emailCodeloginPage_mobileCode]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.emailCodeloginPage_mobile]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.emailCodeloginPage_name]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.emailCodeloginPage_selectstatus]: hasVariant(
                  $state,
                  "loginPage",
                  "selectstatus"
                ),
                [sty.emailCodeloginPage_userNameLogin]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.emailCodeloginPage_userNameSingup]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__yNnh9, {
                  [sty.freeBoxloginPage_emailCode__yNnh9HTfDf]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email__yNnh9KkEIz]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode__yNnh9Hp6Ne]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile__yNnh9N9Ake]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__yNnh97Yteu]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_selectstatus__yNnh9ZJyl9]: hasVariant(
                    $state,
                    "loginPage",
                    "selectstatus"
                  ),
                  [sty.freeBoxloginPage_userNameLogin__yNnh9GVbwZ]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup__yNnh9IiJc3]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__hgd0Q, {
                    [sty.freeBoxloginPage_emailCode__hgd0QhTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__hgd0QKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__hgd0QHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__hgd0Qn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__hgd0Q7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__hgd0QzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__hgd0QgVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__hgd0QiiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: "email"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__kmTGs, {
                      [sty.svgloginPage_emailCode__kmTGshTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__kmTGsKkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__kmTGsHp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__kmTGsn9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__kmTGs7Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_selectstatus__kmTGszJyl9]: hasVariant(
                        $state,
                        "loginPage",
                        "selectstatus"
                      ),
                      [sty.svgloginPage_userNameLogin__kmTGsGVbwZ]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__kmTGsIiJc3]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__zOtCo, {
                    [sty.freeBoxloginPage_emailCode__zOtCOhTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__zOtCoKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__zOtCoHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__zOtCOn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__zOtCo7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__zOtCOzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__zOtCogVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__zOtCoiiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7A6Mc, {
                      [sty.freeBoxloginPage_emailCode___7A6MChTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.freeBoxloginPage_mobileCode___7A6McHp6Ne]:
                        hasVariant($state, "loginPage", "mobileCode")
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___13WgY,
                        {
                          [sty.textloginPage_emailCode___13WgYhTfDf]:
                            hasVariant($state, "loginPage", "emailCode"),
                          [sty.textloginPage_email___13WgYKkEIz]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode___13WgYHp6Ne]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile___13WgYn9Ake]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name___13WgY7Yteu]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_selectstatus___13WgYzJyl9]:
                            hasVariant($state, "loginPage", "selectstatus"),
                          [sty.textloginPage_userNameLogin___13WgYgVbwZ]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup___13WgYiiJc3]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      {hasVariant($state, "loginPage", "selectstatus")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u0627\u06cc\u0645\u06cc\u0644"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : "Enter some text"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__i1CQz,
                        {
                          [sty.textloginPage_emailCode__i1CQzhTfDf]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.textloginPage_email__i1CQzKkEIz]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode__i1CQzHp6Ne]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile__i1CQzn9Ake]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name__i1CQz7Yteu]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_selectstatus__i1CQzzJyl9]:
                            hasVariant($state, "loginPage", "selectstatus"),
                          [sty.textloginPage_userNameLogin__i1CQzGVbwZ]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup__i1CQzIiJc3]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoginPage"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: "loginPage",
                                operation: 0,
                                value: "email"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoginPage"] != null &&
                          typeof $steps["updateLoginPage"] === "object" &&
                          typeof $steps["updateLoginPage"].then === "function"
                        ) {
                          $steps["updateLoginPage"] = await $steps[
                            "updateLoginPage"
                          ];
                        }
                      }}
                    >
                      {hasVariant($state, "loginPage", "selectstatus")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0627\u06cc\u0645\u06cc\u0644"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                        : "Enter some text"}
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__hc1Lo,
                      hasVariant($state, "loginPage", "selectstatus")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__hc1LohTfDf]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__hc1LoKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__hc1LoHp6Ne]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__hc1Lon9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__hc1Lo7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_selectstatus__hc1LozJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.freeBoxloginPage_userNameLogin__hc1LoGVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__hc1LoIiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput5"}
                      data-plasmic-override={overrides.textInput5}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput6,
                            {
                              [sty.antdInput6loginPage_emailCode]: hasVariant(
                                $state,
                                "loginPage",
                                "emailCode"
                              ),
                              [sty.antdInput6loginPage_mobileCode]: hasVariant(
                                $state,
                                "loginPage",
                                "mobileCode"
                              ),
                              [sty.antdInput6loginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              )
                            }
                          ),
                          disabled: hasVariant($state, "loginPage", "emailCode")
                            ? true
                            : hasVariant($state, "loginPage", "mobileCode")
                            ? true
                            : undefined,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput6", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          )
                            ? "liom@gmail.com"
                            : undefined,
                          size: "large",
                          type: hasVariant($state, "loginPage", "emailCode")
                            ? "email"
                            : hasVariant($state, "loginPage", "mobileCode")
                            ? "tel"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput6",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput6.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput6"}
                            data-plasmic-override={overrides.antdInput6}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput5, {
                        [sty.textInput5loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput5loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput5loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput5loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput5loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput5loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.textInput5loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput5loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__n6Lad,
                              {
                                [sty.freeBoxloginPage_emailCode__n6LadhTfDf]:
                                  hasVariant($state, "loginPage", "emailCode")
                              }
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__q1Doi,
                              hasVariant($state, "loginPage", "selectstatus")
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? "negative"
                                : hasVariant($state, "loginPage", "emailCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "name")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "email")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobile")
                                ? "negative"
                                : undefined,
                              {
                                [sty.textloginPage_emailCode__q1DoihTfDf]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.textloginPage_email__q1DoiKkEIz]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.textloginPage_mobileCode__q1DoiHp6Ne]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.textloginPage_mobile__q1Doin9Ake]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.textloginPage_name__q1Doi7Yteu]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.textloginPage_selectstatus__q1DoizJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  ),
                                [sty.textloginPage_userNameLogin__q1DoiGVbwZ]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.textloginPage_userNameSingup__q1DoiIiJc3]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                          >
                            {hasVariant($state, "loginPage", "selectstatus")
                              ? "+98 "
                              : hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                              ? "+98 "
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "emailCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "name")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobileCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "email")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobile")
                              ? "+98 "
                              : "Enter some text"}
                          </div>
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant($state, "loginPage", "selectstatus")
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "emailCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "name")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "email")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobile")
                                ? Icon111Icon
                                : "div"
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__wbksX,
                              {
                                [sty.svgloginPage_emailCode__wbksXhTfDf]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.svgloginPage_email__wbksXKkEIz]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.svgloginPage_mobileCode__wbksXHp6Ne]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.svgloginPage_mobile__wbksXn9Ake]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.svgloginPage_name__wbksX7Yteu]: hasVariant(
                                  $state,
                                  "loginPage",
                                  "name"
                                ),
                                [sty.svgloginPage_selectstatus__wbksXzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  ),
                                [sty.svgloginPage_userNameLogin__wbksXgVbwZ]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.svgloginPage_userNameSingup__wbksXiiJc3]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                            role={"img"}
                          />
                        </React.Fragment>
                      }
                      isDisabled={
                        hasVariant($state, "loginPage", "emailCode")
                          ? true
                          : undefined
                      }
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput5",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "09123456789"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "emailCode")
                          ? undefined
                          : true
                      }
                      showStartIcon={
                        hasVariant($state, "loginPage", "emailCode")
                          ? true
                          : undefined
                      }
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "loginPage", "emailCode")
                              ? Icon109Icon
                              : SearchSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg__crnc2,
                            {
                              [sty.svgloginPage_emailCode__crnc2HTfDf]:
                                hasVariant($state, "loginPage", "emailCode")
                            }
                          )}
                          role={"img"}
                        />
                      }
                      type={
                        hasVariant($state, "loginPage", "selectstatus") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "selectstatus")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "tel"
                          : undefined
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput5",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oYPmZ,
                      {
                        [sty.textloginPage_emailCode__oYPmZhTfDf]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "emailCode")
                      ? "\u0644\u0637\u0641\u0627 \u0639\u0644\u0627\u0648\u0647 \u0628\u0631 \u0644\u06cc\u0633\u062a \u0627\u06cc\u0645\u06cc\u0644 \u0647\u0627\u060c \u067e\u0648\u0634\u0647 \u0647\u0631\u0632\u0646\u0627\u0645\u0647 (spam) \u0631\u0627 \u0647\u0645 \u0686\u06a9 \u06a9\u0646\u06cc\u062f."
                      : "Enter some text"}
                  </div>
                  {(
                    hasVariant($state, "loginPage", "emailCode")
                      ? (() => {
                          try {
                            return $state.time != 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? (() => {
                          try {
                            return $state.time != 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__gnOoC,
                        {
                          [sty.freeBoxloginPage_emailCode__gnOoChTfDf]:
                            hasVariant($state, "loginPage", "emailCode"),
                          [sty.freeBoxloginPage_mobileCode__gnOoCHp6Ne]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.freeBoxloginPage_mobile__gnOoCn9Ake]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.freeBoxloginPage_userNameLogin__gnOoCgVbwZ]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.freeBoxloginPage_userNameSingup__gnOoCiiJc3]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ogHb2,
                          {
                            [sty.textloginPage_emailCode__ogHb2HTfDf]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_mobileCode__ogHb2Hp6Ne]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "emailCode") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.time;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "0";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : hasVariant($state, "loginPage", "mobileCode") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.time;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "0";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          "Enter some text"
                        )}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ozCe,
                          {
                            [sty.textloginPage_emailCode__ozCEhTfDf]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_mobileCode__ozCeHp6Ne]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "emailCode")
                          ? "\u062a\u0627 \u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u06a9\u062f \u0645\u0627\u0646\u062f\u0647 \u0627\u0633\u062a"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "\u062a\u0627 \u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u06a9\u062f \u0645\u0627\u0646\u062f\u0647 \u0627\u0633\u062a"
                          : "Enter some text"}
                      </div>
                      <Timer
                        className={classNames(
                          "__wab_instance",
                          sty.timer__eNqqY,
                          {
                            [sty.timerloginPage_emailCode__eNqqYhTfDf]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.timerloginPage_mobileCode__eNqqYHp6Ne]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                        intervalSeconds={
                          hasVariant($state, "loginPage", "emailCode")
                            ? 1
                            : hasVariant($state, "loginPage", "mobileCode")
                            ? 1
                            : undefined
                        }
                        isRunning={false}
                        onTick={async () => {
                          const $steps = {};

                          $steps["updateTime"] =
                            $state.time > 0
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["time"]
                                    },
                                    operation: 0,
                                    value: $state.time - 1
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateTime"] != null &&
                            typeof $steps["updateTime"] === "object" &&
                            typeof $steps["updateTime"].then === "function"
                          ) {
                            $steps["updateTime"] = await $steps["updateTime"];
                          }
                        }}
                        runWhileEditing={false}
                      />
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "loginPage", "emailCode")
                      ? (() => {
                          try {
                            return $state.time == 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? (() => {
                          try {
                            return $state.time == 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__poI2R,
                        {
                          [sty.freeBoxloginPage_emailCode__poI2RhTfDf]:
                            hasVariant($state, "loginPage", "emailCode"),
                          [sty.freeBoxloginPage_mobileCode__poI2RHp6Ne]:
                            hasVariant($state, "loginPage", "mobileCode")
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___31V8O,
                          {
                            [sty.textloginPage_emailCode___31V8OhTfDf]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_mobileCode___31V8OHp6Ne]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                      >
                        {hasVariant($state, "loginPage", "emailCode")
                          ? "23"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "23"
                          : "Enter some text"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9Q0,
                          {
                            [sty.textloginPage_emailCode___9Q0HTfDf]:
                              hasVariant($state, "loginPage", "emailCode"),
                            [sty.textloginPage_mobileCode___9Q0Hp6Ne]:
                              hasVariant($state, "loginPage", "mobileCode")
                          }
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateTime"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["time"]
                                  },
                                  operation: 0,
                                  value: 30
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTime"] != null &&
                            typeof $steps["updateTime"] === "object" &&
                            typeof $steps["updateTime"].then === "function"
                          ) {
                            $steps["updateTime"] = await $steps["updateTime"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://api.liom.app/auth/signup/send-code-v2",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          type: $state.type,
                                          country: "98",
                                          smsType: "sms",
                                          data: $state.email
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["invokeGlobalAction2"] =
                            $steps.invokeGlobalAction?.data?.success == true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      undefined,
                                      "\u06a9\u062f \u0645\u062c\u062f\u062f\u0627\u064b \u0628\u0631\u0627\u06cc \u0634\u0645\u0627 \u0627\u0631\u0633\u0627\u0644 \u0634\u062f.",
                                      "top-left"
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction2"] != null &&
                            typeof $steps["invokeGlobalAction2"] === "object" &&
                            typeof $steps["invokeGlobalAction2"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction2"] = await $steps[
                              "invokeGlobalAction2"
                            ];
                          }
                        }}
                      >
                        {hasVariant($state, "loginPage", "emailCode")
                          ? "\u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u062c\u062f\u062f \u06a9\u062f"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "\u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u062c\u062f\u062f \u06a9\u062f"
                          : "Enter some text"}
                      </div>
                    </div>
                  ) : null}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__i5YmH, {
                    [sty.freeBoxloginPage_emailCode__i5YmHhTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__i5YmHKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__i5YmHHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__i5YmHn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__i5YmH7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__i5YmHzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__i5YmHgVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__i5YmHiiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <Button
                    data-plasmic-name={"button7"}
                    data-plasmic-override={overrides.button7}
                    className={classNames("__wab_instance", sty.button7, {
                      [sty.button7loginPage_emailCode]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.button7loginPage_email]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.button7loginPage_mobileCode]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.button7loginPage_mobile]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.button7loginPage_name]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.button7loginPage_selectstatus]: hasVariant(
                        $state,
                        "loginPage",
                        "selectstatus"
                      ),
                      [sty.button7loginPage_userNameLogin]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.button7loginPage_userNameSingup]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    color={generateStateValueProp($state, ["button7", "color"])}
                    endIcon={
                      <Icon115Icon
                        className={classNames(projectcss.all, sty.svg__bgJqE, {
                          [sty.svgloginPage_emailCode__bgJqEhTfDf]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.svgloginPage_mobileCode__bgJqEHp6Ne]: hasVariant(
                            $state,
                            "loginPage",
                            "mobileCode"
                          )
                        })}
                        role={"img"}
                      />
                    }
                    isDisabled={
                      hasVariant($state, "loginPage", "emailCode")
                        ? (() => {
                            try {
                              return $state.loadedbtn;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? (() => {
                            try {
                              return $state.loadedbtn;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                    load={generateStateValueProp($state, ["button7", "load"])}
                    loading={generateStateValueProp($state, [
                      "button7",
                      "loading"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadedbtn"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn"] != null &&
                        typeof $steps["updateLoadedbtn"] === "object" &&
                        typeof $steps["updateLoadedbtn"].then === "function"
                      ) {
                        $steps["updateLoadedbtn"] = await $steps[
                          "updateLoadedbtn"
                        ];
                      }

                      $steps["updateCods"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["cods"]
                              },
                              operation: 0,
                              value: parseInt(window.inputValues.join(""))
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCods"] != null &&
                        typeof $steps["updateCods"] === "object" &&
                        typeof $steps["updateCods"].then === "function"
                      ) {
                        $steps["updateCods"] = await $steps["updateCods"];
                      }

                      $steps["invokeGlobalAction"] =
                        $state.typeLogin == "signup"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/auth/signup/validate",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        code: $state.cods,
                                        data: $state.email
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["invokeGlobalAction3"] =
                        $state.typeLogin == "login"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/auth/login",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        code: $state.cods,
                                        type: $state.type,
                                        name: "",
                                        data: $state.number || $state.email,
                                        username: "",
                                        target: "calendar",
                                        sex: $state.gender || "",
                                        token: $state.token || "",
                                        version: "",
                                        lang: "fa",
                                        country: "98",
                                        anotherLang: "fa",
                                        device: (() => {
                                          const userAgent =
                                            window.navigator.userAgent;
                                          if (
                                            /Mobi|Android|iPhone|iPad|iPod/i.test(
                                              userAgent
                                            )
                                          ) {
                                            return "Mobile";
                                          } else if (
                                            /Tablet|iPad/i.test(userAgent)
                                          ) {
                                            return "Tablet";
                                          } else {
                                            return "Desktop";
                                          }
                                        })(),
                                        uniqueId: $$.uuid.v4(),
                                        fcm: "  ",
                                        os: (() => {
                                          const userAgent =
                                            window.navigator.userAgent;
                                          const platform =
                                            window.navigator.userAgent;
                                          if (/Windows/i.test(platform))
                                            return "Windows";
                                          if (/Mac/i.test(platform))
                                            return "macOS";
                                          if (/Linux/i.test(platform))
                                            return "Linux";
                                          if (/Android/i.test(userAgent))
                                            return "Android";
                                          if (
                                            /iPhone|iPad|iPod/i.test(userAgent)
                                          )
                                            return "iOS";
                                          return "Unknown OS";
                                        })(),
                                        osVersion: (() => {
                                          const userAgent =
                                            window.navigator.userAgent;
                                          if (/Windows NT 10.0/.test(userAgent))
                                            return "Windows 10";
                                          if (/Windows NT 6.3/.test(userAgent))
                                            return "Windows 8.1";
                                          if (/Windows NT 6.2/.test(userAgent))
                                            return "Windows 8";
                                          if (/Windows NT 6.1/.test(userAgent))
                                            return "Windows 7";
                                          if (
                                            /Mac OS X (\d+[\._]\d+)/.test(
                                              userAgent
                                            )
                                          )
                                            return `macOS ${RegExp.$1.replace(
                                              "_",
                                              "."
                                            )}`;
                                          if (
                                            /Android (\d+(\.\d+)?)/.test(
                                              userAgent
                                            )
                                          )
                                            return `Android ${RegExp.$1}`;
                                          if (
                                            /CPU (iPhone )?OS (\d+_\d+)/.test(
                                              userAgent
                                            )
                                          )
                                            return `iOS ${RegExp.$2.replace(
                                              "_",
                                              "."
                                            )}`;
                                          return "Unknown Version";
                                        })(),
                                        password: "",
                                        postLang: "fa",
                                        refCode: $state.antdInput3.value || "",
                                        isCountryPending: false,
                                        device_type: window.navigator.platform,
                                        additionalData: {
                                          ip: "132465",
                                          name: "test1"
                                        },
                                        city: null,
                                        state: null,
                                        birthYear: null,
                                        religious: 0
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["updateToken"] =
                        $steps.invokeGlobalAction?.data?.success == true &&
                        $state.typeLogin == "signup"
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["token"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction.data.result
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateToken"] != null &&
                        typeof $steps["updateToken"] === "object" &&
                        typeof $steps["updateToken"].then === "function"
                      ) {
                        $steps["updateToken"] = await $steps["updateToken"];
                      }

                      $steps["updateLoginPage"] =
                        $steps.invokeGlobalAction?.data?.success == true &&
                        $state.typeLogin == "signup"
                          ? (() => {
                              const actionArgs = {
                                vgroup: "loginPage",
                                operation: 0,
                                value: "name"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateLoginPage"] != null &&
                        typeof $steps["updateLoginPage"] === "object" &&
                        typeof $steps["updateLoginPage"].then === "function"
                      ) {
                        $steps["updateLoginPage"] = await $steps[
                          "updateLoginPage"
                        ];
                      }

                      $steps["updateLoginData"] =
                        $steps.invokeGlobalAction3?.data?.success == true &&
                        $state.typeLogin == "login"
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loginData"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction3.data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateLoginData"] != null &&
                        typeof $steps["updateLoginData"] === "object" &&
                        typeof $steps["updateLoginData"].then === "function"
                      ) {
                        $steps["updateLoginData"] = await $steps[
                          "updateLoginData"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction?.data?.success == false ||
                        $steps.invokeGlobalAction3?.data?.success == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u06a9\u062f \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0635\u062d\u06cc\u062d \u0646\u06cc\u0633\u062a.",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["goToPage"] =
                        $steps.invokeGlobalAction3?.data?.success == true &&
                        $state.typeLogin == "login"
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return (() => {
                                      var baseUrl =
                                        window.location.href.split(
                                          "redirect_url="
                                        )[1] || "";
                                      var separator = baseUrl.includes("?")
                                        ? "&token="
                                        : "?token=";
                                      var redirectUrl =
                                        baseUrl +
                                        separator +
                                        $$.uuid.v4().slice(0, 6) +
                                        ($state.loginData.result.token || "") +
                                        $$.uuid.v4().slice(10, 13) +
                                        "&userId=" +
                                        $$.uuid.v4().slice(0, 4) +
                                        ($state.loginData.result.userId || "") +
                                        $$.uuid.v4().slice(0, 4);
                                      console.log(redirectUrl);
                                      return window.open(redirectUrl, "_self");
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["updateLoadedbtn2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn2"] != null &&
                        typeof $steps["updateLoadedbtn2"] === "object" &&
                        typeof $steps["updateLoadedbtn2"].then === "function"
                      ) {
                        $steps["updateLoadedbtn2"] = await $steps[
                          "updateLoadedbtn2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button7", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button7", "load"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button7",
                          "loading"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5Qujp,
                        {
                          [sty.textloginPage_emailCode___5QujphTfDf]:
                            hasVariant($state, "loginPage", "emailCode"),
                          [sty.textloginPage_email___5QujpKkEIz]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode___5QujpHp6Ne]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile___5Qujpn9Ake]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name___5Qujp7Yteu]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_selectstatus___5QujpzJyl9]:
                            hasVariant($state, "loginPage", "selectstatus"),
                          [sty.textloginPage_userNameLogin___5QujpGVbwZ]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup___5QujpIiJc3]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      {hasVariant($state, "loginPage", "selectstatus")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : "Button"}
                    </div>
                  </Button>
                </div>
              </div>
            </Reveal>
          ) : null}
          {(
            hasVariant($state, "loginPage", "selectstatus")
              ? true
              : hasVariant($state, "loginPage", "userNameSingup")
              ? true
              : hasVariant($state, "loginPage", "userNameLogin")
              ? true
              : hasVariant($state, "loginPage", "emailCode")
              ? true
              : hasVariant($state, "loginPage", "name")
              ? true
              : hasVariant($state, "loginPage", "mobileCode")
              ? true
              : hasVariant($state, "loginPage", "email")
              ? true
              : hasVariant($state, "loginPage", "mobile")
              ? true
              : false
          ) ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__p9Vkm, {
                [sty.revealloginPage_emailCode__p9VkMhTfDf]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.revealloginPage_email__p9VkmKkEIz]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.revealloginPage_mobileCode__p9VkmHp6Ne]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.revealloginPage_mobile__p9VkMn9Ake]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.revealloginPage_name__p9Vkm7Yteu]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.revealloginPage_selectstatus__p9VkMzJyl9]: hasVariant(
                  $state,
                  "loginPage",
                  "selectstatus"
                ),
                [sty.revealloginPage_userNameLogin__p9VkmgVbwZ]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.revealloginPage_userNameSingup__p9VkmiiJc3]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___7DKnk, {
                  [sty.freeBoxloginPage_emailCode___7DKnkhTfDf]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.freeBoxloginPage_email___7DKnkKkEIz]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.freeBoxloginPage_mobileCode___7DKnkHp6Ne]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.freeBoxloginPage_mobile___7DKnkn9Ake]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name___7DKnk7Yteu]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.freeBoxloginPage_selectstatus___7DKnkzJyl9]: hasVariant(
                    $state,
                    "loginPage",
                    "selectstatus"
                  ),
                  [sty.freeBoxloginPage_userNameLogin___7DKnkGVbwZ]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.freeBoxloginPage_userNameSingup___7DKnkIiJc3]:
                    hasVariant($state, "loginPage", "userNameSingup")
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__x5Sfj, {
                    [sty.freeBoxloginPage_emailCode__x5SfjhTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__x5SfjKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__x5SfjHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__x5Sfjn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__x5Sfj7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__x5SfjzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__x5SfjGVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__x5SfjIiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginPage"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginPage",
                            operation: 0,
                            value: []
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginPage"] != null &&
                      typeof $steps["updateLoginPage"] === "object" &&
                      typeof $steps["updateLoginPage"].then === "function"
                    ) {
                      $steps["updateLoginPage"] = await $steps[
                        "updateLoginPage"
                      ];
                    }
                  }}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__mpPvp, {
                      [sty.svgloginPage_emailCode__mpPvphTfDf]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.svgloginPage_email__mpPvpKkEIz]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.svgloginPage_mobileCode__mpPvpHp6Ne]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.svgloginPage_mobile__mpPvpn9Ake]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.svgloginPage_name__mpPvp7Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.svgloginPage_selectstatus__mpPvpzJyl9]: hasVariant(
                        $state,
                        "loginPage",
                        "selectstatus"
                      ),
                      [sty.svgloginPage_userNameLogin__mpPvpGVbwZ]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.svgloginPage_userNameSingup__mpPvpIiJc3]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__xsiUz, {
                    [sty.freeBoxloginPage_emailCode__xsiUzhTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__xsiUzKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__xsiUzHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__xsiUzn9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__xsiUz7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__xsiUzzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__xsiUzGVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__xsiUzIiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d5D3G,
                      {
                        [sty.textloginPage_emailCode__d5D3GhTfDf]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textloginPage_email__d5D3GKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textloginPage_mobileCode__d5D3GHp6Ne]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textloginPage_mobile__d5D3Gn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textloginPage_name__d5D3G7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textloginPage_selectstatus__d5D3GzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.textloginPage_userNameLogin__d5D3GgVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.textloginPage_userNameSingup__d5D3GiiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    {hasVariant($state, "loginPage", "selectstatus")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameSingup")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "userNameLogin")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "emailCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "name")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobileCode")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : hasVariant($state, "loginPage", "email")
                      ? "\u0627\u06cc\u0645\u06cc\u0644"
                      : hasVariant($state, "loginPage", "mobile")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__vtySb,
                      hasVariant($state, "loginPage", "selectstatus")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "negative"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "negative"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "name")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "negative"
                        : hasVariant($state, "loginPage", "email")
                        ? "negative"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "negative"
                        : undefined,
                      {
                        [sty.freeBoxloginPage_emailCode__vtySbhTfDf]:
                          hasVariant($state, "loginPage", "emailCode"),
                        [sty.freeBoxloginPage_email__vtySbKkEIz]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.freeBoxloginPage_mobileCode__vtySbHp6Ne]:
                          hasVariant($state, "loginPage", "mobileCode"),
                        [sty.freeBoxloginPage_mobile__vtySbn9Ake]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.freeBoxloginPage_name__vtySb7Yteu]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.freeBoxloginPage_selectstatus__vtySbzJyl9]:
                          hasVariant($state, "loginPage", "selectstatus"),
                        [sty.freeBoxloginPage_userNameLogin__vtySbGVbwZ]:
                          hasVariant($state, "loginPage", "userNameLogin"),
                        [sty.freeBoxloginPage_userNameSingup__vtySbIiJc3]:
                          hasVariant($state, "loginPage", "userNameSingup")
                      }
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput2"}
                      data-plasmic-override={overrides.textInput2}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput5,
                            {
                              [sty.antdInput5loginPage_emailCode]: hasVariant(
                                $state,
                                "loginPage",
                                "emailCode"
                              ),
                              [sty.antdInput5loginPage_email]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              ),
                              [sty.antdInput5loginPage_mobile]: hasVariant(
                                $state,
                                "loginPage",
                                "mobile"
                              ),
                              [sty.antdInput5loginPage_userNameLogin]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameLogin"
                                ),
                              [sty.antdInput5loginPage_userNameSingup]:
                                hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                            }
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput5", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: hasVariant($state, "loginPage", "email")
                            ? "liom@gmail.com"
                            : undefined,
                          size: "large",
                          type: hasVariant($state, "loginPage", "email")
                            ? "email"
                            : undefined,
                          value: generateStateValueProp($state, [
                            "antdInput5",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput5.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput5"}
                            data-plasmic-override={overrides.antdInput5}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput2, {
                        [sty.textInput2loginPage_emailCode]: hasVariant(
                          $state,
                          "loginPage",
                          "emailCode"
                        ),
                        [sty.textInput2loginPage_email]: hasVariant(
                          $state,
                          "loginPage",
                          "email"
                        ),
                        [sty.textInput2loginPage_mobileCode]: hasVariant(
                          $state,
                          "loginPage",
                          "mobileCode"
                        ),
                        [sty.textInput2loginPage_mobile]: hasVariant(
                          $state,
                          "loginPage",
                          "mobile"
                        ),
                        [sty.textInput2loginPage_name]: hasVariant(
                          $state,
                          "loginPage",
                          "name"
                        ),
                        [sty.textInput2loginPage_selectstatus]: hasVariant(
                          $state,
                          "loginPage",
                          "selectstatus"
                        ),
                        [sty.textInput2loginPage_userNameLogin]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameLogin"
                        ),
                        [sty.textInput2loginPage_userNameSingup]: hasVariant(
                          $state,
                          "loginPage",
                          "userNameSingup"
                        )
                      })}
                      endIcon={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__f7DuK,
                              {
                                [sty.freeBoxloginPage_email__f7DuKKkEIz]:
                                  hasVariant($state, "loginPage", "email")
                              }
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__swhdd,
                              hasVariant($state, "loginPage", "selectstatus")
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                                ? "negative"
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? "negative"
                                : hasVariant($state, "loginPage", "emailCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "name")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? "negative"
                                : hasVariant($state, "loginPage", "email")
                                ? "negative"
                                : hasVariant($state, "loginPage", "mobile")
                                ? "negative"
                                : undefined,
                              {
                                [sty.textloginPage_emailCode__swhddhTfDf]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.textloginPage_email__swhddKkEIz]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.textloginPage_mobileCode__swhddHp6Ne]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.textloginPage_mobile__swhddn9Ake]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.textloginPage_name__swhdd7Yteu]:
                                  hasVariant($state, "loginPage", "name"),
                                [sty.textloginPage_selectstatus__swhddzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  ),
                                [sty.textloginPage_userNameLogin__swhddGVbwZ]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.textloginPage_userNameSingup__swhddIiJc3]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                          >
                            {hasVariant($state, "loginPage", "selectstatus")
                              ? "+98 "
                              : hasVariant(
                                  $state,
                                  "loginPage",
                                  "userNameSingup"
                                )
                              ? "+98 "
                              : hasVariant($state, "loginPage", "userNameLogin")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "emailCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "name")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobileCode")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "email")
                              ? "+98 "
                              : hasVariant($state, "loginPage", "mobile")
                              ? "+98 "
                              : "Enter some text"}
                          </div>
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant($state, "loginPage", "selectstatus")
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                                ? Icon111Icon
                                : hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  )
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "emailCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "name")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobileCode")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "email")
                                ? Icon111Icon
                                : hasVariant($state, "loginPage", "mobile")
                                ? Icon111Icon
                                : "div"
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__itPou,
                              {
                                [sty.svgloginPage_emailCode__itPouhTfDf]:
                                  hasVariant($state, "loginPage", "emailCode"),
                                [sty.svgloginPage_email__itPouKkEIz]:
                                  hasVariant($state, "loginPage", "email"),
                                [sty.svgloginPage_mobileCode__itPouHp6Ne]:
                                  hasVariant($state, "loginPage", "mobileCode"),
                                [sty.svgloginPage_mobile__itPoun9Ake]:
                                  hasVariant($state, "loginPage", "mobile"),
                                [sty.svgloginPage_name__itPou7Yteu]: hasVariant(
                                  $state,
                                  "loginPage",
                                  "name"
                                ),
                                [sty.svgloginPage_selectstatus__itPouzJyl9]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "selectstatus"
                                  ),
                                [sty.svgloginPage_userNameLogin__itPouGVbwZ]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameLogin"
                                  ),
                                [sty.svgloginPage_userNameSingup__itPouIiJc3]:
                                  hasVariant(
                                    $state,
                                    "loginPage",
                                    "userNameSingup"
                                  )
                              }
                            )}
                            role={"img"}
                          />
                        </React.Fragment>
                      }
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput2",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={
                        hasVariant($state, "loginPage", "selectstatus")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameSingup")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "userNameLogin")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "emailCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "name")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "mobileCode")
                          ? "09123456789"
                          : hasVariant($state, "loginPage", "email")
                          ? "\u0627\u06cc\u0645\u06cc\u0644"
                          : hasVariant($state, "loginPage", "mobile")
                          ? "09123456789"
                          : "09123456789"
                      }
                      showEndIcon={
                        hasVariant($state, "loginPage", "email")
                          ? undefined
                          : true
                      }
                      showStartIcon={
                        hasVariant($state, "loginPage", "email")
                          ? true
                          : undefined
                      }
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "loginPage", "email")
                              ? Icon109Icon
                              : SearchSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg__ionn1,
                            {
                              [sty.svgloginPage_email__ionn1KkEIz]: hasVariant(
                                $state,
                                "loginPage",
                                "email"
                              )
                            }
                          )}
                          role={"img"}
                        />
                      }
                      type={
                        hasVariant($state, "loginPage", "selectstatus") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameSingup") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "userNameLogin") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "emailCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "name") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "mobileCode") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : hasVariant($state, "loginPage", "email") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "email"
                          : hasVariant($state, "loginPage", "email")
                          ? "email"
                          : hasVariant($state, "loginPage", "mobile") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : undefined
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput2",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__tucve, {
                    [sty.freeBoxloginPage_emailCode__tucvehTfDf]: hasVariant(
                      $state,
                      "loginPage",
                      "emailCode"
                    ),
                    [sty.freeBoxloginPage_email__tucveKkEIz]: hasVariant(
                      $state,
                      "loginPage",
                      "email"
                    ),
                    [sty.freeBoxloginPage_mobileCode__tucveHp6Ne]: hasVariant(
                      $state,
                      "loginPage",
                      "mobileCode"
                    ),
                    [sty.freeBoxloginPage_mobile__tucven9Ake]: hasVariant(
                      $state,
                      "loginPage",
                      "mobile"
                    ),
                    [sty.freeBoxloginPage_name__tucve7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.freeBoxloginPage_selectstatus__tucvezJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    ),
                    [sty.freeBoxloginPage_userNameLogin__tucveGVbwZ]:
                      hasVariant($state, "loginPage", "userNameLogin"),
                    [sty.freeBoxloginPage_userNameSingup__tucveIiJc3]:
                      hasVariant($state, "loginPage", "userNameSingup")
                  })}
                >
                  <Button
                    data-plasmic-name={"button5"}
                    data-plasmic-override={overrides.button5}
                    className={classNames("__wab_instance", sty.button5, {
                      [sty.button5loginPage_emailCode]: hasVariant(
                        $state,
                        "loginPage",
                        "emailCode"
                      ),
                      [sty.button5loginPage_email]: hasVariant(
                        $state,
                        "loginPage",
                        "email"
                      ),
                      [sty.button5loginPage_mobileCode]: hasVariant(
                        $state,
                        "loginPage",
                        "mobileCode"
                      ),
                      [sty.button5loginPage_mobile]: hasVariant(
                        $state,
                        "loginPage",
                        "mobile"
                      ),
                      [sty.button5loginPage_name]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.button5loginPage_selectstatus]: hasVariant(
                        $state,
                        "loginPage",
                        "selectstatus"
                      ),
                      [sty.button5loginPage_userNameLogin]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameLogin"
                      ),
                      [sty.button5loginPage_userNameSingup]: hasVariant(
                        $state,
                        "loginPage",
                        "userNameSingup"
                      )
                    })}
                    color={generateStateValueProp($state, ["button5", "color"])}
                    endIcon={
                      <Icon115Icon
                        className={classNames(projectcss.all, sty.svg__dvIwq)}
                        role={"img"}
                      />
                    }
                    isDisabled={
                      hasVariant($state, "loginPage", "userNameSingup")
                        ? (() => {
                            try {
                              return (
                                !(
                                  $state.antdInput.value.length === 10 ||
                                  $state.antdInput.value.length === 11
                                ) || $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? (() => {
                            try {
                              return (
                                !(
                                  $state.antdInput.value.length === 10 ||
                                  $state.antdInput.value.length === 11
                                ) || $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "email")
                        ? (() => {
                            try {
                              return (
                                $state.loadedbtn ||
                                (() => {
                                  const emailRegex =
                                    /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                                  return !emailRegex.test(
                                    $state.antdInput5.value
                                  );
                                })()
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "loginPage", "mobile")
                        ? (() => {
                            try {
                              return (
                                !(
                                  $state.antdInput.value.length === 10 ||
                                  $state.antdInput.value.length === 11
                                ) || $state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                    load={generateStateValueProp($state, ["button5", "load"])}
                    loading={generateStateValueProp($state, [
                      "button5",
                      "loading"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadedbtn"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn"] != null &&
                        typeof $steps["updateLoadedbtn"] === "object" &&
                        typeof $steps["updateLoadedbtn"].then === "function"
                      ) {
                        $steps["updateLoadedbtn"] = await $steps[
                          "updateLoadedbtn"
                        ];
                      }

                      $steps["updateEmail"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["email"]
                              },
                              operation: 0,
                              value: $state.antdInput5.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEmail"] != null &&
                        typeof $steps["updateEmail"] === "object" &&
                        typeof $steps["updateEmail"].then === "function"
                      ) {
                        $steps["updateEmail"] = await $steps["updateEmail"];
                      }

                      $steps["invokeGlobalAction2"] = (() => {
                        const emailRegex =
                          /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
                        return !emailRegex.test($state.email);
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0627\u06cc\u0645\u06cc\u0644 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0635\u062d\u06cc\u062d \u0646\u06cc\u0633\u062a.",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction"] = (() => {
                        const emailRegex =
                          /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
                        return emailRegex.test($state.email);
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.liom.app/auth/signup/send-code-v2",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      type: "email",
                                      country: "98",
                                      smsType: "sms",
                                      data: $state.email
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateTypeLogin"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["typeLogin"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction.data.result.type
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTypeLogin"] != null &&
                        typeof $steps["updateTypeLogin"] === "object" &&
                        typeof $steps["updateTypeLogin"].then === "function"
                      ) {
                        $steps["updateTypeLogin"] = await $steps[
                          "updateTypeLogin"
                        ];
                      }

                      $steps["updateLoginPage"] =
                        $steps.invokeGlobalAction?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                vgroup: "loginPage",
                                operation: 0,
                                value: "emailCode"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateLoginPage"] != null &&
                        typeof $steps["updateLoginPage"] === "object" &&
                        typeof $steps["updateLoginPage"].then === "function"
                      ) {
                        $steps["updateLoginPage"] = await $steps[
                          "updateLoginPage"
                        ];
                      }

                      $steps["updateTextInputValue2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTextInputValue2"] != null &&
                        typeof $steps["updateTextInputValue2"] === "object" &&
                        typeof $steps["updateTextInputValue2"].then ===
                          "function"
                      ) {
                        $steps["updateTextInputValue2"] = await $steps[
                          "updateTextInputValue2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button5", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button5", "load"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button5",
                          "loading"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uym7J,
                        {
                          [sty.textloginPage_emailCode__uym7JhTfDf]: hasVariant(
                            $state,
                            "loginPage",
                            "emailCode"
                          ),
                          [sty.textloginPage_email__uym7JKkEIz]: hasVariant(
                            $state,
                            "loginPage",
                            "email"
                          ),
                          [sty.textloginPage_mobileCode__uym7JHp6Ne]:
                            hasVariant($state, "loginPage", "mobileCode"),
                          [sty.textloginPage_mobile__uym7Jn9Ake]: hasVariant(
                            $state,
                            "loginPage",
                            "mobile"
                          ),
                          [sty.textloginPage_name__uym7J7Yteu]: hasVariant(
                            $state,
                            "loginPage",
                            "name"
                          ),
                          [sty.textloginPage_selectstatus__uym7JzJyl9]:
                            hasVariant($state, "loginPage", "selectstatus"),
                          [sty.textloginPage_userNameLogin__uym7JGVbwZ]:
                            hasVariant($state, "loginPage", "userNameLogin"),
                          [sty.textloginPage_userNameSingup__uym7JIiJc3]:
                            hasVariant($state, "loginPage", "userNameSingup")
                        }
                      )}
                    >
                      {hasVariant($state, "loginPage", "selectstatus")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "userNameSingup")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "userNameLogin")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "emailCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "name")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobileCode")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "email")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : hasVariant($state, "loginPage", "mobile")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                        : "Button"}
                    </div>
                  </Button>
                </div>
              </div>
            </Reveal>
          ) : null}
          <AntdModal
            data-plasmic-name={"rules"}
            data-plasmic-override={overrides.rules}
            className={classNames("__wab_instance", sty.rules, {
              [sty.rulesloginPage_mobileCode]: hasVariant(
                $state,
                "loginPage",
                "mobileCode"
              ),
              [sty.rulesloginPage_name]: hasVariant(
                $state,
                "loginPage",
                "name"
              ),
              [sty.rulesloginPage_selectstatus]: hasVariant(
                $state,
                "loginPage",
                "selectstatus"
              )
            })}
            closeIcon={
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant($state, "loginPage", "selectstatus")
                    ? SearchSvgIcon
                    : hasVariant($state, "loginPage", "name")
                    ? SearchSvgIcon
                    : "div"
                }
                className={classNames(projectcss.all, sty.svg__qoPKo, {
                  [sty.svgloginPage_name__qoPKo7Yteu]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.svgloginPage_selectstatus__qoPKozJyl9]: hasVariant(
                    $state,
                    "loginPage",
                    "selectstatus"
                  )
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateRulesOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["rules", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateRulesOpen"] != null &&
                    typeof $steps["updateRulesOpen"] === "object" &&
                    typeof $steps["updateRulesOpen"].then === "function"
                  ) {
                    $steps["updateRulesOpen"] = await $steps["updateRulesOpen"];
                  }
                }}
                role={"img"}
              />
            }
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames
            )}
            hideFooter={
              hasVariant($state, "loginPage", "selectstatus")
                ? true
                : hasVariant($state, "loginPage", "name")
                ? true
                : undefined
            }
            maskClosable={
              hasVariant($state, "loginPage", "selectstatus")
                ? false
                : hasVariant($state, "loginPage", "name")
                ? false
                : undefined
            }
            modalContentClassName={classNames({
              [sty["pcls_E4I9TOo-KuTf"]]: hasVariant(
                $state,
                "loginPage",
                "selectstatus"
              ),
              [sty["pcls_LGEz7GLTHj0q"]]: hasVariant(
                $state,
                "loginPage",
                "name"
              )
            })}
            modalScopeClassName={sty["rules__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["rules", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["rules", "open"])}
            title={null}
            trigger={null}
            width={
              hasVariant($state, "loginPage", "selectstatus")
                ? "100vw"
                : hasVariant($state, "loginPage", "name")
                ? "100vw"
                : undefined
            }
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__dn9Bz, {
                [sty.freeBoxloginPage_name__dn9Bz7Yteu]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.freeBoxloginPage_selectstatus__dn9BZzJyl9]: hasVariant(
                  $state,
                  "loginPage",
                  "selectstatus"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xxXaw,
                  {
                    [sty.textloginPage_name__xxXaw7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.textloginPage_selectstatus__xxXaWzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    )
                  }
                )}
              >
                {hasVariant($state, "loginPage", "selectstatus") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return " محدودیت سنی\nلیوم محدودیت سنی ندارد\n\n- انتشار محتوایی که به طور مستقیم یا غیرمستقیم توهین به اسلام تلقی بشود ممنوع است.\n -  انتشار پستهای فانتزی مثبت هیجده ممنوع است.\n- انتشار محتوای سیاسی که همراه با توهین و نفرت پراکنی باشد ممنوع است.\n\n - پست مثبت هیجده درصورتی مجاز به انتشار می باشد که به اموزش بپردازد و  یا نیاز ب کمک داشته باشد که در هر دو صورت باید حتما  تگ مثبت هیجده توسط صاحب پست فعال شود . ( توجه شود که در هیچ صورتی پست های مثبت هیجده به بخش داغترین ورود نخواهند پیدا کرد)\n\n-  فعال نکردن تگ مثبت هیجده تخلف است و در صورتیکه چندین بار تکرار شود و رعایت نکنید،  پست شما در ابتدا مستقیما حذف میشود و در ادامه منجر به بلاک اکانت شما خواهد شد . \n\n - اگر نمیخواهید محتواهای مثبت هیجده را مشاهده کنید از بخش تنظیمات آن را برای خود فعال کنید .\n\nانجام موارد زیر ممنوع می باشد \n• تبلیغ انواع مواد مخدر ممنوع است.\n• محتوایی که جزئیات آموزشی در مورد نحوه انجام یک فعالیت خطرناک(خودکشی،قاچاق،ترور،خودآزاری) را توضیح یا ارائه می دهد.\n• بازی‌های خطرناک که در آن از فرد کارهایی که ناهنجار است و عرف نیست طلب میشود که ممکن است منجر به آسیب بدنی یا آسیب مالی شوند.\n• ترویج خودکشی و خودآزاری در لیوم ممنوع است.\n• محتوایی که دستورالعمل‌هایی برای خودکشی یا نحوه خودآزاری ارائه می‌دهد.\n• بازی های خودکشی یا آسیب رساندن به خود،چالش ها، پیمان ها یا کلاهبرداری ها.\n• محتوایی که حاوی زبان صریح جنسی برای ارضای جنسی است.\n \n\n• محتوایی که آزار و اذیت هماهنگ را تشویق می کند.\n• محتوایی که قربانیان تراژدی های خشونت آمیز را تحقیر می کند.\n• محتوایی که آسیب یا ارعاب عمدی را به تصویر می‌کشد، مانند تعقیب سایبری.\n• محتوایی که آرزوی مرگ، بیماری جدی یا آسیب جدی دیگر را برای فردی دارد.\n• محتوایی که تهدید به افشای داده‌های شخصی یا اطلاعات شناسایی شخصی می‌کند.\n• محتوایی که خشونت، طرد، جداسازی، یا تبعیض علیه فرد یا گروه خاصی  را ترویج یا توجیه می‌کند.\n• محتوای سیاسی که باعث ایجاد تنش بین دو گروه شود.\n• استفاده از خدمات لیوم  برای اهداف غیرقانونی و یا پیشبرد اهداف غیرقانونی.\n\n\n - توجه شود که تمامی قوانین برای بخش بحث آزاد نیز صادق می باشند . \n\n\n\nدر هنگام مواجه با هر یک از موارد بالا .میتوانید با گزارش دادن محتوا یا شخص  ما را مطلع سازید تا  با آن محتوا/شخص برخورد کنیم\n\nتوهین و نظر  شخصی : \n• محتوایی که به فرد دیگری توهین می کند یا فردی را بر اساس ویژگی هایی مانند عقل، ظاهر، ویژگی های شخصیتی یا بهداشت تحقیر می کند در لیوم ممنوع است .\nتوجه شود که “نظر شخصی “ با توهین متفاوت است . اگر نظر خود را طوری بیان کنید که محوریت بحث خارج نشود .موردی ندارد. \n مثلا : \n*هر کس که کیدراما دوست نداره بی سلیقه س ( موردی ندارد و نظر شخصی فرد تلقی میشود و اگر اذیتتان میکند فرد را پنهان کنید)  \n*هر کس که کیدراما دوست نداره یک مغز زنگ زده داره و بی سلیقه اس و...  دهنش.( توهین است و تخلف صورت گرفته است)\n\n\nبرخی از پر تکرار ترین کلماتی که باعث میشوند نظر شخصی  شما با توهین اشتباه گرفته شود در زیر اورده شده است:  الفاظ رکیک،  بیشعور،  نفهم،  نادان،  مغز زنگ زده،  ارزشی،  عرزشی،  انتی عرزشی،  امل،  الفاظی که براساس دین فرد مورد نظر به اون نسبت داده میشود،  عقب مونده،  نسبت دادن صفات به قومیتی خاص و...\n\nپشتیبانی\nتیم پشتیبانی پاسخگو ابهامات و مشکلات گزارش شده  در اسرع وقت می باشند .\n\nنقض قوانین\nنقض قوانین :\nشما میتونید در صورت مشاهده نقض قوانین از طریق دکمه ریپورت که در هر بخش از اپلیکیشن برای پست ها ٬ کامنت ها٬ پروفایل کاربران طراحی شده است ما را از آن مطلع کنید تا به بصورت زیر رفتار کنیم .\n\nدر صورت نقض هر یک از قوانین ٬ محتوا شما تا ۵ بار اول حذف خواهد شد. سپس حساب شما به طور موقت مسدود می شود و در آخرین مرحله حساب شما به طور کامل مسدود میشود \n\nمحتوای تولید شده\nمسئولیت تمامی محتوای تولید شده بر عهده شخصی است که مطلب را منتشر کرده است و لیوم هیچ مسئولیتی در این خصوص ندارد";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : hasVariant($state, "loginPage", "name") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return " محدودیت سنی\nلیوم محدودیت سنی ندارد\n\n- انتشار محتوایی که به طور مستقیم یا غیرمستقیم توهین به اسلام تلقی بشود ممنوع است.\n -  انتشار پستهای فانتزی مثبت هیجده ممنوع است.\n- انتشار محتوای سیاسی که همراه با توهین و نفرت پراکنی باشد ممنوع است.\n\n - پست مثبت هیجده درصورتی مجاز به انتشار می باشد که به اموزش بپردازد و  یا نیاز ب کمک داشته باشد که در هر دو صورت باید حتما  تگ مثبت هیجده توسط صاحب پست فعال شود . ( توجه شود که در هیچ صورتی پست های مثبت هیجده به بخش داغترین ورود نخواهند پیدا کرد)\n\n-  فعال نکردن تگ مثبت هیجده تخلف است و در صورتیکه چندین بار تکرار شود و رعایت نکنید،  پست شما در ابتدا مستقیما حذف میشود و در ادامه منجر به بلاک اکانت شما خواهد شد . \n\n - اگر نمیخواهید محتواهای مثبت هیجده را مشاهده کنید از بخش تنظیمات آن را برای خود فعال کنید .\n\nانجام موارد زیر ممنوع می باشد \n• تبلیغ انواع مواد مخدر ممنوع است.\n• محتوایی که جزئیات آموزشی در مورد نحوه انجام یک فعالیت خطرناک(خودکشی،قاچاق،ترور،خودآزاری) را توضیح یا ارائه می دهد.\n• بازی‌های خطرناک که در آن از فرد کارهایی که ناهنجار است و عرف نیست طلب میشود که ممکن است منجر به آسیب بدنی یا آسیب مالی شوند.\n• ترویج خودکشی و خودآزاری در لیوم ممنوع است.\n• محتوایی که دستورالعمل‌هایی برای خودکشی یا نحوه خودآزاری ارائه می‌دهد.\n• بازی های خودکشی یا آسیب رساندن به خود،چالش ها، پیمان ها یا کلاهبرداری ها.\n• محتوایی که حاوی زبان صریح جنسی برای ارضای جنسی است.\n \n\n• محتوایی که آزار و اذیت هماهنگ را تشویق می کند.\n• محتوایی که قربانیان تراژدی های خشونت آمیز را تحقیر می کند.\n• محتوایی که آسیب یا ارعاب عمدی را به تصویر می‌کشد، مانند تعقیب سایبری.\n• محتوایی که آرزوی مرگ، بیماری جدی یا آسیب جدی دیگر را برای فردی دارد.\n• محتوایی که تهدید به افشای داده‌های شخصی یا اطلاعات شناسایی شخصی می‌کند.\n• محتوایی که خشونت، طرد، جداسازی، یا تبعیض علیه فرد یا گروه خاصی  را ترویج یا توجیه می‌کند.\n• محتوای سیاسی که باعث ایجاد تنش بین دو گروه شود.\n• استفاده از خدمات لیوم  برای اهداف غیرقانونی و یا پیشبرد اهداف غیرقانونی.\n\n\n - توجه شود که تمامی قوانین برای بخش بحث آزاد نیز صادق می باشند . \n\n\n\nدر هنگام مواجه با هر یک از موارد بالا .میتوانید با گزارش دادن محتوا یا شخص  ما را مطلع سازید تا  با آن محتوا/شخص برخورد کنیم\n\nتوهین و نظر  شخصی : \n• محتوایی که به فرد دیگری توهین می کند یا فردی را بر اساس ویژگی هایی مانند عقل، ظاهر، ویژگی های شخصیتی یا بهداشت تحقیر می کند در لیوم ممنوع است .\nتوجه شود که “نظر شخصی “ با توهین متفاوت است . اگر نظر خود را طوری بیان کنید که محوریت بحث خارج نشود .موردی ندارد. \n مثلا : \n*هر کس که کیدراما دوست نداره بی سلیقه س ( موردی ندارد و نظر شخصی فرد تلقی میشود و اگر اذیتتان میکند فرد را پنهان کنید)  \n*هر کس که کیدراما دوست نداره یک مغز زنگ زده داره و بی سلیقه اس و...  دهنش.( توهین است و تخلف صورت گرفته است)\n\n\nبرخی از پر تکرار ترین کلماتی که باعث میشوند نظر شخصی  شما با توهین اشتباه گرفته شود در زیر اورده شده است:  الفاظ رکیک،  بیشعور،  نفهم،  نادان،  مغز زنگ زده،  ارزشی،  عرزشی،  انتی عرزشی،  امل،  الفاظی که براساس دین فرد مورد نظر به اون نسبت داده میشود،  عقب مونده،  نسبت دادن صفات به قومیتی خاص و...\n\nپشتیبانی\nتیم پشتیبانی پاسخگو ابهامات و مشکلات گزارش شده  در اسرع وقت می باشند .\n\nنقض قوانین\nنقض قوانین :\nشما میتونید در صورت مشاهده نقض قوانین از طریق دکمه ریپورت که در هر بخش از اپلیکیشن برای پست ها ٬ کامنت ها٬ پروفایل کاربران طراحی شده است ما را از آن مطلع کنید تا به بصورت زیر رفتار کنیم .\n\nدر صورت نقض هر یک از قوانین ٬ محتوا شما تا ۵ بار اول حذف خواهد شد. سپس حساب شما به طور موقت مسدود می شود و در آخرین مرحله حساب شما به طور کامل مسدود میشود \n\nمحتوای تولید شده\nمسئولیت تمامی محتوای تولید شده بر عهده شخصی است که مطلب را منتشر کرده است و لیوم هیچ مسئولیتی در این خصوص ندارد";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : (
                  "Modal content"
                )}
              </div>
            </div>
            {(
              hasVariant($state, "loginPage", "selectstatus")
                ? true
                : hasVariant($state, "loginPage", "name")
                ? true
                : false
            ) ? (
              <div
                data-plasmic-name={"top"}
                data-plasmic-override={overrides.top}
                className={classNames(projectcss.all, sty.top, {
                  [sty.toploginPage_name]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.toploginPage_selectstatus]: hasVariant(
                    $state,
                    "loginPage",
                    "selectstatus"
                  )
                })}
              >
                <Icon22Icon
                  className={classNames(projectcss.all, sty.svg__chQPf, {
                    [sty.svgloginPage_name__chQPf7Yteu]: hasVariant(
                      $state,
                      "loginPage",
                      "name"
                    ),
                    [sty.svgloginPage_selectstatus__chQPfzJyl9]: hasVariant(
                      $state,
                      "loginPage",
                      "selectstatus"
                    )
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateRulesOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["rules", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateRulesOpen"] != null &&
                      typeof $steps["updateRulesOpen"] === "object" &&
                      typeof $steps["updateRulesOpen"].then === "function"
                    ) {
                      $steps["updateRulesOpen"] = await $steps[
                        "updateRulesOpen"
                      ];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jkeKg,
                    {
                      [sty.textloginPage_name__jkeKg7Yteu]: hasVariant(
                        $state,
                        "loginPage",
                        "name"
                      ),
                      [sty.textloginPage_selectstatus__jkeKgzJyl9]: hasVariant(
                        $state,
                        "loginPage",
                        "selectstatus"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "loginPage", "selectstatus")
                    ? "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a"
                    : hasVariant($state, "loginPage", "name")
                    ? "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a"
                    : "Dr. Bellamy Nich\u2026"}
                </div>
              </div>
            ) : null}
          </AntdModal>
          {(
            hasVariant($state, "loginPage", "mobile")
              ? (() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__ckB79, {
                [sty.freeBoxglobal_newView_newView__ckB790DHva]: hasVariant(
                  globalVariants,
                  "newView",
                  "newView"
                ),
                [sty.freeBoxloginPage_mobile__ckB79N9Ake]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.freeBoxloginPage_name__ckB797Yteu]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.freeBoxloginPage_selectstatus__ckB79ZJyl9]: hasVariant(
                  $state,
                  "loginPage",
                  "selectstatus"
                )
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___9Yef, {
                  [sty.imgloginPage_selectstatus___9YefZJyl9]: hasVariant(
                    $state,
                    "loginPage",
                    "selectstatus"
                  )
                })}
                displayHeight={"150px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"150px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/liom_hamyar/images/image94.webp",
                  fullWidth: 1280,
                  fullHeight: 1280,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(projectcss.all, sty.freeBox__dbuCv, {
                  [sty.freeBoxloginPage_mobile__dbuCvn9Ake]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.freeBoxloginPage_name__dbuCv7Yteu]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  )
                })}
              >
                <Icon11Icon
                  className={classNames(projectcss.all, sty.svg__dgGr)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0QTq,
                    {
                      [sty.textglobal_newView_newView___0QTq0DHva]: hasVariant(
                        globalVariants,
                        "newView",
                        "newView"
                      )
                    }
                  )}
                >
                  {
                    "\u0644\u0637\u0641\u0627 \u0635\u0628\u0631 \u06a9\u0646\u06cc\u062f..."
                  }
                </div>
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return (
                !$state.addHome &&
                /iPhone|iPod/.test(window.navigator.userAgent) &&
                !(
                  window.navigator.standalone === true ||
                  window.matchMedia("(display-mode: standalone)").matches
                )
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__cnjzX, {
                [sty.revealloginPage_mobile__cnjzXn9Ake]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                )
              })}
              effect={"fade"}
              reverse={false}
              triggerOnce={true}
            >
              <AddToHome
                data-plasmic-name={"addToHome"}
                data-plasmic-override={overrides.addToHome}
                addToHome={async () => {
                  const $steps = {};

                  $steps["updateAddHome"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["addHome"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAddHome"] != null &&
                    typeof $steps["updateAddHome"] === "object" &&
                    typeof $steps["updateAddHome"].then === "function"
                  ) {
                    $steps["updateAddHome"] = await $steps["updateAddHome"];
                  }
                }}
                className={classNames("__wab_instance", sty.addToHome, {
                  [sty.addToHomeloginPage_mobile]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  )
                })}
              />
            </Reveal>
          ) : null}
          {(hasVariant($state, "loginPage", "name") ? true : false) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__dQf4A, {
                [sty.freeBoxloginPage_emailCode__dQf4AhTfDf]: hasVariant(
                  $state,
                  "loginPage",
                  "emailCode"
                ),
                [sty.freeBoxloginPage_email__dQf4AKkEIz]: hasVariant(
                  $state,
                  "loginPage",
                  "email"
                ),
                [sty.freeBoxloginPage_mobileCode__dQf4AHp6Ne]: hasVariant(
                  $state,
                  "loginPage",
                  "mobileCode"
                ),
                [sty.freeBoxloginPage_mobile__dQf4An9Ake]: hasVariant(
                  $state,
                  "loginPage",
                  "mobile"
                ),
                [sty.freeBoxloginPage_name__dQf4A7Yteu]: hasVariant(
                  $state,
                  "loginPage",
                  "name"
                ),
                [sty.freeBoxloginPage_selectstatus__dQf4AzJyl9]: hasVariant(
                  $state,
                  "loginPage",
                  "selectstatus"
                ),
                [sty.freeBoxloginPage_userNameLogin__dQf4AgVbwZ]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameLogin"
                ),
                [sty.freeBoxloginPage_userNameSingup__dQf4AiiJc3]: hasVariant(
                  $state,
                  "loginPage",
                  "userNameSingup"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateLoginPage"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "loginPage",
                        operation: 1,
                        value: "mobile"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, undefined);
                        return undefined;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoginPage"] != null &&
                  typeof $steps["updateLoginPage"] === "object" &&
                  typeof $steps["updateLoginPage"].then === "function"
                ) {
                  $steps["updateLoginPage"] = await $steps["updateLoginPage"];
                }
              }}
            >
              <IconIcon
                className={classNames(projectcss.all, sty.svg__hS6Ef, {
                  [sty.svgloginPage_emailCode__hS6EfhTfDf]: hasVariant(
                    $state,
                    "loginPage",
                    "emailCode"
                  ),
                  [sty.svgloginPage_email__hS6EfKkEIz]: hasVariant(
                    $state,
                    "loginPage",
                    "email"
                  ),
                  [sty.svgloginPage_mobileCode__hS6EfHp6Ne]: hasVariant(
                    $state,
                    "loginPage",
                    "mobileCode"
                  ),
                  [sty.svgloginPage_mobile__hS6Efn9Ake]: hasVariant(
                    $state,
                    "loginPage",
                    "mobile"
                  ),
                  [sty.svgloginPage_name__hS6Ef7Yteu]: hasVariant(
                    $state,
                    "loginPage",
                    "name"
                  ),
                  [sty.svgloginPage_selectstatus__hS6EfzJyl9]: hasVariant(
                    $state,
                    "loginPage",
                    "selectstatus"
                  ),
                  [sty.svgloginPage_userNameLogin__hS6EfGVbwZ]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameLogin"
                  ),
                  [sty.svgloginPage_userNameSingup__hS6EfIiJc3]: hasVariant(
                    $state,
                    "loginPage",
                    "userNameSingup"
                  )
                })}
                role={"img"}
              />
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "favicon",
    "sideEffect",
    "textInput",
    "antdInput",
    "button",
    "textInput7",
    "antdInput7",
    "textInput8",
    "antdInput8",
    "button2",
    "textInput9",
    "antdInput9",
    "textInput10",
    "antdInput10",
    "textInput11",
    "antdInput11",
    "button6",
    "textInput4",
    "antdInput2",
    "textInput6",
    "antdInput3",
    "checkbox",
    "button4",
    "textInput12",
    "antdInput12",
    "checkbox2",
    "button8",
    "button9",
    "mobileCode",
    "textInput3",
    "antdInput4",
    "button3",
    "emailCode",
    "textInput5",
    "antdInput6",
    "button7",
    "textInput2",
    "antdInput5",
    "button5",
    "rules",
    "top",
    "addToHome"
  ],
  favicon: ["favicon"],
  sideEffect: ["sideEffect"],
  textInput: ["textInput", "antdInput"],
  antdInput: ["antdInput"],
  button: ["button"],
  textInput7: ["textInput7", "antdInput7"],
  antdInput7: ["antdInput7"],
  textInput8: ["textInput8", "antdInput8"],
  antdInput8: ["antdInput8"],
  button2: ["button2"],
  textInput9: ["textInput9", "antdInput9"],
  antdInput9: ["antdInput9"],
  textInput10: ["textInput10", "antdInput10"],
  antdInput10: ["antdInput10"],
  textInput11: ["textInput11", "antdInput11"],
  antdInput11: ["antdInput11"],
  button6: ["button6"],
  textInput4: ["textInput4", "antdInput2"],
  antdInput2: ["antdInput2"],
  textInput6: ["textInput6", "antdInput3"],
  antdInput3: ["antdInput3"],
  checkbox: ["checkbox"],
  button4: ["button4"],
  textInput12: ["textInput12", "antdInput12"],
  antdInput12: ["antdInput12"],
  checkbox2: ["checkbox2"],
  button8: ["button8"],
  button9: ["button9"],
  mobileCode: ["mobileCode", "textInput3", "antdInput4", "button3"],
  textInput3: ["textInput3", "antdInput4"],
  antdInput4: ["antdInput4"],
  button3: ["button3"],
  emailCode: ["emailCode", "textInput5", "antdInput6", "button7"],
  textInput5: ["textInput5", "antdInput6"],
  antdInput6: ["antdInput6"],
  button7: ["button7"],
  textInput2: ["textInput2", "antdInput5"],
  antdInput5: ["antdInput5"],
  button5: ["button5"],
  rules: ["rules", "top"],
  top: ["top"],
  addToHome: ["addToHome"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  favicon: typeof Embed;
  sideEffect: typeof SideEffect;
  textInput: typeof TextInput;
  antdInput: typeof Input;
  button: typeof Button;
  textInput7: typeof TextInput;
  antdInput7: typeof Input;
  textInput8: typeof TextInput;
  antdInput8: typeof Input;
  button2: typeof Button;
  textInput9: typeof TextInput;
  antdInput9: typeof Input;
  textInput10: typeof TextInput;
  antdInput10: typeof Input;
  textInput11: typeof TextInput;
  antdInput11: typeof Input;
  button6: typeof Button;
  textInput4: typeof TextInput;
  antdInput2: typeof Input;
  textInput6: typeof TextInput;
  antdInput3: typeof Input;
  checkbox: typeof Checkbox;
  button4: typeof Button;
  textInput12: typeof TextInput;
  antdInput12: typeof Input;
  checkbox2: typeof Checkbox;
  button8: typeof Button;
  button9: typeof Button;
  mobileCode: typeof Reveal;
  textInput3: typeof TextInput;
  antdInput4: typeof Input;
  button3: typeof Button;
  emailCode: typeof Reveal;
  textInput5: typeof TextInput;
  antdInput6: typeof Input;
  button7: typeof Button;
  textInput2: typeof TextInput;
  antdInput5: typeof Input;
  button5: typeof Button;
  rules: typeof AntdModal;
  top: "div";
  addToHome: typeof AddToHome;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginMan__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginMan__VariantsArgs;
    args?: PlasmicLoginMan__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginMan__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLoginMan__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLoginMan__ArgProps,
          internalVariantPropNames: PlasmicLoginMan__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLoginMan__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginMan";
  } else {
    func.displayName = `PlasmicLoginMan.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicLoginMan = Object.assign(
  // Top-level PlasmicLoginMan renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    favicon: makeNodeComponent("favicon"),
    sideEffect: makeNodeComponent("sideEffect"),
    textInput: makeNodeComponent("textInput"),
    antdInput: makeNodeComponent("antdInput"),
    button: makeNodeComponent("button"),
    textInput7: makeNodeComponent("textInput7"),
    antdInput7: makeNodeComponent("antdInput7"),
    textInput8: makeNodeComponent("textInput8"),
    antdInput8: makeNodeComponent("antdInput8"),
    button2: makeNodeComponent("button2"),
    textInput9: makeNodeComponent("textInput9"),
    antdInput9: makeNodeComponent("antdInput9"),
    textInput10: makeNodeComponent("textInput10"),
    antdInput10: makeNodeComponent("antdInput10"),
    textInput11: makeNodeComponent("textInput11"),
    antdInput11: makeNodeComponent("antdInput11"),
    button6: makeNodeComponent("button6"),
    textInput4: makeNodeComponent("textInput4"),
    antdInput2: makeNodeComponent("antdInput2"),
    textInput6: makeNodeComponent("textInput6"),
    antdInput3: makeNodeComponent("antdInput3"),
    checkbox: makeNodeComponent("checkbox"),
    button4: makeNodeComponent("button4"),
    textInput12: makeNodeComponent("textInput12"),
    antdInput12: makeNodeComponent("antdInput12"),
    checkbox2: makeNodeComponent("checkbox2"),
    button8: makeNodeComponent("button8"),
    button9: makeNodeComponent("button9"),
    mobileCode: makeNodeComponent("mobileCode"),
    textInput3: makeNodeComponent("textInput3"),
    antdInput4: makeNodeComponent("antdInput4"),
    button3: makeNodeComponent("button3"),
    emailCode: makeNodeComponent("emailCode"),
    textInput5: makeNodeComponent("textInput5"),
    antdInput6: makeNodeComponent("antdInput6"),
    button7: makeNodeComponent("button7"),
    textInput2: makeNodeComponent("textInput2"),
    antdInput5: makeNodeComponent("antdInput5"),
    button5: makeNodeComponent("button5"),
    rules: makeNodeComponent("rules"),
    top: makeNodeComponent("top"),
    addToHome: makeNodeComponent("addToHome"),

    // Metadata about props expected for PlasmicLoginMan
    internalVariantProps: PlasmicLoginMan__VariantProps,
    internalArgProps: PlasmicLoginMan__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "لیوم | Liom",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLoginMan;
/* prettier-ignore-end */
