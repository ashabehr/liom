/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 9y_uQdLH_4vd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import Dialog3 from "../../Dialog3"; // plasmic-import: j5op3vcM_4hJ/component
import Subscription3 from "../../Subscription3"; // plasmic-import: vcwQDI5OpjvX/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicShopBoxRef.module.css"; // plasmic-import: 9y_uQdLH_4vd/css

import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: V1QgQzmgWP2T/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: H9d2pdUvXD_1/icon

createPlasmicElementProxy;

export type PlasmicShopBoxRef__VariantMembers = {};
export type PlasmicShopBoxRef__VariantsArgs = {};
type VariantPropType = keyof PlasmicShopBoxRef__VariantsArgs;
export const PlasmicShopBoxRef__VariantProps = new Array<VariantPropType>();

export type PlasmicShopBoxRef__ArgsType = {
  type?: string;
  token?: string;
  desc?: string;
  redirectUrl?: string;
  onSelectShopChange?: (val: string) => void;
  open?: boolean;
  onOpenChange?: (val: string) => void;
  userId?: string;
  refcode?: string;
};
type ArgPropType = keyof PlasmicShopBoxRef__ArgsType;
export const PlasmicShopBoxRef__ArgProps = new Array<ArgPropType>(
  "type",
  "token",
  "desc",
  "redirectUrl",
  "onSelectShopChange",
  "open",
  "onOpenChange",
  "userId",
  "refcode"
);

export type PlasmicShopBoxRef__OverridesType = {
  root?: Flex__<"div">;
  shopDialog?: Flex__<typeof ApiRequest>;
  img?: Flex__<typeof PlasmicImg__>;
  input4?: Flex__<typeof AntdInput>;
  button12?: Flex__<typeof Button>;
  button8?: Flex__<typeof Button>;
  button10?: Flex__<typeof Button>;
  p?: Flex__<"p">;
  dialog2?: Flex__<typeof Dialog3>;
  subscription3?: Flex__<typeof Subscription3>;
  button9?: Flex__<typeof Button>;
};

export interface DefaultShopBoxRefProps {
  type?: string;
  token?: string;
  desc?: string;
  redirectUrl?: string;
  onSelectShopChange?: (val: string) => void;
  open?: boolean;
  onOpenChange?: (val: string) => void;
  userId?: string;
  refcode?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShopBoxRef__RenderFunc(props: {
  variants: PlasmicShopBoxRef__VariantsArgs;
  args: PlasmicShopBoxRef__ArgsType;
  overrides: PlasmicShopBoxRef__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          type: "special_advice",
          desc: "\u0628\u0631\u0627\u06cc \u062f\u0633\u062a\u0631\u0633\u06cc \u0648 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0627\u06cc\u0646 \u0627\u0628\u0632\u0627\u0631\u060c \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647 \u062a\u0647\u06cc\u0647 \u0646\u0645\u0627\u06cc\u06cc\u062f."
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectShop",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.shopDialog.data.result.shopList.length == 1
                ? $state.shopDialog.data.result.shopList[0]
                : $state.shopDialog.data.result.shopList.find(
                    item => item.selected == 1
                  );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })(),

        onChangeProp: "onSelectShopChange"
      },
      {
        path: "shopDialog.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shopDialog.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shopDialog.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button8.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "subscription3[].clickitem",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "subscription3[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription3[].price",
        type: "private",
        variableType: "number"
      },
      {
        path: "subscription3[].discount",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription3[].fullprice",
        type: "private",
        variableType: "number"
      },
      {
        path: "button9.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange"
      },
      {
        path: "topShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.shopDialog.data.result.shopList.length == 1
                ? $state.shopDialog.data.result.shopList[0]
                : $state.shopDialog.data.result.shopList.find(
                    item => item.selected == 1
                  );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "button10.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button12.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button8.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button10.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button9.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button12.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button8.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button10.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button9.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"shopDialog"}
        data-plasmic-override={overrides.shopDialog}
        body={(() => {
          try {
            return {
              type: $props.type,
              authorization: $props.token
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.shopDialog)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wrdsv
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div className={classNames(projectcss.all, sty.freeBox__oXei0)}>
            <Icon115Icon
              className={classNames(projectcss.all, sty.svg___0W4YQ)}
              role={"img"}
            />
          </div>
        }
        method={"PUT"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["shopDialog", "error"]).apply(
            null,
            eventArgs
          );

          (async error => {
            const $steps = {};

            $steps["invokeGlobalAction"] =
              $props.token == "" || $props.token == null
                ? (() => {
                    const actionArgs = {
                      args: [
                        "error",
                        "\u0645\u062a\u0627\u0633\u0641\u0627\u0646\u0647 \u0645\u0634\u06a9\u0644\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627 \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f",
                        "bottom-center"
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          }).apply(null, eventArgs);
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["shopDialog", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["shopDialog", "data"]).apply(
            null,
            eventArgs
          );
        }}
        shouldFetch={(() => {
          try {
            return $props.token != "" && $props.token != null;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
        url={"https://n8n.staas.ir/webhook/rest/shop/list"}
      >
        <div className={classNames(projectcss.all, sty.freeBox__kl6Jc)}>
          <div
            className={classNames(projectcss.all, sty.freeBox__htTiq)}
            dir={"rtl"}
          >
            <div className={classNames(projectcss.all, sty.freeBox___3Ihv9)}>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"15px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/liom_hamyar/images/image89.svg",
                  fullWidth: 22,
                  fullHeight: 20,
                  aspectRatio: 1.1
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nKk0E
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.desc;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pb6T
              )}
            >
              <div
                className={projectcss.__wab_expr_html_text}
                dangerouslySetInnerHTML={{
                  __html: (() => {
                    try {
                      return " اشتراک " + $state.selectShop.title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()
                }}
              />
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8OsbO
              )}
            >
              <div
                className={projectcss.__wab_expr_html_text}
                dangerouslySetInnerHTML={{
                  __html: (() => {
                    try {
                      return $state.topShop.hint.replaceAll("\n", "<br>");
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()
                }}
              />
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__uAmDl)}
            dir={"rtl"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__xMo5M)}>
              <div className={classNames(projectcss.all, sty.freeBox__af9KL)}>
                {(() => {
                  try {
                    return $state.topShop.topBadge;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__edDuU)}
                  >
                    {(() => {
                      try {
                        return $state.topShop.topBadge;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sGd6X
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.topShop.topBadge;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    ) : null}
                  </div>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__xhMFf)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fF8S1
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return $state.shopDialog.data.result.shopList
                              .length == 1
                              ? $state.topShop.name
                              : $state.topShop.text;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cRe3F)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__deqE6
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.topShop.fullPrice.toLocaleString();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zbZiR
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              $state.topShop.price.toLocaleString() + "  تومان "
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  {(() => {
                    try {
                      return $state.topShop.badge;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___88UK3
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__l5Hgo
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.topShop.badge;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  ) : null}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kFVeB
                  )}
                >
                  {
                    "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                  }
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___7Cg6Y)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kgZuI)}
                  >
                    {(() => {
                      const child$Props = {
                        allowClear: false,
                        autoFocus: false,
                        bordered: false,
                        className: classNames("__wab_instance", sty.input4),
                        disabled: false,
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input4", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder:
                          "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                        prefix: (
                          <Icon10Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sNobT
                            )}
                            role={"img"}
                          />
                        ),

                        readOnly: false,
                        size: "small",
                        suffix: null,
                        value: generateStateValueProp($state, [
                          "input4",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input4.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input4"}
                          data-plasmic-override={overrides.input4}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tt2CT)}
                    />
                  </div>
                  <Button
                    data-plasmic-name={"button12"}
                    data-plasmic-override={overrides.button12}
                    className={classNames("__wab_instance", sty.button12)}
                    color={generateStateValueProp($state, [
                      "button12",
                      "color"
                    ])}
                    load={generateStateValueProp($state, ["button12", "load"])}
                    loading={generateStateValueProp($state, [
                      "button12",
                      "loading"
                    ])}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button12",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button12", "load"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button12",
                          "loading"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0T47
                      )}
                    >
                      {"\u062a\u0627\u06cc\u06cc\u062f"}
                    </div>
                  </Button>
                </div>
                <Button
                  data-plasmic-name={"button8"}
                  data-plasmic-override={overrides.button8}
                  className={classNames("__wab_instance", sty.button8)}
                  color={generateStateValueProp($state, ["button8", "color"])}
                  endIcon={
                    <Icon12Icon
                      className={classNames(projectcss.all, sty.svg__lUqKg)}
                      role={"img"}
                    />
                  }
                  isDisabled={(() => {
                    try {
                      return $state.loading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  load={generateStateValueProp($state, ["button8", "load"])}
                  loading={generateStateValueProp($state, [
                    "button8",
                    "loading"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                if (
                                  typeof window !== "undefined" &&
                                  window.FlutterChannel &&
                                  typeof window.FlutterChannel.postMessage ===
                                    "function"
                                )
                                  return window.FlutterChannel.postMessage(
                                    `#customSubscription-${$props.type}`
                                  );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button8", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button8", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button8", "loading"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ferBh
                    )}
                  >
                    {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button10"}
                  data-plasmic-override={overrides.button10}
                  className={classNames("__wab_instance", sty.button10)}
                  color={generateStateValueProp($state, ["button10", "color"])}
                  endIcon={
                    <Icon12Icon
                      className={classNames(projectcss.all, sty.svg__cocnU)}
                      role={"img"}
                    />
                  }
                  isDisabled={(() => {
                    try {
                      return $state.loading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  load={generateStateValueProp($state, ["button10", "load"])}
                  loading={generateStateValueProp($state, [
                    "button10",
                    "loading"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoading3"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                const url = new URL($props.redirectUrl);
                                url.searchParams.set(
                                  "buyId",
                                  $state.topShop.id
                                );
                                return ($props.redirectUrl = url.toString());
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading3"] != null &&
                      typeof $steps["updateLoading3"] === "object" &&
                      typeof $steps["updateLoading3"].then === "function"
                    ) {
                      $steps["updateLoading3"] = await $steps["updateLoading3"];
                    }

                    $steps["updateLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading"] != null &&
                      typeof $steps["updateLoading"] === "object" &&
                      typeof $steps["updateLoading"].then === "function"
                    ) {
                      $steps["updateLoading"] = await $steps["updateLoading"];
                    }

                    $steps["invokeGlobalAction"] = false
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.staas.ir/webhook/rest/shop/list",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    id: $state.topShop.id,
                                    offCode: "",
                                    redirectUrl: $props.redirectUrl,
                                    authorization: $props.token
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] =
                        await $steps["invokeGlobalAction"];
                    }

                    $steps["updateDialogOpendialog2"] = false
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return $steps.invokeGlobalAction.data.result;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogOpendialog2"] != null &&
                      typeof $steps["updateDialogOpendialog2"] === "object" &&
                      typeof $steps["updateDialogOpendialog2"].then ===
                        "function"
                    ) {
                      $steps["updateDialogOpendialog2"] =
                        await $steps["updateDialogOpendialog2"];
                    }

                    $steps["invokeGlobalAction2"] = false
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                              "bottom-center"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] =
                        await $steps["invokeGlobalAction2"];
                    }

                    $steps["updateLoading2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading2"] != null &&
                      typeof $steps["updateLoading2"] === "object" &&
                      typeof $steps["updateLoading2"].then === "function"
                    ) {
                      $steps["updateLoading2"] = await $steps["updateLoading2"];
                    }

                    $steps["updateLoading5"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return `https://pay.liom.app/p/${$props.refcode}_${$state.topShop.int_id}?redirectUrl=${window.encodeURIComponent($props.redirectUrl)}`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading5"] != null &&
                      typeof $steps["updateLoading5"] === "object" &&
                      typeof $steps["updateLoading5"].then === "function"
                    ) {
                      $steps["updateLoading5"] = await $steps["updateLoading5"];
                    }

                    $steps["updateLoading4"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://api.liom.app/service/log",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    userId: $props.userId,
                                    pageName: "shop-item",
                                    action: "shop",
                                    extraData: {}
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              {
                                headers: {
                                  "Content-Type": "application/json",
                                  Authorization:
                                    "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                }
                              }
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading4"] != null &&
                      typeof $steps["updateLoading4"] === "object" &&
                      typeof $steps["updateLoading4"].then === "function"
                    ) {
                      $steps["updateLoading4"] = await $steps["updateLoading4"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button10", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button10", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "button10",
                        "loading"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0DkFc
                    )}
                  >
                    {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                  </div>
                </Button>
                {(() => {
                  try {
                    return $state.shopDialog?.data?.result?.shopList.length > 1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <p
                    data-plasmic-name={"p"}
                    data-plasmic-override={overrides.p}
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDialog2Opendialog"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dialog2", "opendialog"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDialog2Opendialog"] != null &&
                        typeof $steps["updateDialog2Opendialog"] === "object" &&
                        typeof $steps["updateDialog2Opendialog"].then ===
                          "function"
                      ) {
                        $steps["updateDialog2Opendialog"] =
                          await $steps["updateDialog2Opendialog"];
                      }
                    }}
                  >
                    {
                      "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                    }
                  </p>
                ) : null}
              </div>
            </div>
          </div>
        </div>
        <Dialog3
          data-plasmic-name={"dialog2"}
          data-plasmic-override={overrides.dialog2}
          className={classNames("__wab_instance", sty.dialog2)}
          onOpendialogChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog2", "opendialog"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          opendialog={generateStateValueProp($state, ["dialog2", "opendialog"])}
        >
          <div className={classNames(projectcss.all, sty.freeBox__aVY8)}>
            <div className={classNames(projectcss.all, sty.freeBox__fZimq)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.shopDialog.data.result.shopList;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.subscription3),
                    clickitem: generateStateValueProp($state, [
                      "subscription3",
                      __plasmic_idx_0,
                      "clickitem"
                    ]),
                    discount: generateStateValueProp($state, [
                      "subscription3",
                      __plasmic_idx_0,
                      "discount"
                    ]),
                    fullprice: generateStateValueProp($state, [
                      "subscription3",
                      __plasmic_idx_0,
                      "fullprice"
                    ]),
                    key: currentIndex,
                    onClick: async event => {
                      const $steps = {};

                      $steps["updateSelectShop"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectShop"]
                              },
                              operation: 0,
                              value: currentItem
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectShop"] != null &&
                        typeof $steps["updateSelectShop"] === "object" &&
                        typeof $steps["updateSelectShop"].then === "function"
                      ) {
                        $steps["updateSelectShop"] =
                          await $steps["updateSelectShop"];
                      }
                    },
                    onClickitemChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "subscription3",
                        __plasmic_idx_0,
                        "clickitem"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    onDiscountChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "subscription3",
                        __plasmic_idx_0,
                        "discount"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    onFullpriceChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "subscription3",
                        __plasmic_idx_0,
                        "fullprice"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    onPriceChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "subscription3",
                        __plasmic_idx_0,
                        "price"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    onTitleChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "subscription3",
                        __plasmic_idx_0,
                        "title"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    price: generateStateValueProp($state, [
                      "subscription3",
                      __plasmic_idx_0,
                      "price"
                    ]),
                    title: generateStateValueProp($state, [
                      "subscription3",
                      __plasmic_idx_0,
                      "title"
                    ])
                  };

                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "subscription3[].clickitem",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem.id == $state.selectShop.id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "subscription3[].title",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "subscription3[].price",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem.price.toLocaleString();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return 120000;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "subscription3[].discount",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem.badge;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "subscription3[].fullprice",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem.fullPrice.toLocaleString();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return 0;
                              }
                              throw e;
                            }
                          })()
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <Subscription3
                      data-plasmic-name={"subscription3"}
                      data-plasmic-override={overrides.subscription3}
                      {...child$Props}
                    >
                      {(() => {
                        try {
                          return currentItem.topBadge ? true : false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__o8Hlq
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0S5Uy
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.topBadge;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      ) : null}
                    </Subscription3>
                  );
                })();
              })}
            </div>
            <Button
              data-plasmic-name={"button9"}
              data-plasmic-override={overrides.button9}
              className={classNames("__wab_instance", sty.button9)}
              color={generateStateValueProp($state, ["button9", "color"])}
              endIcon={
                <Icon12Icon
                  className={classNames(projectcss.all, sty.svg__fZl70)}
                  role={"img"}
                />
              }
              isDisabled={(() => {
                try {
                  return $state.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              load={generateStateValueProp($state, ["button9", "load"])}
              loading={generateStateValueProp($state, ["button9", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateLoading3"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const url = new URL($props.redirectUrl);
                            url.searchParams.set("buyId", $state.selectShop.id);
                            return ($props.redirectUrl = url.toString());
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading3"] != null &&
                  typeof $steps["updateLoading3"] === "object" &&
                  typeof $steps["updateLoading3"].then === "function"
                ) {
                  $steps["updateLoading3"] = await $steps["updateLoading3"];
                }

                $steps["updateLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading"] != null &&
                  typeof $steps["updateLoading"] === "object" &&
                  typeof $steps["updateLoading"].then === "function"
                ) {
                  $steps["updateLoading"] = await $steps["updateLoading"];
                }

                $steps["invokeGlobalAction"] = false
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://n8n.staas.ir/webhook/rest/shop/list",
                          undefined,
                          (() => {
                            try {
                              return {
                                id: $state.selectShop.id,
                                offCode: "",
                                redirectUrl: $props.redirectUrl,
                                authorization: $props.token
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] =
                    await $steps["invokeGlobalAction"];
                }

                $steps["updateDialogOpendialog2"] = false
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return $steps.invokeGlobalAction.data.result;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialogOpendialog2"] != null &&
                  typeof $steps["updateDialogOpendialog2"] === "object" &&
                  typeof $steps["updateDialogOpendialog2"].then === "function"
                ) {
                  $steps["updateDialogOpendialog2"] =
                    await $steps["updateDialogOpendialog2"];
                }

                $steps["invokeGlobalAction2"] = false
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                          "bottom-center"
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction2"] != null &&
                  typeof $steps["invokeGlobalAction2"] === "object" &&
                  typeof $steps["invokeGlobalAction2"].then === "function"
                ) {
                  $steps["invokeGlobalAction2"] =
                    await $steps["invokeGlobalAction2"];
                }

                $steps["updateLoading5"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return `https://pay.liom.app/p/${$props.refcode}_${$state.selectShop.int_id}?redirectUrl=${window.encodeURIComponent($props.redirectUrl)}`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading5"] != null &&
                  typeof $steps["updateLoading5"] === "object" &&
                  typeof $steps["updateLoading5"].then === "function"
                ) {
                  $steps["updateLoading5"] = await $steps["updateLoading5"];
                }

                $steps["updateLoading2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading2"] != null &&
                  typeof $steps["updateLoading2"] === "object" &&
                  typeof $steps["updateLoading2"].then === "function"
                ) {
                  $steps["updateLoading2"] = await $steps["updateLoading2"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button9", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button9", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button9", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eubKf
                )}
              >
                {"\u067e\u0631\u062f\u0627\u062e\u062a"}
              </div>
            </Button>
          </div>
        </Dialog3>
      </ApiRequest>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "shopDialog",
    "img",
    "input4",
    "button12",
    "button8",
    "button10",
    "p",
    "dialog2",
    "subscription3",
    "button9"
  ],
  shopDialog: [
    "shopDialog",
    "img",
    "input4",
    "button12",
    "button8",
    "button10",
    "p",
    "dialog2",
    "subscription3",
    "button9"
  ],
  img: ["img"],
  input4: ["input4"],
  button12: ["button12"],
  button8: ["button8"],
  button10: ["button10"],
  p: ["p"],
  dialog2: ["dialog2", "subscription3", "button9"],
  subscription3: ["subscription3"],
  button9: ["button9"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  shopDialog: typeof ApiRequest;
  img: typeof PlasmicImg__;
  input4: typeof AntdInput;
  button12: typeof Button;
  button8: typeof Button;
  button10: typeof Button;
  p: "p";
  dialog2: typeof Dialog3;
  subscription3: typeof Subscription3;
  button9: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShopBoxRef__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShopBoxRef__VariantsArgs;
    args?: PlasmicShopBoxRef__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicShopBoxRef__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicShopBoxRef__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShopBoxRef__ArgProps,
          internalVariantPropNames: PlasmicShopBoxRef__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShopBoxRef__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShopBoxRef";
  } else {
    func.displayName = `PlasmicShopBoxRef.${nodeName}`;
  }
  return func;
}

export const PlasmicShopBoxRef = Object.assign(
  // Top-level PlasmicShopBoxRef renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    shopDialog: makeNodeComponent("shopDialog"),
    img: makeNodeComponent("img"),
    input4: makeNodeComponent("input4"),
    button12: makeNodeComponent("button12"),
    button8: makeNodeComponent("button8"),
    button10: makeNodeComponent("button10"),
    p: makeNodeComponent("p"),
    dialog2: makeNodeComponent("dialog2"),
    subscription3: makeNodeComponent("subscription3"),
    button9: makeNodeComponent("button9"),

    // Metadata about props expected for PlasmicShopBoxRef
    internalVariantProps: PlasmicShopBoxRef__VariantProps,
    internalArgProps: PlasmicShopBoxRef__ArgProps
  }
);

export default PlasmicShopBoxRef;
/* prettier-ignore-end */
