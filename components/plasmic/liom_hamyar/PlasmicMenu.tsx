/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: YitzRDB2rU0M

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MenuItem2 from "../../MenuItem2"; // plasmic-import: u434J7t_Xxcu/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMenu.module.css"; // plasmic-import: YitzRDB2rU0M/css

import Line2Icon from "./icons/PlasmicIcon__Line2"; // plasmic-import: Ok70MuCDmjob/icon
import LogoutIcon from "./icons/PlasmicIcon__Logout"; // plasmic-import: AMOmAaxyTQMU/icon

createPlasmicElementProxy;

export type PlasmicMenu__VariantMembers = {};
export type PlasmicMenu__VariantsArgs = {};
type VariantPropType = keyof PlasmicMenu__VariantsArgs;
export const PlasmicMenu__VariantProps = new Array<VariantPropType>();

export type PlasmicMenu__ArgsType = {
  menu?: any;
  select?: string;
  onSelectChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicMenu__ArgsType;
export const PlasmicMenu__ArgProps = new Array<ArgPropType>(
  "menu",
  "select",
  "onSelectChange"
);

export type PlasmicMenu__OverridesType = {
  frame11?: Flex__<"div">;
  frame14?: Flex__<"div">;
  logo?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  freeBox?: Flex__<"div">;
  frame12?: Flex__<"div">;
  menuItem2?: Flex__<typeof MenuItem2>;
  frame7?: Flex__<"div">;
  vuesaxLinearLogout?: Flex__<"div">;
  vuesaxLinearLogout2?: Flex__<"div">;
};

export interface DefaultMenuProps {
  menu?: any;
  select?: string;
  onSelectChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenu__RenderFunc(props: {
  variants: PlasmicMenu__VariantsArgs;
  args: PlasmicMenu__ArgsType;
  overrides: PlasmicMenu__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          menu: [
            {
              id: "dashboard",
              label_fa: "\u062f\u0627\u0634\u0628\u0648\u0631\u062f",
              label_en: "Dashboard",
              icon: "speedometer",
              route: "/dashboard"
            },
            {
              id: "tests",
              label_fa:
                "\u0645\u062f\u06cc\u0631\u06cc\u062a \u062a\u0633\u062a\u200c\u0647\u0627",
              label_en: "Health Tests",
              icon: "clipboardlist",
              route: "/tests"
            },
            {
              id: "questions",
              label_fa:
                "\u0645\u062f\u06cc\u0631\u06cc\u062a \u0633\u0648\u0627\u0644\u0627\u062a",
              label_en: "Questions",
              icon: "questioncircle",
              route: "/questions"
            },
            {
              id: "responses",
              label_fa:
                "\u0646\u062a\u0627\u06cc\u062c \u0648 \u067e\u0627\u0633\u062e\u200c\u0647\u0627",
              label_en: "Responses",
              icon: "chartbar",
              route: "/responses"
            },
            {
              id: "notifications",
              label_fa:
                "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646\u200c\u0647\u0627",
              label_en: "Notifications",
              icon: "notification",
              route: "/notifications"
            },
            {
              id: "sms",
              label_fa:
                "\u0627\u0631\u0633\u0627\u0644 \u067e\u06cc\u0627\u0645\u06a9",
              label_en: "Send SMS",
              icon: "message",
              route: "/sms"
            }
          ]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select",
        type: "writable",
        variableType: "text",

        valueProp: "select",
        onChangeProp: "onSelectChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"frame11"}
      data-plasmic-override={overrides.frame11}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame11
      )}
    >
      <div
        data-plasmic-name={"frame14"}
        data-plasmic-override={overrides.frame14}
        className={classNames(projectcss.all, sty.frame14)}
      >
        <div
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames(projectcss.all, sty.logo)}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"2rem"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"2rem"}
            loading={"lazy"}
            src={{
              src: "/plasmic/liom_hamyar/images/image10.ico",
              fullWidth: 256,
              fullHeight: 256,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___83B1K
            )}
          >
            {"\u067e\u0646\u0644 \u0645\u062f\u06cc\u0631\u06cc\u062a "}
          </div>
        </div>
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <Line2Icon
            className={classNames(projectcss.all, sty.svg__lvScl)}
            role={"img"}
          />
        </div>
      </div>
      <div
        data-plasmic-name={"frame12"}
        data-plasmic-override={overrides.frame12}
        className={classNames(projectcss.all, sty.frame12)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.menu;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <MenuItem2
              data-plasmic-name={"menuItem2"}
              data-plasmic-override={overrides.menuItem2}
              className={classNames("__wab_instance", sty.menuItem2)}
              icon={(() => {
                try {
                  return currentItem.icon;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              key={currentIndex}
              onClick={async event => {
                const $steps = {};

                $steps["updateSelect"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["select"]
                        },
                        operation: 0,
                        value: currentItem.id
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelect"] != null &&
                  typeof $steps["updateSelect"] === "object" &&
                  typeof $steps["updateSelect"].then === "function"
                ) {
                  $steps["updateSelect"] = await $steps["updateSelect"];
                }
              }}
              select={(() => {
                try {
                  return currentItem.id == $state.select;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              text={(() => {
                try {
                  return currentItem.label_fa;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          );
        })}
      </div>
      <div
        data-plasmic-name={"frame7"}
        data-plasmic-override={overrides.frame7}
        className={classNames(projectcss.all, sty.frame7)}
      >
        <div
          data-plasmic-name={"vuesaxLinearLogout"}
          data-plasmic-override={overrides.vuesaxLinearLogout}
          className={classNames(projectcss.all, sty.vuesaxLinearLogout)}
        >
          <div
            data-plasmic-name={"vuesaxLinearLogout2"}
            data-plasmic-override={overrides.vuesaxLinearLogout2}
            className={classNames(projectcss.all, sty.vuesaxLinearLogout2)}
          >
            <LogoutIcon
              className={classNames(projectcss.all, sty.svg___6Gh6O)}
              role={"img"}
            />
          </div>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yF3TA
          )}
        >
          {"\u062e\u0631\u0648\u062c"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame11: [
    "frame11",
    "frame14",
    "logo",
    "img",
    "freeBox",
    "frame12",
    "menuItem2",
    "frame7",
    "vuesaxLinearLogout",
    "vuesaxLinearLogout2"
  ],
  frame14: ["frame14", "logo", "img", "freeBox"],
  logo: ["logo", "img"],
  img: ["img"],
  freeBox: ["freeBox"],
  frame12: ["frame12", "menuItem2"],
  menuItem2: ["menuItem2"],
  frame7: ["frame7", "vuesaxLinearLogout", "vuesaxLinearLogout2"],
  vuesaxLinearLogout: ["vuesaxLinearLogout", "vuesaxLinearLogout2"],
  vuesaxLinearLogout2: ["vuesaxLinearLogout2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame11: "div";
  frame14: "div";
  logo: "div";
  img: typeof PlasmicImg__;
  freeBox: "div";
  frame12: "div";
  menuItem2: typeof MenuItem2;
  frame7: "div";
  vuesaxLinearLogout: "div";
  vuesaxLinearLogout2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenu__VariantsArgs;
    args?: PlasmicMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMenu__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenu__ArgProps,
          internalVariantPropNames: PlasmicMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame11") {
    func.displayName = "PlasmicMenu";
  } else {
    func.displayName = `PlasmicMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicMenu = Object.assign(
  // Top-level PlasmicMenu renders the root element
  makeNodeComponent("frame11"),
  {
    // Helper components rendering sub-elements
    frame14: makeNodeComponent("frame14"),
    logo: makeNodeComponent("logo"),
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    frame12: makeNodeComponent("frame12"),
    menuItem2: makeNodeComponent("menuItem2"),
    frame7: makeNodeComponent("frame7"),
    vuesaxLinearLogout: makeNodeComponent("vuesaxLinearLogout"),
    vuesaxLinearLogout2: makeNodeComponent("vuesaxLinearLogout2"),

    // Metadata about props expected for PlasmicMenu
    internalVariantProps: PlasmicMenu__VariantProps,
    internalArgProps: PlasmicMenu__ArgProps
  }
);

export default PlasmicMenu;
/* prettier-ignore-end */
