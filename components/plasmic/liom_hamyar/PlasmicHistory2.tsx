/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: MXLfJ3MXZIBx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseSlider } from "@plasmicpkgs/react-aria/skinny/registerSlider";
import Label from "../../Label"; // plasmic-import: msVDJicWRQpz/component
import { BaseSliderOutput } from "@plasmicpkgs/react-aria/skinny/registerSliderOutput";
import { BaseSliderTrack } from "@plasmicpkgs/react-aria/skinny/registerSliderTrack";
import SliderThumb from "../../SliderThumb"; // plasmic-import: pmF7IoE0FUg-/component
import Description from "../../Description"; // plasmic-import: iwAkLYZK9Vrj/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicHistory2.module.css"; // plasmic-import: MXLfJ3MXZIBx/css

createPlasmicElementProxy;

export type PlasmicHistory2__VariantMembers = {};
export type PlasmicHistory2__VariantsArgs = {};
type VariantPropType = keyof PlasmicHistory2__VariantsArgs;
export const PlasmicHistory2__VariantProps = new Array<VariantPropType>();

export type PlasmicHistory2__ArgsType = {
  userStatus?: any;
  label?: React.ReactNode;
  thumbs?: React.ReactNode;
  children?: React.ReactNode;
  slot2?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHistory2__ArgsType;
export const PlasmicHistory2__ArgProps = new Array<ArgPropType>(
  "userStatus",
  "label",
  "thumbs",
  "children",
  "slot2",
  "slot"
);

export type PlasmicHistory2__OverridesType = {
  root?: Flex__<"div">;
  ariaRangeSlider?: Flex__<typeof BaseSlider>;
  label?: Flex__<typeof Label>;
  ariaSliderOutput?: Flex__<typeof BaseSliderOutput>;
  background?: Flex__<"div">;
  ariaSliderTrack?: Flex__<typeof BaseSliderTrack>;
  foreground?: Flex__<"div">;
  description?: Flex__<typeof Description>;
};

export interface DefaultHistory2Props {
  userStatus?: any;
  label?: React.ReactNode;
  thumbs?: React.ReactNode;
  children?: React.ReactNode;
  slot2?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHistory2__RenderFunc(props: {
  variants: PlasmicHistory2__VariantsArgs;
  args: PlasmicHistory2__ArgsType;
  overrides: PlasmicHistory2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          userStatus: {
            text: "\ud83d\udd34 Elahe is currently on their period. Day of bleeding.",
            periodStatus: "blood",
            pmsStart: "2025-10-15T00:00:00.000Z",
            pmsEnd: "2025-10-20T00:00:00.000Z",
            periodStart: "2025-09-29T00:00:00.000Z",
            periodEnd: "2025-10-04T00:00:00.000Z",
            fertilityStart: "2025-10-04T00:00:00.000Z",
            fertilityEnd: "2025-10-09T00:00:00.000Z",
            daysToStartPms: 15,
            daysOfFertility: 5,
            cycle: 21,
            length: 5,
            daysToEndPms: 20,
            daysToStartPeriod: -1,
            daysToEndPeriod: 4,
            daysToEndFertility: 9
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "ariaRangeSlider[][].value",
        type: "private",
        variableType: "array"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__y4Drx
        )}
      >
        {
          "\u067e\u06cc\u0634 \u0628\u06cc\u0646\u06cc \u0686\u0631\u062e\u0647 \u0642\u0627\u0639\u062f\u06af\u06cc"
        }
      </div>
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return (() => {
              function generatePeriodsGroupedByMonthArray(info, count = 6) {
                const cycle = info.cycle;
                const length = info.length;
                const pmsLength = 5;
                let start = new Date(info.periodStart);
                const monthsMap = {};
                const formatter = new Intl.DateTimeFormat("fa-IR", {
                  timeZone: "Asia/Tehran",
                  month: "long"
                });
                for (let i = 0; i < count; i++) {
                  let end = new Date(start);
                  end.setDate(start.getDate() + length - 1);
                  let nextStart = new Date(start);
                  nextStart.setDate(start.getDate() + cycle);
                  let pmsStart = new Date(nextStart);
                  pmsStart.setDate(nextStart.getDate() - pmsLength);
                  let pmsEnd = new Date(nextStart);
                  pmsEnd.setDate(nextStart.getDate() - 1);
                  const periodDays =
                    Math.round((end - start) / (1000 * 60 * 60 * 24)) + 1;
                  const pmsDays =
                    Math.round((pmsEnd - pmsStart) / (1000 * 60 * 60 * 24)) + 1;
                  const monthName = formatter.format(start);
                  if (!monthsMap[monthName]) monthsMap[monthName] = [];
                  monthsMap[monthName].push({
                    start: start.toISOString().split("T")[0],
                    end: end.toISOString().split("T")[0],
                    periodDays,
                    pmsStart: pmsStart.toISOString().split("T")[0],
                    pmsEnd: pmsEnd.toISOString().split("T")[0],
                    pmsDays
                  });
                  start = nextStart;
                }
                const monthsArray = Object.keys(monthsMap).map(month => ({
                  month,
                  periods: monthsMap[month]
                }));
                return monthsArray;
              }
              return generatePeriodsGroupedByMonthArray($props.userStatus);
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const moon = __plasmic_item_0;
        const moonIndex = __plasmic_idx_0;
        return (
          <div
            className={classNames(projectcss.all, sty.freeBox__vSNhv)}
            key={moonIndex}
          >
            <div className={classNames(projectcss.all, sty.freeBox__q4APw)} />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4X5Dg
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return moon.month;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__fywiQ)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return moon.periods;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                const currentItem = __plasmic_item_1;
                const currentIndex = __plasmic_idx_1;
                return (() => {
                  const child$Props = {
                    className: classNames(
                      "__wab_instance",
                      sty.ariaRangeSlider
                    ),
                    defaultValue: (() => {
                      try {
                        return [
                          $props.userStatus.cycle,
                          $props.userStatus.cycle - currentItem.periodDays
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [20, 50];
                        }
                        throw e;
                      }
                    })(),
                    key: currentIndex,
                    maxValue: (() => {
                      try {
                        return $props.userStatus.cycle;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    minValue: 0,
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "ariaRangeSlider",
                        __plasmic_idx_0,
                        __plasmic_idx_1,
                        "value"
                      ]).apply(null, eventArgs);
                    },
                    orientation: "horizontal",
                    value: generateStateValueProp($state, [
                      "ariaRangeSlider",
                      __plasmic_idx_0,
                      __plasmic_idx_1,
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "ariaRangeSlider[][].value"
                      }
                    ],
                    [__plasmic_idx_0, __plasmic_idx_1],
                    undefined ?? {},
                    child$Props
                  );
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "ariaRangeSlider[][].value",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return [
                                $props.userStatus.cycle,
                                $props.userStatus.cycle - currentItem.periodDays
                              ];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [20, 50];
                              }
                              throw e;
                            }
                          })()
                      }
                    ],
                    [__plasmic_idx_0, __plasmic_idx_1]
                  );
                  return (
                    <BaseSlider
                      data-plasmic-name={"ariaRangeSlider"}
                      data-plasmic-override={overrides.ariaRangeSlider}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wfVs
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tihm
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  try {
                                    function parseISOToUTC(dateStr) {
                                      let [y, m, d] = dateStr
                                        .split("-")
                                        .map(Number);
                                      return new Date(Date.UTC(y, m - 1, d));
                                    }
                                    const formatter = new Intl.DateTimeFormat(
                                      "fa-IR",
                                      {
                                        timeZone: "Asia/Tehran",
                                        day: "numeric",
                                        month: "long"
                                      }
                                    );
                                    let start = currentItem.start
                                      ? parseISOToUTC(currentItem.pmsEnd)
                                      : null;
                                    let startStr = start
                                      ? formatter.format(start)
                                      : "?";
                                    return `${startStr}`;
                                  } catch {}
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <Label
                          data-plasmic-name={"label"}
                          data-plasmic-override={overrides.label}
                          className={classNames("__wab_instance", sty.label)}
                        >
                          {renderPlasmicSlot({
                            defaultContents: null,
                            value: args.label
                          })}
                        </Label>
                        {$props.showOutputText ? (
                          <BaseSliderOutput
                            data-plasmic-name={"ariaSliderOutput"}
                            data-plasmic-override={overrides.ariaSliderOutput}
                            className={classNames(
                              "__wab_instance",
                              sty.ariaSliderOutput
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mzkec
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $props.outputText ??
                                      `بیشترین: ${$state.ariaRangeSlider.value[1]}                کمترین : ${$state.ariaRangeSlider.value[0]} `
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </BaseSliderOutput>
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2HvIs
                        )}
                        style={(() => {
                          try {
                            return { direction: "ltr" };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <div
                          data-plasmic-name={"background"}
                          data-plasmic-override={overrides.background}
                          className={classNames(projectcss.all, sty.background)}
                        >
                          <BaseSliderTrack
                            data-plasmic-name={"ariaSliderTrack"}
                            data-plasmic-override={overrides.ariaSliderTrack}
                            className={classNames(
                              "__wab_instance",
                              sty.ariaSliderTrack
                            )}
                            progressBar={
                              <div
                                data-plasmic-name={"foreground"}
                                data-plasmic-override={overrides.foreground}
                                className={classNames(
                                  projectcss.all,
                                  sty.foreground
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ufjFf
                                  )}
                                >
                                  {renderPlasmicSlot({
                                    defaultContents: (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__a5Shh
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.periodDays;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    ),
                                    value: args.children,
                                    className: classNames(
                                      sty.slotTargetChildren
                                    )
                                  })}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__jtiDv
                                  )}
                                >
                                  {renderPlasmicSlot({
                                    defaultContents: (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___7KMoi
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (() => {
                                                try {
                                                  function parseISOToUTC(
                                                    dateStr
                                                  ) {
                                                    let [y, m, d] = dateStr
                                                      .split("-")
                                                      .map(Number);
                                                    return new Date(
                                                      Date.UTC(y, m - 1, d)
                                                    );
                                                  }
                                                  const formatter =
                                                    new Intl.DateTimeFormat(
                                                      "fa-IR",
                                                      {
                                                        timeZone: "Asia/Tehran",
                                                        day: "numeric",
                                                        month: "long"
                                                      }
                                                    );
                                                  let start = currentItem.start
                                                    ? parseISOToUTC(
                                                        currentItem.start
                                                      )
                                                    : null;
                                                  let end = currentItem.end
                                                    ? parseISOToUTC(
                                                        currentItem.end
                                                      )
                                                    : null;
                                                  let startStr = start
                                                    ? formatter.format(start)
                                                    : "?";
                                                  let endStr = end
                                                    ? formatter.format(end)
                                                    : "?";
                                                  return `${endStr}`;
                                                } catch {}
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    ),
                                    value: args.slot2
                                  })}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__m47Mm
                                  )}
                                >
                                  {renderPlasmicSlot({
                                    defaultContents: (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__eh1Ho
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (() => {
                                                try {
                                                  function parseISOToUTC(
                                                    dateStr
                                                  ) {
                                                    let [y, m, d] = dateStr
                                                      .split("-")
                                                      .map(Number);
                                                    return new Date(
                                                      Date.UTC(y, m - 1, d)
                                                    );
                                                  }
                                                  const formatter =
                                                    new Intl.DateTimeFormat(
                                                      "fa-IR",
                                                      {
                                                        timeZone: "Asia/Tehran",
                                                        day: "numeric",
                                                        month: "long"
                                                      }
                                                    );
                                                  let start = currentItem.start
                                                    ? parseISOToUTC(
                                                        currentItem.start
                                                      )
                                                    : null;
                                                  let end = currentItem.end
                                                    ? parseISOToUTC(
                                                        currentItem.end
                                                      )
                                                    : null;
                                                  let startStr = start
                                                    ? formatter.format(start)
                                                    : "?";
                                                  let endStr = end
                                                    ? formatter.format(end)
                                                    : "?";
                                                  return `${startStr}`;
                                                } catch {}
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    ),
                                    value: args.slot
                                  })}
                                </div>
                              </div>
                            }
                          >
                            {renderPlasmicSlot({
                              defaultContents: (
                                <SliderThumb
                                  className={classNames(
                                    "__wab_instance",
                                    sty.sliderThumb___51Qyl
                                  )}
                                />
                              ),

                              value: args.thumbs
                            })}
                          </BaseSliderTrack>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aJzRd
                            )}
                            id={"max"}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.ariaRangeSlider.value[1];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__isXaB
                            )}
                            id={"min"}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.ariaRangeSlider.value[0];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                      {$props.showDescription ? (
                        <Description
                          data-plasmic-name={"description"}
                          data-plasmic-override={overrides.description}
                          className={classNames(
                            "__wab_instance",
                            sty.description
                          )}
                        />
                      ) : null}
                    </BaseSlider>
                  );
                })();
              })}
            </div>
          </div>
        );
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "ariaRangeSlider",
    "label",
    "ariaSliderOutput",
    "background",
    "ariaSliderTrack",
    "foreground",
    "description"
  ],
  ariaRangeSlider: [
    "ariaRangeSlider",
    "label",
    "ariaSliderOutput",
    "background",
    "ariaSliderTrack",
    "foreground",
    "description"
  ],
  label: ["label"],
  ariaSliderOutput: ["ariaSliderOutput"],
  background: ["background", "ariaSliderTrack", "foreground"],
  ariaSliderTrack: ["ariaSliderTrack", "foreground"],
  foreground: ["foreground"],
  description: ["description"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  ariaRangeSlider: typeof BaseSlider;
  label: typeof Label;
  ariaSliderOutput: typeof BaseSliderOutput;
  background: "div";
  ariaSliderTrack: typeof BaseSliderTrack;
  foreground: "div";
  description: typeof Description;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHistory2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHistory2__VariantsArgs;
    args?: PlasmicHistory2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHistory2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHistory2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHistory2__ArgProps,
          internalVariantPropNames: PlasmicHistory2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHistory2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHistory2";
  } else {
    func.displayName = `PlasmicHistory2.${nodeName}`;
  }
  return func;
}

export const PlasmicHistory2 = Object.assign(
  // Top-level PlasmicHistory2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ariaRangeSlider: makeNodeComponent("ariaRangeSlider"),
    label: makeNodeComponent("label"),
    ariaSliderOutput: makeNodeComponent("ariaSliderOutput"),
    background: makeNodeComponent("background"),
    ariaSliderTrack: makeNodeComponent("ariaSliderTrack"),
    foreground: makeNodeComponent("foreground"),
    description: makeNodeComponent("description"),

    // Metadata about props expected for PlasmicHistory2
    internalVariantProps: PlasmicHistory2__VariantProps,
    internalArgProps: PlasmicHistory2__ArgProps
  }
);

export default PlasmicHistory2;
/* prettier-ignore-end */
