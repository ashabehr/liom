/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 8-KHcxmihxtJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Menu from "../../Menu"; // plasmic-import: YitzRDB2rU0M/component
import Main2 from "../../Main2"; // plasmic-import: qh0CBDuGi8tY/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicPan.module.css"; // plasmic-import: 8-KHcxmihxtJ/css

createPlasmicElementProxy;

export type PlasmicPan__VariantMembers = {};
export type PlasmicPan__VariantsArgs = {};
type VariantPropType = keyof PlasmicPan__VariantsArgs;
export const PlasmicPan__VariantProps = new Array<VariantPropType>();

export type PlasmicPan__ArgsType = {};
type ArgPropType = keyof PlasmicPan__ArgsType;
export const PlasmicPan__ArgProps = new Array<ArgPropType>();

export type PlasmicPan__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  menu2?: Flex__<typeof Menu>;
  main2?: Flex__<typeof Main2>;
};

export interface DefaultPanProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPan__RenderFunc(props: {
  variants: PlasmicPan__VariantsArgs;
  args: PlasmicPan__ArgsType;
  overrides: PlasmicPan__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "menu",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            id: "dashboard",
            label_fa: "\u062f\u0627\u0634\u0628\u0648\u0631\u062f",
            label_en: "Dashboard",
            icon: "speedometer",
            route: "/dashboard"
          },
          {
            id: "members",
            label_fa: "\u06a9\u0627\u0631\u0628\u0631\u0627\u0646",
            label_en: "Members",
            icon: "users",
            route: "/members"
          },
          {
            id: "reports",
            label_fa: "\u06af\u0632\u0627\u0631\u0634\u200c\u0647\u0627",
            label_en: "Reports",
            icon: "bar-chart",
            route: "/reports"
          },
          {
            id: "messages",
            label_fa: "\u067e\u06cc\u0627\u0645\u200c\u0647\u0627",
            label_en: "Messages",
            icon: "message",
            route: "/messages"
          },
          {
            id: "settings",
            label_fa: "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a",
            label_en: "Settings",
            icon: "settings",
            route: "/settings"
          }
        ]
      },
      {
        path: "menu2.select",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "reports"
      },
      {
        path: "header",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc",
          "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc",
          "\u062c\u0646\u0633\u06cc\u062a",
          "\u0632\u0645\u0627\u0646 \u067e\u0627\u06cc\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9"
        ]
      },
      {
        path: "main2.page2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Menu
              data-plasmic-name={"menu2"}
              data-plasmic-override={overrides.menu2}
              className={classNames("__wab_instance", sty.menu2)}
              menu={$state.menu}
              onSelectChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["menu2", "select"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              select={generateStateValueProp($state, ["menu2", "select"])}
            />

            <Main2
              data-plasmic-name={"main2"}
              data-plasmic-override={overrides.main2}
              className={classNames("__wab_instance", sty.main2)}
              header={$state.header}
              onPage2Change={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["main2", "page2"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              page={(() => {
                try {
                  return $state.menu2.select;
                  // "tabPage"
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "reports";
                  }
                  throw e;
                }
              })()}
              page2={generateStateValueProp($state, ["main2", "page2"])}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "menu2", "main2"],
  freeBox: ["freeBox", "menu2", "main2"],
  menu2: ["menu2"],
  main2: ["main2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  menu2: typeof Menu;
  main2: typeof Main2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPan__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPan__VariantsArgs;
    args?: PlasmicPan__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPan__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPan__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPan__ArgProps,
          internalVariantPropNames: PlasmicPan__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPan__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPan";
  } else {
    func.displayName = `PlasmicPan.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPan = Object.assign(
  // Top-level PlasmicPan renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    menu2: makeNodeComponent("menu2"),
    main2: makeNodeComponent("main2"),

    // Metadata about props expected for PlasmicPan
    internalVariantProps: PlasmicPan__VariantProps,
    internalArgProps: PlasmicPan__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPan;
/* prettier-ignore-end */
