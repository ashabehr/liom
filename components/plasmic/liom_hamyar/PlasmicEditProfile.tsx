// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 3hQjSi0RgPGv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import SelectionChoise from "../../SelectionChoise"; // plasmic-import: kjK-J97SUWLJ/component
import Switchbest from "../../Switchbest"; // plasmic-import: ofUp1AS5glz5/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicEditProfile.module.css"; // plasmic-import: 3hQjSi0RgPGv/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon67Icon from "./icons/PlasmicIcon__Icon67"; // plasmic-import: hIAuvrXigDnk/icon

createPlasmicElementProxy;

export type PlasmicEditProfile__VariantMembers = {};
export type PlasmicEditProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditProfile__VariantsArgs;
export const PlasmicEditProfile__VariantProps = new Array<VariantPropType>();

export type PlasmicEditProfile__ArgsType = {};
type ArgPropType = keyof PlasmicEditProfile__ArgsType;
export const PlasmicEditProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicEditProfile__OverridesType = {
  root?: Flex__<"div">;
  verticalIdentity?: Flex__<"div">;
  verticalForNameInput?: Flex__<"div">;
  nameInput?: Flex__<typeof TextInput>;
  antdInput3?: Flex__<typeof Input>;
  verticalForIdInput?: Flex__<"div">;
  idInput?: Flex__<typeof TextInput>;
  antdInput?: Flex__<typeof Input>;
  verticalForDateInput?: Flex__<"div">;
  verticalForSelection?: Flex__<"div">;
  horizontalForButton?: Flex__<"div">;
  horizontalForButton2?: Flex__<"div">;
  horizontalForButton3?: Flex__<"div">;
  verticalForProbabilityOfGettingPregnant?: Flex__<"div">;
  switchbest?: Flex__<typeof Switchbest>;
  verticalForMenstrualCycle?: Flex__<"div">;
  heightAndWeight?: Flex__<"div">;
  weight?: Flex__<"div">;
  weight2?: Flex__<"div">;
};

export interface DefaultEditProfileProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditProfile__RenderFunc(props: {
  variants: PlasmicEditProfile__VariantsArgs;
  args: PlasmicEditProfile__ArgsType;
  overrides: PlasmicEditProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "nameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "idInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "switchbest.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"verticalIdentity"}
            data-plasmic-override={overrides.verticalIdentity}
            className={classNames(projectcss.all, sty.verticalIdentity)}
          >
            <div
              data-plasmic-name={"verticalForNameInput"}
              data-plasmic-override={overrides.verticalForNameInput}
              className={classNames(projectcss.all, sty.verticalForNameInput)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__z2Vt
                )}
              >
                {"\u0646\u0627\u0645"}
              </div>
              <TextInput
                data-plasmic-name={"nameInput"}
                data-plasmic-override={overrides.nameInput}
                antdInput2={(() => {
                  const child$Props = {
                    "aria-label": ``,
                    bordered: false,
                    className: classNames("__wab_instance", sty.antdInput3),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["antdInput3", "value"],
                        Input_Helpers
                      ).apply(null, eventArgs);
                    },
                    placeholder:
                      "\u0646\u0627\u0645 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f",
                    size: "large",
                    value: generateStateValueProp($state, [
                      "antdInput3",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "antdInput3.value"
                      }
                    ],
                    [],
                    Input_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <Input
                      data-plasmic-name={"antdInput3"}
                      data-plasmic-override={overrides.antdInput3}
                      {...child$Props}
                    />
                  );
                })()}
                className={classNames("__wab_instance", sty.nameInput)}
                endIcon={
                  <CheckSvgIcon
                    className={classNames(projectcss.all, sty.svg__xIaVv)}
                    role={"img"}
                  />
                }
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["nameInput", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={"9123456789"}
                showEndIcon={true}
                startIcon={
                  <SearchSvgIcon
                    className={classNames(projectcss.all, sty.svg__k5G2)}
                    role={"img"}
                  />
                }
                type={"tel"}
                value={
                  generateStateValueProp($state, ["nameInput", "value"]) ?? ""
                }
              />
            </div>
            <div
              data-plasmic-name={"verticalForIdInput"}
              data-plasmic-override={overrides.verticalForIdInput}
              className={classNames(projectcss.all, sty.verticalForIdInput)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___53Vhi
                )}
              >
                {"\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"}
              </div>
              <TextInput
                data-plasmic-name={"idInput"}
                data-plasmic-override={overrides.idInput}
                antdInput2={(() => {
                  const child$Props = {
                    "aria-label": ``,
                    bordered: false,
                    className: classNames("__wab_instance", sty.antdInput),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["antdInput", "value"],
                        Input_Helpers
                      ).apply(null, eventArgs);
                    },
                    placeholder:
                      "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f",
                    size: "large",
                    value: generateStateValueProp($state, [
                      "antdInput",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "antdInput.value"
                      }
                    ],
                    [],
                    Input_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <Input
                      data-plasmic-name={"antdInput"}
                      data-plasmic-override={overrides.antdInput}
                      {...child$Props}
                    />
                  );
                })()}
                className={classNames("__wab_instance", sty.idInput)}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["idInput", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                value={
                  generateStateValueProp($state, ["idInput", "value"]) ?? ""
                }
              />
            </div>
            <div
              data-plasmic-name={"verticalForDateInput"}
              data-plasmic-override={overrides.verticalForDateInput}
              className={classNames(projectcss.all, sty.verticalForDateInput)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__af68V
                )}
              >
                {"\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f "}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__jK8)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8WE
                  )}
                >
                  {""}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"verticalForSelection"}
              data-plasmic-override={overrides.verticalForSelection}
              className={classNames(projectcss.all, sty.verticalForSelection)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cGqYj
                )}
              >
                {"\u0634\u063a\u0644"}
              </div>
              <div
                data-plasmic-name={"horizontalForButton"}
                data-plasmic-override={overrides.horizontalForButton}
                className={classNames(projectcss.all, sty.horizontalForButton)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <SelectionChoise
                      className={classNames(
                        "__wab_instance",
                        sty.selectionChoise__f1GNw
                      )}
                      key={currentIndex}
                    />
                  );
                })}
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return ["شاغلم", "شاغل نیستم"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <SelectionChoise
                      className={classNames(
                        "__wab_instance",
                        sty.selectionChoise__ob42H
                      )}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dL2Ka
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </SelectionChoise>
                  );
                })}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__f5Ovx
                )}
              >
                {"\u0648\u0636\u0639\u06cc\u062a \u062a\u0627\u0647\u0644"}
              </div>
              <div
                data-plasmic-name={"horizontalForButton2"}
                data-plasmic-override={overrides.horizontalForButton2}
                className={classNames(projectcss.all, sty.horizontalForButton2)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return ["مجرد", "متاهل"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <SelectionChoise
                      className={classNames(
                        "__wab_instance",
                        sty.selectionChoise__sSjP
                      )}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7ChhP
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </SelectionChoise>
                  );
                })}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zlDnL
                )}
              >
                {"\u062a\u062d\u0635\u06cc\u0644\u0627\u062a "}
              </div>
              <div
                data-plasmic-name={"horizontalForButton3"}
                data-plasmic-override={overrides.horizontalForButton3}
                className={classNames(projectcss.all, sty.horizontalForButton3)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return ["درحال تحصیل", "فارغ تحصیل"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <SelectionChoise
                      className={classNames(
                        "__wab_instance",
                        sty.selectionChoise___5XjO
                      )}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ffiFm
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </SelectionChoise>
                  );
                })}
              </div>
            </div>
            <div
              data-plasmic-name={"verticalForProbabilityOfGettingPregnant"}
              data-plasmic-override={
                overrides.verticalForProbabilityOfGettingPregnant
              }
              className={classNames(
                projectcss.all,
                sty.verticalForProbabilityOfGettingPregnant
              )}
            >
              <div className={classNames(projectcss.all, sty.freeBox__dYr8N)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nFiv)}
                >
                  <Icon67Icon
                    className={classNames(projectcss.all, sty.svg__lW4M)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x4Ezn
                    )}
                  >
                    {
                      "\u0646\u0645\u0627\u06cc\u0634 \u0627\u062d\u062a\u0645\u0627\u0644 \u0628\u0627\u0631\u062f\u0627\u0631 \u0634\u062f\u0646 \u062f\u0631  \u0647\u0631 \u0631\u0648\u0632 "
                    }
                  </div>
                  <Switchbest
                    data-plasmic-name={"switchbest"}
                    data-plasmic-override={overrides.switchbest}
                    children={null}
                    className={classNames("__wab_instance", sty.switchbest)}
                    isChecked={
                      generateStateValueProp($state, [
                        "switchbest",
                        "isChecked"
                      ]) ?? false
                    }
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "switchbest",
                          "isChecked"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  />
                </Stack__>
                <div className={classNames(projectcss.all, sty.freeBox__kqKzh)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0Q61M
                    )}
                  >
                    {
                      '\u0627\u06cc\u0646 \u062f\u0631\u0635\u062f \u062f\u0631 \u0637\u0631\u0627\u062d\u06cc  \u06a9\u0627\u0631\u0628\u0631\u062f\u06cc \u0628\u062e\u0634 \u0642\u0627\u0639\u062f\u06af\u06cc \u062f\u0631 \u0642\u0633\u0645\u062a "\u062f\u0648\u0631\u0647 \u062c\u0627\u0631\u06cc \u062f\u0631\u06cc\u06a9 \u0646\u06af\u0627\u0647"\u0646\u0645\u0627\u06cc\u0634 \u062f\u0627\u062f\u0647 \u0645\u06cc\u0634\u0648\u062f'
                    }
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"verticalForMenstrualCycle"}
              data-plasmic-override={overrides.verticalForMenstrualCycle}
              className={classNames(
                projectcss.all,
                sty.verticalForMenstrualCycle
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ka4AS
                )}
              >
                {
                  "\u0686\u0631\u062e\u0647 \u0642\u0627\u0639\u062f\u06af\u06cc"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kWgc)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__k37BQ
                  )}
                >
                  {
                    "\u062a\u0639\u062f\u0627\u062f \u0631\u0648\u0632 \u062e\u0648\u0646\u0631\u06cc\u0632\u06cc"
                  }
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__hchdI)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lsJfk
                    )}
                  >
                    {""}
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__rribl)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gmUae
                  )}
                >
                  {
                    "\u0637\u0648\u0644 \u0633\u06cc\u06a9\u0644 \u067e\u0631\u06cc\u0648\u062f"
                  }
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___9PFte)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jxvgb
                    )}
                  >
                    {""}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___03Fx9
                  )}
                >
                  {
                    "\u0641\u0627\u0635\u0644\u0647 \u0627\u0648\u0644\u06cc\u0646 \u0631\u0648\u0632  \u0642\u0627\u0639\u062f\u06af\u06cc \u062a\u0627 \u0634\u0631\u0648\u0639 \u0642\u0627\u062f\u06af\u06cc \u0628\u0639\u062f\u06cc\u062a \u0627\u0633\u062a.(\u062d\u0648\u0627\u0633\u062a \u0628\u0627\u0634\u0647 \u062a\u0639\u062f\u0627\u062f \u0631\u0648\u0632 \u067e\u0631\u06cc\u0648\u062f\u06cc\u062a (\u062e\u0648\u0646\u0631\u06cc\u0632\u06cc)  \u0631\u0648 \u0647\u0645  \u062c\u0633\u0627\u0628 \u06a9\u0646\u06cc."
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__xSZgy)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zr4Gx
                  )}
                >
                  {
                    "\u062a\u0627\u0631\u06cc\u062e \u0627\u0648\u0644\u06cc\u0646 \u0631\u0648\u0632 \u0627\u0632 \u0627\u062e\u0631\u06cc\u0646 \u0642\u0627\u0639\u062f\u06af\u06cc \u0634\u0645\u0627"
                  }
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__xNeYo)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cL78D
                    )}
                  >
                    {"Enter some text"}
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"heightAndWeight"}
              data-plasmic-override={overrides.heightAndWeight}
              className={classNames(projectcss.all, sty.heightAndWeight)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__kzzDw)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oBGcV
                  )}
                >
                  {"\u0642\u062f"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__gzQ2U)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ha2B1
                    )}
                  >
                    {""}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"weight"}
                data-plasmic-override={overrides.weight}
                className={classNames(projectcss.all, sty.weight)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3YH8O
                  )}
                >
                  {"\u0648\u0632\u0646"}
                </div>
                <div
                  data-plasmic-name={"weight2"}
                  data-plasmic-override={overrides.weight2}
                  className={classNames(projectcss.all, sty.weight2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__i1Bra
                    )}
                  >
                    {""}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "verticalIdentity",
    "verticalForNameInput",
    "nameInput",
    "antdInput3",
    "verticalForIdInput",
    "idInput",
    "antdInput",
    "verticalForDateInput",
    "verticalForSelection",
    "horizontalForButton",
    "horizontalForButton2",
    "horizontalForButton3",
    "verticalForProbabilityOfGettingPregnant",
    "switchbest",
    "verticalForMenstrualCycle",
    "heightAndWeight",
    "weight",
    "weight2"
  ],
  verticalIdentity: [
    "verticalIdentity",
    "verticalForNameInput",
    "nameInput",
    "antdInput3",
    "verticalForIdInput",
    "idInput",
    "antdInput",
    "verticalForDateInput",
    "verticalForSelection",
    "horizontalForButton",
    "horizontalForButton2",
    "horizontalForButton3",
    "verticalForProbabilityOfGettingPregnant",
    "switchbest",
    "verticalForMenstrualCycle",
    "heightAndWeight",
    "weight",
    "weight2"
  ],
  verticalForNameInput: ["verticalForNameInput", "nameInput", "antdInput3"],
  nameInput: ["nameInput", "antdInput3"],
  antdInput3: ["antdInput3"],
  verticalForIdInput: ["verticalForIdInput", "idInput", "antdInput"],
  idInput: ["idInput", "antdInput"],
  antdInput: ["antdInput"],
  verticalForDateInput: ["verticalForDateInput"],
  verticalForSelection: [
    "verticalForSelection",
    "horizontalForButton",
    "horizontalForButton2",
    "horizontalForButton3"
  ],
  horizontalForButton: ["horizontalForButton"],
  horizontalForButton2: ["horizontalForButton2"],
  horizontalForButton3: ["horizontalForButton3"],
  verticalForProbabilityOfGettingPregnant: [
    "verticalForProbabilityOfGettingPregnant",
    "switchbest"
  ],
  switchbest: ["switchbest"],
  verticalForMenstrualCycle: ["verticalForMenstrualCycle"],
  heightAndWeight: ["heightAndWeight", "weight", "weight2"],
  weight: ["weight", "weight2"],
  weight2: ["weight2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  verticalIdentity: "div";
  verticalForNameInput: "div";
  nameInput: typeof TextInput;
  antdInput3: typeof Input;
  verticalForIdInput: "div";
  idInput: typeof TextInput;
  antdInput: typeof Input;
  verticalForDateInput: "div";
  verticalForSelection: "div";
  horizontalForButton: "div";
  horizontalForButton2: "div";
  horizontalForButton3: "div";
  verticalForProbabilityOfGettingPregnant: "div";
  switchbest: typeof Switchbest;
  verticalForMenstrualCycle: "div";
  heightAndWeight: "div";
  weight: "div";
  weight2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditProfile__VariantsArgs;
    args?: PlasmicEditProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEditProfile__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEditProfile__ArgProps,
          internalVariantPropNames: PlasmicEditProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEditProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditProfile";
  } else {
    func.displayName = `PlasmicEditProfile.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicEditProfile = Object.assign(
  // Top-level PlasmicEditProfile renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    verticalIdentity: makeNodeComponent("verticalIdentity"),
    verticalForNameInput: makeNodeComponent("verticalForNameInput"),
    nameInput: makeNodeComponent("nameInput"),
    antdInput3: makeNodeComponent("antdInput3"),
    verticalForIdInput: makeNodeComponent("verticalForIdInput"),
    idInput: makeNodeComponent("idInput"),
    antdInput: makeNodeComponent("antdInput"),
    verticalForDateInput: makeNodeComponent("verticalForDateInput"),
    verticalForSelection: makeNodeComponent("verticalForSelection"),
    horizontalForButton: makeNodeComponent("horizontalForButton"),
    horizontalForButton2: makeNodeComponent("horizontalForButton2"),
    horizontalForButton3: makeNodeComponent("horizontalForButton3"),
    verticalForProbabilityOfGettingPregnant: makeNodeComponent(
      "verticalForProbabilityOfGettingPregnant"
    ),
    switchbest: makeNodeComponent("switchbest"),
    verticalForMenstrualCycle: makeNodeComponent("verticalForMenstrualCycle"),
    heightAndWeight: makeNodeComponent("heightAndWeight"),
    weight: makeNodeComponent("weight"),
    weight2: makeNodeComponent("weight2"),

    // Metadata about props expected for PlasmicEditProfile
    internalVariantProps: PlasmicEditProfile__VariantProps,
    internalArgProps: PlasmicEditProfile__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEditProfile;
/* prettier-ignore-end */
