/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 3hQjSi0RgPGv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import SelectionChoise from "../../SelectionChoise"; // plasmic-import: kjK-J97SUWLJ/component
import Switchbest from "../../Switchbest"; // plasmic-import: ofUp1AS5glz5/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import { Pickers } from "@/components/Pickers"; // plasmic-import: htE-oGSeNx82/codeComponent
import { DatePickers } from "@/components/DatePickers"; // plasmic-import: Pxh5xTWczGDl/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicEditProfile.module.css"; // plasmic-import: 3hQjSi0RgPGv/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import CalenderOutlinedIcSvgIcon from "./icons/PlasmicIcon__CalenderOutlinedIcSvg"; // plasmic-import: JKRqNBk8_QEL/icon
import Icon67Icon from "./icons/PlasmicIcon__Icon67"; // plasmic-import: hIAuvrXigDnk/icon
import RulerIcSvgIcon from "./icons/PlasmicIcon__RulerIcSvg"; // plasmic-import: 9iZxfHzH83kz/icon
import WeightmeterIcSvgIcon from "./icons/PlasmicIcon__WeightmeterIcSvg"; // plasmic-import: _rOaaxGTo0Hj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon

createPlasmicElementProxy;

export type PlasmicEditProfile__VariantMembers = {};
export type PlasmicEditProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditProfile__VariantsArgs;
export const PlasmicEditProfile__VariantProps = new Array<VariantPropType>();

export type PlasmicEditProfile__ArgsType = {};
type ArgPropType = keyof PlasmicEditProfile__ArgsType;
export const PlasmicEditProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicEditProfile__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  getInfo?: Flex__<typeof ApiRequest>;
  verticalIdentity2?: Flex__<"div">;
  verticalForNameInput2?: Flex__<"div">;
  verticalForNameInput3?: Flex__<"div">;
  verticalForNameInput4?: Flex__<"div">;
  verticalForNameInput5?: Flex__<"div">;
  verticalForNameInput6?: Flex__<"div">;
  verticalForNameInput7?: Flex__<"div">;
  verticalForNameInput8?: Flex__<"div">;
  verticalForNameInput9?: Flex__<"div">;
  verticalForNameInput10?: Flex__<"div">;
  verticalForNameInput11?: Flex__<"div">;
  verticalForNameInput12?: Flex__<"div">;
  verticalForNameInput13?: Flex__<"div">;
  verticalForNameInput14?: Flex__<"div">;
  verticalForNameInput15?: Flex__<"div">;
  verticalForNameInput16?: Flex__<"div">;
  verticalForNameInput17?: Flex__<"div">;
  verticalForNameInput18?: Flex__<"div">;
  verticalForNameInput19?: Flex__<"div">;
  verticalForNameInput20?: Flex__<"div">;
  verticalForNameInput21?: Flex__<"div">;
  verticalForNameInput22?: Flex__<"div">;
  verticalIdentity?: Flex__<"div">;
  verticalForNameInput?: Flex__<"div">;
  nameInput?: Flex__<typeof TextInput>;
  antdInput3?: Flex__<typeof Input>;
  verticalForDateInput?: Flex__<"div">;
  verticalForSelection?: Flex__<"div">;
  horizontalForButton?: Flex__<"div">;
  horizontalForButton2?: Flex__<"div">;
  horizontalForButton3?: Flex__<"div">;
  verticalForProbabilityOfGettingPregnant?: Flex__<"div">;
  switchbest?: Flex__<typeof Switchbest>;
  verticalForMenstrualCycle?: Flex__<"div">;
  numberOfDaysOfBleeding2?: Flex__<"div">;
  numberOfDaysOfBleeding3?: Flex__<"div">;
  nameInput2?: Flex__<typeof TextInput>;
  nameInput3?: Flex__<typeof TextInput>;
  nameInput4?: Flex__<typeof TextInput>;
  heightAndWeight?: Flex__<"div">;
  weight?: Flex__<"div">;
  weight2?: Flex__<"div">;
  button19?: Flex__<typeof Button>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  dialogNumberOfDaysOfBleeding?: Flex__<typeof Dialog>;
  pickersForNumberOfDaysOfBleeding?: Flex__<typeof Pickers>;
  button6?: Flex__<typeof Button>;
  dialogDateOfBrith?: Flex__<typeof Dialog>;
  datePickersBirthDay?: Flex__<typeof DatePickers>;
  button3?: Flex__<typeof Button>;
  dialogForPeriodCycleLength?: Flex__<typeof Dialog>;
  pickersForPeriodCycleLength?: Flex__<typeof Pickers>;
  button9?: Flex__<typeof Button>;
  dialogForHeight?: Flex__<typeof Dialog>;
  pickersForHeight?: Flex__<typeof Pickers>;
  button12?: Flex__<typeof Button>;
  dialogForWeight?: Flex__<typeof Dialog>;
  pickersForWeight?: Flex__<typeof Pickers>;
  button15?: Flex__<typeof Button>;
  dialogForTheDateOfTheFirstDayOfYourLastPeriod?: Flex__<typeof Dialog>;
  pickersForTheDateOfTheFirstDayOfYourLastPeriod?: Flex__<typeof Pickers>;
  button18?: Flex__<typeof Button>;
};

export interface DefaultEditProfileProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditProfile__RenderFunc(props: {
  variants: PlasmicEditProfile__VariantsArgs;
  args: PlasmicEditProfile__ArgsType;
  overrides: PlasmicEditProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "nameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "switchbest.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.variableSwichForProbility;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "dialogDateOfBrith.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "datePickersBirthDay.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dateOfBrith",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                gy: $state.getInfo.data?.result?.user?.birthDate?.year || 2000,
                gm: $state.getInfo.data?.result?.user?.birthDate.month || 8,
                gd: $state.getInfo.data?.result?.user?.birthDate.day || 5
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "dialogNumberOfDaysOfBleeding.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pickersForNumberOfDaysOfBleeding.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "numberOfDaysOfBleedingPicker",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getInfo.data.result.user.length || "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialogForPeriodCycleLength.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "periodCycleLength",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getInfo.data.result.user.cycle || "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "pickersForPeriodCycleLength.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "button9.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "height",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "dialogForHeight.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pickersForHeight.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 155
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialogForWeight.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "weight3",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "pickersForWeight.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 55
      },
      {
        path: "button15.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variableForJob",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getInfo.data.result.user.job;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "variableForMarrideStutuse",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getInfo.data.result.user.married === true
                ? "Married"
                : $state.getInfo.data.result.user.married === false
                ? "Single"
                : "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "variableForGraduateAndStudying",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getInfo.data.result.user.education;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "getInfo.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getInfo.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getInfo.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variableForLastPeriod",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return -100;
              }
              throw e;
            }
          })()
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.token;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "variableForTheDateOfTheFirstDayOfYourLastPeriod",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const today = new Date();
                const daysOfWeek = [
                  "یکشنبه",
                  "دوشنبه",
                  "سه‌شنبه",
                  "چهارشنبه",
                  "پنج‌شنبه",
                  "جمعه",
                  "شنبه"
                ];

                const monthNames = [
                  "فروردین",
                  "اردیبهشت",
                  "خرداد",
                  "تیر",
                  "مرداد",
                  "شهریور",
                  "مهر",
                  "آبان",
                  "آذر",
                  "دی",
                  "بهمن",
                  "اسفند"
                ];

                const updatedPeriods = [
                  (() => {
                    const dayOfWeek = daysOfWeek[today.getDay()];
                    const jalaaliDate = window.jalaali.toJalaali(
                      today.getFullYear(),
                      today.getMonth() + 1,
                      today.getDate()
                    );
                    const monthName = monthNames[jalaaliDate.jm - 1];
                    const formattedDay = String(jalaaliDate.jd).padStart(
                      2,
                      "0"
                    );
                    const formattedMonth = String(jalaaliDate.jm).padStart(
                      2,
                      "0"
                    );
                    return {
                      label: `${dayOfWeek} ${formattedDay} ${monthName}`,
                      value: 0,
                      date: `${today.getFullYear()}-${String(
                        today.getMonth() + 1
                      ).padStart(2, "0")}-${String(today.getDate()).padStart(
                        2,
                        "0"
                      )}`
                    };
                  })(),
                  ...Array.from(
                    {
                      length:
                        $state.periodCycleLength != 0
                          ? $state.periodCycleLength
                          : 30
                    },
                    (_, i) => {
                      const date = new Date(today);
                      date.setDate(today.getDate() - (i + 1));
                      const dayOfWeek = daysOfWeek[date.getDay()];
                      const jalaaliDate = window.jalaali.toJalaali(
                        date.getFullYear(),
                        date.getMonth() + 1,
                        date.getDate()
                      );
                      const monthName = monthNames[jalaaliDate.jm - 1];
                      const formattedDay = String(jalaaliDate.jd).padStart(
                        2,
                        "0"
                      );
                      const formattedMonth = String(jalaaliDate.jm).padStart(
                        2,
                        "0"
                      );
                      const label = `${dayOfWeek} ${formattedDay} ${monthName}`;
                      return {
                        label,
                        value: -(i + 1),
                        date: `${date.getFullYear()}-${formattedMonth}-${formattedDay}`
                      };
                    }
                  )
                ];

                return updatedPeriods;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "dialogForTheDateOfTheFirstDayOfYourLastPeriod.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pickersForTheDateOfTheFirstDayOfYourLastPeriod.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "button18.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variableSwichForProbility",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button19.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getInfo.data.result.user.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "empty",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          name: true,
          lenght: true,
          cyclel: true,
          lasttime: true
        })
      },
      {
        path: "nameInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "nameInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "nameInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dateOfBrithFa",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const birthDateObject = $state.dateOfBrith;
                var jalaaliDate = window.jalaali.toJalaali(
                  birthDateObject.gy,
                  birthDateObject.gm,
                  birthDateObject.gd
                );
                return jalaaliDate;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "btnLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button19.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button6.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button9.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button12.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button15.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button18.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button19.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.btnLoading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button6.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button3.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button9.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button12.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button15.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button18.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script src="https://cdn.jsdelivr.net/npm/jalaali-js/dist/jalaali.js"></script>\r\n'
            }
          />

          <ApiRequest
            data-plasmic-name={"getInfo"}
            data-plasmic-override={overrides.getInfo}
            className={classNames("__wab_instance", sty.getInfo)}
            errorDisplay={null}
            loadingDisplay={
              <div
                data-plasmic-name={"verticalIdentity2"}
                data-plasmic-override={overrides.verticalIdentity2}
                className={classNames(projectcss.all, sty.verticalIdentity2)}
              >
                <div
                  data-plasmic-name={"verticalForNameInput2"}
                  data-plasmic-override={overrides.verticalForNameInput2}
                  className={classNames(
                    projectcss.all,
                    sty.verticalForNameInput2
                  )}
                >
                  <div
                    data-plasmic-name={"verticalForNameInput3"}
                    data-plasmic-override={overrides.verticalForNameInput3}
                    className={classNames(
                      projectcss.all,
                      sty.verticalForNameInput3,
                      "shimmer"
                    )}
                  />

                  <div
                    data-plasmic-name={"verticalForNameInput4"}
                    data-plasmic-override={overrides.verticalForNameInput4}
                    className={classNames(
                      projectcss.all,
                      sty.verticalForNameInput4,
                      "shimmer"
                    )}
                  />
                </div>
                <div
                  data-plasmic-name={"verticalForNameInput5"}
                  data-plasmic-override={overrides.verticalForNameInput5}
                  className={classNames(
                    projectcss.all,
                    sty.verticalForNameInput5
                  )}
                >
                  <div
                    data-plasmic-name={"verticalForNameInput6"}
                    data-plasmic-override={overrides.verticalForNameInput6}
                    className={classNames(
                      projectcss.all,
                      sty.verticalForNameInput6,
                      "shimmer"
                    )}
                  />

                  <div
                    data-plasmic-name={"verticalForNameInput7"}
                    data-plasmic-override={overrides.verticalForNameInput7}
                    className={classNames(
                      projectcss.all,
                      sty.verticalForNameInput7,
                      "shimmer"
                    )}
                  />
                </div>
                <div
                  data-plasmic-name={"verticalForNameInput8"}
                  data-plasmic-override={overrides.verticalForNameInput8}
                  className={classNames(
                    projectcss.all,
                    sty.verticalForNameInput8
                  )}
                >
                  <div
                    data-plasmic-name={"verticalForNameInput9"}
                    data-plasmic-override={overrides.verticalForNameInput9}
                    className={classNames(
                      projectcss.all,
                      sty.verticalForNameInput9,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__rORo)}
                  >
                    <div
                      data-plasmic-name={"verticalForNameInput10"}
                      data-plasmic-override={overrides.verticalForNameInput10}
                      className={classNames(
                        projectcss.all,
                        sty.verticalForNameInput10,
                        "shimmer"
                      )}
                    />

                    <div
                      data-plasmic-name={"verticalForNameInput11"}
                      data-plasmic-override={overrides.verticalForNameInput11}
                      className={classNames(
                        projectcss.all,
                        sty.verticalForNameInput11,
                        "shimmer"
                      )}
                    />
                  </div>
                </div>
                <div
                  data-plasmic-name={"verticalForNameInput12"}
                  data-plasmic-override={overrides.verticalForNameInput12}
                  className={classNames(
                    projectcss.all,
                    sty.verticalForNameInput12
                  )}
                >
                  <div
                    data-plasmic-name={"verticalForNameInput13"}
                    data-plasmic-override={overrides.verticalForNameInput13}
                    className={classNames(
                      projectcss.all,
                      sty.verticalForNameInput13,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__vywJf)}
                  >
                    <div
                      data-plasmic-name={"verticalForNameInput14"}
                      data-plasmic-override={overrides.verticalForNameInput14}
                      className={classNames(
                        projectcss.all,
                        sty.verticalForNameInput14,
                        "shimmer"
                      )}
                    />

                    <div
                      data-plasmic-name={"verticalForNameInput15"}
                      data-plasmic-override={overrides.verticalForNameInput15}
                      className={classNames(
                        projectcss.all,
                        sty.verticalForNameInput15,
                        "shimmer"
                      )}
                    />
                  </div>
                </div>
                <div
                  data-plasmic-name={"verticalForNameInput16"}
                  data-plasmic-override={overrides.verticalForNameInput16}
                  className={classNames(
                    projectcss.all,
                    sty.verticalForNameInput16
                  )}
                >
                  <div
                    data-plasmic-name={"verticalForNameInput17"}
                    data-plasmic-override={overrides.verticalForNameInput17}
                    className={classNames(
                      projectcss.all,
                      sty.verticalForNameInput17,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__sK8Op)}
                  >
                    <div
                      data-plasmic-name={"verticalForNameInput18"}
                      data-plasmic-override={overrides.verticalForNameInput18}
                      className={classNames(
                        projectcss.all,
                        sty.verticalForNameInput18,
                        "shimmer"
                      )}
                    />

                    <div
                      data-plasmic-name={"verticalForNameInput19"}
                      data-plasmic-override={overrides.verticalForNameInput19}
                      className={classNames(
                        projectcss.all,
                        sty.verticalForNameInput19,
                        "shimmer"
                      )}
                    />
                  </div>
                </div>
                <div
                  data-plasmic-name={"verticalForNameInput20"}
                  data-plasmic-override={overrides.verticalForNameInput20}
                  className={classNames(
                    projectcss.all,
                    sty.verticalForNameInput20
                  )}
                >
                  <div
                    data-plasmic-name={"verticalForNameInput21"}
                    data-plasmic-override={overrides.verticalForNameInput21}
                    className={classNames(
                      projectcss.all,
                      sty.verticalForNameInput21,
                      "shimmer"
                    )}
                  />

                  <div
                    data-plasmic-name={"verticalForNameInput22"}
                    data-plasmic-override={overrides.verticalForNameInput22}
                    className={classNames(
                      projectcss.all,
                      sty.verticalForNameInput22,
                      "shimmer"
                    )}
                  />
                </div>
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getInfo", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getInfo", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getInfo", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={(() => {
              try {
                return {
                  authorization: $state.token,
                  area: "editProfile"
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {
                    authorization:
                      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjkyYWRlNjBlLWYyZTEtNDIwNi05NzNiLTIwNDYzYjhlM2FmNCIsImlhdCI6MTczODgzNzg3Nn0.iaZlGzwVEN5P0kQMgdTy2sNsBIbJai8WAG1sSDhqpL4BUw&userId=u184ee975e9c-19dd-42fc-b7d7-8822f621b4f87"
                  };
                }
                throw e;
              }
            })()}
            shouldFetch={true}
            url={"https://n8n.staas.ir/webhook/calendar/rest/user/profile/edit"}
          >
            <div
              data-plasmic-name={"verticalIdentity"}
              data-plasmic-override={overrides.verticalIdentity}
              className={classNames(projectcss.all, sty.verticalIdentity)}
            >
              <div
                data-plasmic-name={"verticalForNameInput"}
                data-plasmic-override={overrides.verticalForNameInput}
                className={classNames(projectcss.all, sty.verticalForNameInput)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z2Vt
                  )}
                >
                  {"\u0646\u0627\u0645"}
                </div>
                <TextInput
                  data-plasmic-name={"nameInput"}
                  data-plasmic-override={overrides.nameInput}
                  antdInput2={(() => {
                    const child$Props = {
                      bordered: false,
                      className: classNames("__wab_instance", sty.antdInput3),
                      id: "inputMobile",
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["antdInput3", "value"],
                          Input_Helpers
                        ).apply(null, eventArgs);

                        (async event => {
                          const $steps = {};

                          $steps["updateName"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["name"]
                                  },
                                  operation: 0,
                                  value: $state.antdInput3.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateName"] != null &&
                            typeof $steps["updateName"] === "object" &&
                            typeof $steps["updateName"].then === "function"
                          ) {
                            $steps["updateName"] = await $steps["updateName"];
                          }
                        }).apply(null, eventArgs);
                      },
                      placeholder:
                        "\u0646\u0627\u0645 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f",
                      size: "large",
                      value: generateStateValueProp($state, [
                        "antdInput3",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "antdInput3.value"
                        }
                      ],
                      [],
                      Input_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <Input
                        data-plasmic-name={"antdInput3"}
                        data-plasmic-override={overrides.antdInput3}
                        {...child$Props}
                      />
                    );
                  })()}
                  className={classNames("__wab_instance", sty.nameInput)}
                  endIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__xIaVv)}
                      role={"img"}
                    />
                  }
                  error={(() => {
                    try {
                      return $state.empty.name == false;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  errorText={
                    "\u067e\u0631 \u06a9\u0631\u062f\u0646  \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0636\u0631\u0648\u0631\u06cc \u0627\u0633\u062a"
                  }
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["nameInput", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }

                    (async event => {
                      const $steps = {};

                      $steps["updateName"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["name"]
                              },
                              operation: 0,
                              value: $state.nameInput.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateName"] != null &&
                        typeof $steps["updateName"] === "object" &&
                        typeof $steps["updateName"].then === "function"
                      ) {
                        $steps["updateName"] = await $steps["updateName"];
                      }
                    }).apply(null, eventArgs);
                  }}
                  showEndIcon={true}
                  startIcon={
                    <SearchSvgIcon
                      className={classNames(projectcss.all, sty.svg__k5G2)}
                      role={"img"}
                    />
                  }
                  type={"tel"}
                  value={
                    generateStateValueProp($state, ["nameInput", "value"]) ?? ""
                  }
                />
              </div>
              <div
                data-plasmic-name={"verticalForDateInput"}
                data-plasmic-override={overrides.verticalForDateInput}
                className={classNames(projectcss.all, sty.verticalForDateInput)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__af68V
                  )}
                >
                  {"\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f "}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__jK8)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDialogOpendialog"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialogDateOfBrith", "opendialog"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogOpendialog"] != null &&
                      typeof $steps["updateDialogOpendialog"] === "object" &&
                      typeof $steps["updateDialogOpendialog"].then ===
                        "function"
                    ) {
                      $steps["updateDialogOpendialog"] = await $steps[
                        "updateDialogOpendialog"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oDt3
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            return `${$state.dateOfBrithFa.jy}/${$state.dateOfBrithFa.jm}/${$state.dateOfBrithFa.jd}`;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <CalenderOutlinedIcSvgIcon
                    className={classNames(projectcss.all, sty.svg__gvofr)}
                    role={"img"}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"verticalForSelection"}
                data-plasmic-override={overrides.verticalForSelection}
                className={classNames(projectcss.all, sty.verticalForSelection)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cGqYj
                  )}
                >
                  {"\u0634\u063a\u0644"}
                </div>
                <div
                  data-plasmic-name={"horizontalForButton"}
                  data-plasmic-override={overrides.horizontalForButton}
                  className={classNames(
                    projectcss.all,
                    sty.horizontalForButton
                  )}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <SelectionChoise
                        className={classNames(
                          "__wab_instance",
                          sty.selectionChoise__f1GNw
                        )}
                        key={currentIndex}
                      />
                    );
                  })}
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [
                          { label: "شاغلم", value: "Employed" },
                          { label: "شاغل نیستم", value: "unEmployed" }
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <SelectionChoise
                        className={classNames(
                          "__wab_instance",
                          sty.selectionChoise__ob42H
                        )}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateVariableForJob"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["variableForJob"]
                                  },
                                  operation: 0,
                                  value: currentItem.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateVariableForJob"] != null &&
                            typeof $steps["updateVariableForJob"] ===
                              "object" &&
                            typeof $steps["updateVariableForJob"].then ===
                              "function"
                          ) {
                            $steps["updateVariableForJob"] = await $steps[
                              "updateVariableForJob"
                            ];
                          }
                        }}
                        select={(() => {
                          try {
                            return $state.variableForJob == currentItem.value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        selected={false}
                        text={(() => {
                          try {
                            return currentItem.label;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__f5Ovx
                  )}
                >
                  {"\u0648\u0636\u0639\u06cc\u062a \u062a\u0627\u0647\u0644"}
                </div>
                <div
                  data-plasmic-name={"horizontalForButton2"}
                  data-plasmic-override={overrides.horizontalForButton2}
                  className={classNames(
                    projectcss.all,
                    sty.horizontalForButton2
                  )}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [
                          { label: "متاهل", value: "Married" },
                          { label: " مجرد", value: "Single" }
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <SelectionChoise
                        className={classNames(
                          "__wab_instance",
                          sty.selectionChoise__sSjP
                        )}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateVariableForMarrideStutuse"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["variableForMarrideStutuse"]
                                  },
                                  operation: 0,
                                  value: currentItem.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateVariableForMarrideStutuse"] != null &&
                            typeof $steps["updateVariableForMarrideStutuse"] ===
                              "object" &&
                            typeof $steps["updateVariableForMarrideStutuse"]
                              .then === "function"
                          ) {
                            $steps["updateVariableForMarrideStutuse"] =
                              await $steps["updateVariableForMarrideStutuse"];
                          }
                        }}
                        select={(() => {
                          try {
                            return (
                              $state.variableForMarrideStutuse ==
                              currentItem.value
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        text={(() => {
                          try {
                            return currentItem.label;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zlDnL
                  )}
                >
                  {"\u062a\u062d\u0635\u06cc\u0644\u0627\u062a "}
                </div>
                <div
                  data-plasmic-name={"horizontalForButton3"}
                  data-plasmic-override={overrides.horizontalForButton3}
                  className={classNames(
                    projectcss.all,
                    sty.horizontalForButton3
                  )}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [
                          { label: "فارغ تحصیل", value: " Graduated" },
                          { label: " درحال تحصیل", value: "student" }
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <SelectionChoise
                        className={classNames(
                          "__wab_instance",
                          sty.selectionChoise___5XjO
                        )}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateVariableForGraduateAndStudying"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "variableForGraduateAndStudying"
                                    ]
                                  },
                                  operation: 0,
                                  value: currentItem.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateVariableForGraduateAndStudying"] !=
                              null &&
                            typeof $steps[
                              "updateVariableForGraduateAndStudying"
                            ] === "object" &&
                            typeof $steps[
                              "updateVariableForGraduateAndStudying"
                            ].then === "function"
                          ) {
                            $steps["updateVariableForGraduateAndStudying"] =
                              await $steps[
                                "updateVariableForGraduateAndStudying"
                              ];
                          }
                        }}
                        select={(() => {
                          try {
                            return (
                              $state.variableForGraduateAndStudying ==
                              currentItem.value
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        text={(() => {
                          try {
                            return currentItem.label;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </div>
              </div>
              <div
                data-plasmic-name={"verticalForProbabilityOfGettingPregnant"}
                data-plasmic-override={
                  overrides.verticalForProbabilityOfGettingPregnant
                }
                className={classNames(
                  projectcss.all,
                  sty.verticalForProbabilityOfGettingPregnant
                )}
              >
                <div className={classNames(projectcss.all, sty.freeBox__dYr8N)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nFiv)}
                  >
                    <Icon67Icon
                      className={classNames(projectcss.all, sty.svg__lW4M)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x4Ezn
                      )}
                    >
                      {
                        "\u0646\u0645\u0627\u06cc\u0634 \u0627\u062d\u062a\u0645\u0627\u0644 \u0628\u0627\u0631\u062f\u0627\u0631 \u0634\u062f\u0646 \u062f\u0631  \u0647\u0631 \u0631\u0648\u0632 "
                      }
                    </div>
                    <Switchbest
                      data-plasmic-name={"switchbest"}
                      data-plasmic-override={overrides.switchbest}
                      children={null}
                      className={classNames("__wab_instance", sty.switchbest)}
                      isChecked={
                        generateStateValueProp($state, [
                          "switchbest",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "switchbest",
                            "isChecked"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async isChecked => {
                          const $steps = {};

                          $steps["updateVariableSwichForProbility"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["variableSwichForProbility"]
                                  },
                                  operation: 0,
                                  value: $state.switchbest.isChecked
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateVariableSwichForProbility"] != null &&
                            typeof $steps["updateVariableSwichForProbility"] ===
                              "object" &&
                            typeof $steps["updateVariableSwichForProbility"]
                              .then === "function"
                          ) {
                            $steps["updateVariableSwichForProbility"] =
                              await $steps["updateVariableSwichForProbility"];
                          }
                        }).apply(null, eventArgs);
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kqKzh)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Q61M
                      )}
                    >
                      {
                        '\u0627\u06cc\u0646 \u062f\u0631\u0635\u062f \u062f\u0631 \u0637\u0631\u0627\u062d\u06cc  \u06a9\u0627\u0631\u0628\u0631\u062f\u06cc \u0628\u062e\u0634 \u0642\u0627\u0639\u062f\u06af\u06cc \u062f\u0631 \u0642\u0633\u0645\u062a "\u062f\u0648\u0631\u0647 \u062c\u0627\u0631\u06cc \u062f\u0631\u06cc\u06a9 \u0646\u06af\u0627\u0647"\u0646\u0645\u0627\u06cc\u0634 \u062f\u0627\u062f\u0647 \u0645\u06cc\u0634\u0648\u062f'
                      }
                    </div>
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"verticalForMenstrualCycle"}
                data-plasmic-override={overrides.verticalForMenstrualCycle}
                className={classNames(
                  projectcss.all,
                  sty.verticalForMenstrualCycle
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ka4AS
                  )}
                >
                  {
                    "\u0686\u0631\u062e\u0647 \u0642\u0627\u0639\u062f\u06af\u06cc"
                  }
                </div>
                <div
                  data-plasmic-name={"numberOfDaysOfBleeding2"}
                  data-plasmic-override={overrides.numberOfDaysOfBleeding2}
                  className={classNames(
                    projectcss.all,
                    sty.numberOfDaysOfBleeding2
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k37BQ
                    )}
                  >
                    {
                      "\u062a\u0639\u062f\u0627\u062f \u0631\u0648\u0632 \u062e\u0648\u0646\u0631\u06cc\u0632\u06cc"
                    }
                  </div>
                  <div
                    data-plasmic-name={"numberOfDaysOfBleeding3"}
                    data-plasmic-override={overrides.numberOfDaysOfBleeding3}
                    className={classNames(
                      projectcss.all,
                      sty.numberOfDaysOfBleeding3
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateNumberOfDaysOfBleedingOpendialog"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "dialogNumberOfDaysOfBleeding",
                                  "opendialog"
                                ]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNumberOfDaysOfBleedingOpendialog"] !=
                          null &&
                        typeof $steps[
                          "updateNumberOfDaysOfBleedingOpendialog"
                        ] === "object" &&
                        typeof $steps["updateNumberOfDaysOfBleedingOpendialog"]
                          .then === "function"
                      ) {
                        $steps["updateNumberOfDaysOfBleedingOpendialog"] =
                          await $steps[
                            "updateNumberOfDaysOfBleedingOpendialog"
                          ];
                      }
                    }}
                  >
                    <TextInput
                      data-plasmic-name={"nameInput2"}
                      data-plasmic-override={overrides.nameInput2}
                      antdInput2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__liNza
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.numberOfDaysOfBleedingPicker;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      }
                      className={classNames("__wab_instance", sty.nameInput2)}
                      endIcon={
                        <CheckSvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___2Yc3Q
                          )}
                          role={"img"}
                        />
                      }
                      error={(() => {
                        try {
                          return $state.empty.lenght == false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      errorText={
                        "\u067e\u0631 \u06a9\u0631\u062f\u0646  \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0636\u0631\u0648\u0631\u06cc \u0627\u0633\u062a"
                      }
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "nameInput2",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async event => {
                          const $steps = {};

                          $steps["updateName"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["name"]
                                  },
                                  operation: 0,
                                  value: $state.nameInput2.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateName"] != null &&
                            typeof $steps["updateName"] === "object" &&
                            typeof $steps["updateName"].then === "function"
                          ) {
                            $steps["updateName"] = await $steps["updateName"];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={"6 \u0631\u0648\u0632"}
                      showEndIcon={true}
                      startIcon={
                        <SearchSvgIcon
                          className={classNames(projectcss.all, sty.svg__bfkIg)}
                          role={"img"}
                        />
                      }
                      type={"tel"}
                      value={
                        generateStateValueProp($state, [
                          "nameInput2",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rribl)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gmUae
                    )}
                  >
                    {
                      "\u0637\u0648\u0644 \u0633\u06cc\u06a9\u0644 \u067e\u0631\u06cc\u0648\u062f"
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9PFte)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDialogForPeriodCycleLengthOpendialog"] =
                        true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: [
                                    "dialogForPeriodCycleLength",
                                    "opendialog"
                                  ]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateDialogForPeriodCycleLengthOpendialog"] !=
                          null &&
                        typeof $steps[
                          "updateDialogForPeriodCycleLengthOpendialog"
                        ] === "object" &&
                        typeof $steps[
                          "updateDialogForPeriodCycleLengthOpendialog"
                        ].then === "function"
                      ) {
                        $steps["updateDialogForPeriodCycleLengthOpendialog"] =
                          await $steps[
                            "updateDialogForPeriodCycleLengthOpendialog"
                          ];
                      }
                    }}
                  >
                    <TextInput
                      data-plasmic-name={"nameInput3"}
                      data-plasmic-override={overrides.nameInput3}
                      antdInput2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qfJn9
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.periodCycleLength;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      }
                      className={classNames("__wab_instance", sty.nameInput3)}
                      endIcon={
                        <CheckSvgIcon
                          className={classNames(projectcss.all, sty.svg__hFpF)}
                          role={"img"}
                        />
                      }
                      error={(() => {
                        try {
                          return $state.empty.cyclel == false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      errorText={
                        "\u067e\u0631 \u06a9\u0631\u062f\u0646  \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0636\u0631\u0648\u0631\u06cc \u0627\u0633\u062a"
                      }
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "nameInput3",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async event => {
                          const $steps = {};

                          $steps["updateName"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["name"]
                                  },
                                  operation: 0,
                                  value: $state.nameInput3.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateName"] != null &&
                            typeof $steps["updateName"] === "object" &&
                            typeof $steps["updateName"].then === "function"
                          ) {
                            $steps["updateName"] = await $steps["updateName"];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={"17 \u0631\u0648\u0631"}
                      showEndIcon={true}
                      startIcon={
                        <SearchSvgIcon
                          className={classNames(projectcss.all, sty.svg__zkzMm)}
                          role={"img"}
                        />
                      }
                      type={"tel"}
                      value={
                        generateStateValueProp($state, [
                          "nameInput3",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___03Fx9
                    )}
                  >
                    {
                      "\u0641\u0627\u0635\u0644\u0647 \u0627\u0648\u0644\u06cc\u0646 \u0631\u0648\u0632  \u0642\u0627\u0639\u062f\u06af\u06cc \u062a\u0627 \u0634\u0631\u0648\u0639 \u0642\u0627\u062f\u06af\u06cc \u0628\u0639\u062f\u06cc\u062a \u0627\u0633\u062a.(\u062d\u0648\u0627\u0633\u062a \u0628\u0627\u0634\u0647 \u062a\u0639\u062f\u0627\u062f \u0631\u0648\u0632 \u067e\u0631\u06cc\u0648\u062f\u06cc\u062a (\u062e\u0648\u0646\u0631\u06cc\u0632\u06cc)  \u0631\u0648 \u0647\u0645  \u062c\u0633\u0627\u0628 \u06a9\u0646\u06cc."
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__xSZgy)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zr4Gx
                    )}
                  >
                    {
                      "\u062a\u0627\u0631\u06cc\u062e \u0627\u0648\u0644\u06cc\u0646 \u0631\u0648\u0632 \u0627\u0632 \u0627\u062e\u0631\u06cc\u0646 \u0642\u0627\u0639\u062f\u06af\u06cc \u0634\u0645\u0627"
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xNeYo)}
                    onClick={async event => {
                      const $steps = {};

                      $steps[
                        "updateDialogForTheDateOfTheFirstDayOfYourLastPeriodOpendialog"
                      ] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "dialogForTheDateOfTheFirstDayOfYourLastPeriod",
                                  "opendialog"
                                ]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps[
                          "updateDialogForTheDateOfTheFirstDayOfYourLastPeriodOpendialog"
                        ] != null &&
                        typeof $steps[
                          "updateDialogForTheDateOfTheFirstDayOfYourLastPeriodOpendialog"
                        ] === "object" &&
                        typeof $steps[
                          "updateDialogForTheDateOfTheFirstDayOfYourLastPeriodOpendialog"
                        ].then === "function"
                      ) {
                        $steps[
                          "updateDialogForTheDateOfTheFirstDayOfYourLastPeriodOpendialog"
                        ] = await $steps[
                          "updateDialogForTheDateOfTheFirstDayOfYourLastPeriodOpendialog"
                        ];
                      }
                    }}
                  >
                    <TextInput
                      data-plasmic-name={"nameInput4"}
                      data-plasmic-override={overrides.nameInput4}
                      antdInput2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cL78D
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.variableForTheDateOfTheFirstDayOfYourLastPeriod.find(
                                  a => a.value === $state.variableForLastPeriod
                                ).label;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      }
                      className={classNames("__wab_instance", sty.nameInput4)}
                      endIcon={
                        <CheckSvgIcon
                          className={classNames(projectcss.all, sty.svg___3RnG)}
                          role={"img"}
                        />
                      }
                      error={(() => {
                        try {
                          return $state.empty.lasttime == false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      errorText={
                        "\u067e\u0631 \u06a9\u0631\u062f\u0646  \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0636\u0631\u0648\u0631\u06cc \u0627\u0633\u062a"
                      }
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "nameInput4",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async event => {
                          const $steps = {};

                          $steps["updateName"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["name"]
                                  },
                                  operation: 0,
                                  value: $state.nameInput4.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateName"] != null &&
                            typeof $steps["updateName"] === "object" &&
                            typeof $steps["updateName"].then === "function"
                          ) {
                            $steps["updateName"] = await $steps["updateName"];
                          }
                        }).apply(null, eventArgs);
                      }}
                      showEndIcon={true}
                      startIcon={
                        <SearchSvgIcon
                          className={classNames(projectcss.all, sty.svg__pxRsM)}
                          role={"img"}
                        />
                      }
                      type={"tel"}
                      value={
                        generateStateValueProp($state, [
                          "nameInput4",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"heightAndWeight"}
                data-plasmic-override={overrides.heightAndWeight}
                className={classNames(projectcss.all, sty.heightAndWeight)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__kzzDw)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oBGcV
                    )}
                  >
                    {"\u0642\u062f"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gzQ2U)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDialogForHeightOpendialog"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dialogForHeight", "opendialog"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDialogForHeightOpendialog"] != null &&
                        typeof $steps["updateDialogForHeightOpendialog"] ===
                          "object" &&
                        typeof $steps["updateDialogForHeightOpendialog"]
                          .then === "function"
                      ) {
                        $steps["updateDialogForHeightOpendialog"] =
                          await $steps["updateDialogForHeightOpendialog"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m5Ic
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.height;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <RulerIcSvgIcon
                      className={classNames(projectcss.all, sty.svg__y2YdS)}
                      role={"img"}
                    />
                  </div>
                </div>
                <div
                  data-plasmic-name={"weight"}
                  data-plasmic-override={overrides.weight}
                  className={classNames(projectcss.all, sty.weight)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3YH8O
                    )}
                  >
                    {"\u0648\u0632\u0646"}
                  </div>
                  <div
                    data-plasmic-name={"weight2"}
                    data-plasmic-override={overrides.weight2}
                    className={classNames(projectcss.all, sty.weight2)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDialogForWeightOpendialog"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dialogForWeight", "opendialog"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDialogForWeightOpendialog"] != null &&
                        typeof $steps["updateDialogForWeightOpendialog"] ===
                          "object" &&
                        typeof $steps["updateDialogForWeightOpendialog"]
                          .then === "function"
                      ) {
                        $steps["updateDialogForWeightOpendialog"] =
                          await $steps["updateDialogForWeightOpendialog"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aGUm
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.weight3;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <WeightmeterIcSvgIcon
                      className={classNames(projectcss.all, sty.svg__bjFcY)}
                      role={"img"}
                    />
                  </div>
                </div>
              </div>
              <section
                className={classNames(projectcss.all, sty.section__kGaIk)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___4Pyp3)}
                >
                  <Button
                    data-plasmic-name={"button19"}
                    data-plasmic-override={overrides.button19}
                    className={classNames("__wab_instance", sty.button19)}
                    color={generateStateValueProp($state, [
                      "button19",
                      "color"
                    ])}
                    isDisabled={(() => {
                      try {
                        return $state.btnLoading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    load={generateStateValueProp($state, ["button19", "load"])}
                    loading={generateStateValueProp($state, [
                      "button19",
                      "loading"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  if ($state.name === "") {
                                    $state.empty.name = false;
                                  } else {
                                    $state.empty.name = true;
                                  }
                                  if (
                                    $state.numberOfDaysOfBleedingPicker === ""
                                  ) {
                                    $state.empty.lenght = false;
                                  } else {
                                    $state.empty.lenght = true;
                                  }
                                  if ($state.periodCycleLength === "") {
                                    $state.empty.cyclel = false;
                                  } else {
                                    $state.empty.cyclel = true;
                                  }
                                  if ($state.variableForLastPeriod === "") {
                                    return ($state.empty.lasttime = false);
                                  } else {
                                    return ($state.empty.lasttime = true);
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["updateBtnLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["btnLoading"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateBtnLoading"] != null &&
                        typeof $steps["updateBtnLoading"] === "object" &&
                        typeof $steps["updateBtnLoading"].then === "function"
                      ) {
                        $steps["updateBtnLoading"] = await $steps[
                          "updateBtnLoading"
                        ];
                      }

                      $steps["updateNameInputValue2"] =
                        $state.empty.name == true &&
                        $state.empty.lenght == true &&
                        $state.empty.cyclel == true &&
                        $state.empty.lasttime == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.staas.ir/webhook/calendar/rest/user/profile/edit",
                                  undefined,
                                  (() => {
                                    try {
                                      return (() => {
                                        var edit = {
                                          authorization:
                                            $state.token || undefined,
                                          name: $state.name || undefined,
                                          birthDate: $state.dateOfBrith.gy
                                            ? `${
                                                $state.dateOfBrith.gy
                                              }-${$state.dateOfBrith.gm
                                                .toString()
                                                .padStart(
                                                  2,
                                                  "0"
                                                )}-${$state.dateOfBrith.gd
                                                .toString()
                                                .padStart(2, "0")}`
                                            : undefined,
                                          height: $state.height || undefined,
                                          weight: $state.weight3 || undefined,
                                          cycle:
                                            $state.periodCycleLength ||
                                            undefined,
                                          length:
                                            $state.numberOfDaysOfBleedingPicker ||
                                            undefined,
                                          last_time:
                                            $state.variableForLastPeriod
                                              ? $state.variableForTheDateOfTheFirstDayOfYourLastPeriod.find(
                                                  a =>
                                                    a.value ===
                                                    $state.variableForLastPeriod
                                                ).date
                                              : undefined,
                                          job:
                                            $state.variableForJob || undefined,
                                          education:
                                            $state.variableForGraduateAndStudying ||
                                            undefined,
                                          married:
                                            $state.variableForMarrideStutuse ===
                                            "Married"
                                              ? true
                                              : $state.variableForMarrideStutuse ===
                                                "Single"
                                              ? false
                                              : undefined
                                        };
                                        var edit = Object.fromEntries(
                                          Object.entries(edit).filter(
                                            ([_, v]) => v !== undefined
                                          )
                                        );
                                        return edit;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["updateNameInputValue2"] != null &&
                        typeof $steps["updateNameInputValue2"] === "object" &&
                        typeof $steps["updateNameInputValue2"].then ===
                          "function"
                      ) {
                        $steps["updateNameInputValue2"] = await $steps[
                          "updateNameInputValue2"
                        ];
                      }

                      $steps["invokeGlobalAction"] =
                        $steps.updateNameInputValue2?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateBtnLoading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["btnLoading"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateBtnLoading2"] != null &&
                        typeof $steps["updateBtnLoading2"] === "object" &&
                        typeof $steps["updateBtnLoading2"].then === "function"
                      ) {
                        $steps["updateBtnLoading2"] = await $steps[
                          "updateBtnLoading2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button19",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button19", "load"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button19",
                          "loading"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h50Wb
                      )}
                    >
                      {"\u0630\u062e\u06cc\u0631\u0647"}
                    </div>
                  </Button>
                </div>
              </section>
            </div>
          </ApiRequest>
          <section className={classNames(projectcss.all, sty.section__bl29K)}>
            <HeaderLiom
              data-plasmic-name={"headerLiom"}
              data-plasmic-override={overrides.headerLiom}
              className={classNames("__wab_instance", sty.headerLiom)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__oE1R)}>
                <XIcon
                  className={classNames(projectcss.all, sty.svg__oTw7R)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return window.history.back();
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__j6K8O
                  )}
                >
                  {
                    "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                  }
                </div>
              </div>
            </HeaderLiom>
          </section>
          <Dialog
            data-plasmic-name={"dialogNumberOfDaysOfBleeding"}
            data-plasmic-override={overrides.dialogNumberOfDaysOfBleeding}
            className={classNames(
              "__wab_instance",
              sty.dialogNumberOfDaysOfBleeding
            )}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialogNumberOfDaysOfBleeding",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialogNumberOfDaysOfBleeding",
              "opendialog"
            ])}
          >
            <div className={classNames(projectcss.all, sty.freeBox__qzwXv)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uVltz
                )}
              >
                {
                  "\u062a\u0639\u062f\u0627\u062f \u0631\u0648\u0632 \u0647\u0627\u06cc \u062e\u0648\u0646\u0631\u06cc\u0632\u06cc"
                }
              </div>
              <Pickers
                data-plasmic-name={"pickersForNumberOfDaysOfBleeding"}
                data-plasmic-override={
                  overrides.pickersForNumberOfDaysOfBleeding
                }
                className={classNames(
                  "__wab_instance",
                  sty.pickersForNumberOfDaysOfBleeding
                )}
                data={(() => {
                  try {
                    return (() => {
                      return Array.from({ length: 9 }, (_, i) => ({
                        label: `${i + 2} `,
                        value: i + 2
                      }));
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                initialValue={generateStateValueProp($state, [
                  "pickersForNumberOfDaysOfBleeding",
                  "value"
                ])}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "pickersForNumberOfDaysOfBleeding",
                    "value"
                  ]).apply(null, eventArgs);
                }}
              />

              <Button
                data-plasmic-name={"button6"}
                data-plasmic-override={overrides.button6}
                className={classNames("__wab_instance", sty.button6)}
                color={generateStateValueProp($state, ["button6", "color"])}
                load={generateStateValueProp($state, ["button6", "load"])}
                loading={generateStateValueProp($state, ["button6", "loading"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateNumberOfDaysOfBleedingPicker"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["numberOfDaysOfBleedingPicker"]
                          },
                          operation: 0,
                          value: $state.pickersForNumberOfDaysOfBleeding.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateNumberOfDaysOfBleedingPicker"] != null &&
                    typeof $steps["updateNumberOfDaysOfBleedingPicker"] ===
                      "object" &&
                    typeof $steps["updateNumberOfDaysOfBleedingPicker"].then ===
                      "function"
                  ) {
                    $steps["updateNumberOfDaysOfBleedingPicker"] = await $steps[
                      "updateNumberOfDaysOfBleedingPicker"
                    ];
                  }

                  $steps["updateNumberOfDaysOfBleedingOpendialog"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: [
                              "dialogNumberOfDaysOfBleeding",
                              "opendialog"
                            ]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateNumberOfDaysOfBleedingOpendialog"] != null &&
                    typeof $steps["updateNumberOfDaysOfBleedingOpendialog"] ===
                      "object" &&
                    typeof $steps["updateNumberOfDaysOfBleedingOpendialog"]
                      .then === "function"
                  ) {
                    $steps["updateNumberOfDaysOfBleedingOpendialog"] =
                      await $steps["updateNumberOfDaysOfBleedingOpendialog"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button6", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button6", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadingChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button6", "loading"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yMQf
                  )}
                >
                  {"\u0627\u0646\u062a\u062e\u0627\u0628"}
                </div>
              </Button>
            </div>
          </Dialog>
          <Dialog
            data-plasmic-name={"dialogDateOfBrith"}
            data-plasmic-override={overrides.dialogDateOfBrith}
            className={classNames("__wab_instance", sty.dialogDateOfBrith)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialogDateOfBrith",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialogDateOfBrith",
              "opendialog"
            ])}
          >
            <div className={classNames(projectcss.all, sty.freeBox__qEmx0)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qz8Mo
                )}
              >
                {"\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__arbg7)}>
                <DatePickers
                  data-plasmic-name={"datePickersBirthDay"}
                  data-plasmic-override={overrides.datePickersBirthDay}
                  SelectedDay={(() => {
                    try {
                      return $state.dateOfBrithFa.jy || 10;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 10;
                      }
                      throw e;
                    }
                  })()}
                  SelectedMonth={(() => {
                    try {
                      return $state.dateOfBrithFa.jm || 10;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 10;
                      }
                      throw e;
                    }
                  })()}
                  SelectedYear={(() => {
                    try {
                      return $state.dateOfBrithFa.jy || 1379;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 1379;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames(
                    "__wab_instance",
                    sty.datePickersBirthDay
                  )}
                  customYears={[]}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "datePickersBirthDay",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  selectedValues={generateStateValueProp($state, [
                    "datePickersBirthDay",
                    "value"
                  ])}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___9UVl)}>
                <Button
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames("__wab_instance", sty.button3)}
                  color={generateStateValueProp($state, ["button3", "color"])}
                  load={generateStateValueProp($state, ["button3", "load"])}
                  loading={generateStateValueProp($state, [
                    "button3",
                    "loading"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDatePickersValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dateOfBrith"]
                            },
                            operation: 0,
                            value: (() => {
                              var hbd = window.jalaali.toGregorian(
                                $state.datePickersBirthDay.value.year,
                                $state.datePickersBirthDay.value.month,
                                $state.datePickersBirthDay.value.day
                              );
                              return hbd;
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDatePickersValue"] != null &&
                      typeof $steps["updateDatePickersValue"] === "object" &&
                      typeof $steps["updateDatePickersValue"].then ===
                        "function"
                    ) {
                      $steps["updateDatePickersValue"] = await $steps[
                        "updateDatePickersValue"
                      ];
                    }

                    $steps["updateDialogDateOfBrithOpendialog"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialogDateOfBrith", "opendialog"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogDateOfBrithOpendialog"] != null &&
                      typeof $steps["updateDialogDateOfBrithOpendialog"] ===
                        "object" &&
                      typeof $steps["updateDialogDateOfBrithOpendialog"]
                        .then === "function"
                    ) {
                      $steps["updateDialogDateOfBrithOpendialog"] =
                        await $steps["updateDialogDateOfBrithOpendialog"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "loading"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eeeB
                    )}
                  >
                    {"\u0627\u0646\u062a\u062e\u0627\u0628"}
                  </div>
                </Button>
                <div
                  className={classNames(projectcss.all, sty.freeBox__iImgd)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDialogDateOfBrithOpendialog"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialogDateOfBrith", "opendialog"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogDateOfBrithOpendialog"] != null &&
                      typeof $steps["updateDialogDateOfBrithOpendialog"] ===
                        "object" &&
                      typeof $steps["updateDialogDateOfBrithOpendialog"]
                        .then === "function"
                    ) {
                      $steps["updateDialogDateOfBrithOpendialog"] =
                        await $steps["updateDialogDateOfBrithOpendialog"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ry5Yo
                    )}
                  >
                    {"\u0628\u0631\u06af\u0634\u062a"}
                  </div>
                </div>
              </div>
            </div>
          </Dialog>
          <Dialog
            data-plasmic-name={"dialogForPeriodCycleLength"}
            data-plasmic-override={overrides.dialogForPeriodCycleLength}
            className={classNames(
              "__wab_instance",
              sty.dialogForPeriodCycleLength
            )}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialogForPeriodCycleLength",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialogForPeriodCycleLength",
              "opendialog"
            ])}
          >
            <div className={classNames(projectcss.all, sty.freeBox__hjxOx)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___31BWv
                )}
              >
                {
                  "\u0641\u0627\u0635\u0644\u0647 \u0627\u0648\u0644\u06cc\u0646 \u0631\u0648\u0632  \u0642\u0627\u0639\u062f\u06af\u06cc \u062a\u0627 \u0634\u0631\u0648\u0639 \u0642\u0627\u062f\u06af\u06cc \u0628\u0639\u062f\u06cc\u062a \u0627\u0633\u062a.(\u062d\u0648\u0627\u0633\u062a \u0628\u0627\u0634\u0647 \u062a\u0639\u062f\u0627\u062f \u0631\u0648\u0632 \u067e\u0631\u06cc\u0648\u062f\u06cc\u062a (\u062e\u0648\u0646\u0631\u06cc\u0632\u06cc)  \u0631\u0648 \u0647\u0645  \u062c\u0633\u0627\u0628 \u06a9\u0646\u06cc."
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__y9NRj)}>
                <Pickers
                  data-plasmic-name={"pickersForPeriodCycleLength"}
                  data-plasmic-override={overrides.pickersForPeriodCycleLength}
                  className={classNames(
                    "__wab_instance",
                    sty.pickersForPeriodCycleLength
                  )}
                  data={(() => {
                    try {
                      return Array.from({ length: 60 }, (_, i) => ({
                        label: `${i + 17} `,
                        value: i + 17
                      }));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  initialValue={generateStateValueProp($state, [
                    "pickersForPeriodCycleLength",
                    "value"
                  ])}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "pickersForPeriodCycleLength",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                />
              </div>
              <Button
                data-plasmic-name={"button9"}
                data-plasmic-override={overrides.button9}
                className={classNames("__wab_instance", sty.button9)}
                color={generateStateValueProp($state, ["button9", "color"])}
                load={generateStateValueProp($state, ["button9", "load"])}
                loading={generateStateValueProp($state, ["button9", "loading"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updatePeriodCycleLength"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["periodCycleLength"]
                          },
                          operation: 0,
                          value: $state.pickersForPeriodCycleLength.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePeriodCycleLength"] != null &&
                    typeof $steps["updatePeriodCycleLength"] === "object" &&
                    typeof $steps["updatePeriodCycleLength"].then === "function"
                  ) {
                    $steps["updatePeriodCycleLength"] = await $steps[
                      "updatePeriodCycleLength"
                    ];
                  }

                  $steps["updateDialogForPeriodCycleLengthOpendialog"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: [
                              "dialogForPeriodCycleLength",
                              "opendialog"
                            ]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialogForPeriodCycleLengthOpendialog"] !=
                      null &&
                    typeof $steps[
                      "updateDialogForPeriodCycleLengthOpendialog"
                    ] === "object" &&
                    typeof $steps["updateDialogForPeriodCycleLengthOpendialog"]
                      .then === "function"
                  ) {
                    $steps["updateDialogForPeriodCycleLengthOpendialog"] =
                      await $steps[
                        "updateDialogForPeriodCycleLengthOpendialog"
                      ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button9", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button9", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadingChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button9", "loading"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ebXkO
                  )}
                >
                  {"\u0627\u0646\u062a\u062e\u0627\u0628"}
                </div>
              </Button>
            </div>
          </Dialog>
          <Dialog
            data-plasmic-name={"dialogForHeight"}
            data-plasmic-override={overrides.dialogForHeight}
            className={classNames("__wab_instance", sty.dialogForHeight)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialogForHeight",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialogForHeight",
              "opendialog"
            ])}
          >
            <div className={classNames(projectcss.all, sty.freeBox__q94Dr)}>
              <div className={classNames(projectcss.all, sty.freeBox__dju3W)}>
                <Pickers
                  data-plasmic-name={"pickersForHeight"}
                  data-plasmic-override={overrides.pickersForHeight}
                  className={classNames("__wab_instance", sty.pickersForHeight)}
                  data={(() => {
                    try {
                      return Array.from({ length: 210 - 38 }, (_, i) => ({
                        label: `${i + 120} سانتی متر`,
                        value: i + 120
                      }));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  initialValue={generateStateValueProp($state, [
                    "pickersForHeight",
                    "value"
                  ])}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "pickersForHeight",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                />
              </div>
              <Button
                data-plasmic-name={"button12"}
                data-plasmic-override={overrides.button12}
                className={classNames("__wab_instance", sty.button12)}
                color={generateStateValueProp($state, ["button12", "color"])}
                load={generateStateValueProp($state, ["button12", "load"])}
                loading={generateStateValueProp($state, [
                  "button12",
                  "loading"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateHeight"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["height"]
                          },
                          operation: 0,
                          value: $state.pickersForHeight.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateHeight"] != null &&
                    typeof $steps["updateHeight"] === "object" &&
                    typeof $steps["updateHeight"].then === "function"
                  ) {
                    $steps["updateHeight"] = await $steps["updateHeight"];
                  }

                  $steps["updateDialogForHeightOpendialog"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialogForHeight", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialogForHeightOpendialog"] != null &&
                    typeof $steps["updateDialogForHeightOpendialog"] ===
                      "object" &&
                    typeof $steps["updateDialogForHeightOpendialog"].then ===
                      "function"
                  ) {
                    $steps["updateDialogForHeightOpendialog"] = await $steps[
                      "updateDialogForHeightOpendialog"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button12", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button12", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadingChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button12", "loading"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sTw4N
                  )}
                >
                  {"\u0627\u0646\u062a\u062e\u0627\u0628"}
                </div>
              </Button>
            </div>
          </Dialog>
          <Dialog
            data-plasmic-name={"dialogForWeight"}
            data-plasmic-override={overrides.dialogForWeight}
            className={classNames("__wab_instance", sty.dialogForWeight)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialogForWeight",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialogForWeight",
              "opendialog"
            ])}
          >
            <div className={classNames(projectcss.all, sty.freeBox___9M81G)}>
              <div className={classNames(projectcss.all, sty.freeBox__srAuA)}>
                <Pickers
                  data-plasmic-name={"pickersForWeight"}
                  data-plasmic-override={overrides.pickersForWeight}
                  className={classNames("__wab_instance", sty.pickersForWeight)}
                  data={(() => {
                    try {
                      return (() => {
                        const array = Array.from(
                          { length: 215 - 39 },
                          (_, i) => ({
                            label: `${i + 40} کیلو گرم`,
                            value: i + 40
                          })
                        );
                        return array;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  initialValue={generateStateValueProp($state, [
                    "pickersForWeight",
                    "value"
                  ])}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "pickersForWeight",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                />
              </div>
              <Button
                data-plasmic-name={"button15"}
                data-plasmic-override={overrides.button15}
                className={classNames("__wab_instance", sty.button15)}
                color={generateStateValueProp($state, ["button15", "color"])}
                load={generateStateValueProp($state, ["button15", "load"])}
                loading={generateStateValueProp($state, [
                  "button15",
                  "loading"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateWeight3"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["weight3"]
                          },
                          operation: 0,
                          value: $state.pickersForWeight.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateWeight3"] != null &&
                    typeof $steps["updateWeight3"] === "object" &&
                    typeof $steps["updateWeight3"].then === "function"
                  ) {
                    $steps["updateWeight3"] = await $steps["updateWeight3"];
                  }

                  $steps["updateDialogForWeightOpendialog"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialogForWeight", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialogForWeightOpendialog"] != null &&
                    typeof $steps["updateDialogForWeightOpendialog"] ===
                      "object" &&
                    typeof $steps["updateDialogForWeightOpendialog"].then ===
                      "function"
                  ) {
                    $steps["updateDialogForWeightOpendialog"] = await $steps[
                      "updateDialogForWeightOpendialog"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button15", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button15", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadingChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button15", "loading"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gOeO9
                  )}
                >
                  {"\u0627\u0646\u062a\u062e\u0627\u0628"}
                </div>
              </Button>
            </div>
          </Dialog>
          <Dialog
            data-plasmic-name={"dialogForTheDateOfTheFirstDayOfYourLastPeriod"}
            data-plasmic-override={
              overrides.dialogForTheDateOfTheFirstDayOfYourLastPeriod
            }
            className={classNames(
              "__wab_instance",
              sty.dialogForTheDateOfTheFirstDayOfYourLastPeriod
            )}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialogForTheDateOfTheFirstDayOfYourLastPeriod",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialogForTheDateOfTheFirstDayOfYourLastPeriod",
              "opendialog"
            ])}
          >
            <div className={classNames(projectcss.all, sty.freeBox__cgJee)}>
              <div className={classNames(projectcss.all, sty.freeBox__bz5P1)}>
                <Pickers
                  data-plasmic-name={
                    "pickersForTheDateOfTheFirstDayOfYourLastPeriod"
                  }
                  data-plasmic-override={
                    overrides.pickersForTheDateOfTheFirstDayOfYourLastPeriod
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.pickersForTheDateOfTheFirstDayOfYourLastPeriod
                  )}
                  data={(() => {
                    try {
                      return $state.variableForTheDateOfTheFirstDayOfYourLastPeriod;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  initialValue={generateStateValueProp($state, [
                    "pickersForTheDateOfTheFirstDayOfYourLastPeriod",
                    "value"
                  ])}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "pickersForTheDateOfTheFirstDayOfYourLastPeriod",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                />
              </div>
              <Button
                data-plasmic-name={"button18"}
                data-plasmic-override={overrides.button18}
                className={classNames("__wab_instance", sty.button18)}
                color={generateStateValueProp($state, ["button18", "color"])}
                load={generateStateValueProp($state, ["button18", "load"])}
                loading={generateStateValueProp($state, [
                  "button18",
                  "loading"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateVariable"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["variableForLastPeriod"]
                          },
                          operation: 0,
                          value:
                            $state
                              .pickersForTheDateOfTheFirstDayOfYourLastPeriod
                              .value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateVariable"] != null &&
                    typeof $steps["updateVariable"] === "object" &&
                    typeof $steps["updateVariable"].then === "function"
                  ) {
                    $steps["updateVariable"] = await $steps["updateVariable"];
                  }

                  $steps["updateNameInputValue2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: [
                              "dialogForTheDateOfTheFirstDayOfYourLastPeriod",
                              "opendialog"
                            ]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateNameInputValue2"] != null &&
                    typeof $steps["updateNameInputValue2"] === "object" &&
                    typeof $steps["updateNameInputValue2"].then === "function"
                  ) {
                    $steps["updateNameInputValue2"] = await $steps[
                      "updateNameInputValue2"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button18", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button18", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadingChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button18", "loading"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5S2J
                  )}
                >
                  {"\u0627\u0646\u062a\u062e\u0627\u0628"}
                </div>
              </Button>
            </div>
          </Dialog>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "getInfo",
    "verticalIdentity2",
    "verticalForNameInput2",
    "verticalForNameInput3",
    "verticalForNameInput4",
    "verticalForNameInput5",
    "verticalForNameInput6",
    "verticalForNameInput7",
    "verticalForNameInput8",
    "verticalForNameInput9",
    "verticalForNameInput10",
    "verticalForNameInput11",
    "verticalForNameInput12",
    "verticalForNameInput13",
    "verticalForNameInput14",
    "verticalForNameInput15",
    "verticalForNameInput16",
    "verticalForNameInput17",
    "verticalForNameInput18",
    "verticalForNameInput19",
    "verticalForNameInput20",
    "verticalForNameInput21",
    "verticalForNameInput22",
    "verticalIdentity",
    "verticalForNameInput",
    "nameInput",
    "antdInput3",
    "verticalForDateInput",
    "verticalForSelection",
    "horizontalForButton",
    "horizontalForButton2",
    "horizontalForButton3",
    "verticalForProbabilityOfGettingPregnant",
    "switchbest",
    "verticalForMenstrualCycle",
    "numberOfDaysOfBleeding2",
    "numberOfDaysOfBleeding3",
    "nameInput2",
    "nameInput3",
    "nameInput4",
    "heightAndWeight",
    "weight",
    "weight2",
    "button19",
    "headerLiom",
    "dialogNumberOfDaysOfBleeding",
    "pickersForNumberOfDaysOfBleeding",
    "button6",
    "dialogDateOfBrith",
    "datePickersBirthDay",
    "button3",
    "dialogForPeriodCycleLength",
    "pickersForPeriodCycleLength",
    "button9",
    "dialogForHeight",
    "pickersForHeight",
    "button12",
    "dialogForWeight",
    "pickersForWeight",
    "button15",
    "dialogForTheDateOfTheFirstDayOfYourLastPeriod",
    "pickersForTheDateOfTheFirstDayOfYourLastPeriod",
    "button18"
  ],
  embedHtml: ["embedHtml"],
  getInfo: [
    "getInfo",
    "verticalIdentity2",
    "verticalForNameInput2",
    "verticalForNameInput3",
    "verticalForNameInput4",
    "verticalForNameInput5",
    "verticalForNameInput6",
    "verticalForNameInput7",
    "verticalForNameInput8",
    "verticalForNameInput9",
    "verticalForNameInput10",
    "verticalForNameInput11",
    "verticalForNameInput12",
    "verticalForNameInput13",
    "verticalForNameInput14",
    "verticalForNameInput15",
    "verticalForNameInput16",
    "verticalForNameInput17",
    "verticalForNameInput18",
    "verticalForNameInput19",
    "verticalForNameInput20",
    "verticalForNameInput21",
    "verticalForNameInput22",
    "verticalIdentity",
    "verticalForNameInput",
    "nameInput",
    "antdInput3",
    "verticalForDateInput",
    "verticalForSelection",
    "horizontalForButton",
    "horizontalForButton2",
    "horizontalForButton3",
    "verticalForProbabilityOfGettingPregnant",
    "switchbest",
    "verticalForMenstrualCycle",
    "numberOfDaysOfBleeding2",
    "numberOfDaysOfBleeding3",
    "nameInput2",
    "nameInput3",
    "nameInput4",
    "heightAndWeight",
    "weight",
    "weight2",
    "button19"
  ],
  verticalIdentity2: [
    "verticalIdentity2",
    "verticalForNameInput2",
    "verticalForNameInput3",
    "verticalForNameInput4",
    "verticalForNameInput5",
    "verticalForNameInput6",
    "verticalForNameInput7",
    "verticalForNameInput8",
    "verticalForNameInput9",
    "verticalForNameInput10",
    "verticalForNameInput11",
    "verticalForNameInput12",
    "verticalForNameInput13",
    "verticalForNameInput14",
    "verticalForNameInput15",
    "verticalForNameInput16",
    "verticalForNameInput17",
    "verticalForNameInput18",
    "verticalForNameInput19",
    "verticalForNameInput20",
    "verticalForNameInput21",
    "verticalForNameInput22"
  ],
  verticalForNameInput2: [
    "verticalForNameInput2",
    "verticalForNameInput3",
    "verticalForNameInput4"
  ],
  verticalForNameInput3: ["verticalForNameInput3"],
  verticalForNameInput4: ["verticalForNameInput4"],
  verticalForNameInput5: [
    "verticalForNameInput5",
    "verticalForNameInput6",
    "verticalForNameInput7"
  ],
  verticalForNameInput6: ["verticalForNameInput6"],
  verticalForNameInput7: ["verticalForNameInput7"],
  verticalForNameInput8: [
    "verticalForNameInput8",
    "verticalForNameInput9",
    "verticalForNameInput10",
    "verticalForNameInput11"
  ],
  verticalForNameInput9: ["verticalForNameInput9"],
  verticalForNameInput10: ["verticalForNameInput10"],
  verticalForNameInput11: ["verticalForNameInput11"],
  verticalForNameInput12: [
    "verticalForNameInput12",
    "verticalForNameInput13",
    "verticalForNameInput14",
    "verticalForNameInput15"
  ],
  verticalForNameInput13: ["verticalForNameInput13"],
  verticalForNameInput14: ["verticalForNameInput14"],
  verticalForNameInput15: ["verticalForNameInput15"],
  verticalForNameInput16: [
    "verticalForNameInput16",
    "verticalForNameInput17",
    "verticalForNameInput18",
    "verticalForNameInput19"
  ],
  verticalForNameInput17: ["verticalForNameInput17"],
  verticalForNameInput18: ["verticalForNameInput18"],
  verticalForNameInput19: ["verticalForNameInput19"],
  verticalForNameInput20: [
    "verticalForNameInput20",
    "verticalForNameInput21",
    "verticalForNameInput22"
  ],
  verticalForNameInput21: ["verticalForNameInput21"],
  verticalForNameInput22: ["verticalForNameInput22"],
  verticalIdentity: [
    "verticalIdentity",
    "verticalForNameInput",
    "nameInput",
    "antdInput3",
    "verticalForDateInput",
    "verticalForSelection",
    "horizontalForButton",
    "horizontalForButton2",
    "horizontalForButton3",
    "verticalForProbabilityOfGettingPregnant",
    "switchbest",
    "verticalForMenstrualCycle",
    "numberOfDaysOfBleeding2",
    "numberOfDaysOfBleeding3",
    "nameInput2",
    "nameInput3",
    "nameInput4",
    "heightAndWeight",
    "weight",
    "weight2",
    "button19"
  ],
  verticalForNameInput: ["verticalForNameInput", "nameInput", "antdInput3"],
  nameInput: ["nameInput", "antdInput3"],
  antdInput3: ["antdInput3"],
  verticalForDateInput: ["verticalForDateInput"],
  verticalForSelection: [
    "verticalForSelection",
    "horizontalForButton",
    "horizontalForButton2",
    "horizontalForButton3"
  ],
  horizontalForButton: ["horizontalForButton"],
  horizontalForButton2: ["horizontalForButton2"],
  horizontalForButton3: ["horizontalForButton3"],
  verticalForProbabilityOfGettingPregnant: [
    "verticalForProbabilityOfGettingPregnant",
    "switchbest"
  ],
  switchbest: ["switchbest"],
  verticalForMenstrualCycle: [
    "verticalForMenstrualCycle",
    "numberOfDaysOfBleeding2",
    "numberOfDaysOfBleeding3",
    "nameInput2",
    "nameInput3",
    "nameInput4"
  ],
  numberOfDaysOfBleeding2: [
    "numberOfDaysOfBleeding2",
    "numberOfDaysOfBleeding3",
    "nameInput2"
  ],
  numberOfDaysOfBleeding3: ["numberOfDaysOfBleeding3", "nameInput2"],
  nameInput2: ["nameInput2"],
  nameInput3: ["nameInput3"],
  nameInput4: ["nameInput4"],
  heightAndWeight: ["heightAndWeight", "weight", "weight2"],
  weight: ["weight", "weight2"],
  weight2: ["weight2"],
  button19: ["button19"],
  headerLiom: ["headerLiom"],
  dialogNumberOfDaysOfBleeding: [
    "dialogNumberOfDaysOfBleeding",
    "pickersForNumberOfDaysOfBleeding",
    "button6"
  ],
  pickersForNumberOfDaysOfBleeding: ["pickersForNumberOfDaysOfBleeding"],
  button6: ["button6"],
  dialogDateOfBrith: ["dialogDateOfBrith", "datePickersBirthDay", "button3"],
  datePickersBirthDay: ["datePickersBirthDay"],
  button3: ["button3"],
  dialogForPeriodCycleLength: [
    "dialogForPeriodCycleLength",
    "pickersForPeriodCycleLength",
    "button9"
  ],
  pickersForPeriodCycleLength: ["pickersForPeriodCycleLength"],
  button9: ["button9"],
  dialogForHeight: ["dialogForHeight", "pickersForHeight", "button12"],
  pickersForHeight: ["pickersForHeight"],
  button12: ["button12"],
  dialogForWeight: ["dialogForWeight", "pickersForWeight", "button15"],
  pickersForWeight: ["pickersForWeight"],
  button15: ["button15"],
  dialogForTheDateOfTheFirstDayOfYourLastPeriod: [
    "dialogForTheDateOfTheFirstDayOfYourLastPeriod",
    "pickersForTheDateOfTheFirstDayOfYourLastPeriod",
    "button18"
  ],
  pickersForTheDateOfTheFirstDayOfYourLastPeriod: [
    "pickersForTheDateOfTheFirstDayOfYourLastPeriod"
  ],
  button18: ["button18"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  getInfo: typeof ApiRequest;
  verticalIdentity2: "div";
  verticalForNameInput2: "div";
  verticalForNameInput3: "div";
  verticalForNameInput4: "div";
  verticalForNameInput5: "div";
  verticalForNameInput6: "div";
  verticalForNameInput7: "div";
  verticalForNameInput8: "div";
  verticalForNameInput9: "div";
  verticalForNameInput10: "div";
  verticalForNameInput11: "div";
  verticalForNameInput12: "div";
  verticalForNameInput13: "div";
  verticalForNameInput14: "div";
  verticalForNameInput15: "div";
  verticalForNameInput16: "div";
  verticalForNameInput17: "div";
  verticalForNameInput18: "div";
  verticalForNameInput19: "div";
  verticalForNameInput20: "div";
  verticalForNameInput21: "div";
  verticalForNameInput22: "div";
  verticalIdentity: "div";
  verticalForNameInput: "div";
  nameInput: typeof TextInput;
  antdInput3: typeof Input;
  verticalForDateInput: "div";
  verticalForSelection: "div";
  horizontalForButton: "div";
  horizontalForButton2: "div";
  horizontalForButton3: "div";
  verticalForProbabilityOfGettingPregnant: "div";
  switchbest: typeof Switchbest;
  verticalForMenstrualCycle: "div";
  numberOfDaysOfBleeding2: "div";
  numberOfDaysOfBleeding3: "div";
  nameInput2: typeof TextInput;
  nameInput3: typeof TextInput;
  nameInput4: typeof TextInput;
  heightAndWeight: "div";
  weight: "div";
  weight2: "div";
  button19: typeof Button;
  headerLiom: typeof HeaderLiom;
  dialogNumberOfDaysOfBleeding: typeof Dialog;
  pickersForNumberOfDaysOfBleeding: typeof Pickers;
  button6: typeof Button;
  dialogDateOfBrith: typeof Dialog;
  datePickersBirthDay: typeof DatePickers;
  button3: typeof Button;
  dialogForPeriodCycleLength: typeof Dialog;
  pickersForPeriodCycleLength: typeof Pickers;
  button9: typeof Button;
  dialogForHeight: typeof Dialog;
  pickersForHeight: typeof Pickers;
  button12: typeof Button;
  dialogForWeight: typeof Dialog;
  pickersForWeight: typeof Pickers;
  button15: typeof Button;
  dialogForTheDateOfTheFirstDayOfYourLastPeriod: typeof Dialog;
  pickersForTheDateOfTheFirstDayOfYourLastPeriod: typeof Pickers;
  button18: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditProfile__VariantsArgs;
    args?: PlasmicEditProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEditProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEditProfile__ArgProps,
          internalVariantPropNames: PlasmicEditProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEditProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditProfile";
  } else {
    func.displayName = `PlasmicEditProfile.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicEditProfile = Object.assign(
  // Top-level PlasmicEditProfile renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    getInfo: makeNodeComponent("getInfo"),
    verticalIdentity2: makeNodeComponent("verticalIdentity2"),
    verticalForNameInput2: makeNodeComponent("verticalForNameInput2"),
    verticalForNameInput3: makeNodeComponent("verticalForNameInput3"),
    verticalForNameInput4: makeNodeComponent("verticalForNameInput4"),
    verticalForNameInput5: makeNodeComponent("verticalForNameInput5"),
    verticalForNameInput6: makeNodeComponent("verticalForNameInput6"),
    verticalForNameInput7: makeNodeComponent("verticalForNameInput7"),
    verticalForNameInput8: makeNodeComponent("verticalForNameInput8"),
    verticalForNameInput9: makeNodeComponent("verticalForNameInput9"),
    verticalForNameInput10: makeNodeComponent("verticalForNameInput10"),
    verticalForNameInput11: makeNodeComponent("verticalForNameInput11"),
    verticalForNameInput12: makeNodeComponent("verticalForNameInput12"),
    verticalForNameInput13: makeNodeComponent("verticalForNameInput13"),
    verticalForNameInput14: makeNodeComponent("verticalForNameInput14"),
    verticalForNameInput15: makeNodeComponent("verticalForNameInput15"),
    verticalForNameInput16: makeNodeComponent("verticalForNameInput16"),
    verticalForNameInput17: makeNodeComponent("verticalForNameInput17"),
    verticalForNameInput18: makeNodeComponent("verticalForNameInput18"),
    verticalForNameInput19: makeNodeComponent("verticalForNameInput19"),
    verticalForNameInput20: makeNodeComponent("verticalForNameInput20"),
    verticalForNameInput21: makeNodeComponent("verticalForNameInput21"),
    verticalForNameInput22: makeNodeComponent("verticalForNameInput22"),
    verticalIdentity: makeNodeComponent("verticalIdentity"),
    verticalForNameInput: makeNodeComponent("verticalForNameInput"),
    nameInput: makeNodeComponent("nameInput"),
    antdInput3: makeNodeComponent("antdInput3"),
    verticalForDateInput: makeNodeComponent("verticalForDateInput"),
    verticalForSelection: makeNodeComponent("verticalForSelection"),
    horizontalForButton: makeNodeComponent("horizontalForButton"),
    horizontalForButton2: makeNodeComponent("horizontalForButton2"),
    horizontalForButton3: makeNodeComponent("horizontalForButton3"),
    verticalForProbabilityOfGettingPregnant: makeNodeComponent(
      "verticalForProbabilityOfGettingPregnant"
    ),
    switchbest: makeNodeComponent("switchbest"),
    verticalForMenstrualCycle: makeNodeComponent("verticalForMenstrualCycle"),
    numberOfDaysOfBleeding2: makeNodeComponent("numberOfDaysOfBleeding2"),
    numberOfDaysOfBleeding3: makeNodeComponent("numberOfDaysOfBleeding3"),
    nameInput2: makeNodeComponent("nameInput2"),
    nameInput3: makeNodeComponent("nameInput3"),
    nameInput4: makeNodeComponent("nameInput4"),
    heightAndWeight: makeNodeComponent("heightAndWeight"),
    weight: makeNodeComponent("weight"),
    weight2: makeNodeComponent("weight2"),
    button19: makeNodeComponent("button19"),
    headerLiom: makeNodeComponent("headerLiom"),
    dialogNumberOfDaysOfBleeding: makeNodeComponent(
      "dialogNumberOfDaysOfBleeding"
    ),
    pickersForNumberOfDaysOfBleeding: makeNodeComponent(
      "pickersForNumberOfDaysOfBleeding"
    ),
    button6: makeNodeComponent("button6"),
    dialogDateOfBrith: makeNodeComponent("dialogDateOfBrith"),
    datePickersBirthDay: makeNodeComponent("datePickersBirthDay"),
    button3: makeNodeComponent("button3"),
    dialogForPeriodCycleLength: makeNodeComponent("dialogForPeriodCycleLength"),
    pickersForPeriodCycleLength: makeNodeComponent(
      "pickersForPeriodCycleLength"
    ),
    button9: makeNodeComponent("button9"),
    dialogForHeight: makeNodeComponent("dialogForHeight"),
    pickersForHeight: makeNodeComponent("pickersForHeight"),
    button12: makeNodeComponent("button12"),
    dialogForWeight: makeNodeComponent("dialogForWeight"),
    pickersForWeight: makeNodeComponent("pickersForWeight"),
    button15: makeNodeComponent("button15"),
    dialogForTheDateOfTheFirstDayOfYourLastPeriod: makeNodeComponent(
      "dialogForTheDateOfTheFirstDayOfYourLastPeriod"
    ),
    pickersForTheDateOfTheFirstDayOfYourLastPeriod: makeNodeComponent(
      "pickersForTheDateOfTheFirstDayOfYourLastPeriod"
    ),
    button18: makeNodeComponent("button18"),

    // Metadata about props expected for PlasmicEditProfile
    internalVariantProps: PlasmicEditProfile__VariantProps,
    internalArgProps: PlasmicEditProfile__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEditProfile;
/* prettier-ignore-end */
