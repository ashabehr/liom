// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: GWUycYOHSME2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Massage from "../../Massage"; // plasmic-import: Bqqk_Gx32qFA/component
import Seen from "../../Seen"; // plasmic-import: JqwoohhEEPXm/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicNewPage2.module.css"; // plasmic-import: GWUycYOHSME2/css

import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 32haUKsu6raY/icon
import Icon100Icon from "./icons/PlasmicIcon__Icon100"; // plasmic-import: y7Sh1XZq_aD-/icon
import Icon93Icon from "./icons/PlasmicIcon__Icon93"; // plasmic-import: TpH161qNcl5c/icon

import __lib_dayjs from "dayjs";

createPlasmicElementProxy;

export type PlasmicNewPage2__VariantMembers = {};
export type PlasmicNewPage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage2__VariantsArgs;
export const PlasmicNewPage2__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage2__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage2__ArgsType;
export const PlasmicNewPage2__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage2__OverridesType = {
  root?: Flex__<"div">;
  chat?: Flex__<"div">;
  top?: Flex__<"div">;
  image?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  massage?: Flex__<typeof Massage>;
  helloDoctorIBel?: Flex__<"div">;
  seen?: Flex__<typeof Seen>;
  bottomInput?: Flex__<"div">;
  textArea?: Flex__<typeof AntdTextArea>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultNewPage2Props {}

const $$ = {
  dayjs: __lib_dayjs
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage2__RenderFunc(props: {
  variants: PlasmicNewPage2__VariantsArgs;
  args: PlasmicNewPage2__ArgsType;
  overrides: PlasmicNewPage2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "variable",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            massege: "salam",
            person: "me",
            time: "11405-555-55 10:30",
            send: 2
          },
          {
            massege:
              "vfvfvfvfvfvfvfvfvfvfvfvfvfvfvfvfvfvfvfv\nvfvfvfvfvfvfvfvfv",
            person: "fdfdd",
            time: "11405-555-55 10:30"
          },
          {
            massege: "salam",
            person: "me",
            time: "11405-555-55 10:30",
            send: 2
          },
          { massege: "salam", person: "mdfdfdfde", time: "11405-555-55 10:30" }
        ]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"chat"}
            data-plasmic-override={overrides.chat}
            className={classNames(projectcss.all, sty.chat)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"top"}
              data-plasmic-override={overrides.top}
              hasGap={true}
              className={classNames(projectcss.all, sty.top)}
            >
              <Icon22Icon
                className={classNames(projectcss.all, sty.svg__h4BiE)}
                role={"img"}
              />

              <div
                data-plasmic-name={"image"}
                data-plasmic-override={overrides.image}
                className={classNames(projectcss.all, sty.image)}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liom_hamyar/images/imagePlaceholder4.svg",
                    fullWidth: 40,
                    fullHeight: 40,
                    aspectRatio: 1
                  }}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hd0Pr
                )}
              >
                {"Dr. Bellamy Nich\u2026"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tujJc)}
            >
              <Reveal
                className={classNames("__wab_instance", sty.reveal__jSuX)}
                direction={"up"}
                duration={500}
                effect={"fade"}
                triggerOnce={true}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.variable;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Massage
                      data-plasmic-name={"massage"}
                      data-plasmic-override={overrides.massage}
                      className={classNames("__wab_instance", sty.massage)}
                      key={currentIndex}
                      rectangle6={
                        <React.Fragment>
                          <div
                            data-plasmic-name={"helloDoctorIBel"}
                            data-plasmic-override={overrides.helloDoctorIBel}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.helloDoctorIBel
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.massege;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0633\u0644\u0627\u0645";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gH4I
                            )}
                          >
                            <Seen
                              data-plasmic-name={"seen"}
                              data-plasmic-override={overrides.seen}
                              className={classNames("__wab_instance", sty.seen)}
                              unnamedGroupOfVariants={(() => {
                                try {
                                  return "_" + currentItem.send;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eJf9X
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.time.split(" ")[1];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "10:13";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Stack__>
                        </React.Fragment>
                      }
                      you={(() => {
                        try {
                          return currentItem.person != "me";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
              </Reveal>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"bottomInput"}
              data-plasmic-override={overrides.bottomInput}
              hasGap={true}
              className={classNames(projectcss.all, sty.bottomInput)}
            >
              <Reveal
                cascade={true}
                className={classNames("__wab_instance", sty.reveal___77Rhm)}
                damping={0}
                duration={500}
                effect={"rotate"}
                reverse={(() => {
                  try {
                    return $state.textArea.value.length == 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                triggerOnce={true}
              >
                {(() => {
                  try {
                    return $state.textArea.value?.length > 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon100Icon
                    className={classNames(projectcss.all, sty.svg__cZhY)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateTextAreaValue2"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return $state.variable.push({
                                    massege: $state.textArea.value,
                                    person: "me",
                                    time: $$.dayjs().format("YYYY-MM-DD HH:mm"),
                                    send: 0
                                  });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTextAreaValue2"] != null &&
                        typeof $steps["updateTextAreaValue2"] === "object" &&
                        typeof $steps["updateTextAreaValue2"].then ===
                          "function"
                      ) {
                        $steps["updateTextAreaValue2"] = await $steps[
                          "updateTextAreaValue2"
                        ];
                      }

                      $steps["updateTextAreaValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["textArea", "value"]
                              },
                              operation: 0,
                              value: ""
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTextAreaValue"] != null &&
                        typeof $steps["updateTextAreaValue"] === "object" &&
                        typeof $steps["updateTextAreaValue"].then === "function"
                      ) {
                        $steps["updateTextAreaValue"] = await $steps[
                          "updateTextAreaValue"
                        ];
                      }

                      $steps["updateTextAreaValue3"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return window.scrollTo(
                                  0,
                                  document.body.scrollHeight
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTextAreaValue3"] != null &&
                        typeof $steps["updateTextAreaValue3"] === "object" &&
                        typeof $steps["updateTextAreaValue3"].then ===
                          "function"
                      ) {
                        $steps["updateTextAreaValue3"] = await $steps[
                          "updateTextAreaValue3"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                ) : null}
              </Reveal>
              {(() => {
                const child$Props = {
                  autoSize: true,
                  className: classNames("__wab_instance", sty.textArea),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["textArea", "value"],
                      AntdTextArea_Helpers
                    ).apply(null, eventArgs);
                  },
                  placeholder:
                    "\u067e\u06cc\u0627\u0645 \u062e\u0648\u062f \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f...",
                  value: generateStateValueProp($state, ["textArea", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "textArea.value"
                    }
                  ],
                  [],
                  AntdTextArea_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdTextArea
                    data-plasmic-name={"textArea"}
                    data-plasmic-override={overrides.textArea}
                    {...child$Props}
                  />
                );
              })()}
              <Icon93Icon
                className={classNames(projectcss.all, sty.svg__n0Gzt)}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              const fileInput =
                                document.getElementById("fileInput");
                              fileInput.click();
                              return fileInput.addEventListener(
                                "change",
                                event => {
                                  const file = event.target.files[0];
                                  if (file && file.type.startsWith("image/")) {
                                    alert(`فایل انتخاب شده: ${file.name}`);
                                  } else {
                                    alert(
                                      "لطفاً فقط فایل‌های تصویری انتخاب کنید!"
                                    );
                                    fileInput.value = "";
                                  }
                                }
                              );
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                role={"img"}
              />

              <Embed
                data-plasmic-name={"embedHtml"}
                data-plasmic-override={overrides.embedHtml}
                className={classNames("__wab_instance", sty.embedHtml)}
                code={
                  '<input type="file" id="fileInput" accept=".jpg, .jpeg, .png">'
                }
              />
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "chat",
    "top",
    "image",
    "img",
    "massage",
    "helloDoctorIBel",
    "seen",
    "bottomInput",
    "textArea",
    "embedHtml"
  ],
  chat: [
    "chat",
    "top",
    "image",
    "img",
    "massage",
    "helloDoctorIBel",
    "seen",
    "bottomInput",
    "textArea",
    "embedHtml"
  ],
  top: ["top", "image", "img"],
  image: ["image", "img"],
  img: ["img"],
  massage: ["massage", "helloDoctorIBel", "seen"],
  helloDoctorIBel: ["helloDoctorIBel"],
  seen: ["seen"],
  bottomInput: ["bottomInput", "textArea", "embedHtml"],
  textArea: ["textArea"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  chat: "div";
  top: "div";
  image: "div";
  img: typeof PlasmicImg__;
  massage: typeof Massage;
  helloDoctorIBel: "div";
  seen: typeof Seen;
  bottomInput: "div";
  textArea: typeof AntdTextArea;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage2__VariantsArgs;
    args?: PlasmicNewPage2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage2__ArgProps,
          internalVariantPropNames: PlasmicNewPage2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage2";
  } else {
    func.displayName = `PlasmicNewPage2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNewPage2 = Object.assign(
  // Top-level PlasmicNewPage2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    chat: makeNodeComponent("chat"),
    top: makeNodeComponent("top"),
    image: makeNodeComponent("image"),
    img: makeNodeComponent("img"),
    massage: makeNodeComponent("massage"),
    helloDoctorIBel: makeNodeComponent("helloDoctorIBel"),
    seen: makeNodeComponent("seen"),
    bottomInput: makeNodeComponent("bottomInput"),
    textArea: makeNodeComponent("textArea"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicNewPage2
    internalVariantProps: PlasmicNewPage2__VariantProps,
    internalArgProps: PlasmicNewPage2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage2;
/* prettier-ignore-end */
