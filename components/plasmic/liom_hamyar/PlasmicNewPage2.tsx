/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 3v9tn6uUJCPM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicNewPage2.module.css"; // plasmic-import: 3v9tn6uUJCPM/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon
import EllipseIcon from "./icons/PlasmicIcon__Ellipse"; // plasmic-import: kdRLUSQBKQTU/icon
import Group9Icon from "./icons/PlasmicIcon__Group9"; // plasmic-import: zcKll58mqazd/icon
import Group10Icon from "./icons/PlasmicIcon__Group10"; // plasmic-import: oY9JP2YB2Sfi/icon

createPlasmicElementProxy;

export type PlasmicNewPage2__VariantMembers = {};
export type PlasmicNewPage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage2__VariantsArgs;
export const PlasmicNewPage2__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage2__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage2__ArgsType;
export const PlasmicNewPage2__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage2__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  todayMeeting?: Flex__<"div">;
  frame?: Flex__<"div">;
  frame2?: Flex__<"div">;
  frame3?: Flex__<"div">;
  frame4?: Flex__<"div">;
  frame5?: Flex__<"div">;
  frame6?: Flex__<"div">;
  frame7?: Flex__<"div">;
  group2?: Flex__<"div">;
  group3?: Flex__<"div">;
  property1Bold?: Flex__<"div">;
  group4?: Flex__<"div">;
  frame8?: Flex__<"div">;
  property1Bold2?: Flex__<"div">;
  group5?: Flex__<"div">;
  frame9?: Flex__<"div">;
  frame11?: Flex__<"div">;
  frame12?: Flex__<"div">;
  frame13?: Flex__<"div">;
};

export interface DefaultNewPage2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage2__RenderFunc(props: {
  variants: PlasmicNewPage2__VariantsArgs;
  args: PlasmicNewPage2__ArgsType;
  overrides: PlasmicNewPage2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <HeaderLiom
              data-plasmic-name={"headerLiom"}
              data-plasmic-override={overrides.headerLiom}
              className={classNames("__wab_instance", sty.headerLiom)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__gaKaO)}>
                <XIcon
                  className={classNames(projectcss.all, sty.svg__a2F2A)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return window.history.back();
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wzGEt
                  )}
                >
                  {"\u06cc\u0627\u062f \u0622\u0648\u0631\u06cc \u0647\u0627"}
                </div>
              </div>
            </HeaderLiom>
          </section>
          <div className={classNames(projectcss.all, sty.freeBox__xMddU)}>
            <div
              data-plasmic-name={"todayMeeting"}
              data-plasmic-override={overrides.todayMeeting}
              className={classNames(projectcss.all, sty.todayMeeting)}
            >
              <div
                data-plasmic-name={"frame"}
                data-plasmic-override={overrides.frame}
                className={classNames(projectcss.all, sty.frame)}
              >
                <div
                  data-plasmic-name={"frame2"}
                  data-plasmic-override={overrides.frame2}
                  className={classNames(projectcss.all, sty.frame2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lbIiv
                    )}
                  >
                    {"Today Meeting"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gb4Yl
                  )}
                >
                  {"Your schedule for the day"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame3"}
                data-plasmic-override={overrides.frame3}
                className={classNames(projectcss.all, sty.frame3)}
              >
                <div
                  data-plasmic-name={"frame4"}
                  data-plasmic-override={overrides.frame4}
                  className={classNames(projectcss.all, sty.frame4)}
                >
                  <div
                    data-plasmic-name={"frame5"}
                    data-plasmic-override={overrides.frame5}
                    className={classNames(projectcss.all, sty.frame5)}
                  >
                    <div
                      data-plasmic-name={"frame6"}
                      data-plasmic-override={overrides.frame6}
                      className={classNames(projectcss.all, sty.frame6)}
                    >
                      <div
                        data-plasmic-name={"frame7"}
                        data-plasmic-override={overrides.frame7}
                        className={classNames(projectcss.all, sty.frame7)}
                      >
                        <div
                          data-plasmic-name={"group2"}
                          data-plasmic-override={overrides.group2}
                          className={classNames(projectcss.all, sty.group2)}
                        >
                          <div
                            data-plasmic-name={"group3"}
                            data-plasmic-override={overrides.group3}
                            className={classNames(projectcss.all, sty.group3)}
                          >
                            <EllipseIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___313Nm
                              )}
                              role={"img"}
                            />

                            <div
                              data-plasmic-name={"property1Bold"}
                              data-plasmic-override={overrides.property1Bold}
                              className={classNames(
                                projectcss.all,
                                sty.property1Bold
                              )}
                            >
                              <div
                                data-plasmic-name={"group4"}
                                data-plasmic-override={overrides.group4}
                                className={classNames(
                                  projectcss.all,
                                  sty.group4
                                )}
                              >
                                <Group9Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__l711
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eruD
                          )}
                        >
                          {"Townhall Meeting"}
                        </div>
                        <div
                          data-plasmic-name={"frame8"}
                          data-plasmic-override={overrides.frame8}
                          className={classNames(projectcss.all, sty.frame8)}
                        >
                          <div
                            data-plasmic-name={"property1Bold2"}
                            data-plasmic-override={overrides.property1Bold2}
                            className={classNames(
                              projectcss.all,
                              sty.property1Bold2
                            )}
                          >
                            <div
                              data-plasmic-name={"group5"}
                              data-plasmic-override={overrides.group5}
                              className={classNames(projectcss.all, sty.group5)}
                            >
                              <Group10Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__oJuvt
                                )}
                                role={"img"}
                              />
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__svQTa
                            )}
                          >
                            {"01:30 AM - 02:00 AM"}
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame9"}
                      data-plasmic-override={overrides.frame9}
                      className={classNames(projectcss.all, sty.frame9)}
                    >
                      <div
                        data-plasmic-name={"frame11"}
                        data-plasmic-override={overrides.frame11}
                        className={classNames(projectcss.all, sty.frame11)}
                      >
                        <div
                          data-plasmic-name={"frame12"}
                          data-plasmic-override={overrides.frame12}
                          className={classNames(projectcss.all, sty.frame12)}
                        >
                          <div
                            data-plasmic-name={"frame13"}
                            data-plasmic-override={overrides.frame13}
                            className={classNames(projectcss.all, sty.frame13)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vLusZ
                              )}
                            >
                              {"Join Meet"}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "headerLiom",
    "todayMeeting",
    "frame",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "frame7",
    "group2",
    "group3",
    "property1Bold",
    "group4",
    "frame8",
    "property1Bold2",
    "group5",
    "frame9",
    "frame11",
    "frame12",
    "frame13"
  ],
  section: ["section", "headerLiom"],
  headerLiom: ["headerLiom"],
  todayMeeting: [
    "todayMeeting",
    "frame",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "frame7",
    "group2",
    "group3",
    "property1Bold",
    "group4",
    "frame8",
    "property1Bold2",
    "group5",
    "frame9",
    "frame11",
    "frame12",
    "frame13"
  ],
  frame: ["frame", "frame2"],
  frame2: ["frame2"],
  frame3: [
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "frame7",
    "group2",
    "group3",
    "property1Bold",
    "group4",
    "frame8",
    "property1Bold2",
    "group5",
    "frame9",
    "frame11",
    "frame12",
    "frame13"
  ],
  frame4: [
    "frame4",
    "frame5",
    "frame6",
    "frame7",
    "group2",
    "group3",
    "property1Bold",
    "group4",
    "frame8",
    "property1Bold2",
    "group5",
    "frame9",
    "frame11",
    "frame12",
    "frame13"
  ],
  frame5: [
    "frame5",
    "frame6",
    "frame7",
    "group2",
    "group3",
    "property1Bold",
    "group4",
    "frame8",
    "property1Bold2",
    "group5",
    "frame9",
    "frame11",
    "frame12",
    "frame13"
  ],
  frame6: [
    "frame6",
    "frame7",
    "group2",
    "group3",
    "property1Bold",
    "group4",
    "frame8",
    "property1Bold2",
    "group5"
  ],
  frame7: [
    "frame7",
    "group2",
    "group3",
    "property1Bold",
    "group4",
    "frame8",
    "property1Bold2",
    "group5"
  ],
  group2: ["group2", "group3", "property1Bold", "group4"],
  group3: ["group3", "property1Bold", "group4"],
  property1Bold: ["property1Bold", "group4"],
  group4: ["group4"],
  frame8: ["frame8", "property1Bold2", "group5"],
  property1Bold2: ["property1Bold2", "group5"],
  group5: ["group5"],
  frame9: ["frame9", "frame11", "frame12", "frame13"],
  frame11: ["frame11", "frame12", "frame13"],
  frame12: ["frame12", "frame13"],
  frame13: ["frame13"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  headerLiom: typeof HeaderLiom;
  todayMeeting: "div";
  frame: "div";
  frame2: "div";
  frame3: "div";
  frame4: "div";
  frame5: "div";
  frame6: "div";
  frame7: "div";
  group2: "div";
  group3: "div";
  property1Bold: "div";
  group4: "div";
  frame8: "div";
  property1Bold2: "div";
  group5: "div";
  frame9: "div";
  frame11: "div";
  frame12: "div";
  frame13: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage2__VariantsArgs;
    args?: PlasmicNewPage2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewPage2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage2__ArgProps,
          internalVariantPropNames: PlasmicNewPage2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage2";
  } else {
    func.displayName = `PlasmicNewPage2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNewPage2 = Object.assign(
  // Top-level PlasmicNewPage2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    headerLiom: makeNodeComponent("headerLiom"),
    todayMeeting: makeNodeComponent("todayMeeting"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    frame6: makeNodeComponent("frame6"),
    frame7: makeNodeComponent("frame7"),
    group2: makeNodeComponent("group2"),
    group3: makeNodeComponent("group3"),
    property1Bold: makeNodeComponent("property1Bold"),
    group4: makeNodeComponent("group4"),
    frame8: makeNodeComponent("frame8"),
    property1Bold2: makeNodeComponent("property1Bold2"),
    group5: makeNodeComponent("group5"),
    frame9: makeNodeComponent("frame9"),
    frame11: makeNodeComponent("frame11"),
    frame12: makeNodeComponent("frame12"),
    frame13: makeNodeComponent("frame13"),

    // Metadata about props expected for PlasmicNewPage2
    internalVariantProps: PlasmicNewPage2__VariantProps,
    internalArgProps: PlasmicNewPage2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage2;
/* prettier-ignore-end */
