// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: aqM8xdUvFVmZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import Subscription from "../../Subscription"; // plasmic-import: RkqUeSl2AMb8/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import Star from "../../Star"; // plasmic-import: i69c2Ujsm_H6/component
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicShop.module.css"; // plasmic-import: aqM8xdUvFVmZ/css

import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: H9d2pdUvXD_1/icon
import Icon141Icon from "./icons/PlasmicIcon__Icon141"; // plasmic-import: AP97-wr5VCl4/icon
import Icon142Icon from "./icons/PlasmicIcon__Icon142"; // plasmic-import: SJsM-_NDX4Yl/icon

createPlasmicElementProxy;

export type PlasmicShop__VariantMembers = {};
export type PlasmicShop__VariantsArgs = {};
type VariantPropType = keyof PlasmicShop__VariantsArgs;
export const PlasmicShop__VariantProps = new Array<VariantPropType>();

export type PlasmicShop__ArgsType = {};
type ArgPropType = keyof PlasmicShop__ArgsType;
export const PlasmicShop__ArgProps = new Array<ArgPropType>();

export type PlasmicShop__OverridesType = {
  root?: Flex__<"div">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  getData?: Flex__<typeof ApiRequest>;
  input4?: Flex__<typeof AntdInput>;
  button12?: Flex__<typeof Button>;
  button8?: Flex__<typeof Button>;
  button9?: Flex__<typeof Button>;
  p?: Flex__<"p">;
  dialog2?: Flex__<typeof Dialog>;
  subscription3?: Flex__<typeof Subscription>;
  button14?: Flex__<typeof Button>;
  button10?: Flex__<typeof Button>;
  input5?: Flex__<typeof AntdInput>;
  button13?: Flex__<typeof Button>;
  modal?: Flex__<typeof AntdModal>;
  timer?: Flex__<typeof Timer>;
  star?: Flex__<typeof Star>;
  collapseMother?: Flex__<typeof AntdSingleCollapse>;
  shopDialog?: Flex__<typeof ApiRequest>;
};

export interface DefaultShopProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShop__RenderFunc(props: {
  variants: PlasmicShop__VariantsArgs;
  args: PlasmicShop__ArgsType;
  overrides: PlasmicShop__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "discountBox",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "facilities",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc",
            Special: true
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          }
        ]
      },
      {
        path: "comments",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getData.data.result.socialProofBox.items;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    rate: 4,
                    text: "\u0633\u0628\u06a9 \u0632\u0646\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u0635\u0644\u0627\u062d \u0645\u06cc\u06a9\u0646\u0645 \u0648 \u0628\u0627 \u062a\u0648\u0635\u06cc\u0647 \u0647\u0627\u06cc \u0645\u0646\u0627\u0633\u0628 \u06a9\u0645\u06a9\u062a \u0645\u06cc\u06a9\u0646\u0645 \u06a9\u0647 \u062a\u0646\u0628\u0644\u06cc \u062a\u062e\u0645\u062f\u0627\u0646\u062a \u06a9\u0645 \u06a9\u0645 \u06a9\u0646\u062a\u0631\u0644 \u0648 \u0631\u0641\u0639 \u0628\u0634\u0647",
                    name: "khshshmxx"
                  },
                  {
                    rate: 4,
                    text: "\u0633\u0628\u06a9 \u0632\u0646\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u0635\u0644\u0627\u062d \u0645\u06cc\u06a9\u0646\u0645 \u0648 \u0628\u0627 \u062a\u0648\u0635\u06cc\u0647 \u0647\u0627\u06cc \u0645\u0646\u0627\u0633\u0628 \u06a9\u0645\u06a9\u062a \u0645\u06cc\u06a9\u0646\u0645 \u06a9\u0647 \u062a\u0646\u0628\u0644\u06cc \u062a\u062e\u0645\u062f\u0627\u0646\u062a \u06a9\u0645 \u06a9\u0645 \u06a9\u0646\u062a\u0631\u0644 \u0648 \u0631\u0641\u0639 \u0628\u0634\u0647",
                    name: "khshshmxx"
                  },
                  {
                    rate: 5,
                    text: "\u0633\u0628\u06a9 \u0632\u0646\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u0635\u0644\u0627\u062d \u0645\u06cc\u06a9\u0646\u0645 \u0648 \u0628\u0627 \u062a\u0648\u0635\u06cc\u0647 \u0647\u0627\u06cc \u0645\u0646\u0627\u0633\u0628 \u06a9\u0645\u06a9\u062a \u0645\u06cc\u06a9\u0646\u0645 \u06a9\u0647 \u062a\u0646\u0628\u0644\u06cc \u062a\u062e\u0645\u062f\u0627\u0646\u062a \u06a9\u0645 \u06a9\u0645 \u06a9\u0646\u062a\u0631\u0644 \u0648 \u0631\u0641\u0639 \u0628\u0634\u0647",
                    name: "khshshmxx"
                  },
                  {
                    rate: 4,
                    text: "\u0633\u0628\u06a9 \u0632\u0646\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u0635\u0644\u0627\u062d \u0645\u06cc\u06a9\u0646\u0645 \u0648 \u0628\u0627 \u062a\u0648\u0635\u06cc\u0647 \u0647\u0627\u06cc \u0645\u0646\u0627\u0633\u0628 \u06a9\u0645\u06a9\u062a \u0645\u06cc\u06a9\u0646\u0645 \u06a9\u0647 \u062a\u0646\u0628\u0644\u06cc \u062a\u062e\u0645\u062f\u0627\u0646\u062a \u06a9\u0645 \u06a9\u0645 \u06a9\u0646\u062a\u0631\u0644 \u0648 \u0631\u0641\u0639 \u0628\u0634\u0647",
                    name: "khshshmxx"
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "index",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "useful",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc",
            Special: true
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          }
        ]
      },
      {
        path: "collapseMother[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "question",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc",
            Special: true
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          },
          {
            title:
              "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9",
            text: "\u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062e\u0648\u062f\u062a \u0628\u0627\u0634 . \u0645\u0627 \u0647\u0631 \u0645\u0627\u0647 \u0628\u0647\u062a \u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u0648 \u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u06cc\u0645 \u062a\u0627 \u0647\u06cc\u0686\u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
          }
        ]
      },
      {
        path: "startX",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "timer",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "getData.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getData.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getData.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modalData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "shopDialog.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shopDialog.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shopDialog.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button8.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "subscription3[].clickitem",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "subscription3[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription3[].price",
        type: "private",
        variableType: "number"
      },
      {
        path: "subscription3[].discount",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription3[].fullprice",
        type: "private",
        variableType: "number"
      },
      {
        path: "shopSelected",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getData.data.result.shopList.filter(
                item => item.selected == 1
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "selectShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getData.data.result.shopList.filter(
                item => item.selected == 1
              )[0];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "button9.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "takhfif",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "discount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "discountCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button10.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button13.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "redirectUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return `https://apps.liom.app/shopResult?buyId=${
                $state.selectShop.id
              }&?offCode=${
                $state.discountCode
              }&token=hjk812${localStorage.getItem("token")}jkp&redirectUrl=${
                document.referrer
              }`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "loadingBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button14.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        if (
                          $ctx.query.token ||
                          new URLSearchParams(window.location.search).get(
                            "token"
                          )
                        ) {
                          var app =
                            $ctx.query.token ||
                            new URLSearchParams(window.location.search).get(
                              "token"
                            );
                          app = app.slice(6, app.length - 3);
                          return localStorage.setItem("token", app);
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <section className={classNames(projectcss.all, sty.section__hlw7Y)}>
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : (() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <HeaderLiom
                data-plasmic-name={"headerLiom"}
                data-plasmic-override={overrides.headerLiom}
                className={classNames("__wab_instance", sty.headerLiom)}
                slot={null}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hyXH)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___2S5Dx)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"20px"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return window.history.back();
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image38.svg",
                      fullWidth: 24,
                      fullHeight: 24,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pvsVh
                    )}
                  >
                    {
                      "\u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u0648\u06cc\u0698\u0647"
                    }
                  </div>
                </Stack__>
              </HeaderLiom>
            ) : null}
          </section>
          <ApiRequest
            data-plasmic-name={"getData"}
            data-plasmic-override={overrides.getData}
            className={classNames("__wab_instance", sty.getData)}
            errorDisplay={null}
            loadingDisplay={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zUBrg)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__vGaeM,
                    "shimmer"
                  )}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__ofWr,
                    "shimmer"
                  )}
                />
              </Stack__>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getData", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getData", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getData", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={(() => {
              try {
                return {
                  section: "hamyarSub",
                  type: "drawn",
                  authorization: localStorage.getItem("token")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/rest/shop/list"}
          >
            <section className={classNames(projectcss.all, sty.section__exaY7)}>
              <div className={classNames(projectcss.all, sty.freeBox___7XFkS)}>
                <div className={classNames(projectcss.all, sty.freeBox__jwCtO)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__rm8Uw)}
                    dir={"rtl"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__uB9O2)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7Qw43
                        )}
                      >
                        {(() => {
                          try {
                            return $state.shopSelected[0].topBadge;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___62Ysq
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__i89Tq
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.shopSelected[0].topBadge;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wfTim
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nhjm9
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.shopSelected[0].title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hXpAh
                            )}
                          >
                            {(() => {
                              try {
                                return $state.shopSelected[0].fullPrice;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___2Dhl8
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        return $state.shopSelected[0].fullPrice.toLocaleString();
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8ZIyy
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.shopSelected[0].price.toLocaleString() +
                                      " تومان "
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          {(() => {
                            try {
                              return $state.shopSelected[0].badge;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__urqIp
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__alu5K
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.shopSelected[0].badge;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          ) : null}
                        </div>
                        {(() => {
                          try {
                            return $state.discount;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__acAZy
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xbsVz
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  allowClear: hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? false
                                    : false,
                                  autoFocus: hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? false
                                    : false,
                                  bordered: hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? false
                                    : false,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input4
                                  ),
                                  disabled: hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? false
                                    : false,
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input4", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  placeholder:
                                    "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f.",
                                  prefix: null,
                                  readOnly: hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? false
                                    : false,
                                  size: hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? "small"
                                    : "small",
                                  suffix: null,
                                  value: generateStateValueProp($state, [
                                    "input4",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input4.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input4"}
                                    data-plasmic-override={overrides.input4}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            <Button
                              data-plasmic-name={"button12"}
                              data-plasmic-override={overrides.button12}
                              className={classNames(
                                "__wab_instance",
                                sty.button12
                              )}
                              color={generateStateValueProp($state, [
                                "button12",
                                "color"
                              ])}
                              disabled={false}
                              isDisabled={(() => {
                                try {
                                  return (
                                    $state.input4.value == undefined ||
                                    $state.input4.value == ""
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "isDisabled";
                                  }
                                  throw e;
                                }
                              })()}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateDiscountCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["discountCode"]
                                        },
                                        operation: 0,
                                        value: $state.input4.value
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateDiscountCode"] != null &&
                                  typeof $steps["updateDiscountCode"] ===
                                    "object" &&
                                  typeof $steps["updateDiscountCode"].then ===
                                    "function"
                                ) {
                                  $steps["updateDiscountCode"] = await $steps[
                                    "updateDiscountCode"
                                  ];
                                }
                              }}
                              onColorChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button12",
                                    "color"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ehuQm
                                )}
                              >
                                {"\u062a\u0627\u06cc\u06cc\u062f"}
                              </div>
                            </Button>
                          </Stack__>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hitW0
                          )}
                        >
                          <Button
                            data-plasmic-name={"button8"}
                            data-plasmic-override={overrides.button8}
                            className={classNames(
                              "__wab_instance",
                              sty.button8
                            )}
                            color={generateStateValueProp($state, [
                              "button8",
                              "color"
                            ])}
                            endIcon={
                              <Icon12Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___5DxXh
                                )}
                                role={"img"}
                              />
                            }
                            isDisabled={(() => {
                              try {
                                return $state.loadingBtn;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            loading={(() => {
                              try {
                                return $state.loadingBtn;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateLoadingBtn"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["loadingBtn"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateLoadingBtn"] != null &&
                                typeof $steps["updateLoadingBtn"] ===
                                  "object" &&
                                typeof $steps["updateLoadingBtn"].then ===
                                  "function"
                              ) {
                                $steps["updateLoadingBtn"] = await $steps[
                                  "updateLoadingBtn"
                                ];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        "https://n8n.staas.ir/webhook/rest/shop/list",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              id: $state.shopSelected[0].id,
                                              offCode: $state.discountCode,
                                              redirectUrl: $state.redirectUrl,
                                              authorization:
                                                localStorage.getItem("token")
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }

                              $steps["goToPage"] =
                                $steps.invokeGlobalAction?.data?.success ==
                                  true &&
                                $steps.invokeGlobalAction?.data?.result != false
                                  ? (() => {
                                      const actionArgs = {
                                        destination: (() => {
                                          try {
                                            return $steps.invokeGlobalAction
                                              .data.result;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["goToPage"] != null &&
                                typeof $steps["goToPage"] === "object" &&
                                typeof $steps["goToPage"].then === "function"
                              ) {
                                $steps["goToPage"] = await $steps["goToPage"];
                              }

                              $steps["invokeGlobalAction2"] =
                                $steps.invokeGlobalAction?.data?.success ==
                                  false ||
                                $steps.invokeGlobalAction?.data?.result == false
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "error",
                                          "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                          "top-left"
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["invokeGlobalAction2"] != null &&
                                typeof $steps["invokeGlobalAction2"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction2"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction2"] = await $steps[
                                  "invokeGlobalAction2"
                                ];
                              }

                              $steps["updateLoadingBtn2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["loadingBtn"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateLoadingBtn2"] != null &&
                                typeof $steps["updateLoadingBtn2"] ===
                                  "object" &&
                                typeof $steps["updateLoadingBtn2"].then ===
                                  "function"
                              ) {
                                $steps["updateLoadingBtn2"] = await $steps[
                                  "updateLoadingBtn2"
                                ];
                              }

                              $steps["updateName"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["name"]
                                      },
                                      operation: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateName"] != null &&
                                typeof $steps["updateName"] === "object" &&
                                typeof $steps["updateName"].then === "function"
                              ) {
                                $steps["updateName"] = await $steps[
                                  "updateName"
                                ];
                              }
                            }}
                            onColorChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button8",
                                  "color"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mjQdy
                              )}
                            >
                              {
                                "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                              }
                            </div>
                          </Button>
                          <Button
                            data-plasmic-name={"button9"}
                            data-plasmic-override={overrides.button9}
                            className={classNames(
                              "__wab_instance",
                              sty.button9
                            )}
                            color={generateStateValueProp($state, [
                              "button9",
                              "color"
                            ])}
                            endIcon={
                              <Icon12Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__yuFqx
                                )}
                                role={"img"}
                              />
                            }
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateDiscount"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["discount"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateDiscount"] != null &&
                                typeof $steps["updateDiscount"] === "object" &&
                                typeof $steps["updateDiscount"].then ===
                                  "function"
                              ) {
                                $steps["updateDiscount"] = await $steps[
                                  "updateDiscount"
                                ];
                              }
                            }}
                            onColorChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button9",
                                  "color"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oqWiy
                              )}
                            >
                              {
                                "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u0645"
                              }
                            </div>
                          </Button>
                        </Stack__>
                        {(() => {
                          try {
                            return (
                              $state.getData.data.result.shopList.length > 1
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <p
                            data-plasmic-name={"p"}
                            data-plasmic-override={overrides.p}
                            className={classNames(
                              projectcss.all,
                              projectcss.p,
                              projectcss.__wab_text,
                              sty.p
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateDialog2Opendialog"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["dialog2", "opendialog"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateDialog2Opendialog"] != null &&
                                typeof $steps["updateDialog2Opendialog"] ===
                                  "object" &&
                                typeof $steps["updateDialog2Opendialog"]
                                  .then === "function"
                              ) {
                                $steps["updateDialog2Opendialog"] =
                                  await $steps["updateDialog2Opendialog"];
                              }
                            }}
                          >
                            {
                              "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                            }
                          </p>
                        ) : null}
                      </Stack__>
                    </div>
                  </Stack__>
                </div>
                <Dialog
                  data-plasmic-name={"dialog2"}
                  data-plasmic-override={overrides.dialog2}
                  className={classNames("__wab_instance", sty.dialog2)}
                  onOpendialogChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "dialog2",
                      "opendialog"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  opendialog={generateStateValueProp($state, [
                    "dialog2",
                    "opendialog"
                  ])}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__eeiRi)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__xjZyJ)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.getData.data.result.shopList;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.subscription3
                            ),
                            clickitem: generateStateValueProp($state, [
                              "subscription3",
                              __plasmic_idx_0,
                              "clickitem"
                            ]),
                            discount: generateStateValueProp($state, [
                              "subscription3",
                              __plasmic_idx_0,
                              "discount"
                            ]),
                            fullprice: generateStateValueProp($state, [
                              "subscription3",
                              __plasmic_idx_0,
                              "fullprice"
                            ]),
                            key: currentIndex,
                            onClick: async event => {
                              const $steps = {};

                              $steps["updateSelectShop"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["selectShop"]
                                      },
                                      operation: 0,
                                      value: currentItem
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateSelectShop"] != null &&
                                typeof $steps["updateSelectShop"] ===
                                  "object" &&
                                typeof $steps["updateSelectShop"].then ===
                                  "function"
                              ) {
                                $steps["updateSelectShop"] = await $steps[
                                  "updateSelectShop"
                                ];
                              }
                            },
                            onClickitemChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription3",
                                __plasmic_idx_0,
                                "clickitem"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onDiscountChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription3",
                                __plasmic_idx_0,
                                "discount"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onFullpriceChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription3",
                                __plasmic_idx_0,
                                "fullprice"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onPriceChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription3",
                                __plasmic_idx_0,
                                "price"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onTitleChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription3",
                                __plasmic_idx_0,
                                "title"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            price: generateStateValueProp($state, [
                              "subscription3",
                              __plasmic_idx_0,
                              "price"
                            ]),
                            title: generateStateValueProp($state, [
                              "subscription3",
                              __plasmic_idx_0,
                              "title"
                            ])
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "subscription3[].clickitem",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return (
                                        currentItem.id == $state.selectShop.id
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "subscription3[].title",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.name;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "subscription3[].price",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.price.toLocaleString();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 120000;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "subscription3[].discount",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.badge;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "subscription3[].fullprice",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.fullPrice.toLocaleString();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 0;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Subscription
                              data-plasmic-name={"subscription3"}
                              data-plasmic-override={overrides.subscription3}
                              {...child$Props}
                            >
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? (() => {
                                      try {
                                        return currentItem.topBadge
                                          ? true
                                          : false;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return currentItem.topBadge
                                          ? true
                                          : false;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___7Rznw
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__vneO9
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.topBadge;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              ) : null}
                            </Subscription>
                          );
                        })();
                      })}
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__weRwe)}
                    >
                      <Button
                        data-plasmic-name={"button14"}
                        data-plasmic-override={overrides.button14}
                        className={classNames("__wab_instance", sty.button14)}
                        color={generateStateValueProp($state, [
                          "button14",
                          "color"
                        ])}
                        endIcon={
                          <Icon12Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__gwTbF
                            )}
                            role={"img"}
                          />
                        }
                        isDisabled={(() => {
                          try {
                            return $state.loadingBtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        loading={(() => {
                          try {
                            return $state.loadingBtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateLoadingBtn"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadingBtn"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoadingBtn"] != null &&
                            typeof $steps["updateLoadingBtn"] === "object" &&
                            typeof $steps["updateLoadingBtn"].then ===
                              "function"
                          ) {
                            $steps["updateLoadingBtn"] = await $steps[
                              "updateLoadingBtn"
                            ];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://n8n.staas.ir/webhook/rest/shop/list",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          id: $state.selectShop.id,
                                          offCode: $state.discountCode,
                                          redirectUrl: $state.redirectUrl,
                                          authorization:
                                            localStorage.getItem("token")
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["goToPage"] =
                            $steps.invokeGlobalAction?.data?.success == true &&
                            $steps.invokeGlobalAction?.data?.result != false
                              ? (() => {
                                  const actionArgs = {
                                    destination: (() => {
                                      try {
                                        return $steps.invokeGlobalAction.data
                                          .result;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }

                          $steps["invokeGlobalAction2"] =
                            $steps.invokeGlobalAction?.data?.success == false ||
                            $steps.invokeGlobalAction?.data?.result == false
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                      "top-left"
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction2"] != null &&
                            typeof $steps["invokeGlobalAction2"] === "object" &&
                            typeof $steps["invokeGlobalAction2"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction2"] = await $steps[
                              "invokeGlobalAction2"
                            ];
                          }

                          $steps["updateLoadingBtn2"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadingBtn"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoadingBtn2"] != null &&
                            typeof $steps["updateLoadingBtn2"] === "object" &&
                            typeof $steps["updateLoadingBtn2"].then ===
                              "function"
                          ) {
                            $steps["updateLoadingBtn2"] = await $steps[
                              "updateLoadingBtn2"
                            ];
                          }
                        }}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button14",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__n7Er9
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return "فعال سازی " + $state.selectShop.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Button>
                      <Button
                        data-plasmic-name={"button10"}
                        data-plasmic-override={overrides.button10}
                        className={classNames("__wab_instance", sty.button10)}
                        color={generateStateValueProp($state, [
                          "button10",
                          "color"
                        ])}
                        endIcon={
                          <Icon12Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fdeE
                            )}
                            role={"img"}
                          />
                        }
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateDiscount"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["discount"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDiscount"] != null &&
                            typeof $steps["updateDiscount"] === "object" &&
                            typeof $steps["updateDiscount"].then === "function"
                          ) {
                            $steps["updateDiscount"] = await $steps[
                              "updateDiscount"
                            ];
                          }
                        }}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button10",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jWmyY
                          )}
                        >
                          {
                            "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u0645"
                          }
                        </div>
                      </Button>
                    </Stack__>
                    {(() => {
                      try {
                        return $state.discount;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__w1B4V
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zHm3X
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              )
                                ? false
                                : false,
                              autoFocus: hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              )
                                ? false
                                : false,
                              bordered: hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              )
                                ? false
                                : false,
                              className: classNames(
                                "__wab_instance",
                                sty.input5
                              ),
                              disabled: hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              )
                                ? false
                                : false,
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input5", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              placeholder:
                                "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f.",
                              prefix: null,
                              readOnly: hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              )
                                ? false
                                : false,
                              size: hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              )
                                ? "small"
                                : "small",
                              suffix: null,
                              value: generateStateValueProp($state, [
                                "input5",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input5.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input5"}
                                data-plasmic-override={overrides.input5}
                                {...child$Props}
                              />
                            );
                          })()}
                        </div>
                        <Button
                          data-plasmic-name={"button13"}
                          data-plasmic-override={overrides.button13}
                          className={classNames("__wab_instance", sty.button13)}
                          color={generateStateValueProp($state, [
                            "button13",
                            "color"
                          ])}
                          disabled={false}
                          isDisabled={(() => {
                            try {
                              return (
                                $state.input5.value == undefined ||
                                $state.input5.value == ""
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "isDisabled";
                              }
                              throw e;
                            }
                          })()}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateDiscountCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["discountCode"]
                                    },
                                    operation: 0,
                                    value: $state.input5.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDiscountCode"] != null &&
                              typeof $steps["updateDiscountCode"] ===
                                "object" &&
                              typeof $steps["updateDiscountCode"].then ===
                                "function"
                            ) {
                              $steps["updateDiscountCode"] = await $steps[
                                "updateDiscountCode"
                              ];
                            }
                          }}
                          onColorChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button13",
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ksWn9
                            )}
                          >
                            {"\u062a\u0627\u06cc\u06cc\u062f"}
                          </div>
                        </Button>
                      </Stack__>
                    ) : null}
                  </Stack__>
                </Dialog>
              </div>
            </section>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gf9Nm)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__u2M5M)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__vKrv)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $state.getData.data.result.infoBox.image;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {
                          src: "/plasmic/liom_hamyar/images/image70.svg",
                          fullWidth: 457,
                          fullHeight: 172,
                          aspectRatio: 2.656977
                        };
                      }
                      throw e;
                    }
                  })()}
                />

                <div className={classNames(projectcss.all, sty.freeBox__ugHiK)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__c84PF)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__e0Wqm)}
                    >
                      <Icon141Icon
                        className={classNames(projectcss.all, sty.svg__jpK1)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tvOdf
                        )}
                      >
                        {
                          "\u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u0648\u06cc\u0698\u0647\r"
                        }
                      </div>
                    </Stack__>
                    <Stack__
                      as={"ul"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.ul,
                        sty.ul__zqkb
                      )}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.getData.data.result.featureList;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              sty.li__ypGpP
                            )}
                            key={currentIndex}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateModalData"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["modalData"]
                                      },
                                      operation: 0,
                                      value: currentItem
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModalData"] != null &&
                                typeof $steps["updateModalData"] === "object" &&
                                typeof $steps["updateModalData"].then ===
                                  "function"
                              ) {
                                $steps["updateModalData"] = await $steps[
                                  "updateModalData"
                                ];
                              }

                              $steps["updateModalOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["modal", "open"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModalOpen"] != null &&
                                typeof $steps["updateModalOpen"] === "object" &&
                                typeof $steps["updateModalOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateModalOpen"] = await $steps[
                                  "updateModalOpen"
                                ];
                              }
                            }}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__qcQrj
                              )}
                              style={(() => {
                                try {
                                  return {
                                    "border-bottom":
                                      currentItem.Special == true
                                        ? "solid 1px #e0e0e0"
                                        : "none"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__iCzTc
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.boldTitle;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9\r";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <Icon142Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__iiaO
                                )}
                                role={"img"}
                              />
                            </Stack__>
                          </li>
                        );
                      })}
                    </Stack__>
                  </Stack__>
                  <AntdModal
                    data-plasmic-name={"modal"}
                    data-plasmic-override={overrides.modal}
                    className={classNames("__wab_instance", sty.modal)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    hideFooter={true}
                    maskClosable={true}
                    modalScopeClassName={sty["modal__modal"]}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "modal",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, ["modal", "open"])}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xUfZ3
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.modalData.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Modal title";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    }
                    trigger={null}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jGyPb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wf7MX
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.modalData.descc;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Modal content";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </AntdModal>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.freeBox__wvtzn,
                  "container"
                )}
                onTouchEnd={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              if (
                                event.changedTouches[0].clientX -
                                  $state.startX >
                                80
                              ) {
                                $state.timer = false;
                                run();
                                setTimeout(() => {
                                  $state.index =
                                    $state.index < $state.comments.length - 1
                                      ? $state.index + 1
                                      : 0;
                                }, 400);
                              } else if (
                                $state.startX -
                                  event.changedTouches[0].clientX >
                                80
                              ) {
                                $state.timer = false;
                                runReverse();
                                setTimeout(() => {
                                  $state.index =
                                    $state.index > 0
                                      ? $state.index - 1
                                      : $state.comments.length - 1;
                                }, 400);
                              }
                              function run() {
                                var comments =
                                  document.getElementById("commentBox");
                                comments.classList.remove(
                                  "slide-in",
                                  "slide-in-reverse",
                                  "slide-out-reverse"
                                );
                                void comments.offsetWidth;
                                comments.classList.add("slide-out");
                                setTimeout(function () {
                                  comments.classList.remove("slide-out");
                                  void comments.offsetWidth;
                                  comments.classList.add("slide-in");
                                }, 400);
                              }
                              function runReverse() {
                                var comments =
                                  document.getElementById("commentBox");
                                comments.classList.remove(
                                  "slide-in",
                                  "slide-out",
                                  "slide-in-reverse"
                                );
                                void comments.offsetWidth;
                                comments.classList.add("slide-out-reverse");
                                setTimeout(function () {
                                  comments.classList.remove(
                                    "slide-out-reverse"
                                  );
                                  void comments.offsetWidth;
                                  comments.classList.add("slide-in-reverse");
                                }, 400);
                              }
                              return function runReverse() {
                                var comments =
                                  document.getElementById("commentBox");
                                comments.classList.remove(
                                  "slide-in",
                                  "slide-out",
                                  "slide-in-reverse"
                                );
                                void comments.offsetWidth;
                                comments.classList.add("slide-out-reverse");
                                setTimeout(function () {
                                  comments.classList.remove(
                                    "slide-out-reverse"
                                  );
                                  void comments.offsetWidth;
                                  comments.classList.add("slide-in-reverse");
                                }, 400);
                              };
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = { args: [5000] };
                        return $globalActions["Fragment.wait"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["updateTimer"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["timer"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateTimer"] != null &&
                    typeof $steps["updateTimer"] === "object" &&
                    typeof $steps["updateTimer"].then === "function"
                  ) {
                    $steps["updateTimer"] = await $steps["updateTimer"];
                  }
                }}
                onTouchStart={async event => {
                  const $steps = {};

                  $steps["updateStartX"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["startX"]
                          },
                          operation: 0,
                          value: event.touches[0].clientX
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStartX"] != null &&
                    typeof $steps["updateStartX"] === "object" &&
                    typeof $steps["updateStartX"].then === "function"
                  ) {
                    $steps["updateStartX"] = await $steps["updateStartX"];
                  }
                }}
                overflow={``}
                position={``}
              >
                <div className={classNames(projectcss.all, sty.freeBox__i1DH)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__neu21
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.getData.data.result.socialProofBox
                            .title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0631\u0636\u0627\u06cc\u062a \u0634\u0645\u0627:";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Timer
                    data-plasmic-name={"timer"}
                    data-plasmic-override={overrides.timer}
                    className={classNames("__wab_instance", sty.timer)}
                    intervalSeconds={6}
                    isRunning={(() => {
                      try {
                        return $state.timer;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()}
                    onTick={async () => {
                      const $steps = {};

                      $steps["runCode2"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  var comments =
                                    document.getElementById("commentBox");
                                  comments.classList.remove(
                                    "slide-in",
                                    "slide-in-reverse",
                                    "slide-out-reverse"
                                  );
                                  void comments.offsetWidth;
                                  return comments.classList.add("slide-out");
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = { args: [400] };
                            return $globalActions["Fragment.wait"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  if ($state.index < $state.comments.length - 1)
                                    $state.index++;
                                  else $state.index = 0;
                                  var comments =
                                    document.getElementById("commentBox");
                                  comments.classList.remove("slide-out");
                                  void comments.offsetWidth;
                                  return comments.classList.add("slide-in");
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    runWhileEditing={true}
                  />
                </div>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.comments[$state.index];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const commentItem = __plasmic_item_0;
                  const commentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__zyTzf,
                        "slide-in"
                      )}
                      id={"commentBox"}
                      key={commentIndex}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kdyi8
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return [5, 4, 3, 2, 1];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_1, __plasmic_idx_1) => {
                          const currentItem = __plasmic_item_1;
                          const currentIndex = __plasmic_idx_1;
                          return (
                            <Star
                              data-plasmic-name={"star"}
                              data-plasmic-override={overrides.star}
                              action={(() => {
                                try {
                                  return currentItem <= 5;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames("__wab_instance", sty.star)}
                              key={currentIndex}
                            />
                          );
                        })}
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gjtvL
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hxyvq
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return commentItem.text;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vUhXl
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return commentItem.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </Stack__>
                  );
                })}
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.freeBox__pkOYm,
                  "parent"
                )}
                overflow={``}
                position={``}
              >
                <div className={classNames(projectcss.all, sty.freeBox__nmKiv)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3JvTq
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.getData.data.result.whyBuyBox.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0627\u06a9\u0627\u0646\u062a \u0648\u06cc\u0698\u0647 \u0686\u0647 \u0633\u0648\u062f\u06cc \u0628\u0631\u0627\u0645 \u062f\u0627\u0631\u0647\u061f\r";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___6YPir)}
                >
                  <Stack__
                    as={"ul"}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.ul,
                      sty.ul___3JJrw
                    )}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.getData.data.result.whyBuyBox.items;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            sty.li__r05
                          )}
                          key={currentIndex}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dvxYz
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yCFh
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___7Vl3E
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.text;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </li>
                      );
                    })}
                  </Stack__>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.freeBox__diiUf,
                  "parent"
                )}
                overflow={``}
                position={``}
              >
                <div className={classNames(projectcss.all, sty.freeBox__abn9W)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__suykh
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.getData.data.result.faqBox.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0633\u0648\u0627\u0644\u0627\u062a \u0645\u062a\u062f\u0627\u0648\u0644";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__sknCg)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.getData.data.result.faqBox.items;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (() => {
                      const child$Props = {
                        bordered: true,
                        className: classNames(
                          "__wab_instance",
                          sty.collapseMother
                        ),
                        expandIcon: (
                          <React.Fragment>
                            {(() => {
                              try {
                                return !$state.collapseMother[currentIndex]
                                  .open;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__eBsyD)}
                                displayHeight={"15px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"15px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/liom_hamyar/images/image32.svg",
                                  fullWidth: 16,
                                  fullHeight: 16,
                                  aspectRatio: 1
                                }}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return $state.collapseMother[currentIndex].open;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img___4R17Y)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"25px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/liom_hamyar/images/image31.svg",
                                  fullWidth: 16,
                                  fullHeight: 16,
                                  aspectRatio: 1
                                }}
                              />
                            ) : null}
                          </React.Fragment>
                        ),
                        expandIconPosition: "end",
                        forceRender: false,
                        ghost: true,
                        headerClass: classNames({
                          [sty["pcls_6gHfjq6Nj9km"]]: true
                        }),
                        key: currentIndex,
                        label2: (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__v0443
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fd2Xz
                              )}
                              style={(() => {
                                try {
                                  return {
                                    "border-bottom": $state.collapseMother[
                                      currentIndex
                                    ].open
                                      ? "none"
                                      : "solid 1px #e0e0e0"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0635\u062d\u0628\u062a \u0628\u0627 \u0645\u0627\u062f\u0631";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            {(() => {
                              try {
                                return !$state.collapseMother[currentIndex]
                                  .open;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__xhAvu)}
                                displayHeight={"15px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"15px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/liom_hamyar/images/image32.svg",
                                  fullWidth: 16,
                                  fullHeight: 16,
                                  aspectRatio: 1
                                }}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return $state.collapseMother[currentIndex].open;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__mRCxi)}
                                displayHeight={"25px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"25px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/liom_hamyar/images/image31.svg",
                                  fullWidth: 16,
                                  fullHeight: 16,
                                  aspectRatio: 1
                                }}
                              />
                            ) : null}
                          </div>
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "open",
                            ["collapseMother", __plasmic_idx_0, "open"],
                            AntdSingleCollapse_Helpers
                          ).apply(null, eventArgs);
                        },
                        open: generateStateValueProp($state, [
                          "collapseMother",
                          __plasmic_idx_0,
                          "open"
                        ]),
                        showArrow: false,
                        size: "small"
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "open",
                            plasmicStateName: "collapseMother[].open"
                          }
                        ],
                        [__plasmic_idx_0],
                        AntdSingleCollapse_Helpers ?? {},
                        child$Props
                      );
                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "collapseMother[].open",
                            initFunc: ({ $props, $state, $queries }) =>
                              undefined
                          }
                        ],
                        [__plasmic_idx_0]
                      );
                      return (
                        <AntdSingleCollapse
                          data-plasmic-name={"collapseMother"}
                          data-plasmic-override={overrides.collapseMother}
                          {...child$Props}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aqd5C
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.text;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </AntdSingleCollapse>
                      );
                    })();
                  })}
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.freeBox___5BtHg,
                  "parent"
                )}
                overflow={``}
                position={``}
              />
            </Stack__>
          </ApiRequest>
          <ApiRequest
            data-plasmic-name={"shopDialog"}
            data-plasmic-override={overrides.shopDialog}
            children={null}
            className={classNames("__wab_instance", sty.shopDialog)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cngxS
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={null}
            method={"POST"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shopDialog", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "shopDialog",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shopDialog", "data"]).apply(
                null,
                eventArgs
              );
            }}
            url={"https://n8n.staas.ir/webhook/hamyar/shop"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLiom",
    "getData",
    "input4",
    "button12",
    "button8",
    "button9",
    "p",
    "dialog2",
    "subscription3",
    "button14",
    "button10",
    "input5",
    "button13",
    "modal",
    "timer",
    "star",
    "collapseMother",
    "shopDialog"
  ],
  headerLiom: ["headerLiom"],
  getData: [
    "getData",
    "input4",
    "button12",
    "button8",
    "button9",
    "p",
    "dialog2",
    "subscription3",
    "button14",
    "button10",
    "input5",
    "button13",
    "modal",
    "timer",
    "star",
    "collapseMother"
  ],
  input4: ["input4"],
  button12: ["button12"],
  button8: ["button8"],
  button9: ["button9"],
  p: ["p"],
  dialog2: [
    "dialog2",
    "subscription3",
    "button14",
    "button10",
    "input5",
    "button13"
  ],
  subscription3: ["subscription3"],
  button14: ["button14"],
  button10: ["button10"],
  input5: ["input5"],
  button13: ["button13"],
  modal: ["modal"],
  timer: ["timer"],
  star: ["star"],
  collapseMother: ["collapseMother"],
  shopDialog: ["shopDialog"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLiom: typeof HeaderLiom;
  getData: typeof ApiRequest;
  input4: typeof AntdInput;
  button12: typeof Button;
  button8: typeof Button;
  button9: typeof Button;
  p: "p";
  dialog2: typeof Dialog;
  subscription3: typeof Subscription;
  button14: typeof Button;
  button10: typeof Button;
  input5: typeof AntdInput;
  button13: typeof Button;
  modal: typeof AntdModal;
  timer: typeof Timer;
  star: typeof Star;
  collapseMother: typeof AntdSingleCollapse;
  shopDialog: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShop__VariantsArgs;
    args?: PlasmicShop__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShop__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicShop__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShop__ArgProps,
          internalVariantPropNames: PlasmicShop__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShop";
  } else {
    func.displayName = `PlasmicShop.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicShop = Object.assign(
  // Top-level PlasmicShop renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    headerLiom: makeNodeComponent("headerLiom"),
    getData: makeNodeComponent("getData"),
    input4: makeNodeComponent("input4"),
    button12: makeNodeComponent("button12"),
    button8: makeNodeComponent("button8"),
    button9: makeNodeComponent("button9"),
    p: makeNodeComponent("p"),
    dialog2: makeNodeComponent("dialog2"),
    subscription3: makeNodeComponent("subscription3"),
    button14: makeNodeComponent("button14"),
    button10: makeNodeComponent("button10"),
    input5: makeNodeComponent("input5"),
    button13: makeNodeComponent("button13"),
    modal: makeNodeComponent("modal"),
    timer: makeNodeComponent("timer"),
    star: makeNodeComponent("star"),
    collapseMother: makeNodeComponent("collapseMother"),
    shopDialog: makeNodeComponent("shopDialog"),

    // Metadata about props expected for PlasmicShop
    internalVariantProps: PlasmicShop__VariantProps,
    internalArgProps: PlasmicShop__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicShop;
/* prettier-ignore-end */
