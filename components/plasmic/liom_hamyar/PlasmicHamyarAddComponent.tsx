/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: RArtpE5tE0Da

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicHamyarAddComponent.module.css"; // plasmic-import: RArtpE5tE0Da/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: rjflJ2D4OoXB/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicHamyarAddComponent__VariantMembers = {};
export type PlasmicHamyarAddComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicHamyarAddComponent__VariantsArgs;
export const PlasmicHamyarAddComponent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHamyarAddComponent__ArgsType = { token2?: string };
type ArgPropType = keyof PlasmicHamyarAddComponent__ArgsType;
export const PlasmicHamyarAddComponent__ArgProps = new Array<ArgPropType>(
  "token2"
);

export type PlasmicHamyarAddComponent__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  section?: Flex__<"section">;
  textInput?: Flex__<typeof TextInput>;
  svg?: Flex__<"svg">;
  antdInput?: Flex__<typeof Input>;
  textInput2?: Flex__<typeof TextInput>;
  antdInput2?: Flex__<typeof Input>;
  button3?: Flex__<typeof Button>;
};

export interface DefaultHamyarAddComponentProps {
  token2?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamyarAddComponent__RenderFunc(props: {
  variants: PlasmicHamyarAddComponent__VariantsArgs;
  args: PlasmicHamyarAddComponent__ArgsType;
  overrides: PlasmicHamyarAddComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          token2:
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImI5MmFlY2UzLWIyOTItNGEwOS1hZDc0LTIxZTA4NzQxZGNlNiIsInR5cGUiOiJzZXNzaW9uIn0.wa2BGGpGdL49QTwXPhcp0xHwW3h9KCp5nPVJ_fSOD5U"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "relation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "husband"
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userinfo.healthStatus == "pregnancy"
                ? "hamyarPregnancy"
                : "hamyar";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "masseg",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "errror",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "popoverOpen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [false, false]
      },
      {
        path: "removeItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loadingBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "v",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "errorMassege",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "v2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "userinfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "info",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "shopType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___82WBx)}>
        <SideEffect
          data-plasmic-name={"sideEffect"}
          data-plasmic-override={overrides.sideEffect}
          className={classNames("__wab_instance", sty.sideEffect)}
          onMount={async () => {
            const $steps = {};

            $steps["info"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      "https://n8n.staas.ir/webhook/rest/user/hamyar/info",
                      (() => {
                        try {
                          return {
                            authorization: $props.token2,
                            type: "hamyar"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["info"] != null &&
              typeof $steps["info"] === "object" &&
              typeof $steps["info"].then === "function"
            ) {
              $steps["info"] = await $steps["info"];
            }

            $steps["updateInfo"] = $steps.info?.data
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["info"]
                    },
                    operation: 0,
                    value: $steps.info.data
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateInfo"] != null &&
              typeof $steps["updateInfo"] === "object" &&
              typeof $steps["updateInfo"].then === "function"
            ) {
              $steps["updateInfo"] = await $steps["updateInfo"];
            }

            $steps["updateLoading"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["loading"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateLoading"] != null &&
              typeof $steps["updateLoading"] === "object" &&
              typeof $steps["updateLoading"].then === "function"
            ) {
              $steps["updateLoading"] = await $steps["updateLoading"];
            }
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox__vYz1X)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__sOtPa)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"300px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/liom_hamyar/images/image7.png",
              fullWidth: 1302,
              fullHeight: 900,
              aspectRatio: undefined
            }}
          />
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__r5GB4)}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__noCaz)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobile") ? "100%" : "50%"
            }
            loading={"lazy"}
            src={(() => {
              try {
                return $state.info.result.background;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {
                    src: "/plasmic/liom_hamyar/images/image80.png",
                    fullWidth: 852,
                    fullHeight: 879,
                    aspectRatio: undefined
                  };
                }
                throw e;
              }
            })()}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2A3GX
            )}
          >
            {
              "\u0647\u0645\u06cc\u0627\u0631\u062a \u0631\u0648 \u0628\u0647 \u0644\u06cc\u0648\u0645 \u0628\u06cc\u0627\u0631 ....."
            }
          </div>
          {(() => {
            try {
              return ($state.info?.result?.text ?? "") == "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__m4HCh)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__gezoF,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___85V,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__ozDdU,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__utnP,
                  "shimmer"
                )}
              />
            </Stack__>
          ) : null}
          {(() => {
            try {
              return ($state.info?.result?.text ?? "") != "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zgLv
              )}
            >
              <div
                className={projectcss.__wab_expr_html_text}
                dangerouslySetInnerHTML={{ __html: $state.info.result.text }}
              />
            </div>
          ) : null}
        </Stack__>
        <section
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames(projectcss.all, sty.section)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__p68Yo)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__owf7T
              )}
            >
              {
                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0647\u0645\u06cc\u0627\u0631\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
              }
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__lnTt5)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bZf3
                )}
              >
                {
                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__s9NLf,
                  "negative"
                )}
              >
                <TextInput
                  data-plasmic-name={"textInput"}
                  data-plasmic-override={overrides.textInput}
                  antdInput2={(() => {
                    const child$Props = {
                      "aria-label": ``,
                      bordered: false,
                      className: classNames("__wab_instance", sty.antdInput),
                      id: "inputMobile1",
                      maxLength: (() => {
                        try {
                          return $state.number.startsWith("0") ? 11 : 10;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["antdInput", "value"],
                          Input_Helpers
                        ).apply(null, eventArgs);

                        (async event => {
                          const $steps = {};

                          $steps["updateNumber"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["number"]
                                  },
                                  operation: 0,
                                  value: $state.antdInput.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateNumber"] != null &&
                            typeof $steps["updateNumber"] === "object" &&
                            typeof $steps["updateNumber"].then === "function"
                          ) {
                            $steps["updateNumber"] = await $steps[
                              "updateNumber"
                            ];
                          }
                        }).apply(null, eventArgs);
                      },
                      placeholder: "9123456789",
                      size: "large",
                      type: "tel",
                      value: generateStateValueProp($state, [
                        "antdInput",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "antdInput.value"
                        }
                      ],
                      [],
                      Input_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <Input
                        data-plasmic-name={"antdInput"}
                        data-plasmic-override={overrides.antdInput}
                        {...child$Props}
                      />
                    );
                  })()}
                  className={classNames("__wab_instance", sty.textInput)}
                  endIcon={
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ziwC8
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uScU1,
                          "negative"
                        )}
                      >
                        {"+98 "}
                      </div>
                      <Icon111Icon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    </React.Fragment>
                  }
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["textInput", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }

                    (async event => {
                      const $steps = {};
                    }).apply(null, eventArgs);
                  }}
                  placeholder={"09123456789"}
                  required={false}
                  showEndIcon={true}
                  type={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "tel"
                      : "tel"
                  }
                  value={
                    generateStateValueProp($state, ["textInput", "value"]) ?? ""
                  }
                />
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__riMmE)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___1PJL)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__esRp2
                  )}
                >
                  {
                    "\u0646\u0627\u0645 \u0647\u0645\u06cc\u0627\u0631 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__mKuph,
                    "negative"
                  )}
                >
                  <TextInput
                    data-plasmic-name={"textInput2"}
                    data-plasmic-override={overrides.textInput2}
                    antdInput2={(() => {
                      const child$Props = {
                        "aria-label": ``,
                        bordered: false,
                        className: classNames("__wab_instance", sty.antdInput2),
                        id: "inputMobile1",
                        maxLength: (() => {
                          try {
                            return $state.number.startsWith("0") ? 11 : 10;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["antdInput2", "value"],
                            Input_Helpers
                          ).apply(null, eventArgs);

                          (async event => {
                            const $steps = {};

                            $steps["updateName"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["name"]
                                    },
                                    operation: 0,
                                    value: $state.antdInput2.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateName"] != null &&
                              typeof $steps["updateName"] === "object" &&
                              typeof $steps["updateName"].then === "function"
                            ) {
                              $steps["updateName"] = await $steps["updateName"];
                            }
                          }).apply(null, eventArgs);
                        },
                        placeholder:
                          "\u0645\u062b\u0644\u0627 \u0639\u0644\u06cc\u060c \u0639\u0634\u0642\u0645\u060c \u0645\u0627\u0645\u0627\u0646 \u0632\u0647\u0631\u0647\u060c \u0628\u0627\u0628\u0627\u060c \u0645\u06cc\u0646\u0627\u060c ...",
                        size: "large",
                        type: "text",
                        value: generateStateValueProp($state, [
                          "antdInput2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "antdInput2.value"
                          }
                        ],
                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Input
                          data-plasmic-name={"antdInput2"}
                          data-plasmic-override={overrides.antdInput2}
                          {...child$Props}
                        />
                      );
                    })()}
                    className={classNames("__wab_instance", sty.textInput2)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput2",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async event => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"09123456789"}
                    required={false}
                    type={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "tel"
                        : "text"
                    }
                    value={
                      generateStateValueProp($state, ["textInput2", "value"]) ??
                      ""
                    }
                  />
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
        </section>
        <div className={classNames(projectcss.all, sty.freeBox__e91Ag)}>
          <Button
            data-plasmic-name={"button3"}
            data-plasmic-override={overrides.button3}
            className={classNames("__wab_instance", sty.button3)}
            color={generateStateValueProp($state, ["button3", "color"])}
            isDisabled={(() => {
              try {
                return (
                  $state.name.length == 0 ||
                  $state.relation.length == 0 ||
                  $state.loadingBtn
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            loading={(() => {
              try {
                return $state.loadingBtn;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            onClick={async event => {
              const $steps = {};

              $steps["updateLoadingBtn2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["loadingBtn"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateLoadingBtn2"] != null &&
                typeof $steps["updateLoadingBtn2"] === "object" &&
                typeof $steps["updateLoadingBtn2"].then === "function"
              ) {
                $steps["updateLoadingBtn2"] = await $steps["updateLoadingBtn2"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "PUT",
                        "https://n8n.staas.ir/webhook/rest/user/hamyar/add",
                        undefined,
                        (() => {
                          try {
                            return {
                              authorization: $props.token2,
                              mobile: $state.number,
                              name: $state.name,
                              type: $state.type,
                              relation: $state.relation
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["invokeGlobalAction2"] =
                $steps.invokeGlobalAction?.data?.success == true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "success",
                          "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f.",
                          "bottom-center"
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction2"] != null &&
                typeof $steps["invokeGlobalAction2"] === "object" &&
                typeof $steps["invokeGlobalAction2"].then === "function"
              ) {
                $steps["invokeGlobalAction2"] = await $steps[
                  "invokeGlobalAction2"
                ];
              }

              $steps["updateMasseg"] =
                $steps.invokeGlobalAction?.data?.success == true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["masseg"]
                        },
                        operation: 0,
                        value: $steps.invokeGlobalAction.data.result
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateMasseg"] != null &&
                typeof $steps["updateMasseg"] === "object" &&
                typeof $steps["updateMasseg"].then === "function"
              ) {
                $steps["updateMasseg"] = await $steps["updateMasseg"];
              }

              $steps["updateErrror"] =
                $steps.invokeGlobalAction?.data?.success == false
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["errror"]
                        },
                        operation: 0,
                        value: $steps.invokeGlobalAction.data.error
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateErrror"] != null &&
                typeof $steps["updateErrror"] === "object" &&
                typeof $steps["updateErrror"].then === "function"
              ) {
                $steps["updateErrror"] = await $steps["updateErrror"];
              }

              $steps["invokeGlobalAction3"] =
                $steps.invokeGlobalAction?.data?.success == false
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          (() => {
                            try {
                              return $state.errror.message;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          "bottom-center",
                          10000
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction3"] != null &&
                typeof $steps["invokeGlobalAction3"] === "object" &&
                typeof $steps["invokeGlobalAction3"].then === "function"
              ) {
                $steps["invokeGlobalAction3"] = await $steps[
                  "invokeGlobalAction3"
                ];
              }

              $steps["updateV"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["v"]
                      },
                      operation: 0,
                      value: $state.v + "s"
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateV"] != null &&
                typeof $steps["updateV"] === "object" &&
                typeof $steps["updateV"].then === "function"
              ) {
                $steps["updateV"] = await $steps["updateV"];
              }

              $steps["updateLoadingBtn"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["loadingBtn"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateLoadingBtn"] != null &&
                typeof $steps["updateLoadingBtn"] === "object" &&
                typeof $steps["updateLoadingBtn"].then === "function"
              ) {
                $steps["updateLoadingBtn"] = await $steps["updateLoadingBtn"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.antdInput.value = "";
                          return ($state.antdInput2.value = "");
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
            onColorChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button3", "color"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6T3GO
              )}
            >
              {"\u062a\u0627\u06cc\u06cc\u062f"}
            </div>
          </Button>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "section",
    "textInput",
    "svg",
    "antdInput",
    "textInput2",
    "antdInput2",
    "button3"
  ],
  sideEffect: ["sideEffect"],
  section: [
    "section",
    "textInput",
    "svg",
    "antdInput",
    "textInput2",
    "antdInput2"
  ],
  textInput: ["textInput", "svg", "antdInput"],
  svg: ["svg"],
  antdInput: ["antdInput"],
  textInput2: ["textInput2", "antdInput2"],
  antdInput2: ["antdInput2"],
  button3: ["button3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  section: "section";
  textInput: typeof TextInput;
  svg: "svg";
  antdInput: typeof Input;
  textInput2: typeof TextInput;
  antdInput2: typeof Input;
  button3: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamyarAddComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamyarAddComponent__VariantsArgs;
    args?: PlasmicHamyarAddComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamyarAddComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHamyarAddComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamyarAddComponent__ArgProps,
          internalVariantPropNames: PlasmicHamyarAddComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamyarAddComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHamyarAddComponent";
  } else {
    func.displayName = `PlasmicHamyarAddComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicHamyarAddComponent = Object.assign(
  // Top-level PlasmicHamyarAddComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    section: makeNodeComponent("section"),
    textInput: makeNodeComponent("textInput"),
    svg: makeNodeComponent("svg"),
    antdInput: makeNodeComponent("antdInput"),
    textInput2: makeNodeComponent("textInput2"),
    antdInput2: makeNodeComponent("antdInput2"),
    button3: makeNodeComponent("button3"),

    // Metadata about props expected for PlasmicHamyarAddComponent
    internalVariantProps: PlasmicHamyarAddComponent__VariantProps,
    internalArgProps: PlasmicHamyarAddComponent__ArgProps
  }
);

export default PlasmicHamyarAddComponent;
/* prettier-ignore-end */
