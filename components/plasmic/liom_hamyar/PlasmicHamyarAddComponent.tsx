/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: RArtpE5tE0Da

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicHamyarAddComponent.module.css"; // plasmic-import: RArtpE5tE0Da/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: rjflJ2D4OoXB/icon

createPlasmicElementProxy;

export type PlasmicHamyarAddComponent__VariantMembers = {};
export type PlasmicHamyarAddComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicHamyarAddComponent__VariantsArgs;
export const PlasmicHamyarAddComponent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHamyarAddComponent__ArgsType = {
  number?: string;
  onNumberChange?: (val: string) => void;
  name?: string;
  onNameChange?: (val: string) => void;
  relation?: string;
  onRelationChange?: (val: string) => void;
  token2?: string;
  goNext?: boolean;
  onGoNextChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicHamyarAddComponent__ArgsType;
export const PlasmicHamyarAddComponent__ArgProps = new Array<ArgPropType>(
  "number",
  "onNumberChange",
  "name",
  "onNameChange",
  "relation",
  "onRelationChange",
  "token2",
  "goNext",
  "onGoNextChange"
);

export type PlasmicHamyarAddComponent__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  img?: Flex__<typeof PlasmicImg__>;
  textInput?: Flex__<typeof TextInput>;
  svg?: Flex__<"svg">;
  antdInput?: Flex__<typeof Input>;
  textInput2?: Flex__<typeof TextInput>;
  antdInput2?: Flex__<typeof Input>;
};

export interface DefaultHamyarAddComponentProps {
  number?: string;
  onNumberChange?: (val: string) => void;
  name?: string;
  onNameChange?: (val: string) => void;
  relation?: string;
  onRelationChange?: (val: string) => void;
  token2?: string;
  goNext?: boolean;
  onGoNextChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamyarAddComponent__RenderFunc(props: {
  variants: PlasmicHamyarAddComponent__VariantsArgs;
  args: PlasmicHamyarAddComponent__ArgsType;
  overrides: PlasmicHamyarAddComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          token2:
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImI5MmFlY2UzLWIyOTItNGEwOS1hZDc0LTIxZTA4NzQxZGNlNiIsInR5cGUiOiJzZXNzaW9uIn0.wa2BGGpGdL49QTwXPhcp0xHwW3h9KCp5nPVJ_fSOD5U"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "number",
        type: "writable",
        variableType: "text",

        valueProp: "number",
        onChangeProp: "onNumberChange"
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "name",
        type: "writable",
        variableType: "text",

        valueProp: "name",
        onChangeProp: "onNameChange"
      },
      {
        path: "relation",
        type: "writable",
        variableType: "text",

        valueProp: "relation",
        onChangeProp: "onRelationChange"
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userinfo.healthStatus == "pregnancy"
                ? "hamyarPregnancy"
                : "hamyar";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "userinfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "goNext",
        type: "writable",
        variableType: "boolean",

        valueProp: "goNext",
        onChangeProp: "onGoNextChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___4TcwS)}>
          <div className={classNames(projectcss.all, sty.freeBox__vYz1X)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"300px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image7.png",
                fullWidth: 1302,
                fullHeight: 900,
                aspectRatio: undefined
              }}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__l1SbY)}>
            <div className={classNames(projectcss.all, sty.freeBox__p68Yo)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__owf7T
                )}
              >
                {
                  "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0647\u0645\u06cc\u0627\u0631\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__lnTt5)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bZf3
                  )}
                >
                  {
                    "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__s9NLf,
                    "negative"
                  )}
                >
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    antdInput2={(() => {
                      const child$Props = {
                        "aria-label": ``,
                        bordered: false,
                        className: classNames("__wab_instance", sty.antdInput),
                        id: "inputMobile1",
                        maxLength: (() => {
                          try {
                            return $state.number.startsWith("0") ? 11 : 10;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["antdInput", "value"],
                            Input_Helpers
                          ).apply(null, eventArgs);

                          (async event => {
                            const $steps = {};

                            $steps["updateNumber"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["number"]
                                    },
                                    operation: 0,
                                    value: $state.antdInput.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateNumber"] != null &&
                              typeof $steps["updateNumber"] === "object" &&
                              typeof $steps["updateNumber"].then === "function"
                            ) {
                              $steps["updateNumber"] = await $steps[
                                "updateNumber"
                              ];
                            }
                          }).apply(null, eventArgs);
                        },
                        placeholder: "9123456789",
                        size: "large",
                        type: "tel",
                        value: generateStateValueProp($state, [
                          "antdInput",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "antdInput.value"
                          }
                        ],
                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Input
                          data-plasmic-name={"antdInput"}
                          data-plasmic-override={overrides.antdInput}
                          {...child$Props}
                        />
                      );
                    })()}
                    className={classNames("__wab_instance", sty.textInput)}
                    endIcon={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ziwC8
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uScU1,
                            "negative"
                          )}
                        >
                          {"+98 "}
                        </div>
                        <Icon111Icon
                          data-plasmic-name={"svg"}
                          data-plasmic-override={overrides.svg}
                          className={classNames(projectcss.all, sty.svg)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async event => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"09123456789"}
                    required={false}
                    showEndIcon={true}
                    type={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "tel"
                        : "tel"
                    }
                    value={
                      generateStateValueProp($state, ["textInput", "value"]) ??
                      ""
                    }
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__riMmE)}>
                <div className={classNames(projectcss.all, sty.freeBox___1PJL)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__esRp2
                    )}
                  >
                    {
                      "\u0646\u0627\u0645 \u0647\u0645\u06cc\u0627\u0631 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__mKuph,
                      "negative"
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"textInput2"}
                      data-plasmic-override={overrides.textInput2}
                      antdInput2={(() => {
                        const child$Props = {
                          "aria-label": ``,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdInput2
                          ),
                          id: "inputMobile1",
                          maxLength: (() => {
                            try {
                              return $state.number.startsWith("0") ? 11 : 10;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["antdInput2", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};

                              $steps["updateName"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["name"]
                                      },
                                      operation: 0,
                                      value: $state.antdInput2.value
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateName"] != null &&
                                typeof $steps["updateName"] === "object" &&
                                typeof $steps["updateName"].then === "function"
                              ) {
                                $steps["updateName"] = await $steps[
                                  "updateName"
                                ];
                              }
                            }).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u0645\u062b\u0644\u0627 \u0639\u0644\u06cc\u060c \u0639\u0634\u0642\u0645\u060c \u0645\u0627\u0645\u0627\u0646 \u0632\u0647\u0631\u0647\u060c \u0628\u0627\u0628\u0627\u060c \u0645\u06cc\u0646\u0627\u060c ...",
                          size: "large",
                          type: "text",
                          value: generateStateValueProp($state, [
                            "antdInput2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "antdInput2.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"antdInput2"}
                            data-plasmic-override={overrides.antdInput2}
                            {...child$Props}
                          />
                        );
                      })()}
                      className={classNames("__wab_instance", sty.textInput2)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput2",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async event => {
                          const $steps = {};
                        }).apply(null, eventArgs);
                      }}
                      placeholder={"09123456789"}
                      required={false}
                      type={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "tel"
                          : "text"
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput2",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "img",
    "textInput",
    "svg",
    "antdInput",
    "textInput2",
    "antdInput2"
  ],
  section: [
    "section",
    "img",
    "textInput",
    "svg",
    "antdInput",
    "textInput2",
    "antdInput2"
  ],
  img: ["img"],
  textInput: ["textInput", "svg", "antdInput"],
  svg: ["svg"],
  antdInput: ["antdInput"],
  textInput2: ["textInput2", "antdInput2"],
  antdInput2: ["antdInput2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  img: typeof PlasmicImg__;
  textInput: typeof TextInput;
  svg: "svg";
  antdInput: typeof Input;
  textInput2: typeof TextInput;
  antdInput2: typeof Input;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamyarAddComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamyarAddComponent__VariantsArgs;
    args?: PlasmicHamyarAddComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamyarAddComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHamyarAddComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamyarAddComponent__ArgProps,
          internalVariantPropNames: PlasmicHamyarAddComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamyarAddComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHamyarAddComponent";
  } else {
    func.displayName = `PlasmicHamyarAddComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicHamyarAddComponent = Object.assign(
  // Top-level PlasmicHamyarAddComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    img: makeNodeComponent("img"),
    textInput: makeNodeComponent("textInput"),
    svg: makeNodeComponent("svg"),
    antdInput: makeNodeComponent("antdInput"),
    textInput2: makeNodeComponent("textInput2"),
    antdInput2: makeNodeComponent("antdInput2"),

    // Metadata about props expected for PlasmicHamyarAddComponent
    internalVariantProps: PlasmicHamyarAddComponent__VariantProps,
    internalArgProps: PlasmicHamyarAddComponent__ArgProps
  }
);

export default PlasmicHamyarAddComponent;
/* prettier-ignore-end */
