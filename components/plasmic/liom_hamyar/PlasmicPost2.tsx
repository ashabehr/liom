/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: iNHFQ5RIM3Tb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import RepeatPost2 from "../../RepeatPost2"; // plasmic-import: GCktZfOzFzbJ/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import RadioGrop from "../../RadioGrop"; // plasmic-import: mcNKMbL_6N75/component
import Comment from "../../Comment"; // plasmic-import: Q00r5f4C3XYv/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import LineClomp from "../../LineClomp"; // plasmic-import: XsM8QG4wUKlk/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import ComingSoon from "../../ComingSoon"; // plasmic-import: -rGZlxMT1IH0/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicPost2.module.css"; // plasmic-import: iNHFQ5RIM3Tb/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon144Icon from "./icons/PlasmicIcon__Icon144"; // plasmic-import: 1DQk0pCQHybZ/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon184Icon from "./icons/PlasmicIcon__Icon184"; // plasmic-import: qyxzNL8K38N5/icon
import Icon247Icon from "./icons/PlasmicIcon__Icon247"; // plasmic-import: H5aVrrGZ_wnt/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: 8DTE5iQ0tvze/icon
import Icon227Icon from "./icons/PlasmicIcon__Icon227"; // plasmic-import: HYZYMCyfZITX/icon
import XIcon2 from "../fragment_icons/icons/PlasmicIcon__X"; // plasmic-import: zb1oqVXdrxPK/icon
import LogoPwaSvgrepoComSvgIcon from "./icons/PlasmicIcon__LogoPwaSvgrepoComSvg"; // plasmic-import: xd3icqtlIdjI/icon
import IconSvgIcon from "./icons/PlasmicIcon__IconSvg"; // plasmic-import: -XPXy44VZe9n/icon
import CafeBazaarLogoSvgIcon from "./icons/PlasmicIcon__CafeBazaarLogoSvg"; // plasmic-import: W_GsLw69YDUh/icon
import BrokenLink2SvgrepoComSvgIcon from "./icons/PlasmicIcon__BrokenLink2SvgrepoComSvg"; // plasmic-import: blnLvMghko66/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicPost2__VariantMembers = {};
export type PlasmicPost2__VariantsArgs = {};
type VariantPropType = keyof PlasmicPost2__VariantsArgs;
export const PlasmicPost2__VariantProps = new Array<VariantPropType>();

export type PlasmicPost2__ArgsType = {};
type ArgPropType = keyof PlasmicPost2__ArgsType;
export const PlasmicPost2__ArgProps = new Array<ArgPropType>();

export type PlasmicPost2__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  getInfo?: Flex__<typeof ApiRequest>;
  loding?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  repeatPost2?: Flex__<typeof RepeatPost2>;
  popover?: Flex__<typeof AntdPopover>;
  radioGrop?: Flex__<typeof RadioGrop>;
  comment?: Flex__<typeof Comment>;
  reveal?: Flex__<typeof Reveal>;
  textArea?: Flex__<typeof AntdTextArea>;
  lineClomp?: Flex__<typeof LineClomp>;
  lineClomp2?: Flex__<typeof LineClomp>;
  timer?: Flex__<typeof Timer>;
  modal?: Flex__<typeof AntdModal>;
  img?: Flex__<typeof PlasmicImg__>;
  comingSoon?: Flex__<typeof ComingSoon>;
};

export interface DefaultPost2Props {}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPost2__RenderFunc(props: {
  variants: PlasmicPost2__VariantsArgs;
  args: PlasmicPost2__ArgsType;
  overrides: PlasmicPost2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getInfo.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getInfo.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getInfo.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImJkMTdiNmJkLTkzZmYtNGYzZS04ZGYzLTQwMDNkOTU2NGJkOCIsInR5cGUiOiJzZXNzaW9uIiwiaWF0IjoxNzQ2MjU3MDQ1fQ.VGtD4MdU57dGqdh7uxLTL3lCugmBcv_kybVqfb_2dSI"
      },
      {
        path: "comment[].commentData",
        type: "private",
        variableType: "object"
      },
      {
        path: "comments",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getInfo.data.result.comments;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "postId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $ctx.query.post ||
                new URLSearchParams(window.location.search).get("post")
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "order",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return ["newest", "likeCount", "replyCount "];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return ["newest", "likeCount", "replyCount "];
              }
              throw e;
            }
          })()
      },
      {
        path: "orderby",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          label:
            "\u062c\u062f\u06cc\u062f\u062a\u0631\u06cc\u0646 \u0647\u0627",
          value: "newest"
        })
      },
      {
        path: "egToFa",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "hasMore",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "openPop",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "currentUserDataAfterClick",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "lineClomp.line",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lineClomp2.line",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "shere",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "comingSoon.selectShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "comingSoon.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "comment[].like",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "editComment",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loadingSend",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiGetInfo",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.token != "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "repeatPost2.main",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "repeatPost2.comment",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                active: $state.comments.find(
                  item => item.user.id == $state.user.id
                )
                  ? true
                  : false,
                number: $state.getInfo.data.result.details.commentCount
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["params"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          return urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["params"] != null &&
                typeof $steps["params"] === "object" &&
                typeof $steps["params"].then === "function"
              ) {
                $steps["params"] = await $steps["params"];
              }

              $steps["clearParams"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const searchParams = new URLSearchParams(
                            window.location.search
                          );
                          searchParams.delete("token");
                          searchParams.delete("userId");
                          searchParams.delete("user_id");
                          const newUrl = `${
                            window.location.pathname
                          }?${searchParams.toString()}`;
                          return window.history.replaceState(null, "", newUrl);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["clearParams"] != null &&
                typeof $steps["clearParams"] === "object" &&
                typeof $steps["clearParams"].then === "function"
              ) {
                $steps["clearParams"] = await $steps["clearParams"];
              }

              $steps["setCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (
                            $state.paramsObject.token !== undefined &&
                            $state.paramsObject.token?.trim() !== ""
                          ) {
                            if (!$state.paramsObject.token.startsWith("ey"))
                              $state.paramsObject.token =
                                $state.paramsObject.token.slice(6, -3);
                            var setCookie = (name, value, days) => {
                              const expires = new Date(
                                Date.now() + days * 86400000
                              ).toUTCString();
                              document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                            };
                            return setCookie(
                              "token",
                              JSON.stringify([$state.paramsObject.token]),
                              100
                            );
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["setCookie"] != null &&
                typeof $steps["setCookie"] === "object" &&
                typeof $steps["setCookie"].then === "function"
              ) {
                $steps["setCookie"] = await $steps["setCookie"];
              }

              $steps["getCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var getCookie = name => {
                            const cookies = document.cookie.split("; ");
                            for (let cookie of cookies) {
                              const [key, value] = cookie.split("=");
                              if (key === name) return JSON.parse(value)[0];
                            }
                            return "";
                          };
                          return ($state.token = getCookie("token"));
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getCookie"] != null &&
                typeof $steps["getCookie"] === "object" &&
                typeof $steps["getCookie"].then === "function"
              ) {
                $steps["getCookie"] = await $steps["getCookie"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if ($state.token == "" && $ctx.query.share == true)
                            return ($state.token =
                              "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImI5MmFlY2UzLWIyOTItNGEwOS1hZDc0LTIxZTA4NzQxZGNlNiIsInR5cGUiOiJzZXNzaW9uIn0.wa2BGGpGdL49QTwXPhcp0xHwW3h9KCp5nPVJ_fSOD5U");
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateTextAreaValue"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["textArea", "value"]
                      },
                      operation: 0
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTextAreaValue"] != null &&
                typeof $steps["updateTextAreaValue"] === "object" &&
                typeof $steps["updateTextAreaValue"].then === "function"
              ) {
                $steps["updateTextAreaValue"] = await $steps[
                  "updateTextAreaValue"
                ];
              }

              $steps["userInfo"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/get/userInfo",
                        (() => {
                          try {
                            return { token: $state.token };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["userInfo"] != null &&
                typeof $steps["userInfo"] === "object" &&
                typeof $steps["userInfo"].then === "function"
              ) {
                $steps["userInfo"] = await $steps["userInfo"];
              }

              $steps["setInfo"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["user"]
                      },
                      operation: 0,
                      value: $steps.userInfo?.data?.result?.user ?? {}
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["setInfo"] != null &&
                typeof $steps["setInfo"] === "object" &&
                typeof $steps["setInfo"].then === "function"
              ) {
                $steps["setInfo"] = await $steps["setInfo"];
              }

              $steps["logOpen"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://n8n.staas.ir/webhook/social/log",
                        undefined,
                        (() => {
                          try {
                            return {
                              userId: $state.user.id,
                              pageName: "socialPostPage",
                              action: "openPage"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["logOpen"] != null &&
                typeof $steps["logOpen"] === "object" &&
                typeof $steps["logOpen"].then === "function"
              ) {
                $steps["logOpen"] = await $steps["logOpen"];
              }
            }}
          />

          <section className={classNames(projectcss.all, sty.section__wNehk)}>
            <HeaderLiom
              data-plasmic-name={"headerLiom"}
              data-plasmic-override={overrides.headerLiom}
              className={classNames("__wab_instance", sty.headerLiom)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__cBlY)}>
                <XIcon
                  className={classNames(projectcss.all, sty.svg__hxDu)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return window.history.back();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["refreshData"] = true
                      ? (() => {
                          const actionArgs = {
                            queryInvalidation: ["plasmic_refresh_all"]
                          };
                          return (async ({ queryInvalidation }) => {
                            if (!queryInvalidation) {
                              return;
                            }
                            await plasmicInvalidate(queryInvalidation);
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["refreshData"] != null &&
                      typeof $steps["refreshData"] === "object" &&
                      typeof $steps["refreshData"].then === "function"
                    ) {
                      $steps["refreshData"] = await $steps["refreshData"];
                    }
                  }}
                  role={"img"}
                />
              </div>
            </HeaderLiom>
          </section>
          <ApiRequest
            data-plasmic-name={"getInfo"}
            data-plasmic-override={overrides.getInfo}
            body={(() => {
              try {
                return {
                  postId: $state.postId,
                  commentId: "string",
                  orderBy: $state.orderby.value,
                  authorization: $state.token
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {
                    postId: "44b295b9-fdaa-4dbb-85b3-80c0b3b9af69",
                    commentId: "string",
                    orderBy: "newest",
                    authorization: "$state.token"
                  };
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.getInfo)}
            errorDisplay={
              <div
                className={classNames(projectcss.all, sty.freeBox__yfD96)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateApiGetInfo"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["apiGetInfo"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateApiGetInfo"] != null &&
                    typeof $steps["updateApiGetInfo"] === "object" &&
                    typeof $steps["updateApiGetInfo"].then === "function"
                  ) {
                    $steps["updateApiGetInfo"] = await $steps[
                      "updateApiGetInfo"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9C8B5
                  )}
                >
                  {
                    "\u062e\u0637\u0627 \u062f\u0631 \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0627\u06cc\u0646\u062a\u0631\u0646\u062a"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__anWs0
                  )}
                >
                  {
                    "\u0627\u0632 \u0627\u062a\u0635\u0627\u0644 \u0627\u06cc\u0646\u062a\u0631\u0646\u062a \u0648 \u0642\u0635\u0639 \u0628\u0648\u062f\u0646 vpn\u0645\u0637\u0645\u0626\u0646 \u0634\u062f\u0647 \u0648 \u062f\u0648\u0628\u0627\u0631\u0647 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f"
                  }
                </div>
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={generateStateValueProp($state, ["button", "color"])}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={"rounded"}
                  size={"minimal"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__boqh)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xzH2D
                      )}
                    >
                      {"\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"}
                    </div>
                    <Icon144Icon
                      className={classNames(projectcss.all, sty.svg__l9MsU)}
                      role={"img"}
                    />
                  </div>
                </Button>
              </div>
            }
            loadingDisplay={
              <div
                data-plasmic-name={"loding"}
                data-plasmic-override={overrides.loding}
                className={classNames(projectcss.all, sty.loding)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__hCsIg)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8XFxp)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__d8OWl,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__b96Px,
                        "shimmer"
                      )}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__uDa1S,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__t0E0U,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__fOzy9,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__bhVEl)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__apcVq,
                        "shimmer"
                      )}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__q73Nu,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__u5QeB)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__cHfn1,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__ybSy3,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__lWiX,
                        "shimmer"
                      )}
                    />
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__jjf5Y)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vUhY)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__v88LV,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__mAyF5,
                        "shimmer"
                      )}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__svTe,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__x9APb,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___2Ptqz,
                      "shimmer"
                    )}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__qgoIj)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wo1OL)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__aRyJa,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__k09WV,
                        "shimmer"
                      )}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___8Ht5,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___9VmP,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___42GqH,
                      "shimmer"
                    )}
                  />
                </div>
              </div>
            }
            method={"PUT"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getInfo", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getInfo", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getInfo", "data"]).apply(
                null,
                eventArgs
              );

              (async data => {
                const $steps = {};

                $steps["runCode"] = $state.getInfo?.data?.result?.details
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (window.audioLink =
                            $state.getInfo.data.result.details.post.action);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateApiGetInfo"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["apiGetInfo"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateApiGetInfo"] != null &&
                  typeof $steps["updateApiGetInfo"] === "object" &&
                  typeof $steps["updateApiGetInfo"].then === "function"
                ) {
                  $steps["updateApiGetInfo"] = await $steps["updateApiGetInfo"];
                }
              }).apply(null, eventArgs);
            }}
            shouldFetch={(() => {
              try {
                return $state.apiGetInfo;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/rest/social"}
          >
            <section className={classNames(projectcss.all, sty.section__gIiNr)}>
              <div className={classNames(projectcss.all, sty.freeBox__v5VDg)}>
                <div className={classNames(projectcss.all, sty.freeBox__f0Ap)}>
                  <RepeatPost2
                    data-plasmic-name={"repeatPost2"}
                    data-plasmic-override={overrides.repeatPost2}
                    className={classNames("__wab_instance", sty.repeatPost2)}
                    comingSoon={async event => {
                      const $steps = {};

                      $steps["updateTextAreaValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["textArea", "value"]
                              },
                              operation: 0
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTextAreaValue"] != null &&
                        typeof $steps["updateTextAreaValue"] === "object" &&
                        typeof $steps["updateTextAreaValue"].then === "function"
                      ) {
                        $steps["updateTextAreaValue"] = await $steps[
                          "updateTextAreaValue"
                        ];
                      }
                    }}
                    comment={generateStateValueProp($state, [
                      "repeatPost2",
                      "comment"
                    ])}
                    main={generateStateValueProp($state, [
                      "repeatPost2",
                      "main"
                    ])}
                    onClickShere={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  let url = `https://apps.liom.app/post?post=${currentItem.post.id}&shere=true`;
                                  if (
                                    typeof navigator !== "undefined" &&
                                    typeof navigator.share === "function"
                                  ) {
                                    return navigator.share({
                                      title: "لیوم | تقویم قاعدگی",
                                      url: url
                                    });
                                  } else {
                                    $$.copyToClipboard(url);
                                    return alert(
                                      "مرورگر شما از قابلیت اشتراک‌گذاری پشتیبانی نمی‌کند.لینک پست در کلیپ‌بورد کپی شد."
                                    );
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/post/share",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      postId: $state.postId,
                                      type: "",
                                      authorization: $state.token
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["invokeGlobalAction2"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/social/log",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      userId: $state.user.id,
                                      pageName: "socialPostPage",
                                      action: "sharePost"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }
                    }}
                    onCommentChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "repeatPost2",
                        "comment"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onMainChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "repeatPost2",
                        "main"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    postData={(() => {
                      try {
                        return $state.getInfo.data.result.details;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    postToken={(() => {
                      try {
                        return $state.token;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    user={(() => {
                      try {
                        return $state.user;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___6AbeA)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xagh6)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateOpenPop"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["openPop"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateOpenPop"] != null &&
                        typeof $steps["updateOpenPop"] === "object" &&
                        typeof $steps["updateOpenPop"].then === "function"
                      ) {
                        $steps["updateOpenPop"] = await $steps["updateOpenPop"];
                      }
                    }}
                  >
                    <AntdPopover
                      data-plasmic-name={"popover"}
                      data-plasmic-override={overrides.popover}
                      arrow={true}
                      className={classNames("__wab_instance", sty.popover)}
                      content={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hxWiz
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return [
                                  { label: "جدیدترین ها", value: "newest" },
                                  { label: "بیشترین لایک", value: "likeCount" },
                                  {
                                    label: "بیشترین ریپلای",
                                    value: "replyCount"
                                  }
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <RadioGrop
                                data-plasmic-name={"radioGrop"}
                                data-plasmic-override={overrides.radioGrop}
                                className={classNames(
                                  "__wab_instance",
                                  sty.radioGrop
                                )}
                                color={"light"}
                                key={currentIndex}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateOrderby"] =
                                    currentItem.value != $state.orderby.value
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["orderby"]
                                            },
                                            operation: 0,
                                            value: currentItem
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateOrderby"] != null &&
                                    typeof $steps["updateOrderby"] ===
                                      "object" &&
                                    typeof $steps["updateOrderby"].then ===
                                      "function"
                                  ) {
                                    $steps["updateOrderby"] = await $steps[
                                      "updateOrderby"
                                    ];
                                  }

                                  $steps["updateHasMore"] =
                                    currentItem.value != $state.orderby.value
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["hasMore"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateHasMore"] != null &&
                                    typeof $steps["updateHasMore"] ===
                                      "object" &&
                                    typeof $steps["updateHasMore"].then ===
                                      "function"
                                  ) {
                                    $steps["updateHasMore"] = await $steps[
                                      "updateHasMore"
                                    ];
                                  }

                                  $steps["updatePopoverOpen"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["popover", "open"]
                                          },
                                          operation: 0,
                                          value: false
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updatePopoverOpen"] != null &&
                                    typeof $steps["updatePopoverOpen"] ===
                                      "object" &&
                                    typeof $steps["updatePopoverOpen"].then ===
                                      "function"
                                  ) {
                                    $steps["updatePopoverOpen"] = await $steps[
                                      "updatePopoverOpen"
                                    ];
                                  }
                                }}
                                selected={(() => {
                                  try {
                                    return (
                                      currentItem.value == $state.orderby.value
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                style2={"line"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qROk0
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.label;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </RadioGrop>
                            );
                          })}
                        </div>
                      }
                      contentText={"Popover contents"}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      mouseEnterDelay={0}
                      mouseLeaveDelay={0}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "popover",
                          "open"
                        ]).apply(null, eventArgs);
                      }}
                      open={generateStateValueProp($state, ["popover", "open"])}
                      placement={"bottom"}
                      popoverScopeClassName={sty["popover__popover"]}
                      title={null}
                      trigger={"click"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5Uvo
                        )}
                      >
                        <Icon184Icon
                          className={classNames(projectcss.all, sty.svg__dDsbb)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ft6Ek
                          )}
                        >
                          {
                            "\u0645\u0631\u062a\u0628 \u0633\u0627\u0632\u06cc \u0628\u0631 \u0627\u0633\u0627\u0633  :"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wXf2F
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.orderby.label;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u062c\u062f\u06cc\u062f\u062a\u0631\u06cc\u0646 \u0647\u0627 ";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </AntdPopover>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__sB24Y)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.comments;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6IsXi
                        )}
                        key={currentIndex}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.comment
                            ),
                            commentData: generateStateValueProp($state, [
                              "comment",
                              __plasmic_idx_0,
                              "commentData"
                            ]),
                            delet: async event => {
                              const $steps = {};

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "PUT",
                                        "https://n8n.staas.ir/webhook/rest/social/comment/event",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              commentId: currentItem.comment.id,
                                              authorization: $state.token
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }

                              $steps["runCode"] = $steps.invokeGlobalAction
                                ?.data?.success
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          $state.comments =
                                            $state.comments.filter(
                                              item =>
                                                item.comment.id !=
                                                currentItem.comment.id
                                            );
                                          $state.repeatPost2.comment.active =
                                            $state.comments.find(
                                              item =>
                                                item.user.id == $state.user.id
                                            )
                                              ? true
                                              : false;
                                          return ($state.repeatPost2.comment.number -= 1);
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            },
                            edit: async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          var comment =
                                            window.document.getElementById(
                                              "focus_comment"
                                            );
                                          return comment.firstElementChild.focus();
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["runCode2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["editComment"]
                                      },
                                      operation: 0,
                                      value: currentItem
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode2"] != null &&
                                typeof $steps["runCode2"] === "object" &&
                                typeof $steps["runCode2"].then === "function"
                              ) {
                                $steps["runCode2"] = await $steps["runCode2"];
                              }

                              $steps["runCode3"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          return ($state.textArea.value =
                                            currentItem.comment.text);
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode3"] != null &&
                                typeof $steps["runCode3"] === "object" &&
                                typeof $steps["runCode3"].then === "function"
                              ) {
                                $steps["runCode3"] = await $steps["runCode3"];
                              }
                            },
                            like: generateStateValueProp($state, [
                              "comment",
                              __plasmic_idx_0,
                              "like"
                            ]),
                            me: (() => {
                              try {
                                return currentItem.user.id == $state.user.id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })(),
                            onClick: async event => {
                              const $steps = {};

                              $steps["updateModalOpen"] = $state.shere
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["modal", "open"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModalOpen"] != null &&
                                typeof $steps["updateModalOpen"] === "object" &&
                                typeof $steps["updateModalOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateModalOpen"] = await $steps[
                                  "updateModalOpen"
                                ];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          var comment =
                                            window.document.getElementById(
                                              "focus_comment"
                                            );
                                          return comment.firstElementChild.focus();
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["updateCurrentUserDataAfterClick"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "currentUserDataAfterClick"
                                        ]
                                      },
                                      operation: 0,
                                      value: currentItem
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateCurrentUserDataAfterClick"] !=
                                  null &&
                                typeof $steps[
                                  "updateCurrentUserDataAfterClick"
                                ] === "object" &&
                                typeof $steps["updateCurrentUserDataAfterClick"]
                                  .then === "function"
                              ) {
                                $steps["updateCurrentUserDataAfterClick"] =
                                  await $steps[
                                    "updateCurrentUserDataAfterClick"
                                  ];
                              }

                              $steps["updateComingSoonOpen"] = false
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["comingSoon", "open"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateComingSoonOpen"] != null &&
                                typeof $steps["updateComingSoonOpen"] ===
                                  "object" &&
                                typeof $steps["updateComingSoonOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateComingSoonOpen"] = await $steps[
                                  "updateComingSoonOpen"
                                ];
                              }
                            },
                            onClick1: async event => {
                              const $steps = {};

                              $steps["updateModalOpen"] = false
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["modal", "open"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModalOpen"] != null &&
                                typeof $steps["updateModalOpen"] === "object" &&
                                typeof $steps["updateModalOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateModalOpen"] = await $steps[
                                  "updateModalOpen"
                                ];
                              }

                              $steps["updateComingSoonOpen"] = false
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["comingSoon", "open"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateComingSoonOpen"] != null &&
                                typeof $steps["updateComingSoonOpen"] ===
                                  "object" &&
                                typeof $steps["updateComingSoonOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateComingSoonOpen"] = await $steps[
                                  "updateComingSoonOpen"
                                ];
                              }
                            },
                            onCommentDataChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "comment",
                                __plasmic_idx_0,
                                "commentData"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onLikeChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "comment",
                                __plasmic_idx_0,
                                "like"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            token: (() => {
                              try {
                                return $state.token;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            unnamedGroupOfVariants: (() => {
                              try {
                                return (() => {
                                  if (currentItem.replyCount == 0)
                                    return "whenHaveNoReply";
                                  else if (currentItem.replyCount !== 0)
                                    return "whenHaveReply";
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "whenHaveNoReply";
                                }
                                throw e;
                              }
                            })()
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "comment[].commentData",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return {};
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "comment[].like",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.isLiked;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Comment
                              data-plasmic-name={"comment"}
                              data-plasmic-override={overrides.comment}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    );
                  })}
                  <section
                    className={classNames(projectcss.all, sty.section__l5Nnd)}
                  >
                    {(() => {
                      try {
                        return $state.isLoading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5LnEi
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yfNop
                          )}
                        >
                          {
                            "\u062f\u0631 \u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc ..."
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wOsGe,
                            "line-container"
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__g18M2,
                              "line line-1"
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zbB7A,
                              "line line-2"
                            )}
                          />
                        </div>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return !$state.shere;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dnSli
                        )}
                      >
                        <Reveal
                          data-plasmic-name={"reveal"}
                          data-plasmic-override={overrides.reveal}
                          cascade={true}
                          className={classNames("__wab_instance", sty.reveal)}
                          damping={0}
                          duration={500}
                          effect={"rotate"}
                          reverse={(() => {
                            try {
                              return $state.textArea.value?.length == 0;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          triggerOnce={false}
                        >
                          {(() => {
                            try {
                              return $state.loadingSend ? 60 : 100;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__pZ5Hb
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["sendComment"] =
                                  Object.keys($state.editComment).length == 0 &&
                                  Object.keys($state.currentUserDataAfterClick)
                                    .length == 0 &&
                                  $state.textArea.value?.length > 0
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "GET",
                                            "https://n8n.staas.ir/webhook/rest/social/comment/event",
                                            (() => {
                                              try {
                                                return {
                                                  postId: $state.postId,
                                                  commentId: "string",
                                                  text: $state.textArea.value,
                                                  dataId: "",
                                                  anonymous: false,
                                                  type: "",
                                                  subType: "",
                                                  authorization: $state.token
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["sendComment"] != null &&
                                  typeof $steps["sendComment"] === "object" &&
                                  typeof $steps["sendComment"].then ===
                                    "function"
                                ) {
                                  $steps["sendComment"] = await $steps[
                                    "sendComment"
                                  ];
                                }

                                $steps["editComment"] =
                                  Object.keys($state.editComment).length != 0 &&
                                  $state.textArea.value?.length > 0
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "POST",
                                            "https://n8n.staas.ir/webhook/rest/social/comment/event",
                                            undefined,
                                            (() => {
                                              try {
                                                return {
                                                  commentId:
                                                    $state.editComment.comment
                                                      .id,
                                                  text: $state.textArea.value,
                                                  authorization: $state.token
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["editComment"] != null &&
                                  typeof $steps["editComment"] === "object" &&
                                  typeof $steps["editComment"].then ===
                                    "function"
                                ) {
                                  $steps["editComment"] = await $steps[
                                    "editComment"
                                  ];
                                }

                                $steps["send"] =
                                  $steps.sendComment?.data?.success == true &&
                                  $state.textArea.value?.length > 0
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              $state.comments.unshift(
                                                $steps.sendComment.data.result
                                              );
                                              $state.repeatPost2.comment.number += 1;
                                              return ($state.repeatPost2.comment.active =
                                                true);
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["send"] != null &&
                                  typeof $steps["send"] === "object" &&
                                  typeof $steps["send"].then === "function"
                                ) {
                                  $steps["send"] = await $steps["send"];
                                }

                                $steps["edit"] =
                                  $steps.editComment?.data?.success == true &&
                                  $state.textArea.value?.length > 0
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              var index =
                                                $state.comments.findIndex(
                                                  comment =>
                                                    comment.comment.id ===
                                                    $state.editComment.comment
                                                      .id
                                                );
                                              return ($state.comments[index] =
                                                $steps.editComment.data.result);
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["edit"] != null &&
                                  typeof $steps["edit"] === "object" &&
                                  typeof $steps["edit"].then === "function"
                                ) {
                                  $steps["edit"] = await $steps["edit"];
                                }

                                $steps["updateTextAreaValue3"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["textArea", "value"]
                                        },
                                        operation: 0,
                                        value: ""
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateTextAreaValue3"] != null &&
                                  typeof $steps["updateTextAreaValue3"] ===
                                    "object" &&
                                  typeof $steps["updateTextAreaValue3"].then ===
                                    "function"
                                ) {
                                  $steps["updateTextAreaValue3"] = await $steps[
                                    "updateTextAreaValue3"
                                  ];
                                }
                              }}
                              style={(() => {
                                try {
                                  return {
                                    "background-color":
                                      $state.textArea.value?.length > 0
                                        ? "#8254C6"
                                        : "rgba(130, 84, 198, 0.1)"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              {(() => {
                                try {
                                  return !$state.loadingSend;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Icon247Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__nevOy
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              {(() => {
                                try {
                                  return $state.loadingSend;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Icon11Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__q5QhQ
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                          ) : null}
                        </Reveal>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___8LXcp
                          )}
                          id={"focus_comment"}
                        >
                          {(() => {
                            const child$Props = {
                              autoSize: true,
                              className: classNames(
                                "__wab_instance",
                                sty.textArea
                              ),
                              disabled: (() => {
                                try {
                                  return $state.loadingSend;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["textArea", "value"],
                                  AntdTextArea_Helpers
                                ).apply(null, eventArgs);
                              },
                              placeholder:
                                "\u06a9\u0627\u0645\u0646\u062a\u062a \u0631\u0648 \u0628\u0646\u0648\u06cc\u0633",
                              value: generateStateValueProp($state, [
                                "textArea",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "textArea.value"
                                }
                              ],
                              [],
                              AntdTextArea_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdTextArea
                                data-plasmic-name={"textArea"}
                                data-plasmic-override={overrides.textArea}
                                {...child$Props}
                              />
                            );
                          })()}
                        </div>
                        {(() => {
                          try {
                            return (
                              $state.currentUserDataAfterClick.user?.id !==
                              undefined
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wpwh6
                            )}
                          >
                            <Icon227Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__iRmL
                              )}
                              role={"img"}
                            />

                            <LineClomp
                              data-plasmic-name={"lineClomp"}
                              data-plasmic-override={overrides.lineClomp}
                              className={classNames(
                                "__wab_instance",
                                sty.lineClomp
                              )}
                              onLineChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "lineClomp",
                                  "line"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jn8Hz
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $state.currentUserDataAfterClick.user
                                          .name + " :     "
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </LineClomp>
                            <LineClomp
                              data-plasmic-name={"lineClomp2"}
                              data-plasmic-override={overrides.lineClomp2}
                              className={classNames(
                                "__wab_instance",
                                sty.lineClomp2
                              )}
                              numberOfLine={1}
                              onLineChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "lineClomp2",
                                  "line"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ypNoJ
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.currentUserDataAfterClick
                                        .comment.text;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </LineClomp>
                            <XIcon2
                              className={classNames(
                                projectcss.all,
                                sty.svg___0AiE2
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentUserDataAfterClick"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "currentUserDataAfterClick"
                                          ]
                                        },
                                        operation: 0,
                                        value: {}
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentUserDataAfterClick"] !=
                                    null &&
                                  typeof $steps[
                                    "updateCurrentUserDataAfterClick"
                                  ] === "object" &&
                                  typeof $steps[
                                    "updateCurrentUserDataAfterClick"
                                  ].then === "function"
                                ) {
                                  $steps["updateCurrentUserDataAfterClick"] =
                                    await $steps[
                                      "updateCurrentUserDataAfterClick"
                                    ];
                                }
                              }}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </section>
                </div>
              </div>
            </section>
          </ApiRequest>
          <Timer
            data-plasmic-name={"timer"}
            data-plasmic-override={overrides.timer}
            className={classNames("__wab_instance", sty.timer)}
            intervalSeconds={5}
            isRunning={
              hasVariant(globalVariants, "screen", "mobile") ? false : true
            }
            onTick={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return window.addEventListener("scroll", () => {
                          if ($state.isLoading || !$state.hasMore) return;
                          const { scrollTop, scrollHeight } =
                            window.document.documentElement;
                          const { innerHeight } = window;
                          const isNearBottom =
                            scrollTop + innerHeight >= scrollHeight - 50;
                          if (isNearBottom) {
                            $state.isLoading = true;
                          }
                        });
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["invokeGlobalAction"] = $state.isLoading
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://n8n.staas.ir/webhook/social/reply/replies",
                        undefined,
                        (() => {
                          try {
                            return {
                              postId: $state.postId,
                              type: "string",
                              size: 10,
                              from: $state.comments.length,
                              orderBy: $state.orderby.value,
                              authorization: $state.token
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["runCode2"] =
                $steps.invokeGlobalAction.data.success == false ||
                $steps.invokeGlobalAction.data.success == true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            $state.isLoading = false;
                            const newData =
                              $steps.invokeGlobalAction.data.result;
                            if (!newData || newData.length == 0) {
                              return ($state.hasMore = false);
                            } else {
                              return ($state.comments =
                                $state.comments.concat(newData));
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }

              $steps["invokeGlobalAction2"] =
                !$state.isLoading && !$state.hasMore
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "custom",
                          "\u06a9\u0627\u0645\u0646\u062a \u0628\u06cc\u0634\u062a\u0631\u06cc \u0628\u0631\u0627\u06cc \u0646\u0645\u0627\u06cc\u0634 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f.",
                          "bottom-center"
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction2"] != null &&
                typeof $steps["invokeGlobalAction2"] === "object" &&
                typeof $steps["invokeGlobalAction2"].then === "function"
              ) {
                $steps["invokeGlobalAction2"] = await $steps[
                  "invokeGlobalAction2"
                ];
              }
            }}
            runWhileEditing={false}
          />

          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            closeIcon={
              <XIcon
                className={classNames(projectcss.all, sty.svg__v9Pzm)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
                role={"img"}
              />
            }
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={
              <div className={classNames(projectcss.all, sty.freeBox__mbv2C)}>
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"70px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"70px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liom_hamyar/images/image10.ico",
                    fullWidth: 256,
                    fullHeight: 256,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cqKgv
                  )}
                >
                  {
                    "\u0628\u0631\u0627\u06cc \u0627\u06cc\u0646\u06a9\u0647 \u0628\u062e\u0648\u0627\u06cc \u0627\u06cc\u0646 \u06a9\u0627\u0631 \u0631\u0648 \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u06cc \u0628\u0627\u06cc\u062f \u0627\u067e\u0644\u06cc\u06a9\u06cc\u0634\u0646 \u0631\u0648 \u0646\u0635\u0628 \u06a9\u0646\u06cc.\r\n\u0647\u0631\u06a9\u062f\u0648\u0645 \u0627\u0632 \u062f\u06a9\u0645\u0647 \u0647\u0627\u06cc \u0632\u06cc\u0631 \u06a9\u0647 \u0628\u0627\u0647\u0627\u0634 \u0631\u0627\u062d\u062a \u062a\u0631\u06cc \u0628\u0631\u0627\u06cc \u062f\u0627\u0646\u0644\u0648\u062f \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u06a9\u0646 \u0648 \u0628\u0639\u062f \u0628\u0647 \u062c\u0645\u0639 \u062f\u062e\u062a\u0631\u0648\u0646\u0647 \u06cc \u0645\u0627\u0627\u0636\u0627\u0641\u0647 \u0634\u0648\ud83d\ude0d"
                  }
                </div>
              </div>
            }
            trigger={null}
            width={
              hasVariant(globalVariants, "screen", "mobile") ? `` : undefined
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__jgZby)}>
              <div className={classNames(projectcss.all, sty.freeBox__sW6A9)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__nYEgS)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return window.open(
                                  "https://apps.liom.app/login/"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                >
                  <LogoPwaSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__hpqA)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__drcPz
                    )}
                  >
                    {
                      "\u0648\u0631\u0648\u062f \u0628\u0647 \u0646\u0633\u062e\u0647 \u0648\u0628"
                    }
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__eBzU7)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return window.open(
                                  "https://myket.ir/app/com.diacotdj.liom"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                >
                  <IconSvgIcon
                    className={classNames(projectcss.all, sty.svg___14Bd9)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hwaFn
                    )}
                  >
                    {
                      "\u062f\u0627\u0646\u0644\u0648\u062f \u0627\u0632 \u0645\u0627\u06cc\u06a9\u062a "
                    }
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__gtFi5)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__c7CHa)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return window.open(
                                  "https://cafebazaar.ir/app/com.diacotdj.liom"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                >
                  <CafeBazaarLogoSvgIcon
                    className={classNames(projectcss.all, sty.svg__pnNm3)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jWd98
                    )}
                  >
                    {
                      "\u062f\u0627\u0646\u0644\u0648\u062f \u0627\u0632 \u06a9\u0627\u0641\u0647 \u0628\u0627\u0632\u0627\u0631"
                    }
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___1VkT5)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return window.open(
                                  "https://old.liom.app/view/link/liom_google_6.6.9.apk"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kVpCl)}
                  >
                    <BrokenLink2SvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__deguc)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eY1K
                      )}
                    >
                      {
                        "\u062f\u0627\u0646\u0644\u0648\u062f \u0628\u0627 \u0644\u06cc\u0646\u06a9 \u0645\u0633\u062a\u0642\u06cc\u0645 "
                      }
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </AntdModal>
          {(() => {
            try {
              return $state.shere;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__uqw1Q)}
              onClick={async event => {
                const $steps = {};

                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }
              }}
            />
          ) : null}
          <ComingSoon
            data-plasmic-name={"comingSoon"}
            data-plasmic-override={overrides.comingSoon}
            className={classNames("__wab_instance", sty.comingSoon)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["comingSoon", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onSelectShopChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "comingSoon",
                "selectShop"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["comingSoon", "open"])}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "headerLiom",
    "getInfo",
    "loding",
    "button",
    "repeatPost2",
    "popover",
    "radioGrop",
    "comment",
    "reveal",
    "textArea",
    "lineClomp",
    "lineClomp2",
    "timer",
    "modal",
    "img",
    "comingSoon"
  ],
  sideEffect: ["sideEffect"],
  headerLiom: ["headerLiom"],
  getInfo: [
    "getInfo",
    "loding",
    "button",
    "repeatPost2",
    "popover",
    "radioGrop",
    "comment",
    "reveal",
    "textArea",
    "lineClomp",
    "lineClomp2"
  ],
  loding: ["loding"],
  button: ["button"],
  repeatPost2: ["repeatPost2"],
  popover: ["popover", "radioGrop"],
  radioGrop: ["radioGrop"],
  comment: ["comment"],
  reveal: ["reveal"],
  textArea: ["textArea"],
  lineClomp: ["lineClomp"],
  lineClomp2: ["lineClomp2"],
  timer: ["timer"],
  modal: ["modal", "img"],
  img: ["img"],
  comingSoon: ["comingSoon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  headerLiom: typeof HeaderLiom;
  getInfo: typeof ApiRequest;
  loding: "div";
  button: typeof Button;
  repeatPost2: typeof RepeatPost2;
  popover: typeof AntdPopover;
  radioGrop: typeof RadioGrop;
  comment: typeof Comment;
  reveal: typeof Reveal;
  textArea: typeof AntdTextArea;
  lineClomp: typeof LineClomp;
  lineClomp2: typeof LineClomp;
  timer: typeof Timer;
  modal: typeof AntdModal;
  img: typeof PlasmicImg__;
  comingSoon: typeof ComingSoon;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPost2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPost2__VariantsArgs;
    args?: PlasmicPost2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPost2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPost2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPost2__ArgProps,
          internalVariantPropNames: PlasmicPost2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPost2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPost2";
  } else {
    func.displayName = `PlasmicPost2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPost2 = Object.assign(
  // Top-level PlasmicPost2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    headerLiom: makeNodeComponent("headerLiom"),
    getInfo: makeNodeComponent("getInfo"),
    loding: makeNodeComponent("loding"),
    button: makeNodeComponent("button"),
    repeatPost2: makeNodeComponent("repeatPost2"),
    popover: makeNodeComponent("popover"),
    radioGrop: makeNodeComponent("radioGrop"),
    comment: makeNodeComponent("comment"),
    reveal: makeNodeComponent("reveal"),
    textArea: makeNodeComponent("textArea"),
    lineClomp: makeNodeComponent("lineClomp"),
    lineClomp2: makeNodeComponent("lineClomp2"),
    timer: makeNodeComponent("timer"),
    modal: makeNodeComponent("modal"),
    img: makeNodeComponent("img"),
    comingSoon: makeNodeComponent("comingSoon"),

    // Metadata about props expected for PlasmicPost2
    internalVariantProps: PlasmicPost2__VariantProps,
    internalArgProps: PlasmicPost2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPost2;
/* prettier-ignore-end */
