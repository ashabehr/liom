// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: wm7JCxMr_wnl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Switchbest from "../../Switchbest"; // plasmic-import: ZVlBCheEk16c/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Useful from "../../Useful"; // plasmic-import: uC6lbZQbq65I/component
import Harmful from "../../Harmful"; // plasmic-import: 9FddDi4enH9o/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Subscription from "../../Subscription"; // plasmic-import: 5gTWsh9rtOlz/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import Navbaricon from "../../Navbaricon"; // plasmic-import: NwpCR_nkR65p/component
import Navbaricon2 from "../../Navbaricon2"; // plasmic-import: hmBRYlhI0zfE/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMale.module.css"; // plasmic-import: wm7JCxMr_wnl/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: rd5PhKOaCzwU/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: hzniODQZL52w/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: m8xytmRtuq4D/icon

createPlasmicElementProxy;

export type PlasmicMale__VariantMembers = {};
export type PlasmicMale__VariantsArgs = {};
type VariantPropType = keyof PlasmicMale__VariantsArgs;
export const PlasmicMale__VariantProps = new Array<VariantPropType>();

export type PlasmicMale__ArgsType = {};
type ArgPropType = keyof PlasmicMale__ArgsType;
export const PlasmicMale__ArgProps = new Array<ArgPropType>();

export type PlasmicMale__OverridesType = {
  root?: Flex__<"div">;
  switchbest?: Flex__<typeof Switchbest>;
  input?: Flex__<typeof AntdInput>;
  button?: Flex__<typeof AntdButton>;
  reveal?: Flex__<typeof Reveal>;
  useful?: Flex__<typeof Useful>;
  harmful?: Flex__<typeof Harmful>;
  modal?: Flex__<typeof AntdModal>;
  subscription?: Flex__<typeof Subscription>;
  shopbtn?: Flex__<typeof AntdButton>;
  modal2?: Flex__<typeof AntdModal>;
  user?: Flex__<typeof ApiRequest>;
  shop?: Flex__<typeof ApiRequest>;
  navbaricon?: Flex__<typeof Navbaricon>;
  navbaricon2?: Flex__<typeof Navbaricon2>;
};

export interface DefaultMaleProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMale__RenderFunc(props: {
  variants: PlasmicMale__VariantsArgs;
  args: PlasmicMale__ArgsType;
  overrides: PlasmicMale__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "switchbest.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "useful[].text",
        type: "private",
        variableType: "text"
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "subscription[].clickitem",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "subscription[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription[].price",
        type: "private",
        variableType: "number"
      },
      {
        path: "subscription[].discount",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription[].fullprice",
        type: "private",
        variableType: "number"
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "user.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "user.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "user.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "navbaricon.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "navbaricon2.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___91Tw0)}>
            <Embed
              className={classNames("__wab_instance", sty.embedHtml___7YrCs)}
              code={
                "<style>\r\nbody {\r\n  overscroll-behavior-y: auto;\r\n}\r\n\r\n.pull-to-refresh {\r\n  position: fixed;\r\n  top: -60px;\r\n  width: 100%;\r\n  height: 60px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align:center;\r\n  transition: top 0.3s ease-in-out;\r\n  z-index: 1000;\r\n}\r\n\r\n.pull-to-refresh.visible {\r\n  top: 0;\r\n}\r\n\r\n.spinner {\r\n  width: 24px;\r\n  height: 24px;\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid #8254C6;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n</style>\r\n\r\n  <div class=\"pull-to-refresh\">\r\n    <div class=\"spinner\"></div>\r\n</div>\r\n\r\n<script>\r\n  const pullToRefresh = document.querySelector('.pull-to-refresh');\r\n  let touchstartY = 0;\r\n  let isRefreshing = false;\r\n  const pullThreshold = 100;\r\n\r\n  document.addEventListener('touchstart', e => {\r\n    touchstartY = e.touches[0].clientY;\r\n  });\r\n\r\n  document.addEventListener('touchmove', e => {\r\n    const touchY = e.touches[0].clientY;\r\n    const touchDiff = touchY - touchstartY;\r\n\r\n    if (touchDiff > pullThreshold && window.scrollY === 0 && !isRefreshing) {\r\n      pullToRefresh.classList.add('visible');\r\n      e.preventDefault();\r\n    }\r\n  });\r\n\r\n  document.addEventListener('touchend', e => {\r\n    if (pullToRefresh.classList.contains('visible')) {\r\n      isRefreshing = true;\r\n\r\n      setTimeout(() => {\r\n        pullToRefresh.classList.remove('visible');\r\n        isRefreshing = false;\r\n        \r\n      }, 1000); \r\n    }\r\n  });\r\n</script>\r\n"
              }
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eeBQ)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__j8Wy)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__efU82)}
                  displayHeight={"50px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"50px"}
                  loading={"lazy"}
                />

                <div className={classNames(projectcss.all, sty.freeBox__se77)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hXmT
                    )}
                  >
                    {""}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__zkvDb)}>
                  <Switchbest
                    data-plasmic-name={"switchbest"}
                    data-plasmic-override={overrides.switchbest}
                    className={classNames("__wab_instance", sty.switchbest)}
                    isChecked={
                      generateStateValueProp($state, [
                        "switchbest",
                        "isChecked"
                      ]) ?? false
                    }
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "switchbest",
                        "isChecked"
                      ])(eventArgs[0]);
                    }}
                  />
                </div>
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__saC7O
                )}
              >
                {
                  "\u062f\u0648\u0631\u0647 \u062c\u0627\u0631\u06cc \u062f\u0631 \u06cc\u06a9 \u0646\u06af\u0627\u0647 : "
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wG7OZ)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__t35D)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kOlgE
                    )}
                  >
                    {
                      "\u0645\u0644\u06cc\u06a9\u0627 \u0627\u0644\u0627\u0646 \u062f\u0631 \u0648\u0636\u0639\u06cc\u062a pms \u0627\u0633\u062a "
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zbVxS)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__epmb1
                      )}
                    >
                      {
                        "\u0637\u0648\u0644 \u0627\u06cc\u0646 \u0648\u0636\u0639\u06cc\u062a :  "
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gG550
                      )}
                    >
                      {"5 \u0631\u0648\u0632"}
                    </div>
                  </div>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__grWxg
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#D1C6FF" }}
                      >
                        {"pms \u0686\u06cc\u0633\u062a \u061f "}
                      </span>
                    </React.Fragment>
                  </PlasmicLink__>
                </Stack__>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__r09Aj)}
                  displayHeight={"100px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liom_hamyar/images/image2.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jo6E4)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xLxcp)}
                >
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__pj10Z)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uPia1
                    )}
                  >
                    {
                      "\u0631\u0648\u0632\u0647\u0627\u06cc \u067e\u0631\u06cc\u0648\u062f\u06cc"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7Gj4D
                    )}
                  >
                    {""}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__gmHxW)}
                >
                  <Icon4Icon
                    className={classNames(projectcss.all, sty.svg__dlXwT)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lfWWb
                    )}
                  >
                    {"\u0637\u0648\u0644 \u06a9\u0644 \u062f\u0648\u0631\u0647"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qG2Ni
                    )}
                  >
                    {""}
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tlCi1)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__flwNk)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xUPw
                    )}
                  >
                    {"\u0627\u0634\u062a\u0631\u0627\u06a9"}
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___2Ll31)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x16Df
                    )}
                  >
                    {
                      "\u062e\u0627\u0644\u062f \u062d\u0633\u06cc\u0646\u06cc \u062a\u0648 \u0631\u0645\u0627\u0646 \u0628\u0627\u062f \u0628\u0627\u062f\u06a9 \u0628\u0627\u0632 \u0645\u06cc\u0646\u0648\u06cc\u0633\u0647 : \ufee3\ufeae\ufea9 \ufe81\ufeeb\ufeb4\ufe98\ufeea \ufea9\ufead \ufb94\ufeee\ufeb5 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufe97\ufe8e\ufeaf\ufee9 \ufe91\ufeea \ufe91\ufee0\ufeee\ufecd \ufead\ufeb3\ufbff\ufeaa\ufee9 \ufe8d\ufeb5 \ufe91\ufeae\ufe8d\ufbfc \ufb58\ufee8\ufeaa \ufb7c\ufee8\ufbff\ufee6 \ufee7\ufea0\ufeee\ufe8d \ufb90\ufeae\ufea9 : \u201d \ufb58\ufeb4\ufeae\ufee1 \ufea9\ufead \ufeaf\ufee7\ufeaa\ufb94\ufbfd \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeaf\ufea9\ufbfc \ufee7\ufb91\ufee6 \u201d \ufb58\ufeb4\ufeae \ufee3\ufe98\ufecc\ufea0\ufe90 \ufeed \ufee3\ufe92\ufeec\ufeee\ufe95 \ufe91\ufeea \ufb58\ufeaa\ufead \ufee7\ufb95\ufe8e\ufee9 \ufb90\ufeae\ufea9 \ufe91\ufeaa\ufbfe\ufee6 \ufee3\ufecc\ufee8\ufe8e \ufb90\ufeea \ufe8d\ufeed \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeb3\ufe96 \ufb90\ufe9e \ufee7\ufeaa\ufe8d\ufeb7\ufe98\ufeea \ufb58\ufeaa\ufead \ufe91\ufeea \ufee7\ufb95\ufe8e\ufee9 \ufee3\ufe98\ufecc\ufea0\ufe90 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufedf\ufe92\ufea8\ufee8\ufeaa\ufbfc \ufeaf\ufea9 \ufeed \ufe8d\ufea9\ufe8d\ufee3\ufeea \ufea9\ufe8d\ufea9."
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__sfc60)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xrHlw)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oYvtW)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nBpzz
                        )}
                      >
                        {
                          "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fbcL4
                        )}
                      >
                        {""}
                      </div>
                    </div>
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9TnYp
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            bordered: false,
                            className: classNames("__wab_instance", sty.input),
                            disabled: false,
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder:
                              "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                            size: "small",
                            suffix: (
                              <Icon5Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__dElsn
                                )}
                                role={"img"}
                              />
                            ),

                            value: generateStateValueProp($state, [
                              "input",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input"}
                              data-plasmic-override={overrides.input}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    ) : null}
                    <AntdButton
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__z7FIm
                        )}
                      >
                        {
                          "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                        }
                      </div>
                    </AntdButton>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link___7Pm8M
                      )}
                      component={Link}
                      href={"https://www.plasmic.app/"}
                      platform={"nextjs"}
                    >
                      {
                        "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                      }
                    </PlasmicLink__>
                  </Stack__>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hQmzz)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sMbH
                  )}
                >
                  {
                    "\u06a9\u0627\u0631\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0627\u0645\u0631\u0648\u0632 \u0645\u0644\u06cc\u06a9\u0627 \u0628\u0627\u06cc\u062f \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u0647 :"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hwAyB
                  )}
                >
                  {
                    "\u0628\u0631\u0627\u06cc \u0628\u0647\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0631\u062f\u0646 \u0631\u0648\u06cc \u0647\u0631 \u0645\u0648\u0636\u0648\u0639 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646 \u0648 \u062a\u0648\u0636\u06cc\u062d\u0627\u062a\u0634 \u0631\u0648 \u0628\u062e\u0648\u0646."
                  }
                </div>
                <Reveal
                  data-plasmic-name={"reveal"}
                  data-plasmic-override={overrides.reveal}
                  className={classNames("__wab_instance", sty.reveal)}
                  triggerOnce={true}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__wli6D)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [2, 3, 4, 5, 6, 7, 8];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.useful),
                          key: currentIndex,
                          onTextChange: generateStateOnChangeProp($state, [
                            "useful",
                            __plasmic_idx_0,
                            "text"
                          ]),
                          text: generateStateValueProp($state, [
                            "useful",
                            __plasmic_idx_0,
                            "text"
                          ])
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "useful[].text",
                              initFunc: ({ $props, $state, $queries }) =>
                                "\u0634\u06a9\u0644\u0627\u062a"
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <Useful
                            data-plasmic-name={"useful"}
                            data-plasmic-override={overrides.useful}
                            {...child$Props}
                          />
                        );
                      })();
                    })}
                  </Stack__>
                </Reveal>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___4SOw4)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3AIhp
                  )}
                >
                  {
                    "\u06a9\u0627\u0631\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0627\u0645\u0631\u0648\u0632 \u0645\u0644\u06cc\u06a9\u0627 \u0646\u0628\u0627\u06cc\u062f \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u0647 :"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xecWm
                  )}
                >
                  {
                    "\u0628\u0631\u0627\u06cc \u0628\u0647\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0631\u062f\u0646 \u0631\u0648\u06cc \u0647\u0631 \u0645\u0648\u0636\u0648\u0639 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646 \u0648 \u062a\u0648\u0636\u06cc\u062d\u0627\u062a\u0634 \u0631\u0648 \u0628\u062e\u0648\u0646."
                  }
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hvG4)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [2, 3, 4, 5, 6, 7, 8];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Harmful
                        data-plasmic-name={"harmful"}
                        data-plasmic-override={overrides.harmful}
                        className={classNames("__wab_instance", sty.harmful)}
                        key={currentIndex}
                      />
                    );
                  })}
                </Stack__>
              </Stack__>
              <AntdModal
                data-plasmic-name={"modal"}
                data-plasmic-override={overrides.modal}
                className={classNames("__wab_instance", sty.modal)}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens
                )}
                hideFooter={true}
                maskClosable={true}
                modalScopeClassName={sty["modal__modal"]}
                onOpenChange={generateStateOnChangeProp($state, [
                  "modal",
                  "open"
                ])}
                open={generateStateValueProp($state, ["modal", "open"])}
                title={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wb8XS)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ft99K)}
                    />
                  </div>
                }
                trigger={null}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xMXk3)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    []
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.subscription
                        ),
                        clickitem: generateStateValueProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "clickitem"
                        ]),
                        discount: generateStateValueProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "discount"
                        ]),
                        fullprice: generateStateValueProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "fullprice"
                        ]),
                        key: currentIndex,
                        onClickitemChange: generateStateOnChangeProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "clickitem"
                        ]),
                        onDiscountChange: generateStateOnChangeProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "discount"
                        ]),
                        onFullpriceChange: generateStateOnChangeProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "fullprice"
                        ]),
                        onPriceChange: generateStateOnChangeProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "price"
                        ]),
                        onTitleChange: generateStateOnChangeProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "title"
                        ]),
                        price: generateStateValueProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "price"
                        ]),
                        title: generateStateValueProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "title"
                        ])
                      };

                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "subscription[].clickitem",
                            initFunc: ({ $props, $state, $queries }) => false
                          },
                          {
                            name: "subscription[].title",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "subscription[].price",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.price;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return 120000;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "subscription[].discount",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.badge
                                    ? currentItem.badge
                                    : "";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return 50;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "subscription[].fullprice",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.fullPrice
                                    ? currentItem.fullPrice
                                    : currentItem.price;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return 0;
                                  }
                                  throw e;
                                }
                              })()
                          }
                        ],
                        [__plasmic_idx_0]
                      );
                      return (
                        <Subscription
                          data-plasmic-name={"subscription"}
                          data-plasmic-override={overrides.subscription}
                          {...child$Props}
                        />
                      );
                    })();
                  })}
                </Stack__>
                <AntdButton
                  data-plasmic-name={"shopbtn"}
                  data-plasmic-override={overrides.shopbtn}
                  className={classNames("__wab_instance", sty.shopbtn)}
                  href={""}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kBF
                    )}
                  >
                    {""}
                  </div>
                </AntdButton>
              </AntdModal>
              <AntdModal
                data-plasmic-name={"modal2"}
                data-plasmic-override={overrides.modal2}
                className={classNames("__wab_instance", sty.modal2)}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens
                )}
                hideFooter={true}
                modalScopeClassName={sty["modal2__modal"]}
                onOpenChange={generateStateOnChangeProp($state, [
                  "modal2",
                  "open"
                ])}
                open={generateStateValueProp($state, ["modal2", "open"])}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7BqM
                    )}
                  >
                    {""}
                  </div>
                }
                trigger={null}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zsO7N)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Mlvn
                    )}
                  >
                    {
                      "\u062e\u0627\u0644\u062f \u062d\u0633\u06cc\u0646\u06cc \u062a\u0648 \u0631\u0645\u0627\u0646 \u0628\u0627\u062f \u0628\u0627\u062f\u06a9 \u0628\u0627\u0632 \u0645\u06cc\u0646\u0648\u06cc\u0633\u0647 : \ufee3\ufeae\ufea9 \ufe81\ufeeb\ufeb4\ufe98\ufeea \ufea9\ufead \ufb94\ufeee\ufeb5 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufe97\ufe8e\ufeaf\ufee9 \ufe91\ufeea \ufe91\ufee0\ufeee\ufecd \ufead\ufeb3\ufbff\ufeaa\ufee9 \ufe8d\ufeb5 \ufe91\ufeae\ufe8d\ufbfc \ufb58\ufee8\ufeaa \ufb7c\ufee8\ufbff\ufee6 \ufee7\ufea0\ufeee\ufe8d \ufb90\ufeae\ufea9 : \u201d \ufb58\ufeb4\ufeae\ufee1 \ufea9\ufead \ufeaf\ufee7\ufeaa\ufb94\ufbfd \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeaf\ufea9\ufbfc \ufee7\ufb91\ufee6 \u201d \ufb58\ufeb4\ufeae \ufee3\ufe98\ufecc\ufea0\ufe90 \ufeed \ufee3\ufe92\ufeec\ufeee\ufe95 \ufe91\ufeea \ufb58\ufeaa\ufead \ufee7\ufb95\ufe8e\ufee9 \ufb90\ufeae\ufea9 \ufe91\ufeaa\ufbfe\ufee6 \ufee3\ufecc\ufee8\ufe8e \ufb90\ufeea \ufe8d\ufeed \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeb3\ufe96 \ufb90\ufe9e \ufee7\ufeaa\ufe8d\ufeb7\ufe98\ufeea \ufb58\ufeaa\ufead \ufe91\ufeea \ufee7\ufb95\ufe8e\ufee9 \ufee3\ufe98\ufecc\ufea0\ufe90 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufedf\ufe92\ufea8\ufee8\ufeaa\ufbfc \ufeaf\ufea9 \ufeed \ufe8d\ufea9\ufe8d\ufee3\ufeea \ufea9\ufe8d\ufea9."
                    }
                  </div>
                </Stack__>
              </AntdModal>
            </Stack__>
            <Embed
              className={classNames("__wab_instance", sty.embedHtml__q0Mht)}
              code={
                "    <script>\r\n        String.prototype.EntoFa = function() {\r\n            return this.replace(/\\d/g, d => '\u06f0\u06f1\u06f2\u06f3\u06f4\u06f5\u06f6\u06f7\u06f8\u06f9'[d]);\r\n        }\r\n        function convertNumbersInPage() {\r\n            const elements = document.querySelectorAll('body *:not(script):not(style)');\r\n            elements.forEach(element => {\r\n                element.childNodes.forEach(node => {\r\n                    if (node.nodeType === Node.TEXT_NODE) {\r\n                        node.nodeValue = node.nodeValue.EntoFa();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    setTimeout(convertNumbersInPage, 1000);\r\n    </script>"
              }
            />

            <ApiRequest
              data-plasmic-name={"user"}
              data-plasmic-override={overrides.user}
              className={classNames("__wab_instance", sty.user)}
              config={{ headers: { "Content-Type": "application/json" } }}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ya1HO
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wBq8Y
                  )}
                >
                  {"Loading..."}
                </div>
              }
              method={"POST"}
              onError={generateStateOnChangeProp($state, ["user", "error"])}
              onLoading={generateStateOnChangeProp($state, ["user", "loading"])}
              onSuccess={generateStateOnChangeProp($state, ["user", "data"])}
              url={"https://api.liom.app/hamyar/privateCalenderV2"}
            />

            <ApiRequest
              data-plasmic-name={"shop"}
              data-plasmic-override={overrides.shop}
              className={classNames("__wab_instance", sty.shop)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aDm39
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fDezM
                  )}
                >
                  {"Loading..."}
                </div>
              }
              method={"POST"}
              onError={generateStateOnChangeProp($state, ["shop", "error"])}
              onLoading={generateStateOnChangeProp($state, ["shop", "loading"])}
              onSuccess={generateStateOnChangeProp($state, ["shop", "data"])}
              url={"https://api.liom.app/hamyar/shop"}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___5SPzw)}
            >
              <Navbaricon
                data-plasmic-name={"navbaricon"}
                data-plasmic-override={overrides.navbaricon}
                className={classNames("__wab_instance", sty.navbaricon)}
                click={generateStateValueProp($state, ["navbaricon", "click"])}
                onClickChange={generateStateOnChangeProp($state, [
                  "navbaricon",
                  "click"
                ])}
              />

              <Navbaricon2
                data-plasmic-name={"navbaricon2"}
                data-plasmic-override={overrides.navbaricon2}
                className={classNames("__wab_instance", sty.navbaricon2)}
                click={generateStateValueProp($state, ["navbaricon2", "click"])}
                onClickChange={generateStateOnChangeProp($state, [
                  "navbaricon2",
                  "click"
                ])}
              />
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "switchbest",
    "input",
    "button",
    "reveal",
    "useful",
    "harmful",
    "modal",
    "subscription",
    "shopbtn",
    "modal2",
    "user",
    "shop",
    "navbaricon",
    "navbaricon2"
  ],
  switchbest: ["switchbest"],
  input: ["input"],
  button: ["button"],
  reveal: ["reveal", "useful"],
  useful: ["useful"],
  harmful: ["harmful"],
  modal: ["modal", "subscription", "shopbtn"],
  subscription: ["subscription"],
  shopbtn: ["shopbtn"],
  modal2: ["modal2"],
  user: ["user"],
  shop: ["shop"],
  navbaricon: ["navbaricon"],
  navbaricon2: ["navbaricon2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  switchbest: typeof Switchbest;
  input: typeof AntdInput;
  button: typeof AntdButton;
  reveal: typeof Reveal;
  useful: typeof Useful;
  harmful: typeof Harmful;
  modal: typeof AntdModal;
  subscription: typeof Subscription;
  shopbtn: typeof AntdButton;
  modal2: typeof AntdModal;
  user: typeof ApiRequest;
  shop: typeof ApiRequest;
  navbaricon: typeof Navbaricon;
  navbaricon2: typeof Navbaricon2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMale__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMale__VariantsArgs;
    args?: PlasmicMale__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMale__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMale__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMale__ArgProps,
          internalVariantPropNames: PlasmicMale__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMale__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMale";
  } else {
    func.displayName = `PlasmicMale.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicMale = Object.assign(
  // Top-level PlasmicMale renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    switchbest: makeNodeComponent("switchbest"),
    input: makeNodeComponent("input"),
    button: makeNodeComponent("button"),
    reveal: makeNodeComponent("reveal"),
    useful: makeNodeComponent("useful"),
    harmful: makeNodeComponent("harmful"),
    modal: makeNodeComponent("modal"),
    subscription: makeNodeComponent("subscription"),
    shopbtn: makeNodeComponent("shopbtn"),
    modal2: makeNodeComponent("modal2"),
    user: makeNodeComponent("user"),
    shop: makeNodeComponent("shop"),
    navbaricon: makeNodeComponent("navbaricon"),
    navbaricon2: makeNodeComponent("navbaricon2"),

    // Metadata about props expected for PlasmicMale
    internalVariantProps: PlasmicMale__VariantProps,
    internalArgProps: PlasmicMale__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMale;
/* prettier-ignore-end */
