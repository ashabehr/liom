/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: nEoiheI66Xy-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicShopResult2.module.css"; // plasmic-import: nEoiheI66Xy-/css

import EmojiHappySquareSvgrepoComSvg2Icon from "./icons/PlasmicIcon__EmojiHappySquareSvgrepoComSvg2"; // plasmic-import: xOMaWtcuO4fo/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import EmojiSadSquareSvgrepoComSvgIcon from "./icons/PlasmicIcon__EmojiSadSquareSvgrepoComSvg"; // plasmic-import: r-c9byRGfifF/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: 8DTE5iQ0tvze/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: H9d2pdUvXD_1/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon

createPlasmicElementProxy;

export type PlasmicShopResult2__VariantMembers = {
  failed: "failed";
  successful: "successful";
};
export type PlasmicShopResult2__VariantsArgs = {
  failed?: SingleBooleanChoiceArg<"failed">;
  successful?: SingleBooleanChoiceArg<"successful">;
};
type VariantPropType = keyof PlasmicShopResult2__VariantsArgs;
export const PlasmicShopResult2__VariantProps = new Array<VariantPropType>(
  "failed",
  "successful"
);

export type PlasmicShopResult2__ArgsType = {};
type ArgPropType = keyof PlasmicShopResult2__ArgsType;
export const PlasmicShopResult2__ArgProps = new Array<ArgPropType>();

export type PlasmicShopResult2__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  button3?: Flex__<typeof Button>;
  fragmentApiRequest?: Flex__<typeof ApiRequest>;
  button4?: Flex__<typeof Button>;
  modal?: Flex__<typeof AntdModal>;
  section?: Flex__<"section">;
  button5?: Flex__<typeof Button>;
  button6?: Flex__<typeof Button>;
};

export interface DefaultShopResult2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShopResult2__RenderFunc(props: {
  variants: PlasmicShopResult2__VariantsArgs;
  args: PlasmicShopResult2__ArgsType;
  overrides: PlasmicShopResult2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "failed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.location.href.includes("status=false");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.failed
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "green"
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "failed", "failed") ? [] : "green"
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "failed", "failed") ? "clear" : "green"
      },
      {
        path: "fragmentApiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loadingbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "successful",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.location.href.includes("status=true");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.successful
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "sasasa"
      },
      {
        path: "disable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "failed", "failed") &&
          hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant($state, "failed", "failed")
            ? false
            : undefined
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "failed", "failed") ? "blue" : undefined
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "failed", "failed") ? "green" : undefined
      },
      {
        path: "redirectUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return `https://apps.liom.app/shopResult?buyId=${
                $ctx.query.buyId
              }&?offCode=${
                $ctx.query.offCode
              }&token=hjk812${$ctx.query.token.slice(6, -3)}jkp&redirectUrl=${
                $ctx.query.redirectUrl
              }`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootfailed]: hasVariant($state, "failed", "failed"),
              [sty.rootsuccessful]: hasVariant(
                $state,
                "successful",
                "successful"
              ),
              [sty.rootsuccessful_failed]:
                hasVariant($state, "successful", "successful") &&
                hasVariant($state, "failed", "failed")
            }
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5GW9K, {
              [sty.freeBoxfailed___5GW9Ka1WOe]: hasVariant(
                $state,
                "failed",
                "failed"
              ),
              [sty.freeBoxsuccessful___5GW9K41VpB]: hasVariant(
                $state,
                "successful",
                "successful"
              )
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eeLLn, {
                [sty.freeBoxsuccessful__eeLLn41VpB]: hasVariant(
                  $state,
                  "successful",
                  "successful"
                )
              })}
            >
              <EmojiHappySquareSvgrepoComSvg2Icon
                className={classNames(projectcss.all, sty.svg__p6ZC, {
                  [sty.svgsuccessful__p6ZC41VpB]: hasVariant(
                    $state,
                    "successful",
                    "successful"
                  ),
                  [sty.svgsuccessful_failed__p6ZC41VpBA1WOe]:
                    hasVariant($state, "successful", "successful") &&
                    hasVariant($state, "failed", "failed")
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nbGnm,
                  {
                    [sty.textsuccessful__nbGnm41VpB]: hasVariant(
                      $state,
                      "successful",
                      "successful"
                    )
                  }
                )}
              >
                {
                  "\u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0648\u0641\u0642"
                }
              </div>
            </Stack__>
            <div
              className={classNames(projectcss.all, sty.freeBox__agFhi, {
                [sty.freeBoxfailed__agFhIa1WOe]: hasVariant(
                  $state,
                  "failed",
                  "failed"
                ),
                [sty.freeBoxsuccessful__agFhi41VpB]: hasVariant(
                  $state,
                  "successful",
                  "successful"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d8WN,
                  {
                    [sty.textfailed__d8WNa1WOe]: hasVariant(
                      $state,
                      "failed",
                      "failed"
                    ),
                    [sty.textsuccessful__d8WN41VpB]: hasVariant(
                      $state,
                      "successful",
                      "successful"
                    )
                  }
                )}
              >
                {
                  "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0627\u0645\u0648\u0641\u0642"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dAqWw,
                  {
                    [sty.textfailed__dAqWWa1WOe]: hasVariant(
                      $state,
                      "failed",
                      "failed"
                    ),
                    [sty.textsuccessful__dAqWw41VpB]: hasVariant(
                      $state,
                      "successful",
                      "successful"
                    )
                  }
                )}
              >
                {hasVariant($state, "failed", "failed")
                  ? "\u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0627\u062f \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0627\u0648\u0645\u062f\u0647 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0634\u062f\u0647. \u0644\u0637\u0641\u0627\u064b \u06cc\u0647 \u0628\u0627\u0631 \u062f\u06cc\u06af\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0648 \u0628\u0631\u0631\u0633\u06cc \u0648 \u062f\u0648\u0628\u0627\u0631\u0647 \u0627\u0645\u062a\u062d\u0627\u0646 \u06a9\u0646\u06cc\u062f."
                  : "\u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0627\u062f \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0627\u0648\u0645\u062f\u0647 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0634\u062f\u0647. \u0644\u0637\u0641\u0627\u064b \u06cc\u0647 \u0628\u0627\u0631 \u062f\u06cc\u06af\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0648 \u0628\u0631\u0631\u0633\u06cc \u0648 \u062f\u0648\u0628\u0627\u0631\u0647 \u0627\u0645\u062a\u062d\u0627\u0646 \u06a9\u0646\u06cc\u062f. \u0627\u06af\u0631 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u0631\u0627\u0647\u0646\u0645\u0627\u06cc\u06cc \u062f\u0627\u0634\u062a\u06cc\u062f\u060c \u0645\u0627 \u0627\u06cc\u0646\u062c\u0627\u06cc\u06cc\u0645 \u062a\u0627 \u06a9\u0645\u06a9\u062a\u0648\u0646 \u06a9\u0646\u06cc\u0645."}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dUbrM,
                  {
                    [sty.textfailed__dUbrMa1WOe]: hasVariant(
                      $state,
                      "failed",
                      "failed"
                    ),
                    [sty.textsuccessful__dUbrM41VpB]: hasVariant(
                      $state,
                      "successful",
                      "successful"
                    )
                  }
                )}
              >
                {hasVariant($state, "successful", "successful")
                  ? "\u0627\u0632 \u062e\u0631\u06cc\u062f \u0634\u0645\u0627 \u0633\u067e\u0627\u0633\u06af\u0632\u0627\u0631\u06cc\u0645. \u0627\u0634\u062a\u0631\u0627\u06a9 \u0634\u0645\u0627 \u0627\u06a9\u0646\u0648\u0646 \u0641\u0639\u0627\u0644 \u0627\u0633\u062a \u0648 \u0645\u06cc\u062a\u0648\u0627\u0646\u06cc\u062f \u0627\u0632 \u0622\u0646 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u06a9\u0646\u06cc\u062f."
                  : "\u0627\u0632 \u0627\u0646\u062a\u062e\u0627\u0628 \u0634\u0645\u0627 \u0633\u067e\u0627\u0633\u06af\u0632\u0627\u0631\u06cc\u0645. \u0627\u0634\u062a\u0631\u0627\u06a9 \u0634\u0645\u0627 \u0627\u06a9\u0646\u0648\u0646 \u0641\u0639\u0627\u0644 \u0627\u0633\u062a \u0648 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0645\u0627 \u0628\u0647\u0631\u0647\u200c\u0645\u0646\u062f \u0634\u0648\u06cc\u062f. \u062f\u0631 \u0635\u0648\u0631\u062a \u062f\u0627\u0634\u062a\u0646 \u0647\u0631\u06af\u0648\u0646\u0647 \u0633\u0648\u0627\u0644 \u06cc\u0627 \u0646\u06cc\u0627\u0632 \u060c \u0631\u0627\u0647\u200c\u0647\u0627\u06cc \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u062f\u0631 \u062f\u0633\u062a\u0631\u0633 \u0634\u0645\u0627\u0633\u062a."}
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__s2ST,
                {
                  [sty.textsuccessful__s2ST41VpB]: hasVariant(
                    $state,
                    "successful",
                    "successful"
                  )
                }
              )}
            >
              {"\u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0648\u0641\u0642"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__htWHv,
                {
                  [sty.textfailed__htWHva1WOe]: hasVariant(
                    $state,
                    "failed",
                    "failed"
                  ),
                  [sty.textsuccessful__htWHv41VpB]: hasVariant(
                    $state,
                    "successful",
                    "successful"
                  )
                }
              )}
            >
              {hasVariant($state, "successful", "successful")
                ? "\u0627\u0632 \u0627\u0646\u062a\u062e\u0627\u0628 \u0634\u0645\u0627 \u0633\u067e\u0627\u0633\u06af\u0632\u0627\u0631\u06cc\u0645. \u0627\u0634\u062a\u0631\u0627\u06a9 \u0634\u0645\u0627 \u0627\u06a9\u0646\u0648\u0646 \u0641\u0639\u0627\u0644 \u0627\u0633\u062a \u0648 \u0627\u0632 \u0627\u06cc\u0646 \u067e\u0633 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u067e\u06cc\u0627\u0645\u06a9\u200c\u0647\u0627\u06cc \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u0645\u0631\u062a\u0628\u0637 \u0628\u0627 \u062f\u0648\u0631\u0647 \u0642\u0627\u0639\u062f\u06af\u06cc \u0647\u0645\u06cc\u0627\u0631\u062a\u0627\u0646 \u0631\u0627 \u0627\u0632 \u0644\u06cc\u0648\u0645 \u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u0646\u06cc\u062f."
                : "\u0627\u0632 \u0627\u0646\u062a\u062e\u0627\u0628 \u0634\u0645\u0627 \u0633\u067e\u0627\u0633\u06af\u0632\u0627\u0631\u06cc\u0645. \u0627\u0634\u062a\u0631\u0627\u06a9 \u0634\u0645\u0627 \u0627\u06a9\u0646\u0648\u0646 \u0641\u0639\u0627\u0644 \u0627\u0633\u062a \u0648 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0645\u0627 \u0628\u0647\u0631\u0647\u200c\u0645\u0646\u062f \u0634\u0648\u06cc\u062f. \u062f\u0631 \u0635\u0648\u0631\u062a \u062f\u0627\u0634\u062a\u0646 \u0647\u0631\u06af\u0648\u0646\u0647 \u0633\u0648\u0627\u0644 \u06cc\u0627 \u0646\u06cc\u0627\u0632 \u060c \u0631\u0627\u0647\u200c\u0647\u0627\u06cc \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u062f\u0631 \u062f\u0633\u062a\u0631\u0633 \u0634\u0645\u0627\u0633\u062a."}
            </div>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button, {
                [sty.buttonfailed]: hasVariant($state, "failed", "failed"),
                [sty.buttonsuccessful]: hasVariant(
                  $state,
                  "successful",
                  "successful"
                ),
                [sty.buttonsuccessful_failed]:
                  hasVariant($state, "failed", "failed") &&
                  hasVariant($state, "successful", "successful")
              })}
              color={generateStateValueProp($state, ["button", "color"])}
              isDisabled={
                hasVariant($state, "failed", "failed") &&
                hasVariant($state, "successful", "successful")
                  ? (() => {
                      try {
                        return $state.disable;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : hasVariant($state, "successful", "successful")
                  ? (() => {
                      try {
                        return $state.disable;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            history.pushState(
                              null,
                              "",
                              "https://apps.liom.app/Self-care/"
                            );
                            return window.location.replace(
                              `${$ctx.query.redirectUrl}`
                            );
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zRIv,
                  {
                    [sty.textsuccessful__zRIv41VpB]: hasVariant(
                      $state,
                      "successful",
                      "successful"
                    )
                  }
                )}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </div>
            </Button>
          </Stack__>
          {(hasVariant($state, "failed", "failed") ? true : false) ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ens76, {
                [sty.freeBoxfailed__ens76A1WOe]: hasVariant(
                  $state,
                  "failed",
                  "failed"
                ),
                [sty.freeBoxsuccessful__ens7641VpB]: hasVariant(
                  $state,
                  "successful",
                  "successful"
                )
              })}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__r1Uw4, {
                  [sty.freeBoxfailed__r1Uw4A1WOe]: hasVariant(
                    $state,
                    "failed",
                    "failed"
                  )
                })}
              >
                <EmojiSadSquareSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg___9Cnef, {
                    [sty.svgfailed___9CneFa1WOe]: hasVariant(
                      $state,
                      "failed",
                      "failed"
                    ),
                    [sty.svgsuccessful_failed___9Cnef41VpBA1WOe]:
                      hasVariant($state, "successful", "successful") &&
                      hasVariant($state, "failed", "failed")
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wqnBj,
                    {
                      [sty.textfailed__wqnBja1WOe]: hasVariant(
                        $state,
                        "failed",
                        "failed"
                      )
                    }
                  )}
                >
                  {
                    "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0627\u0645\u0648\u0641\u0642"
                  }
                </div>
              </Stack__>
              <div
                className={classNames(projectcss.all, sty.freeBox__jq1Cc, {
                  [sty.freeBoxfailed__jq1Cca1WOe]: hasVariant(
                    $state,
                    "failed",
                    "failed"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__diy5J,
                    {
                      [sty.textfailed__diy5Ja1WOe]: hasVariant(
                        $state,
                        "failed",
                        "failed"
                      ),
                      [sty.textsuccessful_failed__diy5J41VpBA1WOe]:
                        hasVariant($state, "successful", "successful") &&
                        hasVariant($state, "failed", "failed")
                    }
                  )}
                >
                  {hasVariant($state, "failed", "failed")
                    ? "\u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0627\u062f \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0627\u0648\u0645\u062f\u0647 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0634\u062f\u0647. \u0644\u0637\u0641\u0627\u064b \u06cc\u0647 \u0628\u0627\u0631 \u062f\u06cc\u06af\u0647 \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 \u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f . "
                    : "\u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0627\u062f \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0627\u0648\u0645\u062f\u0647 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0634\u062f\u0647. \u0644\u0637\u0641\u0627\u064b \u06cc\u0647 \u0628\u0627\u0631 \u062f\u06cc\u06af\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0648 \u0628\u0631\u0631\u0633\u06cc \u0648 \u062f\u0648\u0628\u0627\u0631\u0647 \u0627\u0645\u062a\u062d\u0627\u0646 \u06a9\u0646\u06cc\u062f. \u0627\u06af\u0631 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u0631\u0627\u0647\u0646\u0645\u0627\u06cc\u06cc \u062f\u0627\u0634\u062a\u06cc\u062f\u060c \u0645\u0627 \u0627\u06cc\u0646\u062c\u0627\u06cc\u06cc\u0645 \u062a\u0627 \u06a9\u0645\u06a9\u062a\u0648\u0646 \u06a9\u0646\u06cc\u0645."}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dlEI,
                    {
                      [sty.textfailed__dlEIa1WOe]: hasVariant(
                        $state,
                        "failed",
                        "failed"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "failed", "failed") &&
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "\u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc >"
                    : "Enter some text"}
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qXdVq, {
                  [sty.freeBoxfailed__qXdVQa1WOe]: hasVariant(
                    $state,
                    "failed",
                    "failed"
                  )
                })}
              >
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2, {
                    [sty.button2failed]: hasVariant($state, "failed", "failed"),
                    [sty.button2successful]: hasVariant(
                      $state,
                      "successful",
                      "successful"
                    ),
                    [sty.button2successful_failed]:
                      hasVariant($state, "failed", "failed") &&
                      hasVariant($state, "successful", "successful")
                  })}
                  color={generateStateValueProp($state, ["button2", "color"])}
                  endIcon={
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant($state, "failed", "failed")
                          ? Icon12Icon
                          : Icon11Icon
                      }
                      className={classNames(projectcss.all, sty.svg__s5W8S, {
                        [sty.svgfailed__s5W8Sa1WOe]: hasVariant(
                          $state,
                          "failed",
                          "failed"
                        )
                      })}
                      role={"img"}
                    />
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadingbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingbtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingbtn"] != null &&
                      typeof $steps["updateLoadingbtn"] === "object" &&
                      typeof $steps["updateLoadingbtn"].then === "function"
                    ) {
                      $steps["updateLoadingbtn"] = await $steps[
                        "updateLoadingbtn"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.staas.ir/webhook/rest/shop/list",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    id: $ctx.query.buyId,
                                    offCode: $ctx.query.offCode,
                                    authorization: $ctx.query.token,
                                    redirectUrl: `https://apps.liom.app/shopResult?buyId=${
                                      $ctx.query.buyId
                                    }&?offCode=${$ctx.query.offCode}&token=${
                                      $ctx.query.token
                                    }&redirectUrl=${encodeURIComponent(
                                      $ctx.query.redirectUrl
                                    )}`
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization:
                                        $state.fragmentApiRequest.data.result
                                          .token
                                    }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateLoadingbtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingbtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingbtn2"] != null &&
                      typeof $steps["updateLoadingbtn2"] === "object" &&
                      typeof $steps["updateLoadingbtn2"].then === "function"
                    ) {
                      $steps["updateLoadingbtn2"] = await $steps[
                        "updateLoadingbtn2"
                      ];
                    }

                    $steps["goToPage"] =
                      $steps.invokeGlobalAction.data.success == true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return $steps.invokeGlobalAction.data.result;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  showEndIcon={
                    hasVariant($state, "failed", "failed") &&
                    hasVariant(globalVariants, "screen", "mobile")
                      ? (() => {
                          try {
                            return $state.loadingbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "failed", "failed")
                      ? (() => {
                          try {
                            return $state.loadingbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : undefined
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___591T,
                      {
                        [sty.textfailed___591Ta1WOe]: hasVariant(
                          $state,
                          "failed",
                          "failed"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "failed", "failed")
                      ? "\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"
                      : "\u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames("__wab_instance", sty.button3, {
                    [sty.button3failed]: hasVariant($state, "failed", "failed"),
                    [sty.button3successful]: hasVariant(
                      $state,
                      "successful",
                      "successful"
                    ),
                    [sty.button3successful_failed]:
                      hasVariant($state, "failed", "failed") &&
                      hasVariant($state, "successful", "successful")
                  })}
                  color={generateStateValueProp($state, ["button3", "color"])}
                  isDisabled={
                    hasVariant($state, "failed", "failed") &&
                    hasVariant($state, "successful", "successful")
                      ? (() => {
                          try {
                            return $state.disable;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "failed", "failed")
                      ? (() => {
                          try {
                            return $state.disable;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : undefined
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                history.pushState(
                                  null,
                                  "",
                                  "https://apps.liom.app/Self-care/"
                                );
                                return window.location.replace(
                                  `${$ctx.query.redirectUrl}`
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kD9M3,
                      {
                        [sty.textfailed__kD9M3A1WOe]: hasVariant(
                          $state,
                          "failed",
                          "failed"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "failed", "failed")
                      ? "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0628\u0631\u0646\u0627\u0645\u0647"
                      : "\u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
              </Stack__>
            </Stack__>
          ) : null}
          <ApiRequest
            data-plasmic-name={"fragmentApiRequest"}
            data-plasmic-override={overrides.fragmentApiRequest}
            body={
              hasVariant($state, "failed", "failed")
                ? (() => {
                    try {
                      return {
                        refCode: $ctx.query.refCode,
                        mobile: $ctx.query.mobile
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
            className={classNames("__wab_instance", sty.fragmentApiRequest, {
              [sty.fragmentApiRequestfailed]: hasVariant(
                $state,
                "failed",
                "failed"
              ),
              [sty.fragmentApiRequestsuccessful]: hasVariant(
                $state,
                "successful",
                "successful"
              )
            })}
            config={
              hasVariant($state, "failed", "failed")
                ? { headers: { "Content-Type": "application/json" } }
                : undefined
            }
            errorDisplay={null}
            loadingDisplay={null}
            method={hasVariant($state, "failed", "failed") ? "GET" : "GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "fragmentApiRequest",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "fragmentApiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "fragmentApiRequest",
                "data"
              ]).apply(null, eventArgs);
            }}
            params={
              hasVariant($state, "failed", "failed")
                ? (() => {
                    try {
                      return {
                        r: $ctx.query.r,
                        m: $ctx.query.m
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
            shouldFetch={true}
            url={
              hasVariant($state, "failed", "failed")
                ? "https://n8n.staas.ir/webhook/hamyar/privateCalenderV2"
                : undefined
            }
          />

          <Icon115Icon
            className={classNames(projectcss.all, sty.svg___1IBkk, {
              [sty.svgfailed___1IBkka1WOe]: hasVariant(
                $state,
                "failed",
                "failed"
              ),
              [sty.svgsuccessful___1IBkk41VpB]: hasVariant(
                $state,
                "successful",
                "successful"
              ),
              [sty.svgsuccessful_failed___1IBkk41VpBA1WOe]:
                hasVariant($state, "failed", "failed") &&
                hasVariant($state, "successful", "successful")
            })}
            role={"img"}
          />

          <Button
            data-plasmic-name={"button4"}
            data-plasmic-override={overrides.button4}
            className={classNames("__wab_instance", sty.button4, {
              [sty.button4failed]: hasVariant($state, "failed", "failed")
            })}
            color={generateStateValueProp($state, ["button4", "color"])}
            onClick={async event => {
              const $steps = {};

              $steps["goToCommonError"] = true
                ? (() => {
                    const actionArgs = { destination: `/common-error` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToCommonError"] != null &&
                typeof $steps["goToCommonError"] === "object" &&
                typeof $steps["goToCommonError"].then === "function"
              ) {
                $steps["goToCommonError"] = await $steps["goToCommonError"];
              }
            }}
            onColorChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button4", "color"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xUmH,
                {
                  [sty.textfailed__xUmHa1WOe]: hasVariant(
                    $state,
                    "failed",
                    "failed"
                  )
                }
              )}
            >
              {
                "\u062e\u0631\u06cc\u062f\u0645 \u0646\u0627\u0645\u0648\u0641\u0642 \u0634\u062f \u0648 \u0627\u0634\u062a\u0631\u0627\u06a9\u0645 \u0641\u0639\u0627\u0644 \u0646\u0634\u062f , \u0686\u06cc\u06a9\u0627\u0631 \u06a9\u0646\u0645 \u061f"
              }
            </div>
          </Button>
          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal, {
              [sty.modalfailed]: hasVariant($state, "failed", "failed"),
              [sty.modalsuccessful]: hasVariant(
                $state,
                "successful",
                "successful"
              )
            })}
            closeIcon={
              (hasVariant($state, "failed", "failed") ? true : false) ? (
                <XIcon
                  className={classNames(projectcss.all, sty.svg__uTzxK, {
                    [sty.svgfailed__uTzxKa1WOe]: hasVariant(
                      $state,
                      "failed",
                      "failed"
                    )
                  })}
                  role={"img"}
                />
              ) : null
            }
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={
              hasVariant($state, "failed", "failed") ? true : undefined
            }
            modalContentClassName={classNames({
              [sty["pcls_1S6nQ9MK-CpM"]]: hasVariant($state, "failed", "failed")
            })}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1PX39,
                  {
                    [sty.textfailed___1PX39A1WOe]: hasVariant(
                      $state,
                      "failed",
                      "failed"
                    )
                  }
                )}
              >
                {hasVariant($state, "failed", "failed") ? "" : "Modal title"}
              </div>
            }
            trigger={null}
            width={hasVariant($state, "failed", "failed") ? "100vw" : ``}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fL0T3, {
                [sty.freeBoxfailed__fL0T3A1WOe]: hasVariant(
                  $state,
                  "failed",
                  "failed"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fqhQj,
                  {
                    [sty.textfailed__fqhQja1WOe]: hasVariant(
                      $state,
                      "failed",
                      "failed"
                    )
                  }
                )}
              >
                {hasVariant($state, "failed", "failed")
                  ? "\u062e\u0637\u0627\u200c\u0647\u0627\u06cc \u0645\u062a\u062f\u0627\u0648\u0644 \u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9"
                  : "Modal content"}
              </div>
            </Stack__>
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section, {
                [sty.sectionfailed]: hasVariant($state, "failed", "failed")
              })}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mdwWt, {
                  [sty.freeBoxfailed__mdwWta1WOe]: hasVariant(
                    $state,
                    "failed",
                    "failed"
                  )
                })}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rqdKv, {
                    [sty.freeBoxfailed__rqdKVa1WOe]: hasVariant(
                      $state,
                      "failed",
                      "failed"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1Nsmm,
                      {
                        [sty.textfailed___1Nsmma1WOe]: hasVariant(
                          $state,
                          "failed",
                          "failed"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "failed", "failed")
                      ? "\u0627\u06af\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0648 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u06cc \u0627\u0645\u0627 \u0628\u0627 \u067e\u06cc\u0627\u0645 \u062e\u0631\u06cc\u062f \u0646\u0627\u0645\u0648\u0641\u0642 \u0645\u0648\u0627\u062c\u0647 \u0634\u062f\u06cc\u066c \u0637\u0628\u0642 \u0645\u0631\u0627\u062d\u0644 \u0632\u06cc\u0631 \u0628\u0631\u0648 \u062c\u0644\u0648:"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aOiwV,
                      {
                        [sty.textfailed__aOiwVa1WOe]: hasVariant(
                          $state,
                          "failed",
                          "failed"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "failed", "failed") ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return `<hr><p>۱- اگر از بازار/مایکت اشتراک رو فعال کردی٬ وارد حساب کاربریت در بازار/مایکت شو و از قسمت کیف پول چک کن که مبلغ اشتراک به کیف پولت برگشته یا نه .</p>
<hr>
<p>۲- اگه مبلغ به کیف پول برگشته بود مجددا تهیه اشتراک رو بزن و اینبار به جای پرداخت از کارت بانکی٬ پرداخت از کیف پول رو انتخاب کن.</p>
<hr>
<p>۳- اگر مبلغ به کیف پول برنگشته بود٬ اول چک کن که فیلتر شکن یا vpn روشن نباشه و اگر روشن بود خاموشش کن و یکبار کاملا اپلیکیشن لیوم رو ببند و مجدد وارد اپلیکیشن بشو.</p>
<hr>
<p>۴- اگر بازهم فعال نشد ممکنه خطایی در درگاه بانکی به وجود اومده باشه و تا چند ساعت آینده مبلع به حساب بانکی شما برمیگرده.</p>
<hr>
<p>۵- اگر مبلغ بعد از چند ساعت بازگشت داده نشد لطفا اسکرین شات تراکنشی که داشتی رو برای پشتیبانی بفرست تا بتونیم سریعا پیگیری کنیم.</p>`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : (
                      "Enter some text"
                    )}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hDZnA, {
                    [sty.freeBoxfailed__hDZnAa1WOe]: hasVariant(
                      $state,
                      "failed",
                      "failed"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w0IDy,
                      {
                        [sty.textfailed__w0IDYa1WOe]: hasVariant(
                          $state,
                          "failed",
                          "failed"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "failed", "failed")
                      ? "\u0627\u06af\u0647 \u062f\u0631 \u0647\u0646\u06af\u0627\u0645 \u0627\u0646\u062a\u062e\u0627\u0628 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0645\u0633\u062a\u0642\u06cc\u0645\u0627 \u0648\u0627\u0631\u062f \u0635\u0641\u062d\u0647 \u062e\u0631\u06cc\u062f \u0646\u0627\u0645\u0648\u0641\u0642 \u0634\u062f\u06cc \u0637\u0628\u0642 \u0645\u0631\u0627\u062d\u0644 \u0632\u06cc\u0631 \u062c\u0644\u0648 \u0628\u0631\u0648:"
                      : "Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zQUe,
                      {
                        [sty.textfailed__zQUea1WOe]: hasVariant(
                          $state,
                          "failed",
                          "failed"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "failed", "failed") ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return `<hr>
<p>۱- اگر برای لیوم نسخه بروزسانی اومده حتما نسخه جدید رو نصب کن.</p>
<hr>
<p>۲- مطمئن شو که قبل از شروع فرایند خرید فیلترشکن (vpn) رو خاموش کردی.</p>
<hr>
<p>۳- اگر از بازار یا مایکت در حال تهیه اشتراک هستی حتما چک کن که وارد اکانتت در بازار/مایکت شده باشی.</p>`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : (
                      "Enter some text"
                    )}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___33F8Q, {
                    [sty.freeBoxfailed___33F8Qa1WOe]: hasVariant(
                      $state,
                      "failed",
                      "failed"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s9RuF,
                      {
                        [sty.textfailed__s9RuFa1WOe]: hasVariant(
                          $state,
                          "failed",
                          "failed"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "failed", "failed")
                      ? "\u0627\u06af\u0647 \u0647\u06cc\u0686 \u06a9\u062f\u0648\u0645 \u0627\u0632 \u0631\u0648\u0634 \u0647\u0627\u06cc \u0628\u0627\u0644\u0627 \u062c\u0648\u0627\u0628 \u0646\u062f\u0627\u062f \u0644\u0637\u0641\u0627 \u0628\u0647 \u0645\u0627 \u067e\u06cc\u0627\u0645 \u0628\u062f\u0647:"
                      : "Enter some text"}
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vLb3, {
                      [sty.freeBoxfailed__vLb3A1WOe]: hasVariant(
                        $state,
                        "failed",
                        "failed"
                      )
                    })}
                  >
                    <Button
                      data-plasmic-name={"button5"}
                      data-plasmic-override={overrides.button5}
                      className={classNames("__wab_instance", sty.button5, {
                        [sty.button5failed]: hasVariant(
                          $state,
                          "failed",
                          "failed"
                        )
                      })}
                      color={generateStateValueProp($state, [
                        "button5",
                        "color"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToHttpsTMeLiomSupport"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: "https://t.me/liom_support"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToHttpsTMeLiomSupport"] != null &&
                          typeof $steps["goToHttpsTMeLiomSupport"] ===
                            "object" &&
                          typeof $steps["goToHttpsTMeLiomSupport"].then ===
                            "function"
                        ) {
                          $steps["goToHttpsTMeLiomSupport"] = await $steps[
                            "goToHttpsTMeLiomSupport"
                          ];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button5",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      size={
                        hasVariant($state, "failed", "failed")
                          ? "compact"
                          : undefined
                      }
                    >
                      {hasVariant($state, "failed", "failed")
                        ? "\u067e\u06cc\u0627\u0645 \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645"
                        : " "}
                    </Button>
                    <Button
                      data-plasmic-name={"button6"}
                      data-plasmic-override={overrides.button6}
                      className={classNames("__wab_instance", sty.button6, {
                        [sty.button6failed]: hasVariant(
                          $state,
                          "failed",
                          "failed"
                        )
                      })}
                      color={generateStateValueProp($state, [
                        "button6",
                        "color"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToHttpsWebBaleAiChatUid156227309"] = true
                          ? (() => {
                              const actionArgs = {
                                destination:
                                  "https://web.bale.ai/chat?uid=156227309"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToHttpsWebBaleAiChatUid156227309"] !=
                            null &&
                          typeof $steps[
                            "goToHttpsWebBaleAiChatUid156227309"
                          ] === "object" &&
                          typeof $steps["goToHttpsWebBaleAiChatUid156227309"]
                            .then === "function"
                        ) {
                          $steps["goToHttpsWebBaleAiChatUid156227309"] =
                            await $steps["goToHttpsWebBaleAiChatUid156227309"];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button6",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      size={
                        hasVariant($state, "failed", "failed")
                          ? "compact"
                          : undefined
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__br1,
                          {
                            [sty.textfailed__br1A1WOe]: hasVariant(
                              $state,
                              "failed",
                              "failed"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "failed", "failed")
                          ? "\u067e\u06cc\u0627\u0645 \u062f\u0631 \u0628\u0644\u0647"
                          : " "}
                      </div>
                    </Button>
                  </Stack__>
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox__ml3Qz, {
                    [sty.freeBoxfailed__ml3Qza1WOe]: hasVariant(
                      $state,
                      "failed",
                      "failed"
                    )
                  })}
                />
              </Stack__>
            </section>
          </AntdModal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "button",
    "button2",
    "button3",
    "fragmentApiRequest",
    "button4",
    "modal",
    "section",
    "button5",
    "button6"
  ],
  button: ["button"],
  button2: ["button2"],
  button3: ["button3"],
  fragmentApiRequest: ["fragmentApiRequest"],
  button4: ["button4"],
  modal: ["modal", "section", "button5", "button6"],
  section: ["section", "button5", "button6"],
  button5: ["button5"],
  button6: ["button6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
  button2: typeof Button;
  button3: typeof Button;
  fragmentApiRequest: typeof ApiRequest;
  button4: typeof Button;
  modal: typeof AntdModal;
  section: "section";
  button5: typeof Button;
  button6: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShopResult2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShopResult2__VariantsArgs;
    args?: PlasmicShopResult2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShopResult2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShopResult2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShopResult2__ArgProps,
          internalVariantPropNames: PlasmicShopResult2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShopResult2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShopResult2";
  } else {
    func.displayName = `PlasmicShopResult2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicShopResult2 = Object.assign(
  // Top-level PlasmicShopResult2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    button3: makeNodeComponent("button3"),
    fragmentApiRequest: makeNodeComponent("fragmentApiRequest"),
    button4: makeNodeComponent("button4"),
    modal: makeNodeComponent("modal"),
    section: makeNodeComponent("section"),
    button5: makeNodeComponent("button5"),
    button6: makeNodeComponent("button6"),

    // Metadata about props expected for PlasmicShopResult2
    internalVariantProps: PlasmicShopResult2__VariantProps,
    internalArgProps: PlasmicShopResult2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicShopResult2;
/* prettier-ignore-end */
