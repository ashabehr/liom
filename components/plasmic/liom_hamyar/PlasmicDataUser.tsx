/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: FUDO69vr4clr

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicDataUser.module.css"; // plasmic-import: FUDO69vr4clr/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon

createPlasmicElementProxy;

export type PlasmicDataUser__VariantMembers = {};
export type PlasmicDataUser__VariantsArgs = {};
type VariantPropType = keyof PlasmicDataUser__VariantsArgs;
export const PlasmicDataUser__VariantProps = new Array<VariantPropType>();

export type PlasmicDataUser__ArgsType = { header?: any };
type ArgPropType = keyof PlasmicDataUser__ArgsType;
export const PlasmicDataUser__ArgProps = new Array<ArgPropType>("header");

export type PlasmicDataUser__OverridesType = {
  frame41?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
};

export interface DefaultDataUserProps {
  header?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDataUser__RenderFunc(props: {
  variants: PlasmicDataUser__VariantsArgs;
  args: PlasmicDataUser__ArgsType;
  overrides: PlasmicDataUser__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          header: [
            {
              field: "username",
              label_fa:
                "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc",
              width: 150,
              type: "text"
            },
            {
              field: "mobile",
              label_fa:
                "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644",
              width: 130,
              type: "text"
            },
            {
              field: "activeTel",
              label_fa:
                "\u062a\u0644\u06af\u0631\u0627\u0645 \u0641\u0639\u0627\u0644",
              width: 90,
              type: "bool"
            },
            {
              field: "husbandSmsSubTime",
              label_fa:
                "\u067e\u0627\u06cc\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627",
              width: 160,
              type: "datetime"
            },
            {
              field: "selfHamyarSmsSubTime",
              label_fa:
                "\u067e\u0627\u06cc\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9",
              width: 160,
              type: "datetime"
            }
          ]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "date",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            key: "breastCancerSmsSubTime",
            label:
              "\u0632\u0645\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u067e\u06cc\u0627\u0645\u06a9 \u0633\u0631\u0637\u0627\u0646 \u0633\u06cc\u0646\u0647",
            value: "2026-02-03T04:03:11.141000",
            days_left: 143
          },
          {
            key: "pregnancySubTime",
            label:
              "\u0632\u0645\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc",
            value: "2027-11-27T00:36:38.358000",
            days_left: 805
          },
          {
            key: "hamyarTime",
            label: "\u0632\u0645\u0627\u0646 \u0647\u0645\u06cc\u0627\u0631",
            value: "2025-05-21T22:22:35.336000",
            days_left: 0
          },
          {
            key: "husbandSmsSubTime",
            label:
              "\u0632\u0645\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0645\u0633\u0631",
            value: "2025-10-07T08:39:22.886000",
            days_left: 24
          },
          {
            key: "pregnancyBabyGrowthTime",
            label:
              "\u0632\u0645\u0627\u0646 \u0631\u0634\u062f \u0646\u0648\u0632\u0627\u062f \u0628\u0627\u0631\u062f\u0627\u0631\u06cc",
            value: "2027-11-27T00:36:38.463000",
            days_left: 805
          },
          {
            key: "pregnancyBecomeFatherTime",
            label:
              "\u0632\u0645\u0627\u0646 \u067e\u062f\u0631 \u0634\u062f\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc",
            value: "2027-11-27T00:36:38.463000",
            days_left: 805
          },
          {
            key: "pregnancyBetterRelationTime",
            label:
              "\u0632\u0645\u0627\u0646 \u0631\u0648\u0627\u0628\u0637 \u0628\u0647\u062a\u0631 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc",
            value: "2027-11-27T00:36:38.463000",
            days_left: 805
          },
          {
            key: "pregnancyDangerTime",
            label:
              "\u0632\u0645\u0627\u0646 \u062e\u0637\u0631 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc",
            value: "2027-11-27T00:36:38.463000",
            days_left: 805
          },
          {
            key: "pregnancySelfSmsTime",
            label:
              "\u0632\u0645\u0627\u0646 \u067e\u06cc\u0627\u0645\u06a9 \u062e\u0648\u062f \u0628\u0627\u0631\u062f\u0627\u0631\u06cc",
            value: "2027-11-27T00:36:38.463000",
            days_left: 805
          },
          {
            key: "selfHamyarSmsSubTime",
            label:
              "\u0632\u0645\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0645\u06cc\u0627\u0631 \u062e\u0648\u062f",
            value: "2025-12-06T10:33:20.363000",
            days_left: 84
          },
          {
            key: "specialAdviceSubTim",
            label:
              "\u0632\u0645\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0645\u0634\u0627\u0648\u0631\u0647 \u0648\u06cc\u0698\u0647",
            value: "2025-03-09T16:11:12.839000",
            days_left: 0
          }
        ]
      },
      {
        path: "name",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            key: "countBuyBreastCancer",
            label:
              "\u062a\u0639\u062f\u0627\u062f \u062e\u0631\u06cc\u062f \u0627\u0634\u062a\u0631\u0627\u06a9 \u067e\u06cc\u0627\u0645\u06a9 \u0633\u0631\u0637\u0627\u0646 \u0633\u06cc\u0646\u0647",
            value: 3
          },
          {
            key: "countBuyHamyarStatus",
            label:
              "\u062a\u0639\u062f\u0627\u062f \u062e\u0631\u06cc\u062f \u0648\u0636\u0639\u06cc\u062a \u0647\u0645\u06cc\u0627\u0631",
            value: 1
          },
          {
            key: "countBuyHusbandSms",
            label:
              "\u062a\u0639\u062f\u0627\u062f \u062e\u0631\u06cc\u062f \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0645\u0633\u0631",
            value: 3
          },
          {
            key: "countBuyPregnancySubStatus",
            label:
              "\u062a\u0639\u062f\u0627\u062f \u062e\u0631\u06cc\u062f \u0648\u0636\u0639\u06cc\u062a \u0627\u0634\u062a\u0631\u0627\u06a9 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc",
            value: 5
          },
          {
            key: "countBuySelfSms",
            label:
              "\u062a\u0639\u062f\u0627\u062f \u062e\u0631\u06cc\u062f \u067e\u06cc\u0627\u0645\u06a9 \u062e\u0648\u062f",
            value: 1
          },
          {
            key: "countBuySpecialAdvice",
            label:
              "\u062a\u0639\u062f\u0627\u062f \u062e\u0631\u06cc\u062f \u0645\u0634\u0627\u0648\u0631\u0647 \u0648\u06cc\u0698\u0647",
            value: 1
          },
          {
            key: "activeTel",
            label: "\u062a\u0644\u0641\u0646 \u0641\u0639\u0627\u0644",
            value: true
          },
          {
            key: "mobile",
            label:
              "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644",
            value: ""
          },
          {
            key: "id",
            label: "\u0634\u0646\u0627\u0633\u0647",
            value: "265149"
          },
          {
            key: "lastActivity",
            label:
              "\u0622\u062e\u0631\u06cc\u0646 \u0641\u0639\u0627\u0644\u06cc\u062a",
            value: "2025-09-12T18:23:34.707000"
          },
          {
            key: "username",
            label: "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc",
            value: "melika"
          },
          {
            key: "refcode",
            label: "\u06a9\u062f \u0627\u0631\u062c\u0627\u0639",
            value: "3d8fb3"
          }
        ]
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"frame41"}
      data-plasmic-override={overrides.frame41}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.frame41
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__tyNY)}>
        <div className={classNames(projectcss.all, sty.freeBox__csHyN)}>
          <div className={classNames(projectcss.all, sty.freeBox__ialIu)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aI5K7
              )}
            >
              {
                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u06a9\u0627\u0631\u0628\u0631"
              }
            </div>
          </div>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox___2K2Ta)}
                key={currentIndex}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8CpHn
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.label;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1NtCo
                  )}
                  style={(() => {
                    try {
                      return (() => {
                        if (typeof currentItem.value === "boolean")
                          return {
                            background: currentItem.value
                              ? "#00ff0011"
                              : "#ff000011",
                            border: currentItem.value
                              ? "solid 1px #00ff00"
                              : "solid 1px #ff0000",
                            width: "100px",
                            display: "flex",
                            justifyContent: "center",
                            borderRadius: "10px",
                            color: currentItem.value ? "#20ad4e" : "#ff0000"
                          };
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const value = (() => {
                            if (typeof currentItem.value === "boolean") {
                              return currentItem.value ? "فعال" : "غیرفعال";
                            }
                            if (typeof currentItem.value === "string") {
                              const dateRegex =
                                /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/;
                              if (dateRegex.test(currentItem.value)) {
                                const gregorianDate = new Date(
                                  currentItem.value
                                );
                                return new Intl.DateTimeFormat("fa-IR").format(
                                  gregorianDate
                                );
                              }
                              return currentItem.value;
                            }
                            return currentItem.value;
                          })();
                          return value;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            );
          })}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__iflw9)}>
          <div className={classNames(projectcss.all, sty.freeBox__vzN8)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__av87Z
              )}
            >
              {
                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0647\u0645\u06cc\u0627\u0631"
              }
            </div>
          </div>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.date;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__i1DpB)}
                key={currentIndex}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jBhv0
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.label;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ipE5B
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const gregorianDate = new Date(currentItem.value);
                          const persianDate = new Intl.DateTimeFormat(
                            "fa-IR"
                          ).format(gregorianDate);
                          return persianDate;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            );
          })}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__coLmv)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mdnC
          )}
        >
          {"\u06cc\u0627\u062f\u062f\u0627\u0634\u062a:"}
        </div>
        <TextInput
          data-plasmic-name={"textInput"}
          data-plasmic-override={overrides.textInput}
          className={classNames("__wab_instance", sty.textInput)}
          discriptionData={true}
          onChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["textInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          value={generateStateValueProp($state, ["textInput", "value"]) ?? ""}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame41: ["frame41", "textInput"],
  textInput: ["textInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame41: "div";
  textInput: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDataUser__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDataUser__VariantsArgs;
    args?: PlasmicDataUser__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDataUser__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDataUser__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDataUser__ArgProps,
          internalVariantPropNames: PlasmicDataUser__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDataUser__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame41") {
    func.displayName = "PlasmicDataUser";
  } else {
    func.displayName = `PlasmicDataUser.${nodeName}`;
  }
  return func;
}

export const PlasmicDataUser = Object.assign(
  // Top-level PlasmicDataUser renders the root element
  makeNodeComponent("frame41"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),

    // Metadata about props expected for PlasmicDataUser
    internalVariantProps: PlasmicDataUser__VariantProps,
    internalArgProps: PlasmicDataUser__ArgProps
  }
);

export default PlasmicDataUser;
/* prettier-ignore-end */
