/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: dfIi25835BgX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Hamyar2 from "../../Hamyar2"; // plasmic-import: lqbda80vTmgo/component
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import SelfCare2 from "../../SelfCare2"; // plasmic-import: q5NYbKztjYXR/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMainHamyar.module.css"; // plasmic-import: dfIi25835BgX/css

createPlasmicElementProxy;

export type PlasmicMainHamyar__VariantMembers = {
  page: "hamyar" | "self" | "bot";
};
export type PlasmicMainHamyar__VariantsArgs = {
  page?: SingleChoiceArg<"hamyar" | "self" | "bot">;
};
type VariantPropType = keyof PlasmicMainHamyar__VariantsArgs;
export const PlasmicMainHamyar__VariantProps = new Array<VariantPropType>(
  "page"
);

export type PlasmicMainHamyar__ArgsType = {
  reminderOpen?: (event: any) => void;
  token?: string;
  onTokenChange?: (val: string) => void;
  remind?: any;
  userData?: any;
  onUserDataChange?: (val: string) => void;
  editCycle2?: () => void;
  headershow?: boolean;
};
type ArgPropType = keyof PlasmicMainHamyar__ArgsType;
export const PlasmicMainHamyar__ArgProps = new Array<ArgPropType>(
  "reminderOpen",
  "token",
  "onTokenChange",
  "remind",
  "userData",
  "onUserDataChange",
  "editCycle2",
  "headershow"
);

export type PlasmicMainHamyar__OverridesType = {
  root?: Flex__<"div">;
  hamyar2?: Flex__<typeof Hamyar2>;
  section?: Flex__<"section">;
  iframe?: Flex__<typeof Iframe>;
  selfCare2?: Flex__<typeof SelfCare2>;
};

export interface DefaultMainHamyarProps {
  reminderOpen?: (event: any) => void;
  token?: string;
  onTokenChange?: (val: string) => void;
  remind?: any;
  userData?: any;
  onUserDataChange?: (val: string) => void;
  editCycle2?: () => void;
  headershow?: boolean;
  page?: SingleChoiceArg<"hamyar" | "self" | "bot">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainHamyar__RenderFunc(props: {
  variants: PlasmicMainHamyar__VariantsArgs;
  args: PlasmicMainHamyar__ArgsType;
  overrides: PlasmicMainHamyar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          remind: [],
          headershow: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selfCare2.subItems",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "page",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.page
      },
      {
        path: "hamyar2.userdata",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "hamyar2.remind",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props["remind"]
      },
      {
        path: "hamyar2.tokenUser",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "writable",
        variableType: "text",

        valueProp: "token",
        onChangeProp: "onTokenChange"
      },
      {
        path: "userData",
        type: "writable",
        variableType: "object",

        valueProp: "userData",
        onChangeProp: "onUserDataChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootpage_bot]: hasVariant($state, "page", "bot"),
          [sty.rootpage_hamyar]: hasVariant($state, "page", "hamyar"),
          [sty.rootpage_self]: hasVariant($state, "page", "self")
        }
      )}
    >
      <Hamyar2
        data-plasmic-name={"hamyar2"}
        data-plasmic-override={overrides.hamyar2}
        className={classNames("__wab_instance", sty.hamyar2, {
          [sty.hamyar2page_hamyar]: hasVariant($state, "page", "hamyar")
        })}
        editCycle2={args.editCycle2}
        headershow={args.headershow}
        onRemindChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["hamyar2", "remind"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onTokenUserChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["hamyar2", "tokenUser"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }

          (async val => {
            const $steps = {};

            $steps["updateToken"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["token"]
                    },
                    operation: 0,
                    value: $state.hamyar2.tokenUser
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateToken"] != null &&
              typeof $steps["updateToken"] === "object" &&
              typeof $steps["updateToken"].then === "function"
            ) {
              $steps["updateToken"] = await $steps["updateToken"];
            }
          }).apply(null, eventArgs);
        }}
        onUserdataChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["hamyar2", "userdata"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }

          (async val => {
            const $steps = {};

            $steps["updateUserData"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["userData"]
                    },
                    operation: 0,
                    value: $state.hamyar2.userdata
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateUserData"] != null &&
              typeof $steps["updateUserData"] === "object" &&
              typeof $steps["updateUserData"].then === "function"
            ) {
              $steps["updateUserData"] = await $steps["updateUserData"];
            }
          }).apply(null, eventArgs);
        }}
        remind={generateStateValueProp($state, ["hamyar2", "remind"])}
        reminderOpen={args.reminderOpen}
        tokenUser={generateStateValueProp($state, ["hamyar2", "tokenUser"])}
        userdata={generateStateValueProp($state, ["hamyar2", "userdata"])}
      />

      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section, {
          [sty.sectionpage_bot]: hasVariant($state, "page", "bot")
        })}
      >
        <Iframe
          data-plasmic-name={"iframe"}
          data-plasmic-override={overrides.iframe}
          className={classNames("__wab_instance", sty.iframe, {
            [sty.iframepage_bot]: hasVariant($state, "page", "bot"),
            [sty.iframepage_hamyar]: hasVariant($state, "page", "hamyar")
          })}
          preview={true}
          src={"https://tools.liom.app/chat-bot/"}
          srcDoc={"<div><h3>Heading</h3><p>Example text...</p></div>"}
          useHtml={false}
        />
      </section>
      <SelfCare2
        data-plasmic-name={"selfCare2"}
        data-plasmic-override={overrides.selfCare2}
        className={classNames("__wab_instance", sty.selfCare2, {
          [sty.selfCare2page_hamyar]: hasVariant($state, "page", "hamyar"),
          [sty.selfCare2page_self]: hasVariant($state, "page", "self")
        })}
        onSubItemsChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["selfCare2", "subItems"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        subItems={generateStateValueProp($state, ["selfCare2", "subItems"])}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "hamyar2", "section", "iframe", "selfCare2"],
  hamyar2: ["hamyar2"],
  section: ["section", "iframe"],
  iframe: ["iframe"],
  selfCare2: ["selfCare2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  hamyar2: typeof Hamyar2;
  section: "section";
  iframe: typeof Iframe;
  selfCare2: typeof SelfCare2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainHamyar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainHamyar__VariantsArgs;
    args?: PlasmicMainHamyar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicMainHamyar__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicMainHamyar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainHamyar__ArgProps,
          internalVariantPropNames: PlasmicMainHamyar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainHamyar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainHamyar";
  } else {
    func.displayName = `PlasmicMainHamyar.${nodeName}`;
  }
  return func;
}

export const PlasmicMainHamyar = Object.assign(
  // Top-level PlasmicMainHamyar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hamyar2: makeNodeComponent("hamyar2"),
    section: makeNodeComponent("section"),
    iframe: makeNodeComponent("iframe"),
    selfCare2: makeNodeComponent("selfCare2"),

    // Metadata about props expected for PlasmicMainHamyar
    internalVariantProps: PlasmicMainHamyar__VariantProps,
    internalArgProps: PlasmicMainHamyar__ArgProps
  }
);

export default PlasmicMainHamyar;
/* prettier-ignore-end */
