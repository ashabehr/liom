// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: YAtLxskjvTM0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import IconClinic from "../../IconClinic"; // plasmic-import: TdNZ6qWfkqbt/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Input } from "@/fragment/components/input"; // plasmic-import: zZH7vV9pXyf8/codeComponent
import Star from "../../Star"; // plasmic-import: i69c2Ujsm_H6/component
import Seen from "../../Seen"; // plasmic-import: JqwoohhEEPXm/component
import LineClomp from "../../LineClomp"; // plasmic-import: XsM8QG4wUKlk/component
import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { DialogTitle } from "@plasmicpkgs/radix-ui";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Search from "../../Search"; // plasmic-import: fmyovDT1Cvc-/component
import { Input as Input2 } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input2_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicClinic.module.css"; // plasmic-import: YAtLxskjvTM0/css

import Icon74Icon from "./icons/PlasmicIcon__Icon74"; // plasmic-import: ARDSibiJTpV7/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon104Icon from "./icons/PlasmicIcon__Icon104"; // plasmic-import: 6Kx4mXYQvykk/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 32haUKsu6raY/icon
import Icon76Icon from "./icons/PlasmicIcon__Icon76"; // plasmic-import: ePwPtQfgTARC/icon
import Icon2Icon from "../todo_mvc_app/icons/PlasmicIcon__Icon2"; // plasmic-import: EwJmqOfKx7up/icon
import Icon77Icon from "./icons/PlasmicIcon__Icon77"; // plasmic-import: wjMNvLG8jaXy/icon
import Icon120Icon from "./icons/PlasmicIcon__Icon120"; // plasmic-import: lWsc7Ggg4B53/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: V1QgQzmgWP2T/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: H9d2pdUvXD_1/icon
import EmojiSadSquareSvgrepoComSvgIcon from "./icons/PlasmicIcon__EmojiSadSquareSvgrepoComSvg"; // plasmic-import: r-c9byRGfifF/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import Icon102Icon from "./icons/PlasmicIcon__Icon102"; // plasmic-import: 9fS9dn8xohZT/icon

createPlasmicElementProxy;

export type PlasmicClinic__VariantMembers = {
  _1: "docters" | "docter" | "chatviow";
};
export type PlasmicClinic__VariantsArgs = {
  _1?: SingleChoiceArg<"docters" | "docter" | "chatviow">;
};
type VariantPropType = keyof PlasmicClinic__VariantsArgs;
export const PlasmicClinic__VariantProps = new Array<VariantPropType>("_1");

export type PlasmicClinic__ArgsType = {};
type ArgPropType = keyof PlasmicClinic__ArgsType;
export const PlasmicClinic__ArgProps = new Array<ArgPropType>();

export type PlasmicClinic__OverridesType = {
  root?: Flex__<"div">;
  bg?: Flex__<"div">;
  rectangle2?: Flex__<"div">;
  ا?: Flex__<"div">;
  ا2?: Flex__<"div">;
  rectangle?: Flex__<"div">;
  findSuitableSpecia?: Flex__<"div">;
  rectangle3?: Flex__<"div">;
  speciality?: Flex__<"div">;
  card6?: Flex__<"div">;
  iconClinic?: Flex__<typeof IconClinic>;
  speciality2?: Flex__<"div">;
  card9?: Flex__<"div">;
  button3?: Flex__<typeof Button>;
  card10?: Flex__<"div">;
  button8?: Flex__<typeof Button>;
  card11?: Flex__<"div">;
  button4?: Flex__<typeof Button>;
  card16?: Flex__<"div">;
  speciality3?: Flex__<"div">;
  card12?: Flex__<"div">;
  button5?: Flex__<typeof Button>;
  card13?: Flex__<"div">;
  button6?: Flex__<typeof Button>;
  card14?: Flex__<"div">;
  button7?: Flex__<typeof Button>;
  card17?: Flex__<"div">;
  input?: Flex__<typeof Input>;
  mensah?: Flex__<"div">;
  card7?: Flex__<"div">;
  input2?: Flex__<typeof Input>;
  mensah2?: Flex__<"div">;
  seen?: Flex__<typeof Seen>;
  lineClomp?: Flex__<typeof LineClomp>;
  doctorsDetails?: Flex__<"div">;
  bg2?: Flex__<"div">;
  about?: Flex__<"div">;
  drBellamyNicholas?: Flex__<"div">;
  workingTime?: Flex__<"div">;
  monSat0830Am?: Flex__<"div">;
  speciality4?: Flex__<"div">;
  lineClomp2?: Flex__<typeof LineClomp>;
  card15?: Flex__<"div">;
  button9?: Flex__<typeof Button>;
  section?: Flex__<"section">;
  button?: Flex__<typeof Button>;
  dialog?: Flex__<typeof Dialog>;
  shop?: Flex__<typeof ApiRequest>;
  dialogTitle?: Flex__<typeof DialogTitle>;
  h5?: Flex__<"h5">;
  input3?: Flex__<typeof AntdInput>;
  button10?: Flex__<typeof Button>;
  button11?: Flex__<typeof Button>;
  timer?: Flex__<typeof Timer>;
  dialog2?: Flex__<typeof Dialog>;
  shop2?: Flex__<typeof ApiRequest>;
  button12?: Flex__<typeof Button>;
  favicon?: Flex__<typeof Embed>;
  button2?: Flex__<typeof Button>;
  search?: Flex__<typeof Search>;
  antdInput?: Flex__<typeof Input2>;
};

export interface DefaultClinicProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicClinic__RenderFunc(props: {
  variants: PlasmicClinic__VariantsArgs;
  args: PlasmicClinic__ArgsType;
  overrides: PlasmicClinic__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "_1",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props._1
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "id",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "variable",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("ClinicToken");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "getList",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button9[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button10.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button11.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "chats",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "btnloading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.status == "false";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "shop2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "listId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "sublist",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input2_Helpers)
      },
      {
        path: "filter",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.chats.list;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "lineClomp[].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "loadingPage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "lineClomp2.line",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button8.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button7.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.root_1_chatviow]: hasVariant($state, "_1", "chatviow"),
              [sty.root_1_docter]: hasVariant($state, "_1", "docter"),
              [sty.root_1_docters]: hasVariant($state, "_1", "docters")
            }
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        var urlParams = new URLSearchParams(
                          window.location.search
                        );
                        if (!localStorage.getItem("ClinicToken")) {
                          var app = urlParams.get("token");
                          localStorage.setItem("ClinicToken", app);
                        }
                        var status = urlParams.get("status");
                        if (status == "false") return ($state.status = "false");
                        else if (status == "true") {
                          var chatstart = JSON.parse(
                            localStorage.getItem("chatstart")
                          );
                          return window.open(
                            `https://apps.liom.app/chat?listID=${chatstart.listID}&subList=${chatstart.sublist}&doctorID=${chatstart.docterID}`,
                            "_self"
                          );
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      "https://n8n.staas.ir/webhook/help/getList",
                      (() => {
                        try {
                          return { token: localStorage.getItem("ClinicToken") };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      undefined,
                      {}
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }

            $steps["updateGetData"] = $steps.invokeGlobalAction?.data
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["getData"]
                    },
                    operation: 0,
                    value: $steps.invokeGlobalAction.data
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateGetData"] != null &&
              typeof $steps["updateGetData"] === "object" &&
              typeof $steps["updateGetData"].then === "function"
            ) {
              $steps["updateGetData"] = await $steps["updateGetData"];
            }

            $steps["invokeGlobalAction2"] = true
              ? (() => {
                  const actionArgs = { args: [2000] };
                  return $globalActions["Fragment.wait"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction2"] != null &&
              typeof $steps["invokeGlobalAction2"] === "object" &&
              typeof $steps["invokeGlobalAction2"].then === "function"
            ) {
              $steps["invokeGlobalAction2"] = await $steps[
                "invokeGlobalAction2"
              ];
            }

            $steps["updateLoadingPage2"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["loadingPage"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateLoadingPage2"] != null &&
              typeof $steps["updateLoadingPage2"] === "object" &&
              typeof $steps["updateLoadingPage2"].then === "function"
            ) {
              $steps["updateLoadingPage2"] = await $steps["updateLoadingPage2"];
            }
          }}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bliL, {
              [sty.freeBox_1_chatviow__bliLaYJmT]: hasVariant(
                $state,
                "_1",
                "chatviow"
              ),
              [sty.freeBox_1_docter__bliL8Ddm8]: hasVariant(
                $state,
                "_1",
                "docter"
              ),
              [sty.freeBox_1_docters__bliLpv2Kd]: hasVariant(
                $state,
                "_1",
                "docters"
              )
            })}
          >
            <div
              data-plasmic-name={"bg"}
              data-plasmic-override={overrides.bg}
              className={classNames(projectcss.all, sty.bg)}
            >
              <div
                data-plasmic-name={"rectangle2"}
                data-plasmic-override={overrides.rectangle2}
                className={classNames(projectcss.all, sty.rectangle2)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hj9MX)}
                >
                  <div
                    data-plasmic-name={"\u0627"}
                    data-plasmic-override={overrides.ا}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.ا
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "\u062f\u0633\u062a\u0631\u0633\u06cc \u0622\u0633\u0627\u0646 \u0628\u0647 \u067e\u0632\u0634\u06a9\u060c \u0647\u0631 \u0632\u0645\u0627\u0646 \u0648 \u0647\u0631 \u06a9\u062c\u0627"
                      : "\u0647\u0631 \u06a9\u062c\u0627 \u06a9\u0647 \u0647\u0633\u062a\u06cc \u0648 \u0647\u0631 \u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u0646\u06cc\u0627\u0632 \u062f\u0627\u0631\u06cc\u060c \u0628\u0647 \u0631\u0627\u062d\u062a\u06cc \u0628\u0647 \u067e\u0632\u0634\u06a9 \u062f\u0633\u062a\u0631\u0633\u06cc \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634."}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pW0Ww)}
                  >
                    <div
                      data-plasmic-name={"\u06272"}
                      data-plasmic-override={overrides.ا2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.ا2,
                        {
                          [sty.ا2_1_docters]: hasVariant(
                            $state,
                            "_1",
                            "docters"
                          )
                        }
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToDocters"] = true
                          ? (() => {
                              const actionArgs = { destination: `/docters` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToDocters"] != null &&
                          typeof $steps["goToDocters"] === "object" &&
                          typeof $steps["goToDocters"].then === "function"
                        ) {
                          $steps["goToDocters"] = await $steps["goToDocters"];
                        }
                      }}
                    >
                      {
                        "\u0644\u06cc\u0633\u062a \u06a9\u0627\u0645\u0644 \u067e\u0632\u0634\u06a9\u0627\u0646  >"
                      }
                    </div>
                  </div>
                </Stack__>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__eYiNj)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "80px"
                      : "200px"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liom_hamyar/images/image62.png",
                    fullWidth: 450,
                    fullHeight: 450,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__nTa7N, {
                [sty.freeBox_1_chatviow__nTa7NaYJmT]: hasVariant(
                  $state,
                  "_1",
                  "chatviow"
                ),
                [sty.freeBox_1_docter__nTa7N8Ddm8]: hasVariant(
                  $state,
                  "_1",
                  "docter"
                ),
                [sty.freeBox_1_docters__nTa7Npv2Kd]: hasVariant(
                  $state,
                  "_1",
                  "docters"
                )
              })}
            >
              <div
                data-plasmic-name={"rectangle"}
                data-plasmic-override={overrides.rectangle}
                className={classNames(projectcss.all, sty.rectangle, {
                  [sty.rectangle_1_chatviow]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.rectangle_1_docter]: hasVariant($state, "_1", "docter"),
                  [sty.rectangle_1_docters]: hasVariant($state, "_1", "docters")
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToChatviow"] = true
                    ? (() => {
                        const actionArgs = { destination: `/chatviow` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToChatviow"] != null &&
                    typeof $steps["goToChatviow"] === "object" &&
                    typeof $steps["goToChatviow"].then === "function"
                  ) {
                    $steps["goToChatviow"] = await $steps["goToChatviow"];
                  }
                }}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ygX2U)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vG1Fu
                    )}
                  >
                    {
                      "\u0648\u06cc\u0632\u06cc\u062a\u200c\u0647\u0627\u06cc \u0645\u0646"
                    }
                  </div>
                  <div
                    data-plasmic-name={"findSuitableSpecia"}
                    data-plasmic-override={overrides.findSuitableSpecia}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.findSuitableSpecia
                    )}
                  >
                    {
                      "\u067e\u06cc\u0627\u0645\u200c\u0647\u0627\u06cc \u0631\u062f \u0648 \u0628\u062f\u0644 \u0634\u062f\u0647 \u0628\u0627 \u067e\u0632\u0634\u06a9\u0627\u0646"
                    }
                  </div>
                </Stack__>
                <div
                  data-plasmic-name={"rectangle3"}
                  data-plasmic-override={overrides.rectangle3}
                  className={classNames(projectcss.all, sty.rectangle3)}
                >
                  <Icon74Icon
                    className={classNames(projectcss.all, sty.svg___1S0X3)}
                    role={"img"}
                  />
                </div>
              </div>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"speciality"}
              data-plasmic-override={overrides.speciality}
              hasGap={true}
              className={classNames(projectcss.all, sty.speciality, {
                [sty.speciality_1_chatviow]: hasVariant(
                  $state,
                  "_1",
                  "chatviow"
                ),
                [sty.speciality_1_docter]: hasVariant($state, "_1", "docter"),
                [sty.speciality_1_docters]: hasVariant($state, "_1", "docters")
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lJs3X
                )}
              >
                {
                  "\u062f\u0633\u062a\u0647 \u0628\u0646\u062f\u06cc \u0647\u0627"
                }
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox___1U1Cf, {
                  [sty.freeBox_1_docter___1U1Cf8Ddm8]: hasVariant(
                    $state,
                    "_1",
                    "docter"
                  )
                })}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.getData.list;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"card6"}
                      data-plasmic-override={overrides.card6}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.card6, {
                        [sty.card6_1_docter]: hasVariant(
                          $state,
                          "_1",
                          "docter"
                        ),
                        [sty.card6_1_docters]: hasVariant(
                          $state,
                          "_1",
                          "docters"
                        )
                      })}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return `/docter?id=${currentItem.id}`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "/docter?id=cu";
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                    >
                      <IconClinic
                        data-plasmic-name={"iconClinic"}
                        data-plasmic-override={overrides.iconClinic}
                        className={classNames("__wab_instance", sty.iconClinic)}
                        unnamedGroupOfVariants={(() => {
                          try {
                            return "_" + currentItem.id.toString();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0LZ3U
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0633\u0644\u0627\u0645\u062a \u062c\u0646\u0633\u06cc";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                  );
                })}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"speciality2"}
              data-plasmic-override={overrides.speciality2}
              hasGap={true}
              className={classNames(projectcss.all, sty.speciality2, {
                [sty.speciality2_1_chatviow]: hasVariant(
                  $state,
                  "_1",
                  "chatviow"
                ),
                [sty.speciality2_1_docter]: hasVariant($state, "_1", "docter"),
                [sty.speciality2_1_docters]: hasVariant($state, "_1", "docters")
              })}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0Ofm2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tI0Jp
                  )}
                >
                  {
                    "\u0645\u062a\u062e\u0635\u0635\u06cc\u0646  \u0633\u0644\u0627\u0645\u062a \u062c\u0646\u0633\u06cc"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ffSEd
                  )}
                >
                  {
                    "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0633\u0644\u0627\u0645\u062a \u062c\u0646\u0633\u06cc \u0648 \u0631\u0648\u0627\u0628\u0637 \u062c\u0646\u0633\u06cc"
                  }
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__x5M9Y)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"card9"}
                  data-plasmic-override={overrides.card9}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.card9, {
                    [sty.card9_1_docter]: hasVariant($state, "_1", "docter"),
                    [sty.card9_1_docters]: hasVariant($state, "_1", "docters")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return `/docter?id=5`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1KEvg
                    )}
                  >
                    {
                      "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0645\u0634\u06a9\u0644\u0627\u062a \u062c\u0646\u0633\u06cc "
                    }
                  </div>
                  <Button
                    data-plasmic-name={"button3"}
                    data-plasmic-override={overrides.button3}
                    className={classNames("__wab_instance", sty.button3)}
                    color={generateStateValueProp($state, ["button3", "color"])}
                    endIcon={
                      <Icon104Icon
                        className={classNames(projectcss.all, sty.svg__iXdYp)}
                        role={"img"}
                      />
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return `/docter?id=5`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button3", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showEndIcon={true}
                    size={"compact"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wjvk8
                      )}
                    >
                      {
                        "\u0634\u0631\u0648\u0639 \u06af\u0641\u062a\u06af\u0648"
                      }
                    </div>
                  </Button>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"card10"}
                  data-plasmic-override={overrides.card10}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.card10)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return `/docter?id=5`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__waFqj,
                      {
                        [sty.text_1_docter__waFqj8Ddm8]: hasVariant(
                          $state,
                          "_1",
                          "docter"
                        )
                      }
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631\u0645\u0627\u0646 \u0639\u0641\u0648\u0646\u062a \u0647\u0627 "
                      : "\u0645\u0634\u0640\u0640\u0627\u0648\u0631\u0647 \u062f\u0631\u0645\u0627\u0646 \u0639\u0641\u0648\u0646\u062a \u0647\u0627 "}
                  </div>
                  <Button
                    data-plasmic-name={"button8"}
                    data-plasmic-override={overrides.button8}
                    className={classNames("__wab_instance", sty.button8)}
                    color={generateStateValueProp($state, ["button8", "color"])}
                    endIcon={
                      <Icon104Icon
                        className={classNames(projectcss.all, sty.svg__mpyO8)}
                        role={"img"}
                      />
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return `/docter?id=5`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button8", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showEndIcon={true}
                    size={"compact"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pTmUn
                      )}
                    >
                      {
                        "\u0634\u0631\u0648\u0639 \u06af\u0641\u062a\u06af\u0648"
                      }
                    </div>
                  </Button>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"card11"}
                  data-plasmic-override={overrides.card11}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.card11)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return `/docter?id=5`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oh8Np
                    )}
                  >
                    {
                      "\u0645\u0634\u0627\u0648\u0631\u0647 \u0628\u0631\u0627\u06cc \u0628\u0627\u0631\u0648\u0631\u06cc "
                    }
                  </div>
                  <Button
                    data-plasmic-name={"button4"}
                    data-plasmic-override={overrides.button4}
                    className={classNames("__wab_instance", sty.button4)}
                    color={generateStateValueProp($state, ["button4", "color"])}
                    endIcon={
                      <Icon104Icon
                        className={classNames(projectcss.all, sty.svg__q3Wtn)}
                        role={"img"}
                      />
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return `/docter?id=5`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button4", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showEndIcon={true}
                    size={"compact"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eGcfm
                      )}
                    >
                      {
                        "\u0634\u0631\u0648\u0639 \u06af\u0641\u062a\u06af\u0648"
                      }
                    </div>
                  </Button>
                </Stack__>
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : false
                ) ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"card16"}
                    data-plasmic-override={overrides.card16}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.card16)}
                  />
                ) : null}
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"speciality3"}
              data-plasmic-override={overrides.speciality3}
              hasGap={true}
              className={classNames(projectcss.all, sty.speciality3, {
                [sty.speciality3_1_chatviow]: hasVariant(
                  $state,
                  "_1",
                  "chatviow"
                ),
                [sty.speciality3_1_docter]: hasVariant($state, "_1", "docter"),
                [sty.speciality3_1_docters]: hasVariant($state, "_1", "docters")
              })}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jHzk5)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w2E7Q
                  )}
                >
                  {
                    "\u0645\u062a\u062e\u0635\u0635\u06cc\u0646 \u0642\u0627\u0639\u062f\u06af\u06cc"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lKqE6
                  )}
                >
                  {
                    "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0633\u0644\u0627\u0645\u062a \u0647\u0648\u0631\u0645\u0648\u0646\u06cc \u0648 \u0645\u0634\u06a9\u0644\u0627\u062a \u0642\u0627\u0639\u062f\u06af\u06cc"
                  }
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fyalm)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"card12"}
                  data-plasmic-override={overrides.card12}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.card12, {
                    [sty.card12_1_docter]: hasVariant($state, "_1", "docter"),
                    [sty.card12_1_docters]: hasVariant($state, "_1", "docters")
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return `/docter?id=2`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___46K1F
                    )}
                  >
                    {
                      "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631\u0645\u0627\u0646  \u062f\u0631\u062f \u0642\u0627\u0639\u062f\u06af\u06cc"
                    }
                  </div>
                  <Button
                    data-plasmic-name={"button5"}
                    data-plasmic-override={overrides.button5}
                    className={classNames("__wab_instance", sty.button5)}
                    color={generateStateValueProp($state, ["button5", "color"])}
                    endIcon={
                      <Icon104Icon
                        className={classNames(projectcss.all, sty.svg__se0YU)}
                        role={"img"}
                      />
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return `/docter?id=2`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button5", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showEndIcon={true}
                    size={"compact"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sLxW
                      )}
                    >
                      {
                        "\u0634\u0631\u0648\u0639 \u06af\u0641\u062a\u06af\u0648"
                      }
                    </div>
                  </Button>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"card13"}
                  data-plasmic-override={overrides.card13}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.card13)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return `/docter?id=2`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s9Ps
                    )}
                  >
                    {
                      "\u0645\u0634\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0627\u0648\u0631\u0647 \u062f\u0631\u0645\u0627\u0646 \u0646\u0627\u0645\u0646\u0638\u0645\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc"
                    }
                  </div>
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : false
                  ) ? (
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__dmqvY)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/liom_hamyar/images/image68.png",
                        fullWidth: 720,
                        fullHeight: 432,
                        aspectRatio: undefined
                      }}
                    />
                  ) : null}
                  <Button
                    data-plasmic-name={"button6"}
                    data-plasmic-override={overrides.button6}
                    className={classNames("__wab_instance", sty.button6)}
                    color={generateStateValueProp($state, ["button6", "color"])}
                    endIcon={
                      <Icon104Icon
                        className={classNames(projectcss.all, sty.svg__eBiQ0)}
                        role={"img"}
                      />
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return `/docter?id=2`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button6", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showEndIcon={true}
                    size={"compact"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lwkg
                      )}
                    >
                      {
                        "\u0634\u0631\u0648\u0639 \u06af\u0641\u062a\u06af\u0648"
                      }
                    </div>
                  </Button>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"card14"}
                  data-plasmic-override={overrides.card14}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.card14)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return `/docter?id=2`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gUnlX
                    )}
                  >
                    {
                      "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0645\u0634\u06a9\u0644\u0627\u062a \u067e\u0648\u0633\u062a\u06cc \u062f\u0631 \u0686\u0631\u062e\u0647 \u0642\u0627\u0639\u062f\u06af\u06cc"
                    }
                  </div>
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : false
                  ) ? (
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__djHjx)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/liom_hamyar/images/image69.png",
                        fullWidth: 720,
                        fullHeight: 432,
                        aspectRatio: undefined
                      }}
                    />
                  ) : null}
                  <Button
                    data-plasmic-name={"button7"}
                    data-plasmic-override={overrides.button7}
                    className={classNames("__wab_instance", sty.button7)}
                    color={generateStateValueProp($state, ["button7", "color"])}
                    endIcon={
                      <Icon104Icon
                        className={classNames(projectcss.all, sty.svg__e62B)}
                        role={"img"}
                      />
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return `/docter?id=2`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button7", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showEndIcon={true}
                    size={"compact"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fgNme
                      )}
                    >
                      {
                        "\u0634\u0631\u0648\u0639 \u06af\u0641\u062a\u06af\u0648"
                      }
                    </div>
                  </Button>
                </Stack__>
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : false
                ) ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"card17"}
                    data-plasmic-override={overrides.card17}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.card17)}
                  />
                ) : null}
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__sm50, {
              [sty.freeBox_1_chatviow__sm50AYJmT]: hasVariant(
                $state,
                "_1",
                "chatviow"
              ),
              [sty.freeBox_1_docter__sm508Ddm8]: hasVariant(
                $state,
                "_1",
                "docter"
              ),
              [sty.freeBox_1_docters__sm50Pv2Kd]: hasVariant(
                $state,
                "_1",
                "docters"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__mkF4X, {
                [sty.freeBox_1_chatviow__mkF4XaYJmT]: hasVariant(
                  $state,
                  "_1",
                  "chatviow"
                ),
                [sty.freeBox_1_docters__mkF4Xpv2Kd]: hasVariant(
                  $state,
                  "_1",
                  "docters"
                )
              })}
            >
              <Icon22Icon
                className={classNames(projectcss.all, sty.svg__lhIg4, {
                  [sty.svg_1_chatviow__lhIg4AYJmT]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.svg_1_docters__lhIg4Pv2Kd]: hasVariant(
                    $state,
                    "_1",
                    "docters"
                  )
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["update1"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "_1",
                          operation: 1,
                          value: "docters"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, undefined);
                          return undefined;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["update1"] != null &&
                    typeof $steps["update1"] === "object" &&
                    typeof $steps["update1"].then === "function"
                  ) {
                    $steps["update1"] = await $steps["update1"];
                  }
                }}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vli7,
                  {
                    [sty.text_1_chatviow__vli7AYJmT]: hasVariant(
                      $state,
                      "_1",
                      "chatviow"
                    ),
                    [sty.text_1_docters__vli7Pv2Kd]: hasVariant(
                      $state,
                      "_1",
                      "docters"
                    )
                  }
                )}
              >
                {hasVariant($state, "_1", "chatviow")
                  ? "\u06af\u0641\u062a\u06af\u0648 \u0647\u0627"
                  : "\u067e\u0632\u0634\u06a9\u0627\u0646"}
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__fgNaa, {
                [sty.freeBox_1_chatviow__fgNaaaYJmT]: hasVariant(
                  $state,
                  "_1",
                  "chatviow"
                ),
                [sty.freeBox_1_docters__fgNaapv2Kd]: hasVariant(
                  $state,
                  "_1",
                  "docters"
                )
              })}
            >
              <Input
                data-plasmic-name={"input"}
                data-plasmic-override={overrides.input}
                className={classNames("__wab_instance", sty.input, {
                  [sty.input_1_chatviow]: hasVariant($state, "_1", "chatviow"),
                  [sty.input_1_docters]: hasVariant($state, "_1", "docters")
                })}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["input", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                placeholder={
                  "\u062c\u0633\u062a\u062c\u0648 \u062f\u0631  \u067e\u0632\u0634\u06a9\u0627\u0646"
                }
                type={"text"}
                value={generateStateValueProp($state, ["input", "value"])}
              />

              <Icon76Icon
                className={classNames(projectcss.all, sty.svg__xTNn, {
                  [sty.svg_1_chatviow__xTNnaYJmT]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.svg_1_docters__xTNnpv2Kd]: hasVariant(
                    $state,
                    "_1",
                    "docters"
                  )
                })}
                role={"img"}
              />
            </div>
            <div
              data-plasmic-name={"mensah"}
              data-plasmic-override={overrides.mensah}
              className={classNames(projectcss.all, sty.mensah, {
                [sty.mensah_1_chatviow]: hasVariant($state, "_1", "chatviow"),
                [sty.mensah_1_docter]: hasVariant($state, "_1", "docter"),
                [sty.mensah_1_docters]: hasVariant($state, "_1", "docters")
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__stYx6, {
                  [sty.img_1_chatviow__stYx6AYJmT]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.img_1_docters__stYx6Pv2Kd]: hasVariant(
                    $state,
                    "_1",
                    "docters"
                  )
                })}
                displayHeight={
                  hasVariant($state, "_1", "chatviow") &&
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "60px"
                    : hasVariant($state, "_1", "docters") &&
                      hasVariant(globalVariants, "screen", "mobile")
                    ? "50px"
                    : hasVariant($state, "_1", "docters")
                    ? "80px"
                    : "79px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant($state, "_1", "chatviow") &&
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "60px"
                    : hasVariant($state, "_1", "docters") &&
                      hasVariant(globalVariants, "screen", "mobile")
                    ? "50px"
                    : hasVariant($state, "_1", "docters")
                    ? "80px"
                    : "79px"
                }
                loading={"lazy"}
                src={
                  hasVariant($state, "_1", "chatviow") &&
                  hasVariant(globalVariants, "screen", "mobile")
                    ? {
                        src: "/plasmic/liom_hamyar/images/image10.ico",
                        fullWidth: 256,
                        fullHeight: 256,
                        aspectRatio: undefined
                      }
                    : hasVariant($state, "_1", "docters") &&
                      hasVariant(globalVariants, "screen", "mobile")
                    ? {
                        src: "/plasmic/liom_hamyar/images/image10.ico",
                        fullWidth: 256,
                        fullHeight: 256,
                        aspectRatio: undefined
                      }
                    : {
                        src: "/plasmic/liom_hamyar/images/imagePlaceholder.svg",
                        fullWidth: 79,
                        fullHeight: 79,
                        aspectRatio: 1
                      }
                }
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rzfOh, {
                  [sty.freeBox_1_chatviow__rzfOhaYJmT]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.freeBox_1_docter__rzfOh8Ddm8]: hasVariant(
                    $state,
                    "_1",
                    "docter"
                  ),
                  [sty.freeBox_1_docters__rzfOhpv2Kd]: hasVariant(
                    $state,
                    "_1",
                    "docters"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fqtK5,
                    {
                      [sty.text_1_chatviow__fqtK5AYJmT]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.text_1_docters__fqtK5Pv2Kd]: hasVariant(
                        $state,
                        "_1",
                        "docters"
                      )
                    }
                  )}
                >
                  {"Dr. Mensah T"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dzttk,
                    {
                      [sty.text_1_chatviow__dzttkaYJmT]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.text_1_docters__dzttkpv2Kd]: hasVariant(
                        $state,
                        "_1",
                        "docters"
                      )
                    }
                  )}
                >
                  {"Oncologists"}
                </div>
              </Stack__>
              <div
                className={classNames(projectcss.all, sty.freeBox__c208N, {
                  [sty.freeBox_1_chatviow__c208NaYJmT]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.freeBox_1_docters__c208Npv2Kd]: hasVariant(
                    $state,
                    "_1",
                    "docters"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__v3HUx, {
                    [sty.freeBox_1_chatviow__v3HUxaYJmT]: hasVariant(
                      $state,
                      "_1",
                      "chatviow"
                    ),
                    [sty.freeBox_1_docters__v3HUxpv2Kd]: hasVariant(
                      $state,
                      "_1",
                      "docters"
                    )
                  })}
                >
                  <Star
                    action={true}
                    className={classNames("__wab_instance", sty.star__gM7Kg, {
                      [sty.star_1_chatviow__gM7KGaYJmT]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.star_1_docters__gM7KGpv2Kd]: hasVariant(
                        $state,
                        "_1",
                        "docters"
                      )
                    })}
                  />

                  <Star
                    action={true}
                    className={classNames("__wab_instance", sty.star__xqSHg, {
                      [sty.star_1_chatviow__xqSHgaYJmT]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.star_1_docters__xqSHgpv2Kd]: hasVariant(
                        $state,
                        "_1",
                        "docters"
                      )
                    })}
                  />

                  <Star
                    action={
                      hasVariant($state, "_1", "chatviow") &&
                      hasVariant(globalVariants, "screen", "mobile")
                        ? undefined
                        : hasVariant($state, "_1", "docters") &&
                          hasVariant(globalVariants, "screen", "mobile")
                        ? undefined
                        : true
                    }
                    className={classNames("__wab_instance", sty.star__g2KKc, {
                      [sty.star_1_chatviow__g2KKcaYJmT]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.star_1_docters__g2KKcpv2Kd]: hasVariant(
                        $state,
                        "_1",
                        "docters"
                      )
                    })}
                  />

                  <Star
                    action={true}
                    className={classNames("__wab_instance", sty.star__hGAtQ, {
                      [sty.star_1_chatviow__hGAtQaYJmT]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.star_1_docters__hGAtQpv2Kd]: hasVariant(
                        $state,
                        "_1",
                        "docters"
                      )
                    })}
                  />

                  <Star
                    action={true}
                    className={classNames("__wab_instance", sty.star__at1Mh, {
                      [sty.star_1_chatviow__at1MHaYJmT]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.star_1_docters__at1MHpv2Kd]: hasVariant(
                        $state,
                        "_1",
                        "docters"
                      )
                    })}
                  />

                  <Star
                    action={true}
                    className={classNames("__wab_instance", sty.star__z4SHk, {
                      [sty.star_1_chatviow__z4SHkaYJmT]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.star_1_docters__z4SHkpv2Kd]: hasVariant(
                        $state,
                        "_1",
                        "docters"
                      )
                    })}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gVLkO,
                    {
                      [sty.text_1_chatviow__gVLkOaYJmT]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.text_1_docters__gVLkOpv2Kd]: hasVariant(
                        $state,
                        "_1",
                        "docters"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "_1", "docters")
                    ? "\u0627\u0645\u062a\u06cc\u0627\u0632 \u067e\u0632\u0634\u06a9"
                    : "\u062a\u0639\u062f\u0627\u062f \u0645\u0631\u0627\u062c\u0639 (150)"}
                </div>
              </div>
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.getData.list;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"card7"}
                  data-plasmic-override={overrides.card7}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.card7, {
                    [sty.card7_1_docter]: hasVariant($state, "_1", "docter"),
                    [sty.card7_1_docters]: hasVariant($state, "_1", "docters")
                  })}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadingPage"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingPage"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingPage"] != null &&
                      typeof $steps["updateLoadingPage"] === "object" &&
                      typeof $steps["updateLoadingPage"].then === "function"
                    ) {
                      $steps["updateLoadingPage"] = await $steps[
                        "updateLoadingPage"
                      ];
                    }

                    $steps["update1"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "_1",
                            operation: 0,
                            value: "docter"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["update1"] != null &&
                      typeof $steps["update1"] === "object" &&
                      typeof $steps["update1"].then === "function"
                    ) {
                      $steps["update1"] = await $steps["update1"];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.staas.ir/webhook/help/getList",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    token: "Bearer " + $state.token,
                                    id: currentItem.id.toString()
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateGetList"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["getList"]
                            },
                            operation: 0,
                            value: $steps.invokeGlobalAction.data
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateGetList"] != null &&
                      typeof $steps["updateGetList"] === "object" &&
                      typeof $steps["updateGetList"].then === "function"
                    ) {
                      $steps["updateGetList"] = await $steps["updateGetList"];
                    }

                    $steps["updateListId"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["listId"]
                            },
                            operation: 0,
                            value: currentItem.id
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateListId"] != null &&
                      typeof $steps["updateListId"] === "object" &&
                      typeof $steps["updateListId"].then === "function"
                    ) {
                      $steps["updateListId"] = await $steps["updateListId"];
                    }

                    $steps["updateLoadingPage2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingPage"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingPage2"] != null &&
                      typeof $steps["updateLoadingPage2"] === "object" &&
                      typeof $steps["updateLoadingPage2"].then === "function"
                    ) {
                      $steps["updateLoadingPage2"] = await $steps[
                        "updateLoadingPage2"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qHUf,
                      {
                        [sty.text_1_docters__qHUFpv2Kd]: hasVariant(
                          $state,
                          "_1",
                          "docters"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.text;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0633\u0644\u0627\u0645\u062a \u062c\u0646\u0633\u06cc";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__atbwL, {
                      [sty.img_1_chatviow__atbwLaYJmT]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.img_1_docter__atbwL8Ddm8]: hasVariant(
                        $state,
                        "_1",
                        "docter"
                      ),
                      [sty.img_1_docters__atbwLpv2Kd]: hasVariant(
                        $state,
                        "_1",
                        "docters"
                      )
                    })}
                    displayHeight={
                      hasVariant($state, "_1", "chatviow") &&
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "60px"
                        : hasVariant($state, "_1", "docters") &&
                          hasVariant(globalVariants, "screen", "mobile")
                        ? "50px"
                        : hasVariant($state, "_1", "docters")
                        ? "60px"
                        : "79px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant($state, "_1", "chatviow") &&
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "60px"
                        : hasVariant($state, "_1", "docters") &&
                          hasVariant(globalVariants, "screen", "mobile")
                        ? "50px"
                        : hasVariant($state, "_1", "docters")
                        ? "60px"
                        : "79px"
                    }
                    loading={"lazy"}
                    src={
                      hasVariant($state, "_1", "chatviow") &&
                      hasVariant(globalVariants, "screen", "mobile")
                        ? {
                            src: "/plasmic/liom_hamyar/images/image10.ico",
                            fullWidth: 256,
                            fullHeight: 256,
                            aspectRatio: undefined
                          }
                        : hasVariant($state, "_1", "docters") &&
                          hasVariant(globalVariants, "screen", "mobile")
                        ? "https://static.vecteezy.com/system/resources/previews/008/957/225/non_2x/female-doctor-avatar-clipart-icon-in-flat-design-vector.jpg"
                        : hasVariant($state, "_1", "docters")
                        ? "https://static.vecteezy.com/system/resources/previews/008/957/225/non_2x/female-doctor-avatar-clipart-icon-in-flat-design-vector.jpg"
                        : {
                            src: "/plasmic/liom_hamyar/images/imagePlaceholder.svg",
                            fullWidth: 79,
                            fullHeight: 79,
                            aspectRatio: 1
                          }
                    }
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__zuvQq, {
                      [sty.freeBox_1_chatviow__zuvQQaYJmT]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.freeBox_1_docter__zuvQq8Ddm8]: hasVariant(
                        $state,
                        "_1",
                        "docter"
                      ),
                      [sty.freeBox_1_docters__zuvQQpv2Kd]: hasVariant(
                        $state,
                        "_1",
                        "docters"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c1JkN,
                        {
                          [sty.text_1_chatviow__c1JkNaYJmT]: hasVariant(
                            $state,
                            "_1",
                            "chatviow"
                          ),
                          [sty.text_1_docters__c1JkNpv2Kd]: hasVariant(
                            $state,
                            "_1",
                            "docters"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "_1", "docters") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return " کارشناسی " + currentItem.text + " لیوم ";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Dr. Mensah T";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        "Dr. Mensah T"
                      )}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rcUd6,
                        {
                          [sty.text_1_chatviow__rcUd6AYJmT]: hasVariant(
                            $state,
                            "_1",
                            "chatviow"
                          ),
                          [sty.text_1_docters__rcUd6Pv2Kd]: hasVariant(
                            $state,
                            "_1",
                            "docters"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "_1", "docters") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Oncologists";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        "Oncologists"
                      )}
                    </div>
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__khv76, {
                      [sty.freeBox_1_chatviow__khv76AYJmT]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.freeBox_1_docters__khv76Pv2Kd]: hasVariant(
                        $state,
                        "_1",
                        "docters"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__uyRBj,
                        {
                          [sty.freeBox_1_chatviow__uyRBjaYJmT]: hasVariant(
                            $state,
                            "_1",
                            "chatviow"
                          ),
                          [sty.freeBox_1_docters__uyRBjpv2Kd]: hasVariant(
                            $state,
                            "_1",
                            "docters"
                          )
                        }
                      )}
                    >
                      <Star
                        action={true}
                        className={classNames(
                          "__wab_instance",
                          sty.star___73Jca,
                          {
                            [sty.star_1_chatviow___73JcAaYJmT]: hasVariant(
                              $state,
                              "_1",
                              "chatviow"
                            ),
                            [sty.star_1_docters___73JcApv2Kd]: hasVariant(
                              $state,
                              "_1",
                              "docters"
                            )
                          }
                        )}
                      />

                      <Star
                        action={true}
                        className={classNames(
                          "__wab_instance",
                          sty.star___0V2Qy,
                          {
                            [sty.star_1_chatviow___0V2QyaYJmT]: hasVariant(
                              $state,
                              "_1",
                              "chatviow"
                            ),
                            [sty.star_1_docters___0V2Qypv2Kd]: hasVariant(
                              $state,
                              "_1",
                              "docters"
                            )
                          }
                        )}
                      />

                      <Star
                        action={
                          hasVariant($state, "_1", "chatviow") &&
                          hasVariant(globalVariants, "screen", "mobile")
                            ? undefined
                            : hasVariant($state, "_1", "docters") &&
                              hasVariant(globalVariants, "screen", "mobile")
                            ? true
                            : true
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.star___1I5Xk,
                          {
                            [sty.star_1_chatviow___1I5XkaYJmT]: hasVariant(
                              $state,
                              "_1",
                              "chatviow"
                            ),
                            [sty.star_1_docters___1I5Xkpv2Kd]: hasVariant(
                              $state,
                              "_1",
                              "docters"
                            )
                          }
                        )}
                      />

                      <Star
                        action={true}
                        className={classNames(
                          "__wab_instance",
                          sty.star__vGrDc,
                          {
                            [sty.star_1_chatviow__vGrDcaYJmT]: hasVariant(
                              $state,
                              "_1",
                              "chatviow"
                            ),
                            [sty.star_1_docters__vGrDcpv2Kd]: hasVariant(
                              $state,
                              "_1",
                              "docters"
                            )
                          }
                        )}
                      />

                      <Star
                        action={true}
                        className={classNames(
                          "__wab_instance",
                          sty.star__mhnF,
                          {
                            [sty.star_1_chatviow__mhnFAYJmT]: hasVariant(
                              $state,
                              "_1",
                              "chatviow"
                            ),
                            [sty.star_1_docters__mhnFPv2Kd]: hasVariant(
                              $state,
                              "_1",
                              "docters"
                            )
                          }
                        )}
                      />

                      <Star
                        action={true}
                        className={classNames(
                          "__wab_instance",
                          sty.star__uhC6N,
                          {
                            [sty.star_1_chatviow__uhC6NaYJmT]: hasVariant(
                              $state,
                              "_1",
                              "chatviow"
                            ),
                            [sty.star_1_docters__uhC6Npv2Kd]: hasVariant(
                              $state,
                              "_1",
                              "docters"
                            )
                          }
                        )}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xv6AW,
                        {
                          [sty.text_1_chatviow__xv6AWaYJmT]: hasVariant(
                            $state,
                            "_1",
                            "chatviow"
                          ),
                          [sty.text_1_docters__xv6AWpv2Kd]: hasVariant(
                            $state,
                            "_1",
                            "docters"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "_1", "docters") &&
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "\u0627\u0645\u062a\u06cc\u0627\u0632 \u067e\u0632\u0634\u06a9"
                        : hasVariant($state, "_1", "docters")
                        ? "\u0627\u0645\u062a\u06cc\u0627\u0632 \u067e\u0632\u0634\u06a9"
                        : "\u062a\u0639\u062f\u0627\u062f \u0645\u0631\u0627\u062c\u0639 (150)"}
                    </div>
                  </div>
                </Stack__>
              );
            })}
          </Stack__>
          {(
            hasVariant($state, "_1", "chatviow")
              ? true
              : hasVariant($state, "_1", "docters")
              ? true
              : false
          ) ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dh5Mr, {
                [sty.freeBox_1_chatviow__dh5MraYJmT]: hasVariant(
                  $state,
                  "_1",
                  "chatviow"
                ),
                [sty.freeBox_1_docter__dh5Mr8Ddm8]: hasVariant(
                  $state,
                  "_1",
                  "docter"
                ),
                [sty.freeBox_1_docters__dh5Mrpv2Kd]: hasVariant(
                  $state,
                  "_1",
                  "docters"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__v9Uib, {
                  [sty.freeBox_1_chatviow__v9UibaYJmT]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.freeBox_1_docters__v9Uibpv2Kd]: hasVariant(
                    $state,
                    "_1",
                    "docters"
                  )
                })}
              >
                <Input
                  data-plasmic-name={"input2"}
                  data-plasmic-override={overrides.input2}
                  className={classNames("__wab_instance", sty.input2, {
                    [sty.input2_1_chatviow]: hasVariant(
                      $state,
                      "_1",
                      "chatviow"
                    ),
                    [sty.input2_1_docters]: hasVariant($state, "_1", "docters")
                  })}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "input2",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  placeholder={
                    "\u062c\u0633\u062a\u062c\u0648 \u062f\u0631  \u067e\u0632\u0634\u06a9\u0627\u0646"
                  }
                  type={"text"}
                  value={generateStateValueProp($state, ["input2", "value"])}
                />

                <Icon76Icon
                  className={classNames(projectcss.all, sty.svg___8QAfw, {
                    [sty.svg_1_chatviow___8QAfwaYJmT]: hasVariant(
                      $state,
                      "_1",
                      "chatviow"
                    ),
                    [sty.svg_1_docters___8QAfwpv2Kd]: hasVariant(
                      $state,
                      "_1",
                      "docters"
                    )
                  })}
                  role={"img"}
                />
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.filter;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    data-plasmic-name={"mensah2"}
                    data-plasmic-override={overrides.mensah2}
                    className={classNames(projectcss.all, sty.mensah2, {
                      [sty.mensah2_1_chatviow]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.mensah2_1_docter]: hasVariant(
                        $state,
                        "_1",
                        "docter"
                      ),
                      [sty.mensah2_1_docters]: hasVariant(
                        $state,
                        "_1",
                        "docters"
                      )
                    })}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return `https://apps.liom.app/chat?sessionID=${currentItem.id}&listID=${currentItem.listID}&subList=${currentItem.subList}&doctorID=${currentItem.doctorID}`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                    style={
                      hasVariant($state, "_1", "chatviow")
                        ? (() => {
                            try {
                              return {
                                opacity: currentItem.status == -1 ? "0.5" : "1"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return {
                                border:
                                  currentItem.status == -1
                                    ? "solid 1px #EB464A"
                                    : "solid 1px #8254C6",
                                opacity: currentItem.status == -1 ? "0.5" : "1"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                    }
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__eynUl, {
                        [sty.img_1_chatviow__eynUlaYJmT]: hasVariant(
                          $state,
                          "_1",
                          "chatviow"
                        ),
                        [sty.img_1_docter__eynUl8Ddm8]: hasVariant(
                          $state,
                          "_1",
                          "docter"
                        ),
                        [sty.img_1_docters__eynUlpv2Kd]: hasVariant(
                          $state,
                          "_1",
                          "docters"
                        )
                      })}
                      displayHeight={
                        hasVariant($state, "_1", "chatviow") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "40px"
                          : hasVariant($state, "_1", "chatviow")
                          ? "50px"
                          : hasVariant($state, "_1", "docters") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "60px"
                          : "79px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant($state, "_1", "chatviow") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "40px"
                          : hasVariant($state, "_1", "chatviow")
                          ? "50px"
                          : hasVariant($state, "_1", "docters") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "60px"
                          : "79px"
                      }
                      loading={"lazy"}
                      src={
                        hasVariant($state, "_1", "chatviow") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "https://static.vecteezy.com/system/resources/previews/008/957/225/non_2x/female-doctor-avatar-clipart-icon-in-flat-design-vector.jpg"
                          : hasVariant($state, "_1", "docters") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? {
                              src: "/plasmic/liom_hamyar/images/image10.ico",
                              fullWidth: 256,
                              fullHeight: 256,
                              aspectRatio: undefined
                            }
                          : "https://static.vecteezy.com/system/resources/previews/008/957/225/non_2x/female-doctor-avatar-clipart-icon-in-flat-design-vector.jpg"
                      }
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__gusno,
                        {
                          [sty.freeBox_1_chatviow__gusnoaYJmT]: hasVariant(
                            $state,
                            "_1",
                            "chatviow"
                          ),
                          [sty.freeBox_1_docters__gusnopv2Kd]: hasVariant(
                            $state,
                            "_1",
                            "docters"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7CsOa,
                          {
                            [sty.freeBox_1_chatviow___7CsOaaYJmT]: hasVariant(
                              $state,
                              "_1",
                              "chatviow"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nBn0,
                            {
                              [sty.text_1_chatviow__nBn0AYJmT]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              ),
                              [sty.text_1_docters__nBn0Pv2Kd]: hasVariant(
                                $state,
                                "_1",
                                "docters"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "_1", "chatviow") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.doctor.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Dr. Mensah T";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.doctor.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Dr. Mensah T";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7Dgs3,
                            {
                              [sty.freeBox_1_chatviow___7Dgs3AYJmT]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              )
                            }
                          )}
                        >
                          <Seen
                            data-plasmic-name={"seen"}
                            data-plasmic-override={overrides.seen}
                            className={classNames("__wab_instance", sty.seen, {
                              [sty.seen_1_chatviow]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              )
                            })}
                            unnamedGroupOfVariants={
                              hasVariant($state, "_1", "chatviow")
                                ? (() => {
                                    try {
                                      return (() => {
                                        if (currentItem.status == -1)
                                          return "_2";
                                        else
                                          return `_${currentItem.status + 1}`;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                : undefined
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xOlDb,
                              {
                                [sty.text_1_chatviow__xOlDbaYJmT]: hasVariant(
                                  $state,
                                  "_1",
                                  "chatviow"
                                ),
                                [sty.text_1_docters__xOlDbpv2Kd]: hasVariant(
                                  $state,
                                  "_1",
                                  "docters"
                                )
                              }
                            )}
                          >
                            {hasVariant($state, "_1", "chatviow") ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      var birthDate =
                                        currentItem.date.split("-");
                                      let gy = parseInt(birthDate[0]);
                                      let gm = parseInt(birthDate[1]);
                                      let gd = parseInt(birthDate[2]);
                                      let shamsiMonthDays = [
                                        31, 31, 31, 31, 31, 31, 30, 30, 30, 30,
                                        30, 29
                                      ];

                                      let miladiDaysInMonth = [
                                        31, 28, 31, 30, 31, 30, 31, 31, 30, 31,
                                        30, 31
                                      ];

                                      let isLeapYear =
                                        gy % 4 === 0 &&
                                        (gy % 100 !== 0 || gy % 400 === 0);
                                      if (isLeapYear) {
                                        miladiDaysInMonth[1] = 29;
                                      }
                                      let daysPassedMiladi = gd;
                                      for (let i = 0; i < gm - 1; i++) {
                                        daysPassedMiladi +=
                                          miladiDaysInMonth[i];
                                      }
                                      let shamsiNewYearDay = new Date(
                                        gy,
                                        2,
                                        21
                                      );
                                      let shamsiStartDayInMiladi =
                                        (shamsiNewYearDay -
                                          new Date(gy, 0, 1)) /
                                        (1000 * 60 * 60 * 24);
                                      let daysPassedInShamsiYear =
                                        daysPassedMiladi -
                                        shamsiStartDayInMiladi;
                                      if (daysPassedInShamsiYear < 0) {
                                        gy--;
                                        shamsiNewYearDay = new Date(gy, 2, 21);
                                        shamsiStartDayInMiladi =
                                          (shamsiNewYearDay -
                                            new Date(gy, 0, 1)) /
                                          (1000 * 60 * 60 * 24);
                                        daysPassedInShamsiYear =
                                          daysPassedMiladi +
                                          (365 - shamsiStartDayInMiladi);
                                        if (isLeapYear) {
                                          daysPassedInShamsiYear++;
                                        }
                                      }
                                      let jy = gy - 621;
                                      let jm = 0;
                                      let jd = daysPassedInShamsiYear;
                                      for (
                                        let i = 0;
                                        i < shamsiMonthDays.length;
                                        i++
                                      ) {
                                        if (jd <= shamsiMonthDays[i]) {
                                          jm = i + 1;
                                          break;
                                        } else {
                                          jd -= shamsiMonthDays[i];
                                        }
                                      }
                                      return `${jy}/${jm}/${jd}`;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0633\u0644\u0627\u0645 \u062f\u06a9\u062a\u0631 \u062d\u0627\u0644\u062a\u0648\u0646 \u0686\u0637\u0648\u0631\u0647 \u061f";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              "\u0633\u0644\u0627\u0645 \u062f\u06a9\u062a\u0631 \u062d\u0627\u0644\u062a\u0648\u0646 \u0686\u0637\u0648\u0631\u0647 \u061f"
                            )}
                          </div>
                        </div>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2WNhL,
                          {
                            [sty.freeBox_1_chatviow___2WNhLaYJmT]: hasVariant(
                              $state,
                              "_1",
                              "chatviow"
                            )
                          }
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dvfRs,
                            {
                              [sty.freeBox_1_chatviow__dvfRsaYJmT]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              )
                            }
                          )}
                        >
                          <LineClomp
                            data-plasmic-name={"lineClomp"}
                            data-plasmic-override={overrides.lineClomp}
                            className={classNames(
                              "__wab_instance",
                              sty.lineClomp,
                              {
                                [sty.lineClomp_1_chatviow]: hasVariant(
                                  $state,
                                  "_1",
                                  "chatviow"
                                )
                              }
                            )}
                            numberOfLine={
                              hasVariant($state, "_1", "chatviow")
                                ? 1
                                : undefined
                            }
                            onLineChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "lineClomp",
                                __plasmic_idx_0,
                                "line"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oLwL,
                                {
                                  [sty.text_1_chatviow__oLwLaYJmT]: hasVariant(
                                    $state,
                                    "_1",
                                    "chatviow"
                                  ),
                                  [sty.text_1_docters__oLwLpv2Kd]: hasVariant(
                                    $state,
                                    "_1",
                                    "docters"
                                  )
                                }
                              )}
                            >
                              {hasVariant($state, "_1", "chatviow") ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.text;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0633\u0644\u0627\u0645 \u062f\u06a9\u062a\u0631 \u062d\u0627\u0644\u062a\u0648\u0646 \u0686\u0637\u0648\u0631\u0647 \u061f";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return undefined;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0633\u0644\u0627\u0645 \u062f\u06a9\u062a\u0631 \u062d\u0627\u0644\u062a\u0648\u0646 \u0686\u0637\u0648\u0631\u0647 \u061f";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              )}
                            </div>
                          </LineClomp>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__ku7Xf,
                        {
                          [sty.freeBox_1_chatviow__ku7XfaYJmT]: hasVariant(
                            $state,
                            "_1",
                            "chatviow"
                          ),
                          [sty.freeBox_1_docters__ku7Xfpv2Kd]: hasVariant(
                            $state,
                            "_1",
                            "docters"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__unrkr,
                          {
                            [sty.freeBox_1_chatviow__unrkraYJmT]: hasVariant(
                              $state,
                              "_1",
                              "chatviow"
                            ),
                            [sty.freeBox_1_docters__unrkrpv2Kd]: hasVariant(
                              $state,
                              "_1",
                              "docters"
                            )
                          }
                        )}
                      >
                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star__cKIzO,
                            {
                              [sty.star_1_chatviow__cKIzOaYJmT]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              ),
                              [sty.star_1_docters__cKIzOpv2Kd]: hasVariant(
                                $state,
                                "_1",
                                "docters"
                              )
                            }
                          )}
                        />

                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star___2Hhp8,
                            {
                              [sty.star_1_chatviow___2Hhp8AYJmT]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              ),
                              [sty.star_1_docters___2Hhp8Pv2Kd]: hasVariant(
                                $state,
                                "_1",
                                "docters"
                              )
                            }
                          )}
                        />

                        <Star
                          action={
                            hasVariant($state, "_1", "chatviow") &&
                            hasVariant(globalVariants, "screen", "mobile")
                              ? undefined
                              : hasVariant($state, "_1", "docters") &&
                                hasVariant(globalVariants, "screen", "mobile")
                              ? undefined
                              : true
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.star__joJew,
                            {
                              [sty.star_1_chatviow__joJeWaYJmT]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              ),
                              [sty.star_1_docters__joJeWpv2Kd]: hasVariant(
                                $state,
                                "_1",
                                "docters"
                              )
                            }
                          )}
                        />

                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star__rqGdG,
                            {
                              [sty.star_1_chatviow__rqGdGaYJmT]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              ),
                              [sty.star_1_docters__rqGdGpv2Kd]: hasVariant(
                                $state,
                                "_1",
                                "docters"
                              )
                            }
                          )}
                        />

                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star__wkmEv,
                            {
                              [sty.star_1_chatviow__wkmEvaYJmT]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              ),
                              [sty.star_1_docters__wkmEvpv2Kd]: hasVariant(
                                $state,
                                "_1",
                                "docters"
                              )
                            }
                          )}
                        />

                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star__aycr4,
                            {
                              [sty.star_1_chatviow__aycr4AYJmT]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              ),
                              [sty.star_1_docters__aycr4Pv2Kd]: hasVariant(
                                $state,
                                "_1",
                                "docters"
                              )
                            }
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cbbPn,
                          {
                            [sty.text_1_chatviow__cbbPnaYJmT]: hasVariant(
                              $state,
                              "_1",
                              "chatviow"
                            ),
                            [sty.text_1_docters__cbbPnpv2Kd]: hasVariant(
                              $state,
                              "_1",
                              "docters"
                            )
                          }
                        )}
                      >
                        {
                          "\u062a\u0639\u062f\u0627\u062f \u0645\u0631\u0627\u062c\u0639 (150)"
                        }
                      </div>
                    </div>
                  </div>
                );
              })}
              {(() => {
                try {
                  return $state.chats.userID ? $state.chats.list == 0 : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__biyqo)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__mliO, {
                      [sty.img_1_chatviow__mliOaYJmT]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      )
                    })}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"150px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image41.png",
                      fullWidth: 450,
                      fullHeight: 450,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4NZ5R
                    )}
                  >
                    {
                      "\u0634\u0645\u0627 \u0647\u06cc\u0686 \u067e\u0631\u0633\u0634 \u0628\u0627\u0632\u06cc \u0646\u062f\u0627\u0631\u06cc\u062f."
                    }
                  </div>
                </div>
              ) : null}
            </Stack__>
          ) : null}
          {(
            hasVariant($state, "_1", "chatviow") &&
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant($state, "_1", "chatviow")
              ? true
              : hasVariant($state, "_1", "docter") &&
                hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant($state, "_1", "docter")
              ? true
              : false
          ) ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"doctorsDetails"}
              data-plasmic-override={overrides.doctorsDetails}
              hasGap={true}
              className={classNames(projectcss.all, sty.doctorsDetails, {
                [sty.doctorsDetails_1_chatviow]: hasVariant(
                  $state,
                  "_1",
                  "chatviow"
                ),
                [sty.doctorsDetails_1_docter]: hasVariant(
                  $state,
                  "_1",
                  "docter"
                )
              })}
            >
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant($state, "_1", "chatviow")
                    ? Icon2Icon
                    : hasVariant($state, "_1", "docter")
                    ? Icon2Icon
                    : "div"
                }
                className={classNames(projectcss.all, sty.svg__coMsb, {
                  [sty.svg_1_chatviow__coMsBaYJmT]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.svg_1_docter__coMsb8Ddm8]: hasVariant(
                    $state,
                    "_1",
                    "docter"
                  )
                })}
                role={"img"}
              />

              <Stack__
                as={"div"}
                data-plasmic-name={"bg2"}
                data-plasmic-override={overrides.bg2}
                hasGap={true}
                className={classNames(projectcss.all, sty.bg2, {
                  [sty.bg2_1_chatviow]: hasVariant($state, "_1", "chatviow"),
                  [sty.bg2_1_docter]: hasVariant($state, "_1", "docter"),
                  [sty.bg2_1_docters]: hasVariant($state, "_1", "docters")
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__fz9MD, {
                    [sty.img_1_chatviow__fz9MDaYJmT]: hasVariant(
                      $state,
                      "_1",
                      "chatviow"
                    ),
                    [sty.img_1_docter__fz9MD8Ddm8]: hasVariant(
                      $state,
                      "_1",
                      "docter"
                    ),
                    [sty.img_1_docters__fz9MDpv2Kd]: hasVariant(
                      $state,
                      "_1",
                      "docters"
                    )
                  })}
                  displayHeight={
                    hasVariant($state, "_1", "docter") ? "100px" : "118px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant($state, "_1", "docter") ? "100px" : "118px"
                  }
                  loading={"lazy"}
                  src={
                    "https://static.vecteezy.com/system/resources/previews/008/957/225/non_2x/female-doctor-avatar-clipart-icon-in-flat-design-vector.jpg"
                  }
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__c7P9H, {
                    [sty.freeBox_1_chatviow__c7P9HaYJmT]: hasVariant(
                      $state,
                      "_1",
                      "chatviow"
                    ),
                    [sty.freeBox_1_docter__c7P9H8Ddm8]: hasVariant(
                      $state,
                      "_1",
                      "docter"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h9NXh,
                      {
                        [sty.text_1_chatviow__h9NXHaYJmT]: hasVariant(
                          $state,
                          "_1",
                          "chatviow"
                        ),
                        [sty.text_1_docter__h9NXh8Ddm8]: hasVariant(
                          $state,
                          "_1",
                          "docter"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "_1", "docter") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.getList.doctor.name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "...";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      "Dr. Bellamy Nicholas"
                    )}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n75Vw,
                      {
                        [sty.text_1_chatviow__n75VwaYJmT]: hasVariant(
                          $state,
                          "_1",
                          "chatviow"
                        ),
                        [sty.text_1_docter__n75Vw8Ddm8]: hasVariant(
                          $state,
                          "_1",
                          "docter"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "_1", "docter") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Viralogist";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      "Viralogist"
                    )}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__gteHv, {
                    [sty.freeBox_1_docter__gteHv8Ddm8]: hasVariant(
                      $state,
                      "_1",
                      "docter"
                    )
                  })}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return Array.from(
                          { length: $state.getList.doctor.rate },
                          () => $state.getList.doctor.rate
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Icon77Icon
                        className={classNames(projectcss.all, sty.svg___2TsPd, {
                          [sty.svg_1_docter___2TsPd8Ddm8]: hasVariant(
                            $state,
                            "_1",
                            "docter"
                          )
                        })}
                        key={currentIndex}
                        role={"img"}
                      />
                    );
                  })}
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0B37E, {
                  [sty.freeBox_1_chatviow___0B37EaYJmT]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.freeBox_1_docter___0B37E8Ddm8]: hasVariant(
                    $state,
                    "_1",
                    "docter"
                  )
                })}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"about"}
                  data-plasmic-override={overrides.about}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.about, {
                    [sty.about_1_chatviow]: hasVariant(
                      $state,
                      "_1",
                      "chatviow"
                    ),
                    [sty.about_1_docter]: hasVariant($state, "_1", "docter")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w4IPz,
                      {
                        [sty.text_1_chatviow__w4IPZaYJmT]: hasVariant(
                          $state,
                          "_1",
                          "chatviow"
                        ),
                        [sty.text_1_docter__w4IPz8Ddm8]: hasVariant(
                          $state,
                          "_1",
                          "docter"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "_1", "chatviow")
                      ? "\u0622\u0634\u0646\u0627\u06cc\u06cc \u0628\u0627 \u067e\u0632\u0634\u06a9"
                      : hasVariant($state, "_1", "docter")
                      ? "\u0622\u0634\u0646\u0627\u06cc\u06cc \u0628\u0627 \u067e\u0632\u0634\u06a9"
                      : "About Doctor"}
                  </div>
                  <div
                    data-plasmic-name={"drBellamyNicholas"}
                    data-plasmic-override={overrides.drBellamyNicholas}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.drBellamyNicholas,
                      {
                        [sty.drBellamyNicholas_1_chatviow]: hasVariant(
                          $state,
                          "_1",
                          "chatviow"
                        ),
                        [sty.drBellamyNicholas_1_docter]: hasVariant(
                          $state,
                          "_1",
                          "docter"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "_1", "chatviow") ? (
                      "\u062f\u06a9\u062a\u0631 [\u0646\u0627\u0645 \u067e\u0632\u0634\u06a9]\u060c \u0645\u062a\u062e\u0635\u0635 [\u062a\u062e\u0635\u0635 \u067e\u0632\u0634\u06a9] \u0628\u0627 [\u062a\u0639\u062f\u0627\u062f] \u0633\u0627\u0644 \u062a\u062c\u0631\u0628\u0647\u060c \u0622\u0645\u0627\u062f\u0647 \u0627\u0631\u0627\u0626\u0647 \u062e\u062f\u0645\u0627\u062a \u062f\u0631\u0645\u0627\u0646\u06cc \u0628\u0627 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0631\u0648\u0634\u200c\u0647\u0627 \u0648 \u062f\u0627\u0646\u0634 \u0631\u0648\u0632 \u0627\u0633\u062a. \u0627\u06cc\u0634\u0627\u0646 \u0641\u0627\u0631\u063a\u200c\u0627\u0644\u062a\u062d\u0635\u06cc\u0644 \u0627\u0632 \u062f\u0627\u0646\u0634\u06af\u0627\u0647 [\u0646\u0627\u0645 \u062f\u0627\u0646\u0634\u06af\u0627\u0647] \u0628\u0648\u062f\u0647 \u0648 \u0628\u0627 \u0631\u0648\u06cc\u06a9\u0631\u062f\u06cc \u0635\u0645\u06cc\u0645\u06cc \u0648 \u062d\u0631\u0641\u0647\u200c\u0627\u06cc \u0628\u0647 \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0645\u0634\u0627\u0648\u0631\u0647 \u0645\u06cc\u200c\u062f\u0647\u062f. \u0628\u0631\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u0628\u062a \u06cc\u0627 \u0627\u0631\u0633\u0627\u0644 \u067e\u06cc\u0627\u0645\u060c \u0644\u0637\u0641\u0627\u064b \u0627\u0632 \u0637\u0631\u06cc\u0642 \u0628\u062e\u0634 \u0645\u0631\u0628\u0648\u0637\u0647 \u0627\u0642\u062f\u0627\u0645 \u06a9\u0646\u06cc\u062f."
                    ) : hasVariant($state, "_1", "docter") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.getList.doctor.description;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "...";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        {(() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062f\u06a9\u062a\u0631 [\u0646\u0627\u0645 \u067e\u0632\u0634\u06a9]\u060c \u0645\u062a\u062e\u0635\u0635 [\u062a\u062e\u0635\u0635 \u067e\u0632\u0634\u06a9] \u0628\u0627 [\u062a\u0639\u062f\u0627\u062f] \u0633\u0627\u0644 \u062a\u062c\u0631\u0628\u0647\u060c \u0622\u0645\u0627\u062f\u0647 \u0627\u0631\u0627\u0626\u0647 \u062e\u062f\u0645\u0627\u062a \u062f\u0631\u0645\u0627\u0646\u06cc \u0628\u0627 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0631\u0648\u0634\u200c\u0647\u0627 \u0648 \u062f\u0627\u0646\u0634 \u0631\u0648\u0632 \u0627\u0633\u062a. \u0627\u06cc\u0634\u0627\u0646 \u0641\u0627\u0631\u063a\u200c\u0627\u0644\u062a\u062d\u0635\u06cc\u0644 \u0627\u0632 \u062f\u0627\u0646\u0634\u06af\u0627\u0647 [\u0646\u0627\u0645 \u062f\u0627\u0646\u0634\u06af\u0627\u0647] \u0628\u0648\u062f\u0647 \u0648 \u0628\u0627 \u0631\u0648\u06cc\u06a9\u0631\u062f\u06cc \u0635\u0645\u06cc\u0645\u06cc \u0648 \u062d\u0631\u0641\u0647\u200c\u0627\u06cc \u0628\u0647 \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0645\u0634\u0627\u0648\u0631\u0647 \u0645\u06cc\u200c\u062f\u0647\u062f. \u0628\u0631\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u0628\u062a \u06cc\u0627 \u0627\u0631\u0633\u0627\u0644 \u067e\u06cc\u0627\u0645\u060c \u0644\u0637\u0641\u0627\u064b \u0627\u0632 \u0637\u0631\u06cc\u0642 \u0628\u062e\u0634 \u0645\u0631\u0628\u0648\u0637\u0647 \u0627\u0642\u062f\u0627\u0645 \u06a9\u0646\u06cc\u062f.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    )}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"workingTime"}
                  data-plasmic-override={overrides.workingTime}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.workingTime, {
                    [sty.workingTime_1_chatviow]: hasVariant(
                      $state,
                      "_1",
                      "chatviow"
                    ),
                    [sty.workingTime_1_docter]: hasVariant(
                      $state,
                      "_1",
                      "docter"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ok0Mx,
                      {
                        [sty.text_1_chatviow__ok0MxaYJmT]: hasVariant(
                          $state,
                          "_1",
                          "chatviow"
                        ),
                        [sty.text_1_docter__ok0Mx8Ddm8]: hasVariant(
                          $state,
                          "_1",
                          "docter"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "_1", "chatviow")
                      ? "\u0633\u0627\u0639\u0627\u062a \u067e\u0627\u0633\u062e\u06af\u0648\u06cc\u06cc"
                      : hasVariant($state, "_1", "docter")
                      ? "\u0645\u06cc\u0627\u0646\u06af\u06cc\u0646 \u0632\u0645\u0627\u0646 \u067e\u0627\u0633\u062e\u06af\u0648\u06cc\u06cc"
                      : "Working time"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8Zuwg, {
                      [sty.freeBox_1_chatviow___8ZuwgaYJmT]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.freeBox_1_docter___8Zuwg8Ddm8]: hasVariant(
                        $state,
                        "_1",
                        "docter"
                      )
                    })}
                  >
                    <div
                      data-plasmic-name={"monSat0830Am"}
                      data-plasmic-override={overrides.monSat0830Am}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.monSat0830Am,
                        {
                          [sty.monSat0830Am_1_chatviow]: hasVariant(
                            $state,
                            "_1",
                            "chatviow"
                          ),
                          [sty.monSat0830Am_1_docter]: hasVariant(
                            $state,
                            "_1",
                            "docter"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "_1", "chatviow") ? (
                        "\u0631\u0648\u0632\u0647\u0627\u06cc \u0632\u0648\u062c (\u0633\u0627\u0639\u062a 9 \u0627\u0644\u06cc 15)"
                      ) : hasVariant($state, "_1", "docter") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.getList.doctor.time + " ساعت ";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "...";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        "Mon - Sat (08:30 AM - 09:00 PM)"
                      )}
                    </div>
                    <Icon120Icon
                      className={classNames(projectcss.all, sty.svg__hBotm, {
                        [sty.svg_1_docter__hBotm8Ddm8]: hasVariant(
                          $state,
                          "_1",
                          "docter"
                        )
                      })}
                      role={"img"}
                    />
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"speciality4"}
                  data-plasmic-override={overrides.speciality4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.speciality4, {
                    [sty.speciality4_1_chatviow]: hasVariant(
                      $state,
                      "_1",
                      "chatviow"
                    ),
                    [sty.speciality4_1_docter]: hasVariant(
                      $state,
                      "_1",
                      "docter"
                    ),
                    [sty.speciality4_1_docters]: hasVariant(
                      $state,
                      "_1",
                      "docters"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o2Q8F,
                      {
                        [sty.text_1_docter__o2Q8F8Ddm8]: hasVariant(
                          $state,
                          "_1",
                          "docter"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "_1", "docter")
                      ? "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 ..."
                      : "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0633\u0644\u0627\u0645\u062a \u062c\u0646\u0633\u06cc \u0648 \u0631\u0648\u0627\u0628\u0637 \u062c\u0646\u0633\u06cc"}
                  </div>
                  <LineClomp
                    data-plasmic-name={"lineClomp2"}
                    data-plasmic-override={overrides.lineClomp2}
                    className={classNames("__wab_instance", sty.lineClomp2, {
                      [sty.lineClomp2_1_docter]: hasVariant(
                        $state,
                        "_1",
                        "docter"
                      )
                    })}
                    more={
                      hasVariant($state, "_1", "docter") &&
                      hasVariant(globalVariants, "screen", "mobile")
                        ? true
                        : hasVariant($state, "_1", "docter")
                        ? true
                        : undefined
                    }
                    numberOfLine={
                      hasVariant($state, "_1", "docter") &&
                      hasVariant(globalVariants, "screen", "mobile")
                        ? 2
                        : hasVariant($state, "_1", "docter")
                        ? 2
                        : hasVariant(globalVariants, "screen", "mobile")
                        ? 2
                        : undefined
                    }
                    onLineChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "lineClomp2",
                        "line"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pCaSs,
                        {
                          [sty.text_1_docter__pCaSs8Ddm8]: hasVariant(
                            $state,
                            "_1",
                            "docter"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "_1", "docter") &&
                      hasVariant(globalVariants, "screen", "mobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.getList.list
                                .map(item => item.text)
                                .join("، ");
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 ...";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : hasVariant($state, "_1", "docter") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.getList.list
                                .map(item => item.text)
                                .join("، ");
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "...";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0633\u0644\u0627\u0645\u062a \u062c\u0646\u0633\u06cc \u0648 \u0631\u0648\u0627\u0628\u0637 \u062c\u0646\u0633\u06cc"
                      )}
                    </div>
                  </LineClomp>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tqzU6, {
                      [sty.freeBox_1_docter__tqzU68Ddm8]: hasVariant(
                        $state,
                        "_1",
                        "docter"
                      )
                    })}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.getList.list;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"card15"}
                          data-plasmic-override={overrides.card15}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.card15, {
                            [sty.card15_1_docter]: hasVariant(
                              $state,
                              "_1",
                              "docter"
                            )
                          })}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateDialogOpendialog"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["dialog", "opendialog"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDialogOpendialog"] != null &&
                              typeof $steps["updateDialogOpendialog"] ===
                                "object" &&
                              typeof $steps["updateDialogOpendialog"].then ===
                                "function"
                            ) {
                              $steps["updateDialogOpendialog"] = await $steps[
                                "updateDialogOpendialog"
                              ];
                            }

                            $steps["updateSublist"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["sublist"]
                                    },
                                    operation: 0,
                                    value: currentItem.id
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSublist"] != null &&
                              typeof $steps["updateSublist"] === "object" &&
                              typeof $steps["updateSublist"].then === "function"
                            ) {
                              $steps["updateSublist"] = await $steps[
                                "updateSublist"
                              ];
                            }
                          }}
                          style={
                            hasVariant($state, "_1", "docter") &&
                            hasVariant(globalVariants, "screen", "mobile")
                              ? (() => {
                                  try {
                                    return {
                                      "background-color":
                                        currentItem.backColor + "a1",
                                      border: `solid ${currentItem.textColor} 1px`
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return {
                                      "background-color":
                                        currentItem.backColor + "a1",
                                      border: `solid ${currentItem.textColor} 2px`
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__p0th,
                              {
                                [sty.text_1_docter__p0Th8Ddm8]: hasVariant(
                                  $state,
                                  "_1",
                                  "docter"
                                )
                              }
                            )}
                            style={(() => {
                              try {
                                return {
                                  color: currentItem.textColor
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            {hasVariant($state, "_1", "docter") ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.text;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0645\u0634\u06a9\u0644\u0627\u062a \u062c\u0646\u0633\u06cc ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0645\u0634\u06a9\u0644\u0627\u062a \u062c\u0646\u0633\u06cc "
                            )}
                          </div>
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.button9,
                                {
                                  [sty.button9_1_docter]: hasVariant(
                                    $state,
                                    "_1",
                                    "docter"
                                  )
                                }
                              ),
                              color: generateStateValueProp($state, [
                                "button9",
                                __plasmic_idx_0,
                                "color"
                              ]),
                              endIcon: (
                                <Icon104Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__kjKgl
                                  )}
                                  role={"img"}
                                />
                              ),

                              onColorChange: async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button9",
                                    __plasmic_idx_0,
                                    "color"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              },
                              showEndIcon: true,
                              size: hasVariant($state, "_1", "docter")
                                ? "minimal"
                                : "compact"
                            };

                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "button9[].color",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    undefined
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <Button
                                data-plasmic-name={"button9"}
                                data-plasmic-override={overrides.button9}
                                {...child$Props}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__uWhmh,
                                    {
                                      [sty.text_1_docter__uWhmh8Ddm8]:
                                        hasVariant($state, "_1", "docter")
                                    }
                                  )}
                                >
                                  {
                                    "\u0634\u0631\u0648\u0639 \u06af\u0641\u062a\u06af\u0648"
                                  }
                                </div>
                              </Button>
                            );
                          })()}
                        </Stack__>
                      );
                    })}
                  </div>
                </Stack__>
              </Stack__>
              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section, {
                  [sty.section_1_docter]: hasVariant($state, "_1", "docter")
                })}
              >
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button, {
                    [sty.button_1_chatviow]: hasVariant(
                      $state,
                      "_1",
                      "chatviow"
                    ),
                    [sty.button_1_docter]: hasVariant($state, "_1", "docter")
                  })}
                  color={generateStateValueProp($state, ["button", "color"])}
                  loading={
                    hasVariant($state, "_1", "docter") ? undefined : true
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDialogOpendialog"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog", "opendialog"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogOpendialog"] != null &&
                      typeof $steps["updateDialogOpendialog"] === "object" &&
                      typeof $steps["updateDialogOpendialog"].then ===
                        "function"
                    ) {
                      $steps["updateDialogOpendialog"] = await $steps[
                        "updateDialogOpendialog"
                      ];
                    }

                    $steps["updateSublist"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["sublist"]
                            },
                            operation: 0,
                            value: $state.getList.list.filter(
                              item => item.text == "سایر"
                            )[0].id
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSublist"] != null &&
                      typeof $steps["updateSublist"] === "object" &&
                      typeof $steps["updateSublist"].then === "function"
                    ) {
                      $steps["updateSublist"] = await $steps["updateSublist"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1UZth,
                      {
                        [sty.text_1_chatviow___1UZthaYJmT]: hasVariant(
                          $state,
                          "_1",
                          "chatviow"
                        ),
                        [sty.text_1_docter___1UZth8Ddm8]: hasVariant(
                          $state,
                          "_1",
                          "docter"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "_1", "chatviow") &&
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "\u06af\u0641\u062a\u200c\u0648\u06af\u0648\u06cc \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0627 \u067e\u0632\u0634\u06a9"
                      : hasVariant($state, "_1", "chatviow")
                      ? "\u06af\u0641\u062a\u200c\u0648\u06af\u0648\u06cc \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0627 \u067e\u0632\u0634\u06a9"
                      : hasVariant($state, "_1", "docter") &&
                        hasVariant(globalVariants, "screen", "mobile")
                      ? "\u06af\u0641\u062a\u200c\u0648\u06af\u0648\u06cc \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0627 \u067e\u0632\u0634\u06a9"
                      : hasVariant($state, "_1", "docter")
                      ? "\u06af\u0641\u062a\u200c\u0648\u06af\u0648\u06cc \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0627 \u067e\u0632\u0634\u06a9"
                      : "Button"}
                  </div>
                </Button>
              </section>
              <Dialog
                data-plasmic-name={"dialog"}
                data-plasmic-override={overrides.dialog}
                className={classNames("__wab_instance", sty.dialog, {
                  [sty.dialog_1_chatviow]: hasVariant($state, "_1", "chatviow"),
                  [sty.dialog_1_docter]: hasVariant($state, "_1", "docter"),
                  [sty.dialog_1_docters]: hasVariant($state, "_1", "docters")
                })}
                onOpendialogChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "dialog",
                    "opendialog"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                opendialog={generateStateValueProp($state, [
                  "dialog",
                  "opendialog"
                ])}
              >
                <ApiRequest
                  data-plasmic-name={"shop"}
                  data-plasmic-override={overrides.shop}
                  className={classNames("__wab_instance", sty.shop, {
                    [sty.shop_1_docter]: hasVariant($state, "_1", "docter")
                  })}
                  errorDisplay={null}
                  loadingDisplay={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mLLf, {
                        [sty.freeBox_1_docter__mLLf8Ddm8]: hasVariant(
                          $state,
                          "_1",
                          "docter"
                        )
                      })}
                    >
                      <Icon115Icon
                        className={classNames(projectcss.all, sty.svg__sfPaQ)}
                        role={"img"}
                      />
                    </div>
                  }
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["shop", "error"]).apply(
                      null,
                      eventArgs
                    );
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "shop",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["shop", "data"]).apply(
                      null,
                      eventArgs
                    );
                  }}
                  params={(() => {
                    try {
                      return {
                        token: $state.token,
                        id: 14
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return { id: 14 };
                      }
                      throw e;
                    }
                  })()}
                  url={"https://n8n.staas.ir/webhook/help/shop"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__stOAm, {
                      [sty.freeBox_1_docter__stOAm8Ddm8]: hasVariant(
                        $state,
                        "_1",
                        "docter"
                      )
                    })}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__cbfk6)}
                      dir={"rtl"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wqzf
                        )}
                      />

                      <DialogTitle
                        data-plasmic-name={"dialogTitle"}
                        data-plasmic-override={overrides.dialogTitle}
                        className={classNames(
                          "__wab_instance",
                          sty.dialogTitle
                        )}
                      >
                        <h5
                          data-plasmic-name={"h5"}
                          data-plasmic-override={overrides.h5}
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            sty.h5
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fZnWn,
                              {
                                [sty.text_1_docter__fZnWn8Ddm8]: hasVariant(
                                  $state,
                                  "_1",
                                  "docter"
                                )
                              }
                            )}
                          >
                            {hasVariant($state, "_1", "docter") ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return undefined;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Dialog title";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              "Dialog title"
                            )}
                          </div>
                        </h5>
                      </DialogTitle>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__izDgj)}
                      dir={"rtl"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8MEOk
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "You can insert dialog body content here in this slot.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bh7Fx
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__iRax,
                            {
                              [sty.freeBox_1_docter__iRax8Ddm8]: hasVariant(
                                $state,
                                "_1",
                                "docter"
                              )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___0W0DV
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xXvz8
                              )}
                            >
                              {
                                "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39"
                              }
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bNzvz
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ddtM4
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.shop.data.item.name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jHkCv
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ftmM9
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.shop.data.item.fullPrice;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wEgiz
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $state.shop.data.item.price + " تومان"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__bSLZ
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__llY03
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.shop.data.item.offer + "%";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "1";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vyXc9
                            )}
                          >
                            {
                              "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                            }
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zc0UE
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__lSs3Z
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  allowClear: false,
                                  autoFocus: false,
                                  bordered: false,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input3
                                  ),
                                  disabled: false,
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input3", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  placeholder:
                                    "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                                  prefix: (
                                    <Icon10Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__yvOvX
                                      )}
                                      role={"img"}
                                    />
                                  ),

                                  readOnly: false,
                                  size: "small",
                                  suffix: null,
                                  value: generateStateValueProp($state, [
                                    "input3",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input3.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input3"}
                                    data-plasmic-override={overrides.input3}
                                    {...child$Props}
                                  />
                                );
                              })()}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dqZ3Y
                                )}
                              />
                            </div>
                            <Button
                              data-plasmic-name={"button10"}
                              data-plasmic-override={overrides.button10}
                              className={classNames(
                                "__wab_instance",
                                sty.button10
                              )}
                              color={generateStateValueProp($state, [
                                "button10",
                                "color"
                              ])}
                              onColorChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button10",
                                    "color"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zo74
                                )}
                              >
                                {"\u062a\u0627\u06cc\u06cc\u062f"}
                              </div>
                            </Button>
                          </Stack__>
                          <Button
                            data-plasmic-name={"button11"}
                            data-plasmic-override={overrides.button11}
                            className={classNames(
                              "__wab_instance",
                              sty.button11,
                              {
                                [sty.button11_1_chatviow]: hasVariant(
                                  $state,
                                  "_1",
                                  "chatviow"
                                ),
                                [sty.button11_1_docter]: hasVariant(
                                  $state,
                                  "_1",
                                  "docter"
                                )
                              }
                            )}
                            color={generateStateValueProp($state, [
                              "button11",
                              "color"
                            ])}
                            endIcon={
                              <Icon12Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__sHhYj
                                )}
                                role={"img"}
                              />
                            }
                            isDisabled={(() => {
                              try {
                                return $state.btnloading;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            loading={(() => {
                              try {
                                return $state.btnloading;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateBtnloading"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["btnloading"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateBtnloading"] != null &&
                                typeof $steps["updateBtnloading"] ===
                                  "object" &&
                                typeof $steps["updateBtnloading"].then ===
                                  "function"
                              ) {
                                $steps["updateBtnloading"] = await $steps[
                                  "updateBtnloading"
                                ];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        "https://n8n.staas.ir/webhook/help/shop",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              token: "Bearer " + $state.token,
                                              id: $state.shop.data.item.id
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }

                              $steps["goToPage"] =
                                $steps.invokeGlobalAction?.data.success == true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: (() => {
                                          try {
                                            return $steps.invokeGlobalAction
                                              .data.url;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["goToPage"] != null &&
                                typeof $steps["goToPage"] === "object" &&
                                typeof $steps["goToPage"].then === "function"
                              ) {
                                $steps["goToPage"] = await $steps["goToPage"];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return localStorage.setItem(
                                          "chatstart",
                                          JSON.stringify({
                                            listID: $state.listId,
                                            sublist: $state.sublist,
                                            docterID: $state.getList.doctor.id
                                          })
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["updateBtnloading2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["btnloading"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateBtnloading2"] != null &&
                                typeof $steps["updateBtnloading2"] ===
                                  "object" &&
                                typeof $steps["updateBtnloading2"].then ===
                                  "function"
                              ) {
                                $steps["updateBtnloading2"] = await $steps[
                                  "updateBtnloading2"
                                ];
                              }
                            }}
                            onColorChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button11",
                                  "color"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gGv5H
                              )}
                            >
                              {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                            </div>
                          </Button>
                          <p
                            className={classNames(
                              projectcss.all,
                              projectcss.p,
                              projectcss.__wab_text,
                              sty.p__pJfyS
                            )}
                          >
                            {
                              "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                            }
                          </p>
                          <p
                            className={classNames(
                              projectcss.all,
                              projectcss.p,
                              projectcss.__wab_text,
                              sty.p__cjp15
                            )}
                          >
                            {
                              "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                            }
                          </p>
                        </Stack__>
                      </div>
                    </Stack__>
                  </div>
                </ApiRequest>
              </Dialog>
            </Stack__>
          ) : null}
          <Timer
            data-plasmic-name={"timer"}
            data-plasmic-override={overrides.timer}
            className={classNames("__wab_instance", sty.timer, {
              [sty.timer_1_docter]: hasVariant($state, "_1", "docter")
            })}
            intervalSeconds={1}
            isRunning={true}
            onTick={async () => {
              const $steps = {};

              $steps["updateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["variable"]
                      },
                      operation: 0,
                      value: window.scrollY
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateVariable"] != null &&
                typeof $steps["updateVariable"] === "object" &&
                typeof $steps["updateVariable"].then === "function"
              ) {
                $steps["updateVariable"] = await $steps["updateVariable"];
              }
            }}
            runWhileEditing={true}
          />

          <Dialog
            data-plasmic-name={"dialog2"}
            data-plasmic-override={overrides.dialog2}
            className={classNames("__wab_instance", sty.dialog2, {
              [sty.dialog2_1_chatviow]: hasVariant($state, "_1", "chatviow"),
              [sty.dialog2_1_docter]: hasVariant($state, "_1", "docter"),
              [sty.dialog2_1_docters]: hasVariant($state, "_1", "docters")
            })}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialog2",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog2",
              "opendialog"
            ])}
          >
            <ApiRequest
              data-plasmic-name={"shop2"}
              data-plasmic-override={overrides.shop2}
              className={classNames("__wab_instance", sty.shop2, {
                [sty.shop2_1_docter]: hasVariant($state, "_1", "docter")
              })}
              errorDisplay={null}
              loadingDisplay={
                <div
                  className={classNames(projectcss.all, sty.freeBox__bTxwL, {
                    [sty.freeBox_1_docter__bTxwL8Ddm8]: hasVariant(
                      $state,
                      "_1",
                      "docter"
                    )
                  })}
                >
                  <Icon115Icon
                    className={classNames(projectcss.all, sty.svg___013UO)}
                    role={"img"}
                  />
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shop2", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shop2", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shop2", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              params={(() => {
                try {
                  return {
                    token: $state.token,
                    id: 14
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return { id: 14 };
                  }
                  throw e;
                }
              })()}
              url={"https://n8n.staas.ir/webhook/help/shop"}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__zAikU, {
                  [sty.freeBox_1_docter__zAikU8Ddm8]: hasVariant(
                    $state,
                    "_1",
                    "docter"
                  )
                })}
              >
                <EmojiSadSquareSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__a5XMa)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nsfLw
                  )}
                >
                  {
                    "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0627\u0645\u0648\u0641\u0642"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tyezp
                  )}
                >
                  {
                    "\u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0627\u062f \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0627\u0648\u0645\u062f\u0647 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0634\u062f\u0647. \u0644\u0637\u0641\u0627\u064b \u06cc\u0647 \u0628\u0627\u0631 \u062f\u06cc\u06af\u0647 \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 \u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f . "
                  }
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rSwa2)}>
                  <Button
                    data-plasmic-name={"button12"}
                    data-plasmic-override={overrides.button12}
                    className={classNames("__wab_instance", sty.button12, {
                      [sty.button12_1_chatviow]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.button12_1_docter]: hasVariant(
                        $state,
                        "_1",
                        "docter"
                      )
                    })}
                    color={generateStateValueProp($state, [
                      "button12",
                      "color"
                    ])}
                    endIcon={
                      <Icon12Icon
                        className={classNames(projectcss.all, sty.svg__cJgT)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return $state.btnloading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    loading={(() => {
                      try {
                        return $state.btnloading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateBtnloading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["btnloading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateBtnloading"] != null &&
                        typeof $steps["updateBtnloading"] === "object" &&
                        typeof $steps["updateBtnloading"].then === "function"
                      ) {
                        $steps["updateBtnloading"] = await $steps[
                          "updateBtnloading"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/help/shop",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      token: "Bearer " + $state.token,
                                      id: $state.shop2.data.item.id
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["goToPage"] =
                        $steps.invokeGlobalAction?.data.success == true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return $steps.invokeGlobalAction.data.url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["updateBtnloading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["btnloading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateBtnloading2"] != null &&
                        typeof $steps["updateBtnloading2"] === "object" &&
                        typeof $steps["updateBtnloading2"].then === "function"
                      ) {
                        $steps["updateBtnloading2"] = await $steps[
                          "updateBtnloading2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button12",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__thDti
                      )}
                    >
                      {"\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"}
                    </div>
                  </Button>
                </div>
              </div>
            </ApiRequest>
          </Dialog>
          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              hasVariant(globalVariants, "screen", "mobile")
                ? "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
                : "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
            }
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___8MoGl, {
              [sty.freeBox_1_chatviow___8MoGlaYJmT]: hasVariant(
                $state,
                "_1",
                "chatviow"
              ),
              [sty.freeBox_1_docter___8MoGl8Ddm8]: hasVariant(
                $state,
                "_1",
                "docter"
              ),
              [sty.freeBox_1_docters___8MoGlpv2Kd]: hasVariant(
                $state,
                "_1",
                "docters"
              )
            })}
          >
            {(
              hasVariant($state, "_1", "docter")
                ? true
                : hasVariant($state, "_1", "docters") &&
                  hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant($state, "_1", "docters")
                ? true
                : false
            ) ? (
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant($state, "_1", "chatviow")
                    ? ChevronRightIcon
                    : hasVariant($state, "_1", "docter")
                    ? ChevronRightIcon
                    : hasVariant($state, "_1", "docters") &&
                      hasVariant(globalVariants, "screen", "mobile")
                    ? ChevronRightIcon
                    : hasVariant($state, "_1", "docters")
                    ? ChevronRightIcon
                    : Icon22Icon
                }
                className={classNames(projectcss.all, sty.svg__no9Yv, {
                  [sty.svg_1_chatviow__no9YVaYJmT]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.svg_1_docter__no9Yv8Ddm8]: hasVariant(
                    $state,
                    "_1",
                    "docter"
                  ),
                  [sty.svg_1_docters__no9YVpv2Kd]: hasVariant(
                    $state,
                    "_1",
                    "docters"
                  )
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["update1"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "_1",
                          operation: 1,
                          value: "docters"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, undefined);
                          return undefined;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["update1"] != null &&
                    typeof $steps["update1"] === "object" &&
                    typeof $steps["update1"].then === "function"
                  ) {
                    $steps["update1"] = await $steps["update1"];
                  }
                }}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qMam7,
                {
                  [sty.text_1_chatviow__qMam7AYJmT]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.text_1_docter__qMam78Ddm8]: hasVariant(
                    $state,
                    "_1",
                    "docter"
                  ),
                  [sty.text_1_docters__qMam7Pv2Kd]: hasVariant(
                    $state,
                    "_1",
                    "docters"
                  )
                }
              )}
            >
              {"\u06a9\u0644\u06cc\u0646\u06cc\u06a9 \u0644\u06cc\u0648\u0645"}
            </div>
            {(
              hasVariant($state, "_1", "docter")
                ? true
                : hasVariant($state, "_1", "docters")
                ? true
                : (() => {
                    try {
                      return !$state.loadingPage;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <Button
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                className={classNames("__wab_instance", sty.button2, {
                  [sty.button2_1_docter]: hasVariant($state, "_1", "docter"),
                  [sty.button2_1_docters]: hasVariant($state, "_1", "docters")
                })}
                color={generateStateValueProp($state, ["button2", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToChatviow"] = true
                    ? (() => {
                        const actionArgs = { destination: `/chatviow` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToChatviow"] != null &&
                    typeof $steps["goToChatviow"] === "object" &&
                    typeof $steps["goToChatviow"].then === "function"
                  ) {
                    $steps["goToChatviow"] = await $steps["goToChatviow"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button2", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                showStartIcon={true}
                size={"compact"}
                startIcon={
                  <Icon102Icon
                    className={classNames(projectcss.all, sty.svg___8EYhu)}
                    role={"img"}
                  />
                }
              >
                {
                  "\u0648\u06cc\u0632\u06cc\u062a \u0647\u0627\u06cc \u0645\u0646"
                }
              </Button>
            ) : null}
          </Stack__>
          {(() => {
            try {
              return $state.loadingPage;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(projectcss.all, sty.freeBox___1Bk5A, {
                [sty.freeBox_1_chatviow___1Bk5AaYJmT]: hasVariant(
                  $state,
                  "_1",
                  "chatviow"
                ),
                [sty.freeBox_1_docter___1Bk5A8Ddm8]: hasVariant(
                  $state,
                  "_1",
                  "docter"
                ),
                [sty.freeBox_1_docters___1Bk5Apv2Kd]: hasVariant(
                  $state,
                  "_1",
                  "docters"
                )
              })}
            >
              <Icon115Icon
                className={classNames(projectcss.all, sty.svg__qaTs)}
                role={"img"}
              />
            </div>
          ) : null}
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5Elp, {
              [sty.freeBox_1_chatviow___5ElpaYJmT]: hasVariant(
                $state,
                "_1",
                "chatviow"
              ),
              [sty.freeBox_1_docter___5Elp8Ddm8]: hasVariant(
                $state,
                "_1",
                "docter"
              ),
              [sty.freeBox_1_docters___5Elppv2Kd]: hasVariant(
                $state,
                "_1",
                "docters"
              )
            })}
          >
            <PlasmicIcon__
              PlasmicIconType={
                hasVariant($state, "_1", "chatviow")
                  ? ChevronRightIcon
                  : Icon22Icon
              }
              className={classNames(projectcss.all, sty.svg__zyu6K, {
                [sty.svg_1_chatviow__zyu6KaYJmT]: hasVariant(
                  $state,
                  "_1",
                  "chatviow"
                ),
                [sty.svg_1_docter__zyu6K8Ddm8]: hasVariant(
                  $state,
                  "_1",
                  "docter"
                ),
                [sty.svg_1_docters__zyu6Kpv2Kd]: hasVariant(
                  $state,
                  "_1",
                  "docters"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["update1"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "_1",
                        operation: 1,
                        value: "docters"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, undefined);
                        return undefined;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["update1"] != null &&
                  typeof $steps["update1"] === "object" &&
                  typeof $steps["update1"].then === "function"
                ) {
                  $steps["update1"] = await $steps["update1"];
                }
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___5WrPp,
                {
                  [sty.text_1_chatviow___5WrPpaYJmT]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.text_1_docters___5WrPppv2Kd]: hasVariant(
                    $state,
                    "_1",
                    "docters"
                  )
                }
              )}
            >
              {hasVariant($state, "_1", "chatviow")
                ? "\u06af\u0641\u062a\u06af\u0648 \u0647\u0627"
                : "\u067e\u0632\u0634\u06a9\u0627\u0646"}
            </div>
            {(
              hasVariant($state, "_1", "chatviow") &&
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant($state, "_1", "chatviow")
                ? (() => {
                    try {
                      return !$state.loadingPage;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <Search
                data-plasmic-name={"search"}
                data-plasmic-override={overrides.search}
                _1={
                  hasVariant($state, "_1", "chatviow") &&
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "chatviow"
                    : hasVariant($state, "_1", "chatviow")
                    ? "chatviow"
                    : undefined
                }
                antdInput2={(() => {
                  const child$Props = {
                    bordered: false,
                    className: classNames("__wab_instance", sty.antdInput, {
                      [sty.antdInput_1_chatviow]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      )
                    }),
                    id:
                      hasVariant($state, "_1", "chatviow") &&
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "inputMobile"
                        : undefined,
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["antdInput", "value"],
                        Input2_Helpers
                      ).apply(null, eventArgs);

                      (async event => {
                        const $steps = {};

                        $steps["updateFilter"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["filter"]
                                },
                                operation: 0,
                                value: (() => {
                                  return $state.chats.list.filter(
                                    item =>
                                      item.text.includes(
                                        $state.antdInput.value
                                      ) ||
                                      item.subList_name.includes(
                                        $state.antdInput.value
                                      ) ||
                                      item.doctor.name.includes(
                                        $state.antdInput.value
                                      )
                                  );
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFilter"] != null &&
                          typeof $steps["updateFilter"] === "object" &&
                          typeof $steps["updateFilter"].then === "function"
                        ) {
                          $steps["updateFilter"] = await $steps["updateFilter"];
                        }
                      }).apply(null, eventArgs);
                    },
                    value: generateStateValueProp($state, [
                      "antdInput",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "antdInput.value"
                      }
                    ],
                    [],
                    Input2_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <Input2
                      data-plasmic-name={"antdInput"}
                      data-plasmic-override={overrides.antdInput}
                      {...child$Props}
                    />
                  );
                })()}
                className={classNames("__wab_instance", sty.search, {
                  [sty.search_1_chatviow]: hasVariant($state, "_1", "chatviow"),
                  [sty.search_1_docter]: hasVariant($state, "_1", "docter")
                })}
              />
            ) : null}
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "bg",
    "rectangle2",
    "\u0627",
    "\u06272",
    "rectangle",
    "findSuitableSpecia",
    "rectangle3",
    "speciality",
    "card6",
    "iconClinic",
    "speciality2",
    "card9",
    "button3",
    "card10",
    "button8",
    "card11",
    "button4",
    "card16",
    "speciality3",
    "card12",
    "button5",
    "card13",
    "button6",
    "card14",
    "button7",
    "card17",
    "input",
    "mensah",
    "card7",
    "input2",
    "mensah2",
    "seen",
    "lineClomp",
    "doctorsDetails",
    "bg2",
    "about",
    "drBellamyNicholas",
    "workingTime",
    "monSat0830Am",
    "speciality4",
    "lineClomp2",
    "card15",
    "button9",
    "section",
    "button",
    "dialog",
    "shop",
    "dialogTitle",
    "h5",
    "input3",
    "button10",
    "button11",
    "timer",
    "dialog2",
    "shop2",
    "button12",
    "favicon",
    "button2",
    "search",
    "antdInput"
  ],
  bg: ["bg", "rectangle2", "\u0627", "\u06272"],
  rectangle2: ["rectangle2", "\u0627", "\u06272"],
  ا: ["\u0627"],
  ا2: ["\u06272"],
  rectangle: ["rectangle", "findSuitableSpecia", "rectangle3"],
  findSuitableSpecia: ["findSuitableSpecia"],
  rectangle3: ["rectangle3"],
  speciality: ["speciality", "card6", "iconClinic"],
  card6: ["card6", "iconClinic"],
  iconClinic: ["iconClinic"],
  speciality2: [
    "speciality2",
    "card9",
    "button3",
    "card10",
    "button8",
    "card11",
    "button4",
    "card16"
  ],
  card9: ["card9", "button3"],
  button3: ["button3"],
  card10: ["card10", "button8"],
  button8: ["button8"],
  card11: ["card11", "button4"],
  button4: ["button4"],
  card16: ["card16"],
  speciality3: [
    "speciality3",
    "card12",
    "button5",
    "card13",
    "button6",
    "card14",
    "button7",
    "card17"
  ],
  card12: ["card12", "button5"],
  button5: ["button5"],
  card13: ["card13", "button6"],
  button6: ["button6"],
  card14: ["card14", "button7"],
  button7: ["button7"],
  card17: ["card17"],
  input: ["input"],
  mensah: ["mensah"],
  card7: ["card7"],
  input2: ["input2"],
  mensah2: ["mensah2", "seen", "lineClomp"],
  seen: ["seen"],
  lineClomp: ["lineClomp"],
  doctorsDetails: [
    "doctorsDetails",
    "bg2",
    "about",
    "drBellamyNicholas",
    "workingTime",
    "monSat0830Am",
    "speciality4",
    "lineClomp2",
    "card15",
    "button9",
    "section",
    "button",
    "dialog",
    "shop",
    "dialogTitle",
    "h5",
    "input3",
    "button10",
    "button11"
  ],
  bg2: ["bg2"],
  about: ["about", "drBellamyNicholas"],
  drBellamyNicholas: ["drBellamyNicholas"],
  workingTime: ["workingTime", "monSat0830Am"],
  monSat0830Am: ["monSat0830Am"],
  speciality4: ["speciality4", "lineClomp2", "card15", "button9"],
  lineClomp2: ["lineClomp2"],
  card15: ["card15", "button9"],
  button9: ["button9"],
  section: ["section", "button"],
  button: ["button"],
  dialog: [
    "dialog",
    "shop",
    "dialogTitle",
    "h5",
    "input3",
    "button10",
    "button11"
  ],
  shop: ["shop", "dialogTitle", "h5", "input3", "button10", "button11"],
  dialogTitle: ["dialogTitle", "h5"],
  h5: ["h5"],
  input3: ["input3"],
  button10: ["button10"],
  button11: ["button11"],
  timer: ["timer"],
  dialog2: ["dialog2", "shop2", "button12"],
  shop2: ["shop2", "button12"],
  button12: ["button12"],
  favicon: ["favicon"],
  button2: ["button2"],
  search: ["search", "antdInput"],
  antdInput: ["antdInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  bg: "div";
  rectangle2: "div";
  ا: "div";
  ا2: "div";
  rectangle: "div";
  findSuitableSpecia: "div";
  rectangle3: "div";
  speciality: "div";
  card6: "div";
  iconClinic: typeof IconClinic;
  speciality2: "div";
  card9: "div";
  button3: typeof Button;
  card10: "div";
  button8: typeof Button;
  card11: "div";
  button4: typeof Button;
  card16: "div";
  speciality3: "div";
  card12: "div";
  button5: typeof Button;
  card13: "div";
  button6: typeof Button;
  card14: "div";
  button7: typeof Button;
  card17: "div";
  input: typeof Input;
  mensah: "div";
  card7: "div";
  input2: typeof Input;
  mensah2: "div";
  seen: typeof Seen;
  lineClomp: typeof LineClomp;
  doctorsDetails: "div";
  bg2: "div";
  about: "div";
  drBellamyNicholas: "div";
  workingTime: "div";
  monSat0830Am: "div";
  speciality4: "div";
  lineClomp2: typeof LineClomp;
  card15: "div";
  button9: typeof Button;
  section: "section";
  button: typeof Button;
  dialog: typeof Dialog;
  shop: typeof ApiRequest;
  dialogTitle: typeof DialogTitle;
  h5: "h5";
  input3: typeof AntdInput;
  button10: typeof Button;
  button11: typeof Button;
  timer: typeof Timer;
  dialog2: typeof Dialog;
  shop2: typeof ApiRequest;
  button12: typeof Button;
  favicon: typeof Embed;
  button2: typeof Button;
  search: typeof Search;
  antdInput: typeof Input2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicClinic__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicClinic__VariantsArgs;
    args?: PlasmicClinic__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicClinic__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicClinic__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicClinic__ArgProps,
          internalVariantPropNames: PlasmicClinic__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicClinic__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicClinic";
  } else {
    func.displayName = `PlasmicClinic.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicClinic = Object.assign(
  // Top-level PlasmicClinic renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    bg: makeNodeComponent("bg"),
    rectangle2: makeNodeComponent("rectangle2"),
    ا: makeNodeComponent("\u0627"),
    ا2: makeNodeComponent("\u06272"),
    rectangle: makeNodeComponent("rectangle"),
    findSuitableSpecia: makeNodeComponent("findSuitableSpecia"),
    rectangle3: makeNodeComponent("rectangle3"),
    speciality: makeNodeComponent("speciality"),
    card6: makeNodeComponent("card6"),
    iconClinic: makeNodeComponent("iconClinic"),
    speciality2: makeNodeComponent("speciality2"),
    card9: makeNodeComponent("card9"),
    button3: makeNodeComponent("button3"),
    card10: makeNodeComponent("card10"),
    button8: makeNodeComponent("button8"),
    card11: makeNodeComponent("card11"),
    button4: makeNodeComponent("button4"),
    card16: makeNodeComponent("card16"),
    speciality3: makeNodeComponent("speciality3"),
    card12: makeNodeComponent("card12"),
    button5: makeNodeComponent("button5"),
    card13: makeNodeComponent("card13"),
    button6: makeNodeComponent("button6"),
    card14: makeNodeComponent("card14"),
    button7: makeNodeComponent("button7"),
    card17: makeNodeComponent("card17"),
    input: makeNodeComponent("input"),
    mensah: makeNodeComponent("mensah"),
    card7: makeNodeComponent("card7"),
    input2: makeNodeComponent("input2"),
    mensah2: makeNodeComponent("mensah2"),
    seen: makeNodeComponent("seen"),
    lineClomp: makeNodeComponent("lineClomp"),
    doctorsDetails: makeNodeComponent("doctorsDetails"),
    bg2: makeNodeComponent("bg2"),
    about: makeNodeComponent("about"),
    drBellamyNicholas: makeNodeComponent("drBellamyNicholas"),
    workingTime: makeNodeComponent("workingTime"),
    monSat0830Am: makeNodeComponent("monSat0830Am"),
    speciality4: makeNodeComponent("speciality4"),
    lineClomp2: makeNodeComponent("lineClomp2"),
    card15: makeNodeComponent("card15"),
    button9: makeNodeComponent("button9"),
    section: makeNodeComponent("section"),
    button: makeNodeComponent("button"),
    dialog: makeNodeComponent("dialog"),
    shop: makeNodeComponent("shop"),
    dialogTitle: makeNodeComponent("dialogTitle"),
    h5: makeNodeComponent("h5"),
    input3: makeNodeComponent("input3"),
    button10: makeNodeComponent("button10"),
    button11: makeNodeComponent("button11"),
    timer: makeNodeComponent("timer"),
    dialog2: makeNodeComponent("dialog2"),
    shop2: makeNodeComponent("shop2"),
    button12: makeNodeComponent("button12"),
    favicon: makeNodeComponent("favicon"),
    button2: makeNodeComponent("button2"),
    search: makeNodeComponent("search"),
    antdInput: makeNodeComponent("antdInput"),

    // Metadata about props expected for PlasmicClinic
    internalVariantProps: PlasmicClinic__VariantProps,
    internalArgProps: PlasmicClinic__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicClinic;
/* prettier-ignore-end */
