/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 5t5YNzyUHdtX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseSlider } from "@plasmicpkgs/react-aria/skinny/registerSlider";
import Label from "../../Label"; // plasmic-import: msVDJicWRQpz/component
import { BaseSliderOutput } from "@plasmicpkgs/react-aria/skinny/registerSliderOutput";
import { BaseSliderTrack } from "@plasmicpkgs/react-aria/skinny/registerSliderTrack";
import SliderThumb from "../../SliderThumb"; // plasmic-import: pmF7IoE0FUg-/component
import Description from "../../Description"; // plasmic-import: iwAkLYZK9Vrj/component
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import { BackHandler } from "@/components/BackHandler"; // plasmic-import: wpIQCsQJqUoV/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicHistory.module.css"; // plasmic-import: 5t5YNzyUHdtX/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon

createPlasmicElementProxy;

export type PlasmicHistory__VariantMembers = {};
export type PlasmicHistory__VariantsArgs = {};
type VariantPropType = keyof PlasmicHistory__VariantsArgs;
export const PlasmicHistory__VariantProps = new Array<VariantPropType>();

export type PlasmicHistory__ArgsType = {
  userStatus?: any;
  back?: (event: any) => void;
  active?: boolean;
  label?: React.ReactNode;
  thumbs?: React.ReactNode;
  children?: React.ReactNode;
  slot2?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHistory__ArgsType;
export const PlasmicHistory__ArgProps = new Array<ArgPropType>(
  "userStatus",
  "back",
  "active",
  "label",
  "thumbs",
  "children",
  "slot2",
  "slot"
);

export type PlasmicHistory__OverridesType = {
  root?: Flex__<"div">;
  ariaRangeSlider?: Flex__<typeof BaseSlider>;
  label?: Flex__<typeof Label>;
  ariaSliderOutput?: Flex__<typeof BaseSliderOutput>;
  background?: Flex__<"div">;
  ariaSliderTrack?: Flex__<typeof BaseSliderTrack>;
  foreground?: Flex__<"div">;
  description?: Flex__<typeof Description>;
  section?: Flex__<"section">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  svg?: Flex__<"svg">;
  backHandler?: Flex__<typeof BackHandler>;
};

export interface DefaultHistoryProps {
  userStatus?: any;
  back?: (event: any) => void;
  active?: boolean;
  label?: React.ReactNode;
  thumbs?: React.ReactNode;
  children?: React.ReactNode;
  slot2?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHistory__RenderFunc(props: {
  variants: PlasmicHistory__VariantsArgs;
  args: PlasmicHistory__ArgsType;
  overrides: PlasmicHistory__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          userStatus: {
            text: "\ud83d\udd34 Elahe is currently on their period. Day of bleeding.",
            periodStatus: "blood",
            pmsStart: "2025-10-15T00:00:00.000Z",
            pmsEnd: "2025-10-20T00:00:00.000Z",
            periodStart: "2025-09-29T00:00:00.000Z",
            periodEnd: "2025-10-04T00:00:00.000Z",
            fertilityStart: "2025-10-04T00:00:00.000Z",
            fertilityEnd: "2025-10-09T00:00:00.000Z",
            daysToStartPms: 15,
            daysOfFertility: 5,
            cycle: 21,
            length: 5,
            daysToEndPms: 20,
            daysToStartPeriod: -1,
            daysToEndPeriod: 4,
            daysToEndFertility: 9
          },
          active: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "ariaRangeSlider[][].value",
        type: "private",
        variableType: "array"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__jcaHo)}>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return (() => {
                function generatePeriodsGroupedByMonthArray(info, count = 6) {
                  const cycle = info.cycle;
                  const length = info.length;
                  const pmsLength = 5;
                  let start = new Date(info.periodStart);
                  const monthsMap = {};
                  const formatter = new Intl.DateTimeFormat("fa-IR", {
                    timeZone: "Asia/Tehran",
                    month: "long"
                  });
                  for (let i = 0; i < count; i++) {
                    let end = new Date(start);
                    end.setDate(start.getDate() + length - 1);
                    let nextStart = new Date(start);
                    nextStart.setDate(start.getDate() + cycle);
                    let pmsStart = new Date(nextStart);
                    pmsStart.setDate(nextStart.getDate() - pmsLength);
                    let pmsEnd = new Date(nextStart);
                    pmsEnd.setDate(nextStart.getDate() - 1);
                    const periodDays =
                      Math.round((end - start) / (1000 * 60 * 60 * 24)) + 1;
                    const pmsDays =
                      Math.round((pmsEnd - pmsStart) / (1000 * 60 * 60 * 24)) +
                      1;
                    const monthName = formatter.format(start);
                    if (!monthsMap[monthName]) monthsMap[monthName] = [];
                    monthsMap[monthName].push({
                      start: start.toISOString().split("T")[0],
                      end: end.toISOString().split("T")[0],
                      periodDays,
                      pmsStart: pmsStart.toISOString().split("T")[0],
                      pmsEnd: pmsEnd.toISOString().split("T")[0],
                      pmsDays
                    });
                    start = nextStart;
                  }
                  const monthsArray = Object.keys(monthsMap).map(month => ({
                    month,
                    periods: monthsMap[month]
                  }));
                  return monthsArray;
                }
                return generatePeriodsGroupedByMonthArray($props.userStatus);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const moon = __plasmic_item_0;
          const moonIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__b6Q1G)}
              key={moonIndex}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___2LX6W)}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6Or0Y
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return moon.month;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__udBSs)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return moon.periods;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                  const currentItem = __plasmic_item_1;
                  const currentIndex = __plasmic_idx_1;
                  return (() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.ariaRangeSlider
                      ),
                      defaultValue: (() => {
                        try {
                          return [
                            $props.userStatus.cycle,
                            $props.userStatus.cycle - currentItem.periodDays
                          ];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [20, 50];
                          }
                          throw e;
                        }
                      })(),
                      key: currentIndex,
                      maxValue: (() => {
                        try {
                          return $props.userStatus.cycle;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      minValue: 0,
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "ariaRangeSlider",
                          __plasmic_idx_0,
                          __plasmic_idx_1,
                          "value"
                        ]).apply(null, eventArgs);
                      },
                      orientation: "horizontal",
                      value: generateStateValueProp($state, [
                        "ariaRangeSlider",
                        __plasmic_idx_0,
                        __plasmic_idx_1,
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "ariaRangeSlider[][].value"
                        }
                      ],
                      [__plasmic_idx_0, __plasmic_idx_1],
                      undefined ?? {},
                      child$Props
                    );
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "ariaRangeSlider[][].value",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return [
                                  $props.userStatus.cycle,
                                  $props.userStatus.cycle -
                                    currentItem.periodDays
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [20, 50];
                                }
                                throw e;
                              }
                            })()
                        }
                      ],
                      [__plasmic_idx_0, __plasmic_idx_1]
                    );
                    return (
                      <BaseSlider
                        data-plasmic-name={"ariaRangeSlider"}
                        data-plasmic-override={overrides.ariaRangeSlider}
                        {...child$Props}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mvuHw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__noJuT
                            )}
                          >
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return (() => {
                                      try {
                                        function parseISOToUTC(dateStr) {
                                          let [y, m, d] = dateStr
                                            .split("-")
                                            .map(Number);
                                          return new Date(
                                            Date.UTC(y, m - 1, d)
                                          );
                                        }
                                        const formatter =
                                          new Intl.DateTimeFormat("fa-IR", {
                                            timeZone: "Asia/Tehran",
                                            day: "numeric",
                                            month: "long"
                                          });
                                        let start = currentItem.start
                                          ? parseISOToUTC(currentItem.start)
                                          : null;
                                        let end = currentItem.end
                                          ? parseISOToUTC(currentItem.end)
                                          : null;
                                        let startStr = start
                                          ? formatter.format(start)
                                          : "?";
                                        let endStr = end
                                          ? formatter.format(end)
                                          : "?";
                                        const formatDateWithSmallMonth =
                                          date => {
                                            const parts =
                                              new Intl.DateTimeFormat("fa-IR", {
                                                timeZone: "Asia/Tehran",
                                                day: "numeric",
                                                month: "long"
                                              }).formatToParts(date);
                                            return parts
                                              .map(p => {
                                                if (p.type === "month")
                                                  return `<small style="font-size:0.6em">${p.value}</small>`;
                                                return p.value;
                                              })
                                              .join("");
                                          };
                                        return formatDateWithSmallMonth(start);
                                      } catch (e) {}
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          </div>
                          <Label
                            data-plasmic-name={"label"}
                            data-plasmic-override={overrides.label}
                            className={classNames("__wab_instance", sty.label)}
                          >
                            {renderPlasmicSlot({
                              defaultContents: null,
                              value: args.label
                            })}
                          </Label>
                          {$props.showOutputText ? (
                            <BaseSliderOutput
                              data-plasmic-name={"ariaSliderOutput"}
                              data-plasmic-override={overrides.ariaSliderOutput}
                              className={classNames(
                                "__wab_instance",
                                sty.ariaSliderOutput
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__btlKn
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $props.outputText ??
                                        `بیشترین: ${$state.ariaRangeSlider.value[1]}                کمترین : ${$state.ariaRangeSlider.value[0]} `
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </BaseSliderOutput>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___9DVrC
                          )}
                          style={(() => {
                            try {
                              return { direction: "ltr" };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        >
                          <div
                            data-plasmic-name={"background"}
                            data-plasmic-override={overrides.background}
                            className={classNames(
                              projectcss.all,
                              sty.background
                            )}
                          >
                            <BaseSliderTrack
                              data-plasmic-name={"ariaSliderTrack"}
                              data-plasmic-override={overrides.ariaSliderTrack}
                              className={classNames(
                                "__wab_instance",
                                sty.ariaSliderTrack
                              )}
                              progressBar={
                                <div
                                  data-plasmic-name={"foreground"}
                                  data-plasmic-override={overrides.foreground}
                                  className={classNames(
                                    projectcss.all,
                                    sty.foreground
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__bhgoj
                                    )}
                                  >
                                    {renderPlasmicSlot({
                                      defaultContents: (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__hoNjs
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.periodDays;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      ),
                                      value: args.children,
                                      className: classNames(
                                        sty.slotTargetChildren
                                      )
                                    })}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___3Rqoi
                                    )}
                                  >
                                    {renderPlasmicSlot({
                                      defaultContents: (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__eVDuM
                                          )}
                                        >
                                          <div
                                            className={
                                              projectcss.__wab_expr_html_text
                                            }
                                            dangerouslySetInnerHTML={{
                                              __html: (() => {
                                                try {
                                                  return (() => {
                                                    try {
                                                      function parseISOToUTC(
                                                        dateStr
                                                      ) {
                                                        let [y, m, d] = dateStr
                                                          .split("-")
                                                          .map(Number);
                                                        return new Date(
                                                          Date.UTC(y, m - 1, d)
                                                        );
                                                      }
                                                      const formatter =
                                                        new Intl.DateTimeFormat(
                                                          "fa-IR",
                                                          {
                                                            timeZone:
                                                              "Asia/Tehran",
                                                            day: "numeric",
                                                            month: "long"
                                                          }
                                                        );
                                                      let end = currentItem.end
                                                        ? parseISOToUTC(
                                                            currentItem.end
                                                          )
                                                        : null;
                                                      const formatWithTinyMonth =
                                                        date => {
                                                          if (!date) return "?";
                                                          const parts =
                                                            new Intl.DateTimeFormat(
                                                              "fa-IR",
                                                              {
                                                                timeZone:
                                                                  "Asia/Tehran",
                                                                day: "numeric",
                                                                month: "long"
                                                              }
                                                            ).formatToParts(
                                                              date
                                                            );
                                                          return parts
                                                            .map(p =>
                                                              p.type === "month"
                                                                ? `<small style="font-size:0.6em">${p.value}</small>`
                                                                : p.value
                                                            )
                                                            .join("");
                                                        };
                                                      const endStr =
                                                        formatWithTinyMonth(
                                                          end
                                                        );
                                                      return endStr;
                                                    } catch (e) {}
                                                  })();
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            }}
                                          />
                                        </div>
                                      ),
                                      value: args.slot2
                                    })}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___9Cyu
                                    )}
                                  >
                                    {renderPlasmicSlot({
                                      defaultContents: (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__lwqDc
                                          )}
                                        >
                                          <div
                                            className={
                                              projectcss.__wab_expr_html_text
                                            }
                                            dangerouslySetInnerHTML={{
                                              __html: (() => {
                                                try {
                                                  return (() => {
                                                    try {
                                                      function parseISOToUTC(
                                                        dateStr
                                                      ) {
                                                        let [y, m, d] = dateStr
                                                          .split("-")
                                                          .map(Number);
                                                        return new Date(
                                                          Date.UTC(y, m - 1, d)
                                                        );
                                                      }
                                                      const formatter =
                                                        new Intl.DateTimeFormat(
                                                          "fa-IR",
                                                          {
                                                            timeZone:
                                                              "Asia/Tehran",
                                                            day: "numeric",
                                                            month: "long"
                                                          }
                                                        );
                                                      let end =
                                                        currentItem.start
                                                          ? parseISOToUTC(
                                                              currentItem.start
                                                            )
                                                          : null;
                                                      const formatWithTinyMonth =
                                                        date => {
                                                          if (!date) return "?";
                                                          const parts =
                                                            new Intl.DateTimeFormat(
                                                              "fa-IR",
                                                              {
                                                                timeZone:
                                                                  "Asia/Tehran",
                                                                day: "numeric",
                                                                month: "long"
                                                              }
                                                            ).formatToParts(
                                                              date
                                                            );
                                                          return parts
                                                            .map(p =>
                                                              p.type === "month"
                                                                ? `<small style="font-size:0.6em">${p.value}</small>`
                                                                : p.value
                                                            )
                                                            .join("");
                                                        };
                                                      const endStr =
                                                        formatWithTinyMonth(
                                                          end
                                                        );
                                                      return endStr;
                                                    } catch (e) {}
                                                  })();
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            }}
                                          />
                                        </div>
                                      ),
                                      value: args.slot
                                    })}
                                  </div>
                                </div>
                              }
                            >
                              {renderPlasmicSlot({
                                defaultContents: (
                                  <SliderThumb
                                    className={classNames(
                                      "__wab_instance",
                                      sty.sliderThumb__pFejx
                                    )}
                                  />
                                ),

                                value: args.thumbs
                              })}
                            </BaseSliderTrack>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__v5PS
                              )}
                              id={"max"}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.ariaRangeSlider.value[1];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dHga4
                              )}
                              id={"min"}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.ariaRangeSlider.value[0];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                        {$props.showDescription ? (
                          <Description
                            data-plasmic-name={"description"}
                            data-plasmic-override={overrides.description}
                            className={classNames(
                              "__wab_instance",
                              sty.description
                            )}
                          />
                        ) : null}
                      </BaseSlider>
                    );
                  })();
                })}
              </div>
            </div>
          );
        })}
      </div>
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <HeaderLiom
          data-plasmic-name={"headerLiom"}
          data-plasmic-override={overrides.headerLiom}
          className={classNames("__wab_instance", sty.headerLiom)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__zjJik)}>
            <XIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              onClick={args.back}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__c0TCm
              )}
            >
              {
                "\u067e\u06cc\u0634\u200c\u0628\u06cc\u0646\u06cc \u0686\u0631\u062e\u0647"
              }
            </div>
          </div>
        </HeaderLiom>
      </section>
      <BackHandler
        data-plasmic-name={"backHandler"}
        data-plasmic-override={overrides.backHandler}
        active={args.active}
        className={classNames("__wab_instance", sty.backHandler)}
        onBack={async () => {
          const $steps = {};

          $steps["runBack"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["back"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runBack"] != null &&
            typeof $steps["runBack"] === "object" &&
            typeof $steps["runBack"].then === "function"
          ) {
            $steps["runBack"] = await $steps["runBack"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "ariaRangeSlider",
    "label",
    "ariaSliderOutput",
    "background",
    "ariaSliderTrack",
    "foreground",
    "description",
    "section",
    "headerLiom",
    "svg",
    "backHandler"
  ],
  ariaRangeSlider: [
    "ariaRangeSlider",
    "label",
    "ariaSliderOutput",
    "background",
    "ariaSliderTrack",
    "foreground",
    "description"
  ],
  label: ["label"],
  ariaSliderOutput: ["ariaSliderOutput"],
  background: ["background", "ariaSliderTrack", "foreground"],
  ariaSliderTrack: ["ariaSliderTrack", "foreground"],
  foreground: ["foreground"],
  description: ["description"],
  section: ["section", "headerLiom", "svg"],
  headerLiom: ["headerLiom", "svg"],
  svg: ["svg"],
  backHandler: ["backHandler"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  ariaRangeSlider: typeof BaseSlider;
  label: typeof Label;
  ariaSliderOutput: typeof BaseSliderOutput;
  background: "div";
  ariaSliderTrack: typeof BaseSliderTrack;
  foreground: "div";
  description: typeof Description;
  section: "section";
  headerLiom: typeof HeaderLiom;
  svg: "svg";
  backHandler: typeof BackHandler;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHistory__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHistory__VariantsArgs;
    args?: PlasmicHistory__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHistory__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHistory__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHistory__ArgProps,
          internalVariantPropNames: PlasmicHistory__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHistory__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHistory";
  } else {
    func.displayName = `PlasmicHistory.${nodeName}`;
  }
  return func;
}

export const PlasmicHistory = Object.assign(
  // Top-level PlasmicHistory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ariaRangeSlider: makeNodeComponent("ariaRangeSlider"),
    label: makeNodeComponent("label"),
    ariaSliderOutput: makeNodeComponent("ariaSliderOutput"),
    background: makeNodeComponent("background"),
    ariaSliderTrack: makeNodeComponent("ariaSliderTrack"),
    foreground: makeNodeComponent("foreground"),
    description: makeNodeComponent("description"),
    section: makeNodeComponent("section"),
    headerLiom: makeNodeComponent("headerLiom"),
    svg: makeNodeComponent("svg"),
    backHandler: makeNodeComponent("backHandler"),

    // Metadata about props expected for PlasmicHistory
    internalVariantProps: PlasmicHistory__VariantProps,
    internalArgProps: PlasmicHistory__ArgProps
  }
);

export default PlasmicHistory;
/* prettier-ignore-end */
