/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 5t5YNzyUHdtX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RangeSlider from "../../RangeSlider"; // plasmic-import: uJUDE33VkjVO/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicHistory.module.css"; // plasmic-import: 5t5YNzyUHdtX/css

createPlasmicElementProxy;

export type PlasmicHistory__VariantMembers = {};
export type PlasmicHistory__VariantsArgs = {};
type VariantPropType = keyof PlasmicHistory__VariantsArgs;
export const PlasmicHistory__VariantProps = new Array<VariantPropType>();

export type PlasmicHistory__ArgsType = { userStatus?: any };
type ArgPropType = keyof PlasmicHistory__ArgsType;
export const PlasmicHistory__ArgProps = new Array<ArgPropType>("userStatus");

export type PlasmicHistory__OverridesType = {
  root?: Flex__<"div">;
  rangeSlider?: Flex__<typeof RangeSlider>;
};

export interface DefaultHistoryProps {
  userStatus?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHistory__RenderFunc(props: {
  variants: PlasmicHistory__VariantsArgs;
  args: PlasmicHistory__ArgsType;
  overrides: PlasmicHistory__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          userStatus: {
            text: "\ud83d\udd34 Elahe is currently on their period. Day of bleeding.",
            periodStatus: "blood",
            pmsStart: "2025-10-15T00:00:00.000Z",
            pmsEnd: "2025-10-20T00:00:00.000Z",
            periodStart: "2025-09-29T00:00:00.000Z",
            periodEnd: "2025-10-04T00:00:00.000Z",
            fertilityStart: "2025-10-04T00:00:00.000Z",
            fertilityEnd: "2025-10-09T00:00:00.000Z",
            daysToStartPms: 15,
            daysOfFertility: 5,
            cycle: 21,
            length: 5,
            daysToEndPms: 20,
            daysToStartPeriod: -1,
            daysToEndPeriod: 4,
            daysToEndFertility: 9
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "rangeSlider[].value",
        type: "private",
        variableType: "array"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___8Jz8E
        )}
      >
        {
          "\u067e\u06cc\u0634 \u0628\u06cc\u0646\u06cc \u0686\u0631\u062e\u0647 \u0642\u0627\u0639\u062f\u06af\u06cc"
        }
      </div>
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return (() => {
              function generatePeriods(info, count = 6) {
                const result = [];
                const cycle = info.cycle;
                const length = info.length;
                let start = new Date(info.periodStart);
                for (let i = 0; i < count; i++) {
                  let end = new Date(start);
                  end.setDate(start.getDate() + length - 1);
                  result.push({
                    start: start.toISOString().split("T")[0],
                    end: end.toISOString().split("T")[0]
                  });
                  start = new Date(start);
                  start.setDate(start.getDate() + cycle);
                }
                return result;
              }
              return generatePeriods($props.userStatus);
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            className={classNames(projectcss.all, sty.freeBox__b6Q1G)}
            key={currentIndex}
            style={(() => {
              try {
                return {
                  opacity: currentIndex == 0 ? "1" : "0.6"
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <div className={classNames(projectcss.all, sty.freeBox__jolyL)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5OSf3
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        try {
                          function parseISOToUTC(dateStr) {
                            let [y, m, d] = dateStr.split("-").map(Number);
                            return new Date(Date.UTC(y, m - 1, d));
                          }
                          const formatter = new Intl.DateTimeFormat("fa-IR", {
                            timeZone: "Asia/Tehran",
                            day: "numeric",
                            month: "long"
                          });
                          let start = currentItem.start
                            ? parseISOToUTC(currentItem.start)
                            : null;
                          let end = currentItem.end
                            ? parseISOToUTC(currentItem.end)
                            : null;
                          let startStr = start ? formatter.format(start) : "?";
                          let endStr = end ? formatter.format(end) : "?";
                          return `${startStr}   -   ${endStr}`;
                        } catch {}
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__noJuT
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return currentIndex == 0
                        ? `دوره جاری (${$props.userStatus.cycle} روز)`
                        : `(${$props.userStatus.cycle} روز)`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.rangeSlider),
                color: "red",
                disabled: false,
                filled: true,
                initialValue: (() => {
                  try {
                    return [
                      $props.userStatus.cycle - $props.userStatus.length,
                      $props.userStatus.cycle
                    ];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [20, 50];
                    }
                    throw e;
                  }
                })(),
                label: null,
                maxValue: (() => {
                  try {
                    return $props.userStatus.cycle;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "rangeSlider",
                    __plasmic_idx_0,
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                },
                showLabel: false,
                showOutputText: false,
                thumbs: null,
                value: generateStateValueProp($state, [
                  "rangeSlider",
                  __plasmic_idx_0,
                  "value"
                ])
              };

              initializePlasmicStates(
                $state,
                [
                  {
                    name: "rangeSlider[].value",
                    initFunc: ({ $props, $state, $queries }) =>
                      $props["initialValue"]
                  }
                ],
                [__plasmic_idx_0]
              );
              return (
                <RangeSlider
                  data-plasmic-name={"rangeSlider"}
                  data-plasmic-override={overrides.rangeSlider}
                  {...child$Props}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.userStatus.length;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </RangeSlider>
              );
            })()}
            <div className={classNames(projectcss.all, sty.freeBox___2LX6W)} />
          </div>
        );
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "rangeSlider"],
  rangeSlider: ["rangeSlider"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  rangeSlider: typeof RangeSlider;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHistory__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHistory__VariantsArgs;
    args?: PlasmicHistory__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHistory__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHistory__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHistory__ArgProps,
          internalVariantPropNames: PlasmicHistory__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHistory__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHistory";
  } else {
    func.displayName = `PlasmicHistory.${nodeName}`;
  }
  return func;
}

export const PlasmicHistory = Object.assign(
  // Top-level PlasmicHistory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    rangeSlider: makeNodeComponent("rangeSlider"),

    // Metadata about props expected for PlasmicHistory
    internalVariantProps: PlasmicHistory__VariantProps,
    internalArgProps: PlasmicHistory__ArgProps
  }
);

export default PlasmicHistory;
/* prettier-ignore-end */
