// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: u78Ppal5dPeL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import SlideinModal from "../../SlideinModal"; // plasmic-import: Y_p0qKIshDe1/component
import { DatePickers } from "@/components/DatePickers"; // plasmic-import: Pxh5xTWczGDl/codeComponent
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { PullToRefresh } from "@/components/PullToRefresh"; // plasmic-import: nYteXVWDlYDv/codeComponent

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicBioritm.module.css"; // plasmic-import: u78Ppal5dPeL/css

import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: XHEd0iacr6dw/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: 03X0usOEHK8l/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: JYHABEI9HtQe/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: 8DTE5iQ0tvze/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: liLrwe8fcuIp/icon
import Icon24Icon from "./icons/PlasmicIcon__Icon24"; // plasmic-import: 3dtEf5Pd9666/icon

createPlasmicElementProxy;

export type PlasmicBioritm__VariantMembers = {};
export type PlasmicBioritm__VariantsArgs = {};
type VariantPropType = keyof PlasmicBioritm__VariantsArgs;
export const PlasmicBioritm__VariantProps = new Array<VariantPropType>();

export type PlasmicBioritm__ArgsType = {};
type ArgPropType = keyof PlasmicBioritm__ArgsType;
export const PlasmicBioritm__ArgProps = new Array<ArgPropType>();

export type PlasmicBioritm__OverridesType = {
  root?: Flex__<"div">;
  button2?: Flex__<typeof Button>;
  button3?: Flex__<typeof Button>;
  ul?: Flex__<"ul">;
  li?: Flex__<"li">;
  lottie?: Flex__<typeof LottieWrapper>;
  embedHtml?: Flex__<typeof Embed>;
  slideinModal?: Flex__<typeof SlideinModal>;
  slideinModal2?: Flex__<typeof SlideinModal>;
  datePickers2?: Flex__<typeof DatePickers>;
  button5?: Flex__<typeof Button>;
  biorhythm?: Flex__<typeof ApiRequest>;
  slideinModal3?: Flex__<typeof SlideinModal>;
  datePickers?: Flex__<typeof DatePickers>;
  button?: Flex__<typeof Button>;
  button4?: Flex__<typeof Button>;
  pullToRefresh?: Flex__<typeof PullToRefresh>;
  favicon?: Flex__<typeof Embed>;
};

export interface DefaultBioritmProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBioritm__RenderFunc(props: {
  variants: PlasmicBioritm__VariantsArgs;
  args: PlasmicBioritm__ArgsType;
  overrides: PlasmicBioritm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "softSand"
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "slideinModal.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "slideinModal2.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.firstTime;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "slideinModal3.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "datePickers.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "birthday",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (
                  $ctx.query.y == "" ||
                  $ctx.query.m == "" ||
                  $ctx.query.d == ""
                ) {
                  return {
                    day: 7,
                    month: 7,
                    year: 1377
                  };
                } else {
                  let gy = parseInt($ctx.query.y);
                  let gm = parseInt($ctx.query.m);
                  let gd = parseInt($ctx.query.d);
                  let shamsiMonthDays = [
                    31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                  ];

                  let miladiDaysInMonth = [
                    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                  ];

                  let isLeapYear =
                    gy % 4 === 0 && (gy % 100 !== 0 || gy % 400 === 0);
                  if (isLeapYear) {
                    miladiDaysInMonth[1] = 29;
                  }
                  let daysPassedMiladi = gd;
                  for (let i = 0; i < gm - 1; i++) {
                    daysPassedMiladi += miladiDaysInMonth[i];
                  }
                  let shamsiNewYearDay = new Date(gy, 2, 21);
                  let shamsiStartDayInMiladi =
                    (shamsiNewYearDay - new Date(gy, 0, 1)) /
                    (1000 * 60 * 60 * 24);
                  let daysPassedInShamsiYear =
                    daysPassedMiladi - shamsiStartDayInMiladi;
                  if (daysPassedInShamsiYear < 0) {
                    gy--;
                    shamsiNewYearDay = new Date(gy, 2, 21);
                    shamsiStartDayInMiladi =
                      (shamsiNewYearDay - new Date(gy, 0, 1)) /
                      (1000 * 60 * 60 * 24);
                    daysPassedInShamsiYear =
                      daysPassedMiladi + (365 - shamsiStartDayInMiladi);
                    if (isLeapYear) {
                      daysPassedInShamsiYear++;
                    }
                  }
                  let jy = gy - 621;
                  let jm = 0;
                  let jd = daysPassedInShamsiYear;
                  for (let i = 0; i < shamsiMonthDays.length; i++) {
                    if (jd <= shamsiMonthDays[i]) {
                      jm = i + 1;
                      break;
                    } else {
                      jd -= shamsiMonthDays[i];
                    }
                  }
                  return {
                    day: jd,
                    month: jm,
                    year: jy
                  };
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return { day: 7, month: 7, year: 1377 };
              }
              throw e;
            }
          })()
      },
      {
        path: "biorhythm.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "biorhythm.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "biorhythm.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bday",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let jy = $state.birthday.year;
                let jm = $state.birthday.month;
                let jd = $state.birthday.day;
                let gy = jy + 621;
                let shamsiMonthDays = [
                  31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                ];

                let miladiDaysInMonth = [
                  31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                ];

                let isLeapYear =
                  gy % 4 === 0 && (gy % 100 !== 0 || gy % 400 === 0);
                if (isLeapYear) {
                  miladiDaysInMonth[1] = 29;
                }
                let daysPassedShamsi = jd;
                for (let i = 0; i < jm - 1; i++) {
                  daysPassedShamsi += shamsiMonthDays[i];
                }
                let daysInMiladiYear = isLeapYear ? 366 : 365;
                let miladiStartDay = new Date(gy, 2, 21);
                miladiStartDay.setDate(
                  miladiStartDay.getDate() + daysPassedShamsi - 1
                );
                let finalMiladiDay = miladiStartDay.getDate();
                let finalMiladiMonth = miladiStartDay.getMonth() + 1;
                let finalMiladiYear = miladiStartDay.getFullYear();
                return `${finalMiladiYear}-${finalMiladiMonth}-${finalMiladiDay}`;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let t = $ctx.query.t.replace("ksheulxn", "");
                t = t.replace("jvkvkjvj", "");
                return t;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "datePickers2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "firstTime",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.y == "" ||
                $ctx.query.m == "" ||
                $ctx.query.d == ""
                ? true
                : false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__l2VNg)}>
            <div className={classNames(projectcss.all, sty.freeBox__kQaHu)}>
              <p
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.p__f1TwP
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSlideinModalClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["slideinModal", "click"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }
                }}
              >
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "\u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0686\u06cc\u0633\u062a\u061f  > "
                  : "\u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0686\u06cc\u0633\u062a\u061f"}
              </p>
              <div className={classNames(projectcss.all, sty.freeBox__kcgv6)}>
                {(() => {
                  try {
                    return !$state.biorhythm.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__omFzt
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile") ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return (() => {
                                if (!isNaN($state.birthday.year)) {
                                  return (
                                    'این بیوریتم بر اساس تاریخ تولد <b style="color: #8254C6;">' +
                                    $state.birthday.year +
                                    "/" +
                                    $state.birthday.month +
                                    "/" +
                                    $state.birthday.day +
                                    "</b> محاسبه شده است."
                                  );
                                } else {
                                  return "";
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return (() => {
                                if (!isNaN($state.birthday.year)) {
                                  return (
                                    'این بیوریتم بر اساس تاریخ تولد <b style="color: #8254C6;">' +
                                    $state.birthday.year +
                                    "/" +
                                    $state.birthday.month +
                                    "/" +
                                    $state.birthday.day +
                                    "</b> محاسبه شده است."
                                  );
                                } else {
                                  return "";
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "--";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    )}
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobile")
                    ? (() => {
                        try {
                          return $state.biorhythm.loading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return $state.biorhythm.loading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5FrJa
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return "در حال دریافت اطلاعات از سرور ...";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "--";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                ) : null}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__eeRlb)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__mB5CK)}
                  dir={"ltr"}
                >
                  <PlasmicIcon__
                    PlasmicIconType={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? Icon25Icon
                        : Icon25Icon
                    }
                    className={classNames(projectcss.all, sty.svg__vvztf)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__i9991
                    )}
                  >
                    {"\u0641\u06a9\u0631\u06cc"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zd6RW,
                      "negative"
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.biorhythm.data.result.intellectual + "%"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "--";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__euqJ7)}
                  dir={"ltr"}
                >
                  <Icon17Icon
                    className={classNames(projectcss.all, sty.svg__okNfK)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5Kkag
                    )}
                  >
                    {"\u062c\u0633\u0645\u06cc"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n2Lt,
                      "negative"
                    )}
                    dir={"ltr"}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.biorhythm.data.result.physical + "%";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "--";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__vmLw3)}
                  dir={"ltr"}
                >
                  <Icon16Icon
                    className={classNames(projectcss.all, sty.svg___2Mzr0)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6YrHy
                    )}
                  >
                    {"\u0627\u062d\u0633\u0627\u0633\u06cc"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o2VP9,
                      "negative"
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.biorhythm.data.result.emotional + "%";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "--";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zqEyN)}
              >
                <p
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p__wBrRt
                  )}
                >
                  {"\u0645\u06cc\u0627\u0646\u06af\u06cc\u0646"}
                </p>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w30PV,
                    "negative"
                  )}
                  dir={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "rtl"
                      : undefined
                  }
                >
                  {hasVariant(globalVariants, "screen", "mobile") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.biorhythm.data.result.avg + "%";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "--";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.biorhythm.data.result.avg + "%";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "--";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  )}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__q8Qw)}
              >
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  color={generateStateValueProp($state, ["button2", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSlideinModal3Click"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["slideinModal3", "click"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSlideinModal3Click"] != null &&
                      typeof $steps["updateSlideinModal3Click"] === "object" &&
                      typeof $steps["updateSlideinModal3Click"].then ===
                        "function"
                    ) {
                      $steps["updateSlideinModal3Click"] = await $steps[
                        "updateSlideinModal3Click"
                      ];
                    }
                  }}
                  onColorChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["button2", "color"])(
                      eventArgs[0]
                    );
                  }}
                >
                  {
                    "\u062a\u063a\u06cc\u06cc\u0631 \u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"
                  }
                </Button>
                <Button
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames("__wab_instance", sty.button3)}
                  color={generateStateValueProp($state, ["button3", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                if (navigator.share) {
                                  let emothional =
                                    $state.biorhythm.data.result.emotional;
                                  let phisycal =
                                    $state.biorhythm.data.result.physical;
                                  let intellectual =
                                    $state.biorhythm.data.result.intellectual;
                                  let emothionalTxt = "",
                                    phisycalTxt = "",
                                    intellectualTxt = "";
                                  if (emothional < 0) {
                                    emothionalTxt = `امروز از نظر روحی خیلی پایین هستی. سطح شما: ${emothional}`;
                                  } else if (emothional < 50) {
                                    emothionalTxt = `امروز از نظر روحی نسبتا متعادل هستی اما لطفا باز هم هوای خودت رو داشته باش. سطح شما: ${emothional}`;
                                  } else if (emothional < 70) {
                                    emothionalTxt = `امروز از نظر روحی در وضعیت خوبی به سر میبری و همه چیز خوبه. سطح شما: ${emothional}`;
                                  } else if (emothional > 70) {
                                    emothionalTxt = `امروز از نظر روحی فوق العاده ای. سطح شما: ${emothional}`;
                                  }
                                  if (phisycal < 0) {
                                    phisycalTxt = `امروز از نظر فیزیکی خیلی کم انرژی و خسته ای به خودت سخت نگیر. سطح شما: ${phisycal}`;
                                  } else if (phisycal < 50) {
                                    phisycalTxt = `امروز از نظر فیزیکی سرحالی. سطح شما: ${phisycal}`;
                                  } else if (phisycal < 70) {
                                    phisycalTxt = `امروز روز خوبی برای انجام فعالیت های فیزیکی هست ازشون غافل نشو. سطح شما: ${phisycal}`;
                                  } else if (phisycal > 70) {
                                    phisycalTxt = `امروز از نظر فیزیکی در بهترین وضعیت خودت هستی. سطح شما: ${phisycal}`;
                                  }
                                  if (intellectual < 0) {
                                    intellectualTxt = `امروز از نظر فکری خیلی کم تمرکز به نظر میای. سطح شما: ${intellectual}`;
                                  } else if (intellectual < 50) {
                                    intellectualTxt = `امروز از نظر آمادگی ذهنی در وضعیت تقریبا خوبی به سر میبری. سطح شما: ${intellectual}`;
                                  } else if (intellectual < 70) {
                                    intellectualTxt = `امروز از نظر فکری عالی هستی وقتشه کارایی که نیاز به تمرکز دارن رو بذاری تو اولویت. سطح شما: ${intellectual}`;
                                  } else if (intellectual > 70) {
                                    intellectualTxt = `امروز از نظر ذهنی بهترین خودت هستی٬ بهترین موقع برای انجام کارای سخته!. سطح شما: ${intellectual}`;
                                  }
                                  let biorythmText = `وضعیت بیوریتم:\n${emothionalTxt}\n${phisycalTxt}\n${intellectualTxt}`;
                                  return navigator.share({
                                    title: "لیوم",
                                    text:
                                      "لیوم \n" +
                                      biorythmText +
                                      "\n برای دانلود رایگان لیوم و بررسی بیوریتم خود به لینک زیر مراجعه کنید :\n",
                                    url: "https://liom.app/link/man"
                                  });
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onColorChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["button3", "color"])(
                      eventArgs[0]
                    );
                  }}
                >
                  {
                    "\u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc"
                  }
                </Button>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__dx6At)}>
              <div className={classNames(projectcss.all, sty.freeBox__eoCeA)}>
                <p
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p__tEhpz
                  )}
                >
                  {
                    "\u062a\u0648\u0635\u06cc\u0647 \u0647\u0627\u06cc \u0645\u0631\u062a\u0628\u0637 \u0628\u0627 \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0627\u0645\u0631\u0648\u0632:"
                  }
                </p>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___4Cio4)}>
                {(() => {
                  try {
                    return !$state.biorhythm.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"ul"}
                    data-plasmic-name={"ul"}
                    data-plasmic-override={overrides.ul}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.ul,
                      sty.ul
                    )}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.biorhythm.data.result.advice
                            .split("\n")
                            .filter(item => item.trim() !== "")
                            .map(item => item.replace(/^- /, ""));
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <li
                          data-plasmic-name={"li"}
                          data-plasmic-override={overrides.li}
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li
                          )}
                          key={currentIndex}
                        >
                          {hasVariant(globalVariants, "screen", "mobile") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0627\u0645\u0631\u0648\u0632 \u062e\u0644\u0627\u0642\u06cc";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "--";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </li>
                      );
                    })}
                  </Stack__>
                ) : null}
                {(() => {
                  try {
                    return $state.biorhythm.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <LottieWrapper
                    data-plasmic-name={"lottie"}
                    data-plasmic-override={overrides.lottie}
                    animationData={{
                      v: "5.6.10",
                      fr: 30,
                      ip: 30,
                      op: 210,
                      w: 800,
                      h: 600,
                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0088\u00c3\u0082\u00c2\u0090 1",
                      ddd: 0,
                      assets: [
                        {
                          id: "comp_0",
                          layers: [
                            {
                              ddd: 0,
                              ind: 1,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 18",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 340, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 0,
                                            s: [0]
                                          },
                                          { t: 30, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 0,
                              op: 121,
                              st: 0,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 2,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 17",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 320, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 10,
                                            s: [0]
                                          },
                                          { t: 40, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 0,
                              op: 121,
                              st: 10,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 3,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 16",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 300, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 20,
                                            s: [0]
                                          },
                                          { t: 50, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 0,
                              op: 121,
                              st: 20,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 4,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 15",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 280, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 30,
                                            s: [0]
                                          },
                                          { t: 60, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 0,
                              op: 121,
                              st: 30,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 5,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 14",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 260, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 40,
                                            s: [0]
                                          },
                                          { t: 70, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 0,
                              op: 121,
                              st: 40,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 6,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 13",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 240, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 50,
                                            s: [0]
                                          },
                                          { t: 80, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 0,
                              op: 121,
                              st: 50,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 7,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 12",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 220, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 60,
                                            s: [0]
                                          },
                                          { t: 90, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 0,
                              op: 181,
                              st: 60,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 8,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 11",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 200, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 70,
                                            s: [0]
                                          },
                                          { t: 100, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 0,
                              op: 181,
                              st: 70,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 9,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 10",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 180, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 80,
                                            s: [0]
                                          },
                                          { t: 110, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 0,
                              op: 181,
                              st: 80,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 10,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 9",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 160, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 90,
                                            s: [0]
                                          },
                                          { t: 120, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 0,
                              op: 181,
                              st: 90,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 11,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 8",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 140, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 100,
                                            s: [0]
                                          },
                                          { t: 130, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 0,
                              op: 181,
                              st: 100,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 12,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 7",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 120, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 110,
                                            s: [0]
                                          },
                                          { t: 140, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 0,
                              op: 181,
                              st: 110,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 13,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 6",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 100, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 120,
                                            s: [0]
                                          },
                                          { t: 150, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 78,
                              op: 420,
                              st: 120,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 14,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 5",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 80, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 130,
                                            s: [0]
                                          },
                                          { t: 160, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 78,
                              op: 430,
                              st: 130,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 15,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 4",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 60, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 140,
                                            s: [0]
                                          },
                                          { t: 170, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 78,
                              op: 440,
                              st: 140,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 16,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 3",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 40, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 150,
                                            s: [0]
                                          },
                                          { t: 180, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 78,
                              op: 450,
                              st: 150,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 17,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 2",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 20, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 160,
                                            s: [0]
                                          },
                                          { t: 190, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 78,
                              op: 460,
                              st: 160,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 18,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 1",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 0, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 170,
                                            s: [0]
                                          },
                                          { t: 200, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 78,
                              op: 470,
                              st: 170,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 19,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 24",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 340, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 180,
                                            s: [0]
                                          },
                                          { t: 210, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 180,
                              op: 301,
                              st: 180,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 20,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 23",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 320, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 190,
                                            s: [0]
                                          },
                                          { t: 220, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 180,
                              op: 301,
                              st: 190,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 21,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 22",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 300, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 200,
                                            s: [0]
                                          },
                                          { t: 230, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 180,
                              op: 301,
                              st: 200,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 22,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 21",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 280, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 210,
                                            s: [0]
                                          },
                                          { t: 240, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 180,
                              op: 301,
                              st: 210,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 23,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 20",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 260, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 220,
                                            s: [0]
                                          },
                                          { t: 250, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 180,
                              op: 301,
                              st: 220,
                              bm: 0
                            },
                            {
                              ddd: 0,
                              ind: 24,
                              ty: 4,
                              nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 19",
                              sr: 1,
                              ks: {
                                o: { a: 0, k: 100, ix: 11 },
                                r: { a: 0, k: 240, ix: 10 },
                                p: { a: 0, k: [400, 300, 0], ix: 2 },
                                a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                                s: { a: 0, k: [100, 100, 100], ix: 6 }
                              },
                              ao: 0,
                              shapes: [
                                {
                                  ty: "gr",
                                  it: [
                                    {
                                      d: 1,
                                      ty: "el",
                                      s: { a: 0, k: [200, 200], ix: 2 },
                                      p: { a: 0, k: [0, 0], ix: 3 },
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Shape - Ellipse",
                                      hd: false
                                    },
                                    {
                                      ty: "tm",
                                      s: { a: 0, k: 0, ix: 1 },
                                      e: { a: 0, k: 5, ix: 2 },
                                      o: {
                                        a: 1,
                                        k: [
                                          {
                                            i: { x: [0.667], y: [1] },
                                            o: { x: [0.333], y: [0] },
                                            t: 230,
                                            s: [0]
                                          },
                                          { t: 260, s: [120] }
                                        ],
                                        ix: 3
                                      },
                                      m: 1,
                                      ix: 2,
                                      nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                      mn: "ADBE Vector Filter - Trim",
                                      hd: false
                                    },
                                    {
                                      ty: "st",
                                      c: {
                                        a: 0,
                                        k: [0.5098, 0.3294, 0.7765, 1],
                                        ix: 3
                                      },
                                      o: { a: 0, k: 100, ix: 4 },
                                      w: { a: 0, k: 40, ix: 5 },
                                      lc: 2,
                                      lj: 1,
                                      ml: 4,
                                      bm: 0,
                                      nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                      mn: "ADBE Vector Graphic - Stroke",
                                      hd: false
                                    },
                                    {
                                      ty: "tr",
                                      p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                      a: { a: 0, k: [0, 0], ix: 1 },
                                      s: { a: 0, k: [100, 100], ix: 3 },
                                      r: { a: 0, k: 0, ix: 6 },
                                      o: { a: 0, k: 100, ix: 7 },
                                      sk: { a: 0, k: 0, ix: 4 },
                                      sa: { a: 0, k: 0, ix: 5 },
                                      nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                    }
                                  ],
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                  np: 4,
                                  cix: 2,
                                  bm: 0,
                                  ix: 1,
                                  mn: "ADBE Vector Group",
                                  hd: false
                                }
                              ],
                              ip: 180,
                              op: 301,
                              st: 230,
                              bm: 0
                            }
                          ]
                        }
                      ],
                      layers: [
                        {
                          ddd: 0,
                          ind: 1,
                          ty: 0,
                          nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u0084\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0088\u00c3\u0082\u00c2\u0090 1",
                          refId: "comp_0",
                          sr: 1,
                          ks: {
                            o: { a: 0, k: 100, ix: 11 },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [400, 300, 0], ix: 2 },
                            a: { a: 0, k: [400, 300, 0], ix: 1 },
                            s: { a: 0, k: [100, 100, 100], ix: 6 }
                          },
                          ao: 0,
                          ef: [
                            {
                              ty: 5,
                              nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00ae\u00c3\u0082\u00c2\u0080\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u0095\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00a5\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0085\u00c3\u0082\u00c2\u00b7",
                              np: 4,
                              mn: "ADBE Simple Choker",
                              ix: 1,
                              en: 1,
                              ef: [
                                {
                                  ty: 7,
                                  nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be",
                                  mn: "ADBE Simple Choker-0001",
                                  ix: 1,
                                  v: { a: 0, k: 1, ix: 1 }
                                },
                                {
                                  ty: 0,
                                  nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0081\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a9",
                                  mn: "ADBE Simple Choker-0002",
                                  ix: 2,
                                  v: { a: 0, k: 14, ix: 2 }
                                }
                              ]
                            },
                            {
                              ty: 5,
                              nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00ba\u00c3\u0082\u00c2\u00a6\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098",
                              np: 10,
                              mn: "ADBE Ramp",
                              ix: 2,
                              en: 1,
                              ef: [
                                {
                                  ty: 3,
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                  mn: "ADBE Ramp-0001",
                                  ix: 1,
                                  v: { a: 0, k: [400, 0], ix: 1 }
                                },
                                {
                                  ty: 2,
                                  nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                  mn: "ADBE Ramp-0002",
                                  ix: 2,
                                  v: { a: 0, k: [0.556, 0.26, 1, 1], ix: 2 }
                                },
                                {
                                  ty: 3,
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                  mn: "ADBE Ramp-0003",
                                  ix: 3,
                                  v: { a: 0, k: [400, 600], ix: 3 }
                                },
                                {
                                  ty: 2,
                                  nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0093\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u009d\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                  mn: "ADBE Ramp-0004",
                                  ix: 4,
                                  v: { a: 0, k: [0.616, 0.36, 1, 1], ix: 4 }
                                },
                                {
                                  ty: 7,
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6",
                                  mn: "ADBE Ramp-0005",
                                  ix: 5,
                                  v: { a: 0, k: 1, ix: 5 }
                                },
                                {
                                  ty: 0,
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0095\u00c3\u0082\u00c2\u00a3\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b0\u00c3\u0082\u00c2\u0084",
                                  mn: "ADBE Ramp-0006",
                                  ix: 6,
                                  v: { a: 0, k: 0, ix: 6 }
                                },
                                {
                                  ty: 0,
                                  nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u008e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008e\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0083\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088",
                                  mn: "ADBE Ramp-0007",
                                  ix: 7,
                                  v: { a: 0, k: 0, ix: 7 }
                                },
                                {
                                  ty: 6,
                                  nm: "",
                                  mn: "ADBE Ramp-0008",
                                  ix: 8,
                                  v: 0
                                }
                              ]
                            }
                          ],
                          w: 800,
                          h: 600,
                          ip: 0,
                          op: 300,
                          st: 0,
                          bm: 0
                        },
                        {
                          ddd: 0,
                          ind: 2,
                          ty: 0,
                          nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u0084\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0088\u00c3\u0082\u00c2\u0090 1",
                          refId: "comp_0",
                          sr: 1,
                          ks: {
                            o: { a: 0, k: 56, ix: 11 },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [400, 320, 0], ix: 2 },
                            a: { a: 0, k: [400, 300, 0], ix: 1 },
                            s: { a: 0, k: [100, 100, 100], ix: 6 }
                          },
                          ao: 0,
                          ef: [
                            {
                              ty: 5,
                              nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00ae\u00c3\u0082\u00c2\u0080\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u0095\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00a5\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0085\u00c3\u0082\u00c2\u00b7",
                              np: 4,
                              mn: "ADBE Simple Choker",
                              ix: 1,
                              en: 1,
                              ef: [
                                {
                                  ty: 7,
                                  nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be",
                                  mn: "ADBE Simple Choker-0001",
                                  ix: 1,
                                  v: { a: 0, k: 1, ix: 1 }
                                },
                                {
                                  ty: 0,
                                  nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0081\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a9",
                                  mn: "ADBE Simple Choker-0002",
                                  ix: 2,
                                  v: { a: 0, k: 14, ix: 2 }
                                }
                              ]
                            },
                            {
                              ty: 5,
                              nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00ba\u00c3\u0082\u00c2\u00a6\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098",
                              np: 10,
                              mn: "ADBE Ramp",
                              ix: 2,
                              en: 1,
                              ef: [
                                {
                                  ty: 3,
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                  mn: "ADBE Ramp-0001",
                                  ix: 1,
                                  v: { a: 0, k: [400, 0], ix: 1 }
                                },
                                {
                                  ty: 2,
                                  nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                  mn: "ADBE Ramp-0002",
                                  ix: 2,
                                  v: { a: 0, k: [0.556, 0.26, 1, 1], ix: 2 }
                                },
                                {
                                  ty: 3,
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                  mn: "ADBE Ramp-0003",
                                  ix: 3,
                                  v: { a: 0, k: [400, 600], ix: 3 }
                                },
                                {
                                  ty: 2,
                                  nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0093\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u009d\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                  mn: "ADBE Ramp-0004",
                                  ix: 4,
                                  v: { a: 0, k: [0.616, 0.36, 1, 1], ix: 4 }
                                },
                                {
                                  ty: 7,
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6",
                                  mn: "ADBE Ramp-0005",
                                  ix: 5,
                                  v: { a: 0, k: 1, ix: 5 }
                                },
                                {
                                  ty: 0,
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0095\u00c3\u0082\u00c2\u00a3\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b0\u00c3\u0082\u00c2\u0084",
                                  mn: "ADBE Ramp-0006",
                                  ix: 6,
                                  v: { a: 0, k: 0, ix: 6 }
                                },
                                {
                                  ty: 0,
                                  nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u008e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008e\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0083\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088",
                                  mn: "ADBE Ramp-0007",
                                  ix: 7,
                                  v: { a: 0, k: 0, ix: 7 }
                                },
                                {
                                  ty: 6,
                                  nm: "",
                                  mn: "ADBE Ramp-0008",
                                  ix: 8,
                                  v: 0
                                }
                              ]
                            },
                            {
                              ty: 29,
                              nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00ab\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0096\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a8\u00c3\u0082\u00c2\u00a1\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b3\u00c3\u0082\u00c2\u008a",
                              np: 5,
                              mn: "ADBE Gaussian Blur 2",
                              ix: 3,
                              en: 1,
                              ef: [
                                {
                                  ty: 0,
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a8\u00c3\u0082\u00c2\u00a1\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b3\u00c3\u0082\u00c2\u008a\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00ba\u00c3\u0082\u00c2\u00a6",
                                  mn: "ADBE Gaussian Blur 2-0001",
                                  ix: 1,
                                  v: { a: 0, k: 41.3, ix: 1 }
                                },
                                {
                                  ty: 7,
                                  nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a8\u00c3\u0082\u00c2\u00a1\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b3\u00c3\u0082\u00c2\u008a\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0096\u00c3\u0082\u00c2\u00b9\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0091",
                                  mn: "ADBE Gaussian Blur 2-0002",
                                  ix: 2,
                                  v: { a: 0, k: 1, ix: 2 }
                                },
                                {
                                  ty: 7,
                                  nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0087\u00c3\u0082\u00c2\u008d\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u008d\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bc\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0083\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b4\u00c3\u0082\u00c2\u00a0",
                                  mn: "ADBE Gaussian Blur 2-0003",
                                  ix: 3,
                                  v: { a: 0, k: 0, ix: 3 }
                                }
                              ]
                            }
                          ],
                          w: 800,
                          h: 600,
                          ip: 0,
                          op: 300,
                          st: 0,
                          bm: 0
                        }
                      ],
                      markers: []
                    }}
                    autoplay={true}
                    className={classNames("__wab_instance", sty.lottie)}
                    loop={true}
                    preview={false}
                  />
                ) : null}
              </div>
            </div>
            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml)}
              code={
                "    <script>\r\n        // \u0627\u0641\u0632\u0648\u062f\u0646 \u062a\u0627\u0628\u0639 \u0628\u0647 String.prototype\r\n        String.prototype.EntoFa = function() {\r\n            return this.replace(/\\d/g, d => '\u06f0\u06f1\u06f2\u06f3\u06f4\u06f5\u06f6\u06f7\u06f8\u06f9'[d]);\r\n        }\r\n        // \u062a\u0627\u0628\u0639 \u0628\u0631\u0627\u06cc \u062a\u0628\u062f\u06cc\u0644 \u0627\u0639\u062f\u0627\u062f \u062f\u0631 \u062a\u0645\u0627\u0645\u06cc \u0645\u062a\u0646\u200c\u0647\u0627\u06cc \u0635\u0641\u062d\u0647\r\n        function convertNumbersInPage() {\r\n                        console.log(\"hiiii\");\r\n\r\n            const elements = document.querySelectorAll('body *:not(script):not(style)');\r\n            elements.forEach(element => {\r\n                element.childNodes.forEach(node => {\r\n                    if (node.nodeType === Node.TEXT_NODE) {\r\n                        node.nodeValue = node.nodeValue.EntoFa();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n    setTimeout(convertNumbersInPage, 1000);\r\n    </script>"
              }
            />

            <SlideinModal
              data-plasmic-name={"slideinModal"}
              data-plasmic-override={overrides.slideinModal}
              className={classNames("__wab_instance", sty.slideinModal)}
              click={generateStateValueProp($state, ["slideinModal", "click"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateSlideinModalClick"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["slideinModal", "click"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSlideinModalClick"] != null &&
                  typeof $steps["updateSlideinModalClick"] === "object" &&
                  typeof $steps["updateSlideinModalClick"].then === "function"
                ) {
                  $steps["updateSlideinModalClick"] = await $steps[
                    "updateSlideinModalClick"
                  ];
                }
              }}
              onClickChange={generateStateOnChangeProp($state, [
                "slideinModal",
                "click"
              ])}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qqw6C)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vdlfo
                  )}
                >
                  {"\u0628\u06cc\u0648\u0631\u06cc\u062a\u0645"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pvJpc
                  )}
                >
                  {
                    "\u0634\u062f\u0647 \u06af\u0627\u0647\u06cc \u0627\u0648\u0642\u0627\u062a \u0628\u0627 \u062e\u0648\u062f\u062a \u0628\u06af\u06cc \u0627\u0644\u0627\u0646 \u00bb \u062d\u0648\u0635\u0644\u0647 \u0647\u06cc\u0686 \u06a9\u0627\u0631\u06cc \u0631\u0648 \u0646\u062f\u0627\u0631\u0645 \u061b \u06cc\u0627 \u0627\u0645\u0631\u0648\u0632 \u0631\u0648\u06cc \u0645\u0646 \u0646\u06cc\u0633\u062a . \u00bb \u0627\u06cc\u0646\u0637\u0648\u0631 \u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0631\u0633\u0647 \u06a9\u0647 \u062f\u0631 \u0628\u0639\u0636\u06cc \u0634\u0631\u0627\u06cc\u0637 \u060c \u0642\u062f\u0631\u062a \u062c\u0633\u0645\u06cc \u0630\u0647\u0646\u06cc \u0648 \u0627\u062d\u0633\u0627\u0633\u06cc \u060c \u0645\u0627 \u0628\u0627 \u0647\u0645 . \u0647\u0645\u0627\u0647\u0646\u06af \u0646\u06cc\u0633\u062a\u0646 \u06a9\u0647 \u0647\u0645\u0647 \u0627\u06cc\u0646\u0647\u0627 \u0628\u0647 \u0633\u06cc\u06a9\u0644\u0647\u0627\u06cc \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0628\u0631\u0645\u06cc\u06af\u0631\u062f\u0647.\n\u062f\u0631 \u0648\u0627\u0642\u0639 \u0628\u064a\u0648\u0631\u064a\u062a\u0645 \u0646\u0628\u0636 \u062d\u064a\u0627\u062a \u06cc\u0627 \u0632\u06cc\u0633\u062a \u060c \u0622\u0647\u0646\u06af \u0639\u0644\u0645 \u0648 \u062f\u0627\u0646\u0634\u06cc \u0627\u0633\u062a \u06a9\u0647 \u0628\u0647 \u0648\u0627\u0633\u0637\u0647 \u0627\u0648\u0646 \u0631\u06cc\u062a\u0645\u0647\u0627\u06cc \u0628\u062f\u0646 \u0627\u0646\u0633\u0627\u0646 \u0634\u0646\u0627\u062e\u062a\u0647 \u0645\u06cc\u0634\u0647 \u0628\u0631\u0627\u0633\u0627\u0633 \u0646\u0638\u0631\u064a\u0647 \u0628\u064a\u0648\u0631\u064a\u062a\u0645 \u0633\u0637\u0648\u062d \u0645\u062e\u062a\u0644\u0641\u06cc \u0627\u0632 \u0627\u0646\u0631\u0698\u06cc \u0627\u0632 \u0647\u0645\u0627\u0646 \u0627\u0628\u062a\u062f\u0627\u06cc \u062a\u0648\u0644\u062f \u062f\u0631 \u0627\u0646\u0633\u0627\u0646 \u0648\u062c\u0648\u062f \u062f\u0627\u0631\u0647 \u062f\u0631 \u0648\u0627\u0642\u0639 \u0634\u0631\u0648\u0639 \u0648 \u067e\u0627\u06cc\u0627\u0646 \u0647\u0631 \u0686\u0631\u062e\u0647 \u0628\u0631 \u0627\u0633\u0627\u0633 \u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f \u0641\u0631\u062f \u062a\u0639\u06cc\u06cc\u0646 \u0645\u06cc\u0634\u0647 \u0627\u06cc\u0646 \u0627\u0646\u0631\u0698\u06cc \u062f\u0631 \u06cc\u06a9 \u0628\u0627\u0632\u0647 \u0632\u0645\u0627\u0646\u06cc \u0645\u0634\u062e\u0635 \u06a9\u0645 \u0648 \u0632\u06cc\u0627\u062f \u0645\u06cc\u0634\u0647 \u0648 \u0631\u0648\u06cc \u0631\u0641\u062a\u0627\u0631 \u0648 \u062d\u0627\u0644\u0627\u062a \u0627\u0646\u0633\u0627\u0646 \u062a\u0623\u062b\u06cc\u0631 \u0645\u06cc\u0630\u0627\u0631\u0647. \n\n1- \u0686\u0631\u062e\u0647 \u0641\u06cc\u0632\u06cc\u06a9\u06cc ( Physical ) \n\u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u0647\u0631 \u06f2\u06f3 \u0631\u0648\u0632 \u06cc\u06a9\u0628\u0627\u0631 \u0627\u062a\u0641\u0627\u0642 \u0645\u06cc\u0627\u0641\u062a\u062f \u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u062f\u0631 \u0627\u0648\u062c \u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u0642\u0631\u0627\u0631 \u062f\u0627\u0631\u06cc\u062f \u0628\u06cc\u0634 \u0627\u0632 \u0647\u0631 \u0632\u0645\u0627\u0646 \u062f\u06cc\u06af\u0631\u06cc \u0627\u0639\u062a\u0645\u0627\u062f \u0628\u0647 \u0646\u0641\u0633 \u060c \u0627\u0646\u0631\u0698\u06cc \u0648 ... \u062f\u0627\u0631\u06cc\u062f . \u0627\u06cc\u0646 \u062f\u0631 \u062d\u0627\u0644\u06cc \u0627\u0633\u062a \u06a9\u0647 \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0628\u062d\u0631\u0627\u0646\u06cc \u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u0628\u06cc\u0634\u062a\u0631 \u062a\u062d\u062a \u062a\u0623\u062b\u06cc\u0631 \u0628\u06cc\u0645\u0627\u0631\u06cc \u0647\u0627 \u0642\u0631\u0627\u0631 \u0645\u06cc \u06af\u06cc\u0631\u06cc\u062f . \n\u0639\u062f\u062f \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0686\u0631\u062e\u0647 \u0641\u06cc\u0632\u06cc\u06a9\u06cc\u060c \u0627\u0632 \u0645\u0646\u0641\u06cc 100 \u062a\u0627 \u0645\u062b\u0628\u062a 100 \u0627\u0633\u062a \u06a9\u0647 \u0647\u0631 \u0686\u0642\u062f\u0631 \u0627\u06cc\u0646 \u0639\u062f\u062f \u0628\u0647 \u0645\u062b\u0628\u062a 100 \u0646\u0632\u062f\u06cc\u06a9 \u062a\u0631 \u0628\u0627\u0634\u0647 \u0648\u0636\u0639\u06cc\u062a\u062a \u0628\u0647\u062a\u0631\u06cc \u062f\u0627\u0631\u06cc\u062f .\n\n\u06f2- \u0686\u0631\u062e\u0647 \u0627\u062d\u0633\u0627\u0633\u06cc ( Emotional ) \n\u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u06f2\u06f8 \u0631\u0648\u0632\u0647 \u0627\u0633\u062a \u0648\u0642\u062a\u06cc \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0627\u0648\u062c \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0642\u0631\u0627\u0631 \u062f\u0627\u0631\u06cc\u062f \u0627\u062d\u0633\u0627\u0633 \u0645\u06cc\u06a9\u0646\u06cc\u062f \u0628\u06cc\u0634 \u0627\u0632 \u0647\u0631 \u0632\u0645\u0627\u0646 \u062f\u06cc\u06af\u0631 \u0634\u0627\u062f \u0648 \u0628\u0627\u0637\u0631\u0627\u0648\u062a \u0647\u0633\u062a\u06cc\u062f . \u062f\u0631 \u0645\u0642\u0627\u0628\u0644 \u0622\u0646 \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0628\u062d\u0631\u0627\u0646\u06cc \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u062a\u062d\u0631\u06cc\u06a9 \u067e\u0630\u06cc\u0631\u06cc \u0628\u0627\u0644\u0627\u06cc\u06cc \u062f\u0627\u0631\u06cc\u062f \u061b \u0627\u062d\u062a\u0645\u0627\u0644\u0627 \u0647\u0645\u0627\u0646 \u0631\u0648\u0632\u0647\u0627\u06cc\u06cc \u0627\u0633\u062a \u06a9\u0647 \u0645\u062b\u0644\u0627 \u0645\u06cc\u06af\u0648\u06cc\u06cc\u062f \u062d\u0648\u0635\u0644\u0647 \u0646\u062f\u0627\u0631\u0645 \u0648\u0644\u0645 \u06a9\u0646\u06cc\u062f \n\u0639\u062f\u062f \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0686\u0631\u062e\u0647 \u0627\u062d\u0633\u0627\u0633\u06cc\u060c \u0627\u0632 \u0645\u0646\u0641\u06cc 100 \u062a\u0627 \u0645\u062b\u0628\u062a 100 \u0647\u0633\u062a\u0634 \u06a9\u0647 \u0647\u0631\u0686\u0642\u062f\u0631 \u0627\u06cc\u0646 \u0639\u062f\u062f \u0628\u0647 \u0645\u062b\u0628\u062a 100 \u0646\u0632\u062f\u06cc\u06a9 \u062a\u0631 \u0628\u0627\u0634\u0647 \u0648\u0636\u0639\u06cc\u062a\u062a \u0631\u0648\u062d\u06cc \u0628\u0647\u062a\u0631\u06cc \u062f\u0627\u0631\u06cc\u062f .\n \n\u06f3- \u0686\u0631\u062e\u0647 \u0630\u0647\u0646\u06cc ( Intellectual ) \n\u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u0631\u0627 \u0647\u0631 \u0663\u0663 \u0631\u0648\u0632 \u06cc\u06a9\u0628\u0627\u0631 \u062a\u062c\u0631\u0628\u0647 \u0645\u06cc.\u06a9\u0646\u06cc\u062f \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0627\u0648\u062c \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0642\u062f\u0631\u062a \u062a\u0635\u0645\u06cc\u0645 \u06af\u06cc\u0631\u06cc \u062e\u0648\u0628\u06cc \u062f\u0627\u0631\u06cc\u062f \u0648 \u0628\u0647 \u0631\u0627\u062d\u062a\u06cc \u0645\u06cc \u062a\u0648\u0627\u0646\u06cc\u062f \u0645\u0633\u0627\u0626\u0644 \u0648 \u0645\u0634\u06a9\u0644\u0627\u062a \u0631\u0627 \u062d\u0644 \u0648 \u0645\u062f\u06cc\u0631\u06cc\u062a .\u06a9\u0646\u06cc\u062f \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0627\u0641\u0648\u0644 \u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u062a\u0645\u0631\u06a9\u0632 \u0628\u0633\u06cc\u0627\u0631 \u06a9\u0645\u06cc \u062f\u0627\u0631\u06cc\u062f \u0648 \u062d\u062a\u06cc \u0634\u0627\u06cc\u062f \u062a\u0648\u0627\u0646 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u0646 \u06a9\u0627\u0631\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0642\u0628\u0644\u0627 \u062f\u0627\u0634\u062a\u06cc\u062f \u0631\u0627 \u0646\u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u062f . \n\u0639\u062f\u062f \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0686\u0631\u062e\u0647 \u0630\u0647\u0646\u06cc\u060c \u0627\u0632 \u0645\u0646\u0641\u06cc 100 \u062a\u0627 \u0645\u062b\u0628\u062a 100 \u0647\u0633\u062a\u0634 \u06a9\u0647 \u0647\u0631 \u0686\u0642\u062f\u0631 \u0627\u06cc\u0646 \u0639\u062f\u062f \u0628\u0647 \u0645\u062b\u0628\u062a 100 \u0646\u0632\u062f\u06cc\u06a9 \u062a\u0631 \u0628\u0627\u0634\u0647 \u0648\u0636\u0639\u06cc\u062a\u062a \u0630\u0647\u0646\u06cc \u0628\u0647\u062a\u0631\u06cc \u062f\u0627\u0631\u06cc. \n"
                  }
                </div>
              </Stack__>
            </SlideinModal>
            <SlideinModal
              data-plasmic-name={"slideinModal2"}
              data-plasmic-override={overrides.slideinModal2}
              className={classNames("__wab_instance", sty.slideinModal2)}
              click={generateStateValueProp($state, ["slideinModal2", "click"])}
              onClick={async event => {
                const $steps = {};
              }}
              onClickChange={generateStateOnChangeProp($state, [
                "slideinModal2",
                "click"
              ])}
            >
              <div className={classNames(projectcss.all, sty.freeBox__pzBPo)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8SAo
                  )}
                >
                  {
                    "\u0627\u0646\u062a\u062e\u0627\u0628 \u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"
                  }
                </div>
                <DatePickers
                  data-plasmic-name={"datePickers2"}
                  data-plasmic-override={overrides.datePickers2}
                  SelectedDay={(() => {
                    try {
                      return $state.birthday.day;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 10;
                      }
                      throw e;
                    }
                  })()}
                  SelectedMonth={(() => {
                    try {
                      return $state.birthday.month;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 10;
                      }
                      throw e;
                    }
                  })()}
                  SelectedYear={(() => {
                    try {
                      return $state.birthday.year;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 1379;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.datePickers2)}
                  onChange={generateStateOnChangeProp($state, [
                    "datePickers2",
                    "value"
                  ])}
                  selectedValues={generateStateValueProp($state, [
                    "datePickers2",
                    "value"
                  ])}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___6AxPh)}
                >
                  <Button
                    data-plasmic-name={"button5"}
                    data-plasmic-override={overrides.button5}
                    className={classNames("__wab_instance", sty.button5)}
                    color={generateStateValueProp($state, ["button5", "color"])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateBirthday"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["birthday"]
                              },
                              operation: 0,
                              value: $state.datePickers2.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateBirthday"] != null &&
                        typeof $steps["updateBirthday"] === "object" &&
                        typeof $steps["updateBirthday"].then === "function"
                      ) {
                        $steps["updateBirthday"] = await $steps[
                          "updateBirthday"
                        ];
                      }

                      $steps["updateBday"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["bday"]
                              },
                              operation: 0,
                              value: (() => {
                                let jy = $state.birthday.year;
                                let jm = $state.birthday.month;
                                let jd = $state.birthday.day;
                                let gy = jy + 621;
                                let shamsiMonthDays = [
                                  31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                                ];

                                let miladiDaysInMonth = [
                                  31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                                ];

                                let isLeapYear =
                                  gy % 4 === 0 &&
                                  (gy % 100 !== 0 || gy % 400 === 0);
                                if (isLeapYear) {
                                  miladiDaysInMonth[1] = 29;
                                }
                                let daysPassedShamsi = jd;
                                for (let i = 0; i < jm - 1; i++) {
                                  daysPassedShamsi += shamsiMonthDays[i];
                                }
                                let daysInMiladiYear = isLeapYear ? 366 : 365;
                                let miladiStartDay = new Date(gy, 2, 21);
                                miladiStartDay.setDate(
                                  miladiStartDay.getDate() +
                                    daysPassedShamsi -
                                    1
                                );
                                let finalMiladiDay = miladiStartDay.getDate();
                                let finalMiladiMonth =
                                  miladiStartDay.getMonth() + 1;
                                let finalMiladiYear =
                                  miladiStartDay.getFullYear();
                                return `${finalMiladiYear}-${finalMiladiMonth}-${finalMiladiDay}`;
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateBday"] != null &&
                        typeof $steps["updateBday"] === "object" &&
                        typeof $steps["updateBday"].then === "function"
                      ) {
                        $steps["updateBday"] = await $steps["updateBday"];
                      }

                      $steps["updateSlideinModal2Click"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["slideinModal2", "click"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSlideinModal2Click"] != null &&
                        typeof $steps["updateSlideinModal2Click"] ===
                          "object" &&
                        typeof $steps["updateSlideinModal2Click"].then ===
                          "function"
                      ) {
                        $steps["updateSlideinModal2Click"] = await $steps[
                          "updateSlideinModal2Click"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "PUT",
                                "https://n8n.staas.ir/webhook/hamyar/biorhythm",
                                undefined,
                                (() => {
                                  try {
                                    return { birthDate: $state.bday };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization: $state.token
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction.data.success == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                                  "top-left"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  let url = new URL(window.location.href);
                                  url.searchParams.set(
                                    "y",
                                    $state.bday.split("-")[0]
                                  );
                                  url.searchParams.set(
                                    "m",
                                    $state.bday.split("-")[1]
                                  );
                                  url.searchParams.set(
                                    "d",
                                    $state.bday.split("-")[2]
                                  );
                                  return window.history.replaceState(
                                    {},
                                    "",
                                    url
                                  );
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    onColorChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["button5", "color"])(
                        eventArgs[0]
                      );
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__koYbR
                      )}
                    >
                      {"\u0627\u0646\u062a\u062e\u0627\u0628"}
                    </div>
                  </Button>
                </Stack__>
              </div>
            </SlideinModal>
          </div>
          <ApiRequest
            data-plasmic-name={"biorhythm"}
            data-plasmic-override={overrides.biorhythm}
            body={(() => {
              try {
                return {
                  birthDate: $state.bday
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.biorhythm)}
            config={
              hasVariant(globalVariants, "screen", "mobile")
                ? {
                    headers: {
                      "Content-Type": "application/json",
                      Authorization: $state.token
                    }
                  }
                : (() => {
                    try {
                      return {
                        headers: {
                          "Content-Type": "application/json",
                          Authorization: $state.token
                        }
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
            }
            errorDisplay={null}
            loadingDisplay={null}
            method={"POST"}
            onError={generateStateOnChangeProp($state, ["biorhythm", "error"])}
            onLoading={generateStateOnChangeProp($state, [
              "biorhythm",
              "loading"
            ])}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["biorhythm", "data"]).apply(
                null,
                eventArgs
              );
              (async data => {
                const $steps = {};

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://api.liom.app/service/log",
                          undefined,
                          (() => {
                            try {
                              return {
                                userId: $ctx.query.man,
                                pageName: "biorhythm",
                                action: "loadePage",
                                extraData: {
                                  refCode: $ctx.query.r,
                                  mobile: $ctx.query.man
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          {
                            headers: {
                              "Content-Type": "application/json",
                              Authorization:
                                "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                            }
                          }
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }).apply(null, eventArgs);
            }}
            url={"https://n8n.staas.ir/webhook/hamyar/biorhythm"}
          />

          <SlideinModal
            data-plasmic-name={"slideinModal3"}
            data-plasmic-override={overrides.slideinModal3}
            className={classNames("__wab_instance", sty.slideinModal3)}
            click={generateStateValueProp($state, ["slideinModal3", "click"])}
            onClick={async event => {
              const $steps = {};

              $steps["updateSlideinModalClick"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["slideinModal", "click"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSlideinModalClick"] != null &&
                typeof $steps["updateSlideinModalClick"] === "object" &&
                typeof $steps["updateSlideinModalClick"].then === "function"
              ) {
                $steps["updateSlideinModalClick"] = await $steps[
                  "updateSlideinModalClick"
                ];
              }
            }}
            onClickChange={generateStateOnChangeProp($state, [
              "slideinModal3",
              "click"
            ])}
          >
            <div className={classNames(projectcss.all, sty.freeBox__dgIxQ)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ayIcY
                )}
              >
                {
                  "\u0627\u0646\u062a\u062e\u0627\u0628 \u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"
                }
              </div>
              <DatePickers
                data-plasmic-name={"datePickers"}
                data-plasmic-override={overrides.datePickers}
                SelectedDay={(() => {
                  try {
                    return $state.birthday.day;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return 10;
                    }
                    throw e;
                  }
                })()}
                SelectedMonth={(() => {
                  try {
                    return $state.birthday.month;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return 10;
                    }
                    throw e;
                  }
                })()}
                SelectedYear={(() => {
                  try {
                    return $state.birthday.year;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return 1379;
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.datePickers)}
                onChange={generateStateOnChangeProp($state, [
                  "datePickers",
                  "value"
                ])}
                selectedValues={generateStateValueProp($state, [
                  "datePickers",
                  "value"
                ])}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cmxW3)}
              >
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={generateStateValueProp($state, ["button", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateBirthday"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["birthday"]
                            },
                            operation: 0,
                            value: $state.datePickers.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateBirthday"] != null &&
                      typeof $steps["updateBirthday"] === "object" &&
                      typeof $steps["updateBirthday"].then === "function"
                    ) {
                      $steps["updateBirthday"] = await $steps["updateBirthday"];
                    }

                    $steps["updateBday"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["bday"]
                            },
                            operation: 0,
                            value: (() => {
                              let jy = $state.birthday.year;
                              let jm = $state.birthday.month;
                              let jd = $state.birthday.day;
                              let gy = jy + 621;
                              let shamsiMonthDays = [
                                31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                              ];

                              let miladiDaysInMonth = [
                                31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                              ];

                              let isLeapYear =
                                gy % 4 === 0 &&
                                (gy % 100 !== 0 || gy % 400 === 0);
                              if (isLeapYear) {
                                miladiDaysInMonth[1] = 29;
                              }
                              let daysPassedShamsi = jd;
                              for (let i = 0; i < jm - 1; i++) {
                                daysPassedShamsi += shamsiMonthDays[i];
                              }
                              let daysInMiladiYear = isLeapYear ? 366 : 365;
                              let miladiStartDay = new Date(gy, 2, 21);
                              miladiStartDay.setDate(
                                miladiStartDay.getDate() + daysPassedShamsi - 1
                              );
                              let finalMiladiDay = miladiStartDay.getDate();
                              let finalMiladiMonth =
                                miladiStartDay.getMonth() + 1;
                              let finalMiladiYear =
                                miladiStartDay.getFullYear();
                              return `${finalMiladiYear}-${finalMiladiMonth}-${finalMiladiDay}`;
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateBday"] != null &&
                      typeof $steps["updateBday"] === "object" &&
                      typeof $steps["updateBday"].then === "function"
                    ) {
                      $steps["updateBday"] = await $steps["updateBday"];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "PUT",
                              "https://n8n.staas.ir/webhook/hamyar/biorhythm",
                              undefined,
                              (() => {
                                try {
                                  return { birthDate: $state.bday };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization: $state.token
                                    }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateSlideinModal3Click"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["slideinModal3", "click"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSlideinModal3Click"] != null &&
                      typeof $steps["updateSlideinModal3Click"] === "object" &&
                      typeof $steps["updateSlideinModal3Click"].then ===
                        "function"
                    ) {
                      $steps["updateSlideinModal3Click"] = await $steps[
                        "updateSlideinModal3Click"
                      ];
                    }

                    $steps["invokeGlobalAction2"] =
                      $steps.invokeGlobalAction.data.success == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                                "top-left"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                let url = new URL(window.location.href);
                                url.searchParams.set(
                                  "y",
                                  $state.bday.split("-")[0]
                                );
                                url.searchParams.set(
                                  "m",
                                  $state.bday.split("-")[1]
                                );
                                url.searchParams.set(
                                  "d",
                                  $state.bday.split("-")[2]
                                );
                                return window.history.replaceState({}, "", url);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onColorChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "color"])(
                      eventArgs[0]
                    );
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wdozi
                    )}
                  >
                    {"\u0627\u0646\u062a\u062e\u0627\u0628"}
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button4"}
                  data-plasmic-override={overrides.button4}
                  className={classNames("__wab_instance", sty.button4)}
                  color={generateStateValueProp($state, ["button4", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSlideinModal3Click"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["slideinModal3", "click"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSlideinModal3Click"] != null &&
                      typeof $steps["updateSlideinModal3Click"] === "object" &&
                      typeof $steps["updateSlideinModal3Click"].then ===
                        "function"
                    ) {
                      $steps["updateSlideinModal3Click"] = await $steps[
                        "updateSlideinModal3Click"
                      ];
                    }
                  }}
                  onColorChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["button4", "color"])(
                      eventArgs[0]
                    );
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yPvXg
                    )}
                  >
                    {"\u0628\u0631\u06af\u0634\u062a"}
                  </div>
                </Button>
              </Stack__>
            </div>
          </SlideinModal>
          <PullToRefresh
            data-plasmic-name={"pullToRefresh"}
            data-plasmic-override={overrides.pullToRefresh}
            className={classNames("__wab_instance", sty.pullToRefresh)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nexdh)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__y2Vrr)}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return (
                              "https://apps.liom.app/hamyar/?r=" +
                              $ctx.query.r +
                              "&m=" +
                              $ctx.query.man
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return `/hamyar`;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
            >
              <Icon6Icon
                className={classNames(projectcss.all, sty.svg__wDbr)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pxVLk
                )}
              >
                {"\u0647\u0645\u06cc\u0627\u0631"}
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__osP9Y)}
              onClick={async event => {
                const $steps = {};
              }}
            >
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? Icon24Icon
                    : Icon24Icon
                }
                className={classNames(projectcss.all, sty.svg__ghYg)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wzccl
                )}
              >
                {"\u0628\u06cc\u0648\u0631\u06cc\u062a\u0645"}
              </div>
            </div>
          </Stack__>
          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              hasVariant(globalVariants, "screen", "mobile")
                ? "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
                : "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n    document.title = '\u0647\u0645\u06cc\u0627\u0631 \u0644\u06cc\u0648\u0645';\r\n})();\r\n</script>\r\n"
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "button2",
    "button3",
    "ul",
    "li",
    "lottie",
    "embedHtml",
    "slideinModal",
    "slideinModal2",
    "datePickers2",
    "button5",
    "biorhythm",
    "slideinModal3",
    "datePickers",
    "button",
    "button4",
    "pullToRefresh",
    "favicon"
  ],
  button2: ["button2"],
  button3: ["button3"],
  ul: ["ul", "li"],
  li: ["li"],
  lottie: ["lottie"],
  embedHtml: ["embedHtml"],
  slideinModal: ["slideinModal"],
  slideinModal2: ["slideinModal2", "datePickers2", "button5"],
  datePickers2: ["datePickers2"],
  button5: ["button5"],
  biorhythm: ["biorhythm"],
  slideinModal3: ["slideinModal3", "datePickers", "button", "button4"],
  datePickers: ["datePickers"],
  button: ["button"],
  button4: ["button4"],
  pullToRefresh: ["pullToRefresh"],
  favicon: ["favicon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button2: typeof Button;
  button3: typeof Button;
  ul: "ul";
  li: "li";
  lottie: typeof LottieWrapper;
  embedHtml: typeof Embed;
  slideinModal: typeof SlideinModal;
  slideinModal2: typeof SlideinModal;
  datePickers2: typeof DatePickers;
  button5: typeof Button;
  biorhythm: typeof ApiRequest;
  slideinModal3: typeof SlideinModal;
  datePickers: typeof DatePickers;
  button: typeof Button;
  button4: typeof Button;
  pullToRefresh: typeof PullToRefresh;
  favicon: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBioritm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBioritm__VariantsArgs;
    args?: PlasmicBioritm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBioritm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBioritm__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBioritm__ArgProps,
          internalVariantPropNames: PlasmicBioritm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBioritm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBioritm";
  } else {
    func.displayName = `PlasmicBioritm.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicBioritm = Object.assign(
  // Top-level PlasmicBioritm renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    button2: makeNodeComponent("button2"),
    button3: makeNodeComponent("button3"),
    ul: makeNodeComponent("ul"),
    li: makeNodeComponent("li"),
    lottie: makeNodeComponent("lottie"),
    embedHtml: makeNodeComponent("embedHtml"),
    slideinModal: makeNodeComponent("slideinModal"),
    slideinModal2: makeNodeComponent("slideinModal2"),
    datePickers2: makeNodeComponent("datePickers2"),
    button5: makeNodeComponent("button5"),
    biorhythm: makeNodeComponent("biorhythm"),
    slideinModal3: makeNodeComponent("slideinModal3"),
    datePickers: makeNodeComponent("datePickers"),
    button: makeNodeComponent("button"),
    button4: makeNodeComponent("button4"),
    pullToRefresh: makeNodeComponent("pullToRefresh"),
    favicon: makeNodeComponent("favicon"),

    // Metadata about props expected for PlasmicBioritm
    internalVariantProps: PlasmicBioritm__VariantProps,
    internalArgProps: PlasmicBioritm__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBioritm;
/* prettier-ignore-end */
