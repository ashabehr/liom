// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: u78Ppal5dPeL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import SlideinModal from "../../SlideinModal"; // plasmic-import: Y_p0qKIshDe1/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { DatePickers } from "@/components/DatePickers"; // plasmic-import: Pxh5xTWczGDl/codeComponent
import { PullToRefresh } from "@/components/PullToRefresh"; // plasmic-import: nYteXVWDlYDv/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicBioritm.module.css"; // plasmic-import: u78Ppal5dPeL/css

import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: uVWC2f5sKg_c/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: ZlBOcl4Z66lm/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: JYHABEI9HtQe/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: 8DTE5iQ0tvze/icon

createPlasmicElementProxy;

export type PlasmicBioritm__VariantMembers = {};
export type PlasmicBioritm__VariantsArgs = {};
type VariantPropType = keyof PlasmicBioritm__VariantsArgs;
export const PlasmicBioritm__VariantProps = new Array<VariantPropType>();

export type PlasmicBioritm__ArgsType = {};
type ArgPropType = keyof PlasmicBioritm__ArgsType;
export const PlasmicBioritm__ArgProps = new Array<ArgPropType>();

export type PlasmicBioritm__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  button2?: Flex__<typeof Button>;
  button3?: Flex__<typeof Button>;
  ul?: Flex__<"ul">;
  embedHtml?: Flex__<typeof Embed>;
  slideinModal?: Flex__<typeof SlideinModal>;
  slideinModal2?: Flex__<typeof SlideinModal>;
  fragmentApiRequest?: Flex__<typeof ApiRequest>;
  slideinModal3?: Flex__<typeof SlideinModal>;
  datePickers?: Flex__<typeof DatePickers>;
  button?: Flex__<typeof Button>;
  button4?: Flex__<typeof Button>;
  pullToRefresh?: Flex__<typeof PullToRefresh>;
};

export interface DefaultBioritmProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBioritm__RenderFunc(props: {
  variants: PlasmicBioritm__VariantsArgs;
  args: PlasmicBioritm__ArgsType;
  overrides: PlasmicBioritm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "softSand"
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "slideinModal.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "slideinModal2.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "slideinModal3.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "datePickers.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "birthday",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          day: 10,
          month: 10,
          year: 1379
        })
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__l2VNg)}>
            <div className={classNames(projectcss.all, sty.freeBox__kQaHu)}>
              <p
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.p__f1TwP
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSlideinModalClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["slideinModal", "click"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }
                }}
              >
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "\u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0686\u06cc\u0633\u062a\u061f  > "
                  : "\u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0686\u06cc\u0633\u062a\u061f"}
              </p>
              <div className={classNames(projectcss.all, sty.freeBox__kcgv6)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__omFzt
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSlideinModal3Click"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["slideinModal3", "click"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSlideinModal3Click"] != null &&
                      typeof $steps["updateSlideinModal3Click"] === "object" &&
                      typeof $steps["updateSlideinModal3Click"].then ===
                        "function"
                    ) {
                      $steps["updateSlideinModal3Click"] = await $steps[
                        "updateSlideinModal3Click"
                      ];
                    }
                  }}
                >
                  {hasVariant(globalVariants, "screen", "mobile") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            "این بیوریتم بر اساس تاریخ تولد " +
                            $state.birthday.year +
                            "/" +
                            $state.birthday.month +
                            "/" +
                            $state.birthday.day +
                            "  محاسبه شده است ."
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    "\u0627\u06cc\u0646 \u0628\u06cc\u0648 \u0631\u06cc\u062a\u0645 \u0628\u0631 \u0627\u0633\u0627\u0633 \u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f "
                  )}
                </div>
                <PlasmicLink__
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          $state.datePickers.value.year +
                          "/" +
                          $state.datePickers.value.month +
                          "/" +
                          $state.datePickers.value.day
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "1380/8/9";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </PlasmicLink__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dQjfV
                  )}
                >
                  {
                    " \u0645\u062d\u0627\u0633\u0628\u0647 \u0634\u062f\u0647 \u0627\u0633\u062a ."
                  }
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__eeRlb)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__mB5CK)}>
                  <Icon19Icon
                    className={classNames(projectcss.all, sty.svg__vvztf)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__i9991
                    )}
                  >
                    {"\u0641\u06a9\u0631\u06cc"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zd6RW
                    )}
                  >
                    {"50%"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__euqJ7)}>
                  <Icon21Icon
                    className={classNames(projectcss.all, sty.svg__okNfK)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5Kkag
                    )}
                  >
                    {"\u062c\u0633\u0645\u06cc"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n2Lt
                    )}
                  >
                    {"50%"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__vmLw3)}>
                  <Icon16Icon
                    className={classNames(projectcss.all, sty.svg___2Mzr0)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6YrHy
                    )}
                  >
                    {"\u0627\u062d\u0633\u0627\u0633\u06cc"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o2VP9
                    )}
                  >
                    {"50%"}
                  </div>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zqEyN)}
              >
                <p
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p__wBrRt
                  )}
                >
                  {"\u0645\u06cc\u0627\u0646\u06af\u06cc\u0646"}
                </p>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w30PV
                  )}
                >
                  {"50%"}
                </div>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox___6Kw2M)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3Hd4I
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            parseInt(
                              $state.fragmentApiRequest.data.date.day.number.en
                            ) +
                            " " +
                            $state.fragmentApiRequest.data.date.month.name +
                            " " +
                            $state.fragmentApiRequest.data.date.year.number.fa
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "---";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.fragmentApiRequest.data.date.full
                            .official.usual.fa;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "22 \u0645\u0631\u062f\u0627\u062f 1403";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  )}
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__q8Qw)}
              >
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  color={generateStateValueProp($state, ["button2", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSlideinModal3Click"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["slideinModal3", "click"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSlideinModal3Click"] != null &&
                      typeof $steps["updateSlideinModal3Click"] === "object" &&
                      typeof $steps["updateSlideinModal3Click"].then ===
                        "function"
                    ) {
                      $steps["updateSlideinModal3Click"] = await $steps[
                        "updateSlideinModal3Click"
                      ];
                    }
                  }}
                  onColorChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["button2", "color"])(
                      eventArgs[0]
                    );
                  }}
                >
                  {
                    "\u062a\u063a\u06cc\u06cc\u0631 \u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"
                  }
                </Button>
                <Button
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames("__wab_instance", sty.button3)}
                  color={generateStateValueProp($state, ["button3", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                if (navigator.share) {
                                  return navigator.share({
                                    title: "Check this out!",
                                    text: "This is a great content I want to share!",
                                    url: window.location.href
                                  });
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onColorChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["button3", "color"])(
                      eventArgs[0]
                    );
                  }}
                >
                  {
                    "\u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc"
                  }
                </Button>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__dx6At)}>
              <div className={classNames(projectcss.all, sty.freeBox__eoCeA)}>
                <p
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p__tEhpz
                  )}
                >
                  {
                    "\u062a\u0648\u0635\u06cc\u0647 \u0647\u0627\u06cc \u0645\u0631\u062a\u0628\u0637 \u0628\u0627 \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0627\u0645\u0631\u0648\u0632:"
                  }
                </p>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___4Cio4)}>
                <Stack__
                  as={"ul"}
                  data-plasmic-name={"ul"}
                  data-plasmic-override={overrides.ul}
                  hasGap={true}
                  className={classNames(projectcss.all, projectcss.ul, sty.ul)}
                >
                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.li__u9LKw
                    )}
                  >
                    {
                      "\u0627\u0645\u0631\u0648\u0632 \u062e\u0644\u0627\u0642\u06cc"
                    }
                  </li>
                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.li__woGd
                    )}
                  >
                    {
                      "\u0627\u0645\u0631\u0648\u0632 \u062e\u0644\u0627\u0642\u06cc"
                    }
                  </li>
                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.li___3Xx7K
                    )}
                  >
                    {
                      "\u0627\u0645\u0631\u0648\u0632 \u062e\u0644\u0627\u0642\u06cc"
                    }
                  </li>
                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.li__mwxvF
                    )}
                  >
                    {
                      "\u0627\u0645\u0631\u0648\u0632 \u062e\u0644\u0627\u0642\u06cc"
                    }
                  </li>
                </Stack__>
              </div>
            </div>
            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml)}
              code={
                "    <script>\r\n        // \u0627\u0641\u0632\u0648\u062f\u0646 \u062a\u0627\u0628\u0639 \u0628\u0647 String.prototype\r\n        String.prototype.EntoFa = function() {\r\n            return this.replace(/\\d/g, d => '\u06f0\u06f1\u06f2\u06f3\u06f4\u06f5\u06f6\u06f7\u06f8\u06f9'[d]);\r\n        }\r\n        // \u062a\u0627\u0628\u0639 \u0628\u0631\u0627\u06cc \u062a\u0628\u062f\u06cc\u0644 \u0627\u0639\u062f\u0627\u062f \u062f\u0631 \u062a\u0645\u0627\u0645\u06cc \u0645\u062a\u0646\u200c\u0647\u0627\u06cc \u0635\u0641\u062d\u0647\r\n        function convertNumbersInPage() {\r\n                        console.log(\"hiiii\");\r\n\r\n            const elements = document.querySelectorAll('body *:not(script):not(style)');\r\n            elements.forEach(element => {\r\n                element.childNodes.forEach(node => {\r\n                    if (node.nodeType === Node.TEXT_NODE) {\r\n                        node.nodeValue = node.nodeValue.EntoFa();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n      convertNumbersInPage();\r\n    </script>"
              }
            />

            {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
              <SlideinModal
                data-plasmic-name={"slideinModal"}
                data-plasmic-override={overrides.slideinModal}
                className={classNames("__wab_instance", sty.slideinModal)}
                click={generateStateValueProp($state, [
                  "slideinModal",
                  "click"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSlideinModalClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["slideinModal", "click"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }
                }}
                onClickChange={generateStateOnChangeProp($state, [
                  "slideinModal",
                  "click"
                ])}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qqw6C)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vdlfo
                    )}
                  >
                    {"\u0628\u06cc\u0648\u0631\u06cc\u062a\u0645"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pvJpc
                    )}
                  >
                    {
                      "\u0634\u062f\u0647 \u06af\u0627\u0647\u06cc \u0627\u0648\u0642\u0627\u062a \u0628\u0627 \u062e\u0648\u062f\u062a \u0628\u06af\u06cc \u0627\u0644\u0627\u0646 \u00bb \u062d\u0648\u0635\u0644\u0647 \u0647\u06cc\u0686 \u06a9\u0627\u0631\u06cc \u0631\u0648 \u0646\u062f\u0627\u0631\u0645 \u061b \u06cc\u0627 \u0627\u0645\u0631\u0648\u0632 \u0631\u0648\u06cc \u0645\u0646 \u0646\u06cc\u0633\u062a . \u00bb \u0627\u06cc\u0646\u0637\u0648\u0631 \u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0631\u0633\u0647 \u06a9\u0647 \u062f\u0631 \u0628\u0639\u0636\u06cc \u0634\u0631\u0627\u06cc\u0637 \u060c \u0642\u062f\u0631\u062a \u062c\u0633\u0645\u06cc \u0630\u0647\u0646\u06cc \u0648 \u0627\u062d\u0633\u0627\u0633\u06cc \u060c \u0645\u0627 \u0628\u0627 \u0647\u0645 . \u0647\u0645\u0627\u0647\u0646\u06af \u0646\u06cc\u0633\u062a\u0646 \u06a9\u0647 \u0647\u0645\u0647 \u0627\u06cc\u0646\u0647\u0627 \u0628\u0647 \u0633\u06cc\u06a9\u0644\u0647\u0627\u06cc \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0628\u0631\u0645\u06cc\u06af\u0631\u062f\u0647.\n\u062f\u0631 \u0648\u0627\u0642\u0639 \u0628\u064a\u0648\u0631\u064a\u062a\u0645 \u0646\u0628\u0636 \u062d\u064a\u0627\u062a \u06cc\u0627 \u0632\u06cc\u0633\u062a \u060c \u0622\u0647\u0646\u06af \u0639\u0644\u0645 \u0648 \u062f\u0627\u0646\u0634\u06cc \u0627\u0633\u062a \u06a9\u0647 \u0628\u0647 \u0648\u0627\u0633\u0637\u0647 \u0627\u0648\u0646 \u0631\u06cc\u062a\u0645\u0647\u0627\u06cc \u0628\u062f\u0646 \u0627\u0646\u0633\u0627\u0646 \u0634\u0646\u0627\u062e\u062a\u0647 \u0645\u06cc\u0634\u0647 \u0628\u0631\u0627\u0633\u0627\u0633 \u0646\u0638\u0631\u064a\u0647 \u0628\u064a\u0648\u0631\u064a\u062a\u0645 \u0633\u0637\u0648\u062d \u0645\u062e\u062a\u0644\u0641\u06cc \u0627\u0632 \u0627\u0646\u0631\u0698\u06cc \u0627\u0632 \u0647\u0645\u0627\u0646 \u0627\u0628\u062a\u062f\u0627\u06cc \u062a\u0648\u0644\u062f \u062f\u0631 \u0627\u0646\u0633\u0627\u0646 \u0648\u062c\u0648\u062f \u062f\u0627\u0631\u0647 \u062f\u0631 \u0648\u0627\u0642\u0639 \u0634\u0631\u0648\u0639 \u0648 \u067e\u0627\u06cc\u0627\u0646 \u0647\u0631 \u0686\u0631\u062e\u0647 \u0628\u0631 \u0627\u0633\u0627\u0633 \u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f \u0641\u0631\u062f \u062a\u0639\u06cc\u06cc\u0646 \u0645\u06cc\u0634\u0647 \u0627\u06cc\u0646 \u0627\u0646\u0631\u0698\u06cc \u062f\u0631 \u06cc\u06a9 \u0628\u0627\u0632\u0647 \u0632\u0645\u0627\u0646\u06cc \u0645\u0634\u062e\u0635 \u06a9\u0645 \u0648 \u0632\u06cc\u0627\u062f \u0645\u06cc\u0634\u0647 \u0648 \u0631\u0648\u06cc \u0631\u0641\u062a\u0627\u0631 \u0648 \u062d\u0627\u0644\u0627\u062a \u0627\u0646\u0633\u0627\u0646 \u062a\u0623\u062b\u06cc\u0631 \u0645\u06cc\u0630\u0627\u0631\u0647. \n\n1- \u0686\u0631\u062e\u0647 \u0641\u06cc\u0632\u06cc\u06a9\u06cc ( Physical ) \n\u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u0647\u0631 \u06f2\u06f3 \u0631\u0648\u0632 \u06cc\u06a9\u0628\u0627\u0631 \u0627\u062a\u0641\u0627\u0642 \u0645\u06cc\u0627\u0641\u062a\u062f \u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u062f\u0631 \u0627\u0648\u062c \u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u0642\u0631\u0627\u0631 \u062f\u0627\u0631\u06cc\u062f \u0628\u06cc\u0634 \u0627\u0632 \u0647\u0631 \u0632\u0645\u0627\u0646 \u062f\u06cc\u06af\u0631\u06cc \u0627\u0639\u062a\u0645\u0627\u062f \u0628\u0647 \u0646\u0641\u0633 \u060c \u0627\u0646\u0631\u0698\u06cc \u0648 ... \u062f\u0627\u0631\u06cc\u062f . \u0627\u06cc\u0646 \u062f\u0631 \u062d\u0627\u0644\u06cc \u0627\u0633\u062a \u06a9\u0647 \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0628\u062d\u0631\u0627\u0646\u06cc \u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u0628\u06cc\u0634\u062a\u0631 \u062a\u062d\u062a \u062a\u0623\u062b\u06cc\u0631 \u0628\u06cc\u0645\u0627\u0631\u06cc \u0647\u0627 \u0642\u0631\u0627\u0631 \u0645\u06cc \u06af\u06cc\u0631\u06cc\u062f . \n\u0639\u062f\u062f \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0686\u0631\u062e\u0647 \u0641\u06cc\u0632\u06cc\u06a9\u06cc\u060c \u0627\u0632 \u0645\u0646\u0641\u06cc 100 \u062a\u0627 \u0645\u062b\u0628\u062a 100 \u0627\u0633\u062a \u06a9\u0647 \u0647\u0631 \u0686\u0642\u062f\u0631 \u0627\u06cc\u0646 \u0639\u062f\u062f \u0628\u0647 \u0645\u062b\u0628\u062a 100 \u0646\u0632\u062f\u06cc\u06a9 \u062a\u0631 \u0628\u0627\u0634\u0647 \u0648\u0636\u0639\u06cc\u062a\u062a \u0628\u0647\u062a\u0631\u06cc \u062f\u0627\u0631\u06cc\u062f .\n\n\u06f2- \u0686\u0631\u062e\u0647 \u0627\u062d\u0633\u0627\u0633\u06cc ( Emotional ) \n\u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u06f2\u06f8 \u0631\u0648\u0632\u0647 \u0627\u0633\u062a \u0648\u0642\u062a\u06cc \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0627\u0648\u062c \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0642\u0631\u0627\u0631 \u062f\u0627\u0631\u06cc\u062f \u0627\u062d\u0633\u0627\u0633 \u0645\u06cc\u06a9\u0646\u06cc\u062f \u0628\u06cc\u0634 \u0627\u0632 \u0647\u0631 \u0632\u0645\u0627\u0646 \u062f\u06cc\u06af\u0631 \u0634\u0627\u062f \u0648 \u0628\u0627\u0637\u0631\u0627\u0648\u062a \u0647\u0633\u062a\u06cc\u062f . \u062f\u0631 \u0645\u0642\u0627\u0628\u0644 \u0622\u0646 \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0628\u062d\u0631\u0627\u0646\u06cc \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u062a\u062d\u0631\u06cc\u06a9 \u067e\u0630\u06cc\u0631\u06cc \u0628\u0627\u0644\u0627\u06cc\u06cc \u062f\u0627\u0631\u06cc\u062f \u061b \u0627\u062d\u062a\u0645\u0627\u0644\u0627 \u0647\u0645\u0627\u0646 \u0631\u0648\u0632\u0647\u0627\u06cc\u06cc \u0627\u0633\u062a \u06a9\u0647 \u0645\u062b\u0644\u0627 \u0645\u06cc\u06af\u0648\u06cc\u06cc\u062f \u062d\u0648\u0635\u0644\u0647 \u0646\u062f\u0627\u0631\u0645 \u0648\u0644\u0645 \u06a9\u0646\u06cc\u062f \n\u0639\u062f\u062f \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0686\u0631\u062e\u0647 \u0627\u062d\u0633\u0627\u0633\u06cc\u060c \u0627\u0632 \u0645\u0646\u0641\u06cc 100 \u062a\u0627 \u0645\u062b\u0628\u062a 100 \u0647\u0633\u062a\u0634 \u06a9\u0647 \u0647\u0631\u0686\u0642\u062f\u0631 \u0627\u06cc\u0646 \u0639\u062f\u062f \u0628\u0647 \u0645\u062b\u0628\u062a 100 \u0646\u0632\u062f\u06cc\u06a9 \u062a\u0631 \u0628\u0627\u0634\u0647 \u0648\u0636\u0639\u06cc\u062a\u062a \u0631\u0648\u062d\u06cc \u0628\u0647\u062a\u0631\u06cc \u062f\u0627\u0631\u06cc\u062f .\n \n\u06f3- \u0686\u0631\u062e\u0647 \u0630\u0647\u0646\u06cc ( Intellectual ) \n\u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u0631\u0627 \u0647\u0631 \u0663\u0663 \u0631\u0648\u0632 \u06cc\u06a9\u0628\u0627\u0631 \u062a\u062c\u0631\u0628\u0647 \u0645\u06cc.\u06a9\u0646\u06cc\u062f \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0627\u0648\u062c \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0642\u062f\u0631\u062a \u062a\u0635\u0645\u06cc\u0645 \u06af\u06cc\u0631\u06cc \u062e\u0648\u0628\u06cc \u062f\u0627\u0631\u06cc\u062f \u0648 \u0628\u0647 \u0631\u0627\u062d\u062a\u06cc \u0645\u06cc \u062a\u0648\u0627\u0646\u06cc\u062f \u0645\u0633\u0627\u0626\u0644 \u0648 \u0645\u0634\u06a9\u0644\u0627\u062a \u0631\u0627 \u062d\u0644 \u0648 \u0645\u062f\u06cc\u0631\u06cc\u062a .\u06a9\u0646\u06cc\u062f \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0627\u0641\u0648\u0644 \u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u062a\u0645\u0631\u06a9\u0632 \u0628\u0633\u06cc\u0627\u0631 \u06a9\u0645\u06cc \u062f\u0627\u0631\u06cc\u062f \u0648 \u062d\u062a\u06cc \u0634\u0627\u06cc\u062f \u062a\u0648\u0627\u0646 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u0646 \u06a9\u0627\u0631\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0642\u0628\u0644\u0627 \u062f\u0627\u0634\u062a\u06cc\u062f \u0631\u0627 \u0646\u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u062f . \n\u0639\u062f\u062f \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0686\u0631\u062e\u0647 \u0630\u0647\u0646\u06cc\u060c \u0627\u0632 \u0645\u0646\u0641\u06cc 100 \u062a\u0627 \u0645\u062b\u0628\u062a 100 \u0647\u0633\u062a\u0634 \u06a9\u0647 \u0647\u0631 \u0686\u0642\u062f\u0631 \u0627\u06cc\u0646 \u0639\u062f\u062f \u0628\u0647 \u0645\u062b\u0628\u062a 100 \u0646\u0632\u062f\u06cc\u06a9 \u062a\u0631 \u0628\u0627\u0634\u0647 \u0648\u0636\u0639\u06cc\u062a\u062a \u0630\u0647\u0646\u06cc \u0628\u0647\u062a\u0631\u06cc \u062f\u0627\u0631\u06cc. \n"
                    }
                  </div>
                </Stack__>
              </SlideinModal>
            ) : null}
            {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
              <SlideinModal
                data-plasmic-name={"slideinModal2"}
                data-plasmic-override={overrides.slideinModal2}
                className={classNames("__wab_instance", sty.slideinModal2)}
                click={generateStateValueProp($state, [
                  "slideinModal2",
                  "click"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSlideinModalClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["slideinModal2", "click"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              window.removeEventListener(
                                "wheel",
                                preventScroll
                              );
                              return window.removeEventListener(
                                "touchmove",
                                preventScroll
                              );
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                onClickChange={generateStateOnChangeProp($state, [
                  "slideinModal2",
                  "click"
                ])}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___8GBeh)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Hl0G
                    )}
                  >
                    {
                      "\u0627\u0646\u062a\u062e\u0627\u0628 \u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"
                    }
                  </div>
                </Stack__>
              </SlideinModal>
            ) : null}
          </div>
          <ApiRequest
            data-plasmic-name={"fragmentApiRequest"}
            data-plasmic-override={overrides.fragmentApiRequest}
            className={classNames("__wab_instance", sty.fragmentApiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sxJZ
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__n67PU
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={generateStateOnChangeProp($state, [
              "fragmentApiRequest",
              "error"
            ])}
            onLoading={generateStateOnChangeProp($state, [
              "fragmentApiRequest",
              "loading"
            ])}
            onSuccess={generateStateOnChangeProp($state, [
              "fragmentApiRequest",
              "data"
            ])}
            url={"https://api.keybit.ir/time/"}
          />

          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <SlideinModal
              data-plasmic-name={"slideinModal3"}
              data-plasmic-override={overrides.slideinModal3}
              className={classNames("__wab_instance", sty.slideinModal3)}
              click={generateStateValueProp($state, ["slideinModal3", "click"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateSlideinModalClick"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["slideinModal", "click"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSlideinModalClick"] != null &&
                  typeof $steps["updateSlideinModalClick"] === "object" &&
                  typeof $steps["updateSlideinModalClick"].then === "function"
                ) {
                  $steps["updateSlideinModalClick"] = await $steps[
                    "updateSlideinModalClick"
                  ];
                }
              }}
              onClickChange={generateStateOnChangeProp($state, [
                "slideinModal3",
                "click"
              ])}
            >
              <div className={classNames(projectcss.all, sty.freeBox__dgIxQ)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ayIcY
                  )}
                >
                  {
                    "\u0627\u0646\u062a\u062e\u0627\u0628 \u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"
                  }
                </div>
                <DatePickers
                  data-plasmic-name={"datePickers"}
                  data-plasmic-override={overrides.datePickers}
                  SelectedDay={(() => {
                    try {
                      return $state.birthday.day;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 10;
                      }
                      throw e;
                    }
                  })()}
                  SelectedMonth={(() => {
                    try {
                      return $state.birthday.month;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 10;
                      }
                      throw e;
                    }
                  })()}
                  SelectedYear={(() => {
                    try {
                      return $state.birthday.year;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 1379;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.datePickers)}
                  onChange={generateStateOnChangeProp($state, [
                    "datePickers",
                    "value"
                  ])}
                  selectedValues={generateStateValueProp($state, [
                    "datePickers",
                    "value"
                  ])}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cmxW3)}
                >
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={generateStateValueProp($state, ["button", "color"])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateBirthday"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["birthday"]
                              },
                              operation: 0,
                              value: $state.datePickers.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateBirthday"] != null &&
                        typeof $steps["updateBirthday"] === "object" &&
                        typeof $steps["updateBirthday"].then === "function"
                      ) {
                        $steps["updateBirthday"] = await $steps[
                          "updateBirthday"
                        ];
                      }

                      $steps["updateSlideinModal3Click"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["slideinModal3", "click"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSlideinModal3Click"] != null &&
                        typeof $steps["updateSlideinModal3Click"] ===
                          "object" &&
                        typeof $steps["updateSlideinModal3Click"].then ===
                          "function"
                      ) {
                        $steps["updateSlideinModal3Click"] = await $steps[
                          "updateSlideinModal3Click"
                        ];
                      }
                    }}
                    onColorChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "color"])(
                        eventArgs[0]
                      );
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wdozi
                      )}
                    >
                      {"\u0627\u0646\u062a\u062e\u0627\u0628"}
                    </div>
                  </Button>
                  <Button
                    data-plasmic-name={"button4"}
                    data-plasmic-override={overrides.button4}
                    className={classNames("__wab_instance", sty.button4)}
                    color={generateStateValueProp($state, ["button4", "color"])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSlideinModal3Click"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["slideinModal3", "click"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSlideinModal3Click"] != null &&
                        typeof $steps["updateSlideinModal3Click"] ===
                          "object" &&
                        typeof $steps["updateSlideinModal3Click"].then ===
                          "function"
                      ) {
                        $steps["updateSlideinModal3Click"] = await $steps[
                          "updateSlideinModal3Click"
                        ];
                      }
                    }}
                    onColorChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["button4", "color"])(
                        eventArgs[0]
                      );
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yPvXg
                      )}
                    >
                      {"\u0628\u0631\u06af\u0634\u062a"}
                    </div>
                  </Button>
                </Stack__>
              </div>
            </SlideinModal>
          ) : null}
          <PullToRefresh
            data-plasmic-name={"pullToRefresh"}
            data-plasmic-override={overrides.pullToRefresh}
            className={classNames("__wab_instance", sty.pullToRefresh)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "link",
    "button2",
    "button3",
    "ul",
    "embedHtml",
    "slideinModal",
    "slideinModal2",
    "fragmentApiRequest",
    "slideinModal3",
    "datePickers",
    "button",
    "button4",
    "pullToRefresh"
  ],
  link: ["link"],
  button2: ["button2"],
  button3: ["button3"],
  ul: ["ul"],
  embedHtml: ["embedHtml"],
  slideinModal: ["slideinModal"],
  slideinModal2: ["slideinModal2"],
  fragmentApiRequest: ["fragmentApiRequest"],
  slideinModal3: ["slideinModal3", "datePickers", "button", "button4"],
  datePickers: ["datePickers"],
  button: ["button"],
  button4: ["button4"],
  pullToRefresh: ["pullToRefresh"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  button2: typeof Button;
  button3: typeof Button;
  ul: "ul";
  embedHtml: typeof Embed;
  slideinModal: typeof SlideinModal;
  slideinModal2: typeof SlideinModal;
  fragmentApiRequest: typeof ApiRequest;
  slideinModal3: typeof SlideinModal;
  datePickers: typeof DatePickers;
  button: typeof Button;
  button4: typeof Button;
  pullToRefresh: typeof PullToRefresh;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBioritm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBioritm__VariantsArgs;
    args?: PlasmicBioritm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBioritm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBioritm__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBioritm__ArgProps,
          internalVariantPropNames: PlasmicBioritm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBioritm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBioritm";
  } else {
    func.displayName = `PlasmicBioritm.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicBioritm = Object.assign(
  // Top-level PlasmicBioritm renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    button2: makeNodeComponent("button2"),
    button3: makeNodeComponent("button3"),
    ul: makeNodeComponent("ul"),
    embedHtml: makeNodeComponent("embedHtml"),
    slideinModal: makeNodeComponent("slideinModal"),
    slideinModal2: makeNodeComponent("slideinModal2"),
    fragmentApiRequest: makeNodeComponent("fragmentApiRequest"),
    slideinModal3: makeNodeComponent("slideinModal3"),
    datePickers: makeNodeComponent("datePickers"),
    button: makeNodeComponent("button"),
    button4: makeNodeComponent("button4"),
    pullToRefresh: makeNodeComponent("pullToRefresh"),

    // Metadata about props expected for PlasmicBioritm
    internalVariantProps: PlasmicBioritm__VariantProps,
    internalArgProps: PlasmicBioritm__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBioritm;
/* prettier-ignore-end */
