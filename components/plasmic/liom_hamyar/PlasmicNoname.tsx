/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: EIo8r8kqzGza

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import LineClomp from "../../LineClomp"; // plasmic-import: XsM8QG4wUKlk/component
import Mention from "../../Mention"; // plasmic-import: zfK6Jl7yJcHY/component

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicNoname.module.css"; // plasmic-import: EIo8r8kqzGza/css

import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicNoname__VariantMembers = {};
export type PlasmicNoname__VariantsArgs = {};
type VariantPropType = keyof PlasmicNoname__VariantsArgs;
export const PlasmicNoname__VariantProps = new Array<VariantPropType>();

export type PlasmicNoname__ArgsType = {};
type ArgPropType = keyof PlasmicNoname__ArgsType;
export const PlasmicNoname__ArgProps = new Array<ArgPropType>();

export type PlasmicNoname__OverridesType = {
  root?: Flex__<"div">;
  halamanUtama?: Flex__<"div">;
  group35?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  lineClomp?: Flex__<typeof LineClomp>;
  pngtreeRamadanIllustrationMuslimFamilyPraying74668381?: Flex__<"div">;
  mention?: Flex__<typeof Mention>;
};

export interface DefaultNonameProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNoname__RenderFunc(props: {
  variants: PlasmicNoname__VariantsArgs;
  args: PlasmicNoname__ArgsType;
  overrides: PlasmicNoname__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lineClomp.line",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"halamanUtama"}
            data-plasmic-override={overrides.halamanUtama}
            hasGap={true}
            className={classNames(projectcss.all, sty.halamanUtama)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__aVeVu)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"group35"}
                data-plasmic-override={overrides.group35}
                hasGap={true}
                className={classNames(projectcss.all, sty.group35)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kNmmo
                  )}
                >
                  {"\u0630\u06a9\u0631 \u0647\u0627\u06cc \u0645\u0646"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__kX1T7)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tBcMg)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uPqrb
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "\u0631\u0636\u0627 \u0627\u0645\u06cc\u0631\u06cc\u0627\u0646"
                        : "\u0631\u0636\u0627 \u0627\u0645\u06cc\u0631\u06cc\u0627\u0646"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ren3Z
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "\u0646\u0627\u0645 \u0645\u0627\u062f\u0631 :\u0641\u0627\u0637\u0645\u0647"
                        : "\u0646\u0627\u0645 \u0645\u0627\u062f\u0631 :\u0641\u0627\u0637\u0645\u0647"}
                    </div>
                  </Stack__>
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={generateStateValueProp($state, ["button", "color"])}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    size={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "minimal"
                        : "minimal"
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mEOo
                      )}
                    >
                      {
                        "\u062a\u063a\u06cc\u06cc\u0631 \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                      }
                    </div>
                  </Button>
                </div>
                <LineClomp
                  data-plasmic-name={"lineClomp"}
                  data-plasmic-override={overrides.lineClomp}
                  className={classNames("__wab_instance", sty.lineClomp)}
                  numberOfLine={
                    hasVariant(globalVariants, "screen", "mobile") ? 4 : 5
                  }
                  onLineChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "lineClomp",
                      "line"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xzhQ6
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return "نحوه ی استفاده از این اذکار به این صورت است که شما میتوانید هر یک از این اذکار را روی سنگهای قیمتی و نیمه قیمتی حک کنید و از آنها روی انگشتر یا گردنبند استفاده کنید همچنین میتوانید از آنها فقط در زمانهای مورد نیاز و مواردی که برای هر ذکر نوشته شده استفاده کنید. به علاوه میتوان تمام اذکار را بعد از نماز به تعدادی که گفته شده تکرار کنید تا انرژی درون آنها آزاد شده و از خواص آن بهره مند شوید.";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0646\u062d\u0648\u0647 \u06cc \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0627\u06cc\u0646 \u0627\u0630\u06a9\u0627\u0631 \u0628\u0647 \u0627\u06cc\u0646 \u0635\u0648\u0631\u062a \u0627\u0633\u062a \u06a9\u0647 \u0634\u0645\u0627 \u0645\u06cc\u062a\u0648\u0627\u0646\u06cc\u062f \u0647\u0631 \u06cc\u06a9 \u0627\u0632 \u0627\u06cc\u0646 \u0627\u0630\u06a9\u0627\u0631 \u0631\u0627 \u0631\u0648\u06cc \u0633\u0646\u06af\u0647\u0627\u06cc \u0642\u06cc\u0645\u062a\u06cc \u0648 \u0646\u06cc\u0645\u0647 \u0642\u06cc\u0645\u062a\u06cc \u062d\u06a9 \u06a9\u0646\u06cc\u062f \u0648 \u0627\u0632 \u0622\u0646\u0647\u0627 \u0631\u0648\u06cc \u0627\u0646\u06af\u0634\u062a\u0631 \u06cc\u0627 \u06af\u0631\u062f\u0646\u0628\u0646\u062f \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u06a9\u0646\u06cc\u062f \u0647\u0645\u0686\u0646\u06cc\u0646 \u0645\u06cc\u062a\u0648\u0627\u0646\u06cc\u062f \u0627\u0632 \u0622\u0646\u0647\u0627 \u0641\u0642\u0637 \u062f\u0631 \u0632\u0645\u0627\u0646\u0647\u0627\u06cc \u0645\u0648\u0631\u062f \u0646\u06cc\u0627\u0632 \u0648 \u0645\u0648\u0627\u0631\u062f\u06cc \u06a9\u0647 \u0628\u0631\u0627\u06cc \u0647\u0631 \u0630\u06a9\u0631 \u0646\u0648\u0634\u062a\u0647 \u0634\u062f\u0647 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u06a9\u0646\u06cc\u062f. \u0628\u0647 \u0639\u0644\u0627\u0648\u0647 \u0645\u06cc\u062a\u0648\u0627\u0646 \u062a\u0645\u0627\u0645 \u0627\u0630\u06a9\u0627\u0631 \u0631\u0627 \u0628\u0639\u062f \u0627\u0632 \u0646\u0645\u0627\u0632 \u0628\u0647 \u062a\u0639\u062f\u0627\u062f\u06cc \u06a9\u0647 \u06af\u0641\u062a\u0647 \u0634\u062f\u0647 \u062a\u06a9\u0631\u0627\u0631 \u06a9\u0646\u06cc\u062f \u062a\u0627 \u0627\u0646\u0631\u0698\u06cc \u062f\u0631\u0648\u0646 \u0622\u0646\u0647\u0627 \u0622\u0632\u0627\u062f \u0634\u062f\u0647 \u0648 \u0627\u0632 \u062e\u0648\u0627\u0635 \u0622\u0646 \u0628\u0647\u0631\u0647 \u0645\u0646\u062f \u0634\u0648\u06cc\u062f.      \u06a9\u0648\u062a\u0627\u0647\u0634 \u06a9\u0646";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </LineClomp>
              </Stack__>
              <div
                data-plasmic-name={
                  "pngtreeRamadanIllustrationMuslimFamilyPraying74668381"
                }
                data-plasmic-override={
                  overrides.pngtreeRamadanIllustrationMuslimFamilyPraying74668381
                }
                className={classNames(
                  projectcss.all,
                  sty.pngtreeRamadanIllustrationMuslimFamilyPraying74668381
                )}
              />
            </div>
            <Mention
              data-plasmic-name={"mention"}
              data-plasmic-override={overrides.mention}
              className={classNames("__wab_instance", sty.mention)}
              onClick={async event => {
                const $steps = {};

                $steps["updateSelect"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 4,
                        variable: {
                          objRoot: $state,
                          variablePath: ["select"]
                        },
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelect"] != null &&
                  typeof $steps["updateSelect"] === "object" &&
                  typeof $steps["updateSelect"].then === "function"
                ) {
                  $steps["updateSelect"] = await $steps["updateSelect"];
                }
              }}
              selected={(() => {
                try {
                  return $state.select;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            />
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "halamanUtama",
    "group35",
    "button",
    "lineClomp",
    "pngtreeRamadanIllustrationMuslimFamilyPraying74668381",
    "mention"
  ],
  halamanUtama: [
    "halamanUtama",
    "group35",
    "button",
    "lineClomp",
    "pngtreeRamadanIllustrationMuslimFamilyPraying74668381",
    "mention"
  ],
  group35: ["group35", "button", "lineClomp"],
  button: ["button"],
  lineClomp: ["lineClomp"],
  pngtreeRamadanIllustrationMuslimFamilyPraying74668381: [
    "pngtreeRamadanIllustrationMuslimFamilyPraying74668381"
  ],
  mention: ["mention"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  halamanUtama: "div";
  group35: "div";
  button: typeof Button;
  lineClomp: typeof LineClomp;
  pngtreeRamadanIllustrationMuslimFamilyPraying74668381: "div";
  mention: typeof Mention;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNoname__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNoname__VariantsArgs;
    args?: PlasmicNoname__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNoname__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNoname__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNoname__ArgProps,
          internalVariantPropNames: PlasmicNoname__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNoname__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNoname";
  } else {
    func.displayName = `PlasmicNoname.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNoname = Object.assign(
  // Top-level PlasmicNoname renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    halamanUtama: makeNodeComponent("halamanUtama"),
    group35: makeNodeComponent("group35"),
    button: makeNodeComponent("button"),
    lineClomp: makeNodeComponent("lineClomp"),
    pngtreeRamadanIllustrationMuslimFamilyPraying74668381: makeNodeComponent(
      "pngtreeRamadanIllustrationMuslimFamilyPraying74668381"
    ),
    mention: makeNodeComponent("mention"),

    // Metadata about props expected for PlasmicNoname
    internalVariantProps: PlasmicNoname__VariantProps,
    internalArgProps: PlasmicNoname__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNoname;
/* prettier-ignore-end */
