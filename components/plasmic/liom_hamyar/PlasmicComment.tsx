/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: Q00r5f4C3XYv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LineClomp from "../../LineClomp"; // plasmic-import: XsM8QG4wUKlk/component
import Commentlikebutton from "../../Commentlikebutton"; // plasmic-import: wOOFf0E7TUt2/component
import Reply from "../../Reply"; // plasmic-import: LqO8252FTurB/component
import ReplyLikeButton from "../../ReplyLikeButton"; // plasmic-import: DqnrMhkRW1DX/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicComment.module.css"; // plasmic-import: Q00r5f4C3XYv/css

import Icon170Icon from "./icons/PlasmicIcon__Icon170"; // plasmic-import: dXN8uxxnP9W_/icon
import Icon146Icon from "./icons/PlasmicIcon__Icon146"; // plasmic-import: oL3Gq5u9-MHL/icon

createPlasmicElementProxy;

export type PlasmicComment__VariantMembers = {
  whenHaveNoReply: "whenHaveNoReply";
  whenHaveReply: "whenHaveReply";
  showReply: "showReply";
  unnamedGroupOfVariants: "showReply" | "whenHaveReply" | "whenHaveNoReply";
  whenIsAdminTrue: "whenIsAdminTrue";
};
export type PlasmicComment__VariantsArgs = {
  whenHaveNoReply?: SingleBooleanChoiceArg<"whenHaveNoReply">;
  whenHaveReply?: SingleBooleanChoiceArg<"whenHaveReply">;
  showReply?: SingleBooleanChoiceArg<"showReply">;
  unnamedGroupOfVariants?: SingleChoiceArg<
    "showReply" | "whenHaveReply" | "whenHaveNoReply"
  >;
  whenIsAdminTrue?: SingleBooleanChoiceArg<"whenIsAdminTrue">;
};
type VariantPropType = keyof PlasmicComment__VariantsArgs;
export const PlasmicComment__VariantProps = new Array<VariantPropType>(
  "whenHaveNoReply",
  "whenHaveReply",
  "showReply",
  "unnamedGroupOfVariants",
  "whenIsAdminTrue"
);

export type PlasmicComment__ArgsType = {
  tokennnn?: string;
  commentData?: any;
  onCommentDataChange?: (val: string) => void;
  commentId?: string;
  mainName?: string;
  mainUsername?: string;
  mainImag?: string;
  mainText?: string;
  replyName?: string;
  replyUsername?: string;
  replyImag?: string;
  replyText?: string;
  mainCommentLikeCount?: string;
  replyCount?: string;
  likeComment?: boolean;
  dataUserCurrent?: string;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicComment__ArgsType;
export const PlasmicComment__ArgProps = new Array<ArgPropType>(
  "tokennnn",
  "commentData",
  "onCommentDataChange",
  "commentId",
  "mainName",
  "mainUsername",
  "mainImag",
  "mainText",
  "replyName",
  "replyUsername",
  "replyImag",
  "replyText",
  "mainCommentLikeCount",
  "replyCount",
  "likeComment",
  "dataUserCurrent",
  "onClick"
);

export type PlasmicComment__OverridesType = {
  root?: Flex__<"div">;
  lineClomp?: Flex__<typeof LineClomp>;
  coment?: Flex__<"div">;
  commentlikebutton?: Flex__<typeof Commentlikebutton>;
  reply?: Flex__<typeof Reply>;
  commentlikebutton2?: Flex__<typeof Commentlikebutton>;
  lineClomp2?: Flex__<typeof LineClomp>;
  reply2?: Flex__<typeof Reply>;
  replyLikeButton?: Flex__<typeof ReplyLikeButton>;
  reply3?: Flex__<typeof Reply>;
};

export interface DefaultCommentProps {
  tokennnn?: string;
  commentData?: any;
  onCommentDataChange?: (val: string) => void;
  commentId?: string;
  mainName?: string;
  mainUsername?: string;
  mainImag?: string;
  mainText?: string;
  replyName?: string;
  replyUsername?: string;
  replyImag?: string;
  replyText?: string;
  mainCommentLikeCount?: string;
  replyCount?: string;
  likeComment?: boolean;
  dataUserCurrent?: string;
  onClick?: (event: any) => void;
  whenHaveNoReply?: SingleBooleanChoiceArg<"whenHaveNoReply">;
  whenHaveReply?: SingleBooleanChoiceArg<"whenHaveReply">;
  showReply?: SingleBooleanChoiceArg<"showReply">;
  unnamedGroupOfVariants?: SingleChoiceArg<
    "showReply" | "whenHaveReply" | "whenHaveNoReply"
  >;
  whenIsAdminTrue?: SingleBooleanChoiceArg<"whenIsAdminTrue">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComment__RenderFunc(props: {
  variants: PlasmicComment__VariantsArgs;
  args: PlasmicComment__ArgsType;
  overrides: PlasmicComment__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          tokennnn:
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImVjYjg4M2NkLWI3ODYtNGMzZS1iYjhiLTA5ZTgyNzVkYTk4YyIsInR5cGUiOiJzZXNzaW9uIiwiaWF0IjoxNzM5NjA2MjI2fQ.F7OWRYuvRw2zxjIXAiFCtUVG9fLGRPgvYtPpLWUsz4k",
          commentId: "3",
          likeComment: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "whenHaveNoReply",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.whenHaveNoReply
      },
      {
        path: "commentData",
        type: "writable",
        variableType: "object",

        valueProp: "commentData",
        onChangeProp: "onCommentDataChange"
      },
      {
        path: "whenHaveReply",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.whenHaveReply
      },
      {
        path: "showReply",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showReply
      },
      {
        path: "commentlikebutton2.variableForLikeCountComment",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commentlikebutton.variableForLikeCountComment",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants
      },
      {
        path: "lineClomp.line",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lineClomp2[].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "variableForDataUser",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.dataUserCurrent;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "reply.afterClickUpdateData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "reply2[].afterClickUpdateData",
        type: "private",
        variableType: "object"
      },
      {
        path: "reply3.afterClickUpdateData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "currentDataForSendReply",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "whenIsAdminTrue",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.whenIsAdminTrue
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootshowReply]: hasVariant($state, "showReply", "showReply"),
          [sty.rootshowReply_unnamedGroupOfVariants_whenHaveNoReply]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply") &&
            hasVariant($state, "showReply", "showReply"),
          [sty.rootshowReply_unnamedGroupOfVariants_whenHaveNoReply_whenHaveReply]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply") &&
            hasVariant($state, "whenHaveReply", "whenHaveReply") &&
            hasVariant($state, "showReply", "showReply"),
          [sty.rootshowReply_unnamedGroupOfVariants_whenHaveReply_whenHaveNoReply]:
            hasVariant($state, "whenHaveNoReply", "whenHaveNoReply") &&
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply") &&
            hasVariant($state, "showReply", "showReply"),
          [sty.rootshowReply_whenHaveReply_whenHaveNoReply]:
            hasVariant($state, "whenHaveNoReply", "whenHaveNoReply") &&
            hasVariant($state, "whenHaveReply", "whenHaveReply") &&
            hasVariant($state, "showReply", "showReply"),
          [sty.rootunnamedGroupOfVariants_showReply]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.rootunnamedGroupOfVariants_showReply_whenHaveReply_whenHaveNoReply]:
            hasVariant($state, "whenHaveNoReply", "whenHaveNoReply") &&
            hasVariant($state, "whenHaveReply", "whenHaveReply") &&
            hasVariant($state, "unnamedGroupOfVariants", "showReply"),
          [sty.rootunnamedGroupOfVariants_whenHaveNoReply]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "whenHaveNoReply"
          ),
          [sty.rootunnamedGroupOfVariants_whenHaveNoReply_whenHaveReply]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply") &&
            hasVariant($state, "whenHaveReply", "whenHaveReply"),
          [sty.rootunnamedGroupOfVariants_whenHaveReply]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "whenHaveReply"
          ),
          [sty.rootunnamedGroupOfVariants_whenHaveReply_whenHaveNoReply]:
            hasVariant($state, "whenHaveNoReply", "whenHaveNoReply") &&
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
          [sty.rootwhenHaveNoReply]: hasVariant(
            $state,
            "whenHaveNoReply",
            "whenHaveNoReply"
          ),
          [sty.rootwhenHaveReply]: hasVariant(
            $state,
            "whenHaveReply",
            "whenHaveReply"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__euKls, {
          [sty.freeBoxshowReply__euKls5MJbg]: hasVariant(
            $state,
            "showReply",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_showReply__euKlskDgzF]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveNoReply__euKlsCt3Kq]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveReply__euKlsKmMee]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
          [sty.freeBoxwhenHaveNoReply__euKlsuOheY]: hasVariant(
            $state,
            "whenHaveNoReply",
            "whenHaveNoReply"
          ),
          [sty.freeBoxwhenHaveReply__euKlss2LwI]: hasVariant(
            $state,
            "whenHaveReply",
            "whenHaveReply"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__qFvXh, {
            [sty.freeBoxshowReply__qFvXh5MJbg]: hasVariant(
              $state,
              "showReply",
              "showReply"
            )
          })}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__yudX4)}
            displayHeight={"48px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"48px"}
            loading={"lazy"}
            src={(() => {
              try {
                return $props.mainImag;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fjoUh, {
              [sty.freeBoxunnamedGroupOfVariants_whenHaveReply__fjoUhKmMee]:
                hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
              [sty.freeBoxwhenHaveReply__fjoUhS2LwI]: hasVariant(
                $state,
                "whenHaveReply",
                "whenHaveReply"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qsMbq,
                {
                  [sty.textunnamedGroupOfVariants_whenHaveReply__qsMbqKmMee]:
                    hasVariant(
                      $state,
                      "unnamedGroupOfVariants",
                      "whenHaveReply"
                    ),
                  [sty.textwhenHaveReply__qsMbqS2LwI]: hasVariant(
                    $state,
                    "whenHaveReply",
                    "whenHaveReply"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.mainName;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "name ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__epDy6,
                {
                  [sty.textunnamedGroupOfVariants_whenHaveReply__epDy6KmMee]:
                    hasVariant(
                      $state,
                      "unnamedGroupOfVariants",
                      "whenHaveReply"
                    ),
                  [sty.textwhenHaveReply__epDy6S2LwI]: hasVariant(
                    $state,
                    "whenHaveReply",
                    "whenHaveReply"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.mainUsername;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "username";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fSs)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ewqKl)}>
            <Icon170Icon
              className={classNames(projectcss.all, sty.svg__btbrw)}
              role={"img"}
            />
          </div>
          <Icon146Icon
            className={classNames(projectcss.all, sty.svg__ekfpl)}
            role={"img"}
          />
        </Stack__>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__bb4BN, {
          [sty.freeBoxshowReply__bb4BN5MJbg]: hasVariant(
            $state,
            "showReply",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_showReply__bb4BNkDgzF]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveNoReply__bb4BNCt3Kq]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveReply__bb4BNKmMee]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
          [sty.freeBoxwhenHaveNoReply__bb4BNuOheY]: hasVariant(
            $state,
            "whenHaveNoReply",
            "whenHaveNoReply"
          ),
          [sty.freeBoxwhenHaveReply__bb4BNs2LwI]: hasVariant(
            $state,
            "whenHaveReply",
            "whenHaveReply"
          )
        })}
      >
        <LineClomp
          data-plasmic-name={"lineClomp"}
          data-plasmic-override={overrides.lineClomp}
          className={classNames("__wab_instance", sty.lineClomp)}
          more={true}
          numberOfLine={4}
          onLineChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["lineClomp", "line"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        >
          <div
            data-plasmic-name={"coment"}
            data-plasmic-override={overrides.coment}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.coment,
              {
                [sty.comentunnamedGroupOfVariants_whenHaveNoReply]: hasVariant(
                  $state,
                  "unnamedGroupOfVariants",
                  "whenHaveNoReply"
                ),
                [sty.comentunnamedGroupOfVariants_whenHaveReply]: hasVariant(
                  $state,
                  "unnamedGroupOfVariants",
                  "whenHaveReply"
                ),
                [sty.comentwhenHaveNoReply]: hasVariant(
                  $state,
                  "whenHaveNoReply",
                  "whenHaveNoReply"
                ),
                [sty.comentwhenHaveReply]: hasVariant(
                  $state,
                  "whenHaveReply",
                  "whenHaveReply"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.mainText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </LineClomp>
      </div>
      <Commentlikebutton
        data-plasmic-name={"commentlikebutton"}
        data-plasmic-override={overrides.commentlikebutton}
        carrentData={``}
        className={classNames("__wab_instance", sty.commentlikebutton, {
          [sty.commentlikebuttonshowReply]: hasVariant(
            $state,
            "showReply",
            "showReply"
          ),
          [sty.commentlikebuttonunnamedGroupOfVariants_showReply]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.commentlikebuttonunnamedGroupOfVariants_whenHaveNoReply]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
          [sty.commentlikebuttonunnamedGroupOfVariants_whenHaveReply]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
          [sty.commentlikebuttonwhenHaveNoReply]: hasVariant(
            $state,
            "whenHaveNoReply",
            "whenHaveNoReply"
          ),
          [sty.commentlikebuttonwhenHaveReply]: hasVariant(
            $state,
            "whenHaveReply",
            "whenHaveReply"
          )
        })}
        coomentLikeBool={(() => {
          try {
            return $props.likeComment;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
        likeCommentCount={(() => {
          try {
            return $props.mainCommentLikeCount;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        onVariableForLikeCountCommentChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "commentlikebutton",
            "variableForLikeCountComment"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
      />

      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__eZrem, {
          [sty.freeBoxshowReply__eZrem5MJbg]: hasVariant(
            $state,
            "showReply",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_showReply__eZremKDgzF]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveNoReply__eZremCt3Kq]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveReply__eZremKmMee]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
          [sty.freeBoxwhenHaveNoReply__eZremUOheY]: hasVariant(
            $state,
            "whenHaveNoReply",
            "whenHaveNoReply"
          ),
          [sty.freeBoxwhenHaveReply__eZremS2LwI]: hasVariant(
            $state,
            "whenHaveReply",
            "whenHaveReply"
          )
        })}
      >
        <Reply
          data-plasmic-name={"reply"}
          data-plasmic-override={overrides.reply}
          afterClickUpdateData={generateStateValueProp($state, [
            "reply",
            "afterClickUpdateData"
          ])}
          className={classNames("__wab_instance", sty.reply, {
            [sty.replyshowReply]: hasVariant($state, "showReply", "showReply"),
            [sty.replyunnamedGroupOfVariants_showReply]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "showReply"
            ),
            [sty.replyunnamedGroupOfVariants_whenHaveNoReply]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "whenHaveNoReply"
            ),
            [sty.replyunnamedGroupOfVariants_whenHaveReply]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "whenHaveReply"
            ),
            [sty.replywhenHaveNoReply]: hasVariant(
              $state,
              "whenHaveNoReply",
              "whenHaveNoReply"
            ),
            [sty.replywhenHaveReply]: hasVariant(
              $state,
              "whenHaveReply",
              "whenHaveReply"
            )
          })}
          onAfterClickUpdateDataChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "reply",
              "afterClickUpdateData"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        />

        <Commentlikebutton
          data-plasmic-name={"commentlikebutton2"}
          data-plasmic-override={overrides.commentlikebutton2}
          className={classNames("__wab_instance", sty.commentlikebutton2, {
            [sty.commentlikebutton2showReply]: hasVariant(
              $state,
              "showReply",
              "showReply"
            ),
            [sty.commentlikebutton2unnamedGroupOfVariants_showReply]:
              hasVariant($state, "unnamedGroupOfVariants", "showReply"),
            [sty.commentlikebutton2unnamedGroupOfVariants_whenHaveNoReply]:
              hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
            [sty.commentlikebutton2unnamedGroupOfVariants_whenHaveReply]:
              hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
            [sty.commentlikebutton2whenHaveNoReply]: hasVariant(
              $state,
              "whenHaveNoReply",
              "whenHaveNoReply"
            ),
            [sty.commentlikebutton2whenHaveReply]: hasVariant(
              $state,
              "whenHaveReply",
              "whenHaveReply"
            )
          })}
          likeCommentCount={
            hasVariant($state, "showReply", "showReply")
              ? (() => {
                  try {
                    return $props.mainCommentLikeCount;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return $props.mainCommentLikeCount;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
          }
          onVariableForLikeCountCommentChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "commentlikebutton2",
              "variableForLikeCountComment"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        />
      </Stack__>
      <div
        className={classNames(projectcss.all, sty.freeBox__wjP54, {
          [sty.freeBoxshowReply__wjP545MJbg]: hasVariant(
            $state,
            "showReply",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_showReply__wjP54KDgzF]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveNoReply__wjP54Ct3Kq]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveReply__wjP54KmMee]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
          [sty.freeBoxwhenHaveNoReply__wjP54UOheY]: hasVariant(
            $state,
            "whenHaveNoReply",
            "whenHaveNoReply"
          ),
          [sty.freeBoxwhenHaveReply__wjP54S2LwI]: hasVariant(
            $state,
            "whenHaveReply",
            "whenHaveReply"
          )
        })}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $state.commentData;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__dzdw, {
                [sty.freeBoxshowReply__dzdw5MJbg]: hasVariant(
                  $state,
                  "showReply",
                  "showReply"
                ),
                [sty.freeBoxunnamedGroupOfVariants_showReply__dzdwKDgzF]:
                  hasVariant($state, "unnamedGroupOfVariants", "showReply")
              })}
              key={currentIndex}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__n5Oa, {
                  [sty.freeBoxunnamedGroupOfVariants_whenHaveNoReply__n5OaCt3Kq]:
                    hasVariant(
                      $state,
                      "unnamedGroupOfVariants",
                      "whenHaveNoReply"
                    ),
                  [sty.freeBoxwhenHaveNoReply__n5OaUOheY]: hasVariant(
                    $state,
                    "whenHaveNoReply",
                    "whenHaveNoReply"
                  )
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__m637)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dRjT)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40px"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return currentItem.user.image;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c8Tm6
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.user.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iciV4
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return " در پاسخ به";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u062f\u0631 \u067e\u0627\u0633\u062e \u0628\u0647";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vxV
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.responseTo.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___3VbKo)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__z7TFc)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yJg1C
                      )}
                    >
                      {"Enter some text"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kMrO)}
                  >
                    <Icon170Icon
                      className={classNames(projectcss.all, sty.svg__rpylv)}
                      role={"img"}
                    />
                  </div>
                  <Icon146Icon
                    className={classNames(projectcss.all, sty.svg___5X9J)}
                    role={"img"}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kzmxn)}>
                <LineClomp
                  data-plasmic-name={"lineClomp2"}
                  data-plasmic-override={overrides.lineClomp2}
                  className={classNames("__wab_instance", sty.lineClomp2)}
                  more={true}
                  numberOfLine={4}
                  onLineChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "lineClomp2",
                      __plasmic_idx_0,
                      "line"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lEmW5
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.reply.text;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </LineClomp>
              </div>
              {(() => {
                const child$Props = {
                  afterClickUpdateData: generateStateValueProp($state, [
                    "reply2",
                    __plasmic_idx_0,
                    "afterClickUpdateData"
                  ]),
                  className: classNames("__wab_instance", sty.reply2, {
                    [sty.reply2showReply]: hasVariant(
                      $state,
                      "showReply",
                      "showReply"
                    ),
                    [sty.reply2unnamedGroupOfVariants_showReply]: hasVariant(
                      $state,
                      "unnamedGroupOfVariants",
                      "showReply"
                    )
                  }),
                  onAfterClickUpdateDataChange: async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "reply2",
                      __plasmic_idx_0,
                      "afterClickUpdateData"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }
                };

                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "reply2[].afterClickUpdateData",
                      initFunc: ({ $props, $state, $queries }) => ({})
                    }
                  ],
                  [__plasmic_idx_0]
                );
                return (
                  <Reply
                    data-plasmic-name={"reply2"}
                    data-plasmic-override={overrides.reply2}
                    {...child$Props}
                  />
                );
              })()}
              <ReplyLikeButton
                data-plasmic-name={"replyLikeButton"}
                data-plasmic-override={overrides.replyLikeButton}
                className={classNames("__wab_instance", sty.replyLikeButton, {
                  [sty.replyLikeButtonshowReply]: hasVariant(
                    $state,
                    "showReply",
                    "showReply"
                  ),
                  [sty.replyLikeButtonunnamedGroupOfVariants_showReply]:
                    hasVariant($state, "unnamedGroupOfVariants", "showReply")
                })}
                replyLikeCount={(() => {
                  try {
                    return currentItem.likeCount;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          );
        })}
      </div>
      <Reply
        data-plasmic-name={"reply3"}
        data-plasmic-override={overrides.reply3}
        afterClickUpdateData={generateStateValueProp($state, [
          "reply3",
          "afterClickUpdateData"
        ])}
        className={classNames("__wab_instance", sty.reply3, {
          [sty.reply3showReply]: hasVariant($state, "showReply", "showReply"),
          [sty.reply3unnamedGroupOfVariants_showReply]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.reply3unnamedGroupOfVariants_whenHaveNoReply]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "whenHaveNoReply"
          ),
          [sty.reply3unnamedGroupOfVariants_whenHaveReply]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "whenHaveReply"
          ),
          [sty.reply3whenHaveNoReply]: hasVariant(
            $state,
            "whenHaveNoReply",
            "whenHaveNoReply"
          ),
          [sty.reply3whenHaveReply]: hasVariant(
            $state,
            "whenHaveReply",
            "whenHaveReply"
          )
        })}
        dataUserForCurrent={(() => {
          try {
            return $state.variableForDataUser;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        onAfterClickUpdateDataChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "reply3",
            "afterClickUpdateData"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onClick={args.onClick}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox__xZam2, {
          [sty.freeBoxshowReply__xZam25MJbg]: hasVariant(
            $state,
            "showReply",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_showReply__xZam2KDgzF]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveNoReply__xZam2Ct3Kq]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveReply__xZam2KmMee]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
          [sty.freeBoxwhenHaveNoReply__xZam2UOheY]: hasVariant(
            $state,
            "whenHaveNoReply",
            "whenHaveNoReply"
          ),
          [sty.freeBoxwhenHaveReply__xZam2S2LwI]: hasVariant(
            $state,
            "whenHaveReply",
            "whenHaveReply"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["invokeGlobalAction"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    undefined,
                    "https://n8n.staas.ir/webhook/social/reply/replies",
                    (() => {
                      try {
                        return {
                          commentId: $props.commentId,
                          size: 10,
                          from: 0,
                          authorization: $props.tokennnn
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return {
                            commentId: "$state.commentId",
                            size: 10,
                            from: 0,
                            authorization: "$state.tokennnn"
                          };
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["invokeGlobalAction"] != null &&
            typeof $steps["invokeGlobalAction"] === "object" &&
            typeof $steps["invokeGlobalAction"].then === "function"
          ) {
            $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
          }

          $steps["updateCommentData"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["commentData"]
                  },
                  operation: 0,
                  value: $steps.invokeGlobalAction?.data.result
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateCommentData"] != null &&
            typeof $steps["updateCommentData"] === "object" &&
            typeof $steps["updateCommentData"].then === "function"
          ) {
            $steps["updateCommentData"] = await $steps["updateCommentData"];
          }

          $steps["updateCommentData2"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "unnamedGroupOfVariants",
                  operation: 0,
                  value: "showReply"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateCommentData2"] != null &&
            typeof $steps["updateCommentData2"] === "object" &&
            typeof $steps["updateCommentData2"].then === "function"
          ) {
            $steps["updateCommentData2"] = await $steps["updateCommentData2"];
          }
        }}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__aAapo,
            {
              [sty.textunnamedGroupOfVariants_whenHaveNoReply__aAapoCt3Kq]:
                hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
              [sty.textunnamedGroupOfVariants_whenHaveReply__aAapoKmMee]:
                hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
              [sty.textwhenHaveNoReply__aAapouOheY]: hasVariant(
                $state,
                "whenHaveNoReply",
                "whenHaveNoReply"
              ),
              [sty.textwhenHaveReply__aAapos2LwI]: hasVariant(
                $state,
                "whenHaveReply",
                "whenHaveReply"
              )
            }
          )}
        >
          {hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply") ? (
            <React.Fragment>
              {(() => {
                try {
                  return "مشاهده " + $props.replyCount + " پاسخ ";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0645\u0634\u0627\u0647\u062f\u0647 \u06f3 \u067e\u0627\u0633\u062e";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          ) : hasVariant($state, "whenHaveReply", "whenHaveReply") ? (
            <React.Fragment>
              {(() => {
                try {
                  return "مشاهده " + $props.replyCount + " پاسخ ";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0645\u0634\u0627\u0647\u062f\u0647 \u06f3 \u067e\u0627\u0633\u062e";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          ) : (
            <React.Fragment>
              {(() => {
                try {
                  return "مشاهده " + $props.replyCount + " پاسخ ";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0645\u0634\u0627\u0647\u062f\u0647 \u06f3 \u067e\u0627\u0633\u062e";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          )}
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__wRzZd, {
          [sty.freeBoxshowReply__wRzZd5MJbg]: hasVariant(
            $state,
            "showReply",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_showReply__wRzZdkDgzF]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveNoReply__wRzZdCt3Kq]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveReply__wRzZdKmMee]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
          [sty.freeBoxwhenHaveNoReply__wRzZduOheY]: hasVariant(
            $state,
            "whenHaveNoReply",
            "whenHaveNoReply"
          ),
          [sty.freeBoxwhenHaveReply__wRzZds2LwI]: hasVariant(
            $state,
            "whenHaveReply",
            "whenHaveReply"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateUnnamedGroupOfVariants"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "unnamedGroupOfVariants",
                  operation: 0,
                  value: "whenHaveReply"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateUnnamedGroupOfVariants"] != null &&
            typeof $steps["updateUnnamedGroupOfVariants"] === "object" &&
            typeof $steps["updateUnnamedGroupOfVariants"].then === "function"
          ) {
            $steps["updateUnnamedGroupOfVariants"] = await $steps[
              "updateUnnamedGroupOfVariants"
            ];
          }
        }}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___3H3Hg,
            {
              [sty.textunnamedGroupOfVariants_whenHaveReply___3H3HgKmMee]:
                hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
              [sty.textwhenHaveReply___3H3HgS2LwI]: hasVariant(
                $state,
                "whenHaveReply",
                "whenHaveReply"
              )
            }
          )}
        >
          {"\u0628\u0633\u062a\u0646"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "lineClomp",
    "coment",
    "commentlikebutton",
    "reply",
    "commentlikebutton2",
    "lineClomp2",
    "reply2",
    "replyLikeButton",
    "reply3"
  ],
  lineClomp: ["lineClomp", "coment"],
  coment: ["coment"],
  commentlikebutton: ["commentlikebutton"],
  reply: ["reply"],
  commentlikebutton2: ["commentlikebutton2"],
  lineClomp2: ["lineClomp2"],
  reply2: ["reply2"],
  replyLikeButton: ["replyLikeButton"],
  reply3: ["reply3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  lineClomp: typeof LineClomp;
  coment: "div";
  commentlikebutton: typeof Commentlikebutton;
  reply: typeof Reply;
  commentlikebutton2: typeof Commentlikebutton;
  lineClomp2: typeof LineClomp;
  reply2: typeof Reply;
  replyLikeButton: typeof ReplyLikeButton;
  reply3: typeof Reply;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComment__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComment__VariantsArgs;
    args?: PlasmicComment__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicComment__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicComment__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComment__ArgProps,
          internalVariantPropNames: PlasmicComment__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComment__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComment";
  } else {
    func.displayName = `PlasmicComment.${nodeName}`;
  }
  return func;
}

export const PlasmicComment = Object.assign(
  // Top-level PlasmicComment renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    lineClomp: makeNodeComponent("lineClomp"),
    coment: makeNodeComponent("coment"),
    commentlikebutton: makeNodeComponent("commentlikebutton"),
    reply: makeNodeComponent("reply"),
    commentlikebutton2: makeNodeComponent("commentlikebutton2"),
    lineClomp2: makeNodeComponent("lineClomp2"),
    reply2: makeNodeComponent("reply2"),
    replyLikeButton: makeNodeComponent("replyLikeButton"),
    reply3: makeNodeComponent("reply3"),

    // Metadata about props expected for PlasmicComment
    internalVariantProps: PlasmicComment__VariantProps,
    internalArgProps: PlasmicComment__ArgProps
  }
);

export default PlasmicComment;
/* prettier-ignore-end */
