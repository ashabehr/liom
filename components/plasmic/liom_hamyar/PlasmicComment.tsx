/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: Q00r5f4C3XYv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import UploudeTime from "../../UploudeTime"; // plasmic-import: aUO_fJR7ceN4/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import LineClomp from "../../LineClomp"; // plasmic-import: XsM8QG4wUKlk/component
import Reply from "../../Reply"; // plasmic-import: LqO8252FTurB/component
import Commentlikebutton from "../../Commentlikebutton"; // plasmic-import: wOOFf0E7TUt2/component
import ReplyLikeButton from "../../ReplyLikeButton"; // plasmic-import: DqnrMhkRW1DX/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicComment.module.css"; // plasmic-import: Q00r5f4C3XYv/css

import Icon170Icon from "./icons/PlasmicIcon__Icon170"; // plasmic-import: dXN8uxxnP9W_/icon
import Icon146Icon from "./icons/PlasmicIcon__Icon146"; // plasmic-import: oL3Gq5u9-MHL/icon
import Icon251Icon from "./icons/PlasmicIcon__Icon251"; // plasmic-import: OXj7Y-pBlB2X/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon169Icon from "./icons/PlasmicIcon__Icon169"; // plasmic-import: bUQKEz-4nD1u/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon252Icon from "./icons/PlasmicIcon__Icon252"; // plasmic-import: 7qesfxn4TT_Y/icon

createPlasmicElementProxy;

export type PlasmicComment__VariantMembers = {
  unnamedGroupOfVariants: "showReply" | "whenHaveReply" | "whenHaveNoReply";
  whenIsAdminTrue: "whenIsAdminTrue";
};
export type PlasmicComment__VariantsArgs = {
  unnamedGroupOfVariants?: SingleChoiceArg<
    "showReply" | "whenHaveReply" | "whenHaveNoReply"
  >;
  whenIsAdminTrue?: SingleBooleanChoiceArg<"whenIsAdminTrue">;
};
type VariantPropType = keyof PlasmicComment__VariantsArgs;
export const PlasmicComment__VariantProps = new Array<VariantPropType>(
  "unnamedGroupOfVariants",
  "whenIsAdminTrue"
);

export type PlasmicComment__ArgsType = {
  token?: string;
  commentData?: any;
  onCommentDataChange?: (val: string) => void;
  onClick?: (event: any) => void;
  onClick1?: (event: any) => void;
  me?: boolean;
  delet?: (event: any) => void;
  edit?: (event: any) => void;
  like?: boolean;
  onLikeChange?: (val: string) => void;
  user?: any;
};
type ArgPropType = keyof PlasmicComment__ArgsType;
export const PlasmicComment__ArgProps = new Array<ArgPropType>(
  "token",
  "commentData",
  "onCommentDataChange",
  "onClick",
  "onClick1",
  "me",
  "delet",
  "edit",
  "like",
  "onLikeChange",
  "user"
);

export type PlasmicComment__OverridesType = {
  root?: Flex__<"div">;
  popover?: Flex__<typeof AntdPopover>;
  button2?: Flex__<typeof Button>;
  button?: Flex__<typeof Button>;
  lineClomp?: Flex__<typeof LineClomp>;
  coment?: Flex__<"div">;
  reply3?: Flex__<typeof Reply>;
  commentlikebutton2?: Flex__<typeof Commentlikebutton>;
  lineClomp2?: Flex__<typeof LineClomp>;
  reply2?: Flex__<typeof Reply>;
  replyLikeButton?: Flex__<typeof ReplyLikeButton>;
  deleteModal?: Flex__<typeof AntdModal>;
  button3?: Flex__<typeof Button>;
  button4?: Flex__<typeof Button>;
};

export interface DefaultCommentProps {
  token?: string;
  commentData?: any;
  onCommentDataChange?: (val: string) => void;
  onClick?: (event: any) => void;
  onClick1?: (event: any) => void;
  me?: boolean;
  delet?: (event: any) => void;
  edit?: (event: any) => void;
  like?: boolean;
  onLikeChange?: (val: string) => void;
  user?: any;
  unnamedGroupOfVariants?: SingleChoiceArg<
    "showReply" | "whenHaveReply" | "whenHaveNoReply"
  >;
  whenIsAdminTrue?: SingleBooleanChoiceArg<"whenIsAdminTrue">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComment__RenderFunc(props: {
  variants: PlasmicComment__VariantsArgs;
  args: PlasmicComment__ArgsType;
  overrides: PlasmicComment__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          token:
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImVjYjg4M2NkLWI3ODYtNGMzZS1iYjhiLTA5ZTgyNzVkYTk4YyIsInR5cGUiOiJzZXNzaW9uIiwiaWF0IjoxNzM5NjA2MjI2fQ.F7OWRYuvRw2zxjIXAiFCtUVG9fLGRPgvYtPpLWUsz4k",
          me: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "commentData",
        type: "writable",
        variableType: "object",

        valueProp: "commentData",
        onChangeProp: "onCommentDataChange"
      },
      {
        path: "commentlikebutton2.likeCount",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants
      },
      {
        path: "lineClomp.line",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lineClomp2[].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "variableForDataUser",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.commentData.comment;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "reply2[].afterClickUpdateData",
        type: "private",
        variableType: "object"
      },
      {
        path: "reply3.afterClickUpdateData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "whenIsAdminTrue",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.whenIsAdminTrue
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "deleteModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "white"
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "commentlikebutton2.islikecomment",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.commentData.isLiked;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "like",
        type: "writable",
        variableType: "boolean",

        valueProp: "like",
        onChangeProp: "onLikeChange"
      },
      {
        path: "commentlikebutton2.like",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.commentData.isLiked;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "replyData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "myComment",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootunnamedGroupOfVariants_showReply]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.rootunnamedGroupOfVariants_whenHaveNoReply]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "whenHaveNoReply"
          ),
          [sty.rootunnamedGroupOfVariants_whenHaveNoReply_whenIsAdminTrue]:
            hasVariant($state, "whenIsAdminTrue", "whenIsAdminTrue") &&
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
          [sty.rootunnamedGroupOfVariants_whenHaveReply]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "whenHaveReply"
          ),
          [sty.rootwhenIsAdminTrue]: hasVariant(
            $state,
            "whenIsAdminTrue",
            "whenIsAdminTrue"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__euKls, {
          [sty.freeBoxunnamedGroupOfVariants_showReply__euKlskDgzF]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveNoReply__euKlsCt3Kq]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveReply__euKlsKmMee]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply")
        })}
        onClick={args.onClick1}
      >
        <div className={classNames(projectcss.all, sty.freeBox__qFvXh)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__yudX4)}
            displayHeight={"48px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"48px"}
            loading={"lazy"}
            src={(() => {
              try {
                return $props.commentData.user.image;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {
                    src: "/plasmic/liom_hamyar/images/imagePlaceholder3.svg",
                    fullWidth: 118,
                    fullHeight: 118,
                    aspectRatio: 1
                  };
                }
                throw e;
              }
            })()}
          />

          <div
            className={classNames(projectcss.all, sty.freeBox__fjoUh, {
              [sty.freeBoxunnamedGroupOfVariants_whenHaveReply__fjoUhKmMee]:
                hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qsMbq,
                {
                  [sty.textunnamedGroupOfVariants_whenHaveReply__qsMbqKmMee]:
                    hasVariant(
                      $state,
                      "unnamedGroupOfVariants",
                      "whenHaveReply"
                    )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.commentData.user.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "name ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__epDy6,
                {
                  [sty.textunnamedGroupOfVariants_whenHaveReply__epDy6KmMee]:
                    hasVariant(
                      $state,
                      "unnamedGroupOfVariants",
                      "whenHaveReply"
                    )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.commentData.user.username;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "username";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__fSs)}>
          <div className={classNames(projectcss.all, sty.freeBox__wzkeY)}>
            <UploudeTime
              className={classNames("__wab_instance", sty.uploudeTime__zqho8, {
                [sty.uploudeTimeunnamedGroupOfVariants_showReply__zqho8KDgzF]:
                  hasVariant($state, "unnamedGroupOfVariants", "showReply")
              })}
              posttime={(() => {
                try {
                  return (() => {
                    function addTime(original, addHours, addMinutes) {
                      let date = new Date(
                        original.year,
                        original.month - 1,
                        original.day,
                        original.hour,
                        original.minute,
                        original.second
                      );
                      date.setHours(date.getHours() + addHours);
                      date.setMinutes(date.getMinutes() + addMinutes);
                      return {
                        year: date.getFullYear(),
                        month: date.getMonth() + 1,
                        day: date.getDate(),
                        hour: date.getHours(),
                        minute: date.getMinutes(),
                        second: date.getSeconds(),
                        nanosecond: original.nanosecond,
                        timeZoneOffsetSeconds: original.timeZoneOffsetSeconds
                      };
                    }
                    const newCreatedAt = addTime(
                      $props.commentData.comment.createdAt,
                      3,
                      30
                    );
                    return newCreatedAt;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ewqKl)}>
            <Icon170Icon
              className={classNames(projectcss.all, sty.svg__btbrw)}
              role={"img"}
            />
          </div>
          <AntdPopover
            data-plasmic-name={"popover"}
            data-plasmic-override={overrides.popover}
            arrow={true}
            className={classNames("__wab_instance", sty.popover)}
            content={
              <React.Fragment>
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  color={generateStateValueProp($state, ["button2", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return ($state.popover.open = false);
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["runEdit"] = true
                      ? (() => {
                          const actionArgs = { eventRef: $props["edit"] };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runEdit"] != null &&
                      typeof $steps["runEdit"] === "object" &&
                      typeof $steps["runEdit"].then === "function"
                    ) {
                      $steps["runEdit"] = await $steps["runEdit"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  showStartIcon={true}
                  size={"compact"}
                  startIcon={
                    <Icon251Icon
                      className={classNames(projectcss.all, sty.svg___8Jmz)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bPmhE
                    )}
                  >
                    {"\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0646\u0638\u0631"}
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={generateStateValueProp($state, ["button", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updatePopoverOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["popover", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePopoverOpen"] != null &&
                      typeof $steps["updatePopoverOpen"] === "object" &&
                      typeof $steps["updatePopoverOpen"].then === "function"
                    ) {
                      $steps["updatePopoverOpen"] = await $steps[
                        "updatePopoverOpen"
                      ];
                    }

                    $steps["updateDeleteModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["deleteModal", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDeleteModalOpen"] != null &&
                      typeof $steps["updateDeleteModalOpen"] === "object" &&
                      typeof $steps["updateDeleteModalOpen"].then === "function"
                    ) {
                      $steps["updateDeleteModalOpen"] = await $steps[
                        "updateDeleteModalOpen"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  showStartIcon={true}
                  size={"compact"}
                  startIcon={
                    <Icon169Icon
                      className={classNames(projectcss.all, sty.svg__nYKn7)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__g9Xtq
                    )}
                  >
                    {"\u062d\u0630\u0641 \u0646\u0638\u0631"}
                  </div>
                </Button>
              </React.Fragment>
            }
            contentText={"Popover contents"}
            defaultOpen={false}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            mouseEnterDelay={0}
            mouseLeaveDelay={0}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["popover", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["popover", "open"])}
            placement={"bottom"}
            popoverScopeClassName={sty["popover__popover"]}
            title={null}
            trigger={"click"}
          >
            {(() => {
              try {
                return $props.me;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Icon146Icon
                className={classNames(projectcss.all, sty.svg__ekfpl)}
                role={"img"}
              />
            ) : null}
          </AntdPopover>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__bb4BN, {
          [sty.freeBoxunnamedGroupOfVariants_showReply__bb4BNkDgzF]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveNoReply__bb4BNCt3Kq]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveReply__bb4BNKmMee]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply")
        })}
      >
        <LineClomp
          data-plasmic-name={"lineClomp"}
          data-plasmic-override={overrides.lineClomp}
          className={classNames("__wab_instance", sty.lineClomp)}
          more={true}
          numberOfLine={4}
          onLineChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["lineClomp", "line"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        >
          <div
            data-plasmic-name={"coment"}
            data-plasmic-override={overrides.coment}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.coment,
              {
                [sty.comentunnamedGroupOfVariants_whenHaveNoReply]: hasVariant(
                  $state,
                  "unnamedGroupOfVariants",
                  "whenHaveNoReply"
                ),
                [sty.comentunnamedGroupOfVariants_whenHaveReply]: hasVariant(
                  $state,
                  "unnamedGroupOfVariants",
                  "whenHaveReply"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.commentData.comment.text;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </LineClomp>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__eZrem, {
          [sty.freeBoxunnamedGroupOfVariants_showReply__eZremKDgzF]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveNoReply__eZremCt3Kq]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveReply__eZremKmMee]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
          [sty.freeBoxwhenIsAdminTrue__eZremRBgTe]: hasVariant(
            $state,
            "whenIsAdminTrue",
            "whenIsAdminTrue"
          )
        })}
      >
        <Reply
          data-plasmic-name={"reply3"}
          data-plasmic-override={overrides.reply3}
          afterClickUpdateData={generateStateValueProp($state, [
            "reply3",
            "afterClickUpdateData"
          ])}
          className={classNames("__wab_instance", sty.reply3, {
            [sty.reply3unnamedGroupOfVariants_showReply]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "showReply"
            ),
            [sty.reply3unnamedGroupOfVariants_whenHaveNoReply]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "whenHaveNoReply"
            ),
            [sty.reply3unnamedGroupOfVariants_whenHaveReply]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "whenHaveReply"
            ),
            [sty.reply3whenIsAdminTrue]: hasVariant(
              $state,
              "whenIsAdminTrue",
              "whenIsAdminTrue"
            )
          })}
          dataUserForCurrent={(() => {
            try {
              return $state.variableForDataUser;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onAfterClickUpdateDataChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "reply3",
              "afterClickUpdateData"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onClick={args.onClick}
        />

        <Commentlikebutton
          data-plasmic-name={"commentlikebutton2"}
          data-plasmic-override={overrides.commentlikebutton2}
          className={classNames("__wab_instance", sty.commentlikebutton2, {
            [sty.commentlikebutton2unnamedGroupOfVariants_showReply]:
              hasVariant($state, "unnamedGroupOfVariants", "showReply"),
            [sty.commentlikebutton2unnamedGroupOfVariants_whenHaveNoReply]:
              hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
            [sty.commentlikebutton2unnamedGroupOfVariants_whenHaveReply]:
              hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply")
          })}
          coomentLikeBool={false}
          islikecomment={generateStateValueProp($state, [
            "commentlikebutton2",
            "islikecomment"
          ])}
          like={generateStateValueProp($state, ["commentlikebutton2", "like"])}
          likeCommentCount={(() => {
            try {
              return $props.commentData.likeCount;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          modalvalueforcommentlike={false}
          onClick={async () => {
            const $steps = {};

            $steps["updateCommentDataIsLiked"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["commentData", "isLiked"]
                    },
                    operation: 4,
                    value: !$props.commentData.isLiked
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    const oldValue = $stateGet(objRoot, variablePath);
                    $stateSet(objRoot, variablePath, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateCommentDataIsLiked"] != null &&
              typeof $steps["updateCommentDataIsLiked"] === "object" &&
              typeof $steps["updateCommentDataIsLiked"].then === "function"
            ) {
              $steps["updateCommentDataIsLiked"] = await $steps[
                "updateCommentDataIsLiked"
              ];
            }

            $steps["invokeGlobalAction"] =
              $props.commentData.isLiked == true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/rest/social/comment/comment/like",
                        (() => {
                          try {
                            return {
                              commentId: $props.commentData.comment.id,
                              type: "",
                              subType: "",
                              authorization: $props.token
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        undefined
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }

            $steps["invokeGlobalAction2"] =
              $props.commentData.isLiked != true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://n8n.staas.ir/webhook/rest/social/comment/comment/like",
                        undefined,
                        (() => {
                          try {
                            return {
                              commentId: $props.commentData.comment.id,
                              authorization: $props.token
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["invokeGlobalAction2"] != null &&
              typeof $steps["invokeGlobalAction2"] === "object" &&
              typeof $steps["invokeGlobalAction2"].then === "function"
            ) {
              $steps["invokeGlobalAction2"] = await $steps[
                "invokeGlobalAction2"
              ];
            }

            $steps["invokeGlobalAction3"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "POST",
                      "https://n8n.staas.ir/webhook/social/log",
                      undefined,
                      (() => {
                        try {
                          return {
                            userId: $props.user.id,
                            pageName: "socialPostPage",
                            action: $props.commentData.isLiked
                              ? "likeCommentPost"
                              : "unlikeCommentPost"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction3"] != null &&
              typeof $steps["invokeGlobalAction3"] === "object" &&
              typeof $steps["invokeGlobalAction3"].then === "function"
            ) {
              $steps["invokeGlobalAction3"] = await $steps[
                "invokeGlobalAction3"
              ];
            }
          }}
          onIslikecommentChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "commentlikebutton2",
              "islikecomment"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLikeChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "commentlikebutton2",
              "like"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLikeCountChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "commentlikebutton2",
              "likeCount"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          shareForLikeComment={false}
        />
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__wjP54, {
          [sty.freeBoxunnamedGroupOfVariants_showReply__wjP54KDgzF]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveNoReply__wjP54Ct3Kq]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveReply__wjP54KmMee]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply")
        })}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $state.replyData;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__dzdw, {
                [sty.freeBoxunnamedGroupOfVariants_showReply__dzdwKDgzF]:
                  hasVariant($state, "unnamedGroupOfVariants", "showReply")
              })}
              key={currentIndex}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__n5Oa, {
                  [sty.freeBoxunnamedGroupOfVariants_whenHaveNoReply__n5OaCt3Kq]:
                    hasVariant(
                      $state,
                      "unnamedGroupOfVariants",
                      "whenHaveNoReply"
                    )
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__m637)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dRjT)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40px"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return currentItem.user.image;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c8Tm6
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.user.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iciV4
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return " در پاسخ به";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u062f\u0631 \u067e\u0627\u0633\u062e \u0628\u0647";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vxV
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.responseTo.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___3VbKo)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__z7TFc)}
                  >
                    <UploudeTime
                      className={classNames(
                        "__wab_instance",
                        sty.uploudeTime__hfMLu
                      )}
                      posttime={(() => {
                        try {
                          return (() => {
                            function addTime(original, addHours, addMinutes) {
                              let date = new Date(
                                original.year,
                                original.month - 1,
                                original.day,
                                original.hour,
                                original.minute,
                                original.second
                              );
                              date.setHours(date.getHours() + addHours);
                              date.setMinutes(date.getMinutes() + addMinutes);
                              return {
                                year: date.getFullYear(),
                                month: date.getMonth() + 1,
                                day: date.getDate(),
                                hour: date.getHours(),
                                minute: date.getMinutes(),
                                second: date.getSeconds(),
                                nanosecond: original.nanosecond,
                                timeZoneOffsetSeconds:
                                  original.timeZoneOffsetSeconds
                              };
                            }
                            const newCreatedAt = addTime(
                              currentItem.reply.updatedAt,
                              3,
                              30
                            );
                            return newCreatedAt;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kMrO)}
                  >
                    <Icon170Icon
                      className={classNames(projectcss.all, sty.svg__rpylv)}
                      role={"img"}
                    />
                  </div>
                  <Icon146Icon
                    className={classNames(projectcss.all, sty.svg___5X9J)}
                    role={"img"}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kzmxn)}>
                <LineClomp
                  data-plasmic-name={"lineClomp2"}
                  data-plasmic-override={overrides.lineClomp2}
                  className={classNames("__wab_instance", sty.lineClomp2)}
                  more={true}
                  numberOfLine={4}
                  onLineChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "lineClomp2",
                      __plasmic_idx_0,
                      "line"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lEmW5
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.reply.text;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </LineClomp>
              </div>
              {(() => {
                const child$Props = {
                  afterClickUpdateData: generateStateValueProp($state, [
                    "reply2",
                    __plasmic_idx_0,
                    "afterClickUpdateData"
                  ]),
                  className: classNames("__wab_instance", sty.reply2, {
                    [sty.reply2unnamedGroupOfVariants_showReply]: hasVariant(
                      $state,
                      "unnamedGroupOfVariants",
                      "showReply"
                    )
                  }),
                  onAfterClickUpdateDataChange: async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "reply2",
                      __plasmic_idx_0,
                      "afterClickUpdateData"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  },
                  onClick: async event => {
                    const $steps = {};

                    $steps["runOnClick"] = true
                      ? (() => {
                          const actionArgs = { eventRef: $props["onClick"] };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runOnClick"] != null &&
                      typeof $steps["runOnClick"] === "object" &&
                      typeof $steps["runOnClick"].then === "function"
                    ) {
                      $steps["runOnClick"] = await $steps["runOnClick"];
                    }
                  }
                };

                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "reply2[].afterClickUpdateData",
                      initFunc: ({ $props, $state, $queries }) => ({})
                    }
                  ],
                  [__plasmic_idx_0]
                );
                return (
                  <Reply
                    data-plasmic-name={"reply2"}
                    data-plasmic-override={overrides.reply2}
                    {...child$Props}
                  />
                );
              })()}
              <ReplyLikeButton
                data-plasmic-name={"replyLikeButton"}
                data-plasmic-override={overrides.replyLikeButton}
                className={classNames("__wab_instance", sty.replyLikeButton, {
                  [sty.replyLikeButtonunnamedGroupOfVariants_showReply]:
                    hasVariant($state, "unnamedGroupOfVariants", "showReply")
                })}
                replyLikeCount={(() => {
                  try {
                    return currentItem.likeCount;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          );
        })}
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__xZam2, {
          [sty.freeBoxunnamedGroupOfVariants_showReply__xZam2KDgzF]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveNoReply__xZam2Ct3Kq]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveReply__xZam2KmMee]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateCommentData4"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["loading"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateCommentData4"] != null &&
            typeof $steps["updateCommentData4"] === "object" &&
            typeof $steps["updateCommentData4"].then === "function"
          ) {
            $steps["updateCommentData4"] = await $steps["updateCommentData4"];
          }

          $steps["invokeGlobalAction"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    undefined,
                    "https://n8n.staas.ir/webhook/social/reply/replies",
                    (() => {
                      try {
                        return {
                          commentId: $props.commentData.comment.id,
                          size: 10,
                          from: 0,
                          authorization: $props.token
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return {
                            commentId: "$state.commentId",
                            size: 10,
                            from: 0,
                            authorization: "$state.tokennnn"
                          };
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["invokeGlobalAction"] != null &&
            typeof $steps["invokeGlobalAction"] === "object" &&
            typeof $steps["invokeGlobalAction"].then === "function"
          ) {
            $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
          }

          $steps["updateReplyData"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["replyData"]
                  },
                  operation: 0,
                  value: $steps.invokeGlobalAction?.data.result
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateReplyData"] != null &&
            typeof $steps["updateReplyData"] === "object" &&
            typeof $steps["updateReplyData"].then === "function"
          ) {
            $steps["updateReplyData"] = await $steps["updateReplyData"];
          }

          $steps["updateCommentData2"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "unnamedGroupOfVariants",
                  operation: 0,
                  value: "showReply"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateCommentData2"] != null &&
            typeof $steps["updateCommentData2"] === "object" &&
            typeof $steps["updateCommentData2"].then === "function"
          ) {
            $steps["updateCommentData2"] = await $steps["updateCommentData2"];
          }

          $steps["updateCommentData5"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["loading"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateCommentData5"] != null &&
            typeof $steps["updateCommentData5"] === "object" &&
            typeof $steps["updateCommentData5"].then === "function"
          ) {
            $steps["updateCommentData5"] = await $steps["updateCommentData5"];
          }
        }}
      >
        {(() => {
          try {
            return !$state.loading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__aAapo,
              {
                [sty.textunnamedGroupOfVariants_showReply__aAapokDgzF]:
                  hasVariant($state, "unnamedGroupOfVariants", "showReply"),
                [sty.textunnamedGroupOfVariants_showReply_whenIsAdminTrue__aAapokDgzFRBgTe]:
                  hasVariant($state, "whenIsAdminTrue", "whenIsAdminTrue") &&
                  hasVariant($state, "unnamedGroupOfVariants", "showReply"),
                [sty.textunnamedGroupOfVariants_whenHaveNoReply__aAapoCt3Kq]:
                  hasVariant(
                    $state,
                    "unnamedGroupOfVariants",
                    "whenHaveNoReply"
                  ),
                [sty.textunnamedGroupOfVariants_whenHaveNoReply_whenIsAdminTrue__aAapoCt3KqRBgTe]:
                  hasVariant($state, "whenIsAdminTrue", "whenIsAdminTrue") &&
                  hasVariant(
                    $state,
                    "unnamedGroupOfVariants",
                    "whenHaveNoReply"
                  ),
                [sty.textunnamedGroupOfVariants_whenHaveReply__aAapoKmMee]:
                  hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
                [sty.textunnamedGroupOfVariants_whenHaveReply_whenIsAdminTrue__aAapoKmMeeRBgTe]:
                  hasVariant($state, "whenIsAdminTrue", "whenIsAdminTrue") &&
                  hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply"),
                [sty.textwhenIsAdminTrue__aAaporBgTe]: hasVariant(
                  $state,
                  "whenIsAdminTrue",
                  "whenIsAdminTrue"
                )
              }
            )}
          >
            {hasVariant($state, "whenIsAdminTrue", "whenIsAdminTrue") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return `مشاهده ${$props.commentData.replyCount} پاسخ`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0645\u0634\u0627\u0647\u062f\u0647 \u06f3 \u067e\u0627\u0633\u062e";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : hasVariant(
                $state,
                "unnamedGroupOfVariants",
                "whenHaveNoReply"
              ) ? (
              <React.Fragment>
                {(() => {
                  try {
                    return `مشاهده ${$props.commentData.replyCount} پاسخ`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0645\u0634\u0627\u0647\u062f\u0647 \u06f3 \u067e\u0627\u0633\u062e";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : hasVariant(
                $state,
                "unnamedGroupOfVariants",
                "whenHaveReply"
              ) ? (
              <React.Fragment>
                {(() => {
                  try {
                    return `مشاهده ${$props.commentData.replyCount} پاسخ`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0645\u0634\u0627\u0647\u062f\u0647 \u06f3 \u067e\u0627\u0633\u062e";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : hasVariant($state, "unnamedGroupOfVariants", "showReply") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return `مشاهده ${$props.commentData.replyCount} پاسخ`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0645\u0634\u0627\u0647\u062f\u0647 \u06f3 \u067e\u0627\u0633\u062e";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : (
              <React.Fragment>
                {(() => {
                  try {
                    return `مشاهده ${$props.commentData.replyCount} پاسخ`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0645\u0634\u0627\u0647\u062f\u0647 \u06f3 \u067e\u0627\u0633\u062e";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            )}
          </div>
        ) : null}
        {(() => {
          try {
            return $state.loading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Icon115Icon
            className={classNames(projectcss.all, sty.svg__zzNeW)}
            role={"img"}
          />
        ) : null}
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__wRzZd, {
          [sty.freeBoxunnamedGroupOfVariants_showReply__wRzZdkDgzF]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "showReply"
          ),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveNoReply__wRzZdCt3Kq]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveNoReply"),
          [sty.freeBoxunnamedGroupOfVariants_whenHaveReply__wRzZdKmMee]:
            hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateUnnamedGroupOfVariants"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "unnamedGroupOfVariants",
                  operation: 0,
                  value: "whenHaveReply"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateUnnamedGroupOfVariants"] != null &&
            typeof $steps["updateUnnamedGroupOfVariants"] === "object" &&
            typeof $steps["updateUnnamedGroupOfVariants"].then === "function"
          ) {
            $steps["updateUnnamedGroupOfVariants"] = await $steps[
              "updateUnnamedGroupOfVariants"
            ];
          }
        }}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___3H3Hg,
            {
              [sty.textunnamedGroupOfVariants_whenHaveReply___3H3HgKmMee]:
                hasVariant($state, "unnamedGroupOfVariants", "whenHaveReply")
            }
          )}
        >
          {"\u0628\u0633\u062a\u0646"}
        </div>
      </div>
      <AntdModal
        data-plasmic-name={"deleteModal"}
        data-plasmic-override={overrides.deleteModal}
        className={classNames("__wab_instance", sty.deleteModal)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        hideFooter={true}
        modalContentClassName={classNames({ [sty["pcls_ZeFNv5rMuKol"]]: true })}
        modalScopeClassName={sty["deleteModal__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["deleteModal", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["deleteModal", "open"])}
        title={
          <div className={classNames(projectcss.all, sty.freeBox__pn8Ry)}>
            <Icon252Icon
              className={classNames(projectcss.all, sty.svg__fcV5X)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0FpTf
              )}
            >
              {"\u062d\u0630\u0641 \u0646\u0638\u0631"}
            </div>
          </div>
        }
        trigger={null}
      >
        <div className={classNames(projectcss.all, sty.freeBox__tf9Il)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__liMce
            )}
          >
            {
              "\u0627\u0632 \u062d\u0630\u0641 \u06a9\u0631\u062f\u0646 \u06a9\u0627\u0645\u0646\u062a \u062e\u0648\u062f \u0645\u0637\u0645\u0626\u0646 \u0647\u0633\u062a\u06cc\u062f\u061f"
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__fHwKv)}>
            <div className={classNames(projectcss.all, sty.freeBox___3Wjb2)}>
              <Button
                data-plasmic-name={"button3"}
                data-plasmic-override={overrides.button3}
                className={classNames("__wab_instance", sty.button3)}
                color={generateStateValueProp($state, ["button3", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateMyComment"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["myComment"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateMyComment"] != null &&
                    typeof $steps["updateMyComment"] === "object" &&
                    typeof $steps["updateMyComment"].then === "function"
                  ) {
                    $steps["updateMyComment"] = await $steps["updateMyComment"];
                  }

                  $steps["runDelet"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["delet"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runDelet"] != null &&
                    typeof $steps["runDelet"] === "object" &&
                    typeof $steps["runDelet"].then === "function"
                  ) {
                    $steps["runDelet"] = await $steps["runDelet"];
                  }

                  $steps["updateDeleteModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["deleteModal", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDeleteModalOpen"] != null &&
                    typeof $steps["updateDeleteModalOpen"] === "object" &&
                    typeof $steps["updateDeleteModalOpen"].then === "function"
                  ) {
                    $steps["updateDeleteModalOpen"] = await $steps[
                      "updateDeleteModalOpen"
                    ];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0631\u0633\u0627\u0644 \u0634\u062f ",
                            "bottom-center"
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button3", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                size={"compact"}
              >
                {"\u062d\u0630\u0641"}
              </Button>
            </div>
            <Button
              data-plasmic-name={"button4"}
              data-plasmic-override={overrides.button4}
              className={classNames("__wab_instance", sty.button4)}
              color={generateStateValueProp($state, ["button4", "color"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateDeleteModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["deleteModal", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDeleteModalOpen"] != null &&
                  typeof $steps["updateDeleteModalOpen"] === "object" &&
                  typeof $steps["updateDeleteModalOpen"].then === "function"
                ) {
                  $steps["updateDeleteModalOpen"] = await $steps[
                    "updateDeleteModalOpen"
                  ];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button4", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              size={"compact"}
            >
              {"\u0641\u0639\u0644\u0627 \u0646\u0647"}
            </Button>
          </div>
        </div>
      </AntdModal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "popover",
    "button2",
    "button",
    "lineClomp",
    "coment",
    "reply3",
    "commentlikebutton2",
    "lineClomp2",
    "reply2",
    "replyLikeButton",
    "deleteModal",
    "button3",
    "button4"
  ],
  popover: ["popover", "button2", "button"],
  button2: ["button2"],
  button: ["button"],
  lineClomp: ["lineClomp", "coment"],
  coment: ["coment"],
  reply3: ["reply3"],
  commentlikebutton2: ["commentlikebutton2"],
  lineClomp2: ["lineClomp2"],
  reply2: ["reply2"],
  replyLikeButton: ["replyLikeButton"],
  deleteModal: ["deleteModal", "button3", "button4"],
  button3: ["button3"],
  button4: ["button4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  popover: typeof AntdPopover;
  button2: typeof Button;
  button: typeof Button;
  lineClomp: typeof LineClomp;
  coment: "div";
  reply3: typeof Reply;
  commentlikebutton2: typeof Commentlikebutton;
  lineClomp2: typeof LineClomp;
  reply2: typeof Reply;
  replyLikeButton: typeof ReplyLikeButton;
  deleteModal: typeof AntdModal;
  button3: typeof Button;
  button4: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComment__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComment__VariantsArgs;
    args?: PlasmicComment__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicComment__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicComment__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComment__ArgProps,
          internalVariantPropNames: PlasmicComment__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComment__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComment";
  } else {
    func.displayName = `PlasmicComment.${nodeName}`;
  }
  return func;
}

export const PlasmicComment = Object.assign(
  // Top-level PlasmicComment renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    popover: makeNodeComponent("popover"),
    button2: makeNodeComponent("button2"),
    button: makeNodeComponent("button"),
    lineClomp: makeNodeComponent("lineClomp"),
    coment: makeNodeComponent("coment"),
    reply3: makeNodeComponent("reply3"),
    commentlikebutton2: makeNodeComponent("commentlikebutton2"),
    lineClomp2: makeNodeComponent("lineClomp2"),
    reply2: makeNodeComponent("reply2"),
    replyLikeButton: makeNodeComponent("replyLikeButton"),
    deleteModal: makeNodeComponent("deleteModal"),
    button3: makeNodeComponent("button3"),
    button4: makeNodeComponent("button4"),

    // Metadata about props expected for PlasmicComment
    internalVariantProps: PlasmicComment__VariantProps,
    internalArgProps: PlasmicComment__ArgProps
  }
);

export default PlasmicComment;
/* prettier-ignore-end */
