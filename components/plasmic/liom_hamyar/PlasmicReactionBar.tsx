// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 4BabvpvQ8lyP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SocialIcon from "../../SocialIcon"; // plasmic-import: lWxUKYG03CLw/component
import Save from "../../Save"; // plasmic-import: _x22uBJ4ZqC9/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicReactionBar.module.css"; // plasmic-import: 4BabvpvQ8lyP/css

import Icon150Icon from "./icons/PlasmicIcon__Icon150"; // plasmic-import: 4NJq6NYKqIPu/icon
import Icon149Icon from "./icons/PlasmicIcon__Icon149"; // plasmic-import: bJ7kVZQK3ovZ/icon
import Icon147Icon from "./icons/PlasmicIcon__Icon147"; // plasmic-import: 2SO3BEHlRKXI/icon

createPlasmicElementProxy;

export type PlasmicReactionBar__VariantMembers = {
  like: "like";
};
export type PlasmicReactionBar__VariantsArgs = {
  like?: SingleBooleanChoiceArg<"like">;
};
type VariantPropType = keyof PlasmicReactionBar__VariantsArgs;
export const PlasmicReactionBar__VariantProps = new Array<VariantPropType>(
  "like"
);

export type PlasmicReactionBar__ArgsType = {};
type ArgPropType = keyof PlasmicReactionBar__ArgsType;
export const PlasmicReactionBar__ArgProps = new Array<ArgPropType>();

export type PlasmicReactionBar__OverridesType = {
  root?: Flex__<"div">;
  socialIcon?: Flex__<typeof SocialIcon>;
  save?: Flex__<typeof Save>;
};

export interface DefaultReactionBarProps {
  like?: SingleBooleanChoiceArg<"like">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReactionBar__RenderFunc(props: {
  variants: PlasmicReactionBar__VariantsArgs;
  args: PlasmicReactionBar__ArgsType;
  overrides: PlasmicReactionBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "like",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.like
      },
      {
        path: "socialIcon.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cick;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "socialIcon.unnamedVariant",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.animio;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "socialIcon.cick",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "socialIcon.animio",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootlike]: hasVariant($state, "like", "like") }
      )}
    >
      <SocialIcon
        data-plasmic-name={"socialIcon"}
        data-plasmic-override={overrides.socialIcon}
        animio={generateStateValueProp($state, ["socialIcon", "animio"])}
        cick={generateStateValueProp($state, ["socialIcon", "cick"])}
        className={classNames("__wab_instance", sty.socialIcon, {
          [sty.socialIconlike]: hasVariant($state, "like", "like")
        })}
        click={generateStateValueProp($state, ["socialIcon", "click"])}
        onAnimioChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["socialIcon", "animio"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onCickChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["socialIcon", "cick"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onClick={async event => {
          const $steps = {};

          $steps["updateSocialIconClick2"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["socialIcon", "animio"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSocialIconClick2"] != null &&
            typeof $steps["updateSocialIconClick2"] === "object" &&
            typeof $steps["updateSocialIconClick2"].then === "function"
          ) {
            $steps["updateSocialIconClick2"] = await $steps[
              "updateSocialIconClick2"
            ];
          }

          $steps["invokeGlobalAction"] = true
            ? (() => {
                const actionArgs = { args: [300] };
                return $globalActions["Fragment.wait"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["invokeGlobalAction"] != null &&
            typeof $steps["invokeGlobalAction"] === "object" &&
            typeof $steps["invokeGlobalAction"].then === "function"
          ) {
            $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
          }

          $steps["updateSocialIconAnimio"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["socialIcon", "animio"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSocialIconAnimio"] != null &&
            typeof $steps["updateSocialIconAnimio"] === "object" &&
            typeof $steps["updateSocialIconAnimio"].then === "function"
          ) {
            $steps["updateSocialIconAnimio"] = await $steps[
              "updateSocialIconAnimio"
            ];
          }

          $steps["updateSocialIconCick"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["socialIcon", "cick"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSocialIconCick"] != null &&
            typeof $steps["updateSocialIconCick"] === "object" &&
            typeof $steps["updateSocialIconCick"].then === "function"
          ) {
            $steps["updateSocialIconCick"] = await $steps[
              "updateSocialIconCick"
            ];
          }
        }}
        onClickChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["socialIcon", "click"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onUnnamedVariantChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "socialIcon",
            "unnamedVariant"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        unnamedVariant={generateStateValueProp($state, [
          "socialIcon",
          "unnamedVariant"
        ])}
      />

      <div className={classNames(projectcss.all, sty.freeBox__wtyMg)}>
        <Icon150Icon
          className={classNames(projectcss.all, sty.svg__akMaT)}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__dfrJr
          )}
        >
          {"432"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__npWqs)}>
        <Icon149Icon
          className={classNames(projectcss.all, sty.svg__nI0Lk)}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__fhzUy
          )}
        >
          {"32"}
        </div>
      </div>
      <Save
        data-plasmic-name={"save"}
        data-plasmic-override={overrides.save}
        className={classNames("__wab_instance", sty.save, {
          [sty.savelike]: hasVariant($state, "like", "like")
        })}
      />

      <div className={classNames(projectcss.all, sty.freeBox__kKk6V)}>
        <Icon147Icon
          className={classNames(projectcss.all, sty.svg__pa8Vp)}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wEof0
          )}
        >
          {"143"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "socialIcon", "save"],
  socialIcon: ["socialIcon"],
  save: ["save"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  socialIcon: typeof SocialIcon;
  save: typeof Save;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReactionBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReactionBar__VariantsArgs;
    args?: PlasmicReactionBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReactionBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicReactionBar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReactionBar__ArgProps,
          internalVariantPropNames: PlasmicReactionBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReactionBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReactionBar";
  } else {
    func.displayName = `PlasmicReactionBar.${nodeName}`;
  }
  return func;
}

export const PlasmicReactionBar = Object.assign(
  // Top-level PlasmicReactionBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    socialIcon: makeNodeComponent("socialIcon"),
    save: makeNodeComponent("save"),

    // Metadata about props expected for PlasmicReactionBar
    internalVariantProps: PlasmicReactionBar__VariantProps,
    internalArgProps: PlasmicReactionBar__ArgProps
  }
);

export default PlasmicReactionBar;
/* prettier-ignore-end */
