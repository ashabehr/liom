/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 2KPwbs47ITM_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Search from "../../Search"; // plasmic-import: fmyovDT1Cvc-/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import Seen from "../../Seen"; // plasmic-import: JqwoohhEEPXm/component
import LineClomp from "../../LineClomp"; // plasmic-import: XsM8QG4wUKlk/component
import Star from "../../Star"; // plasmic-import: i69c2Ujsm_H6/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicChatviow.module.css"; // plasmic-import: 2KPwbs47ITM_/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon

createPlasmicElementProxy;

export type PlasmicChatviow__VariantMembers = {};
export type PlasmicChatviow__VariantsArgs = {};
type VariantPropType = keyof PlasmicChatviow__VariantsArgs;
export const PlasmicChatviow__VariantProps = new Array<VariantPropType>();

export type PlasmicChatviow__ArgsType = {};
type ArgPropType = keyof PlasmicChatviow__ArgsType;
export const PlasmicChatviow__ArgProps = new Array<ArgPropType>();

export type PlasmicChatviow__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  favicon?: Flex__<typeof Embed>;
  section?: Flex__<"section">;
  svg?: Flex__<"svg">;
  search?: Flex__<typeof Search>;
  antdInput?: Flex__<typeof Input>;
  chat?: Flex__<typeof ApiRequest>;
  mensah3?: Flex__<"div">;
  mensah2?: Flex__<"div">;
  seen?: Flex__<typeof Seen>;
  lineClomp?: Flex__<typeof LineClomp>;
};

export interface DefaultChatviowProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChatviow__RenderFunc(props: {
  variants: PlasmicChatviow__VariantsArgs;
  args: PlasmicChatviow__ArgsType;
  overrides: PlasmicChatviow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "id",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "chats",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "btnloading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "listId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "sublist",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "filter",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.chat.data.list;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "lineClomp[].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "loadingPage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "chat.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "chat.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "chat.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "search.variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.antdInput.value != "" &&
                $state.antdInput.value != undefined
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var getCookie = name => {
                            const cookies = document.cookie.split("; ");
                            for (let cookie of cookies) {
                              const [key, value] = cookie.split("=");
                              if (key === name) return JSON.parse(value)[0];
                            }
                            return "";
                          };
                          return ($state.token = getCookie("token"));
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />

          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              hasVariant(globalVariants, "screen", "mobile")
                ? "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
                : "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
            }
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__pEej)}>
              <ChevronRightIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return `/clinic?gender=${new URLSearchParams(
                                new URL(window.location.href).search
                              ).get("gender")}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return `/clinic`;
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___375C6
                )}
              >
                {"\u06af\u0641\u062a\u06af\u0648 \u0647\u0627"}
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : (() => {
                      try {
                        return !$state.loadingPage;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <Search
                  data-plasmic-name={"search"}
                  data-plasmic-override={overrides.search}
                  antdInput2={(() => {
                    const child$Props = {
                      bordered: false,
                      className: classNames("__wab_instance", sty.antdInput),
                      id: hasVariant(globalVariants, "screen", "mobile")
                        ? "inputMobile"
                        : "inputMobile",
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["antdInput", "value"],
                          Input_Helpers
                        ).apply(null, eventArgs);

                        (async event => {
                          const $steps = {};

                          $steps["updateFilter"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["filter"]
                                  },
                                  operation: 0,
                                  value: (() => {
                                    return $state.chat.data.list.filter(
                                      item =>
                                        item.text.includes(
                                          $state.antdInput.value
                                        ) ||
                                        item.subList_name.includes(
                                          $state.antdInput.value
                                        ) ||
                                        item.doctor.name.includes(
                                          $state.antdInput.value
                                        )
                                    );
                                  })()
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFilter"] != null &&
                            typeof $steps["updateFilter"] === "object" &&
                            typeof $steps["updateFilter"].then === "function"
                          ) {
                            $steps["updateFilter"] = await $steps[
                              "updateFilter"
                            ];
                          }
                        }).apply(null, eventArgs);
                      },
                      value: generateStateValueProp($state, [
                        "antdInput",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "antdInput.value"
                        }
                      ],
                      [],
                      Input_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <Input
                        data-plasmic-name={"antdInput"}
                        data-plasmic-override={overrides.antdInput}
                        {...child$Props}
                      />
                    );
                  })()}
                  className={classNames("__wab_instance", sty.search)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateAntdInputValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["antdInput", "value"]
                            },
                            operation: 0,
                            value: ""
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateAntdInputValue"] != null &&
                      typeof $steps["updateAntdInputValue"] === "object" &&
                      typeof $steps["updateAntdInputValue"].then === "function"
                    ) {
                      $steps["updateAntdInputValue"] = await $steps[
                        "updateAntdInputValue"
                      ];
                    }

                    $steps["updateFilter"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["filter"]
                            },
                            operation: 0,
                            value: (() => {
                              return $state.chat.data.list.filter(
                                item =>
                                  item.text.includes($state.antdInput.value) ||
                                  item.subList_name.includes(
                                    $state.antdInput.value
                                  ) ||
                                  item.doctor.name.includes(
                                    $state.antdInput.value
                                  )
                              );
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFilter"] != null &&
                      typeof $steps["updateFilter"] === "object" &&
                      typeof $steps["updateFilter"].then === "function"
                    ) {
                      $steps["updateFilter"] = await $steps["updateFilter"];
                    }
                  }}
                  onVariableChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "search",
                      "variable"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  variable={generateStateValueProp($state, [
                    "search",
                    "variable"
                  ])}
                />
              ) : null}
            </div>
          </section>
          <ApiRequest
            data-plasmic-name={"chat"}
            data-plasmic-override={overrides.chat}
            className={classNames("__wab_instance", sty.chat)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eab4U
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div className={classNames(projectcss.all, sty.freeBox__b6V4U)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [1, 2, 3, 4, 5];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      data-plasmic-name={"mensah3"}
                      data-plasmic-override={overrides.mensah3}
                      className={classNames(
                        projectcss.all,
                        sty.mensah3,
                        "shimmer"
                      )}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return `https://apps.liom.app/chat?sessionID=${currentItem.id}&listID=${currentItem.listID}&subList=${currentItem.subList}&doctorID=${currentItem.doctorID}`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                    />
                  );
                })}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["chat", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["chat", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["chat", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={(() => {
              try {
                return { token: $state.token };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            shouldFetch={true}
            url={"https://n8n.staas.ir/webhook/help/getListHelp"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__mFpKq)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.filter;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    data-plasmic-name={"mensah2"}
                    data-plasmic-override={overrides.mensah2}
                    className={classNames(projectcss.all, sty.mensah2)}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return `/chat?sessionID=${
                                    currentItem.id
                                  }&listID=${currentItem.listID}&subList=${
                                    currentItem.subList
                                  }&doctorID=${
                                    currentItem.doctorID
                                  }&gender=${new URLSearchParams(
                                    new URL(window.location.href).search
                                  ).get("gender")}`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                    style={(() => {
                      try {
                        return {
                          opacity: currentItem.status == -1 ? "0.6" : "1"
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__suoFf)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "40px"
                          : "50px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "40px"
                          : "50px"
                      }
                      loading={"lazy"}
                      src={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "https://static.vecteezy.com/system/resources/previews/008/957/225/non_2x/female-doctor-avatar-clipart-icon-in-flat-design-vector.jpg"
                          : "https://static.vecteezy.com/system/resources/previews/008/957/225/non_2x/female-doctor-avatar-clipart-icon-in-flat-design-vector.jpg"
                      }
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6Pu99
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__m9Is
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1NoxP
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.doctor.name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Dr. Mensah T";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0TwY4
                          )}
                        >
                          <Seen
                            data-plasmic-name={"seen"}
                            data-plasmic-override={overrides.seen}
                            className={classNames("__wab_instance", sty.seen)}
                            unnamedGroupOfVariants={(() => {
                              try {
                                return (() => {
                                  if (currentItem.status == -1) return "_2";
                                  else return `_${currentItem.status + 1}`;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__c2W9
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    var birthDate = currentItem.date.split("-");
                                    let gy = parseInt(birthDate[0]);
                                    let gm = parseInt(birthDate[1]);
                                    let gd = parseInt(birthDate[2]);
                                    let shamsiMonthDays = [
                                      31, 31, 31, 31, 31, 31, 30, 30, 30, 30,
                                      30, 29
                                    ];

                                    let miladiDaysInMonth = [
                                      31, 28, 31, 30, 31, 30, 31, 31, 30, 31,
                                      30, 31
                                    ];

                                    let isLeapYear =
                                      gy % 4 === 0 &&
                                      (gy % 100 !== 0 || gy % 400 === 0);
                                    if (isLeapYear) {
                                      miladiDaysInMonth[1] = 29;
                                    }
                                    let daysPassedMiladi = gd;
                                    for (let i = 0; i < gm - 1; i++) {
                                      daysPassedMiladi += miladiDaysInMonth[i];
                                    }
                                    let shamsiNewYearDay = new Date(gy, 2, 21);
                                    let shamsiStartDayInMiladi =
                                      (shamsiNewYearDay - new Date(gy, 0, 1)) /
                                      (1000 * 60 * 60 * 24);
                                    let daysPassedInShamsiYear =
                                      daysPassedMiladi - shamsiStartDayInMiladi;
                                    if (daysPassedInShamsiYear < 0) {
                                      gy--;
                                      shamsiNewYearDay = new Date(gy, 2, 21);
                                      shamsiStartDayInMiladi =
                                        (shamsiNewYearDay -
                                          new Date(gy, 0, 1)) /
                                        (1000 * 60 * 60 * 24);
                                      daysPassedInShamsiYear =
                                        daysPassedMiladi +
                                        (365 - shamsiStartDayInMiladi);
                                      if (isLeapYear) {
                                        daysPassedInShamsiYear++;
                                      }
                                    }
                                    let jy = gy - 621;
                                    let jm = 0;
                                    let jd = daysPassedInShamsiYear;
                                    for (
                                      let i = 0;
                                      i < shamsiMonthDays.length;
                                      i++
                                    ) {
                                      if (jd <= shamsiMonthDays[i]) {
                                        jm = i + 1;
                                        break;
                                      } else {
                                        jd -= shamsiMonthDays[i];
                                      }
                                    }
                                    return `${jy}/${jm}/${jd}`;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0633\u0644\u0627\u0645 \u062f\u06a9\u062a\u0631 \u062d\u0627\u0644\u062a\u0648\u0646 \u0686\u0637\u0648\u0631\u0647 \u061f";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nda1B
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dinoB
                          )}
                        >
                          <LineClomp
                            data-plasmic-name={"lineClomp"}
                            data-plasmic-override={overrides.lineClomp}
                            className={classNames(
                              "__wab_instance",
                              sty.lineClomp
                            )}
                            numberOfLine={1}
                            onLineChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "lineClomp",
                                __plasmic_idx_0,
                                "line"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uc4P9
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.text;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0633\u0644\u0627\u0645 \u062f\u06a9\u062a\u0631 \u062d\u0627\u0644\u062a\u0648\u0646 \u0686\u0637\u0648\u0631\u0647 \u061f";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </LineClomp>
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7GcZw
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sYaIk
                        )}
                      >
                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star__fm140
                          )}
                        />

                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star__et2Am
                          )}
                        />

                        <Star
                          action={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? undefined
                              : true
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.star__zpXqZ
                          )}
                        />

                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star__pdodi
                          )}
                        />

                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star__mLjmf
                          )}
                        />

                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star__dytji
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kEaWr
                        )}
                      >
                        {
                          "\u062a\u0639\u062f\u0627\u062f \u0645\u0631\u0627\u062c\u0639 (150)"
                        }
                      </div>
                    </div>
                  </div>
                );
              })}
              {(() => {
                try {
                  return $state.chats.userID ? $state.chats.list == 0 : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox___4Of3)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ix3Af)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"150px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image41.png",
                      fullWidth: 450,
                      fullHeight: 450,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1GTEp
                    )}
                  >
                    {
                      "\u0634\u0645\u0627 \u0647\u06cc\u0686 \u067e\u0631\u0633\u0634 \u0628\u0627\u0632\u06cc \u0646\u062f\u0627\u0631\u06cc\u062f."
                    }
                  </div>
                </div>
              ) : null}
            </div>
          </ApiRequest>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "favicon",
    "section",
    "svg",
    "search",
    "antdInput",
    "chat",
    "mensah3",
    "mensah2",
    "seen",
    "lineClomp"
  ],
  sideEffect: ["sideEffect"],
  favicon: ["favicon"],
  section: ["section", "svg", "search", "antdInput"],
  svg: ["svg"],
  search: ["search", "antdInput"],
  antdInput: ["antdInput"],
  chat: ["chat", "mensah3", "mensah2", "seen", "lineClomp"],
  mensah3: ["mensah3"],
  mensah2: ["mensah2", "seen", "lineClomp"],
  seen: ["seen"],
  lineClomp: ["lineClomp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  favicon: typeof Embed;
  section: "section";
  svg: "svg";
  search: typeof Search;
  antdInput: typeof Input;
  chat: typeof ApiRequest;
  mensah3: "div";
  mensah2: "div";
  seen: typeof Seen;
  lineClomp: typeof LineClomp;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChatviow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChatviow__VariantsArgs;
    args?: PlasmicChatviow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChatviow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChatviow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChatviow__ArgProps,
          internalVariantPropNames: PlasmicChatviow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChatviow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChatviow";
  } else {
    func.displayName = `PlasmicChatviow.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicChatviow = Object.assign(
  // Top-level PlasmicChatviow renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    favicon: makeNodeComponent("favicon"),
    section: makeNodeComponent("section"),
    svg: makeNodeComponent("svg"),
    search: makeNodeComponent("search"),
    antdInput: makeNodeComponent("antdInput"),
    chat: makeNodeComponent("chat"),
    mensah3: makeNodeComponent("mensah3"),
    mensah2: makeNodeComponent("mensah2"),
    seen: makeNodeComponent("seen"),
    lineClomp: makeNodeComponent("lineClomp"),

    // Metadata about props expected for PlasmicChatviow
    internalVariantProps: PlasmicChatviow__VariantProps,
    internalArgProps: PlasmicChatviow__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicChatviow;
/* prettier-ignore-end */
