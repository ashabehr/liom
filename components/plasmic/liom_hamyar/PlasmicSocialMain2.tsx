/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: j5Bxjp_OzbsB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import MainHeader from "../../MainHeader"; // plasmic-import: 1YQK_N8j3twT/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import RadioGrop2 from "../../RadioGrop2"; // plasmic-import: S5lwX58ZN_a3/component
import Story from "../../Story"; // plasmic-import: SYaNz6kkwV8r/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import ComingSoon from "../../ComingSoon"; // plasmic-import: -rGZlxMT1IH0/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSocialMain2.module.css"; // plasmic-import: j5Bxjp_OzbsB/css

import Icon185Icon from "./icons/PlasmicIcon__Icon185"; // plasmic-import: 3QmHdQOUm1zK/icon
import Icon222Icon from "./icons/PlasmicIcon__Icon222"; // plasmic-import: 9jhVYc_p6C9E/icon
import Icon223Icon from "./icons/PlasmicIcon__Icon223"; // plasmic-import: 0ISCKAZ1VQ2U/icon
import Icon179Icon from "./icons/PlasmicIcon__Icon179"; // plasmic-import: qlPLXoOalpf5/icon
import Icon218Icon from "./icons/PlasmicIcon__Icon218"; // plasmic-import: efUVKFegcS0a/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon144Icon from "./icons/PlasmicIcon__Icon144"; // plasmic-import: 1DQk0pCQHybZ/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon239Icon from "./icons/PlasmicIcon__Icon239"; // plasmic-import: aS735Bmxge2K/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicSocialMain2__VariantMembers = {};
export type PlasmicSocialMain2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSocialMain2__VariantsArgs;
export const PlasmicSocialMain2__VariantProps = new Array<VariantPropType>();

export type PlasmicSocialMain2__ArgsType = {};
type ArgPropType = keyof PlasmicSocialMain2__ArgsType;
export const PlasmicSocialMain2__ArgProps = new Array<ArgPropType>();

export type PlasmicSocialMain2__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  mainHeader?: Flex__<typeof MainHeader>;
  sideEffect?: Flex__<typeof SideEffect>;
  getInfo?: Flex__<typeof ApiRequest>;
  button?: Flex__<typeof Button>;
  groupBy?: Flex__<"div">;
  radioGrop2?: Flex__<typeof RadioGrop2>;
  story?: Flex__<"div">;
  timer?: Flex__<typeof Timer>;
  postPostesInfo?: Flex__<typeof ApiRequest>;
  dialog?: Flex__<typeof Dialog>;
  button2?: Flex__<typeof Button>;
  comingSoon?: Flex__<typeof ComingSoon>;
};

export interface DefaultSocialMain2Props {}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSocialMain2__RenderFunc(props: {
  variants: PlasmicSocialMain2__VariantsArgs;
  args: PlasmicSocialMain2__ArgsType;
  overrides: PlasmicSocialMain2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmNzhiOTU0LWM2YTMtNGRiOS04YmYyLTI3MmE5MGU2ZGRiZCIsInR5cGUiOiJzZXNzaW9uIiwiaWF0IjoxNzQ0NzAwNjA0fQ.zC2EWB7gRSxxuiwN8qB-XeEsQ2iEYcLAnT5dVX3Icw0"
      },
      {
        path: "getInfo.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getInfo.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getInfo.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "mainHeader.dopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.dopen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "choiceType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "new_liom"
      },
      {
        path: "postPostesInfo.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "postPostesInfo.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "postPostesInfo.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog[].opendialog",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "faType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "hasmore",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "isloding",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "scrolid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.postPostesInfo.data.result.scrollId;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "postsData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "comingSoon.selectShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "comingSoon.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiGetInfo",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.token != "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "apiGetPost",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.token != "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showRealPosts",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <MainHeader
              data-plasmic-name={"mainHeader"}
              data-plasmic-override={overrides.mainHeader}
              className={classNames("__wab_instance", sty.mainHeader)}
              dopen={generateStateValueProp($state, ["mainHeader", "dopen"])}
              onDopenChange2={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "mainHeader",
                  "dopen"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              slot={
                <div className={classNames(projectcss.all, sty.freeBox__ttecv)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__aEOqT)}
                  >
                    <Icon222Icon
                      className={classNames(projectcss.all, sty.svg___3K5Sw)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dispz)}
                  >
                    <Icon223Icon
                      className={classNames(projectcss.all, sty.svg__ckqpt)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___59Cv9)}
                  >
                    <Icon179Icon
                      className={classNames(projectcss.all, sty.svg__qiFY)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sXgKs)}
                  >
                    <Icon218Icon
                      className={classNames(projectcss.all, sty.svg__p7TD3)}
                      role={"img"}
                    />
                  </div>
                </div>
              }
            >
              <div className={classNames(projectcss.all, sty.freeBox__icZuu)}>
                <Icon185Icon
                  className={classNames(projectcss.all, sty.svg__xnDaU)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDrawerOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["drawer", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDrawerOpen"] != null &&
                      typeof $steps["updateDrawerOpen"] === "object" &&
                      typeof $steps["updateDrawerOpen"].then === "function"
                    ) {
                      $steps["updateDrawerOpen"] = await $steps[
                        "updateDrawerOpen"
                      ];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__imKv
                  )}
                >
                  {
                    "\u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u0648\u06cc\u0698\u0647"
                  }
                </div>
              </div>
            </MainHeader>
            <SideEffect
              data-plasmic-name={"sideEffect"}
              data-plasmic-override={overrides.sideEffect}
              className={classNames("__wab_instance", sty.sideEffect)}
              onMount={async () => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const queryString = window.location.search;
                            const urlParams = new URLSearchParams(queryString);
                            return urlParams.forEach((value, key) => {
                              $state.paramsObject[key] = value;
                            });
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateToken2"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const searchParams = new URLSearchParams(
                              window.location.search
                            );
                            searchParams.delete("token");
                            searchParams.delete("userId");
                            searchParams.delete("user_id");
                            const newUrl = `${
                              window.location.pathname
                            }?${searchParams.toString()}`;
                            return window.history.replaceState(
                              null,
                              "",
                              newUrl
                            );
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateToken2"] != null &&
                  typeof $steps["updateToken2"] === "object" &&
                  typeof $steps["updateToken2"].then === "function"
                ) {
                  $steps["updateToken2"] = await $steps["updateToken2"];
                }

                $steps["updateToken3"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if (
                              $state.paramsObject.token !== undefined &&
                              $state.paramsObject.token?.trim() !== ""
                            ) {
                              if (!$state.paramsObject.token.startsWith("ey"))
                                $state.paramsObject.token =
                                  $state.paramsObject.token.slice(6, -3);
                              var setCookie = (name, value, days) => {
                                const expires = new Date(
                                  Date.now() + days * 86400000
                                ).toUTCString();
                                document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                              };
                              return setCookie(
                                "token",
                                JSON.stringify([$state.paramsObject.token]),
                                100
                              );
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateToken3"] != null &&
                  typeof $steps["updateToken3"] === "object" &&
                  typeof $steps["updateToken3"].then === "function"
                ) {
                  $steps["updateToken3"] = await $steps["updateToken3"];
                }

                $steps["updateToken4"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            var getCookie = name => {
                              const cookies = document.cookie.split("; ");
                              for (let cookie of cookies) {
                                const [key, value] = cookie.split("=");
                                if (key === name) return JSON.parse(value)[0];
                              }
                              return "";
                            };
                            return ($state.token = getCookie("token"));
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateToken4"] != null &&
                  typeof $steps["updateToken4"] === "object" &&
                  typeof $steps["updateToken4"].then === "function"
                ) {
                  $steps["updateToken4"] = await $steps["updateToken4"];
                }
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox___6X7Jx)}>
              <ApiRequest
                data-plasmic-name={"getInfo"}
                data-plasmic-override={overrides.getInfo}
                className={classNames("__wab_instance", sty.getInfo)}
                errorDisplay={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sfn3K)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateApiGetInfo"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["apiGetInfo"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateApiGetInfo"] != null &&
                        typeof $steps["updateApiGetInfo"] === "object" &&
                        typeof $steps["updateApiGetInfo"].then === "function"
                      ) {
                        $steps["updateApiGetInfo"] = await $steps[
                          "updateApiGetInfo"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x4Vz
                      )}
                    >
                      {
                        "\u062e\u0637\u0627 \u062f\u0631 \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0627\u06cc\u0646\u062a\u0631\u0646\u062a"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fyW3
                      )}
                    >
                      {
                        "\u0627\u0632 \u0627\u062a\u0635\u0627\u0644 \u0627\u06cc\u0646\u062a\u0631\u0646\u062a \u0648 \u0642\u0635\u0639 \u0628\u0648\u062f\u0646 vpn\u0645\u0637\u0645\u0626\u0646 \u0634\u062f\u0647 \u0648 \u062f\u0648\u0628\u0627\u0631\u0647 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f"
                      }
                    </div>
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      color={generateStateValueProp($state, [
                        "button",
                        "color"
                      ])}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      shape={"rounded"}
                      size={"minimal"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1DoEl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oBz9M
                          )}
                        >
                          {"\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"}
                        </div>
                        <Icon144Icon
                          className={classNames(projectcss.all, sty.svg__dhdUy)}
                          role={"img"}
                        />
                      </div>
                    </Button>
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7NbSu)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__xM2Mu,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__bzcWn,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0D9SF,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__srQ9U,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__nMnGy,
                        "shimmer"
                      )}
                    />
                  </div>
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["getInfo", "error"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getInfo",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["getInfo", "data"]).apply(
                    null,
                    eventArgs
                  );

                  (async data => {
                    const $steps = {};

                    $steps["updateApiGetInfo"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["apiGetInfo"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateApiGetInfo"] != null &&
                      typeof $steps["updateApiGetInfo"] === "object" &&
                      typeof $steps["updateApiGetInfo"].then === "function"
                    ) {
                      $steps["updateApiGetInfo"] = await $steps[
                        "updateApiGetInfo"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                params={(() => {
                  try {
                    return {
                      authorization: $state.token
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                shouldFetch={(() => {
                  try {
                    return $state.apiGetInfo;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                url={"https://n8n.staas.ir/webhook/rest/social"}
              >
                <div
                  data-plasmic-name={"groupBy"}
                  data-plasmic-override={overrides.groupBy}
                  className={classNames(projectcss.all, sty.groupBy)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iyMa)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.getInfo.data.result.buttons;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <RadioGrop2
                          data-plasmic-name={"radioGrop2"}
                          data-plasmic-override={overrides.radioGrop2}
                          className={classNames(
                            "__wab_instance",
                            sty.radioGrop2
                          )}
                          color={"light"}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateApiGetPost"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["apiGetPost"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateApiGetPost"] != null &&
                              typeof $steps["updateApiGetPost"] === "object" &&
                              typeof $steps["updateApiGetPost"].then ===
                                "function"
                            ) {
                              $steps["updateApiGetPost"] = await $steps[
                                "updateApiGetPost"
                              ];
                            }

                            $steps["updateChoiceType"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["choiceType"]
                                    },
                                    operation: 0,
                                    value: currentItem.type
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateChoiceType"] != null &&
                              typeof $steps["updateChoiceType"] === "object" &&
                              typeof $steps["updateChoiceType"].then ===
                                "function"
                            ) {
                              $steps["updateChoiceType"] = await $steps[
                                "updateChoiceType"
                              ];
                            }

                            $steps["updateFaType"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["faType"]
                                    },
                                    operation: 0,
                                    value: currentItem.text
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateFaType"] != null &&
                              typeof $steps["updateFaType"] === "object" &&
                              typeof $steps["updateFaType"].then === "function"
                            ) {
                              $steps["updateFaType"] = await $steps[
                                "updateFaType"
                              ];
                            }
                          }}
                          selected={(() => {
                            try {
                              return $state.choiceType == currentItem.type;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          style2={"grayBackgerand"}
                          text={(() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      );
                    })}
                  </div>
                </div>
              </ApiRequest>
            </div>
          </section>
          <div className={classNames(projectcss.all, sty.freeBox__a5T33)}>
            <div
              data-plasmic-name={"story"}
              data-plasmic-override={overrides.story}
              className={classNames(projectcss.all, sty.story)}
              style={(() => {
                try {
                  return undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return [
                      2,
                      3,
                      4,
                      ,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      22,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      22,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      2,
                      22
                    ];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Story
                    className={classNames("__wab_instance", sty.story__gzO1Y)}
                    key={currentIndex}
                  />
                );
              })}
            </div>
          </div>
          <Timer
            data-plasmic-name={"timer"}
            data-plasmic-override={overrides.timer}
            className={classNames("__wab_instance", sty.timer)}
            intervalSeconds={5}
            isRunning={true}
            onTick={async () => {
              const $steps = {};

              $steps["updateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["loading"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateVariable"] != null &&
                typeof $steps["updateVariable"] === "object" &&
                typeof $steps["updateVariable"].then === "function"
              ) {
                $steps["updateVariable"] = await $steps["updateVariable"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return window.addEventListener("scroll", () => {
                          if ($state.isLoading || !$state.hasmore) return;
                          const { scrollTop, scrollHeight } =
                            window.document.documentElement;
                          const { innerHeight } = window;
                          const isNearBottom =
                            scrollTop + innerHeight >= scrollHeight - 150;
                          if (isNearBottom) {
                            $state.isloding = true;
                          }
                        });
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["invokeGlobalAction"] =
                ($state.isloding || !$state.hasmore) && $state.loading
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://n8n.staas.ir/webhook/rest/social",
                          undefined,
                          (() => {
                            try {
                              return {
                                data: {
                                  type: $state.choiceType,
                                  text: $state.faType
                                },
                                scrollId: $state.scrolid,
                                authorization: $state.token
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["runCode2"] =
                $steps.invokeGlobalAction?.data?.success == false ||
                $steps.invokeGlobalAction?.data?.success == true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            $state.isloding = false;
                            const newData =
                              $steps.invokeGlobalAction.data.result.list;
                            if (!newData || newData.length == 0) {
                              $state.hasmore = false;
                            } else {
                              $state.scrolid =
                                $steps.invokeGlobalAction.data.result.scrollId;
                              $state.postsData.result.list =
                                $state.postsData.result.list.concat(newData);
                            }
                            console.log(`hasmore:${$state.hasmore}`);
                            return console.log(`loading:${$state.isloding}`);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }

              $steps["updateLoading"] =
                $steps.invokeGlobalAction?.data?.success == false ||
                $steps.invokeGlobalAction?.data?.success == true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateLoading"] != null &&
                typeof $steps["updateLoading"] === "object" &&
                typeof $steps["updateLoading"].then === "function"
              ) {
                $steps["updateLoading"] = await $steps["updateLoading"];
              }
            }}
            runWhileEditing={false}
          />

          {(() => {
            try {
              return $state.isloding;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__x4KSf)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vwKH
                )}
              >
                {
                  "\u062f\u0631 \u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc ..."
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__jxeU3,
                  "line-container"
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__vZHi,
                    "line line-1"
                  )}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___3KXeI,
                    "line line-2"
                  )}
                />
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__iiMfp)}>
            <div className={classNames(projectcss.all, sty.freeBox___1RGs0)}>
              <ApiRequest
                data-plasmic-name={"postPostesInfo"}
                data-plasmic-override={overrides.postPostesInfo}
                body={(() => {
                  try {
                    return {
                      data: {
                        type: $state.choiceType,
                        text: $state.faType
                      },
                      scrollId: "",
                      authorization: $state.token
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.postPostesInfo)}
                errorDisplay={
                  <div
                    className={classNames(projectcss.all, sty.freeBox___96O1Q)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateApiGetPost"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["apiGetPost"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateApiGetPost"] != null &&
                        typeof $steps["updateApiGetPost"] === "object" &&
                        typeof $steps["updateApiGetPost"].then === "function"
                      ) {
                        $steps["updateApiGetPost"] = await $steps[
                          "updateApiGetPost"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kQuav
                      )}
                    >
                      {
                        "\u062e\u0637\u0627 \u062f\u0631 \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0627\u06cc\u0646\u062a\u0631\u0646\u062a"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uDoW
                      )}
                    >
                      {
                        "\u0627\u0632 \u0627\u062a\u0635\u0627\u0644 \u0627\u06cc\u0646\u062a\u0631\u0646\u062a \u0648 \u0642\u0635\u0639 \u0628\u0648\u062f\u0646 vpn\u0645\u0637\u0645\u0626\u0646 \u0634\u062f\u0647 \u0648 \u062f\u0648\u0628\u0627\u0631\u0647 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f"
                      }
                    </div>
                    <Button
                      data-plasmic-name={"button2"}
                      data-plasmic-override={overrides.button2}
                      className={classNames("__wab_instance", sty.button2)}
                      color={generateStateValueProp($state, [
                        "button2",
                        "color"
                      ])}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button2",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      shape={"rounded"}
                      size={"minimal"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nUr9L
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___14W7Q
                          )}
                        >
                          {"\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"}
                        </div>
                        <Icon144Icon
                          className={classNames(projectcss.all, sty.svg__mGfUc)}
                          role={"img"}
                        />
                      </div>
                    </Button>
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iWcEz)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])([
                      2, 3, 4
                    ]).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4OqGt
                          )}
                          key={currentIndex}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__w8I8I
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__lhXkw
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__u2Y44,
                                  "shimmer"
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__xc0Uk
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xsAz,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__szg75,
                                    "shimmer"
                                  )}
                                />
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ouaxo
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__xG8D
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___9C2Pv,
                                    "shimmer"
                                  )}
                                />
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sEcnc
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oBSmP
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__kb4P,
                                  "shimmer"
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__gZbsx,
                                  "shimmer"
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__w7Hhk,
                                  "shimmer"
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___8Sq0U,
                                  "shimmer"
                                )}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ngEhs,
                                "shimmer"
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.dialog
                                  ),
                                  onOpendialogChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangeProp($state, [
                                      "dialog",
                                      __plasmic_idx_0,
                                      "opendialog"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  opendialog: generateStateValueProp($state, [
                                    "dialog",
                                    __plasmic_idx_0,
                                    "opendialog"
                                  ])
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "dialog[].opendialog",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => false
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <Dialog
                                    data-plasmic-name={"dialog"}
                                    data-plasmic-override={overrides.dialog}
                                    {...child$Props}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__wi67O
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__f68P
                                        )}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return $$.copyToClipboard();
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] = await $steps[
                                              "runCode"
                                            ];
                                          }
                                        }}
                                      >
                                        <Icon239Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__qSuG
                                          )}
                                          role={"img"}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__kIKvl
                                          )}
                                        >
                                          {
                                            "\u06a9\u067e\u06cc \u0644\u06cc\u0646\u06a9"
                                          }
                                        </div>
                                      </div>
                                    </div>
                                  </Dialog>
                                );
                              })()}
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                }
                method={"POST"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "postPostesInfo",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "postPostesInfo",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "postPostesInfo",
                    "data"
                  ]).apply(null, eventArgs);

                  (async data => {
                    const $steps = {};

                    $steps["updatePostsData"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["postsData"]
                            },
                            operation: 0,
                            value: $state.postPostesInfo.data
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePostsData"] != null &&
                      typeof $steps["updatePostsData"] === "object" &&
                      typeof $steps["updatePostsData"].then === "function"
                    ) {
                      $steps["updatePostsData"] = await $steps[
                        "updatePostsData"
                      ];
                    }

                    $steps["updateApiGetPost"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["apiGetPost"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateApiGetPost"] != null &&
                      typeof $steps["updateApiGetPost"] === "object" &&
                      typeof $steps["updateApiGetPost"].then === "function"
                    ) {
                      $steps["updateApiGetPost"] = await $steps[
                        "updateApiGetPost"
                      ];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return setTimeout(() => {
                                  $state.showRealPosts = true;
                                }, 500);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }).apply(null, eventArgs);
                }}
                shouldFetch={(() => {
                  try {
                    return $state.apiGetPost;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                url={"https://n8n.staas.ir/webhook/rest/social"}
              >
                <div className={classNames(projectcss.all, sty.freeBox__h2Jkh)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dOqZq)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (() => {
                            return Array.from({ length: 100 }, (_, i) => i + 1);
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__h5Z8B,
                            ``
                          )}
                          key={currentIndex}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7RxpU
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </ApiRequest>
            </div>
            {(() => {
              try {
                return $state.isloding;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox___9LzA)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p2T
                  )}
                >
                  {
                    "\u062f\u0631 \u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc ..."
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__nltgn,
                    "line-container"
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__tDwWg,
                      "line line-1"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__nWGtZ,
                      "line line-2"
                    )}
                  />
                </div>
              </div>
            ) : null}
          </div>
          <ComingSoon
            data-plasmic-name={"comingSoon"}
            data-plasmic-override={overrides.comingSoon}
            className={classNames("__wab_instance", sty.comingSoon)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["comingSoon", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onSelectShopChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "comingSoon",
                "selectShop"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["comingSoon", "open"])}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "mainHeader",
    "sideEffect",
    "getInfo",
    "button",
    "groupBy",
    "radioGrop2",
    "story",
    "timer",
    "postPostesInfo",
    "dialog",
    "button2",
    "comingSoon"
  ],
  section: [
    "section",
    "mainHeader",
    "sideEffect",
    "getInfo",
    "button",
    "groupBy",
    "radioGrop2"
  ],
  mainHeader: ["mainHeader"],
  sideEffect: ["sideEffect"],
  getInfo: ["getInfo", "button", "groupBy", "radioGrop2"],
  button: ["button"],
  groupBy: ["groupBy", "radioGrop2"],
  radioGrop2: ["radioGrop2"],
  story: ["story"],
  timer: ["timer"],
  postPostesInfo: ["postPostesInfo", "dialog", "button2"],
  dialog: ["dialog"],
  button2: ["button2"],
  comingSoon: ["comingSoon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  mainHeader: typeof MainHeader;
  sideEffect: typeof SideEffect;
  getInfo: typeof ApiRequest;
  button: typeof Button;
  groupBy: "div";
  radioGrop2: typeof RadioGrop2;
  story: "div";
  timer: typeof Timer;
  postPostesInfo: typeof ApiRequest;
  dialog: typeof Dialog;
  button2: typeof Button;
  comingSoon: typeof ComingSoon;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSocialMain2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSocialMain2__VariantsArgs;
    args?: PlasmicSocialMain2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSocialMain2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSocialMain2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSocialMain2__ArgProps,
          internalVariantPropNames: PlasmicSocialMain2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSocialMain2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocialMain2";
  } else {
    func.displayName = `PlasmicSocialMain2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSocialMain2 = Object.assign(
  // Top-level PlasmicSocialMain2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    mainHeader: makeNodeComponent("mainHeader"),
    sideEffect: makeNodeComponent("sideEffect"),
    getInfo: makeNodeComponent("getInfo"),
    button: makeNodeComponent("button"),
    groupBy: makeNodeComponent("groupBy"),
    radioGrop2: makeNodeComponent("radioGrop2"),
    story: makeNodeComponent("story"),
    timer: makeNodeComponent("timer"),
    postPostesInfo: makeNodeComponent("postPostesInfo"),
    dialog: makeNodeComponent("dialog"),
    button2: makeNodeComponent("button2"),
    comingSoon: makeNodeComponent("comingSoon"),

    // Metadata about props expected for PlasmicSocialMain2
    internalVariantProps: PlasmicSocialMain2__VariantProps,
    internalArgProps: PlasmicSocialMain2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSocialMain2;
/* prettier-ignore-end */
