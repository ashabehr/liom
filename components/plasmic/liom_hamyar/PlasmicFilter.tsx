/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: NViyjBtxiFfj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Select } from "@/fragment/components/select"; // plasmic-import: 5Mch6ak-Pshg/codeComponent
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import SelectionChoise from "../../SelectionChoise"; // plasmic-import: kjK-J97SUWLJ/component
import RangeSlider from "../../RangeSlider"; // plasmic-import: uJUDE33VkjVO/component
import SliderThumb from "../../SliderThumb"; // plasmic-import: pmF7IoE0FUg-/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Checkbox from "../../Checkbox"; // plasmic-import: IwXl9xUH-ZMp/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicFilter.module.css"; // plasmic-import: NViyjBtxiFfj/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import Icon259Icon from "./icons/PlasmicIcon__Icon259"; // plasmic-import: S4bsf33msfQ_/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 32haUKsu6raY/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import UpArrowOutboxSvgrepoComSvgIcon from "./icons/PlasmicIcon__UpArrowOutboxSvgrepoComSvg"; // plasmic-import: kqt9NYSvVr25/icon
import Icon110Icon from "./icons/PlasmicIcon__Icon110"; // plasmic-import: yNwSkfuj5hYK/icon

createPlasmicElementProxy;

export type PlasmicFilter__VariantMembers = {
  moreshow: "moreshow";
};
export type PlasmicFilter__VariantsArgs = {
  moreshow?: SingleBooleanChoiceArg<"moreshow">;
};
type VariantPropType = keyof PlasmicFilter__VariantsArgs;
export const PlasmicFilter__VariantProps = new Array<VariantPropType>(
  "moreshow"
);

export type PlasmicFilter__ArgsType = {};
type ArgPropType = keyof PlasmicFilter__ArgsType;
export const PlasmicFilter__ArgProps = new Array<ArgPropType>();

export type PlasmicFilter__OverridesType = {
  root?: Flex__<"div">;
  asli?: Flex__<"div">;
  input3?: Flex__<typeof AntdInput>;
  sex?: Flex__<typeof Select>;
  job?: Flex__<typeof Select>;
  maritalStatus?: Flex__<typeof Select>;
  education?: Flex__<typeof Select>;
  button4?: Flex__<typeof Button>;
  button5?: Flex__<typeof Button>;
  button6?: Flex__<typeof Button>;
  rangeSlider?: Flex__<typeof RangeSlider>;
  sliderThumb?: Flex__<typeof SliderThumb>;
  button2?: Flex__<typeof Button>;
  modal?: Flex__<typeof AntdModal>;
  diseareVer?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  input?: Flex__<typeof AntdInput>;
  modal3?: Flex__<typeof AntdModal>;
  diseareVer2?: Flex__<"div">;
  checkbox3?: Flex__<typeof Checkbox>;
  input4?: Flex__<typeof AntdInput>;
  modal2?: Flex__<typeof AntdModal>;
  input2?: Flex__<typeof AntdInput>;
  checkbox2?: Flex__<typeof Checkbox>;
  button?: Flex__<typeof Button>;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultFilterProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFilter__RenderFunc(props: {
  variants: PlasmicFilter__VariantsArgs;
  args: PlasmicFilter__ArgsType;
  overrides: PlasmicFilter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "gender",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "\u062f\u062e\u062a\u0631", value: "Employed" },
          { label: "\u067e\u0633\u0631", value: "unEmployed" }
        ]
      },
      {
        path: "age",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "\u06f1\u06f0-\u06f1\u06f3", value: { min: 10, max: 13 } },
          { label: "\u06f1\u06f4-\u06f1\u06f7", value: { min: 14, max: 17 } },
          { label: "\u06f1\u06f8-\u06f2\u06f2", value: { min: 18, max: 22 } },
          { label: "\u06f2\u06f3-\u06f2\u06f8", value: { min: 23, max: 28 } },
          { label: "\u06f2\u06f8-\u06f3\u06f5", value: { min: 28, max: 35 } },
          {
            label: "\u0628\u0627\u0644\u0627\u06cc \u06f3\u06f5",
            value: { min: 35, max: null }
          }
        ]
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dataKu",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "checkbox2[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "daroo",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "daroo2",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "jostojooKamel",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "modal3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "checkbox3[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "sex.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sex.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "job.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "job.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "maritalStatus.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "maritalStatus.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "education.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "education.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "height",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label: "\u06f1\u06f2\u06f0-\u06f1\u06f3\u06f0",
            value: { min: 120, max: 130 }
          },
          {
            label: "\u06f1\u06f3\u06f0-\u06f1\u06f4\u06f0",
            value: { min: 130, max: 140 }
          },
          {
            label: "\u06f1\u06f4\u06f0-\u06f1\u06f5\u06f0",
            value: { min: 140, max: 150 }
          },
          {
            label: "\u06f1\u06f5\u06f0-\u06f1\u06f6\u06f0",
            value: { min: 150, max: 160 }
          },
          {
            label: "\u06f1\u06f6\u06f0-\u06f1\u06f6\u06f5",
            value: { min: 160, max: 165 }
          },
          {
            label: "\u06f1\u06f6\u06f5-\u06f1\u06f7\u06f0",
            value: { min: 165, max: 170 }
          },
          {
            label: "\u06f1\u06f7\u06f0-\u06f1\u06f8\u06f0",
            value: { min: 170, max: 180 }
          },
          {
            label: "\u06f1\u06f8\u06f0-\u06f1\u06f9\u06f0",
            value: { min: 180, max: 190 }
          },
          {
            label: "\u0628\u0627\u0644\u0627\u06cc \u06f1\u06f9\u06f0",
            value: { min: 190, max: null }
          }
        ]
      },
      {
        path: "selectedHeight",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "selectedage",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "panelUsername",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "vazn",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "rangeSlider.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [20, 50]
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "more",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "moreshow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.moreshow
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root,
            { [sty.rootmoreshow]: hasVariant($state, "moreshow", "moreshow") }
          )}
          onClick={async event => {
            const $steps = {};

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      "https://n8n.staas.ir/webhook-test/tools/getSignList",
                      undefined,
                      {
                        size: 5,
                        from: 0,
                        filters: {
                          sex: "female",
                          periodCycle: { min: 20, max: 340 },
                          height: { min: 170 },
                          married: true
                        },
                        drugName: ["\u0698\u0644\u0648\u0641\u0646"]
                      }
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          }}
        >
          <div
            data-plasmic-name={"asli"}
            data-plasmic-override={overrides.asli}
            className={classNames(projectcss.all, sty.asli)}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.input3),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input3", "value"],
                    AntdInput_Helpers
                  ).apply(null, eventArgs);

                  (async event => {
                    const $steps = {};

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }
                  }).apply(null, eventArgs);
                },
                placeholder:
                  "\u0627\u0646\u062a\u062e\u0627\u0628 \u0628\u06cc\u0645\u0627\u0631\u06cc \u0647\u0627",
                prefix: (
                  <SearchSvgIcon
                    className={classNames(projectcss.all, sty.svg__qWg78)}
                    role={"img"}
                  />
                ),

                size: "large",
                value: generateStateValueProp($state, ["input3", "value"])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "input3.value"
                  }
                ],
                [],
                AntdInput_Helpers ?? {},
                child$Props
              );

              return (
                <AntdInput
                  data-plasmic-name={"input3"}
                  data-plasmic-override={overrides.input3}
                  {...child$Props}
                />
              );
            })()}
            <div
              className={classNames(projectcss.all, sty.freeBox___1Bfft)}
              onClick={async event => {
                const $steps = {};

                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }
              }}
            >
              <SearchSvgIcon
                className={classNames(projectcss.all, sty.svg___6MVjW)}
                role={"img"}
              />

              {(() => {
                try {
                  return $state.dataKu.length != 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__o9MoQ)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.apiRequest.data.result.list.filter(i =>
                          $state.dataKu.some(k => i.key == k)
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ckBzr
                        )}
                        key={currentIndex}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.value;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    );
                  })}
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.dataKu.length == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lzd4Q
                  )}
                >
                  {
                    "\u0627\u0646\u062a\u062e\u0627\u0628 \u0628\u06cc\u0645\u0627\u0631\u06cc \u0647\u0627"
                  }
                </div>
              ) : null}
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__mBunP)}
              onClick={async event => {
                const $steps = {};

                $steps["updateModal3Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal3", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModal3Open"] != null &&
                  typeof $steps["updateModal3Open"] === "object" &&
                  typeof $steps["updateModal3Open"].then === "function"
                ) {
                  $steps["updateModal3Open"] = await $steps["updateModal3Open"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://n8n.staas.ir/webhook/tools/getMedicineList",
                          undefined,
                          (() => {
                            try {
                              return {
                                text: $state.input4.value || ""
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateDaroo"] = $steps.invokeGlobalAction?.data
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["daroo"]
                        },
                        operation: 0,
                        value: $steps.invokeGlobalAction.data.result
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDaroo"] != null &&
                  typeof $steps["updateDaroo"] === "object" &&
                  typeof $steps["updateDaroo"].then === "function"
                ) {
                  $steps["updateDaroo"] = await $steps["updateDaroo"];
                }
              }}
            >
              <Icon259Icon
                className={classNames(projectcss.all, sty.svg__urAuX)}
                role={"img"}
              />

              {(() => {
                try {
                  return $state.daroo2.length == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jLay9
                  )}
                >
                  {
                    "\u0627\u0646\u062a\u062e\u0627\u0628 \u062f\u0627\u0631\u0648\u0647\u0627"
                  }
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.daroo2.length != 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___0C5Sg)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.daroo2;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1K5Nl
                        )}
                        key={currentIndex}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    );
                  })}
                </div>
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__poB2S)}>
              <div className={classNames(projectcss.all, sty.freeBox__i46So)}>
                <Select
                  data-plasmic-name={"sex"}
                  data-plasmic-override={overrides.sex}
                  disabled={false}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["sex", "value"]).apply(
                      null,
                      eventArgs
                    );
                  }}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["sex", "open"]).apply(
                      null,
                      eventArgs
                    );
                  }}
                  open={generateStateValueProp($state, ["sex", "open"])}
                  options={(() => {
                    const __composite = [
                      { label: null, value: null },
                      { label: null, value: null }
                    ];
                    __composite["0"]["label"] = "\u0645\u0631\u062f";
                    __composite["0"]["value"] = "male";
                    __composite["1"]["label"] = "\u0632\u0646";
                    __composite["1"]["value"] = "female";
                    return __composite;
                  })()}
                  placeholder={"\u062c\u0646\u0633\u06cc\u062a"}
                  triggerClassName={classNames("__wab_instance", sty.sex)}
                  value={generateStateValueProp($state, ["sex", "value"])}
                />

                {(() => {
                  try {
                    return $state.sex.value != "" && $state.sex.value != null;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__enH1)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSexValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["sex", "value"]
                              },
                              operation: 0,
                              value: ""
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSexValue"] != null &&
                        typeof $steps["updateSexValue"] === "object" &&
                        typeof $steps["updateSexValue"].then === "function"
                      ) {
                        $steps["updateSexValue"] = await $steps[
                          "updateSexValue"
                        ];
                      }
                    }}
                  >
                    <Icon22Icon
                      className={classNames(projectcss.all, sty.svg__r3Bwn)}
                      role={"img"}
                    />
                  </div>
                ) : null}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___8Mi40)}>
                <Select
                  data-plasmic-name={"job"}
                  data-plasmic-override={overrides.job}
                  disabled={false}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["job", "value"]).apply(
                      null,
                      eventArgs
                    );
                  }}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["job", "open"]).apply(
                      null,
                      eventArgs
                    );
                  }}
                  open={generateStateValueProp($state, ["job", "open"])}
                  options={(() => {
                    const __composite = [
                      { label: null, value: null },
                      { label: null, value: null }
                    ];
                    __composite["0"]["label"] =
                      "\u0634\u0627\u063a\u0644 \u0647\u0633\u062a\u0645";
                    __composite["0"]["value"] = "Employed";
                    __composite["1"]["label"] =
                      "\u0634\u0627\u063a\u0644 \u0646\u06cc\u0633\u062a\u0645 ";
                    __composite["1"]["value"] = "unEmployed";
                    return __composite;
                  })()}
                  placeholder={"\u0634\u063a\u0644"}
                  triggerClassName={classNames("__wab_instance", sty.job)}
                  value={generateStateValueProp($state, ["job", "value"])}
                />

                {(() => {
                  try {
                    return $state.job.value != "" && $state.job.value != null;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gP5L8)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateJobValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["job", "value"]
                              },
                              operation: 0,
                              value: ""
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateJobValue"] != null &&
                        typeof $steps["updateJobValue"] === "object" &&
                        typeof $steps["updateJobValue"].then === "function"
                      ) {
                        $steps["updateJobValue"] = await $steps[
                          "updateJobValue"
                        ];
                      }
                    }}
                  >
                    <Icon22Icon
                      className={classNames(projectcss.all, sty.svg__mnau5)}
                      role={"img"}
                    />
                  </div>
                ) : null}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__uSj8P)}>
                <Select
                  data-plasmic-name={"maritalStatus"}
                  data-plasmic-override={overrides.maritalStatus}
                  disabled={false}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "maritalStatus",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "maritalStatus",
                      "open"
                    ]).apply(null, eventArgs);
                  }}
                  open={generateStateValueProp($state, [
                    "maritalStatus",
                    "open"
                  ])}
                  options={(() => {
                    const __composite = [
                      { label: null, value: null },
                      { label: null, value: null }
                    ];
                    __composite["0"]["label"] =
                      "\u0645\u062a\u0627\u0647\u0644";
                    __composite["0"]["value"] = "true";
                    __composite["1"]["label"] = "\u0645\u062c\u0631\u062f";
                    __composite["1"]["value"] = "false";
                    return __composite;
                  })()}
                  placeholder={
                    "\u0648\u0636\u0639\u06cc\u062a \u062a\u0627\u0647\u0644"
                  }
                  triggerClassName={classNames(
                    "__wab_instance",
                    sty.maritalStatus
                  )}
                  value={generateStateValueProp($state, [
                    "maritalStatus",
                    "value"
                  ])}
                />

                {(() => {
                  try {
                    return (
                      $state.maritalStatus.value != "" &&
                      $state.maritalStatus.value != null
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8QhRm)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateMaritalStatusValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["maritalStatus", "value"]
                              },
                              operation: 0,
                              value: ""
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateMaritalStatusValue"] != null &&
                        typeof $steps["updateMaritalStatusValue"] ===
                          "object" &&
                        typeof $steps["updateMaritalStatusValue"].then ===
                          "function"
                      ) {
                        $steps["updateMaritalStatusValue"] = await $steps[
                          "updateMaritalStatusValue"
                        ];
                      }
                    }}
                  >
                    <Icon22Icon
                      className={classNames(projectcss.all, sty.svg__udyuQ)}
                      role={"img"}
                    />
                  </div>
                ) : null}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__a8Wf7)}>
                <Select
                  data-plasmic-name={"education"}
                  data-plasmic-override={overrides.education}
                  disabled={false}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "education",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "education",
                      "open"
                    ]).apply(null, eventArgs);
                  }}
                  open={generateStateValueProp($state, ["education", "open"])}
                  options={(() => {
                    const __composite = [
                      { label: null, value: null },
                      { label: null, value: null }
                    ];
                    __composite["0"]["label"] =
                      "\u0641\u0627\u0631\u063a \u0627\u0644\u062a\u062d\u0635\u06cc\u0644\u0645";
                    __composite["0"]["value"] = "Graduated";
                    __composite["1"]["label"] =
                      "\u062f\u0631 \u062d\u0627\u0644 \u062a\u062d\u0635\u06cc\u0644\u0645";
                    __composite["1"]["value"] = "student";
                    return __composite;
                  })()}
                  placeholder={"\u062a\u062d\u0635\u06cc\u0644\u0627\u062a"}
                  triggerClassName={classNames("__wab_instance", sty.education)}
                  value={generateStateValueProp($state, ["education", "value"])}
                />

                {(() => {
                  try {
                    return (
                      $state.education.value != "" &&
                      $state.education.value != null
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kczL)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateEducationValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["education", "value"]
                              },
                              operation: 0,
                              value: ""
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEducationValue"] != null &&
                        typeof $steps["updateEducationValue"] === "object" &&
                        typeof $steps["updateEducationValue"].then ===
                          "function"
                      ) {
                        $steps["updateEducationValue"] = await $steps[
                          "updateEducationValue"
                        ];
                      }
                    }}
                  >
                    <Icon22Icon
                      className={classNames(projectcss.all, sty.svg__qckne)}
                      role={"img"}
                    />
                  </div>
                ) : null}
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__uc4K4, {
                [sty.freeBoxmoreshow__uc4K42KYct]: hasVariant(
                  $state,
                  "moreshow",
                  "moreshow"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__fjp2A)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___1FySw)}
                >
                  {(() => {
                    try {
                      return Object.keys($state.selectedage).length != 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button
                      data-plasmic-name={"button4"}
                      data-plasmic-override={overrides.button4}
                      className={classNames("__wab_instance", sty.button4)}
                      color={generateStateValueProp($state, [
                        "button4",
                        "color"
                      ])}
                      filterX={true}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateSelectedage"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedage"]
                                },
                                operation: 0,
                                value: {}
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSelectedage"] != null &&
                          typeof $steps["updateSelectedage"] === "object" &&
                          typeof $steps["updateSelectedage"].then === "function"
                        ) {
                          $steps["updateSelectedage"] = await $steps[
                            "updateSelectedage"
                          ];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button4",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      unnamedVariant2={true}
                    >
                      <XIcon
                        className={classNames(projectcss.all, sty.svg___8Ag4)}
                        role={"img"}
                      />
                    </Button>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__it5Gs
                    )}
                  >
                    {
                      "\u062d\u062f\u0648\u062f\u0627  \u0686\u0646\u062f  \u0633\u0627\u0644  \u062f\u0627\u0631\u06cc\u062f\u061f"
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__n7TRo)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.age;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <SelectionChoise
                        className={classNames(
                          "__wab_instance",
                          sty.selectionChoise__by5Zi
                        )}
                        filter={true}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSelectedage"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["selectedage"]
                                  },
                                  operation: 0,
                                  value: currentItem.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSelectedage"] != null &&
                            typeof $steps["updateSelectedage"] === "object" &&
                            typeof $steps["updateSelectedage"].then ===
                              "function"
                          ) {
                            $steps["updateSelectedage"] = await $steps[
                              "updateSelectedage"
                            ];
                          }
                        }}
                        select={(() => {
                          try {
                            return $state.selectedage == currentItem.value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        text={(() => {
                          try {
                            return currentItem.label;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__fTzf8)}>
                {(() => {
                  try {
                    return Object.keys($state.selectedHeight).length != 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Button
                    data-plasmic-name={"button5"}
                    data-plasmic-override={overrides.button5}
                    className={classNames("__wab_instance", sty.button5)}
                    color={generateStateValueProp($state, ["button5", "color"])}
                    filterX={true}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSelectedHeight"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedHeight"]
                              },
                              operation: 0,
                              value: {}
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectedHeight"] != null &&
                        typeof $steps["updateSelectedHeight"] === "object" &&
                        typeof $steps["updateSelectedHeight"].then ===
                          "function"
                      ) {
                        $steps["updateSelectedHeight"] = await $steps[
                          "updateSelectedHeight"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button5", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <XIcon
                      className={classNames(projectcss.all, sty.svg___2Ktp4)}
                      role={"img"}
                    />
                  </Button>
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yZ3Cw
                  )}
                >
                  {
                    "\u062d\u062f\u0648\u062f\u0627 \u0642\u062f \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wkY3F)}>
                <div className={classNames(projectcss.all, sty.freeBox__xeIzz)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.height;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <SelectionChoise
                        className={classNames(
                          "__wab_instance",
                          sty.selectionChoise___4F4Cj
                        )}
                        filter={true}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSelectedHeight"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["selectedHeight"]
                                  },
                                  operation: 0,
                                  value: currentItem.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSelectedHeight"] != null &&
                            typeof $steps["updateSelectedHeight"] ===
                              "object" &&
                            typeof $steps["updateSelectedHeight"].then ===
                              "function"
                          ) {
                            $steps["updateSelectedHeight"] = await $steps[
                              "updateSelectedHeight"
                            ];
                          }
                        }}
                        select={(() => {
                          try {
                            return currentItem.value == $state.selectedHeight;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        text={(() => {
                          try {
                            return currentItem.label;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___7PJs0)}>
                {(() => {
                  try {
                    return $state.rangeSlider.value.length != 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Button
                    data-plasmic-name={"button6"}
                    data-plasmic-override={overrides.button6}
                    className={classNames("__wab_instance", sty.button6)}
                    color={generateStateValueProp($state, ["button6", "color"])}
                    filterX={true}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return ($state.rangeSlider.value = []);
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button6", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <XIcon
                      className={classNames(projectcss.all, sty.svg___0Wwhb)}
                      role={"img"}
                    />
                  </Button>
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qTgw3
                  )}
                >
                  {
                    "\u0648\u0632\u0646 \u062e\u0648\u062f \u0631\u0627  \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__oPlwP)}>
                <div className={classNames(projectcss.all, sty.freeBox__lwrHu)}>
                  <RangeSlider
                    data-plasmic-name={"rangeSlider"}
                    data-plasmic-override={overrides.rangeSlider}
                    className={classNames("__wab_instance", sty.rangeSlider)}
                    label={null}
                    maxValue={200}
                    minValue={20}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "rangeSlider",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showOutputText={true}
                    thumbs={
                      <SliderThumb
                        data-plasmic-name={"sliderThumb"}
                        data-plasmic-override={overrides.sliderThumb}
                        autoFocus={false}
                        className={classNames(
                          "__wab_instance",
                          sty.sliderThumb
                        )}
                        disabled={false}
                      />
                    }
                    value={generateStateValueProp($state, [
                      "rangeSlider",
                      "value"
                    ])}
                  />
                </div>
              </div>
            </div>
            <Button
              data-plasmic-name={"button2"}
              data-plasmic-override={overrides.button2}
              className={classNames("__wab_instance", sty.button2)}
              color={generateStateValueProp($state, ["button2", "color"])}
              filter={true}
              onClick={async event => {
                const $steps = {};

                $steps["updateMoreshow"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "moreshow",
                        operation: 2,
                        value: "moreshow"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateMoreshow"] != null &&
                  typeof $steps["updateMoreshow"] === "object" &&
                  typeof $steps["updateMoreshow"].then === "function"
                ) {
                  $steps["updateMoreshow"] = await $steps["updateMoreshow"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button2", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <UpArrowOutboxSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg___69E8Q)}
                role={"img"}
              />
            </Button>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__kIfwx)} />

          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              styleTokensClassNames_antd_5_hostless,
              styleTokensClassNames_plasmic_rich_components
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_Z8H-70maf8cc"]]: hasVariant(
                globalVariants,
                "screen",
                "mobile"
              ),
              [sty["pcls_kKTmSuz3zbWE"]]: true
            })}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={
              <div className={classNames(projectcss.all, sty.freeBox__av4Fr)}>
                <div className={classNames(projectcss.all, sty.freeBox__tbwUf)}>
                  {(() => {
                    const child$Props = {
                      bordered: false,
                      className: classNames("__wab_instance", sty.input),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);

                        (async event => {
                          const $steps = {};

                          $steps["invokeGlobalAction"] = (() => {
                            var n = $state.input.value.length;
                            return 1 < n < 20 && (n % 4 == 0 || n == 1);
                          })()
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://n8n.staas.ir/webhook/tools/getMedicineList",
                                    undefined,
                                    (() => {
                                      try {
                                        return { text: $state.input.value };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["updateDaroo2"] = $steps.invokeGlobalAction
                            ?.data
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["daroo2"]
                                  },
                                  operation: 0,
                                  value: $steps.invokeGlobalAction.data
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDaroo2"] != null &&
                            typeof $steps["updateDaroo2"] === "object" &&
                            typeof $steps["updateDaroo2"].then === "function"
                          ) {
                            $steps["updateDaroo2"] = await $steps[
                              "updateDaroo2"
                            ];
                          }
                        }).apply(null, eventArgs);
                      },
                      placeholder:
                        "\u0627\u0646\u062a\u062e\u0627\u0628 \u0628\u06cc\u0645\u0627\u0631\u06cc \u0647\u0627",
                      prefix: (
                        <SearchSvgIcon
                          className={classNames(projectcss.all, sty.svg__y2I6)}
                          role={"img"}
                        />
                      ),

                      size: "large",
                      value: generateStateValueProp($state, ["input", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input"}
                        data-plasmic-override={overrides.input}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              </div>
            }
            trigger={null}
          >
            <div
              data-plasmic-name={"diseareVer"}
              data-plasmic-override={overrides.diseareVer}
              className={classNames(projectcss.all, sty.diseareVer)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___9FpqV)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.apiRequest.data.result.list.filter(i =>
                        i.value.startsWith($state.input.value)
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (() => {
                    const child$Props = {
                      "aria-label": ``,
                      className: classNames("__wab_instance", sty.checkbox),
                      filter: true,
                      isChecked:
                        generateStateValueProp($state, [
                          "checkbox",
                          __plasmic_idx_0,
                          "isChecked"
                        ]) ?? false,
                      key: currentIndex,
                      name: ``,
                      onChange: async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "checkbox",
                            __plasmic_idx_0,
                            "isChecked"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async isChecked => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      if (
                                        $state.checkbox[currentIndex].isChecked
                                      )
                                        return $state.dataKu.push(
                                          currentItem.key
                                        );
                                      else
                                        return $state.dataKu.splice(
                                          currentItem.key,
                                          1
                                        );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }).apply(null, eventArgs);
                      },
                      value: (() => {
                        try {
                          return currentItem.key;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "checkbox[].isChecked",
                          initFunc: ({ $props, $state, $queries }) => undefined
                        }
                      ],
                      [__plasmic_idx_0]
                    );
                    return (
                      <Checkbox
                        data-plasmic-name={"checkbox"}
                        data-plasmic-override={overrides.checkbox}
                        {...child$Props}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.value;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </Checkbox>
                    );
                  })();
                })}
              </div>
            </div>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"modal3"}
            data-plasmic-override={overrides.modal3}
            className={classNames("__wab_instance", sty.modal3)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              styleTokensClassNames_antd_5_hostless,
              styleTokensClassNames_plasmic_rich_components
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_9dBkBsTC0-70"]]: true,
              [sty["pcls_KvaXz6DAIYa9"]]: hasVariant(
                globalVariants,
                "screen",
                "mobile"
              )
            })}
            modalScopeClassName={sty["modal3__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal3", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal3", "open"])}
            title={
              <div className={classNames(projectcss.all, sty.freeBox___6Wxao)}>
                <div className={classNames(projectcss.all, sty.freeBox__ytfWa)}>
                  {(() => {
                    const child$Props = {
                      bordered: false,
                      className: classNames("__wab_instance", sty.input4),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input4", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);

                        (async event => {
                          const $steps = {};

                          $steps["invokeGlobalAction"] = (() => {
                            var n = $state.input4.value.length;
                            return 1 < n < 20 && (n % 4 == 0 || n == 1);
                          })()
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://n8n.staas.ir/webhook/tools/getMedicineList",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          text: $state.input4.value
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["updateDaroo"] = $steps.invokeGlobalAction
                            ?.data
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["daroo"]
                                  },
                                  operation: 0,
                                  value: $steps.invokeGlobalAction.data.result
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDaroo"] != null &&
                            typeof $steps["updateDaroo"] === "object" &&
                            typeof $steps["updateDaroo"].then === "function"
                          ) {
                            $steps["updateDaroo"] = await $steps["updateDaroo"];
                          }
                        }).apply(null, eventArgs);
                      },
                      placeholder:
                        "\u062f\u0627\u0631\u0648 \u0645\u0635\u0631\u0641\u06cc \u062e\u0648\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f",
                      prefix: (
                        <Icon259Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___6TbK2
                          )}
                          role={"img"}
                        />
                      ),

                      size: "large",
                      value: generateStateValueProp($state, ["input4", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input4.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input4"}
                        data-plasmic-override={overrides.input4}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              </div>
            }
            trigger={null}
          >
            <div
              data-plasmic-name={"diseareVer2"}
              data-plasmic-override={overrides.diseareVer2}
              className={classNames(projectcss.all, sty.diseareVer2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___5M7P3)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.daroo;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (() => {
                    const child$Props = {
                      "aria-label": ``,
                      className: classNames("__wab_instance", sty.checkbox3),
                      filter: true,
                      isChecked:
                        generateStateValueProp($state, [
                          "checkbox3",
                          __plasmic_idx_0,
                          "isChecked"
                        ]) ?? false,
                      key: currentIndex,
                      name: ``,
                      onChange: async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "checkbox3",
                            __plasmic_idx_0,
                            "isChecked"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async isChecked => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      if (
                                        $state.checkbox3[currentIndex].isChecked
                                      )
                                        return $state.daroo2.push(
                                          currentItem.name
                                        );
                                      else
                                        return $state.daroo2.splice(
                                          currentItem.name,
                                          1
                                        );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }).apply(null, eventArgs);
                      },
                      value: (() => {
                        try {
                          return currentItem.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "checkbox3[].isChecked",
                          initFunc: ({ $props, $state, $queries }) => undefined
                        }
                      ],
                      [__plasmic_idx_0]
                    );
                    return (
                      <Checkbox
                        data-plasmic-name={"checkbox3"}
                        data-plasmic-override={overrides.checkbox3}
                        {...child$Props}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </Checkbox>
                    );
                  })();
                })}
              </div>
            </div>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"modal2"}
            data-plasmic-override={overrides.modal2}
            className={classNames("__wab_instance", sty.modal2)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              styleTokensClassNames_antd_5_hostless,
              styleTokensClassNames_plasmic_rich_components
            )}
            modalScopeClassName={sty["modal2__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal2", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal2", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yqIua
                )}
              >
                {"\u0646\u0648\u0639 \u0628\u06cc\u0645\u0627\u0631\u06cc"}
              </div>
            }
            trigger={null}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.input2),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input2", "value"],
                    AntdInput_Helpers
                  ).apply(null, eventArgs);

                  (async event => {
                    const $steps = {};

                    $steps["updateInputValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["input", "value"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateInputValue"] != null &&
                      typeof $steps["updateInputValue"] === "object" &&
                      typeof $steps["updateInputValue"].then === "function"
                    ) {
                      $steps["updateInputValue"] = await $steps[
                        "updateInputValue"
                      ];
                    }
                  }).apply(null, eventArgs);
                },
                placeholder:
                  "\u0646\u0648\u0639 \u0628\u06cc\u0645\u0627\u0631\u06cc \u062e\u0648\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f",
                prefix: (
                  <SearchSvgIcon
                    className={classNames(projectcss.all, sty.svg__n4Qnf)}
                    role={"img"}
                  />
                ),

                value: generateStateValueProp($state, ["input2", "value"])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "input2.value"
                  }
                ],
                [],
                AntdInput_Helpers ?? {},
                child$Props
              );

              return (
                <AntdInput
                  data-plasmic-name={"input2"}
                  data-plasmic-override={overrides.input2}
                  {...child$Props}
                />
              );
            })()}
            <div className={classNames(projectcss.all, sty.freeBox__w8Do6)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.apiRequest.data.result.list;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.checkbox2),
                    isChecked:
                      generateStateValueProp($state, [
                        "checkbox2",
                        __plasmic_idx_0,
                        "isChecked"
                      ]) ?? false,
                    key: currentIndex,
                    name: ``,
                    onChange: async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox2",
                          __plasmic_idx_0,
                          "isChecked"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }
                  };

                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "checkbox2[].isChecked",
                        initFunc: ({ $props, $state, $queries }) => undefined
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <Checkbox
                      data-plasmic-name={"checkbox2"}
                      data-plasmic-override={overrides.checkbox2}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k37Mc
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.value;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Checkbox>
                  );
                })();
              })}
            </div>
          </AntdModal>
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            color={generateStateValueProp($state, ["button", "color"])}
            filter={true}
            onClick={async event => {
              const $steps = {};

              $steps["updateJostjoo"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://n8n.staas.ir/webhook/rest/tools/searchUsers",
                        undefined,
                        (() => {
                          try {
                            return (() => {
                              function removeEmptyFields(obj) {
                                const cleanedObj = {};
                                for (const key in obj) {
                                  if (
                                    Object.prototype.hasOwnProperty.call(
                                      obj,
                                      key
                                    )
                                  ) {
                                    const value = obj[key];
                                    if (
                                      value &&
                                      typeof value === "object" &&
                                      !Array.isArray(value)
                                    ) {
                                      const cleanedNestedObj =
                                        removeEmptyFields(value);
                                      if (
                                        Object.keys(cleanedNestedObj).length > 0
                                      ) {
                                        cleanedObj[key] = cleanedNestedObj;
                                      }
                                    } else if (
                                      value !== null &&
                                      value !== undefined &&
                                      value !== ""
                                    ) {
                                      cleanedObj[key] = value;
                                    }
                                  }
                                }
                                return cleanedObj;
                              }
                              let filter = {
                                size: 5,
                                from: 0,
                                filters: {
                                  sex: $state.sex.value,
                                  job: $state.job.value,
                                  education: $state.education.value,
                                  periodCycle: {
                                    min: 20,
                                    max: 340
                                  },
                                  height: $state.selectedHeight,
                                  married: $state.maritalStatus.value,
                                  weight: {
                                    min: $state.rangeSlider.value[0],
                                    max: $state.rangeSlider.value[1]
                                  }
                                },
                                drugName: $state.daroo2
                              };
                              return removeEmptyFields(filter);
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return {
                                size: 5,
                                from: 0,
                                filters: {
                                  sex: "female",
                                  periodCycle: { min: 20, max: 340 },
                                  height: { min: 170 },
                                  married: true
                                },
                                drugName: ["\u0698\u0644\u0648\u0641\u0646"]
                              };
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["updateJostjoo"] != null &&
                typeof $steps["updateJostjoo"] === "object" &&
                typeof $steps["updateJostjoo"].then === "function"
              ) {
                $steps["updateJostjoo"] = await $steps["updateJostjoo"];
              }

              $steps["updatePanelUsername"] = $steps?.updateJostjoo?.data?.users
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["panelUsername"]
                      },
                      operation: 0,
                      value: $steps.updateJostjoo.data.users
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updatePanelUsername"] != null &&
                typeof $steps["updatePanelUsername"] === "object" &&
                typeof $steps["updatePanelUsername"].then === "function"
              ) {
                $steps["updatePanelUsername"] = await $steps[
                  "updatePanelUsername"
                ];
              }

              $steps["invokeGlobalAction"] =
                $state.panelUsername.length == 0
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u0628\u0627 \u0627\u06cc\u0646 \u0645\u0634\u062e\u0635\u0627\u062a \u06a9\u0627\u0631\u0628\u0631\u06cc \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f!",
                          "top-center"
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }}
            onColorChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button", "color"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            {"\u062c\u0633\u062a\u062c\u0648"}
          </Button>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nbJvj
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ga8Kc
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            shouldFetch={true}
            url={"https://n8n.staas.ir/webhook/tools/getSignList"}
          />

          <div className={classNames(projectcss.all, sty.freeBox__xOEts)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.panelUsername;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__lQi46)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__w9GZk)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2CtTt
                      )}
                    >
                      <Icon110Icon
                        className={classNames(projectcss.all, sty.svg__xgKa)}
                        role={"img"}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mcHwi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rrvTz
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8KRph
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.username;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc:";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9Xbbu)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aD9Lt
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const gregorianDate = new Date(
                                currentItem.updatedAt
                              );
                              const persianDate = new Intl.DateTimeFormat(
                                "fa-IR"
                              ).format(gregorianDate);
                              return persianDate;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062a\u0627\u0631\u06cc\u062e:";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "asli",
    "input3",
    "sex",
    "job",
    "maritalStatus",
    "education",
    "button4",
    "button5",
    "button6",
    "rangeSlider",
    "sliderThumb",
    "button2",
    "modal",
    "diseareVer",
    "checkbox",
    "input",
    "modal3",
    "diseareVer2",
    "checkbox3",
    "input4",
    "modal2",
    "input2",
    "checkbox2",
    "button",
    "apiRequest"
  ],
  asli: [
    "asli",
    "input3",
    "sex",
    "job",
    "maritalStatus",
    "education",
    "button4",
    "button5",
    "button6",
    "rangeSlider",
    "sliderThumb",
    "button2"
  ],
  input3: ["input3"],
  sex: ["sex"],
  job: ["job"],
  maritalStatus: ["maritalStatus"],
  education: ["education"],
  button4: ["button4"],
  button5: ["button5"],
  button6: ["button6"],
  rangeSlider: ["rangeSlider", "sliderThumb"],
  sliderThumb: ["sliderThumb"],
  button2: ["button2"],
  modal: ["modal", "diseareVer", "checkbox", "input"],
  diseareVer: ["diseareVer", "checkbox"],
  checkbox: ["checkbox"],
  input: ["input"],
  modal3: ["modal3", "diseareVer2", "checkbox3", "input4"],
  diseareVer2: ["diseareVer2", "checkbox3"],
  checkbox3: ["checkbox3"],
  input4: ["input4"],
  modal2: ["modal2", "input2", "checkbox2"],
  input2: ["input2"],
  checkbox2: ["checkbox2"],
  button: ["button"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  asli: "div";
  input3: typeof AntdInput;
  sex: typeof Select;
  job: typeof Select;
  maritalStatus: typeof Select;
  education: typeof Select;
  button4: typeof Button;
  button5: typeof Button;
  button6: typeof Button;
  rangeSlider: typeof RangeSlider;
  sliderThumb: typeof SliderThumb;
  button2: typeof Button;
  modal: typeof AntdModal;
  diseareVer: "div";
  checkbox: typeof Checkbox;
  input: typeof AntdInput;
  modal3: typeof AntdModal;
  diseareVer2: "div";
  checkbox3: typeof Checkbox;
  input4: typeof AntdInput;
  modal2: typeof AntdModal;
  input2: typeof AntdInput;
  checkbox2: typeof Checkbox;
  button: typeof Button;
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFilter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFilter__VariantsArgs;
    args?: PlasmicFilter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFilter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFilter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFilter__ArgProps,
          internalVariantPropNames: PlasmicFilter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFilter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFilter";
  } else {
    func.displayName = `PlasmicFilter.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicFilter = Object.assign(
  // Top-level PlasmicFilter renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    asli: makeNodeComponent("asli"),
    input3: makeNodeComponent("input3"),
    sex: makeNodeComponent("sex"),
    job: makeNodeComponent("job"),
    maritalStatus: makeNodeComponent("maritalStatus"),
    education: makeNodeComponent("education"),
    button4: makeNodeComponent("button4"),
    button5: makeNodeComponent("button5"),
    button6: makeNodeComponent("button6"),
    rangeSlider: makeNodeComponent("rangeSlider"),
    sliderThumb: makeNodeComponent("sliderThumb"),
    button2: makeNodeComponent("button2"),
    modal: makeNodeComponent("modal"),
    diseareVer: makeNodeComponent("diseareVer"),
    checkbox: makeNodeComponent("checkbox"),
    input: makeNodeComponent("input"),
    modal3: makeNodeComponent("modal3"),
    diseareVer2: makeNodeComponent("diseareVer2"),
    checkbox3: makeNodeComponent("checkbox3"),
    input4: makeNodeComponent("input4"),
    modal2: makeNodeComponent("modal2"),
    input2: makeNodeComponent("input2"),
    checkbox2: makeNodeComponent("checkbox2"),
    button: makeNodeComponent("button"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicFilter
    internalVariantProps: PlasmicFilter__VariantProps,
    internalArgProps: PlasmicFilter__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFilter;
/* prettier-ignore-end */
