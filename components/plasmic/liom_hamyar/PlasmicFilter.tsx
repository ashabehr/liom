/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: NViyjBtxiFfj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import SelectionChoise from "../../SelectionChoise"; // plasmic-import: kjK-J97SUWLJ/component
import Checkbox from "../../Checkbox"; // plasmic-import: IwXl9xUH-ZMp/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicFilter.module.css"; // plasmic-import: NViyjBtxiFfj/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicFilter__VariantMembers = {};
export type PlasmicFilter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFilter__VariantsArgs;
export const PlasmicFilter__VariantProps = new Array<VariantPropType>();

export type PlasmicFilter__ArgsType = {};
type ArgPropType = keyof PlasmicFilter__ArgsType;
export const PlasmicFilter__ArgProps = new Array<ArgPropType>();

export type PlasmicFilter__OverridesType = {
  root?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  input?: Flex__<typeof AntdInput>;
  checkbox2?: Flex__<typeof Checkbox>;
  button?: Flex__<typeof Button>;
  name?: Flex__<"div">;
  disease?: Flex__<"div">;
  gender2?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  modal?: Flex__<typeof AntdModal>;
  textInput?: Flex__<typeof TextInput>;
  input2?: Flex__<typeof AntdInput>;
  diseare?: Flex__<typeof AntdModal>;
};

export interface DefaultFilterProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFilter__RenderFunc(props: {
  variants: PlasmicFilter__VariantsArgs;
  args: PlasmicFilter__ArgsType;
  overrides: PlasmicFilter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "gender",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "\u062f\u062e\u062a\u0631", value: "Employed" },
          { label: "\u067e\u0633\u0631", value: "unEmployed" }
        ]
      },
      {
        path: "age",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label: "\u06f1\u06f0-\u06f1\u06f3",
            value: "\u06f1\u06f0-\u06f1\u06f3"
          },
          {
            label: "\u06f1\u06f4-\u06f1\u06f7",
            value: "\u06f1\u06f4-\u06f1\u06f7"
          },
          {
            label: "\u06f1\u06f8-\u06f2\u06f2",
            value: "\u06f1\u06f8-\u06f2\u06f2"
          },
          {
            label: "\u06f2\u06f3-\u06f2\u06f8",
            value: "\u06f2\u06f3-\u06f2\u06f8"
          },
          {
            label: "\u06f2\u06f8-\u06f3\u06f5",
            value: "\u06f2\u06f8-\u06f3\u06f5"
          },
          {
            label: "\u0628\u0627\u0644\u0627\u06cc \u06f3\u06f5",
            value: "\u0628\u0627\u0644\u0627\u06cc \u06f3\u06f5"
          }
        ]
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dataKu",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "checkbox2[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "daroo",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u0622\u0645\u0648\u06a9\u0633\u06cc\u200c\u0633\u06cc\u0644\u06cc\u0646",
          "\u0627\u0633\u062a\u0627\u0645\u06cc\u0646\u0648\u0641\u0646",
          "\u0627\u06cc\u0628\u0648\u067e\u0631\u0648\u0641\u0646",
          "\u0633\u06cc\u062a\u0631\u06cc\u0632\u06cc\u0646",
          "\u06a9\u0644\u0631\u0641\u0646\u06cc\u0631\u0627\u0645\u06cc\u0646",
          "\u0631\u0627\u0646\u06cc\u062a\u06cc\u062f\u06cc\u0646",
          "\u0644\u0648\u067e\u0631\u0627\u0645\u06cc\u062f",
          "\u0633\u0641\u062a\u0631\u06cc\u0627\u06a9\u0633\u0648\u0646",
          "\u0622\u0632\u06cc\u062a\u0631\u0648\u0645\u0627\u06cc\u0633\u06cc\u0646",
          "\u062f\u06cc\u0641\u0646\u200c\u0647\u06cc\u062f\u0631\u0627\u0645\u06cc\u0646"
        ]
      },
      {
        path: "daroo2",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "diseare.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__kIfwx)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gvcFz
              )}
            >
              {
                "\u062c\u0646\u0633\u06cc\u062a \u062e\u0648\u062f \u0631\u0627 \u0645\u0634\u062e\u0635 \u06a9\u0646\u06cc\u062f."
              }
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__msFj)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return [
                    { label: "دختر", value: "Employed" },
                    { label: "پسر", value: "unEmployed" }
                  ];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <SelectionChoise
                  className={classNames(
                    "__wab_instance",
                    sty.selectionChoise___9WUym
                  )}
                  filter={true}
                  key={currentIndex}
                  selected={false}
                  text={(() => {
                    try {
                      return currentItem.label;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              );
            })}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__fjp2A)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__it5Gs
              )}
            >
              {
                "\u062d\u062f\u0648\u062f\u0627  \u0686\u0646\u062f  \u0633\u0627\u0644  \u062f\u0627\u0631\u06cc\u062f\u061f"
              }
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__n7TRo)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.age;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <SelectionChoise
                  className={classNames(
                    "__wab_instance",
                    sty.selectionChoise__by5Zi
                  )}
                  filter={true}
                  key={currentIndex}
                  text={(() => {
                    try {
                      return currentItem.label;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              );
            })}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__pwnBd)}>
            <div className={classNames(projectcss.all, sty.freeBox__bgO1S)} />

            <div className={classNames(projectcss.all, sty.freeBox___9FpqV)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.apiRequest.data.result.list;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (() => {
                  const child$Props = {
                    "aria-label": ``,
                    className: classNames("__wab_instance", sty.checkbox),
                    isChecked:
                      generateStateValueProp($state, [
                        "checkbox",
                        __plasmic_idx_0,
                        "isChecked"
                      ]) ?? false,
                    key: currentIndex,
                    name: ``,
                    onChange: async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox",
                          __plasmic_idx_0,
                          "isChecked"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async isChecked => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    if ($state.checkbox[currentIndex].isChecked)
                                      return $state.dataKu.push(
                                        currentItem.key
                                      );
                                    else
                                      return $state.dataKu.splice(
                                        currentItem.key,
                                        1
                                      );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }).apply(null, eventArgs);
                    },
                    value: (() => {
                      try {
                        return currentItem.key;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  };

                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "checkbox[].isChecked",
                        initFunc: ({ $props, $state, $queries }) => undefined
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <Checkbox
                      data-plasmic-name={"checkbox"}
                      data-plasmic-override={overrides.checkbox}
                      {...child$Props}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </Checkbox>
                  );
                })();
              })}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__voUA)}>
            <div className={classNames(projectcss.all, sty.freeBox__lhd31)}>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input", "value"],
                      AntdInput_Helpers
                    ).apply(null, eventArgs);

                    (async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = (() => {
                        var n = $state.input.value.length;
                        return 1 < n < 20 && (n % 4 == 0 || n == 1);
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/tools/getMedicineList",
                                undefined,
                                (() => {
                                  try {
                                    return { text: $state.input.value };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateDaroo2"] = $steps.invokeGlobalAction?.data
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["daroo2"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction.data
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDaroo2"] != null &&
                        typeof $steps["updateDaroo2"] === "object" &&
                        typeof $steps["updateDaroo2"].then === "function"
                      ) {
                        $steps["updateDaroo2"] = await $steps["updateDaroo2"];
                      }
                    }).apply(null, eventArgs);
                  },
                  placeholder:
                    "\u062f\u0627\u0631\u0648 \u0645\u0635\u0631\u0641\u06cc \u062e\u0648\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f",
                  prefix: (
                    <SearchSvgIcon
                      className={classNames(projectcss.all, sty.svg__y2I6)}
                      role={"img"}
                    />
                  ),

                  value: generateStateValueProp($state, ["input", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input.value"
                    }
                  ],
                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input"}
                    data-plasmic-override={overrides.input}
                    {...child$Props}
                  />
                );
              })()}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__wkY3F)}>
            <div className={classNames(projectcss.all, sty.freeBox__w8Do6)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.daroo2.result;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.checkbox2),
                    isChecked:
                      generateStateValueProp($state, [
                        "checkbox2",
                        __plasmic_idx_0,
                        "isChecked"
                      ]) ?? false,
                    key: currentIndex,
                    name: ``,
                    onChange: async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox2",
                          __plasmic_idx_0,
                          "isChecked"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }
                  };

                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "checkbox2[].isChecked",
                        initFunc: ({ $props, $state, $queries }) => undefined
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <Checkbox
                      data-plasmic-name={"checkbox2"}
                      data-plasmic-override={overrides.checkbox2}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k37Mc
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Checkbox>
                  );
                })();
              })}
            </div>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={generateStateValueProp($state, ["button", "color"])}
              filter={true}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              {"\u062c\u0633\u062a\u062c\u0648"}
            </Button>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___4Uger)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vUjXr
              )}
            >
              {"\u0627\u0633\u0627\u0645\u06cc"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__cvAky)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.daroo;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__abhHg)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__s8V9Q)}
                    >
                      <div
                        data-plasmic-name={"name"}
                        data-plasmic-override={overrides.name}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.name
                        )}
                      >
                        {"Enter some text"}
                      </div>
                      <div
                        data-plasmic-name={"disease"}
                        data-plasmic-override={overrides.disease}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.disease
                        )}
                      >
                        {"Enter some text"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__s1Mwo)}
                    >
                      <div
                        data-plasmic-name={"gender2"}
                        data-plasmic-override={overrides.gender2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.gender2
                        )}
                      >
                        {"Enter some text"}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nbJvj
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ga8Kc
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            shouldFetch={true}
            url={"https://n8n.staas.ir/webhook/tools/getSignList"}
          />

          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={"Modal title"}
            trigger={null}
          >
            <div className={classNames(projectcss.all, sty.freeBox__x4WWm)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sZoLy
                )}
              >
                {"Modal content"}
              </div>
            </div>
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              value={
                generateStateValueProp($state, ["textInput", "value"]) ?? ""
              }
            />
          </AntdModal>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.input2),
              onChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["input2", "value"],
                  AntdInput_Helpers
                ).apply(null, eventArgs);

                (async event => {
                  const $steps = {};

                  $steps["updateInputValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["input", "value"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateInputValue"] != null &&
                    typeof $steps["updateInputValue"] === "object" &&
                    typeof $steps["updateInputValue"].then === "function"
                  ) {
                    $steps["updateInputValue"] = await $steps[
                      "updateInputValue"
                    ];
                  }
                }).apply(null, eventArgs);
              },
              placeholder:
                "\u0646\u0648\u0639 \u0628\u06cc\u0645\u0627\u0631\u06cc \u062e\u0648\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f",
              prefix: (
                <SearchSvgIcon
                  className={classNames(projectcss.all, sty.svg__n4Qnf)}
                  role={"img"}
                />
              ),

              value: generateStateValueProp($state, ["input2", "value"])
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "input2.value"
                }
              ],
              [],
              AntdInput_Helpers ?? {},
              child$Props
            );

            return (
              <AntdInput
                data-plasmic-name={"input2"}
                data-plasmic-override={overrides.input2}
                {...child$Props}
              />
            );
          })()}
          <AntdModal
            data-plasmic-name={"diseare"}
            data-plasmic-override={overrides.diseare}
            className={classNames("__wab_instance", sty.diseare)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            modalScopeClassName={sty["diseare__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["diseare", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["diseare", "open"])}
            title={"Modal title"}
            trigger={
              <AntdButton
                className={classNames("__wab_instance", sty.button__wdzTm)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oy0YE
                  )}
                >
                  {"Show modal"}
                </div>
              </AntdButton>
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox___25NPx)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lmW1A
                )}
              >
                {"Modal content"}
              </div>
            </div>
          </AntdModal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "checkbox",
    "input",
    "checkbox2",
    "button",
    "name",
    "disease",
    "gender2",
    "apiRequest",
    "modal",
    "textInput",
    "input2",
    "diseare"
  ],
  checkbox: ["checkbox"],
  input: ["input"],
  checkbox2: ["checkbox2"],
  button: ["button"],
  name: ["name"],
  disease: ["disease"],
  gender2: ["gender2"],
  apiRequest: ["apiRequest"],
  modal: ["modal", "textInput"],
  textInput: ["textInput"],
  input2: ["input2"],
  diseare: ["diseare"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  checkbox: typeof Checkbox;
  input: typeof AntdInput;
  checkbox2: typeof Checkbox;
  button: typeof Button;
  name: "div";
  disease: "div";
  gender2: "div";
  apiRequest: typeof ApiRequest;
  modal: typeof AntdModal;
  textInput: typeof TextInput;
  input2: typeof AntdInput;
  diseare: typeof AntdModal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFilter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFilter__VariantsArgs;
    args?: PlasmicFilter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFilter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFilter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFilter__ArgProps,
          internalVariantPropNames: PlasmicFilter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFilter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFilter";
  } else {
    func.displayName = `PlasmicFilter.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicFilter = Object.assign(
  // Top-level PlasmicFilter renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    checkbox: makeNodeComponent("checkbox"),
    input: makeNodeComponent("input"),
    checkbox2: makeNodeComponent("checkbox2"),
    button: makeNodeComponent("button"),
    _name: makeNodeComponent("name"),
    disease: makeNodeComponent("disease"),
    gender2: makeNodeComponent("gender2"),
    apiRequest: makeNodeComponent("apiRequest"),
    modal: makeNodeComponent("modal"),
    textInput: makeNodeComponent("textInput"),
    input2: makeNodeComponent("input2"),
    diseare: makeNodeComponent("diseare"),

    // Metadata about props expected for PlasmicFilter
    internalVariantProps: PlasmicFilter__VariantProps,
    internalArgProps: PlasmicFilter__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFilter;
/* prettier-ignore-end */
