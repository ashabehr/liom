/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: zIxrUaJyE_Qc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Chart } from "@/fragment/components/chart"; // plasmic-import: 2Vi4mc7aEpf-/codeComponent
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicDetailsmonth.module.css"; // plasmic-import: zIxrUaJyE_Qc/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon165Icon from "./icons/PlasmicIcon__Icon165"; // plasmic-import: BbakN6wLCJed/icon
import Icon298Icon from "./icons/PlasmicIcon__Icon298"; // plasmic-import: 8xj6BHtABX4C/icon
import Icon299Icon from "./icons/PlasmicIcon__Icon299"; // plasmic-import: bMTPZcxBEEb7/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicDetailsmonth__VariantMembers = {};
export type PlasmicDetailsmonth__VariantsArgs = {};
type VariantPropType = keyof PlasmicDetailsmonth__VariantsArgs;
export const PlasmicDetailsmonth__VariantProps = new Array<VariantPropType>();

export type PlasmicDetailsmonth__ArgsType = {};
type ArgPropType = keyof PlasmicDetailsmonth__ArgsType;
export const PlasmicDetailsmonth__ArgProps = new Array<ArgPropType>();

export type PlasmicDetailsmonth__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  fragmentChart?: Flex__<typeof Chart>;
  section?: Flex__<"section">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultDetailsmonthProps {}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDetailsmonth__RenderFunc(props: {
  variants: PlasmicDetailsmonth__VariantsArgs;
  args: PlasmicDetailsmonth__ArgsType;
  overrides: PlasmicDetailsmonth__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "button2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "details",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjgwNThlZDgzLTEwYTctNDlmMS05MTY3LTIwYzk3MjU1OTliMiIsInR5cGUiOiJzZXNzaW9uIiwiaWF0IjoxNzU3ODQyNjE3fQ.3rutUx2idb9XaNsvl3CFojPoUh9OciNK_RCJdabFIoc"
      },
      {
        path: "avgWater",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const events = $state.apiRequest.data.result.events;
                const period = $state.apiRequest.data.result.period;
                const t = events.reduce((s, e) => s + e.value, 0);
                const start = new Date(
                  period.start.year,
                  period.start.month - 1,
                  period.start.day
                );
                const end = new Date(
                  period.end.year,
                  period.end.month - 1,
                  period.end.day
                );
                const total =
                  Math.floor((end - start) / (1000 * 60 * 60 * 24)) + 1;
                const avg = total > 0 ? Math.round(t / total) : 0;
                return avg;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "drugNames",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const events = $state.apiRequest.data.result.events;
                const allDrugs = events.flatMap(e => e.drug || []);
                const drugNames = [...new Set(allDrugs.map(d => d))];
                return drugNames;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__k9Z1)}>
            <div className={classNames(projectcss.all, sty.freeBox__s0X0Q)}>
              <div className={classNames(projectcss.all, sty.freeBox__lr9Jl)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wlhF0
                  )}
                >
                  {"\u0627\u0632"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2L7YF
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          var a = $state.apiRequest.data.result.period.start;
                          const now = new Date(a.year, a.month - 1, a.day);
                          const g = new Intl.DateTimeFormat("fa-IR", {
                            year: "numeric",
                            month: "long",
                            day: "numeric"
                          }).format(now);
                          return g;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "27 \u062a\u06cc\u0631 1404";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aIfHt
                  )}
                >
                  {"\u062a\u0627"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1U1Ad
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          var a = $state.apiRequest.data.result.period.end;
                          const now = new Date(a.year, a.month - 1, a.day);
                          const g = new Intl.DateTimeFormat("fa-IR", {
                            year: "numeric",
                            month: "long",
                            day: "numeric"
                          }).format(now);
                          return g;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "16 \u0645\u0631\u062f\u0627\u062f 1404";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__zmmyG)}>
                {(() => {
                  try {
                    return $state.apiRequest.data?.result?.period?.isNormal;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__blMu
                    )}
                  >
                    {
                      "\u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0646\u0631\u0645\u0627\u0644 \u0628\u0648\u062f"
                    }
                  </div>
                ) : null}
                {(() => {
                  try {
                    return !$state.apiRequest.data?.result?.period?.isNormal;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bEvcp
                    )}
                  >
                    {
                      "\u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0646\u0631\u0645\u0627\u0644 \u0646\u0628\u0648\u062f"
                    }
                  </div>
                ) : null}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__v899Y)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vOkxG
                  )}
                >
                  {
                    "\u0647\u0631 \u0631\u0648\u0632 \n\u0628\u0647 \u06a9\u0645\u06a9 \u0627\u0628\u0632\u0627\u0631  >> \u0628\u0631\u0646\u0627\u0645\u0647 \u0627\u0645\u0631\u0648\u0632 << \u0639\u0644\u0627\u0626\u0645\u062a\u0648\u0646 \u0631\u0648 \u062b\u0628\u062a \u06a9\u0646\u06cc\u062f \u062a\u0627 \u062f\u0627\u062f\u0647 \u0628\u06cc\u0634\u062a\u0631\u06cc \u0627\u0632 \u0627\u062a\u0641\u0627\u0642\u0627\u062a\u06cc \u06a9\u0647 \u062f\u0631 \u06cc\u06a9 \u062f\u0648\u0631\u0647 \u0642\u0627\u0639\u062f\u06af\u06cc \u0634\u0645\u0627 \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a \u0628\u062f\u0633\u062a \u0622\u0648\u0631\u06cc\u062f "
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__stJmD)}>
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={generateStateValueProp($state, ["button", "color"])}
                  load={generateStateValueProp($state, ["button", "load"])}
                  loading={generateStateValueProp($state, [
                    "button",
                    "loading"
                  ])}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "loading"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bIlE0
                    )}
                  >
                    {
                      "\u0628\u0631\u0646\u0627\u0645\u0647 \u0631\u06cc\u0632\u06cc \u0627\u0645\u0631\u0648\u0632"
                    }
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  color={generateStateValueProp($state, ["button2", "color"])}
                  load={generateStateValueProp($state, ["button2", "load"])}
                  loading={generateStateValueProp($state, [
                    "button2",
                    "loading"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                function a(date) {
                                  const now = new Date(
                                    date.year,
                                    date.month - 1,
                                    date.day
                                  );
                                  return new Intl.DateTimeFormat("fa-IR", {
                                    year: "numeric",
                                    month: "long",
                                    day: "numeric"
                                  }).format(now);
                                }
                                const text = `
تاریخ شروع دوره : ${a($state.apiRequest.data.result.period.start)}
تاریخ پایان دوره : ${a($state.apiRequest.data.result.period.end)}
داروهای مصرفی :    ${$state.apiRequest.data.result.events.map(
                                  event => `(${event.drug.join(",")})`
                                )}
میانگین آب مصرفی : روزانه ${
                                  $state.apiRequest.data.result.events[0].value
                                } لیوان 
وضعیت رابطه جنسی :  ${
                                  $state.apiRequest.data.result.events[0].sex
                                    ? "رابطه داشتم"
                                    : "رابطه نداشتم"
                                }
`;
                                return $$.copyToClipboard(text);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["updateButton2Color2"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u06af\u0632\u0627\u0631\u0634 \u062f\u0648\u0631\u0647 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u06a9\u067e\u06cc \u0634\u062f!",
                              "bottom-center"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["updateButton2Color2"] != null &&
                      typeof $steps["updateButton2Color2"] === "object" &&
                      typeof $steps["updateButton2Color2"].then === "function"
                    ) {
                      $steps["updateButton2Color2"] = await $steps[
                        "updateButton2Color2"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "loading"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  serface={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w6Nm
                    )}
                  >
                    {
                      "\u062f\u0631\u06cc\u0627\u0641\u062a \u06af\u0632\u0627\u0631\u0634 \u062f\u0648\u0631\u0647"
                    }
                  </div>
                </Button>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wjEkt)}>
                <div className={classNames(projectcss.all, sty.freeBox__pN03)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dlo4D)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e4EUb
                      )}
                    >
                      {
                        "\u062f\u0627\u0631\u0648 \u0647\u0627\u06cc \u0645\u0635\u0631\u0641\u06cc"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__g5Fmr
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `میانگین:روزی ${$state.avgWater} لیوان`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0622\u0628 \u0645\u0635\u0631\u0641\u06cc";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.drugNames;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__atTbn
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cjely
                          )}
                        >
                          <Icon165Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__iWnqa
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vOyVr
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xInad
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tZnP
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.number;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wETit
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return "عدد";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__nCkua)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sxRkz)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r0Hx6
                      )}
                    >
                      {"\u0622\u0628 \u0645\u0635\u0631\u0641\u06cc"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jrLg5
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `میانگین:روزی ${$state.avgWater} لیوان`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0622\u0628 \u0645\u0635\u0631\u0641\u06cc";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <Chart
                    data-plasmic-name={"fragmentChart"}
                    data-plasmic-override={overrides.fragmentChart}
                    cartesianGrid={[]}
                    chartConfig={(() => {
                      const __composite = [
                        {
                          color: null,
                          type: "natural",
                          dot: false,
                          key: null,
                          label: null
                        }
                      ];
                      __composite["0"]["color"] = "var(--token-0xHMxyAHbOos)";
                      __composite["0"]["key"] = "water";
                      __composite["0"]["label"] =
                        "\u0644\u06cc\u0648\u0627\u0646 \u0622\u0628";
                      return __composite;
                    })()}
                    className={classNames("__wab_instance", sty.fragmentChart)}
                    data={(() => {
                      try {
                        return (() => {
                          const events = $state.apiRequest.data.result.events;
                          const periodStart =
                            $state.apiRequest.data.result.period.start;
                          const periodEnd =
                            $state.apiRequest.data.result.period.end;
                          const eventsMap = new Map(
                            events.map(e => {
                              const { year, month, day } = e.date;
                              const dateStr = `${year}-${String(month).padStart(
                                2,
                                "0"
                              )}-${String(day).padStart(2, "0")}`;
                              return [dateStr, e.value];
                            })
                          );
                          const startDate = new Date(
                            periodStart.year,
                            periodStart.month - 1,
                            periodStart.day
                          );
                          const endDate = new Date(
                            periodEnd.year,
                            periodEnd.month - 1,
                            periodEnd.day
                          );
                          const fmt = new Intl.DateTimeFormat(
                            "fa-IR-u-nu-latn",
                            {
                              timeZone: "Asia/Tehran",
                              day: "2-digit"
                            }
                          );
                          const waterList = [];
                          for (
                            let d = new Date(startDate);
                            d <= endDate;
                            d.setDate(d.getDate() + 1)
                          ) {
                            const gregorianStr = d.toLocaleDateString("en-CA", {
                              timeZone: "Asia/Tehran"
                            });
                            const persianStr = fmt.format(d);
                            waterList.push({
                              date: persianStr,
                              water: eventsMap.get(gregorianStr) ?? 0
                            });
                          }
                          waterList.reverse();
                          return waterList;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={true}
                    layout={"horizontal"}
                    legend={false}
                    stack={false}
                    tooltip={(() => {
                      const __composite = { enabled: null };
                      __composite["enabled"] = true;
                      return __composite;
                    })()}
                    type={"bar"}
                    xAxis={(() => {
                      const __composite = {
                        key: null,
                        type: null,
                        tickLine: null,
                        enabled: null,
                        axisLine: null
                      };
                      __composite["key"] = "date";
                      __composite["type"] = "category";
                      __composite["tickLine"] = false;
                      __composite["enabled"] = true;
                      __composite["axisLine"] = true;
                      return __composite;
                    })()}
                    yAxis={(() => {
                      const __composite = {
                        type: null,
                        key: null,
                        enabled: null,
                        tickLine: null,
                        axisLine: null,
                        tickMargin: null
                      };
                      __composite["type"] = "number";
                      __composite["key"] = "water";
                      __composite["enabled"] = false;
                      __composite["tickLine"] = false;
                      __composite["axisLine"] = false;
                      __composite["tickMargin"] = 0;
                      return __composite;
                    })()}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__zXdrI)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2KHeg)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__p5Ma8
                      )}
                    >
                      {
                        "\u0648\u0636\u0639\u06cc\u062a \u0631\u0627\u0628\u0637\u0647 \u062c\u0646\u0633\u06cc"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lp2P2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w6IbP
                      )}
                    >
                      {"\u0648\u0636\u0639\u06cc\u062a"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yllzJ)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return (() => {
                              const events =
                                $state.apiRequest.data.result.events;
                              const periodStart =
                                $state.apiRequest.data.result.period.start;
                              const periodEnd =
                                $state.apiRequest.data.result.period.end;
                              const eventsMap = new Map(
                                events.map(e => {
                                  const { year, month, day } = e.date;
                                  const dateStr = `${year}-${String(
                                    month
                                  ).padStart(2, "0")}-${String(day).padStart(
                                    2,
                                    "0"
                                  )}`;
                                  return [dateStr, e.sex];
                                })
                              );
                              const startDate = new Date(
                                periodStart.year,
                                periodStart.month - 1,
                                periodStart.day
                              );
                              const endDate = new Date(
                                periodEnd.year,
                                periodEnd.month - 1,
                                periodEnd.day
                              );
                              const fmt = new Intl.DateTimeFormat(
                                "fa-IR-u-nu-latn",
                                {
                                  timeZone: "Asia/Tehran",
                                  day: "2-digit"
                                }
                              );
                              const waterList = [];
                              for (
                                let d = new Date(startDate);
                                d <= endDate;
                                d.setDate(d.getDate() + 1)
                              ) {
                                const gregorianStr = d.toLocaleDateString(
                                  "en-CA",
                                  { timeZone: "Asia/Tehran" }
                                );
                                const persianStr = fmt.format(d);
                                waterList.push({
                                  date: persianStr,
                                  sex: eventsMap.get(gregorianStr) ?? 0
                                });
                              }
                              return waterList;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__t0Bvx
                            )}
                            key={currentIndex}
                          >
                            {(() => {
                              try {
                                return (
                                  currentItem.sex == 0 ||
                                  currentItem.sex == "noProtected"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Icon298Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__a9AyP
                                )}
                                role={"img"}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return (
                                  currentItem.sex != 0 &&
                                  currentItem.sex != "noProtected"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Icon299Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__auPtm
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vpq6P
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.date;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kcuE4)}
                  >
                    <Icon299Icon
                      className={classNames(projectcss.all, sty.svg__pgx3N)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0DKvI
                      )}
                    >
                      {
                        "\u0631\u0627\u0628\u0637\u0647 \u0645\u062d\u0627\u0641\u0638\u062a \u0646\u0634\u062f\u0647 \u062f\u0627\u0634\u062a\u0645 "
                      }
                    </div>
                    <Icon299Icon
                      className={classNames(projectcss.all, sty.svg__i9OxQ)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rLKk7
                      )}
                    >
                      {
                        "\u0631\u0627\u0628\u0637\u0647 \u0645\u062d\u0627\u0641\u0638\u062a \u0634\u062f\u0647 \u062f\u0627\u0634\u062a\u0645"
                      }
                    </div>
                  </div>
                </div>
              </div>
              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              >
                <HeaderLiom
                  data-plasmic-name={"headerLiom"}
                  data-plasmic-override={overrides.headerLiom}
                  className={classNames("__wab_instance", sty.headerLiom)}
                />
              </section>
            </div>
          </div>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            body={{ id: "c10a4be3-c16c-4876-901b-c5df89ec7dae" }}
            className={classNames("__wab_instance", sty.apiRequest)}
            config={(() => {
              try {
                return {
                  headers: {
                    authorization: $state.details
                  }
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yoPYk
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oUgFg
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"POST"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            shouldFetch={true}
            url={"https://n8n.staas.ir/webhook/calendar/getDetails"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "button",
    "button2",
    "fragmentChart",
    "section",
    "headerLiom",
    "apiRequest"
  ],
  button: ["button"],
  button2: ["button2"],
  fragmentChart: ["fragmentChart"],
  section: ["section", "headerLiom"],
  headerLiom: ["headerLiom"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
  button2: typeof Button;
  fragmentChart: typeof Chart;
  section: "section";
  headerLiom: typeof HeaderLiom;
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDetailsmonth__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDetailsmonth__VariantsArgs;
    args?: PlasmicDetailsmonth__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDetailsmonth__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDetailsmonth__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDetailsmonth__ArgProps,
          internalVariantPropNames: PlasmicDetailsmonth__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDetailsmonth__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDetailsmonth";
  } else {
    func.displayName = `PlasmicDetailsmonth.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicDetailsmonth = Object.assign(
  // Top-level PlasmicDetailsmonth renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    fragmentChart: makeNodeComponent("fragmentChart"),
    section: makeNodeComponent("section"),
    headerLiom: makeNodeComponent("headerLiom"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicDetailsmonth
    internalVariantProps: PlasmicDetailsmonth__VariantProps,
    internalArgProps: PlasmicDetailsmonth__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDetailsmonth;
/* prettier-ignore-end */
