/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: npU0JycAnQRQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Chart } from "@/fragment/components/chart"; // plasmic-import: 2Vi4mc7aEpf-/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicChartViow.module.css"; // plasmic-import: npU0JycAnQRQ/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import Line3Icon from "./icons/PlasmicIcon__Line3"; // plasmic-import: cDBsZfQFOOWa/icon

createPlasmicElementProxy;

export type PlasmicChartViow__VariantMembers = {};
export type PlasmicChartViow__VariantsArgs = {};
type VariantPropType = keyof PlasmicChartViow__VariantsArgs;
export const PlasmicChartViow__VariantProps = new Array<VariantPropType>();

export type PlasmicChartViow__ArgsType = {
  data?: any;
  onBack?: (event: any) => void;
  loading?: boolean;
  onClick?: (event: any) => void;
  onUserdataChange?: (val: string) => void;
  children?: React.ReactNode;
  selectChart?: any;
};
type ArgPropType = keyof PlasmicChartViow__ArgsType;
export const PlasmicChartViow__ArgProps = new Array<ArgPropType>(
  "data",
  "onBack",
  "loading",
  "onClick",
  "onUserdataChange",
  "children",
  "selectChart"
);

export type PlasmicChartViow__OverridesType = {
  frame49?: Flex__<"div">;
  frame25?: Flex__<"div">;
  frame48?: Flex__<"div">;
  fragmentChart?: Flex__<typeof Chart>;
};

export interface DefaultChartViowProps {
  data?: any;
  onBack?: (event: any) => void;
  loading?: boolean;
  onClick?: (event: any) => void;
  onUserdataChange?: (val: string) => void;
  children?: React.ReactNode;
  selectChart?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChartViow__RenderFunc(props: {
  variants: PlasmicChartViow__VariantsArgs;
  args: PlasmicChartViow__ArgsType;
  overrides: PlasmicChartViow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: [
            {
              date: "2025-09-17",
              ok_count: 20,
              not_ok_count: 122,
              ok_nok_conversion_rate: 14.08,
              page_view_count: 1537,
              page_conversion_rate: 1.3
            },
            {
              date: "2025-09-18",
              ok_count: 20,
              not_ok_count: 124,
              ok_nok_conversion_rate: 13.89,
              page_view_count: 1265,
              page_conversion_rate: 1.58
            },
            {
              date: "2025-09-19",
              ok_count: 17,
              not_ok_count: 137,
              ok_nok_conversion_rate: 11.04,
              page_view_count: 1200,
              page_conversion_rate: 1.42
            },
            {
              date: "2025-09-20",
              ok_count: 24,
              not_ok_count: 141,
              ok_nok_conversion_rate: 14.55,
              page_view_count: 1510,
              page_conversion_rate: 1.59
            },
            {
              date: "2025-09-21",
              ok_count: 25,
              not_ok_count: 143,
              ok_nok_conversion_rate: 14.88,
              page_view_count: 1654,
              page_conversion_rate: 1.51
            },
            {
              date: "2025-09-22",
              ok_count: 21,
              not_ok_count: 144,
              ok_nok_conversion_rate: 12.73,
              page_view_count: 1179,
              page_conversion_rate: 1.78
            },
            {
              date: "2025-09-23",
              ok_count: 16,
              not_ok_count: 135,
              ok_nok_conversion_rate: 10.6,
              page_view_count: 1221,
              page_conversion_rate: 1.31
            },
            {
              date: "2025-09-24",
              ok_count: 17,
              not_ok_count: 154,
              ok_nok_conversion_rate: 9.94,
              page_view_count: 1222,
              page_conversion_rate: 1.39
            },
            {
              date: "2025-09-25",
              ok_count: 23,
              not_ok_count: 191,
              ok_nok_conversion_rate: 10.75,
              page_view_count: 1639,
              page_conversion_rate: 1.4
            },
            {
              date: "2025-09-26",
              ok_count: 25,
              not_ok_count: 191,
              ok_nok_conversion_rate: 11.57,
              page_view_count: 1651,
              page_conversion_rate: 1.51
            },
            {
              date: "2025-09-27",
              ok_count: 2,
              not_ok_count: 7,
              ok_nok_conversion_rate: 22.22,
              page_view_count: 163,
              page_conversion_rate: 1.23
            }
          ],
          loading: false,
          selectChart: {
            lable:
              "\u0646\u0631\u062e \u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0648\u0641\u0642",
            link: "https://n8n.staas.ir/webhook/panel/convertionPayment",
            icon: '<svg width="305" height="135" viewBox="0 0 305 135" fill="none" xmlns="http://www.w3.org/2000/svg">\r\n<path fill-rule="evenodd" clip-rule="evenodd" d="M1.53174 130.559V79.6143C1.53174 75.072 5.72803 71.6913 10.1663 72.6581C11.529 72.9549 12.9489 72.8449 14.2497 72.3418L17.7445 70.9901C20.8458 69.7906 24.3665 70.7843 26.3831 73.4281C29.7491 77.8412 36.5812 77.1752 39.0315 72.195L40.476 69.2592C42.695 64.7491 48.0433 62.7482 52.6777 64.6943L53.3081 64.959C54.5248 65.4699 55.8289 65.7404 57.1485 65.7557L59.599 65.7841C63.588 65.8304 67.3643 67.5909 69.9645 70.6165L71.7894 72.7401C74.6516 76.0706 79.3432 77.16 83.3801 75.4315C85.8982 74.3532 87.8679 72.2948 88.8341 69.7316L95.8117 51.2216C96.9721 48.1435 100.645 46.8783 103.455 48.5888C106.233 50.28 109.865 49.0641 111.065 46.041L113.129 40.8407C115.903 33.8519 125.277 32.6333 129.745 38.6807C130.059 39.1053 130.407 39.5033 130.787 39.8706L140.94 49.7013L145.745 55.0611C148.515 58.1517 153.554 57.342 155.216 53.5389C157.443 48.4461 164.896 49.2223 166.025 54.6645L167.3 60.807C168.899 68.512 179.661 69.1411 182.147 61.6747L183.835 56.6023L192.08 36.0758C193.712 32.0142 196.241 28.3745 199.48 25.4297L203.472 21.799C204.67 20.7094 205.672 19.4214 206.433 17.9916L211.63 8.22498C213.746 4.24835 219.185 3.61382 222.159 6.9965C224.629 9.80528 228.964 9.92851 231.589 7.26462L231.795 7.0561C234.74 4.06814 239.673 4.48083 242.081 7.9166L242.897 9.08173C245.675 13.0456 251.331 13.6039 254.83 10.2596L255.03 10.0686C257.38 7.82284 260.84 7.19007 263.832 8.45901L265.284 9.07458C268.046 10.2459 270.178 12.5391 271.145 15.3792L277.713 34.6666C278.871 38.0681 283.301 38.8993 285.613 36.149C287.967 33.3496 292.486 34.2703 293.557 37.7674L301.797 64.6668V130.559" fill="url(#paint0_linear_19_600)"/>\r\n<path d="M1.53174 130.559V79.6143C1.53174 75.072 5.72803 71.6913 10.1663 72.6581C11.529 72.9549 12.9489 72.8449 14.2497 72.3418L17.7445 70.9901C20.8458 69.7906 24.3665 70.7843 26.3831 73.4281C29.7491 77.8412 36.5812 77.1752 39.0315 72.195L40.476 69.2592C42.695 64.7491 48.0433 62.7482 52.6777 64.6943L53.3081 64.959C54.5248 65.4699 55.8289 65.7404 57.1485 65.7557L59.599 65.7841C63.588 65.8304 67.3643 67.5909 69.9645 70.6165L71.7894 72.7401C74.6516 76.0706 79.3432 77.16 83.3801 75.4315C85.8982 74.3532 87.8679 72.2948 88.8341 69.7316L95.8117 51.2216C96.9721 48.1435 100.645 46.8783 103.455 48.5888C106.233 50.28 109.865 49.0641 111.065 46.041L113.129 40.8407C115.903 33.8519 125.277 32.6333 129.745 38.6807C130.059 39.1053 130.407 39.5033 130.787 39.8706L140.94 49.7013L145.745 55.0611C148.515 58.1517 153.554 57.342 155.216 53.5389C157.443 48.4461 164.896 49.2223 166.025 54.6645L167.3 60.807C168.899 68.512 179.661 69.1411 182.147 61.6747L183.835 56.6023L192.08 36.0758C193.712 32.0142 196.241 28.3745 199.48 25.4297L203.472 21.799C204.67 20.7094 205.672 19.4214 206.433 17.9916L211.63 8.22498C213.746 4.24835 219.185 3.61382 222.159 6.9965C224.629 9.80528 228.964 9.92851 231.589 7.26462L231.795 7.0561C234.74 4.06814 239.673 4.48083 242.081 7.9166L242.897 9.08173C245.675 13.0456 251.331 13.6039 254.83 10.2596L255.03 10.0686C257.38 7.82284 260.84 7.19007 263.832 8.45901L265.284 9.07458C268.046 10.2459 270.178 12.5391 271.145 15.3792L277.713 34.6666C278.871 38.0681 283.301 38.8993 285.613 36.149C287.967 33.3496 292.486 34.2703 293.557 37.7674L301.797 64.6668M301.797 64.6668V130.559M301.797 64.6668V114.128" stroke="#00A478" stroke-linecap="round" stroke-linejoin="round"/>\r\n<rect x="300" y="44" width="5" height="91" rx="2.5" fill="#F9F9F9"/>\r\n<rect y="58.6184" width="3.34247" height="76.3816" rx="1.67123" fill="#F9F9F9"/>\r\n<defs>\r\n<linearGradient id="paint0_linear_19_600" x1="151.664" y1="0" x2="151.664" y2="130.559" gradientUnits="userSpaceOnUse">\r\n<stop stop-color="#00A478"/>\r\n<stop offset="1" stop-color="white" stop-opacity="0"/>\r\n</linearGradient>\r\n</defs>\r\n</svg>\r\n',
            config: {
              enabled: true,
              key: "value",
              type: "Number",
              tickLine: true,
              tickMargin: 10,
              axisLine: true
            },
            config2: {
              key: "value",
              label: "\u0645\u0628\u0644\u063a",
              color: "#16A34A",
              hidden: false
            }
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "userdata",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({}),

        onChangeProp: "onUserdataChange"
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"frame49"}
      data-plasmic-override={overrides.frame49}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame49
      )}
    >
      <div
        data-plasmic-name={"frame25"}
        data-plasmic-override={overrides.frame25}
        className={classNames(projectcss.all, sty.frame25)}
      >
        <ChevronRightIcon
          className={classNames(projectcss.all, sty.svg___9CbNm)}
          onClick={args.onBack}
          role={"img"}
        />

        <div className={classNames(projectcss.all, sty.freeBox__j2JZd)}>
          {renderPlasmicSlot({
            defaultContents: "\u0627\u0637\u0644\u0627\u0639\u0627\u062a",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>
      </div>
      <div
        data-plasmic-name={"frame48"}
        data-plasmic-override={overrides.frame48}
        className={classNames(projectcss.all, sty.frame48)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__vlwu9)}>
          <Line3Icon
            className={classNames(projectcss.all, sty.svg__poTb3)}
            role={"img"}
          />
        </div>
      </div>
      {(() => {
        try {
          return $props.data.length > 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Chart
          data-plasmic-name={"fragmentChart"}
          data-plasmic-override={overrides.fragmentChart}
          chartConfig={(() => {
            try {
              return (() => {
                try {
                  return [$props.selectChart.config2];
                } catch {}
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          className={classNames("__wab_instance", sty.fragmentChart)}
          data={(() => {
            try {
              return (() => {
                try {
                  return $props.data.map(i => {
                    const now = new Date(i.date);
                    const g = new Intl.DateTimeFormat("fa-IR", {
                      month: "long",
                      day: "numeric"
                    }).format(now);
                    return {
                      ...i,
                      date: g
                    };
                  });
                } catch {}
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          layout={"horizontal"}
          legend={false}
          tooltip={(() => {
            const __composite = { enabled: null, indicator: null };
            __composite["enabled"] = true;
            __composite["indicator"] = "dot";
            return __composite;
          })()}
          type={"bar"}
          xAxis={(() => {
            const __composite = {
              key: null,
              type: null,
              enabled: null,
              tickLine: null,
              axisLine: null
            };
            __composite["key"] = "date";
            __composite["type"] = "category";
            __composite["enabled"] = true;
            __composite["tickLine"] = false;
            __composite["axisLine"] = true;
            return __composite;
          })()}
          yAxis={(() => {
            const __composite = {
              enabled: null,
              type: null,
              tickLine: null,
              axisLine: null,
              tickMargin: null,
              key: null
            };
            __composite["enabled"] = true;
            __composite["type"] = "number";
            __composite["tickLine"] = false;
            __composite["axisLine"] = true;
            __composite["tickMargin"] = 20;
            __composite["key"] = $props.selectChart.config.key;
            return __composite;
          })()}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame49: ["frame49", "frame25", "frame48", "fragmentChart"],
  frame25: ["frame25"],
  frame48: ["frame48"],
  fragmentChart: ["fragmentChart"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame49: "div";
  frame25: "div";
  frame48: "div";
  fragmentChart: typeof Chart;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChartViow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChartViow__VariantsArgs;
    args?: PlasmicChartViow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChartViow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChartViow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChartViow__ArgProps,
          internalVariantPropNames: PlasmicChartViow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChartViow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame49") {
    func.displayName = "PlasmicChartViow";
  } else {
    func.displayName = `PlasmicChartViow.${nodeName}`;
  }
  return func;
}

export const PlasmicChartViow = Object.assign(
  // Top-level PlasmicChartViow renders the root element
  makeNodeComponent("frame49"),
  {
    // Helper components rendering sub-elements
    frame25: makeNodeComponent("frame25"),
    frame48: makeNodeComponent("frame48"),
    fragmentChart: makeNodeComponent("fragmentChart"),

    // Metadata about props expected for PlasmicChartViow
    internalVariantProps: PlasmicChartViow__VariantProps,
    internalArgProps: PlasmicChartViow__ArgProps
  }
);

export default PlasmicChartViow;
/* prettier-ignore-end */
