/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: npU0JycAnQRQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Chart } from "@/fragment/components/chart"; // plasmic-import: 2Vi4mc7aEpf-/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicChartViow.module.css"; // plasmic-import: npU0JycAnQRQ/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import Line3Icon from "./icons/PlasmicIcon__Line3"; // plasmic-import: cDBsZfQFOOWa/icon

createPlasmicElementProxy;

export type PlasmicChartViow__VariantMembers = {};
export type PlasmicChartViow__VariantsArgs = {};
type VariantPropType = keyof PlasmicChartViow__VariantsArgs;
export const PlasmicChartViow__VariantProps = new Array<VariantPropType>();

export type PlasmicChartViow__ArgsType = {
  data?: any;
  onBack?: (event: any) => void;
  loading?: boolean;
  onClick?: (event: any) => void;
  onUserdataChange?: (val: string) => void;
  children?: React.ReactNode;
  selectChart?: any;
};
type ArgPropType = keyof PlasmicChartViow__ArgsType;
export const PlasmicChartViow__ArgProps = new Array<ArgPropType>(
  "data",
  "onBack",
  "loading",
  "onClick",
  "onUserdataChange",
  "children",
  "selectChart"
);

export type PlasmicChartViow__OverridesType = {
  frame49?: Flex__<"div">;
  frame25?: Flex__<"div">;
  frame48?: Flex__<"div">;
  fragmentChart?: Flex__<typeof Chart>;
};

export interface DefaultChartViowProps {
  data?: any;
  onBack?: (event: any) => void;
  loading?: boolean;
  onClick?: (event: any) => void;
  onUserdataChange?: (val: string) => void;
  children?: React.ReactNode;
  selectChart?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChartViow__RenderFunc(props: {
  variants: PlasmicChartViow__VariantsArgs;
  args: PlasmicChartViow__ArgsType;
  overrides: PlasmicChartViow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: {
            user: {
              countBuyBreastCancer: 3,
              countBuyHamyarStatus: 1,
              countBuyHusbandSms: 3,
              countBuyPregnancySubStatus: 5,
              countBuySelfSms: 1,
              countBuySpecialAdvice: 1,
              activeTel: true,
              breastCancerSmsSubTime: {
                year: 2026,
                month: 2,
                day: 3,
                hour: 4,
                minute: 3,
                second: 11,
                nanosecond: 141000000,
                timeZoneOffsetSeconds: 0
              },
              pregnancySubTime: {
                year: 2027,
                month: 11,
                day: 27,
                hour: 0,
                minute: 36,
                second: 38,
                nanosecond: 358000000,
                timeZoneOffsetSeconds: 0
              },
              hamyarTime: {
                year: 2025,
                month: 5,
                day: 21,
                hour: 22,
                minute: 22,
                second: 35,
                nanosecond: 336000000,
                timeZoneOffsetSeconds: 0
              },
              husbandSmsSubTime: {
                year: 2025,
                month: 10,
                day: 7,
                hour: 8,
                minute: 39,
                second: 22,
                nanosecond: 886000000,
                timeZoneOffsetSeconds: 0
              },
              pregnancyBabyGrowthTime: {
                year: 2027,
                month: 11,
                day: 27,
                hour: 0,
                minute: 36,
                second: 38,
                nanosecond: 463000000,
                timeZoneOffsetSeconds: 0
              },
              pregnancyBecomeFatherTime: {
                year: 2027,
                month: 11,
                day: 27,
                hour: 0,
                minute: 36,
                second: 38,
                nanosecond: 463000000,
                timeZoneOffsetSeconds: 0
              },
              pregnancyBetterRelationTime: {
                year: 2027,
                month: 11,
                day: 27,
                hour: 0,
                minute: 36,
                second: 38,
                nanosecond: 463000000,
                timeZoneOffsetSeconds: 0
              },
              pregnancyDangerTime: {
                year: 2027,
                month: 11,
                day: 27,
                hour: 0,
                minute: 36,
                second: 38,
                nanosecond: 463000000,
                timeZoneOffsetSeconds: 0
              },
              pregnancySelfSmsTime: {
                year: 2027,
                month: 11,
                day: 27,
                hour: 0,
                minute: 36,
                second: 38,
                nanosecond: 463000000,
                timeZoneOffsetSeconds: 0
              },
              selfHamyarSmsSubTime: {
                year: 2025,
                month: 12,
                day: 6,
                hour: 10,
                minute: 33,
                second: 20,
                nanosecond: 363000000,
                timeZoneOffsetSeconds: 0
              },
              specialAdviceSubTim: {
                year: 2025,
                month: 3,
                day: 9,
                hour: 16,
                minute: 11,
                second: 12,
                nanosecond: 839000000,
                timeZoneOffsetSeconds: 0
              },
              mobile: "",
              id: "265149",
              lastActivity: {
                year: 2025,
                month: 9,
                day: 12,
                hour: 18,
                minute: 23,
                second: 34,
                nanosecond: 707000000,
                timeZoneOffsetSeconds: 0
              },
              username: "melika",
              refcode: "3d8fb3"
            }
          },
          loading: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "userdata",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({}),

        onChangeProp: "onUserdataChange"
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"frame49"}
      data-plasmic-override={overrides.frame49}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame49
      )}
    >
      <div
        data-plasmic-name={"frame25"}
        data-plasmic-override={overrides.frame25}
        className={classNames(projectcss.all, sty.frame25)}
      >
        <ChevronRightIcon
          className={classNames(projectcss.all, sty.svg___9CbNm)}
          onClick={args.onBack}
          role={"img"}
        />

        <div className={classNames(projectcss.all, sty.freeBox__j2JZd)}>
          {renderPlasmicSlot({
            defaultContents: "\u0627\u0637\u0644\u0627\u0639\u0627\u062a",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>
      </div>
      <div
        data-plasmic-name={"frame48"}
        data-plasmic-override={overrides.frame48}
        className={classNames(projectcss.all, sty.frame48)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__vlwu9)}>
          <Line3Icon
            className={classNames(projectcss.all, sty.svg__poTb3)}
            role={"img"}
          />
        </div>
      </div>
      <Chart
        data-plasmic-name={"fragmentChart"}
        data-plasmic-override={overrides.fragmentChart}
        chartConfig={(() => {
          try {
            return [$props.selectChart.config2];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.fragmentChart)}
        data={(() => {
          try {
            return $props.data.map(i => {
              const now = new Date(i.date);
              const g = new Intl.DateTimeFormat("fa-IR", {
                month: "long",
                day: "numeric"
              }).format(now);
              return {
                ...i,
                date: g
              };
            });
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        layout={"horizontal"}
        legend={false}
        tooltip={(() => {
          const __composite = { enabled: null, indicator: null };
          __composite["enabled"] = true;
          __composite["indicator"] = "dot";
          return __composite;
        })()}
        type={"bar"}
        xAxis={(() => {
          const __composite = {
            key: null,
            type: null,
            enabled: null,
            tickLine: null,
            axisLine: null
          };
          __composite["key"] = "date";
          __composite["type"] = "category";
          __composite["enabled"] = true;
          __composite["tickLine"] = false;
          __composite["axisLine"] = true;
          return __composite;
        })()}
        yAxis={(() => {
          const __composite = {
            enabled: null,
            type: null,
            tickLine: null,
            axisLine: null,
            tickMargin: null,
            key: null
          };
          __composite["enabled"] = true;
          __composite["type"] = "number";
          __composite["tickLine"] = false;
          __composite["axisLine"] = true;
          __composite["tickMargin"] = 20;
          __composite["key"] = $props.selectChart.config.key;
          return __composite;
        })()}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame49: ["frame49", "frame25", "frame48", "fragmentChart"],
  frame25: ["frame25"],
  frame48: ["frame48"],
  fragmentChart: ["fragmentChart"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame49: "div";
  frame25: "div";
  frame48: "div";
  fragmentChart: typeof Chart;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChartViow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChartViow__VariantsArgs;
    args?: PlasmicChartViow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChartViow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChartViow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChartViow__ArgProps,
          internalVariantPropNames: PlasmicChartViow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChartViow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame49") {
    func.displayName = "PlasmicChartViow";
  } else {
    func.displayName = `PlasmicChartViow.${nodeName}`;
  }
  return func;
}

export const PlasmicChartViow = Object.assign(
  // Top-level PlasmicChartViow renders the root element
  makeNodeComponent("frame49"),
  {
    // Helper components rendering sub-elements
    frame25: makeNodeComponent("frame25"),
    frame48: makeNodeComponent("frame48"),
    fragmentChart: makeNodeComponent("fragmentChart"),

    // Metadata about props expected for PlasmicChartViow
    internalVariantProps: PlasmicChartViow__VariantProps,
    internalArgProps: PlasmicChartViow__ArgProps
  }
);

export default PlasmicChartViow;
/* prettier-ignore-end */
