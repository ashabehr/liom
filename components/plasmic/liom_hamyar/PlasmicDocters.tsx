/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: MTBU9FtqOgNU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Search from "../../Search"; // plasmic-import: fmyovDT1Cvc-/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Star from "../../Star"; // plasmic-import: i69c2Ujsm_H6/component

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicDocters.module.css"; // plasmic-import: MTBU9FtqOgNU/css

import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import EmojiSadSquareSvgrepoComSvgIcon from "./icons/PlasmicIcon__EmojiSadSquareSvgrepoComSvg"; // plasmic-import: r-c9byRGfifF/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: H9d2pdUvXD_1/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import Icon102Icon from "./icons/PlasmicIcon__Icon102"; // plasmic-import: 9fS9dn8xohZT/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 32haUKsu6raY/icon

createPlasmicElementProxy;

export type PlasmicDocters__VariantMembers = {
  _1: "docters" | "docter" | "chatviow";
};
export type PlasmicDocters__VariantsArgs = {
  _1?: SingleChoiceArg<"docters" | "docter" | "chatviow">;
};
type VariantPropType = keyof PlasmicDocters__VariantsArgs;
export const PlasmicDocters__VariantProps = new Array<VariantPropType>("_1");

export type PlasmicDocters__ArgsType = {};
type ArgPropType = keyof PlasmicDocters__ArgsType;
export const PlasmicDocters__ArgProps = new Array<ArgPropType>();

export type PlasmicDocters__OverridesType = {
  root?: Flex__<"div">;
  dialog2?: Flex__<typeof Dialog>;
  shop2?: Flex__<typeof ApiRequest>;
  button12?: Flex__<typeof Button>;
  favicon?: Flex__<typeof Embed>;
  button2?: Flex__<typeof Button>;
  search?: Flex__<typeof Search>;
  antdInput?: Flex__<typeof Input>;
  docterList?: Flex__<typeof ApiRequest>;
  card7?: Flex__<"div">;
  card8?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultDoctersProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDocters__RenderFunc(props: {
  variants: PlasmicDocters__VariantsArgs;
  args: PlasmicDocters__ArgsType;
  overrides: PlasmicDocters__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "_1",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props._1
      },
      {
        path: "id",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "variable",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "getData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("ClinicToken");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "getList",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "chats",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "btnloading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.status == "false";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "shop2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "listId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "sublist",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "filter",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.chats.list;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "loadingPage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "docterList.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "docterList.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "docterList.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "search.variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.root_1_chatviow]: hasVariant($state, "_1", "chatviow"),
              [sty.root_1_docter]: hasVariant($state, "_1", "docter"),
              [sty.root_1_docters]: hasVariant($state, "_1", "docters")
            }
          )}
        >
          <Dialog
            data-plasmic-name={"dialog2"}
            data-plasmic-override={overrides.dialog2}
            className={classNames("__wab_instance", sty.dialog2, {
              [sty.dialog2_1_chatviow]: hasVariant($state, "_1", "chatviow"),
              [sty.dialog2_1_docter]: hasVariant($state, "_1", "docter"),
              [sty.dialog2_1_docters]: hasVariant($state, "_1", "docters")
            })}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialog2",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog2",
              "opendialog"
            ])}
          >
            <ApiRequest
              data-plasmic-name={"shop2"}
              data-plasmic-override={overrides.shop2}
              className={classNames("__wab_instance", sty.shop2, {
                [sty.shop2_1_docter]: hasVariant($state, "_1", "docter")
              })}
              errorDisplay={null}
              loadingDisplay={
                <div
                  className={classNames(projectcss.all, sty.freeBox__uMLx5, {
                    [sty.freeBox_1_docter__uMLx5WI85Y]: hasVariant(
                      $state,
                      "_1",
                      "docter"
                    )
                  })}
                >
                  <Icon115Icon
                    className={classNames(projectcss.all, sty.svg___3OhxN)}
                    role={"img"}
                  />
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shop2", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shop2", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shop2", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              params={(() => {
                try {
                  return {
                    token: $state.token,
                    id: 14
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return { id: 14 };
                  }
                  throw e;
                }
              })()}
              url={"https://n8n.staas.ir/webhook/help/shop"}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__oz5O7, {
                  [sty.freeBox_1_docter__oz5O7WI85Y]: hasVariant(
                    $state,
                    "_1",
                    "docter"
                  )
                })}
              >
                <EmojiSadSquareSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__zpip2)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lDj0L
                  )}
                >
                  {
                    "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0627\u0645\u0648\u0641\u0642"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z3Q6U
                  )}
                >
                  {
                    "\u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0627\u062f \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0627\u0648\u0645\u062f\u0647 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0634\u062f\u0647. \u0644\u0637\u0641\u0627\u064b \u06cc\u0647 \u0628\u0627\u0631 \u062f\u06cc\u06af\u0647 \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 \u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f . "
                  }
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__mLdZc)}>
                  <Button
                    data-plasmic-name={"button12"}
                    data-plasmic-override={overrides.button12}
                    className={classNames("__wab_instance", sty.button12, {
                      [sty.button12_1_chatviow]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      ),
                      [sty.button12_1_docter]: hasVariant(
                        $state,
                        "_1",
                        "docter"
                      )
                    })}
                    color={generateStateValueProp($state, [
                      "button12",
                      "color"
                    ])}
                    endIcon={
                      <Icon12Icon
                        className={classNames(projectcss.all, sty.svg__fdywM)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return $state.btnloading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    loading={(() => {
                      try {
                        return $state.btnloading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateBtnloading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["btnloading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateBtnloading"] != null &&
                        typeof $steps["updateBtnloading"] === "object" &&
                        typeof $steps["updateBtnloading"].then === "function"
                      ) {
                        $steps["updateBtnloading"] = await $steps[
                          "updateBtnloading"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/help/shop",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      token: "Bearer " + $state.token,
                                      id: $state.shop2.data.item.id
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["goToPage"] =
                        $steps.invokeGlobalAction?.data.success == true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return $steps.invokeGlobalAction.data.url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["updateBtnloading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["btnloading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateBtnloading2"] != null &&
                        typeof $steps["updateBtnloading2"] === "object" &&
                        typeof $steps["updateBtnloading2"].then === "function"
                      ) {
                        $steps["updateBtnloading2"] = await $steps[
                          "updateBtnloading2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button12",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__juX3A
                      )}
                    >
                      {"\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"}
                    </div>
                  </Button>
                </div>
              </div>
            </ApiRequest>
          </Dialog>
          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              hasVariant(globalVariants, "screen", "mobile")
                ? "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
                : "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
            }
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__n1Vp4, {
              [sty.freeBox_1_chatviow__n1Vp4V0Ufv]: hasVariant(
                $state,
                "_1",
                "chatviow"
              ),
              [sty.freeBox_1_docter__n1Vp4WI85Y]: hasVariant(
                $state,
                "_1",
                "docter"
              ),
              [sty.freeBox_1_docters__n1Vp4IE1BA]: hasVariant(
                $state,
                "_1",
                "docters"
              )
            })}
          >
            <PlasmicIcon__
              PlasmicIconType={
                hasVariant($state, "_1", "chatviow")
                  ? ChevronRightIcon
                  : hasVariant($state, "_1", "docter")
                  ? ChevronRightIcon
                  : hasVariant($state, "_1", "docters") &&
                    hasVariant(globalVariants, "screen", "mobile")
                  ? ChevronRightIcon
                  : hasVariant($state, "_1", "docters")
                  ? ChevronRightIcon
                  : hasVariant(globalVariants, "screen", "mobile")
                  ? ChevronRightIcon
                  : ChevronRightIcon
              }
              className={classNames(projectcss.all, sty.svg__my44E, {
                [sty.svg_1_chatviow__my44EV0Ufv]: hasVariant(
                  $state,
                  "_1",
                  "chatviow"
                ),
                [sty.svg_1_docter__my44EwI85Y]: hasVariant(
                  $state,
                  "_1",
                  "docter"
                ),
                [sty.svg_1_docters__my44EiE1BA]: hasVariant(
                  $state,
                  "_1",
                  "docters"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return `/clinic?gender=${new URLSearchParams(
                              new URL(window.location.href).search
                            ).get("gender")}`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wwElL,
                {
                  [sty.text_1_chatviow__wwElLv0Ufv]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.text_1_docter__wwElLwI85Y]: hasVariant(
                    $state,
                    "_1",
                    "docter"
                  ),
                  [sty.text_1_docters__wwElLiE1BA]: hasVariant(
                    $state,
                    "_1",
                    "docters"
                  )
                }
              )}
            >
              {"\u06a9\u0644\u06cc\u0646\u06cc\u06a9 \u0644\u06cc\u0648\u0645"}
            </div>
            <Button
              data-plasmic-name={"button2"}
              data-plasmic-override={overrides.button2}
              className={classNames("__wab_instance", sty.button2, {
                [sty.button2_1_docter]: hasVariant($state, "_1", "docter"),
                [sty.button2_1_docters]: hasVariant($state, "_1", "docters")
              })}
              color={generateStateValueProp($state, ["button2", "color"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateLoadingPage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loadingPage"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoadingPage"] != null &&
                  typeof $steps["updateLoadingPage"] === "object" &&
                  typeof $steps["updateLoadingPage"].then === "function"
                ) {
                  $steps["updateLoadingPage"] = await $steps[
                    "updateLoadingPage"
                  ];
                }

                $steps["update1"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "_1",
                        operation: 0,
                        value: "chatviow"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["update1"] != null &&
                  typeof $steps["update1"] === "object" &&
                  typeof $steps["update1"].then === "function"
                ) {
                  $steps["update1"] = await $steps["update1"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "GET",
                          "https://n8n.staas.ir/webhook/help/getListHelp",
                          (() => {
                            try {
                              return { token: $state.token };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateChats"] = (
                  $steps.invokeGlobalAction?.data ? true : false
                )
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["chats"]
                        },
                        operation: 0,
                        value: $steps.invokeGlobalAction.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateChats"] != null &&
                  typeof $steps["updateChats"] === "object" &&
                  typeof $steps["updateChats"].then === "function"
                ) {
                  $steps["updateChats"] = await $steps["updateChats"];
                }

                $steps["updateLoadingPage2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loadingPage"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoadingPage2"] != null &&
                  typeof $steps["updateLoadingPage2"] === "object" &&
                  typeof $steps["updateLoadingPage2"].then === "function"
                ) {
                  $steps["updateLoadingPage2"] = await $steps[
                    "updateLoadingPage2"
                  ];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return history.pushState(
                            null,
                            "",
                            "https://apps.liom.app/clinic/?page="
                          );
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button2", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              showStartIcon={true}
              size={"compact"}
              startIcon={
                <Icon102Icon
                  className={classNames(projectcss.all, sty.svg___4OeRm)}
                  role={"img"}
                />
              }
            >
              {"\u0648\u06cc\u0632\u06cc\u062a \u0647\u0627\u06cc \u0645\u0646"}
            </Button>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__t9Fw0, {
              [sty.freeBox_1_chatviow__t9Fw0V0Ufv]: hasVariant(
                $state,
                "_1",
                "chatviow"
              ),
              [sty.freeBox_1_docter__t9Fw0WI85Y]: hasVariant(
                $state,
                "_1",
                "docter"
              ),
              [sty.freeBox_1_docters__t9Fw0IE1BA]: hasVariant(
                $state,
                "_1",
                "docters"
              )
            })}
          >
            <PlasmicIcon__
              PlasmicIconType={
                hasVariant($state, "_1", "chatviow")
                  ? ChevronRightIcon
                  : Icon22Icon
              }
              className={classNames(projectcss.all, sty.svg__jr8Ex, {
                [sty.svg_1_chatviow__jr8ExV0Ufv]: hasVariant(
                  $state,
                  "_1",
                  "chatviow"
                ),
                [sty.svg_1_docter__jr8ExwI85Y]: hasVariant(
                  $state,
                  "_1",
                  "docter"
                ),
                [sty.svg_1_docters__jr8ExiE1BA]: hasVariant(
                  $state,
                  "_1",
                  "docters"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["update1"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "_1",
                        operation: 1,
                        value: "docters"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, undefined);
                        return undefined;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["update1"] != null &&
                  typeof $steps["update1"] === "object" &&
                  typeof $steps["update1"].then === "function"
                ) {
                  $steps["update1"] = await $steps["update1"];
                }
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___239Xr,
                {
                  [sty.text_1_chatviow___239Xrv0Ufv]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.text_1_docters___239XRiE1BA]: hasVariant(
                    $state,
                    "_1",
                    "docters"
                  )
                }
              )}
            >
              {hasVariant($state, "_1", "chatviow")
                ? "\u06af\u0641\u062a\u06af\u0648 \u0647\u0627"
                : "\u067e\u0632\u0634\u06a9\u0627\u0646"}
            </div>
            {(
              hasVariant($state, "_1", "chatviow") &&
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant($state, "_1", "chatviow")
                ? (() => {
                    try {
                      return !$state.loadingPage;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <Search
                data-plasmic-name={"search"}
                data-plasmic-override={overrides.search}
                antdInput2={(() => {
                  const child$Props = {
                    bordered: false,
                    className: classNames("__wab_instance", sty.antdInput, {
                      [sty.antdInput_1_chatviow]: hasVariant(
                        $state,
                        "_1",
                        "chatviow"
                      )
                    }),
                    id:
                      hasVariant($state, "_1", "chatviow") &&
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "inputMobile"
                        : undefined,
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["antdInput", "value"],
                        Input_Helpers
                      ).apply(null, eventArgs);

                      (async event => {
                        const $steps = {};

                        $steps["updateFilter"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["filter"]
                                },
                                operation: 0,
                                value: (() => {
                                  return $state.chats.list.filter(
                                    item =>
                                      item.text.includes(
                                        $state.antdInput.value
                                      ) ||
                                      item.subList_name.includes(
                                        $state.antdInput.value
                                      ) ||
                                      item.doctor.name.includes(
                                        $state.antdInput.value
                                      )
                                  );
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFilter"] != null &&
                          typeof $steps["updateFilter"] === "object" &&
                          typeof $steps["updateFilter"].then === "function"
                        ) {
                          $steps["updateFilter"] = await $steps["updateFilter"];
                        }
                      }).apply(null, eventArgs);
                    },
                    value: generateStateValueProp($state, [
                      "antdInput",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "antdInput.value"
                      }
                    ],
                    [],
                    Input_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <Input
                      data-plasmic-name={"antdInput"}
                      data-plasmic-override={overrides.antdInput}
                      {...child$Props}
                    />
                  );
                })()}
                className={classNames("__wab_instance", sty.search, {
                  [sty.search_1_chatviow]: hasVariant($state, "_1", "chatviow"),
                  [sty.search_1_docter]: hasVariant($state, "_1", "docter")
                })}
                onVariableChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "search",
                    "variable"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                variable={generateStateValueProp($state, [
                  "search",
                  "variable"
                ])}
              />
            ) : null}
          </Stack__>
          <ApiRequest
            data-plasmic-name={"docterList"}
            data-plasmic-override={overrides.docterList}
            className={classNames("__wab_instance", sty.docterList)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kjwUz
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qBmP, {
                  [sty.freeBox_1_chatviow__qBmPv0Ufv]: hasVariant(
                    $state,
                    "_1",
                    "chatviow"
                  ),
                  [sty.freeBox_1_docter__qBmPwI85Y]: hasVariant(
                    $state,
                    "_1",
                    "docter"
                  ),
                  [sty.freeBox_1_docters__qBmPiE1BA]: hasVariant(
                    $state,
                    "_1",
                    "docters"
                  )
                })}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [1, 2, 3, 4];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"card7"}
                      data-plasmic-override={overrides.card7}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.card7,
                        "shimmer ",
                        {
                          [sty.card7_1_docter]: hasVariant(
                            $state,
                            "_1",
                            "docter"
                          ),
                          [sty.card7_1_docters]: hasVariant(
                            $state,
                            "_1",
                            "docters"
                          )
                        }
                      )}
                      key={currentIndex}
                    />
                  );
                })}
              </Stack__>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["docterList", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "docterList",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["docterList", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={(() => {
              try {
                return {
                  token: localStorage.getItem("ClinicToken"),
                  gender: new URLSearchParams(
                    new URL(window.location.href).search
                  ).get("gender")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/help/getList"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__e9Nlk, {
                [sty.freeBox_1_chatviow__e9NlkV0Ufv]: hasVariant(
                  $state,
                  "_1",
                  "chatviow"
                ),
                [sty.freeBox_1_docter__e9NlkwI85Y]: hasVariant(
                  $state,
                  "_1",
                  "docter"
                ),
                [sty.freeBox_1_docters__e9NlkiE1BA]: hasVariant(
                  $state,
                  "_1",
                  "docters"
                )
              })}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.docterList.data.list;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"card8"}
                    data-plasmic-override={overrides.card8}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.card8, {
                      [sty.card8_1_docter]: hasVariant($state, "_1", "docter"),
                      [sty.card8_1_docters]: hasVariant($state, "_1", "docters")
                    })}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return `/docter?id=${
                                    currentItem.id
                                  }&gender=${new URLSearchParams(
                                    new URL(window.location.href).search
                                  ).get("gender")}`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ofCwq,
                        {
                          [sty.text_1_docters__ofCwQiE1BA]: hasVariant(
                            $state,
                            "_1",
                            "docters"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.text;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0633\u0644\u0627\u0645\u062a \u062c\u0646\u0633\u06cc";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img, {
                        [sty.img_1_chatviow]: hasVariant(
                          $state,
                          "_1",
                          "chatviow"
                        ),
                        [sty.img_1_docter]: hasVariant($state, "_1", "docter"),
                        [sty.img_1_docters]: hasVariant($state, "_1", "docters")
                      })}
                      displayHeight={
                        hasVariant($state, "_1", "chatviow") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "60px"
                          : hasVariant($state, "_1", "docters") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "50px"
                          : hasVariant($state, "_1", "docters")
                          ? "60px"
                          : hasVariant(globalVariants, "screen", "mobile")
                          ? "50px"
                          : "60px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant($state, "_1", "chatviow") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "60px"
                          : hasVariant($state, "_1", "docters") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "50px"
                          : hasVariant($state, "_1", "docters")
                          ? "60px"
                          : hasVariant(globalVariants, "screen", "mobile")
                          ? "50px"
                          : "60px"
                      }
                      loading={"lazy"}
                      src={
                        hasVariant($state, "_1", "chatviow") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? {
                              src: "/plasmic/liom_hamyar/images/image10.ico",
                              fullWidth: 256,
                              fullHeight: 256,
                              aspectRatio: undefined
                            }
                          : hasVariant($state, "_1", "docters") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? "https://static.vecteezy.com/system/resources/previews/008/957/225/non_2x/female-doctor-avatar-clipart-icon-in-flat-design-vector.jpg"
                          : hasVariant($state, "_1", "docters")
                          ? "https://static.vecteezy.com/system/resources/previews/008/957/225/non_2x/female-doctor-avatar-clipart-icon-in-flat-design-vector.jpg"
                          : hasVariant(globalVariants, "screen", "mobile")
                          ? "https://static.vecteezy.com/system/resources/previews/008/957/225/non_2x/female-doctor-avatar-clipart-icon-in-flat-design-vector.jpg"
                          : "https://static.vecteezy.com/system/resources/previews/008/957/225/non_2x/female-doctor-avatar-clipart-icon-in-flat-design-vector.jpg"
                      }
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__ly2AB,
                        {
                          [sty.freeBox_1_chatviow__ly2ABv0Ufv]: hasVariant(
                            $state,
                            "_1",
                            "chatviow"
                          ),
                          [sty.freeBox_1_docter__ly2ABwI85Y]: hasVariant(
                            $state,
                            "_1",
                            "docter"
                          ),
                          [sty.freeBox_1_docters__ly2ABiE1BA]: hasVariant(
                            $state,
                            "_1",
                            "docters"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cTm9O,
                          {
                            [sty.text_1_chatviow__cTm9OV0Ufv]: hasVariant(
                              $state,
                              "_1",
                              "chatviow"
                            ),
                            [sty.text_1_docters__cTm9OiE1BA]: hasVariant(
                              $state,
                              "_1",
                              "docters"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "_1", "docters") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  " کارشناسی " + currentItem.text + " لیوم "
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Dr. Mensah T";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  " کارشناسی " + currentItem.text + " لیوم "
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Dr. Mensah T";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aTtJc,
                          {
                            [sty.text_1_chatviow__aTtJcV0Ufv]: hasVariant(
                              $state,
                              "_1",
                              "chatviow"
                            ),
                            [sty.text_1_docters__aTtJciE1BA]: hasVariant(
                              $state,
                              "_1",
                              "docters"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "_1", "docters") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.text;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Oncologists";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.text;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Oncologists";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    </Stack__>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__fbFc3,
                        {
                          [sty.freeBox_1_chatviow__fbFc3V0Ufv]: hasVariant(
                            $state,
                            "_1",
                            "chatviow"
                          ),
                          [sty.freeBox_1_docters__fbFc3IE1BA]: hasVariant(
                            $state,
                            "_1",
                            "docters"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__y9ExH,
                          {
                            [sty.freeBox_1_chatviow__y9ExHv0Ufv]: hasVariant(
                              $state,
                              "_1",
                              "chatviow"
                            ),
                            [sty.freeBox_1_docters__y9ExHiE1BA]: hasVariant(
                              $state,
                              "_1",
                              "docters"
                            )
                          }
                        )}
                      >
                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star__hn3Mi,
                            {
                              [sty.star_1_chatviow__hn3Miv0Ufv]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              ),
                              [sty.star_1_docters__hn3MIiE1BA]: hasVariant(
                                $state,
                                "_1",
                                "docters"
                              )
                            }
                          )}
                        />

                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star__w9TO1,
                            {
                              [sty.star_1_chatviow__w9TO1V0Ufv]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              ),
                              [sty.star_1_docters__w9TO1IE1BA]: hasVariant(
                                $state,
                                "_1",
                                "docters"
                              )
                            }
                          )}
                        />

                        <Star
                          action={
                            hasVariant($state, "_1", "chatviow") &&
                            hasVariant(globalVariants, "screen", "mobile")
                              ? undefined
                              : hasVariant($state, "_1", "docters") &&
                                hasVariant(globalVariants, "screen", "mobile")
                              ? true
                              : hasVariant(globalVariants, "screen", "mobile")
                              ? true
                              : true
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.star__lxEK,
                            {
                              [sty.star_1_chatviow__lxEKv0Ufv]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              ),
                              [sty.star_1_docters__lxEKiE1BA]: hasVariant(
                                $state,
                                "_1",
                                "docters"
                              )
                            }
                          )}
                        />

                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star__bd1We,
                            {
                              [sty.star_1_chatviow__bd1WeV0Ufv]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              ),
                              [sty.star_1_docters__bd1WeiE1BA]: hasVariant(
                                $state,
                                "_1",
                                "docters"
                              )
                            }
                          )}
                        />

                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star__y4Ki,
                            {
                              [sty.star_1_chatviow__y4Kiv0Ufv]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              ),
                              [sty.star_1_docters__y4KIiE1BA]: hasVariant(
                                $state,
                                "_1",
                                "docters"
                              )
                            }
                          )}
                        />

                        <Star
                          action={true}
                          className={classNames(
                            "__wab_instance",
                            sty.star__jvYg3,
                            {
                              [sty.star_1_chatviow__jvYg3V0Ufv]: hasVariant(
                                $state,
                                "_1",
                                "chatviow"
                              ),
                              [sty.star_1_docters__jvYg3IE1BA]: hasVariant(
                                $state,
                                "_1",
                                "docters"
                              )
                            }
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9Sho,
                          {
                            [sty.text_1_chatviow___9ShoV0Ufv]: hasVariant(
                              $state,
                              "_1",
                              "chatviow"
                            ),
                            [sty.text_1_docters___9ShoiE1BA]: hasVariant(
                              $state,
                              "_1",
                              "docters"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "_1", "docters") &&
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "\u0627\u0645\u062a\u06cc\u0627\u0632 \u067e\u0632\u0634\u06a9"
                          : hasVariant($state, "_1", "docters")
                          ? "\u0627\u0645\u062a\u06cc\u0627\u0632 \u067e\u0632\u0634\u06a9"
                          : hasVariant(globalVariants, "screen", "mobile")
                          ? "\u0627\u0645\u062a\u06cc\u0627\u0632 \u067e\u0632\u0634\u06a9"
                          : "\u0627\u0645\u062a\u06cc\u0627\u0632 \u067e\u0632\u0634\u06a9"}
                      </div>
                    </div>
                  </Stack__>
                );
              })}
            </Stack__>
          </ApiRequest>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dialog2",
    "shop2",
    "button12",
    "favicon",
    "button2",
    "search",
    "antdInput",
    "docterList",
    "card7",
    "card8",
    "img"
  ],
  dialog2: ["dialog2", "shop2", "button12"],
  shop2: ["shop2", "button12"],
  button12: ["button12"],
  favicon: ["favicon"],
  button2: ["button2"],
  search: ["search", "antdInput"],
  antdInput: ["antdInput"],
  docterList: ["docterList", "card7", "card8", "img"],
  card7: ["card7"],
  card8: ["card8", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dialog2: typeof Dialog;
  shop2: typeof ApiRequest;
  button12: typeof Button;
  favicon: typeof Embed;
  button2: typeof Button;
  search: typeof Search;
  antdInput: typeof Input;
  docterList: typeof ApiRequest;
  card7: "div";
  card8: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDocters__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDocters__VariantsArgs;
    args?: PlasmicDocters__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDocters__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDocters__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDocters__ArgProps,
          internalVariantPropNames: PlasmicDocters__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDocters__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDocters";
  } else {
    func.displayName = `PlasmicDocters.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicDocters = Object.assign(
  // Top-level PlasmicDocters renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    dialog2: makeNodeComponent("dialog2"),
    shop2: makeNodeComponent("shop2"),
    button12: makeNodeComponent("button12"),
    favicon: makeNodeComponent("favicon"),
    button2: makeNodeComponent("button2"),
    search: makeNodeComponent("search"),
    antdInput: makeNodeComponent("antdInput"),
    docterList: makeNodeComponent("docterList"),
    card7: makeNodeComponent("card7"),
    card8: makeNodeComponent("card8"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicDocters
    internalVariantProps: PlasmicDocters__VariantProps,
    internalArgProps: PlasmicDocters__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDocters;
/* prettier-ignore-end */
