// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: U8eK2HQ9FI5q

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import RadioGrop from "../../RadioGrop"; // plasmic-import: mcNKMbL_6N75/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import Choices from "../../Choices"; // plasmic-import: kqjrVA4cMqR_/component

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSignsPage.module.css"; // plasmic-import: U8eK2HQ9FI5q/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: rjflJ2D4OoXB/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon157Icon from "./icons/PlasmicIcon__Icon157"; // plasmic-import: pYMHtMPOTSpB/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicSignsPage__VariantMembers = {};
export type PlasmicSignsPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignsPage__VariantsArgs;
export const PlasmicSignsPage__VariantProps = new Array<VariantPropType>();

export type PlasmicSignsPage__ArgsType = {};
type ArgPropType = keyof PlasmicSignsPage__ArgsType;
export const PlasmicSignsPage__ArgProps = new Array<ArgPropType>();

export type PlasmicSignsPage__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  img?: Flex__<typeof PlasmicImg__>;
  number2?: Flex__<typeof AntdModal>;
  textInput?: Flex__<typeof TextInput>;
  antdInput?: Flex__<typeof Input>;
  button2?: Flex__<typeof Button>;
  name2?: Flex__<typeof AntdModal>;
  textInput2?: Flex__<typeof TextInput>;
  antdInput2?: Flex__<typeof Input>;
  radioGrop?: Flex__<typeof RadioGrop>;
  button3?: Flex__<typeof Button>;
  sms?: Flex__<typeof AntdModal>;
  button4?: Flex__<typeof Button>;
  button5?: Flex__<typeof Button>;
  remove?: Flex__<typeof AntdModal>;
  removeBtn?: Flex__<typeof Button>;
  button9?: Flex__<typeof Button>;
  getSign?: Flex__<typeof ApiRequest>;
  selectionBox?: Flex__<"div">;
  choices?: Flex__<typeof Choices>;
  selectionBox2?: Flex__<"div">;
  choices8?: Flex__<typeof Choices>;
  selectionBox3?: Flex__<"div">;
  choices3?: Flex__<typeof Choices>;
  selectionBox4?: Flex__<"div">;
  choices4?: Flex__<typeof Choices>;
  selectionBox5?: Flex__<"div">;
  choices5?: Flex__<typeof Choices>;
  selectionBox6?: Flex__<"div">;
  choices6?: Flex__<typeof Choices>;
  selectionBox7?: Flex__<"div">;
  choices7?: Flex__<typeof Choices>;
};

export interface DefaultSignsPageProps {}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSignsPage__RenderFunc(props: {
  variants: PlasmicSignsPage__VariantsArgs;
  args: PlasmicSignsPage__ArgsType;
  overrides: PlasmicSignsPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "number2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.token;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "relation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "hamyar"
      },
      {
        path: "masseg",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "errror",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "sms.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "remove.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "removeBtn.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? "whiteYellowLine"
            : "whiteYellowLine"
      },
      {
        path: "button9.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "getSign.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getSign.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getSign.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popoverOpen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [false, false]
      },
      {
        path: "removeItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loadingBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "v",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "choices.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getSign.data.result.before;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "choices3.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getSign.data.result.psychological;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "choices4.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getSign.data.result.vaginal;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "choices5.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getSign.data.result.womans;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "choices6.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getSign.data.result.hereditary;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "choices7.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getSign.data.result.venereal;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "signs",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          before: [
            {
              value: "headache",
              meaning: "\u0633\u0631\u062f\u0631\u062f",
              icon: "<svg width='35' height='35' viewBox='0 0 35 35' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_16159_32828)'>\r\n<path d='M4.98039 9.10027H4.91003C4.82972 9.08719 4.75405 9.0539 4.69015 9.00352L1.17217 6.2435C1.11967 6.20828 1.07462 6.16306 1.0396 6.11042C1.00458 6.05778 0.980266 5.99876 0.968053 5.93673C0.95584 5.8747 0.955964 5.81087 0.968419 5.74889C0.980874 5.68691 1.00542 5.62799 1.04064 5.57549C1.07587 5.52299 1.12109 5.47794 1.17373 5.44292C1.22636 5.4079 1.28538 5.38359 1.34741 5.37137C1.40944 5.35916 1.47327 5.35928 1.53526 5.37174C1.59724 5.38419 1.65616 5.40874 1.70866 5.44396H1.76143L4.61979 7.68508L4.84846 6.05001C4.86447 5.93542 4.92135 5.83048 5.00862 5.75452C5.0959 5.67856 5.20769 5.6367 5.3234 5.63665H5.39375C5.47324 5.64713 5.54883 5.67737 5.61362 5.7246L8.83978 8.22077C8.89784 8.25377 8.9483 8.29864 8.98785 8.35246C9.0274 8.40628 9.05514 8.46783 9.06929 8.5331C9.08343 8.59838 9.08365 8.6659 9.06993 8.73126C9.05621 8.79662 9.02885 8.85835 8.98966 8.91243C8.95046 8.9665 8.9003 9.0117 8.84245 9.04507C8.7846 9.07845 8.72036 9.09924 8.65392 9.1061C8.58749 9.11297 8.52035 9.10574 8.4569 9.08489C8.39345 9.06405 8.33512 9.03006 8.2857 8.98513L5.64721 7.05104L5.40734 8.71249C5.3875 8.81514 5.33465 8.9085 5.25686 8.97836C5.17906 9.04821 5.08058 9.09074 4.97639 9.09947L4.98039 9.10027Z' fill='#8254C6'/>\r\n<path d='M11.0898 6.07609C11.0094 6.07631 10.9301 6.05629 10.8594 6.01787C10.7887 5.97945 10.7288 5.92386 10.6853 5.85622L9.75378 4.39706L9.39318 5.03669C9.3525 5.11344 9.29174 5.1777 9.21739 5.22262C9.14304 5.26754 9.05789 5.29144 8.97102 5.29174C8.88699 5.29281 8.80409 5.27236 8.7302 5.23233C8.6563 5.19231 8.59388 5.13404 8.54887 5.06308L7.13368 2.68124C7.08823 2.62737 7.05486 2.56437 7.03584 2.4965C7.01682 2.42863 7.0126 2.35747 7.02345 2.28783C7.03429 2.21819 7.05995 2.15168 7.09871 2.09281C7.13746 2.03394 7.1884 1.98407 7.24808 1.94657C7.30777 1.90907 7.37479 1.88482 7.44465 1.87546C7.51451 1.86609 7.58557 1.87184 7.65302 1.89229C7.72047 1.91274 7.78275 1.94744 7.83564 1.99402C7.88853 2.04061 7.9308 2.09801 7.9596 2.16233L8.97023 3.82378L9.32203 3.19934C9.36446 3.12757 9.42486 3.0681 9.49727 3.02678C9.56969 2.98547 9.65162 2.96374 9.73499 2.96374C9.81836 2.96374 9.90029 2.98547 9.97271 3.02678C10.0451 3.0681 10.1055 3.12757 10.148 3.19934L11.528 5.34371C11.5626 5.39723 11.5863 5.45713 11.5976 5.51991C11.6088 5.58268 11.6075 5.64707 11.5935 5.70931C11.5796 5.77155 11.5534 5.83039 11.5165 5.88238C11.4796 5.93438 11.4326 5.97849 11.3784 6.01213L11.2817 6.0649C11.2185 6.08096 11.1526 6.08395 11.0882 6.0737L11.0898 6.07609Z' fill='#8254C6'/>\r\n<path d='M7.54056 1.9894C7.61081 1.9891 7.67998 2.00671 7.74153 2.04057C7.80309 2.07442 7.855 2.12341 7.89236 2.18289L8.83262 3.7388L8.95575 3.94109L9.07009 3.73001L9.34273 3.2111C9.37929 3.14928 9.43134 3.09805 9.49373 3.06247C9.55612 3.02688 9.6267 3.00816 9.69853 3.00816C9.77035 3.00816 9.84094 3.02688 9.90333 3.06247C9.96572 3.09805 10.0178 3.14928 10.0543 3.2111L11.4343 5.35548C11.4638 5.40109 11.484 5.45207 11.4938 5.50549C11.5035 5.55891 11.5027 5.61374 11.4912 5.66683C11.4798 5.71992 11.458 5.77023 11.4271 5.8149C11.3962 5.85957 11.3568 5.89771 11.3112 5.92715H11.2233V6.03269V5.93594C11.1344 5.9687 11.0371 5.96997 10.9474 5.93956C10.8578 5.90914 10.7813 5.84888 10.7307 5.76884L9.85124 4.40962L9.72811 4.21613L9.61378 4.41841L9.30596 4.97249C9.26877 5.0362 9.21553 5.08905 9.15156 5.12578C9.0876 5.16251 9.01512 5.18184 8.94136 5.18184C8.86759 5.18184 8.79512 5.16251 8.73115 5.12578C8.66718 5.08905 8.61396 5.0362 8.57677 4.97249L7.16158 2.58186C7.12221 2.51919 7.10038 2.44709 7.09839 2.3731C7.0964 2.29911 7.11432 2.22594 7.15027 2.16124C7.18621 2.09654 7.23887 2.04267 7.30275 2.00527C7.36662 1.96787 7.43936 1.94831 7.51338 1.94863M7.51338 1.80791C7.40973 1.80456 7.30721 1.83037 7.2175 1.8824C7.12779 1.93443 7.05448 2.0106 7.00592 2.10223C6.95735 2.19386 6.93548 2.29728 6.94278 2.40073C6.95009 2.50418 6.98628 2.60351 7.04724 2.6874L8.49762 5.08603C8.54638 5.16873 8.61578 5.23733 8.69904 5.28513C8.7823 5.33292 8.87654 5.35827 8.97254 5.35867C9.06935 5.3591 9.16459 5.33415 9.24876 5.28632C9.33293 5.23848 9.4031 5.16943 9.45227 5.08603L9.76009 4.53195L10.6396 5.89117C10.7083 5.99956 10.8125 6.08073 10.9344 6.12083C11.0563 6.16093 11.1884 6.15747 11.308 6.11104C11.3866 6.08238 11.4578 6.03629 11.516 5.9762C11.5743 5.91612 11.6182 5.84362 11.6444 5.76414C11.6707 5.68466 11.6786 5.60027 11.6675 5.51731C11.6565 5.43434 11.6268 5.35496 11.5807 5.28512L10.2006 3.14074C10.1513 3.05897 10.0817 2.99132 9.9986 2.94436C9.91546 2.8974 9.8216 2.87272 9.72611 2.87272C9.63063 2.87272 9.53675 2.8974 9.45361 2.94436C9.37047 2.99132 9.30088 3.05897 9.25158 3.14074L8.97893 3.65965L8.03788 2.10374C7.98778 2.02558 7.91882 1.96126 7.83738 1.91669C7.75593 1.87212 7.66459 1.84874 7.57174 1.84868L7.51338 1.80791Z' fill='#8254C6'/>\r\n<path d='M16.0555 15.9995C15.6679 15.999 15.2836 15.9275 14.9218 15.7885C14.8861 15.7816 14.8523 15.7672 14.8226 15.7462C14.793 15.7253 14.7681 15.6982 14.7498 15.6668C14.7314 15.6355 14.72 15.6006 14.7162 15.5644C14.7125 15.5283 14.7164 15.4918 14.7279 15.4573C14.7394 15.4229 14.7581 15.3912 14.7828 15.3646C14.8075 15.338 14.8376 15.3169 14.8711 15.3028C14.9046 15.2888 14.9407 15.282 14.977 15.283C15.0134 15.284 15.049 15.2928 15.0817 15.3087C15.4086 15.4381 15.758 15.5009 16.1095 15.4934C16.461 15.4858 16.8074 15.4081 17.1285 15.2648C17.4495 15.1215 17.7386 14.9155 17.9789 14.6589C18.2192 14.4022 18.4058 14.1002 18.5277 13.7704C18.5346 13.7347 18.549 13.7009 18.5699 13.6713C18.5909 13.6416 18.618 13.6168 18.6493 13.5984C18.6807 13.5801 18.7156 13.5686 18.7517 13.5649C18.7879 13.5611 18.8244 13.5651 18.8588 13.5766C18.8933 13.5881 18.9249 13.6068 18.9516 13.6315C18.9782 13.6562 18.9993 13.6863 19.0133 13.7198C19.0274 13.7532 19.0342 13.7894 19.0331 13.8257C19.0321 13.862 19.0234 13.8977 19.0074 13.9303C18.7832 14.5346 18.3807 15.0565 17.8533 15.427C17.3259 15.7975 16.6984 15.9991 16.0539 16.0051L16.0555 15.9995Z' fill='#8254C6'/>\r\n<path d='M13.3309 12.0362H13.2429C13.1802 12.0125 13.1294 11.965 13.1014 11.9041C13.0734 11.8433 13.0706 11.7738 13.0934 11.7108C13.2414 11.321 13.4648 10.9642 13.7509 10.6607C14.0369 10.3573 14.3799 10.1132 14.7603 9.94244C15.1407 9.77165 15.551 9.67752 15.9678 9.6654C16.3846 9.65329 16.7998 9.72344 17.1894 9.87184C17.245 9.89894 17.2889 9.94531 17.3128 10.0023C17.3367 10.0593 17.3392 10.1231 17.3196 10.1817C17.3001 10.2404 17.2599 10.29 17.2065 10.3212C17.1531 10.3524 17.0902 10.3632 17.0295 10.3516C16.7021 10.2224 16.3521 10.16 16.0002 10.1681C15.6483 10.1762 15.3016 10.2547 14.9805 10.3989C14.6593 10.543 14.3703 10.75 14.1304 11.0076C13.8905 11.2652 13.7045 11.5681 13.5835 11.8987C13.5591 11.9437 13.5218 11.9804 13.4763 12.0039C13.4308 12.0275 13.3793 12.0368 13.3284 12.0306L13.3309 12.0362Z' fill='#8254C6'/>\r\n<path d='M16.0578 14.9099H15.9699C15.9023 14.9099 15.8374 14.883 15.7895 14.8352C15.7417 14.7874 15.7148 14.7225 15.7148 14.6549C15.7148 14.5872 15.7417 14.5223 15.7895 14.4745C15.8374 14.4267 15.9023 14.3998 15.9699 14.3998C16.1773 14.4092 16.3845 14.3775 16.5796 14.3065C16.7747 14.2355 16.9538 14.1266 17.1066 13.9861C17.2594 13.8455 17.3829 13.6761 17.4699 13.4876C17.557 13.2992 17.6058 13.0953 17.6138 12.8879C17.6138 12.8202 17.6406 12.7553 17.6885 12.7075C17.7363 12.6597 17.8012 12.6328 17.8688 12.6328C17.9365 12.6328 18.0013 12.6597 18.0492 12.7075C18.097 12.7553 18.1239 12.8202 18.1239 12.8879C18.106 13.4261 17.8812 13.9366 17.4964 14.3133C17.1116 14.6899 16.5963 14.9036 16.0578 14.9099Z' fill='#8254C6'/>\r\n<path d='M14.2288 13.0058C14.1953 13.0047 14.1624 12.9969 14.1319 12.9831C14.1014 12.9692 14.0739 12.9494 14.051 12.9249C14.0281 12.9004 14.0103 12.8717 13.9986 12.8403C13.9868 12.8089 13.9814 12.7755 13.9826 12.742C13.9935 12.4681 14.0583 12.199 14.1734 11.9502C14.2885 11.7014 14.4515 11.4777 14.6531 11.292C14.8548 11.1064 15.0911 10.9623 15.3485 10.8681C15.606 10.7739 15.8795 10.7314 16.1533 10.7431C16.221 10.7431 16.2859 10.77 16.3337 10.8178C16.3815 10.8656 16.4084 10.9305 16.4084 10.9982C16.4084 11.0658 16.3815 11.1307 16.3337 11.1785C16.2859 11.2263 16.221 11.2532 16.1533 11.2532C15.7351 11.2367 15.3273 11.3867 15.0194 11.6702C14.7114 11.9537 14.5283 12.3477 14.5103 12.7659C14.5103 12.8336 14.4834 12.8985 14.4356 12.9463C14.3877 12.9941 14.3229 13.021 14.2552 13.021L14.2288 13.0058Z' fill='#8254C6'/>\r\n<path d='M16.056 13.8471H16.0121C15.7507 13.8414 15.5021 13.7327 15.3203 13.5448C15.1385 13.3569 15.0382 13.1048 15.0411 12.8434C15.044 12.5819 15.1499 12.3322 15.3358 12.1483C15.5217 11.9644 15.7726 11.8613 16.0341 11.8613C16.2955 11.8613 16.5464 11.9644 16.7323 12.1483C16.9182 12.3322 17.0241 12.5819 17.027 12.8434C17.0299 13.1048 16.9296 13.3569 16.7478 13.5448C16.566 13.7327 16.3174 13.8414 16.056 13.8471ZM16.056 12.3176C15.9615 12.3202 15.8699 12.3505 15.7926 12.405C15.7153 12.4594 15.6558 12.5355 15.6216 12.6236C15.5874 12.7117 15.58 12.808 15.6003 12.9003C15.6207 12.9926 15.6678 13.0769 15.7359 13.1425C15.8039 13.2081 15.8898 13.2522 15.9828 13.2691C16.0758 13.2861 16.1718 13.2752 16.2586 13.2378C16.3454 13.2004 16.4192 13.1382 16.4708 13.059C16.5224 12.9798 16.5495 12.8871 16.5486 12.7926C16.5479 12.7289 16.5347 12.6659 16.5095 12.6074C16.4843 12.549 16.4477 12.4961 16.4018 12.4518C16.356 12.4076 16.3018 12.373 16.2424 12.35C16.1831 12.3269 16.1197 12.3159 16.056 12.3176Z' fill='#8254C6'/>\r\n<path d='M32.5997 22.8655C32.5006 19.0538 31.5441 15.3135 29.8013 11.9221C28.8198 10.0677 27.3524 8.51515 25.5563 7.43068C23.7601 6.3462 21.7029 5.77066 19.6047 5.76567C17.9819 5.7609 16.3786 6.11915 14.9122 6.81418C13.4458 7.50922 12.1533 8.52344 11.1296 9.78257C10.8745 10.1024 10.6499 10.3982 10.6722 10.6621C10.6879 10.7456 10.7201 10.8252 10.7669 10.8962C10.8138 10.9672 10.8743 11.0281 10.9449 11.0754C11.0567 11.177 11.1989 11.2388 11.3495 11.2513C11.6485 11.2513 11.9563 10.9315 12.229 10.6621L12.4576 10.4334C13.1113 9.71802 13.8456 9.0808 14.646 8.53448C16.1275 7.60952 17.839 7.11917 19.5855 7.11929C21.423 7.13786 23.2219 7.64925 24.7943 8.6001C26.3668 9.55094 27.6552 10.9064 28.5252 12.525C30.6176 16.322 31.1005 20.5204 31.3116 24.4965C31.3732 25.6567 31.3556 26.8152 31.3116 27.925V29.5952L23.7959 28.2152L24.0686 27.9426C26.9165 24.9843 28.0415 21.3416 27.4882 16.8289C27.3739 15.9494 27.0085 15.7216 26.4864 15.7216H26.1434C25.9104 15.7554 25.6753 15.773 25.4398 15.7743C24.1453 15.7546 22.8994 15.2783 21.9218 14.4295C21.315 13.9498 20.9623 13.6564 20.7177 13.6564C20.473 13.6564 20.19 14.0345 19.6783 14.7197C18.3247 16.5395 16.8127 17.4182 15.0457 17.4182C14.1985 17.3983 13.3618 17.2255 12.576 16.9081C12.3858 16.8295 12.1834 16.7848 11.9779 16.7762C11.818 16.7762 11.3447 16.7762 11.2743 17.6557C10.9545 21.6374 11.9339 24.8196 14.2454 27.3949C14.3637 27.527 14.4752 27.6649 14.5796 27.8082L14.7395 28.0017L14.9594 28.2744L8.05054 29.5313H7.9642C7.77071 29.5313 7.74433 29.3554 7.72434 29.1267C7.35617 25.2129 7.67739 21.2649 8.67339 17.4622C8.84929 16.7154 8.67339 16.4779 8.25123 16.3548C8.16604 16.3268 8.07706 16.312 7.98738 16.3108C7.87305 16.3108 7.53005 16.3108 7.33656 17.0488C6.15978 21.3244 5.84024 25.7905 6.3963 30.1901C6.40152 30.2721 6.40152 30.3543 6.3963 30.4363C7.89065 30.1165 9.40257 29.8383 10.9233 29.6456C11.2412 29.5567 11.5639 29.4862 11.8899 29.4345C12.1879 29.4031 12.4823 29.3442 12.7694 29.2586C13.259 29.1113 13.7629 29.017 14.2726 28.9772C14.3186 28.964 14.3673 28.964 14.4133 28.9772C14.9456 28.7718 15.5269 28.7289 16.0836 28.854H16.3826C16.4398 28.8698 16.49 28.9045 16.5252 28.9524C16.5603 29.0002 16.5782 29.0586 16.5761 29.1179C17.582 29.3461 18.6131 29.4437 19.6439 29.4081C20.7854 29.2624 21.9027 28.9667 22.9668 28.5286C23.0234 28.507 23.0861 28.507 23.1427 28.5286C23.6433 28.5101 24.1417 28.6033 24.6019 28.8013C24.761 28.7973 24.9193 28.8245 25.068 28.8812C27.4762 29.7607 30.0691 29.8743 32.487 30.6402C32.4769 30.532 32.4769 30.4231 32.487 30.3148C32.487 29.4353 32.5397 28.4951 32.5749 27.6076C32.5997 26.1004 32.6788 24.4654 32.5997 22.8655ZM22.667 27.263C21.7355 27.9973 20.5914 28.4105 19.4056 28.4407C18.4159 28.436 17.447 28.1561 16.6073 27.6323C14.0407 26.0764 12.1506 21.9012 12.6431 18.8422V18.6023L12.863 18.6639C13.5112 18.8379 14.1787 18.9296 14.8499 18.9365C15.963 18.9098 17.0549 18.627 18.0412 18.1103C19.0274 17.5935 19.8814 16.8566 20.537 15.9566L20.6249 15.8423L26.0746 17.6812V17.7868C26.9006 20.7139 25.1951 25.4344 22.6638 27.3013L22.667 27.263Z' fill='#8254C6'/>\r\n<path d='M6.60938 30.3646L16.1287 28.6057C16.1287 28.6057 18.6873 30.3023 23.0048 28.3242C32.0676 30.3726 32.0788 30.4686 32.0788 30.4686' stroke='#8254C6' stroke-width='0.262956' stroke-miterlimit='10'/>\r\n<path d='M8.91211 14.4964L9.59812 12.8877' stroke='#8254C6' stroke-width='0.797349' stroke-miterlimit='10' stroke-linecap='round'/>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_16159_32828'>\r\n<rect width='34.778' height='34.778' fill='white' transform='translate(0.113281 0.111328)'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
            },
            {
              value: "stomach_ache",
              meaning: "\u062f\u0644\u200c\u062f\u0631\u062f",
              icon: "<svg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M10.8902 34.3312H10.781C10.6626 34.3316 10.5488 34.2853 10.4643 34.2023C10.1719 33.6813 9.92035 33.1383 9.71183 32.5784C8.9081 30.3558 8.49931 28.0097 8.50395 25.6462C8.50918 22.3943 9.1817 19.178 10.4799 16.1965C11.7827 13.3401 12.374 10.2105 12.2031 7.07574C12.1727 6.92054 12.1971 6.75959 12.272 6.62032C12.3094 6.5791 12.3564 6.54779 12.4088 6.52917C12.4612 6.51056 12.5174 6.50522 12.5724 6.51365C12.8185 6.51365 12.8596 6.64248 12.8694 6.97892C13.0839 10.061 12.5505 13.1492 11.3144 15.9806C9.74139 19.4233 9.03107 23.1974 9.24493 26.9764C9.37 29.2742 9.93493 31.5267 10.9091 33.6115L10.9681 33.7108L11.0174 33.8003C10.9842 33.9515 10.9412 34.1003 10.8885 34.2458L10.8902 34.3312Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.373333' stroke-miterlimit='10'/>\r\n<path d='M29.5695 34.3704C29.514 34.382 29.4567 34.382 29.4012 34.3704C29.3619 34.3556 29.3259 34.3331 29.2953 34.3042C29.2647 34.2753 29.2402 34.2406 29.2232 34.2022C29.2027 34.0435 29.2378 33.8826 29.3225 33.7468C30.1522 32.0155 30.6846 30.1569 30.8971 28.2489C31.3797 24.1247 30.7257 19.947 29.0057 16.1676C27.7838 13.4158 27.2013 10.4229 27.3022 7.41368V7.28484C27.2886 7.16039 27.3055 7.03451 27.3514 6.91804C27.392 6.85368 27.4456 6.79852 27.5088 6.75612C27.5719 6.71372 27.6433 6.68502 27.7182 6.67188C27.8283 6.73727 27.9124 6.83874 27.9562 6.95908C27.9805 7.08013 27.9805 7.20482 27.9562 7.32587C27.9606 7.37528 27.9606 7.42499 27.9562 7.4744C27.8831 10.4196 28.4614 13.3446 29.6499 16.0404C31.0361 19.1573 31.748 22.5319 31.7391 25.9431C31.7398 28.604 31.1865 31.2359 30.1143 33.6713L29.9281 34.0734C29.8173 34.2416 29.704 34.3704 29.5695 34.3704Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.373333' stroke-miterlimit='10'/>\r\n<path d='M20.1405 34.3407C20.096 34.344 20.0514 34.3384 20.0091 34.3243C19.9669 34.3102 19.9278 34.2879 19.8943 34.2586C19.8141 34.1176 19.7851 33.9533 19.8122 33.7933V30.6637C19.824 30.4546 19.7873 30.2457 19.7049 30.0532C19.6224 29.8607 19.4966 29.69 19.3371 29.5543C18.6634 28.8978 17.9905 28.2372 17.3562 27.5734L16.5841 26.8012L16.4749 26.7118C16.4159 26.7118 16.356 26.6125 16.3461 26.5731C16.3142 26.42 16.2978 26.2642 16.2969 26.1078V26.0258H16.406C16.5314 26.0102 16.6587 26.0306 16.7728 26.0849C17.5351 26.8078 18.2983 27.5701 19.0212 28.3004L19.4175 28.6968C19.5464 28.8256 19.6637 28.9643 19.804 29.1325L20.0321 29.3901L20.1142 29.4796L20.966 28.6278L23.3489 26.2514L23.431 26.1694C23.5106 26.0664 23.612 25.9823 23.728 25.9232H23.847C23.9383 25.9157 24.0293 25.9401 24.1047 25.9921C24.1519 26.1166 24.1519 26.2541 24.1047 26.3786C24.0647 26.4567 24.0071 26.5244 23.9364 26.5764L23.847 26.6658L23.1241 27.3888C22.3913 28.1215 21.6388 28.8838 20.8864 29.6166C20.7482 29.7407 20.6392 29.8939 20.5673 30.0652C20.4954 30.2364 20.4622 30.4215 20.4703 30.607V33.7663C20.4925 33.9229 20.4637 34.0826 20.3883 34.2217C20.356 34.2503 20.3183 34.2724 20.2775 34.2864C20.2366 34.3005 20.1934 34.3064 20.1503 34.3037L20.1405 34.3407Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.373333' stroke-miterlimit='10'/>\r\n<path d='M6.47387 15.8628C6.3712 15.8639 6.26994 15.839 6.17943 15.7905C6.08893 15.742 6.0121 15.6715 5.95608 15.5855L4.62429 13.5144L4.08846 14.4761C4.03537 14.5717 3.95755 14.6514 3.86314 14.7067C3.76873 14.762 3.66121 14.7909 3.5518 14.7903C3.4445 14.7909 3.33885 14.7639 3.24491 14.7121C3.15097 14.6602 3.07187 14.5852 3.01514 14.4941L1.07366 11.2028C1.00908 11.139 0.959075 11.062 0.92708 10.9771C0.895085 10.8922 0.881858 10.8014 0.888309 10.7108C0.894759 10.6203 0.920735 10.5323 0.964449 10.4527C1.00816 10.3732 1.06857 10.3041 1.14154 10.2501C1.2145 10.1962 1.29829 10.1587 1.38713 10.1402C1.47598 10.1217 1.56778 10.1226 1.65622 10.143C1.74465 10.1633 1.82763 10.2026 1.89946 10.258C1.97129 10.3135 2.03025 10.3839 2.0723 10.4643L3.51405 12.8489L4.03184 11.9241C4.0705 11.8535 4.12273 11.7912 4.18555 11.7409C4.24837 11.6905 4.32052 11.6531 4.39785 11.6308C4.47518 11.6084 4.55617 11.6016 4.63616 11.6107C4.71614 11.6197 4.79354 11.6445 4.8639 11.6836C4.95314 11.7325 5.02916 11.8024 5.08545 11.8872L6.93503 14.8273C6.97947 14.8951 7.00996 14.971 7.02474 15.0507C7.03951 15.1304 7.03827 15.2122 7.02109 15.2914C7.0039 15.3707 6.97111 15.4456 6.92464 15.512C6.87816 15.5785 6.81893 15.6349 6.7504 15.6782H6.62075L6.47387 15.8628Z' fill='#8254C6'/>\r\n<path d='M32.8591 15.4393C32.7061 15.4395 32.5576 15.3872 32.4385 15.2912C32.3193 15.1951 32.2367 15.0611 32.2045 14.9115C32.1722 14.7619 32.1922 14.6058 32.2612 14.4692C32.3302 14.3326 32.4439 14.2238 32.5834 14.1609L34.9631 13.0793L34.0391 12.3753C33.9474 12.3045 33.8758 12.2111 33.8311 12.1043C33.7863 11.9974 33.7701 11.8808 33.784 11.7658C33.7979 11.6509 33.8415 11.5415 33.9103 11.4484C33.9792 11.3553 34.0711 11.2816 34.1769 11.2347L37.9139 9.68134C37.9939 9.64519 38.0803 9.62516 38.1681 9.6224C38.2559 9.61964 38.3434 9.6342 38.4256 9.66525C38.5078 9.6963 38.583 9.74323 38.6471 9.80337C38.7111 9.8635 38.7627 9.93566 38.7988 10.0157C38.835 10.0958 38.855 10.1822 38.8578 10.27C38.8606 10.3578 38.846 10.4453 38.8149 10.5275C38.7839 10.6097 38.737 10.6849 38.6768 10.749C38.6167 10.813 38.5445 10.8646 38.4645 10.9007L35.7303 12.0963L36.6329 12.7848C36.7207 12.8548 36.7894 12.9458 36.8328 13.0494C36.8761 13.153 36.8926 13.2659 36.8808 13.3776C36.8691 13.4893 36.8294 13.5962 36.7654 13.6885C36.7014 13.7808 36.6152 13.8555 36.5148 13.9057L33.1324 15.459C33.0401 15.4723 32.9461 15.4656 32.8566 15.4393H32.8591Z' fill='#8254C6'/>\r\n<path d='M19.9434 20.7949L20.2773 20.3477L20.6515 20.8441' fill='#8254C6'/>\r\n<path d='M19.9434 20.7949L20.2773 20.3477L20.6515 20.8441' stroke='#8254C6' stroke-width='0.266667' stroke-linecap='round' stroke-linejoin='round'/>\r\n<path d='M19.4045 17.9188C19.4109 18.1024 19.4717 18.28 19.579 18.4292C19.6863 18.5783 19.8355 18.6922 20.0076 18.7566C20.1797 18.821 20.367 18.8329 20.5458 18.7908C20.7247 18.7487 20.8871 18.6546 21.0124 18.5203C21.1378 18.386 21.2205 18.2175 21.2501 18.0362C21.2798 17.8548 21.255 17.6688 21.1789 17.5015C21.1028 17.3343 20.9789 17.1934 20.8227 17.0965C20.6665 16.9997 20.4852 16.9514 20.3016 16.9576C20.1795 16.9618 20.0595 16.9899 19.9484 17.0405C19.8372 17.0911 19.7371 17.163 19.6538 17.2523C19.5705 17.3416 19.5056 17.4464 19.4628 17.5607C19.42 17.6751 19.4002 17.7968 19.4045 17.9188C19.4093 17.9774 19.4364 18.0318 19.4803 18.0708C19.5242 18.1099 19.5814 18.1305 19.6401 18.1285C19.6988 18.1264 19.7544 18.1018 19.7955 18.0598C19.8365 18.0178 19.8598 17.9616 19.8604 17.9028C19.8728 17.79 19.9255 17.6854 20.0087 17.6082C20.0919 17.5309 20.2001 17.4862 20.3135 17.4823C20.427 17.4783 20.5381 17.5153 20.6265 17.5865C20.7149 17.6577 20.7747 17.7584 20.795 17.8701C20.7826 17.983 20.73 18.0876 20.6467 18.1648C20.5635 18.242 20.4553 18.2867 20.3419 18.2907C20.2284 18.2947 20.1173 18.2577 20.0289 18.1864C19.9405 18.1152 19.8807 18.0145 19.8604 17.9028C19.8369 17.6102 19.3703 17.6181 19.4045 17.9188Z' fill='#8254C6'/>\r\n<path d='M21.3576 16.8391C21.5487 17.1112 21.6492 17.4367 21.6447 17.7691C21.6403 18.1016 21.5312 18.4242 21.3328 18.6911C21.1621 18.9335 21.569 19.1478 21.7397 18.9054C21.9769 18.5664 22.1048 18.163 22.1063 17.7493C22.1079 17.3356 21.9829 16.9313 21.7482 16.5905C21.5849 16.3417 21.1944 16.6085 21.3573 16.8313L21.3576 16.8391Z' fill='#8254C6'/>\r\n<path d='M22.0264 16.4086C22.3179 16.7985 22.4751 17.2724 22.4744 17.7592C22.4737 18.246 22.3151 18.7194 22.0225 19.1084C21.8514 19.3429 22.1806 19.6574 22.3595 19.4226C22.7219 18.9585 22.9236 18.3891 22.9341 17.8003C22.9445 17.2115 22.7632 16.6353 22.4175 16.1586C22.2461 15.9198 21.8637 16.178 22.0261 16.4003L22.0264 16.4086Z' fill='#8254C6'/>\r\n<path d='M22.6024 15.8158C22.8727 16.0562 23.0881 16.352 23.2339 16.683C23.3797 17.0141 23.4524 17.3727 23.4472 17.7344C23.4421 18.0959 23.3592 18.4521 23.2042 18.7787C23.0492 19.1054 22.8257 19.3948 22.5488 19.6274C22.3271 19.8228 22.6651 20.1369 22.8858 19.9416C23.203 19.6639 23.4578 19.3222 23.6333 18.9389C23.8089 18.5556 23.9012 18.1395 23.9041 17.7179C23.9071 17.2962 23.8206 16.8788 23.6504 16.493C23.4801 16.1072 23.2301 15.7619 22.9166 15.4798C22.7061 15.2749 22.3914 15.6125 22.6024 15.8158Z' fill='#8254C6'/>\r\n<path d='M18.9003 16.5907C18.6901 16.947 18.5937 17.3591 18.6242 17.7717C18.6547 18.1843 18.8105 18.5777 19.0708 18.8993C19.2581 19.1291 19.6493 18.879 19.4617 18.6571C19.2456 18.4048 19.1143 18.0909 19.0866 17.7599C19.0589 17.4288 19.1362 17.0975 19.3075 16.8128C19.4619 16.5548 19.0546 16.3405 18.9006 16.5986L18.9003 16.5907Z' fill='#8254C6'/>\r\n<path d='M18.2358 16.1979C17.9242 16.6976 17.7834 17.285 17.8349 17.8717C17.8864 18.4583 18.1272 19.0122 18.5211 19.45C18.7165 19.6716 19.0228 19.3339 18.8353 19.113C18.5161 18.7454 18.3248 18.2842 18.29 17.7987C18.2553 17.3131 18.3789 16.8294 18.6425 16.4201C18.7974 16.162 18.3901 15.9478 18.2361 16.2058L18.2358 16.1979Z' fill='#8254C6'/>\r\n<path d='M17.6496 15.5662C17.3565 15.8695 17.1312 16.2316 16.9884 16.6284C16.8455 17.0252 16.7884 17.4478 16.8209 17.8683C16.8534 18.2888 16.9746 18.6976 17.1767 19.0678C17.3787 19.4379 17.657 19.7611 17.9931 20.0158C18.2279 20.1952 18.5421 19.8582 18.3073 19.6788C18.0144 19.4663 17.7708 19.1932 17.5931 18.878C17.4153 18.5629 17.3075 18.2131 17.2771 17.8526C17.2467 17.492 17.2943 17.1291 17.4167 16.7887C17.5391 16.4482 17.7335 16.1381 17.9865 15.8794C18.1828 15.6618 17.8536 15.3468 17.6496 15.5662Z' fill='#8254C6'/>\r\n</svg>\r\n"
            },
            {
              value: "chest_pain",
              meaning: "\u062f\u0631\u062f \u0633\u06cc\u0646\u0647",
              icon: "<svg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M16.4737 16.2555C16.3881 16.2528 16.3045 16.2286 16.2308 16.185C16.1571 16.1415 16.0955 16.08 16.0519 16.0062L15.0934 14.4445L14.7003 15.1155C14.6543 15.1935 14.5882 15.2576 14.509 15.3015C14.4298 15.3453 14.3403 15.3671 14.2498 15.3648C14.1602 15.3635 14.0724 15.339 13.9951 15.2936C13.9179 15.2482 13.8537 15.1836 13.8089 15.106L12.3822 12.5657C12.334 12.4509 12.3287 12.3226 12.3675 12.2042C12.4062 12.0859 12.4863 11.9855 12.5931 11.9214C12.6999 11.8574 12.8262 11.8339 12.9488 11.8554C13.0715 11.8769 13.1823 11.9419 13.2609 12.0385L14.2858 13.8303L14.6692 13.1912C14.7143 13.1157 14.7782 13.0533 14.8546 13.0099C14.931 12.9665 15.0174 12.9437 15.1053 12.9437C15.1932 12.9437 15.2796 12.9665 15.3561 13.0099C15.4325 13.0533 15.4964 13.1157 15.5415 13.1912L16.9402 15.4718C16.975 15.529 16.9982 15.5926 17.0084 15.6588C17.0186 15.725 17.0156 15.7926 16.9995 15.8576C16.9835 15.9226 16.9547 15.9838 16.9149 16.0377C16.8752 16.0916 16.8251 16.1371 16.7677 16.1716L16.6622 16.2195C16.6014 16.2446 16.5363 16.2576 16.4705 16.2578L16.4737 16.2555Z' fill='#8254C6'/>\r\n<path d='M12.8432 11.8772C12.9168 11.8783 12.989 11.8983 13.0528 11.9352C13.1165 11.9721 13.1698 12.0247 13.2074 12.0881L14.166 13.7456L14.2906 13.9661L14.4152 13.7552L14.722 13.2184C14.7598 13.1527 14.8143 13.0981 14.8799 13.0602C14.9455 13.0222 15.02 13.0022 15.0958 13.0022C15.1716 13.0022 15.2461 13.0222 15.3117 13.0602C15.3774 13.0981 15.4318 13.1527 15.4697 13.2184L16.8588 15.5086C16.8885 15.557 16.9084 15.6108 16.9172 15.667C16.9261 15.7231 16.9238 15.7804 16.9104 15.8356C16.8971 15.8909 16.8729 15.9429 16.8394 15.9888C16.8059 16.0346 16.7636 16.0734 16.715 16.1029H16.6288V16.2195V16.1237C16.5347 16.1581 16.4317 16.1588 16.3372 16.1255C16.2428 16.0923 16.1629 16.0273 16.1111 15.9416L15.2388 14.4853L15.1142 14.2744L14.9896 14.4853L14.6541 15.0605C14.6156 15.1282 14.5598 15.1846 14.4925 15.2238C14.4251 15.263 14.3486 15.2837 14.2707 15.2837C14.1927 15.2837 14.1162 15.263 14.0488 15.2238C13.9815 15.1846 13.9257 15.1282 13.8872 15.0605L12.4597 12.521C12.4177 12.4544 12.3946 12.3776 12.3931 12.2988C12.3916 12.2201 12.4117 12.1424 12.4512 12.0742C12.4907 12.0061 12.5481 11.95 12.6172 11.9122C12.6863 11.8744 12.7645 11.8562 12.8432 11.8596M12.8432 11.7158C12.7402 11.7154 12.6388 11.7421 12.5495 11.7934C12.4602 11.8447 12.3859 11.9187 12.3344 12.0079C12.2828 12.0971 12.2557 12.1983 12.2559 12.3013C12.256 12.4043 12.2833 12.5055 12.3351 12.5945L13.7626 15.134C13.8106 15.223 13.8809 15.2981 13.9666 15.3518C14.0523 15.4056 14.1504 15.4362 14.2515 15.4407C14.3546 15.4442 14.4568 15.4203 14.5477 15.3714C14.6387 15.3226 14.715 15.2506 14.7691 15.1627L15.1046 14.5876L15.9769 16.0438C16.0462 16.1579 16.1525 16.2448 16.2781 16.2902C16.4036 16.3355 16.5409 16.3365 16.6671 16.293C16.7504 16.2645 16.8261 16.2176 16.8888 16.1557C16.9514 16.0938 16.9992 16.0186 17.0287 15.9357C17.0582 15.8528 17.0686 15.7642 17.0591 15.6767C17.0496 15.5892 17.0204 15.505 16.9738 15.4303L15.5751 13.1497C15.5212 13.0726 15.4495 13.0096 15.3661 12.9661C15.2826 12.9226 15.1899 12.8999 15.0958 12.8999C15.0017 12.8999 14.909 12.9226 14.8256 12.9661C14.7422 13.0096 14.6704 13.0726 14.6165 13.1497L14.3098 13.6865L13.3512 12.029C13.3005 11.9466 13.2302 11.8781 13.1466 11.8296C13.0629 11.7811 12.9686 11.7541 12.8719 11.751L12.8432 11.7158Z' fill='#8254C6'/>\r\n<path d='M23.1422 16.1795L23.0368 16.122C22.929 16.0417 22.8573 15.922 22.8376 15.7891C22.8178 15.6561 22.8515 15.5208 22.9313 15.4126L24.5218 13.2558C24.5743 13.1865 24.6438 13.1317 24.7236 13.0969C24.8034 13.0621 24.8907 13.0484 24.9773 13.057C25.064 13.0657 25.1469 13.0965 25.2182 13.1464C25.2895 13.1963 25.3468 13.2637 25.3845 13.3421L25.7104 14.0227L26.8887 12.3364C26.9249 12.2736 26.9739 12.219 27.0325 12.1763C27.0911 12.1337 27.158 12.1038 27.229 12.0886C27.2999 12.0734 27.3732 12.0733 27.4441 12.0883C27.5151 12.1033 27.5821 12.133 27.6408 12.1755C27.6995 12.2181 27.7487 12.2725 27.785 12.3352C27.8214 12.3979 27.8442 12.4676 27.8519 12.5397C27.8596 12.6118 27.8521 12.6847 27.8298 12.7537C27.8076 12.8228 27.771 12.8863 27.7226 12.9403L26.0747 15.3367C26.0225 15.4083 25.9527 15.4653 25.8722 15.5023C25.7916 15.5392 25.7029 15.5548 25.6146 15.5476C25.5241 15.5403 25.4373 15.5088 25.3632 15.4566C25.289 15.4043 25.2302 15.3332 25.1928 15.2505L24.8573 14.5507L23.7845 16.0165C23.712 16.1119 23.6092 16.1797 23.493 16.2087C23.3769 16.2378 23.2542 16.2263 23.1454 16.1763L23.1422 16.1795Z' fill='#8254C6'/>\r\n<path d='M28.8247 16.043C30.4343 19.3182 30.5589 22.1851 28.6234 25.3276C28.1646 26.0285 27.8396 26.8082 27.6648 27.6274C27.2691 30.2031 27.5127 32.8366 28.3741 35.296C28.5179 35.7562 29.2464 35.5549 29.1027 35.0947C28.5441 33.3848 28.2688 31.595 28.2879 29.7962C28.2879 27.2855 29.3894 26.1456 30.463 24.0447C31.9808 21.169 30.8752 18.3915 29.5045 15.6412C29.2936 15.2099 28.6417 15.5837 28.8526 16.0247L28.8247 16.043Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.110437'/>\r\n<path d='M22.8176 4.79678C22.5683 9.41553 24.8298 8.39145 28.2215 9.77899C34.2582 12.2417 33.5009 18.5659 33.3379 23.7974C33.2356 27.2625 33.4183 30.7301 33.8843 34.1652C33.9514 34.6349 34.6991 34.6445 34.6416 34.1652C34.144 30.4183 33.9804 26.6346 34.1527 22.8588C34.2773 19.9167 34.6033 16.7934 33.5201 13.9768C33.0237 12.5529 32.1492 11.2909 30.9902 10.3262C28.585 8.46734 23.3216 9.04248 23.5836 4.79758C23.5836 4.69716 23.5437 4.60085 23.4727 4.52985C23.4017 4.45884 23.3054 4.41895 23.205 4.41895C23.1046 4.41895 23.0082 4.45884 22.9372 4.52985C22.8662 4.60085 22.8263 4.69716 22.8263 4.79758L22.8176 4.79678Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.110437'/>\r\n<path d='M10.5325 16.2176C9.40216 18.527 8.17518 21.1423 9.15293 23.7265C9.81435 25.4607 11.261 26.6022 11.6444 28.5194C11.9291 30.5828 11.6918 32.6847 10.9543 34.6327C10.8009 35.0928 11.5294 35.2941 11.6828 34.834C12.4487 32.7562 12.7051 30.525 12.4305 28.3276C12.2526 27.4593 11.8972 26.6372 11.3864 25.9128C9.46926 22.7703 9.57551 19.8954 11.1851 16.6282C11.396 16.1968 10.7442 15.8134 10.5333 16.2448L10.5325 16.2176Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.110437'/>\r\n<path d='M16.4445 5.33298C16.6649 9.51078 11.9983 8.9548 9.62259 10.4781C8.17359 11.4488 7.08001 12.8648 6.50721 14.5122C5.54863 17.0516 5.74036 19.8011 5.82663 22.4651C6.01252 26.553 5.85566 30.6493 5.35772 34.711C5.29062 35.1903 6.04789 35.1807 6.11499 34.711C6.58648 31.2764 6.76925 27.8083 6.66139 24.3432C6.48884 19.3905 5.50231 12.3082 11.7778 10.3248C15.275 9.2232 17.4214 9.80714 17.1818 5.34256C17.1818 4.86327 16.4053 4.85369 16.4245 5.34256L16.4445 5.33298Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.110437'/>\r\n<path d='M18.6103 22.0326C18.6105 22.3011 18.6896 22.5635 18.8377 22.7874C18.9859 23.0113 19.1965 23.1867 19.4435 23.2919C19.6905 23.397 19.963 23.4273 20.227 23.379C20.4911 23.3306 20.7351 23.2057 20.9288 23.0198C21.1225 22.8339 21.2573 22.5952 21.3165 22.3334C21.3757 22.0716 21.3566 21.7981 21.2617 21.547C21.1668 21.2959 21.0001 21.0782 20.7825 20.921C20.565 20.7637 20.306 20.6739 20.0377 20.6626C19.8547 20.6575 19.6725 20.6887 19.5015 20.7543C19.3306 20.8198 19.1743 20.9186 19.0416 21.0448C18.9089 21.171 18.8025 21.3222 18.7285 21.4896C18.6545 21.6571 18.6143 21.8376 18.6103 22.0206C18.6103 22.1109 18.6461 22.1974 18.7099 22.2613C18.7737 22.3251 18.8603 22.3609 18.9506 22.3609C19.0408 22.3609 19.1274 22.3251 19.1912 22.2613C19.255 22.1974 19.2909 22.1109 19.2909 22.0206C19.2909 21.8841 19.3313 21.7507 19.4072 21.6372C19.483 21.5237 19.5908 21.4352 19.7169 21.383C19.843 21.3308 19.9818 21.3171 20.1157 21.3437C20.2495 21.3703 20.3725 21.4361 20.469 21.5326C20.5656 21.6291 20.6313 21.7521 20.6579 21.886C20.6846 22.0199 20.6709 22.1586 20.6187 22.2848C20.5664 22.4109 20.478 22.5187 20.3645 22.5945C20.251 22.6703 20.1175 22.7108 19.981 22.7108C19.798 22.7108 19.6224 22.6381 19.493 22.5087C19.3636 22.3792 19.2909 22.2037 19.2909 22.0206C19.2621 21.6212 18.5815 21.6212 18.6103 22.0326Z' fill='#8254C6'/>\r\n<path d='M21.5311 20.5583C21.7987 20.9676 21.9307 21.4507 21.9083 21.9392C21.8859 22.4277 21.7104 22.8968 21.4064 23.2799C21.1476 23.625 21.7324 23.9605 21.9912 23.625C22.3555 23.138 22.5626 22.5515 22.5849 21.9438C22.6071 21.336 22.4435 20.7359 22.1158 20.2236C21.8857 19.8594 21.301 20.2236 21.5311 20.5687V20.5583Z' fill='#8254C6'/>\r\n<path d='M22.5391 19.9535C22.9465 20.5422 23.1519 21.2472 23.1242 21.9626C23.0966 22.678 22.8374 23.365 22.3857 23.9205C22.1173 24.256 22.5966 24.7353 22.865 24.3998C23.4217 23.7368 23.748 22.911 23.7947 22.0465C23.8414 21.1821 23.6059 20.3259 23.1238 19.6069C22.8842 19.245 22.2994 19.6093 22.5391 19.9535Z' fill='#8254C6'/>\r\n<path d='M23.4213 19.1313C23.8049 19.4989 24.105 19.9446 24.3013 20.4383C24.4977 20.9319 24.5856 21.462 24.5593 21.9926C24.5329 22.5232 24.3928 23.042 24.1485 23.5137C23.9043 23.9855 23.5614 24.3993 23.1433 24.727C22.8078 25.005 23.2871 25.4843 23.6226 25.2063C24.1022 24.8146 24.4934 24.3258 24.7706 23.772C25.0478 23.2183 25.2047 22.6122 25.231 21.9935C25.2572 21.3749 25.1522 20.7576 24.923 20.1824C24.6937 19.6072 24.3452 19.087 23.9006 18.656C23.836 18.601 23.753 18.5722 23.6682 18.5754C23.5833 18.5787 23.5028 18.6136 23.4425 18.6734C23.3822 18.7332 23.3466 18.8134 23.3427 18.8982C23.3387 18.983 23.3668 19.0662 23.4213 19.1313Z' fill='#8254C6'/>\r\n<path d='M17.932 20.056C17.6043 20.5683 17.4407 21.1683 17.4629 21.7761C17.4852 22.3838 17.6923 22.9703 18.0566 23.4573C18.3154 23.8024 18.9002 23.4573 18.6414 23.1122C18.3375 22.7291 18.1619 22.2601 18.1395 21.7716C18.1171 21.2831 18.2491 20.7999 18.5167 20.3907C18.7468 20.0264 18.1621 19.6813 17.932 20.0456V20.056Z' fill='#8254C6'/>\r\n<path d='M16.9228 19.4557C16.4407 20.1747 16.2052 21.0309 16.2519 21.8953C16.2986 22.7598 16.6249 23.5856 17.1816 24.2486C17.45 24.5937 17.9293 24.1048 17.6609 23.7693C17.2092 23.2139 16.95 22.5268 16.9223 21.8114C16.8947 21.096 17.1 20.391 17.5075 19.8024C17.7463 19.4365 17.1624 19.0914 16.9228 19.4557Z' fill='#8254C6'/>\r\n<path d='M16.1478 18.4988C15.7017 18.929 15.352 19.449 15.1219 20.0243C14.8917 20.5997 14.7863 21.2174 14.8125 21.8365C14.8388 22.4556 14.9962 23.0622 15.2743 23.616C15.5524 24.1698 15.9448 24.6582 16.4257 25.0491C16.7612 25.3271 17.2405 24.8478 16.905 24.5698C16.4869 24.2421 16.1441 23.8283 15.8998 23.3565C15.6555 22.8848 15.5154 22.366 15.4891 21.8354C15.4627 21.3048 15.5507 20.7747 15.747 20.281C15.9433 19.7874 16.2435 19.3417 16.6271 18.9741C16.6816 18.909 16.7096 18.8258 16.7057 18.741C16.7018 18.6562 16.6661 18.576 16.6059 18.5162C16.5456 18.4564 16.465 18.4214 16.3802 18.4182C16.2953 18.415 16.2124 18.4438 16.1478 18.4988Z' fill='#8254C6'/>\r\n</svg>\r\n"
            },
            {
              value: "contusion",
              meaning: "\u06a9\u0628\u0648\u062f\u06cc",
              icon: "<svg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M28.8248 16.0401C30.4345 19.3155 30.5591 22.1827 28.6235 25.3254C28.1647 26.0263 27.8396 26.8061 27.6648 27.6254C27.2691 30.2013 27.5127 32.835 28.3742 35.2946C28.518 35.7547 29.2466 35.5534 29.1028 35.0933C28.5441 33.3832 28.2689 31.5933 28.2879 29.7943C28.2879 27.2835 29.3896 26.1435 30.4633 24.0425C31.9811 21.1665 30.8755 18.3888 29.5046 15.6383C29.2937 15.2069 28.6418 15.5808 28.8527 16.0218L28.8248 16.0401Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.110448'/>\r\n<path d='M22.8156 4.79388C22.5664 9.41297 24.828 8.38881 28.22 9.77646C34.2571 12.2394 33.4997 18.5641 33.3368 23.7959C33.2344 27.2612 33.4172 30.7291 33.8832 34.1645C33.9503 34.6342 34.6981 34.6438 34.6405 34.1645C34.1429 30.4173 33.9793 26.6333 34.1516 22.8572C34.2762 19.915 34.6022 16.7914 33.5189 13.9745C33.0225 12.5505 32.1479 11.2885 30.9889 10.3237C28.5835 8.46471 23.3197 9.0399 23.5817 4.79468C23.5817 4.69425 23.5418 4.59794 23.4708 4.52692C23.3998 4.45591 23.3035 4.41602 23.2031 4.41602C23.1026 4.41602 23.0063 4.45591 22.9353 4.52692C22.8643 4.59794 22.8244 4.69425 22.8244 4.79468L22.8156 4.79388Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.110448'/>\r\n<path d='M10.5307 16.2147C9.40026 18.5242 8.17318 21.1398 9.151 23.7241C9.81247 25.4585 11.2592 26.6001 11.6427 28.5174C11.9274 30.5809 11.6901 32.683 10.9525 34.6311C10.7991 35.0913 11.5277 35.2926 11.681 34.8324C12.447 32.7545 12.7035 30.5232 12.4288 28.3256C12.2509 27.4573 11.8954 26.6351 11.3847 25.9106C9.46736 22.7679 9.57361 19.8927 11.1833 16.6253C11.3942 16.1939 10.7424 15.8105 10.5315 16.2419L10.5307 16.2147Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.110448'/>\r\n<path d='M16.4433 5.33008C16.6638 9.50819 11.9968 8.95217 9.62096 10.4756C8.17185 11.4463 7.07819 12.8625 6.50534 14.5099C5.54669 17.0496 5.73843 19.7993 5.82471 22.4635C6.01061 26.5517 5.85375 30.6483 5.35577 34.7103C5.28866 35.1896 6.04599 35.18 6.1131 34.7103C6.58461 31.2754 6.7674 27.8071 6.65953 24.3417C6.48698 19.3887 5.50037 12.3058 11.7763 10.3222C15.2738 9.22059 17.4204 9.80457 17.1807 5.33966C17.1807 4.86034 16.4042 4.85075 16.4234 5.33966L16.4433 5.33008Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.110448'/>\r\n<path d='M9.3094 15.1883C9.30955 15.3643 9.3614 15.5364 9.45854 15.6832C9.55568 15.8299 9.6938 15.9449 9.85575 16.0138C10.0177 16.0827 10.1963 16.1025 10.3694 16.0708C10.5425 16.039 10.7025 15.9571 10.8294 15.8351C10.9563 15.7132 11.0446 15.5567 11.0833 15.385C11.122 15.2133 11.1094 15.034 11.047 14.8694C10.9846 14.7048 10.8753 14.5622 10.7325 14.4593C10.5898 14.3563 10.4199 14.2976 10.2441 14.2904C10.124 14.287 10.0044 14.3074 9.89224 14.3505C9.78008 14.3935 9.67755 14.4584 9.59058 14.5413C9.50361 14.6242 9.43391 14.7234 9.38551 14.8334C9.33711 14.9434 9.31097 15.0618 9.30859 15.1819C9.30859 15.2411 9.33208 15.2978 9.37388 15.3395C9.41568 15.3813 9.47237 15.4048 9.53149 15.4048C9.5906 15.4048 9.64729 15.3813 9.68909 15.3395C9.73089 15.2978 9.75436 15.2411 9.75436 15.1819C9.75436 15.0925 9.78089 15.0051 9.83058 14.9307C9.88026 14.8564 9.95088 14.7984 10.0335 14.7642C10.1161 14.73 10.207 14.721 10.2947 14.7385C10.3825 14.7559 10.463 14.799 10.5263 14.8622C10.5895 14.9255 10.6326 15.006 10.65 15.0937C10.6674 15.1814 10.6585 15.2724 10.6243 15.355C10.5901 15.4376 10.5321 15.5082 10.4577 15.5579C10.3834 15.6076 10.296 15.6341 10.2065 15.6341C10.0866 15.6341 9.9716 15.5865 9.88681 15.5017C9.80201 15.4169 9.75436 15.3019 9.75436 15.1819C9.73599 14.9183 9.29023 14.9183 9.3094 15.1883Z' fill='#8254C6'/>\r\n<path d='M11.2257 14.2207C11.4012 14.4886 11.488 14.8051 11.4737 15.1251C11.4593 15.4452 11.3446 15.7526 11.1458 16.0038C10.9765 16.2298 11.3591 16.4495 11.5285 16.2298C11.7669 15.9106 11.9023 15.5261 11.9166 15.1279C11.9309 14.7296 11.8233 14.3365 11.6084 14.001C11.4574 13.7613 11.0747 14.001 11.2257 14.2271V14.2207Z' fill='#8254C6'/>\r\n<path d='M11.8848 13.825C12.1517 14.2107 12.2862 14.6725 12.268 15.1412C12.2499 15.6098 12.0801 16.0599 11.7842 16.4237C11.6084 16.6434 11.9224 16.9574 12.0981 16.7377C12.4624 16.3034 12.6758 15.7626 12.7063 15.1965C12.7369 14.6305 12.5829 14.0699 12.2675 13.5989C12.1109 13.3608 11.7283 13.5989 11.8848 13.825Z' fill='#8254C6'/>\r\n<path d='M12.4599 13.2858C12.7112 13.5267 12.9078 13.8187 13.0365 14.1421C13.1651 14.4655 13.2227 14.8128 13.2055 15.1604C13.1882 15.5081 13.0964 15.8479 12.9364 16.157C12.7763 16.4661 12.5517 16.7371 12.2778 16.9519C12.0581 17.134 12.372 17.448 12.5917 17.2658C12.9062 17.0091 13.1628 16.6887 13.3446 16.3257C13.5264 15.9627 13.6293 15.5653 13.6465 15.1597C13.6637 14.7541 13.5949 14.3495 13.4445 13.9724C13.2941 13.5953 13.0655 13.2543 12.7739 12.9719C12.7319 12.9321 12.676 12.9104 12.6182 12.9112C12.5603 12.912 12.5051 12.9353 12.4642 12.9762C12.4233 13.0171 12.4 13.0723 12.3992 13.1301C12.3984 13.188 12.4202 13.2438 12.4599 13.2858Z' fill='#8254C6'/>\r\n<path d='M8.86418 13.8943C8.6492 14.2299 8.54167 14.623 8.55595 15.0212C8.57022 15.4195 8.70562 15.8039 8.94407 16.1232C9.11343 16.3493 9.49688 16.1232 9.32672 15.8971C9.12791 15.6459 9.0132 15.3385 8.99886 15.0185C8.98452 14.6984 9.07129 14.382 9.24684 14.114C9.39783 13.8744 9.01437 13.6491 8.86418 13.8879V13.8943Z' fill='#8254C6'/>\r\n<path d='M8.20436 13.4996C7.88898 13.9706 7.73498 14.5312 7.76552 15.0972C7.79606 15.6632 8.00948 16.204 8.37371 16.6384C8.54946 16.8644 8.86342 16.5441 8.68767 16.3244C8.39178 15.9605 8.222 15.5105 8.20385 15.0418C8.18569 14.5732 8.32015 14.1113 8.58701 13.7257C8.74439 13.4876 8.36094 13.2615 8.20436 13.4996Z' fill='#8254C6'/>\r\n<path d='M7.69529 12.8713C7.4026 13.1531 7.17312 13.494 7.02205 13.8712C6.87099 14.2484 6.80176 14.6533 6.81898 15.0593C6.8362 15.4653 6.93947 15.8629 7.12194 16.226C7.30441 16.589 7.56192 16.9092 7.87743 17.1652C8.09712 17.3474 8.41107 17.0334 8.19138 16.8513C7.91744 16.6366 7.69285 16.3655 7.5328 16.0564C7.37274 15.7473 7.28098 15.4075 7.26371 15.0598C7.24643 14.7122 7.30407 14.3649 7.43269 14.0415C7.56132 13.7181 7.75793 13.4261 8.00924 13.1853C8.04898 13.1432 8.07077 13.0874 8.06997 13.0296C8.06916 12.9717 8.04584 12.9165 8.00495 12.8756C7.96405 12.8347 7.90882 12.8114 7.85099 12.8106C7.79316 12.8098 7.7373 12.8316 7.69529 12.8713Z' fill='#8254C6'/>\r\n<path d='M15.6549 30.3195C15.655 30.4916 15.7057 30.6599 15.8007 30.8034C15.8956 30.947 16.0306 31.0595 16.1889 31.127C16.3472 31.1945 16.5219 31.214 16.6912 31.1832C16.8605 31.1523 17.017 31.0724 17.1413 30.9534C17.2656 30.8344 17.3523 30.6815 17.3905 30.5137C17.4287 30.3459 17.4167 30.1706 17.3562 30.0095C17.2956 29.8484 17.1891 29.7086 17.0499 29.6075C16.9106 29.5064 16.7447 29.4484 16.5728 29.4408C16.4546 29.4376 16.3371 29.4578 16.2268 29.5004C16.1166 29.5429 16.0158 29.6069 15.9305 29.6886C15.8451 29.7704 15.7768 29.8682 15.7295 29.9765C15.6822 30.0848 15.6568 30.2014 15.6549 30.3195C15.6549 30.3776 15.6779 30.4332 15.719 30.4743C15.76 30.5153 15.8157 30.5384 15.8738 30.5384C15.9318 30.5384 15.9875 30.5153 16.0285 30.4743C16.0696 30.4332 16.0926 30.3776 16.0926 30.3195C16.0926 30.2318 16.1186 30.1461 16.1674 30.0732C16.2161 30.0003 16.2853 29.9434 16.3663 29.9099C16.4474 29.8763 16.5365 29.8676 16.6225 29.8847C16.7085 29.9018 16.7875 29.944 16.8495 30.006C16.9115 30.068 16.9538 30.147 16.9709 30.233C16.988 30.319 16.9792 30.4082 16.9456 30.4892C16.9121 30.5702 16.8553 30.6395 16.7823 30.6882C16.7094 30.7369 16.6237 30.7629 16.536 30.7629C16.4184 30.7629 16.3057 30.7162 16.2225 30.633C16.1394 30.5499 16.0926 30.4371 16.0926 30.3195C16.0735 30.0567 15.6365 30.0567 15.6549 30.3195Z' fill='#8254C6'/>\r\n<path d='M17.5315 29.3735C17.7038 29.6367 17.7887 29.9474 17.7744 30.2616C17.7601 30.5758 17.6471 30.8775 17.4517 31.1238C17.2855 31.3459 17.661 31.5616 17.8279 31.3459C18.0622 31.0326 18.1955 30.6553 18.2097 30.2643C18.224 29.8734 18.1187 29.4873 17.9078 29.1578C17.76 28.9237 17.3838 29.1578 17.5315 29.3799V29.3735Z' fill='#8254C6'/>\r\n<path d='M18.1803 28.9851C18.4425 29.3636 18.5747 29.8171 18.557 30.2773C18.5393 30.7374 18.3726 31.1794 18.0821 31.5367C17.9095 31.7524 18.2179 32.0607 18.3904 31.845C18.748 31.4187 18.9575 30.8878 18.9874 30.3321C19.0174 29.7765 18.8662 29.2261 18.5566 28.7638C18.4016 28.5289 18.0261 28.763 18.1803 28.9851Z' fill='#8254C6'/>\r\n<path d='M18.7483 28.4551C18.995 28.6915 19.1881 28.9781 19.3144 29.2956C19.4407 29.6131 19.4972 29.9541 19.4803 30.2954C19.4633 30.6367 19.3732 30.9703 19.216 31.2737C19.0589 31.5771 18.8383 31.8432 18.5694 32.054C18.3537 32.2329 18.662 32.5405 18.8777 32.3624C19.1867 32.1104 19.4387 31.7959 19.6173 31.4395C19.7959 31.0832 19.897 30.693 19.9139 30.2947C19.9308 29.8964 19.8632 29.4991 19.7154 29.1289C19.5676 28.7586 19.3431 28.4239 19.0567 28.1467C19.0155 28.1072 18.9605 28.0854 18.9034 28.0859C18.8463 28.0865 18.7918 28.1095 18.7514 28.1498C18.7111 28.1902 18.6881 28.2447 18.6876 28.3018C18.687 28.3589 18.7088 28.4139 18.7483 28.4551Z' fill='#8254C6'/>\r\n<path d='M15.2172 29.0531C15.0064 29.3827 14.9011 29.7687 14.9153 30.1597C14.9296 30.5507 15.0628 30.928 15.2971 31.2413C15.4633 31.4634 15.8396 31.2413 15.6734 31.0192C15.478 30.7727 15.3652 30.4711 15.3508 30.1569C15.3365 29.8428 15.4214 29.5321 15.5935 29.2688C15.7413 29.0348 15.3658 28.8127 15.2172 29.0468V29.0531Z' fill='#8254C6'/>\r\n<path d='M14.5693 28.6625C14.2597 29.1248 14.1085 29.6752 14.1385 30.2308C14.1685 30.7864 14.378 31.3173 14.7355 31.7437C14.9081 31.9658 15.2148 31.651 15.0439 31.4354C14.7533 31.0781 14.5867 30.6361 14.5689 30.1759C14.5512 29.7158 14.6834 29.2623 14.9456 28.8837C15.099 28.6529 14.7219 28.4308 14.5693 28.6625Z' fill='#8254C6'/>\r\n<path d='M14.07 28.049C13.7826 28.3257 13.5573 28.6603 13.4089 29.0307C13.2606 29.401 13.1926 29.7986 13.2096 30.1972C13.2265 30.5958 13.3279 30.9862 13.5071 31.3427C13.6863 31.6991 13.9392 32.0134 14.249 32.2647C14.4647 32.4437 14.773 32.1353 14.5573 31.9563C14.2884 31.7456 14.0678 31.4795 13.9107 31.1761C13.7535 30.8726 13.6634 30.539 13.6464 30.1977C13.6295 29.8564 13.686 29.5155 13.8123 29.198C13.9386 28.8805 14.1317 28.5938 14.3784 28.3574C14.4179 28.3162 14.4397 28.2612 14.4392 28.2041C14.4386 28.1471 14.4156 28.0925 14.3753 28.0522C14.3349 28.0118 14.2804 27.9889 14.2233 27.9883C14.1662 27.9877 14.1112 28.0095 14.07 28.049Z' fill='#8254C6'/>\r\n<path d='M27.526 12.863C27.5261 13.0442 27.5795 13.2214 27.6796 13.3726C27.7796 13.5238 27.9218 13.6422 28.0886 13.7132C28.2554 13.7843 28.4393 13.8047 28.6176 13.7721C28.7959 13.7395 28.9607 13.6552 29.0915 13.5297C29.2223 13.4042 29.3134 13.243 29.3534 13.0662C29.3934 12.8894 29.3805 12.7048 29.3165 12.5352C29.2524 12.3656 29.14 12.2186 28.9931 12.1124C28.8462 12.0062 28.6713 11.9455 28.4902 11.9379C28.3665 11.9345 28.2433 11.9556 28.1277 12C28.0122 12.0444 27.9066 12.1112 27.8169 12.1966C27.7273 12.282 27.6555 12.3842 27.6055 12.4975C27.5556 12.6108 27.5286 12.7328 27.526 12.8566C27.5294 12.9151 27.5551 12.9702 27.5978 13.0104C27.6405 13.0507 27.697 13.0731 27.7556 13.0731C27.8143 13.0731 27.8708 13.0507 27.9135 13.0104C27.9562 12.9702 27.9819 12.9151 27.9853 12.8566C27.9853 12.7644 28.0126 12.6744 28.0638 12.5978C28.115 12.5212 28.1877 12.4615 28.2728 12.4263C28.3579 12.391 28.4516 12.3818 28.5419 12.3998C28.6323 12.4177 28.7153 12.4621 28.7804 12.5272C28.8455 12.5924 28.8899 12.6754 28.9079 12.7657C28.9258 12.856 28.9166 12.9497 28.8814 13.0348C28.8461 13.1199 28.7864 13.1926 28.7098 13.2438C28.6332 13.295 28.5432 13.3223 28.4511 13.3223C28.3276 13.3223 28.2091 13.2732 28.1217 13.1859C28.0344 13.0985 27.9853 12.9801 27.9853 12.8566C27.9662 12.5849 27.5068 12.5849 27.526 12.863Z' fill='#8254C6'/>\r\n<path d='M29.5007 11.8682C29.6813 12.1445 29.7703 12.4707 29.7553 12.8004C29.7402 13.1302 29.6218 13.4469 29.4168 13.7056C29.2418 13.9389 29.6365 14.165 29.8114 13.9389C30.0574 13.6099 30.1972 13.2137 30.2122 12.8032C30.2272 12.3927 30.1167 11.9874 29.8953 11.6413C29.7403 11.3953 29.3449 11.6413 29.5007 11.8746V11.8682Z' fill='#8254C6'/>\r\n<path d='M30.1788 11.4605C30.4533 11.8584 30.5916 12.3345 30.5729 12.8175C30.5541 13.3005 30.3794 13.7645 30.0749 14.1399C29.8936 14.3668 30.2171 14.6904 30.3985 14.4635C30.7742 14.0158 30.9943 13.4582 31.0259 12.8746C31.0574 12.2909 30.8987 11.7129 30.5734 11.2272C30.4121 10.9812 30.0166 11.2272 30.1788 11.4605Z' fill='#8254C6'/>\r\n<path d='M30.7746 10.9038C31.0337 11.1521 31.2364 11.4531 31.369 11.7865C31.5016 12.12 31.5611 12.478 31.5432 12.8364C31.5254 13.1948 31.4308 13.5452 31.2658 13.8638C31.1008 14.1825 30.8693 14.4619 30.5868 14.6833C30.36 14.871 30.6843 15.1946 30.9104 15.0068C31.2347 14.7423 31.4994 14.412 31.6869 14.0378C31.8744 13.6636 31.9805 13.2539 31.9982 12.8357C32.016 12.4175 31.9449 12.0003 31.7898 11.6116C31.6346 11.2228 31.3989 10.8713 31.0981 10.5803C31.0544 10.5419 30.9976 10.5216 30.9395 10.5236C30.8813 10.5255 30.826 10.5494 30.7849 10.5906C30.7437 10.6317 30.7198 10.687 30.7179 10.7452C30.7159 10.8033 30.7362 10.8601 30.7746 10.9038Z' fill='#8254C6'/>\r\n<path d='M27.0663 11.53C26.8449 11.876 26.7344 12.2813 26.7494 12.6918C26.7644 13.1024 26.9042 13.4985 27.1502 13.8275C27.3251 14.0608 27.7198 13.8275 27.5448 13.5943C27.3398 13.3355 27.2214 13.0189 27.2063 12.6891C27.1913 12.3593 27.2804 12.0332 27.4609 11.7568C27.6159 11.5108 27.2213 11.2775 27.0663 11.5236V11.53Z' fill='#8254C6'/>\r\n<path d='M26.388 11.1226C26.0628 11.6082 25.904 12.1863 25.9356 12.7699C25.9671 13.3535 26.1873 13.9111 26.563 14.3588C26.7443 14.5921 27.0679 14.2614 26.8865 14.0353C26.5818 13.6598 26.407 13.1957 26.3883 12.7125C26.3696 12.2293 26.5079 11.753 26.7827 11.3551C26.9448 11.1098 26.5502 10.8757 26.388 11.1226Z' fill='#8254C6'/>\r\n<path d='M25.8619 10.4758C25.5599 10.7662 25.3232 11.1175 25.1673 11.5064C25.0114 11.8952 24.94 12.3128 24.9577 12.7314C24.9755 13.15 25.082 13.56 25.2703 13.9343C25.4585 14.3085 25.7242 14.6385 26.0496 14.9023C26.2765 15.0901 26.6 14.7665 26.3732 14.5788C26.0907 14.3574 25.8592 14.078 25.6942 13.7593C25.5292 13.4407 25.4346 13.0903 25.4168 12.7319C25.399 12.3735 25.4584 12.0155 25.591 11.6821C25.7236 11.3486 25.9263 11.0476 26.1854 10.7993C26.2238 10.7556 26.2441 10.6988 26.2421 10.6407C26.2402 10.5825 26.2163 10.5272 26.1751 10.4861C26.134 10.4449 26.0787 10.421 26.0205 10.4191C25.9624 10.4172 25.9057 10.4374 25.8619 10.4758Z' fill='#8254C6'/>\r\n</svg>\r\n"
            },
            {
              value: "back_ache",
              meaning: "\u06a9\u0645\u0631\u062f\u0631\u062f",
              icon: "<svg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M9.58531 35.2153V35.2946H10.3345C9.87717 33.9016 9.54291 32.4712 9.33558 31.0198C8.80598 27.2143 9.33557 24.2485 10.9933 21.6814C12.2295 19.8647 13.0605 17.8034 13.4298 15.6373C13.7992 13.4712 13.6982 11.251 13.1339 9.12729C12.865 8.25216 12.5033 7.4083 12.0549 6.61014L11.6854 5.87124C11.6854 5.79196 11.4754 5.73171 11.3255 5.68176H11.2256V5.76104C11.1893 5.95594 11.1629 6.15254 11.1463 6.3501L11.2066 6.43969L11.2764 6.53958C12.3326 8.44243 12.9044 10.576 12.9413 12.752C12.9415 15.8033 12.0528 18.7885 10.3837 21.3428C8.71413 23.9035 8.03957 26.9867 8.48727 30.0106C8.73111 31.769 9.09802 33.5082 9.58531 35.2153Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.4' stroke-miterlimit='10'/>\r\n<path d='M28.7407 21.8226C29.8828 23.6138 30.4956 25.6911 30.5087 27.8154C30.5397 30.3117 30.1412 32.7947 29.3306 35.156H29.9799C30.2899 34.157 30.5888 33.2287 30.8187 32.2599C31.362 30.3434 31.4853 28.3322 31.1802 26.3638C30.8751 24.3953 30.1487 22.5158 29.0507 20.8538C27.6085 18.6253 26.8197 16.0372 26.7738 13.3832C26.6754 10.9441 27.2515 8.52512 28.4387 6.39221C28.4953 6.19644 28.4953 5.98863 28.4387 5.79285C28.4359 5.74638 28.4359 5.69979 28.4387 5.65332H28.3784C28.1786 5.77303 27.982 5.90305 27.7894 6.04259C27.7586 6.07758 27.7349 6.11824 27.7196 6.1623V6.26219C26.4798 8.50062 25.9145 11.0501 26.092 13.6028C26.2088 16.5326 27.1239 19.3749 28.7384 21.8226H28.7407Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.4' stroke-miterlimit='10'/>\r\n<path d='M14.6298 28.873C15.2463 29.0722 15.8894 29.1768 16.5373 29.183C17.175 29.1836 17.8088 29.0825 18.4146 28.8833C18.6003 28.8113 18.7956 28.7675 18.9942 28.7533C19.4437 28.7533 19.4437 29.2028 19.4437 29.6119V35.1948H20.2428V29.9036C20.2154 29.6313 20.2154 29.357 20.2428 29.0847C20.2558 28.9925 20.3032 28.9086 20.3753 28.8498C20.4475 28.791 20.5392 28.7616 20.6321 28.7675C20.8866 28.7899 21.1378 28.8402 21.3813 28.9174H21.501C22.0481 29.0654 22.6119 29.1426 23.1786 29.1473C23.8611 29.155 24.5388 29.0329 25.1757 28.7874C25.2454 28.7874 25.3152 28.6177 25.3858 28.4877L25.4357 28.3775H25.366C25.2698 28.2998 25.1569 28.2455 25.0361 28.2189H24.8966C24.6504 28.2238 24.4057 28.2573 24.1672 28.3188C23.8006 28.4053 23.4252 28.4489 23.0486 28.4488C22.0746 28.4391 21.1282 28.1247 20.3419 27.5498C20.2073 27.4452 20.043 27.3858 19.8726 27.3801C19.6613 27.3977 19.4583 27.4701 19.2836 27.5902V27.5902C18.7719 27.927 18.198 28.158 17.5957 28.2697C17.3828 28.2803 17.1695 28.2803 16.9567 28.2697H14.8954C14.7398 28.2872 14.59 28.3383 14.4562 28.4195H14.3698L14.4395 28.5297C14.4387 28.5985 14.4558 28.6663 14.4892 28.7265C14.5225 28.7867 14.571 28.8372 14.6298 28.873V28.873Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.4' stroke-miterlimit='10'/>\r\n<path d='M20.0309 15.3806H19.9516C19.8534 15.2923 19.7737 15.1854 19.7171 15.066C19.6605 14.9467 19.6281 14.8173 19.6218 14.6853C19.6218 11.5989 19.6218 8.47291 19.6218 5.37701C19.633 5.2458 19.6717 5.11842 19.7354 5.00314C19.799 4.88786 19.8862 4.78726 19.9913 4.70789H20.0912C20.3211 4.70789 20.4083 4.88785 20.4083 5.38732V9.9618V14.7012C20.3512 15.1206 20.3013 15.3806 20.0309 15.3806Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.4' stroke-miterlimit='10'/>\r\n<path d='M11.8421 15.131C11.7866 15.1316 11.7318 15.1181 11.6829 15.092C11.634 15.0658 11.5925 15.0277 11.5622 14.9812L10.8431 13.8625L10.5538 14.3818C10.5251 14.4334 10.4832 14.4763 10.4323 14.5062C10.3814 14.536 10.3234 14.5516 10.2644 14.5515V14.5515C10.2066 14.5518 10.1498 14.5375 10.0991 14.5097C10.0485 14.482 10.0058 14.4418 9.97501 14.3929L8.92613 12.6249C8.89069 12.5906 8.86315 12.549 8.84546 12.5029C8.82776 12.4568 8.82032 12.4075 8.82365 12.3582C8.82699 12.309 8.84103 12.2611 8.86478 12.2178C8.88853 12.1746 8.92143 12.1371 8.96119 12.1078C9.00094 12.0786 9.04659 12.0584 9.09496 12.0486C9.14332 12.0388 9.19324 12.0397 9.24123 12.0512C9.28921 12.0627 9.33412 12.0845 9.3728 12.1151C9.41149 12.1458 9.44304 12.1845 9.46524 12.2285L10.2446 13.5168L10.5244 13.0174C10.5453 12.9792 10.5735 12.9456 10.6074 12.9184C10.6414 12.8911 10.6804 12.8709 10.7221 12.8588C10.7639 12.8467 10.8077 12.843 10.8509 12.8479C10.8941 12.8528 10.9359 12.8662 10.9739 12.8874V12.8874C11.0222 12.9138 11.0633 12.9517 11.0937 12.9976L12.0926 14.5832C12.1165 14.6198 12.1329 14.6608 12.1408 14.7037C12.1487 14.7467 12.148 14.7909 12.1387 14.8336C12.1294 14.8763 12.1117 14.9167 12.0866 14.9525C12.0616 14.9884 12.0296 15.0188 11.9927 15.0422H11.9253L11.8421 15.131Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.2' stroke-miterlimit='10'/>\r\n<path d='M28.0912 15.0804C28.0133 15.0807 27.9377 15.0543 27.877 15.0055C27.8164 14.9567 27.7743 14.8885 27.7579 14.8123C27.7416 14.7362 27.7519 14.6568 27.7872 14.5873C27.8225 14.5179 27.8805 14.4627 27.9517 14.4311L29.1599 13.8816L28.6906 13.5217C28.6439 13.4858 28.6073 13.4384 28.5845 13.3841C28.5617 13.3298 28.5534 13.2705 28.5604 13.2121C28.5674 13.1536 28.5896 13.098 28.6246 13.0507C28.6597 13.0033 28.7065 12.9659 28.7603 12.9422L30.6583 12.1494C30.7396 12.1171 30.8302 12.1174 30.9113 12.1502C30.9924 12.1829 31.0577 12.2457 31.0938 12.3254C31.1298 12.4051 31.1337 12.4956 31.1047 12.5781C31.0758 12.6607 31.0161 12.7289 30.9382 12.7686L29.55 13.3774L30.009 13.7271C30.0537 13.7626 30.0886 13.8088 30.1106 13.8615C30.1327 13.9141 30.1411 13.9715 30.1351 14.0282C30.1291 14.0849 30.1088 14.1393 30.0763 14.1861C30.0437 14.233 29.9999 14.2709 29.9488 14.2963L28.2308 15.0891C28.184 15.0957 28.1365 15.0922 28.0912 15.0788V15.0804Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.2' stroke-miterlimit='10'/>\r\n<path d='M18.9975 19.9506C19.0075 20.2375 19.1024 20.5149 19.2701 20.7479C19.4379 20.9809 19.6709 21.159 19.9398 21.2596C20.2087 21.3601 20.5013 21.3787 20.7808 21.313C21.0603 21.2473 21.314 21.1002 21.5098 20.8903C21.7057 20.6805 21.835 20.4172 21.8813 20.1339C21.9276 19.8506 21.8889 19.5599 21.77 19.2986C21.6511 19.0373 21.4575 18.817 21.2135 18.6658C20.9695 18.5145 20.6861 18.439 20.3992 18.4487C20.2085 18.4552 20.021 18.4992 19.8473 18.5782C19.6736 18.6572 19.5172 18.7696 19.387 18.9091C19.2569 19.0486 19.1555 19.2124 19.0886 19.3911C19.0218 19.5698 18.9908 19.7599 18.9975 19.9506C19.0008 20.0451 19.0415 20.1344 19.1107 20.1989C19.1799 20.2634 19.2718 20.2978 19.3664 20.2945C19.4609 20.2912 19.5502 20.2504 19.6147 20.1813C19.6792 20.1121 19.7136 20.0201 19.7103 19.9256C19.7275 19.7472 19.8089 19.5812 19.9394 19.4585C20.0699 19.3357 20.2406 19.2646 20.4196 19.2583C20.5987 19.252 20.7739 19.311 20.9127 19.4244C21.0514 19.5377 21.1443 19.6976 21.1739 19.8743C21.1567 20.0526 21.0753 20.2187 20.9448 20.3414C20.8143 20.4642 20.6436 20.5353 20.4646 20.5416C20.2855 20.5479 20.1103 20.4888 19.9715 20.3755C19.8328 20.2622 19.7399 20.1023 19.7103 19.9256C19.6705 19.4686 18.9446 19.4814 18.9975 19.9506Z' fill='#8254C6'/>\r\n<path d='M22.0515 18.2638C22.3501 18.689 22.5071 19.1976 22.5001 19.7172C22.4931 20.2368 22.3225 20.7409 22.0125 21.158C21.7451 21.5369 22.3817 21.8714 22.6491 21.4925C23.0205 20.9627 23.2209 20.3318 23.2233 19.6848C23.2257 19.0377 23.0301 18.4055 22.6626 17.8728C22.4072 17.4853 21.797 17.9032 22.051 18.2511L22.0515 18.2638Z' fill='#8254C6'/>\r\n<path d='M23.1008 17.5895C23.5557 18.1992 23.8006 18.9401 23.7987 19.7008C23.7967 20.4616 23.5481 21.2012 23.09 21.8086C22.8221 22.1748 23.3366 22.6666 23.6171 22.3C24.1841 21.5748 24.4998 20.6848 24.5165 19.7644C24.5331 18.844 24.2499 17.9431 23.7096 17.1978C23.4412 16.825 22.8439 17.2282 23.1004 17.5768L23.1008 17.5895Z' fill='#8254C6'/>\r\n<path d='M23.9956 16.6657C24.4178 17.0412 24.7541 17.5031 24.9819 18.0202C25.2096 18.5372 25.3234 19.0972 25.3155 19.6621C25.3076 20.227 25.1782 20.7835 24.9361 21.2939C24.694 21.8042 24.3448 22.2565 23.9124 22.62C23.5631 22.9256 24.0927 23.4193 24.4419 23.1113C24.9371 22.6772 25.3348 22.143 25.6086 21.544C25.8824 20.9451 26.0263 20.2949 26.0306 19.6363C26.0351 18.9773 25.8999 18.3249 25.6338 17.722C25.3678 17.1191 24.9769 16.5794 24.487 16.1386C24.1578 15.8187 23.6664 16.3458 23.9956 16.6657Z' fill='#8254C6'/>\r\n<path d='M18.2125 17.874C17.8831 18.4311 17.7321 19.0757 17.7798 19.7212C17.8275 20.3667 18.0716 20.982 18.4794 21.4847C18.7727 21.8439 19.3831 21.453 19.091 21.1064C18.7525 20.7121 18.5469 20.2212 18.5034 19.7034C18.4599 19.1856 18.5808 18.6672 18.8488 18.2221C19.09 17.8187 18.4534 17.4842 18.213 17.8875L18.2125 17.874Z' fill='#8254C6'/>\r\n<path d='M17.1708 17.261C16.6835 18.042 16.4635 18.9603 16.5439 19.8772C16.6244 20.7942 17.001 21.6602 17.6169 22.3443C17.9225 22.6904 18.4036 22.1637 18.1084 21.8172C17.6096 21.2428 17.3106 20.5221 17.2563 19.7633C17.202 19.0046 17.3953 18.2486 17.8071 17.6091C18.0475 17.2041 17.4117 16.8712 17.1705 17.2745L17.1708 17.261Z' fill='#8254C6'/>\r\n<path d='M16.2595 16.273C15.8018 16.747 15.4498 17.3128 15.2268 17.9328C15.0037 18.5529 14.9146 19.2132 14.9653 19.8702C15.016 20.5272 15.2055 21.166 15.5211 21.7445C15.8368 22.3229 16.2715 22.8279 16.7966 23.2261C17.1632 23.5066 17.6546 22.9795 17.288 22.699C16.8307 22.367 16.4503 21.9404 16.1726 21.4483C15.8949 20.9562 15.7264 20.4101 15.6785 19.8471C15.6307 19.2841 15.7046 18.7174 15.8952 18.1854C16.0859 17.6535 16.3888 17.1689 16.7835 16.7645C17.0903 16.4223 16.5758 15.9304 16.2595 16.273Z' fill='#8254C6'/>\r\n</svg>\r\n"
            },
            {
              value: "foot_ache",
              meaning: "\u062f\u0631\u062f \u067e\u0627",
              icon: "<svg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_150_476)'>\r\n<g clip-path='url(#clip1_150_476)'>\r\n<path d='M20.0212 2.70405C20.0212 2.70405 22.5744 16.5745 19.6677 23.7939C17.4091 29.3716 21.946 32.2761 23.4386 33.3285C24.9312 34.3809 27.5826 35.728 28.9771 35.4122C30.3715 35.1176 31.6677 35.4122 31.982 36.8013C32.2962 38.1905 28.4272 39.3902 26.2275 39.0745C24.0278 38.7799 21.7299 37.3486 19.9427 36.9908C18.1555 36.612 15.3469 37.8117 13.7365 38.0011C12.126 38.1905 9.27817 37.1802 10.9868 33.2864C12.6955 29.3925 11.8314 22.9309 11.3797 21.3523C10.9279 19.7738 4.91812 8.45008 10.0834 1.23071' stroke='#8254C6' stroke-miterlimit='10' stroke-linecap='round' stroke-linejoin='round'/>\r\n<path d='M13.9135 2.35144C13.9135 2.35144 16.1524 8.16632 15.3079 23.3438' stroke='#8254C6' stroke-miterlimit='10' stroke-linecap='round' stroke-linejoin='round'/>\r\n<path d='M11.4974 11.6507C11.4974 11.6507 12.9901 8.73275 14.8166 6.46558' stroke='#8254C6' stroke-miterlimit='10' stroke-linecap='round' stroke-linejoin='round'/>\r\n<path d='M17.8807 16.7309C17.8807 16.7309 17.3111 14.2749 15.3864 12.1757' stroke='#8254C6' stroke-miterlimit='10' stroke-linecap='round' stroke-linejoin='round'/>\r\n</g>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_150_476'>\r\n<rect width='40' height='40' fill='white'/>\r\n</clipPath>\r\n<clipPath id='clip1_150_476'>\r\n<rect width='26' height='39.8947' fill='white' transform='translate(7 0.230713)'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
            },
            {
              value: "nausea",
              meaning: "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639",
              icon: "\ud83e\udd2e"
            }
          ],
          current: [
            {
              value: "chest_pain",
              meaning:
                "\u062f\u0631\u062f \u0642\u0641\u0633\u0647 \u0633\u06cc\u0646\u0647",
              icon: "\ud83d\udc94"
            },
            {
              value: "stomach_ache",
              meaning: "\u062f\u0644\u200c\u062f\u0631\u062f",
              icon: "\ud83e\udd22"
            },
            {
              value: "headache",
              meaning: "\u0633\u0631\u062f\u0631\u062f",
              icon: "\ud83e\udd15"
            },
            {
              value: "contusion",
              meaning: "\u06a9\u0628\u0648\u062f\u06cc",
              icon: "\ud83e\ude79"
            },
            {
              value: "back_ache",
              meaning: "\u06a9\u0645\u0631\u062f\u0631\u062f",
              icon: "\ud83d\udeb6\u200d\u2642\ufe0f\ud83d\udca2"
            },
            {
              value: "nausea",
              meaning: "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639",
              icon: "\ud83e\udd2e"
            }
          ],
          psychological: [
            {
              value: "anxiety",
              meaning: "\u0627\u0636\u0637\u0631\u0627\u0628",
              icon: "<svg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M13 25.4335L15.3234 27.5665L18.1234 25L20.9234 27.5665L23.7234 25L27 28' stroke='#8254C6' stroke-width='1.5' stroke-linecap='round'/>\r\n<path d='M27.0323 18.3127C27.0323 17.9139 26.9141 17.5241 26.6925 17.1926C26.471 16.861 26.1561 16.6026 25.7877 16.45C25.4193 16.2974 25.0139 16.2575 24.6228 16.3352C24.2317 16.413 23.8725 16.6051 23.5905 16.887C23.3086 17.169 23.1165 17.5282 23.0387 17.9193C22.9609 18.3104 23.0009 18.7158 23.1535 19.0842C23.3061 19.4526 23.5645 19.7675 23.896 19.9891C24.2276 20.2106 24.6174 20.3288 25.0162 20.3288C25.5507 20.3284 26.0633 20.1158 26.4413 19.7378C26.8193 19.3598 27.0318 18.8472 27.0323 18.3127ZM24.345 18.3127C24.345 18.1797 24.3844 18.0498 24.4583 17.9393C24.5321 17.8288 24.6371 17.7426 24.7599 17.6918C24.8827 17.6409 25.0178 17.6276 25.1482 17.6535C25.2785 17.6795 25.3983 17.7435 25.4923 17.8375C25.5863 17.9314 25.6503 18.0512 25.6762 18.1816C25.7021 18.3119 25.6888 18.4471 25.6379 18.5699C25.5871 18.6927 25.5009 18.7976 25.3904 18.8715C25.2799 18.9453 25.15 18.9847 25.0171 18.9847C24.8389 18.9845 24.6681 18.9136 24.5421 18.7876C24.4161 18.6616 24.3452 18.4908 24.345 18.3127V18.3127Z' fill='#8254C6'/>\r\n<path d='M20.4554 5C17.3988 4.99982 14.4107 5.90607 11.8691 7.60413C9.32751 9.30219 7.34652 11.7158 6.17667 14.5397C5.00682 17.3637 4.70064 20.4711 5.29685 23.469C5.89307 26.467 7.3649 29.2208 9.52622 31.3822C11.6875 33.5437 14.4413 35.0157 17.4392 35.6121C20.4371 36.2085 23.5445 35.9025 26.3685 34.7328C29.1925 33.5631 31.6063 31.5822 33.3045 29.0407C35.0027 26.4992 35.9091 23.5112 35.9091 20.4545C35.9044 16.3573 34.2747 12.4293 31.3777 9.53206C28.4806 6.63482 24.5526 5.00495 20.4554 5V5ZM20.4554 34.565C17.6647 34.565 14.9366 33.7374 12.6161 32.1869C10.2957 30.6365 8.48708 28.4327 7.4191 25.8544C6.35111 23.276 6.07168 20.4389 6.61613 17.7017C7.16059 14.9646 8.50448 12.4503 10.4779 10.477C12.4512 8.50358 14.9655 7.15969 17.7026 6.61523C20.4398 6.07078 23.2769 6.35021 25.8553 7.4182C28.4336 8.48619 30.6374 10.2948 32.1878 12.6152C33.7383 14.9357 34.5659 17.6638 34.5659 20.4545C34.5619 24.1956 33.074 27.7824 30.4286 30.4277C27.7832 33.0731 24.1965 34.561 20.4554 34.565Z' fill='#8254C6'/>\r\n<path d='M17.0952 17.7673C17.0952 17.3685 16.9769 16.9787 16.7554 16.6471C16.5339 16.3156 16.219 16.0572 15.8506 15.9046C15.4822 15.752 15.0768 15.712 14.6857 15.7898C14.2946 15.8676 13.9353 16.0597 13.6534 16.3416C13.3714 16.6236 13.1794 16.9828 13.1016 17.3739C13.0238 17.765 13.0637 18.1704 13.2163 18.5388C13.3689 18.9072 13.6274 19.2221 13.9589 19.4436C14.2905 19.6652 14.6803 19.7834 15.079 19.7834C15.6136 19.783 16.1261 19.5704 16.5041 19.1924C16.8821 18.8144 17.0947 18.3018 17.0952 17.7673ZM14.4079 17.7673C14.4079 17.6343 14.4473 17.5044 14.5211 17.3939C14.595 17.2834 14.6999 17.1972 14.8227 17.1464C14.9455 17.0955 15.0807 17.0822 15.211 17.1081C15.3414 17.1341 15.4611 17.1981 15.5551 17.292C15.6491 17.386 15.7131 17.5058 15.7391 17.6361C15.765 17.7665 15.7517 17.9016 15.7008 18.0244C15.6499 18.1472 15.5638 18.2522 15.4533 18.3261C15.3428 18.3999 15.2128 18.4393 15.0799 18.4393C14.9018 18.4391 14.7309 18.3682 14.605 18.2422C14.479 18.1162 14.4081 17.9454 14.4079 17.7673V17.7673Z' fill='#8254C6'/>\r\n<path d='M27.4708 11.7898L24.7835 10.4457C24.6241 10.3659 24.4394 10.3527 24.2703 10.4091C24.1011 10.4654 23.9613 10.5866 23.8815 10.7461C23.8017 10.9055 23.7885 11.0901 23.8449 11.2593C23.9012 11.4284 24.0224 11.5683 24.1819 11.6481L26.8692 12.9922C27.0286 13.072 27.2132 13.0851 27.3824 13.0288C27.5516 12.9725 27.6914 12.8513 27.7712 12.6918C27.851 12.5324 27.8641 12.3478 27.8078 12.1786C27.7515 12.0094 27.6303 11.8696 27.4708 11.7898Z' fill='#8254C6'/>\r\n<path d='M13.7375 13.0626C13.8414 13.0625 13.9439 13.0384 14.037 12.9922L16.7243 11.6481C16.8838 11.5683 17.005 11.4284 17.0613 11.2593C17.1177 11.0901 17.1045 10.9055 17.0247 10.7461C16.9449 10.5866 16.8051 10.4654 16.6359 10.4091C16.4667 10.3527 16.2821 10.3659 16.1227 10.4457L13.4354 11.7907C13.3001 11.8585 13.1917 11.97 13.1277 12.1071C13.0637 12.2443 13.0478 12.399 13.0826 12.5462C13.1175 12.6935 13.201 12.8247 13.3197 12.9185C13.4384 13.0124 13.5853 13.0635 13.7366 13.0635L13.7375 13.0626Z' fill='#8254C6'/>\r\n</svg>\r\n"
            },
            {
              value: "depression",
              meaning: "\u0627\u0641\u0633\u0631\u062f\u06af\u06cc",
              icon: "<svg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M19.9991 4.54541C16.9425 4.54523 13.9544 5.45148 11.4128 7.14954C8.87121 8.8476 6.89023 11.2612 5.72037 14.0851C4.55052 16.9091 4.24434 20.0165 4.84055 23.0144C5.43677 26.0124 6.9086 28.7662 9.06992 30.9277C11.2312 33.0891 13.985 34.5611 16.9829 35.1575C19.9808 35.7539 23.0882 35.4479 25.9122 34.2782C28.7362 33.1085 31.15 31.1276 32.8482 28.5861C34.5464 26.0446 35.4528 23.0566 35.4528 20C35.4481 15.9028 33.8184 11.9747 30.9214 9.07747C28.0243 6.18023 24.0963 4.55036 19.9991 4.54541V4.54541ZM19.9991 34.1104C17.2084 34.1104 14.4803 33.2828 12.1598 31.7324C9.83936 30.1819 8.03078 27.9781 6.9628 25.3998C5.89481 22.8214 5.61538 19.9843 6.15983 17.2471C6.70429 14.51 8.04818 11.9957 10.0216 10.0224C11.9949 8.04899 14.5092 6.7051 17.2463 6.16064C19.9835 5.61619 22.8206 5.89562 25.399 6.96361C27.9773 8.0316 30.1811 9.84017 31.7315 12.1606C33.282 14.4811 34.1096 17.2092 34.1096 20C34.1056 23.741 32.6177 27.3278 29.9723 29.9731C27.327 32.6185 23.7402 34.1064 19.9991 34.1104Z' fill='#8254C6'/>\r\n<path d='M16.6389 17.3127C16.6389 16.9139 16.5206 16.5241 16.2991 16.1926C16.0776 15.861 15.7627 15.6026 15.3943 15.45C15.0259 15.2974 14.6205 15.2575 14.2294 15.3352C13.8383 15.413 13.479 15.6051 13.1971 15.887C12.9151 16.169 12.7231 16.5282 12.6453 16.9193C12.5675 17.3104 12.6074 17.7158 12.76 18.0842C12.9126 18.4526 13.1711 18.7675 13.5026 18.9891C13.8342 19.2106 14.224 19.3288 14.6227 19.3288C15.1573 19.3284 15.6698 19.1158 16.0478 18.7378C16.4258 18.3598 16.6384 17.8472 16.6389 17.3127ZM13.9516 17.3127C13.9516 17.1797 13.991 17.0498 14.0648 16.9393C14.1387 16.8288 14.2436 16.7426 14.3664 16.6918C14.4892 16.6409 14.6244 16.6276 14.7547 16.6535C14.8851 16.6795 15.0048 16.7435 15.0988 16.8375C15.1928 16.9314 15.2568 17.0512 15.2828 17.1816C15.3087 17.3119 15.2954 17.4471 15.2445 17.5699C15.1936 17.6927 15.1075 17.7976 14.997 17.8715C14.8865 17.9453 14.7565 17.9847 14.6236 17.9847C14.4455 17.9845 14.2746 17.9136 14.1487 17.7876C14.0227 17.6616 13.9518 17.4908 13.9516 17.3127V17.3127Z' fill='#8254C6'/>\r\n<path d='M25.3747 15.2965C24.8997 15.2955 24.4397 15.4626 24.0762 15.7683C23.7127 16.0739 23.4691 16.4984 23.3886 16.9665C23.3081 17.4346 23.3959 17.916 23.6364 18.3256C23.8769 18.7352 24.2546 19.0463 24.7026 19.204V21.3432C24.7026 21.5214 24.7734 21.6924 24.8995 21.8184C25.0255 21.9445 25.1964 22.0153 25.3747 22.0153C25.5529 22.0153 25.7239 21.9445 25.8499 21.8184C25.9759 21.6924 26.0467 21.5214 26.0467 21.3432V19.204C26.4948 19.0463 26.8725 18.7352 27.113 18.3256C27.3535 17.916 27.4413 17.4346 27.3608 16.9665C27.2803 16.4984 27.0367 16.0739 26.6732 15.7683C26.3096 15.4626 25.8496 15.2955 25.3747 15.2965V15.2965ZM25.3747 17.9838C25.2418 17.9838 25.1118 17.9444 25.0013 17.8706C24.8908 17.7967 24.8047 17.6918 24.7538 17.569C24.7029 17.4462 24.6896 17.311 24.7156 17.1807C24.7415 17.0503 24.8055 16.9306 24.8995 16.8366C24.9935 16.7426 25.1132 16.6786 25.2436 16.6526C25.3739 16.6267 25.5091 16.64 25.6319 16.6909C25.7547 16.7417 25.8596 16.8279 25.9335 16.9384C26.0073 17.0489 26.0467 17.1789 26.0467 17.3118C26.0465 17.4899 25.9756 17.6608 25.8496 17.7867C25.7237 17.9127 25.5528 17.9836 25.3747 17.9838V17.9838Z' fill='#8254C6'/>\r\n<path d='M19.9987 23.3594C18.7641 23.3576 17.543 23.6159 16.4148 24.1174C15.2867 24.619 14.2769 25.3526 13.4511 26.2704C13.3902 26.3358 13.3429 26.4127 13.312 26.4966C13.2811 26.5804 13.2673 26.6696 13.2713 26.7589C13.2753 26.8482 13.2971 26.9358 13.3354 27.0166C13.3737 27.0973 13.4277 27.1696 13.4943 27.2293C13.5608 27.2889 13.6386 27.3347 13.7231 27.3639C13.8076 27.3931 13.897 27.4051 13.9862 27.3993C14.0754 27.3936 14.1626 27.37 14.2426 27.3301C14.3225 27.2903 14.3938 27.2348 14.4521 27.1671C15.1529 26.3914 16.0087 25.7714 16.9641 25.347C17.9195 24.9226 18.9533 24.7033 19.9987 24.7033C21.0442 24.7033 22.078 24.9226 23.0334 25.347C23.9888 25.7714 24.8445 26.3914 25.5454 27.1671C25.6037 27.2348 25.6749 27.2903 25.7549 27.3301C25.8349 27.37 25.9221 27.3936 26.0112 27.3993C26.1004 27.4051 26.1899 27.3931 26.2744 27.3639C26.3588 27.3347 26.4366 27.2889 26.5032 27.2293C26.5698 27.1696 26.6238 27.0973 26.6621 27.0166C26.7004 26.9358 26.7222 26.8482 26.7262 26.7589C26.7302 26.6696 26.7164 26.5804 26.6855 26.4966C26.6546 26.4127 26.6073 26.3358 26.5464 26.2704C25.7205 25.3527 24.7107 24.6192 23.5826 24.1176C22.4545 23.616 21.2333 23.3577 19.9987 23.3594V23.3594Z' fill='#8254C6'/>\r\n<path d='M27.0145 11.3352L24.3272 9.99111C24.1678 9.91132 23.9831 9.89815 23.814 9.95448C23.6448 10.0108 23.505 10.132 23.4252 10.2915C23.3454 10.4509 23.3322 10.6355 23.3886 10.8047C23.4449 10.9739 23.5661 11.1137 23.7256 11.1935L26.4129 12.5376C26.5723 12.6174 26.7569 12.6306 26.9261 12.5742C27.0953 12.5179 27.2351 12.3967 27.3149 12.2372C27.3947 12.0778 27.4079 11.8932 27.3515 11.724C27.2952 11.5548 27.174 11.415 27.0145 11.3352Z' fill='#8254C6'/>\r\n<path d='M13.2812 12.608C13.3851 12.6079 13.4876 12.5838 13.5807 12.5376L16.268 11.1935C16.4275 11.1137 16.5487 10.9738 16.605 10.8047C16.6614 10.6355 16.6482 10.4509 16.5684 10.2915C16.4886 10.132 16.3488 10.0108 16.1796 9.95448C16.0104 9.89815 15.8258 9.91132 15.6664 9.99111L12.9791 11.3361C12.8438 11.4039 12.7354 11.5154 12.6714 11.6526C12.6074 11.7897 12.5915 11.9444 12.6263 12.0916C12.6612 12.2389 12.7447 12.3701 12.8634 12.464C12.9821 12.5578 13.129 12.6089 13.2803 12.6089L13.2812 12.608Z' fill='#8254C6'/>\r\n</svg>\r\n"
            },
            {
              value: "mood_swings",
              meaning:
                "\u0646\u0648\u0633\u0627\u0646\u0627\u062a \u062e\u0644\u0642\u06cc",
              icon: "<svg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M19.9987 23.3594C18.7641 23.3576 17.543 23.6159 16.4148 24.1174C15.2867 24.619 14.2769 25.3526 13.4511 26.2704C13.3902 26.3358 13.3429 26.4127 13.312 26.4966C13.2811 26.5804 13.2673 26.6696 13.2713 26.7589C13.2753 26.8482 13.2971 26.9358 13.3354 27.0166C13.3737 27.0973 13.4277 27.1696 13.4943 27.2293C13.5608 27.2889 13.6386 27.3347 13.7231 27.3639C13.8076 27.3931 13.897 27.4051 13.9862 27.3993C14.0754 27.3936 14.1626 27.37 14.2426 27.3301C14.3225 27.2903 14.3938 27.2348 14.4521 27.1671C15.1529 26.3914 16.0087 25.7714 16.9641 25.347C17.9195 24.9226 18.9533 24.7033 19.9987 24.7033C21.0442 24.7033 22.078 24.9226 23.0334 25.347C23.9888 25.7714 24.8445 26.3914 25.5454 27.1671C25.6037 27.2348 25.6749 27.2903 25.7549 27.3301C25.8349 27.37 25.9221 27.3936 26.0112 27.3993C26.1004 27.4051 26.1899 27.3931 26.2744 27.3639C26.3588 27.3347 26.4366 27.2889 26.5032 27.2293C26.5698 27.1696 26.6238 27.0973 26.6621 27.0166C26.7004 26.9358 26.7222 26.8482 26.7262 26.7589C26.7302 26.6696 26.7164 26.5804 26.6855 26.4966C26.6546 26.4127 26.6073 26.3358 26.5464 26.2704C25.7206 25.3526 24.7108 24.619 23.5826 24.1174C22.4545 23.6159 21.2334 23.3576 19.9987 23.3594Z' fill='#8254C6'/>\r\n<path d='M19.9991 4.54541C16.9425 4.54523 13.9544 5.45148 11.4128 7.14954C8.87121 8.8476 6.89023 11.2612 5.72037 14.0851C4.55052 16.9091 4.24434 20.0165 4.84055 23.0144C5.43677 26.0124 6.9086 28.7662 9.06992 30.9277C11.2312 33.0891 13.985 34.5611 16.9829 35.1575C19.9808 35.7539 23.0882 35.4479 25.9122 34.2782C28.7362 33.1085 31.15 31.1276 32.8482 28.5861C34.5464 26.0446 35.4528 23.0566 35.4528 20C35.4481 15.9028 33.8184 11.9747 30.9214 9.07747C28.0243 6.18023 24.0963 4.55036 19.9991 4.54541V4.54541ZM19.9991 34.1104C17.2084 34.1104 14.4803 33.2828 12.1598 31.7324C9.83936 30.1819 8.03078 27.9781 6.9628 25.3998C5.89481 22.8214 5.61538 19.9843 6.15983 17.2471C6.70429 14.51 8.04818 11.9957 10.0216 10.0224C11.9949 8.04899 14.5092 6.7051 17.2463 6.16064C19.9835 5.61619 22.8206 5.89562 25.399 6.96361C27.9773 8.0316 30.1811 9.84017 31.7315 12.1606C33.282 14.4811 34.1096 17.2092 34.1096 20C34.1056 23.741 32.6177 27.3278 29.9723 29.9731C27.327 32.6185 23.7402 34.1064 19.9991 34.1104Z' fill='#8254C6'/>\r\n<path d='M17.9827 17.3124C17.9827 17.1875 17.9479 17.0651 17.8823 16.9588C17.8167 16.8526 17.7227 16.7667 17.6111 16.7108L12.2355 14.0235C12.0761 13.9437 11.8915 13.9305 11.7223 13.9868C11.5531 14.0432 11.4133 14.1644 11.3335 14.3238C11.2537 14.4833 11.2406 14.6679 11.2969 14.837C11.3532 15.0062 11.4744 15.1461 11.6339 15.2258L15.8079 17.3133L11.6348 19.3999C11.5558 19.4393 11.4854 19.4939 11.4276 19.5606C11.3697 19.6272 11.3256 19.7046 11.2976 19.7884C11.2697 19.8721 11.2585 19.9605 11.2648 20.0485C11.271 20.1365 11.2945 20.2225 11.334 20.3014C11.3734 20.3804 11.428 20.4508 11.4947 20.5086C11.5613 20.5665 11.6387 20.6106 11.7224 20.6386C11.8062 20.6665 11.8946 20.6777 11.9826 20.6715C12.0706 20.6652 12.1566 20.6417 12.2355 20.6023L17.6111 17.9149C17.7229 17.859 17.8169 17.7729 17.8825 17.6665C17.9482 17.5601 17.9829 17.4375 17.9827 17.3124V17.3124Z' fill='#8254C6'/>\r\n<path d='M28.3624 19.3979L24.1884 17.3114L28.3615 15.2248C28.521 15.1451 28.6422 15.0054 28.6986 14.8363C28.7551 14.6672 28.742 14.4827 28.6623 14.3232C28.5827 14.1638 28.4429 14.0425 28.2738 13.9861C28.1048 13.9297 27.9202 13.9427 27.7608 14.0224L22.3852 16.7097C22.2736 16.7655 22.1796 16.8513 22.114 16.9575C22.0483 17.0637 22.0135 17.1861 22.0135 17.3109C22.0135 17.4358 22.0483 17.5581 22.114 17.6643C22.1796 17.7705 22.2736 17.8563 22.3852 17.9121L27.7608 20.5994C27.9202 20.6792 28.1048 20.6924 28.274 20.6361C28.4431 20.5797 28.583 20.4585 28.6628 20.2991C28.7426 20.1396 28.7557 19.955 28.6994 19.7858C28.6431 19.6167 28.5218 19.4768 28.3624 19.397V19.3979Z' fill='#8254C6'/>\r\n</svg>\r\n"
            },
            {
              value: "anger",
              meaning: "\u062e\u0634\u0645",
              icon: "<svg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M19.9991 4.54541C16.9425 4.54523 13.9544 5.45148 11.4128 7.14954C8.87121 8.8476 6.89023 11.2612 5.72037 14.0851C4.55052 16.9091 4.24434 20.0165 4.84055 23.0144C5.43677 26.0124 6.9086 28.7662 9.06992 30.9277C11.2312 33.0891 13.985 34.5611 16.9829 35.1575C19.9808 35.7539 23.0882 35.4479 25.9122 34.2782C28.7362 33.1085 31.15 31.1276 32.8482 28.5861C34.5464 26.0446 35.4528 23.0566 35.4528 20C35.4481 15.9028 33.8184 11.9747 30.9214 9.07747C28.0243 6.18023 24.0963 4.55036 19.9991 4.54541V4.54541ZM19.9991 34.1104C17.2084 34.1104 14.4803 33.2828 12.1598 31.7324C9.83936 30.1819 8.03078 27.9781 6.9628 25.3998C5.89481 22.8214 5.61538 19.9843 6.15983 17.2471C6.70429 14.51 8.04818 11.9957 10.0216 10.0224C11.9949 8.04899 14.5092 6.7051 17.2463 6.16064C19.9835 5.61619 22.8206 5.89562 25.399 6.96361C27.9773 8.0316 30.1811 9.84017 31.7315 12.1606C33.282 14.4811 34.1096 17.2092 34.1096 20C34.1056 23.741 32.6177 27.3278 29.9723 29.9731C27.327 32.6185 23.7402 34.1064 19.9991 34.1104Z' fill='#8254C6'/>\r\n<path d='M16.6389 18.6568C16.6389 18.258 16.5206 17.8682 16.2991 17.5367C16.0776 17.2051 15.7627 16.9467 15.3943 16.7941C15.0259 16.6415 14.6205 16.6016 14.2294 16.6794C13.8383 16.7572 13.479 16.9492 13.1971 17.2311C12.9151 17.5131 12.7231 17.8724 12.6453 18.2635C12.5675 18.6546 12.6074 19.0599 12.76 19.4283C12.9126 19.7967 13.1711 20.1116 13.5026 20.3332C13.8342 20.5547 14.224 20.673 14.6227 20.673C15.1573 20.6725 15.6698 20.4599 16.0478 20.0819C16.4258 19.7039 16.6384 19.1914 16.6389 18.6568ZM13.9516 18.6568C13.9516 18.5239 13.991 18.3939 14.0648 18.2834C14.1387 18.1729 14.2436 18.0868 14.3664 18.0359C14.4892 17.985 14.6244 17.9717 14.7547 17.9977C14.8851 18.0236 15.0048 18.0876 15.0988 18.1816C15.1928 18.2756 15.2568 18.3953 15.2828 18.5257C15.3087 18.656 15.2954 18.7912 15.2445 18.914C15.1936 19.0368 15.1075 19.1417 14.997 19.2156C14.8865 19.2894 14.7565 19.3288 14.6236 19.3288C14.4455 19.3286 14.2746 19.2577 14.1487 19.1317C14.0227 19.0058 13.9518 18.835 13.9516 18.6568V18.6568Z' fill='#8254C6'/>\r\n<path d='M25.3755 16.6406C24.9768 16.6406 24.587 16.7589 24.2554 16.9804C23.9239 17.2019 23.6654 17.5168 23.5128 17.8852C23.3603 18.2536 23.3203 18.659 23.3981 19.0501C23.4759 19.4412 23.6679 19.8005 23.9499 20.0824C24.2319 20.3644 24.5911 20.5564 24.9822 20.6342C25.3733 20.712 25.7787 20.6721 26.1471 20.5195C26.5155 20.3669 26.8304 20.1085 27.0519 19.7769C27.2735 19.4454 27.3917 19.0555 27.3917 18.6568C27.3912 18.1222 27.1787 17.6097 26.8007 17.2317C26.4227 16.8537 25.9101 16.6411 25.3755 16.6406V16.6406ZM25.3755 19.3279C25.2426 19.3279 25.1127 19.2885 25.0022 19.2147C24.8916 19.1408 24.8055 19.0359 24.7546 18.9131C24.7038 18.7903 24.6905 18.6552 24.7164 18.5248C24.7423 18.3944 24.8063 18.2747 24.9003 18.1807C24.9943 18.0867 25.1141 18.0227 25.2444 17.9967C25.3748 17.9708 25.5099 17.9841 25.6327 18.035C25.7555 18.0859 25.8605 18.172 25.9343 18.2825C26.0082 18.393 26.0476 18.523 26.0476 18.6559C26.0474 18.8341 25.9765 19.0049 25.8505 19.1308C25.7245 19.2568 25.5537 19.3277 25.3755 19.3279V19.3279Z' fill='#8254C6'/>\r\n<path d='M22.6865 13.9521C22.7904 13.9521 22.8929 13.928 22.986 13.8817L25.6733 12.5376C25.7523 12.4981 25.8227 12.4434 25.8805 12.3767C25.9383 12.31 25.9824 12.2326 26.0103 12.1488C26.0382 12.065 26.0493 11.9766 26.043 11.8886C26.0367 11.8005 26.0132 11.7145 25.9737 11.6356C25.9342 11.5566 25.8795 11.4862 25.8128 11.4284C25.7461 11.3706 25.6686 11.3265 25.5849 11.2986C25.5011 11.2707 25.4127 11.2596 25.3246 11.2659C25.2366 11.2721 25.1506 11.2957 25.0717 11.3352L22.3843 12.6793C22.2491 12.7472 22.1407 12.8587 22.0766 12.9958C22.0126 13.1329 21.9968 13.2876 22.0316 13.4349C22.0665 13.5821 22.15 13.7133 22.2687 13.8072C22.3874 13.9011 22.5343 13.9521 22.6856 13.9521H22.6865Z' fill='#8254C6'/>\r\n<path d='M14.3238 12.5385L17.0111 13.8826C17.1706 13.9624 17.3552 13.9755 17.5244 13.9192C17.6935 13.8629 17.8334 13.7416 17.9132 13.5822C17.9929 13.4228 18.0061 13.2381 17.9498 13.069C17.8935 12.8998 17.7722 12.76 17.6128 12.6802L14.9255 11.3361C14.766 11.2563 14.5814 11.2431 14.4122 11.2995C14.2431 11.3558 14.1032 11.477 14.0235 11.6364C13.9437 11.7959 13.9305 11.9805 13.9868 12.1497C14.0432 12.3188 14.1644 12.4587 14.3238 12.5385V12.5385Z' fill='#8254C6'/>\r\n<path d='M19.9987 23.3594C18.7641 23.3576 17.543 23.6159 16.4148 24.1174C15.2867 24.619 14.2769 25.3526 13.4511 26.2704C13.3902 26.3358 13.3429 26.4127 13.312 26.4966C13.2811 26.5804 13.2673 26.6696 13.2713 26.7589C13.2753 26.8482 13.2971 26.9358 13.3354 27.0166C13.3737 27.0973 13.4277 27.1696 13.4943 27.2293C13.5608 27.2889 13.6386 27.3347 13.7231 27.3639C13.8076 27.3931 13.897 27.4051 13.9862 27.3993C14.0754 27.3936 14.1626 27.37 14.2426 27.3301C14.3225 27.2903 14.3938 27.2348 14.4521 27.1671C15.1529 26.3914 16.0087 25.7714 16.9641 25.347C17.9195 24.9226 18.9533 24.7033 19.9987 24.7033C21.0442 24.7033 22.078 24.9226 23.0334 25.347C23.9888 25.7714 24.8445 26.3914 25.5454 27.1671C25.6037 27.2348 25.6749 27.2903 25.7549 27.3301C25.8349 27.37 25.9221 27.3936 26.0112 27.3993C26.1004 27.4051 26.1899 27.3931 26.2744 27.3639C26.3588 27.3347 26.4366 27.2889 26.5032 27.2293C26.5698 27.1696 26.6238 27.0973 26.6621 27.0166C26.7004 26.9358 26.7222 26.8482 26.7262 26.7589C26.7302 26.6696 26.7164 26.5804 26.6855 26.4966C26.6546 26.4127 26.6073 26.3358 26.5464 26.2704C25.7206 25.3526 24.7107 24.6191 23.5826 24.1175C22.4545 23.6159 21.2333 23.3576 19.9987 23.3594Z' fill='#8254C6'/>\r\n</svg>\r\n"
            }
          ],
          womens: [
            {
              value: "uterineCancer",
              meaning: "\u0633\u0631\u0637\u0627\u0646 \u0631\u062d\u0645",
              icon: "\ud83c\udf97"
            },
            {
              value: "ovarianCancer",
              meaning:
                "\u0633\u0631\u0637\u0627\u0646 \u062a\u062e\u0645\u062f\u0627\u0646",
              icon: "\ud83c\udf97"
            },
            {
              value: "breastCancer",
              meaning:
                "\u0633\u0631\u0637\u0627\u0646 \u0633\u06cc\u0646\u0647",
              icon: "\ud83c\udf97"
            },
            {
              value: "uterineAdhesions",
              meaning:
                "\u0686\u0633\u0628\u0646\u062f\u06af\u06cc \u0631\u062d\u0645",
              icon: "\ud83c\udfe5"
            },
            {
              value: "ovarianCyst",
              meaning:
                "\u06a9\u06cc\u0633\u062a \u062a\u062e\u0645\u062f\u0627\u0646",
              icon: "\u2695\ufe0f"
            },
            {
              value: "ovarianLaziness",
              meaning:
                "\u06a9\u0645\u200c\u06a9\u0627\u0631\u06cc \u062a\u062e\u0645\u062f\u0627\u0646",
              icon: "\ud83e\ude7a"
            },
            {
              value: "uterineFibroids",
              meaning:
                "\u0641\u06cc\u0628\u0631\u0648\u0645 \u0631\u062d\u0645\u06cc",
              icon: "\ud83c\udfe5"
            },
            {
              value: "vaginalInfection",
              meaning:
                "\u0639\u0641\u0648\u0646\u062a \u0648\u0627\u0698\u0646",
              icon: "\ud83d\udd2c"
            },
            {
              value: "uterinePolyp",
              meaning: "\u067e\u0648\u0644\u06cc\u067e \u0631\u062d\u0645",
              icon: "\ud83c\udfe5"
            },
            {
              value: "vaginalDryness",
              meaning: "\u062e\u0634\u06a9\u06cc \u0648\u0627\u0698\u0646",
              icon: "\ud83c\udf35"
            },
            {
              value: "uterineProlapse",
              meaning:
                "\u0627\u0641\u062a\u0627\u062f\u06af\u06cc \u0631\u062d\u0645",
              icon: "\u2695\ufe0f"
            },
            {
              value: "endometriosis",
              meaning:
                "\u0627\u0646\u062f\u0648\u0645\u062a\u0631\u06cc\u0648\u0632",
              icon: "\ud83c\udfe5"
            }
          ],
          hereditary: [
            {
              value: "downSyndrome",
              meaning:
                "\u0633\u0646\u062f\u0631\u0645 \u062f\u0627\u0648\u0646",
              icon: "\ud83d\udc76"
            },
            {
              value: "hemophilia",
              meaning: "\u0647\u0645\u0648\u0641\u06cc\u0644\u06cc",
              icon: "\ud83e\ude78"
            },
            {
              value: "sickleCellAnemia",
              meaning:
                "\u06a9\u0645\u200c\u062e\u0648\u0646\u06cc \u062f\u0627\u0633\u06cc\u200c\u0634\u06a9\u0644",
              icon: "\ud83e\ude78"
            },
            {
              value: "celiacDisease",
              meaning:
                "\u0628\u06cc\u0645\u0627\u0631\u06cc \u0633\u0644\u06cc\u0627\u06a9",
              icon: "\ud83c\udf3e\ud83d\udeab"
            },
            {
              value: "homocystinuria",
              meaning:
                "\u0647\u0648\u0645\u0648\u0633\u06cc\u0633\u062a\u06cc\u0646\u0648\u0631\u06cc\u0627",
              icon: "\ud83c\udfe5"
            },
            {
              value: "crohnsDisease",
              meaning:
                "\u0628\u06cc\u0645\u0627\u0631\u06cc \u06a9\u0631\u0648\u0646",
              icon: "\ud83c\udfe5"
            },
            {
              value: "cysticFibrosis",
              meaning:
                "\u0641\u06cc\u0628\u0631\u0648\u0632 \u06a9\u06cc\u0633\u062a\u06cc\u06a9",
              icon: "\ud83e\udec1"
            },
            {
              value: "birthDefects",
              meaning:
                "\u0646\u0642\u0627\u06cc\u0635 \u0645\u0627\u062f\u0631\u0632\u0627\u062f\u06cc",
              icon: "\ud83d\udc76\u26a0\ufe0f"
            },
            {
              value: "alzheimersDisease",
              meaning: "\u0622\u0644\u0632\u0627\u06cc\u0645\u0631",
              icon: "\ud83e\udde0"
            },
            {
              value: "hypothyroidism",
              meaning:
                "\u06a9\u0645\u200c\u06a9\u0627\u0631\u06cc \u062a\u06cc\u0631\u0648\u0626\u06cc\u062f",
              icon: "\ud83e\udd8b"
            },
            {
              value: "multipleSclerosis",
              meaning: "\u0627\u0645\u200c\u0627\u0633 (MS)",
              icon: "\ud83e\udde0"
            },
            {
              value: "colorBlindness",
              meaning: "\u06a9\u0648\u0631\u0631\u0646\u06af\u06cc",
              icon: "\ud83c\udfa8\ud83d\udeab"
            },
            {
              value: "albinism",
              meaning: "\u0632\u0627\u0644\u200c\u0628\u0648\u062f\u0646",
              icon: "\u26aa"
            },
            {
              value: "thalassemia",
              meaning: "\u062a\u0627\u0644\u0627\u0633\u0645\u06cc",
              icon: "\ud83e\ude78"
            },
            {
              value: "epilepsy",
              meaning: "\u0635\u0631\u0639",
              icon: "\u26a1"
            },
            {
              value: "hypertension",
              meaning:
                "\u0641\u0634\u0627\u0631 \u062e\u0648\u0646 \u0628\u0627\u0644\u0627",
              icon: "\ud83d\udc93"
            },
            {
              value: "diabetes",
              meaning: "\u062f\u06cc\u0627\u0628\u062a",
              icon: "\ud83c\udf6d\ud83d\udeab"
            },
            {
              value: "obesity",
              meaning: "\u0686\u0627\u0642\u06cc",
              icon: "\u2696\ufe0f"
            }
          ],
          venereal: [
            {
              value: "chlamydia",
              meaning: "\u06a9\u0644\u0627\u0645\u06cc\u062f\u06cc\u0627",
              icon: "\ud83e\udda0"
            },
            {
              value: "pubicLice",
              meaning:
                "\u0634\u067e\u0634 \u0646\u0627\u062d\u06cc\u0647 \u062a\u0646\u0627\u0633\u0644\u06cc",
              icon: "\ud83d\udc1b"
            },
            {
              value: "genitalHerpes",
              meaning:
                "\u062a\u0628\u062e\u0627\u0644 \u062a\u0646\u0627\u0633\u0644\u06cc",
              icon: "\ud83e\udda0"
            },
            {
              value: "hepatitisB",
              meaning: "\u0647\u067e\u0627\u062a\u06cc\u062a B",
              icon: "\ud83e\ude7a"
            },
            {
              value: "trichomoniasis",
              meaning:
                "\u062a\u0631\u06cc\u06a9\u0648\u0645\u0648\u0646\u06cc\u0627\u0632\u06cc\u0633",
              icon: "\ud83e\udda0"
            },
            {
              value: "hiv",
              meaning:
                "\u0627\u0686\u200c\u0622\u06cc\u200c\u0648\u06cc / \u0627\u06cc\u062f\u0632",
              icon: "\ud83e\ude78"
            },
            {
              value: "genitalWarts",
              meaning:
                "\u0632\u06af\u06cc\u0644 \u062a\u0646\u0627\u0633\u0644\u06cc",
              icon: "\ud83e\udda0"
            },
            {
              value: "molluscumContagiosum",
              meaning: "\u0645\u0648\u0644\u0648\u0633\u06a9\u0648\u0645",
              icon: "\ud83e\udda0"
            },
            {
              value: "genitalScabies",
              meaning:
                "\u06af\u0627\u0644 \u062a\u0646\u0627\u0633\u0644\u06cc",
              icon: "\ud83e\udda0"
            },
            {
              value: "syphilis",
              meaning: "\u0633\u06cc\u0641\u0644\u06cc\u0633",
              icon: "\ud83e\udda0"
            },
            {
              value: "gonorrhea",
              meaning: "\u0633\u0648\u0632\u0627\u06a9",
              icon: "\ud83e\udda0"
            },
            {
              value: "chancroid",
              meaning: "\u0634\u0627\u0646\u06a9\u0631\u0648\u0626\u06cc\u062f",
              icon: "\ud83e\udda0"
            }
          ],
          vaginal: [
            {
              value: "watery",
              meaning: "\u0622\u0628\u06a9\u06cc",
              icon: "<svg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M15.0005 26.1784C19.9844 26.1784 22.7292 23.2502 22.7292 17.9343C22.7311 12.9562 15.6847 5.04208 15.3887 4.7082C15.3391 4.65647 15.2796 4.6153 15.2137 4.58718C15.1479 4.55905 15.077 4.54456 15.0053 4.54456C14.9337 4.54456 14.8628 4.55905 14.7969 4.58718C14.731 4.6153 14.6715 4.65647 14.6219 4.7082C14.3211 5.04208 7.27271 12.9562 7.27271 17.9343C7.27271 23.2511 10.0175 26.1784 15.0014 26.1784H15.0005ZM15.0005 5.83795C16.4757 7.56947 21.6975 13.9763 21.6975 17.9333C21.6975 21.2246 20.5328 25.1476 15.0005 25.1476C9.46816 25.1476 8.30346 21.2246 8.30346 17.9333C8.30346 13.9772 13.5262 7.56947 15.0005 5.83892V5.83795Z' fill='#8254C6'/>\r\n<path d='M29.4287 27.2093C32.3764 27.2093 34.0661 25.2429 34.0661 21.8119C34.0661 18.5905 29.979 14.1627 29.8063 13.9764C29.7569 13.9266 29.6982 13.8871 29.6334 13.8601C29.5687 13.8331 29.4993 13.8192 29.4292 13.8192C29.3591 13.8192 29.2896 13.8331 29.2249 13.8601C29.1602 13.8871 29.1015 13.9266 29.0521 13.9764C28.8784 14.1637 24.7922 18.5915 24.7922 21.8119C24.7913 25.2419 26.4811 27.2093 29.4287 27.2093ZM29.4287 15.1052C30.4226 16.2611 33.0354 19.5203 33.0354 21.8119C33.0354 24.7091 31.8222 26.1795 29.4287 26.1795C27.0353 26.1795 25.822 24.71 25.822 21.8119C25.822 19.5203 28.4348 16.2602 29.4287 15.1052Z' fill='#8254C6'/>\r\n<path d='M21.8301 25.3219C21.6991 25.4704 18.6097 28.9994 18.6097 31.3308C18.6097 33.9513 19.9249 35.4528 22.2164 35.4528C24.508 35.4528 25.8231 33.9504 25.8231 31.3308C25.8231 29.0014 22.7337 25.4704 22.6027 25.3219C22.553 25.2688 22.4928 25.2264 22.4261 25.1975C22.3593 25.1685 22.2873 25.1536 22.2145 25.1536C22.1417 25.1536 22.0697 25.1685 22.0029 25.1975C21.9361 25.2264 21.876 25.2688 21.8262 25.3219H21.8301ZM22.2184 34.423C20.5092 34.423 19.6424 33.3826 19.6424 31.3317C19.6424 29.9312 21.2546 27.6513 22.2184 26.4633C23.1831 27.6484 24.7943 29.9293 24.7943 31.3317C24.7933 33.3826 23.9256 34.423 22.2164 34.423H22.2184Z' fill='#8254C6'/>\r\n<path d='M13.9194 24.1147H13.9709C14.1025 24.1138 14.2289 24.0626 14.324 23.9716C14.4192 23.8806 14.4758 23.7566 14.4824 23.625C14.489 23.4935 14.445 23.3645 14.3594 23.2644C14.2739 23.1643 14.1532 23.1008 14.0223 23.0868C13.4901 23.0602 12.9697 22.9212 12.4951 22.6789C12.0205 22.4367 11.6025 22.0967 11.2688 21.6814C9.89832 19.8946 10.3525 17.0139 10.3564 16.9857C10.3737 16.8533 10.3389 16.7193 10.2594 16.612C10.1798 16.5046 10.0617 16.4324 9.92989 16.4105C9.79811 16.3886 9.66297 16.4188 9.55297 16.4946C9.44297 16.5704 9.36669 16.6859 9.34023 16.8169C9.31694 16.9527 8.80641 20.1586 10.4477 22.3045C10.8651 22.8349 11.3905 23.2705 11.989 23.5824C12.5876 23.8943 13.2456 24.0754 13.9194 24.1137V24.1147Z' fill='#8254C6'/>\r\n<path d='M28.9144 25.1514C29.8663 25.1381 30.774 24.7475 31.4379 24.0653C31.7212 23.7009 31.9189 23.2776 32.0165 22.8265C32.1141 22.3754 32.1091 21.9082 32.0018 21.4593C31.9758 21.3278 31.8996 21.2117 31.7894 21.1355C31.6791 21.0593 31.5435 21.029 31.4113 21.0511C31.2792 21.0732 31.1608 21.1459 31.0813 21.2538C31.0018 21.3617 30.9675 21.4964 30.9856 21.6291C31.0635 21.9297 31.0742 22.2437 31.017 22.5488C30.9598 22.8539 30.8361 23.1427 30.6547 23.3946C30.1885 23.8481 29.5675 24.1076 28.9173 24.1206C28.7806 24.1206 28.6496 24.1749 28.5529 24.2716C28.4563 24.3682 28.402 24.4993 28.402 24.636C28.402 24.7727 28.4563 24.9038 28.5529 25.0004C28.6496 25.0971 28.7806 25.1514 28.9173 25.1514H28.9144Z' fill='#8254C6'/>\r\n<path d='M21.931 32.416C21.8516 32.3839 21.7801 32.335 21.7215 32.2726C21.6629 32.2102 21.6185 32.1358 21.5915 32.0546C21.5644 31.9734 21.5553 31.8872 21.5649 31.8022C21.5744 31.7171 21.6023 31.6351 21.6466 31.5619C21.7077 31.4396 21.7178 31.2981 21.6746 31.1684C21.6313 31.0387 21.5384 30.9315 21.4161 30.8703C21.2938 30.8092 21.1523 30.7991 21.0226 30.8424C20.8929 30.8856 20.7857 30.9786 20.7245 31.1008C20.6197 31.2956 20.5559 31.5097 20.5369 31.73C20.5179 31.9503 20.5441 32.1722 20.6141 32.382C20.684 32.5918 20.796 32.7852 20.9434 32.9501C21.0907 33.115 21.2703 33.248 21.4709 33.3409C21.5932 33.4021 21.7347 33.4121 21.8644 33.3689C21.9941 33.3257 22.1013 33.2327 22.1625 33.1104C22.2236 32.9881 22.2336 32.8466 22.1904 32.7169C22.1472 32.5872 22.0542 32.48 21.9319 32.4189L21.931 32.416Z' fill='#8254C6'/>\r\n</svg>\r\n"
            },
            {
              value: "egg",
              meaning: "\u062a\u062e\u0645 \u0645\u0631\u063a\u06cc",
              icon: "<svg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M20.0655 33.6364C17.1916 33.6274 14.4352 32.495 12.3849 30.4811C10.3347 28.4672 9.15316 25.7314 9.09277 22.8582C9.32515 22.6698 9.61261 22.5624 9.91155 22.5522C10.1974 22.5599 10.4725 22.6633 10.6926 22.8459C10.7408 25.3196 11.765 27.6739 13.542 29.3955C15.319 31.1171 17.7045 32.0664 20.1785 32.0364C22.6525 32.0063 25.0143 30.9994 26.7489 29.2352C28.4835 27.4709 29.4503 25.0924 29.4385 22.6183C29.2634 19.2837 28.2776 16.0421 26.5666 13.1745C25.6544 11.6068 23.1933 7.96059 20.0655 7.96059C16.9377 7.96059 14.4757 11.6097 13.5606 13.1773C12.5822 14.872 11.8234 16.6844 11.3026 18.5707C11.012 18.7715 10.668 18.881 10.3148 18.8852C10.0736 18.8828 9.83502 18.8341 9.61218 18.7416C10.1658 16.5085 11.0305 14.3642 12.1809 12.3718C14.4351 8.49794 17.2352 6.36365 20.0655 6.36365C22.8958 6.36365 25.6921 8.49794 27.9464 12.3718C29.7946 15.4848 30.8556 19.0016 31.0373 22.6174C31.0403 25.5325 29.8868 28.3299 27.8299 30.3956C25.773 32.4614 22.9807 33.6269 20.0655 33.6364V33.6364ZM25.1472 17.7056C24.6259 17.7056 24.2028 17.0701 24.2028 16.2891C24.2028 15.5081 24.6269 14.8725 25.1472 14.8725C25.6676 14.8725 26.0916 15.5081 26.0916 16.2891C26.0916 17.0701 25.6657 17.7056 25.1472 17.7056ZM22.7863 13.9281C22.5061 13.9281 22.2322 13.845 21.9993 13.6894C21.7663 13.5337 21.5847 13.3125 21.4775 13.0537C21.3703 12.7948 21.3423 12.51 21.3969 12.2352C21.4516 11.9604 21.5865 11.708 21.7846 11.5099C21.9827 11.3118 22.2351 11.1769 22.5099 11.1222C22.7847 11.0675 23.0695 11.0956 23.3284 11.2028C23.5872 11.31 23.8085 11.4916 23.9641 11.7246C24.1198 11.9575 24.2028 12.2314 24.2028 12.5116C24.2018 12.8866 24.0522 13.2459 23.7866 13.5108C23.5211 13.7756 23.1613 13.9243 22.7863 13.9243V13.9281Z' fill='#8254C6'/>\r\n<path d='M10.0353 19.5836C10.2221 19.5836 10.4047 19.639 10.56 19.7428C10.7153 19.8465 10.8363 19.994 10.9078 20.1666C10.9793 20.3392 10.998 20.529 10.9616 20.7122C10.9251 20.8954 10.8352 21.0637 10.7031 21.1958C10.571 21.3278 10.4028 21.4178 10.2196 21.4542C10.0364 21.4907 9.84649 21.472 9.67392 21.4005C9.50136 21.329 9.35387 21.208 9.2501 21.0527C9.14633 20.8974 9.09094 20.7148 9.09094 20.528C9.09094 20.2775 9.19044 20.0373 9.36754 19.8602C9.54465 19.6831 9.78486 19.5836 10.0353 19.5836V19.5836Z' fill='#8254C6'/>\r\n</svg>\r\n"
            },
            {
              value: "spotting",
              meaning: "\u0644\u06a9\u0647\u200c\u0628\u06cc\u0646\u06cc",
              icon: "<svg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M29.5356 24.4319C29.1328 24.1242 28.804 23.7304 28.573 23.2792C28.3421 22.8281 28.2149 22.331 28.2009 21.8243C28.2424 21.4476 28.3698 21.0854 28.5733 20.7657C28.7767 20.4459 29.0508 20.1771 29.3745 19.9799C29.6878 19.8087 29.9634 19.5763 30.185 19.2963C30.4065 19.0164 30.5695 18.6947 30.664 18.3505C30.7586 18.0062 30.7829 17.6464 30.7355 17.2926C30.688 16.9388 30.5698 16.5981 30.3879 16.2909C30.1052 15.7468 29.6257 15.3309 29.0471 15.1279C28.4685 14.9249 27.8343 14.9501 27.2736 15.1984C27.0224 15.3422 26.795 15.5241 26.5996 15.7376C26.2929 16.0921 25.8962 16.3575 25.4514 16.5058C25.2803 16.549 25.1022 16.5569 24.928 16.529C24.7538 16.5011 24.587 16.438 24.438 16.3436C24.3384 16.2862 24.2521 16.2084 24.1846 16.1153C24.1172 16.0222 24.0702 15.916 24.0468 15.8034C23.914 14.9714 24.5373 14.1941 25.198 13.3712C25.8801 12.5219 26.5865 11.6432 26.4263 10.6187C26.3153 9.91022 25.9516 9.26592 25.4024 8.80484C24.8532 8.34376 24.1557 8.09708 23.4387 8.11037C22.8507 8.10555 22.2833 8.3273 21.8544 8.7296C21.4255 9.13191 21.1679 9.68389 21.1351 10.271C20.974 11.7912 20.5402 12.8188 19.919 13.1614C19.6704 13.267 19.3996 13.3097 19.1305 13.2856C18.8615 13.2616 18.6025 13.1716 18.3765 13.0236C18.0167 12.811 17.6153 12.6784 17.1996 12.6347C16.784 12.591 16.3638 12.6372 15.9676 12.7702C15.6752 12.8948 15.4136 13.0816 15.2009 13.3178C14.9882 13.5539 14.8297 13.8336 14.7362 14.1373C14.6062 14.611 14.6167 15.1122 14.7664 15.5801C14.9161 16.0479 15.1986 16.4621 15.5794 16.7723C15.6899 16.8959 15.7933 17.0125 15.8733 17.1179C16.0551 17.389 16.1225 17.721 16.0608 18.0415C15.9991 18.362 15.8134 18.6453 15.544 18.8296C14.7616 19.4377 13.9224 18.9532 13.4036 18.2965C12.0121 16.5463 10.423 15.7153 9.15317 16.073C8.70258 16.2277 8.31001 16.5164 8.02801 16.9004C7.74601 17.2843 7.58803 17.7453 7.57523 18.2215C7.36646 19.9363 8.80758 20.6254 10.0784 21.2335C10.8708 21.5003 11.5639 22.0006 12.0668 22.6685C12.2999 23.1357 12.006 23.5806 11.4202 24.3914C10.873 24.9935 10.4741 25.7153 10.2554 26.499C10.0367 27.2828 10.0042 28.1068 10.1605 28.9053C10.3289 29.8273 10.7923 30.6698 11.4808 31.3058C12.1693 31.9419 13.0457 32.3371 13.9782 32.4321C14.1977 32.4593 14.4187 32.4728 14.64 32.4726C15.4618 32.5035 16.277 32.3145 17.0014 31.925C17.7258 31.5356 18.3331 30.9598 18.7606 30.2572C19.6464 28.5252 20.595 27.5807 21.5811 27.4489C22.932 27.2686 24.216 28.6732 24.9011 29.4282C24.972 29.5062 25.0389 29.5792 25.1038 29.6441C25.5569 30.1005 26.1244 30.4267 26.7468 30.5884C27.3693 30.7501 28.0238 30.7414 28.6417 30.5633C29.2283 30.44 29.7711 30.162 30.2138 29.7579C30.6565 29.3539 30.983 28.8387 31.1591 28.2658C31.5503 26.702 30.4923 25.3177 29.5356 24.4319ZM30.2916 28.0469C30.1542 28.4644 29.9079 28.8378 29.5782 29.1285C29.2485 29.4192 28.8472 29.6168 28.4157 29.7008C27.9526 29.8362 27.4617 29.846 26.9936 29.7292C26.5254 29.6123 26.0967 29.3731 25.7514 29.036C25.6926 28.9732 25.6288 28.9032 25.5598 28.8282C24.7623 27.9526 23.2776 26.323 21.4635 26.5662C20.1714 26.7395 18.9958 27.8442 17.9691 29.8518C17.5543 30.4788 16.9669 30.9724 16.2778 31.273C15.5887 31.5737 14.8274 31.6686 14.0856 31.5463C13.3372 31.4682 12.6344 31.1494 12.0826 30.6377C11.5309 30.126 11.1602 29.4491 11.026 28.7087C10.8994 28.0331 10.9345 27.3372 11.1282 26.6778C11.322 26.0183 11.6689 25.4141 12.1408 24.9143C12.7337 24.0934 13.3468 23.2442 12.8614 22.2723C12.285 21.4117 11.4412 20.7649 10.4605 20.4319C9.13695 19.7984 8.33228 19.3586 8.45693 18.331C8.46047 18.032 8.55087 17.7405 8.71714 17.492C8.8834 17.2435 9.11835 17.0487 9.39336 16.9314C9.50951 16.8992 9.62955 16.8831 9.75009 16.8838C10.3512 16.9915 10.9238 17.2218 11.432 17.5604C11.9403 17.899 12.3734 18.3386 12.7043 18.8519C12.9349 19.2544 13.2821 19.5775 13.7001 19.7787C14.1181 19.9798 14.5873 20.0496 15.0458 19.9787C15.5042 19.9078 15.9304 19.6996 16.2681 19.3815C16.6058 19.0635 16.8392 18.6506 16.9374 18.1972C17.0006 17.9173 17.0014 17.6269 16.9398 17.3467C16.8781 17.0665 16.7555 16.8032 16.5807 16.5757C16.4794 16.4429 16.3638 16.3142 16.2422 16.1774C15.6879 15.5572 15.3423 15.1001 15.5754 14.4343C15.6276 14.2502 15.7197 14.0799 15.8451 13.9354C15.9705 13.7909 16.1261 13.6758 16.301 13.5982C16.5806 13.5176 16.8739 13.4959 17.1623 13.5347C17.4506 13.5734 17.7278 13.6716 17.9762 13.8232C18.3289 14.041 18.7308 14.1665 19.1447 14.1879C19.5587 14.2094 19.9714 14.1261 20.3447 13.9458C21.2568 13.4452 21.8243 12.2412 22.0229 10.3683C22.033 9.99728 22.1895 9.64528 22.4581 9.38915C22.7268 9.13303 23.0858 8.99356 23.4569 9.00119C23.9582 8.99186 24.4459 9.16458 24.8296 9.48734C25.2133 9.81009 25.467 10.261 25.5436 10.7565C25.645 11.3929 25.0876 12.0841 24.5008 12.8148C23.7823 13.7086 22.9685 14.7221 23.1641 15.9443C23.2064 16.1806 23.2985 16.4052 23.4342 16.6032C23.57 16.8011 23.7463 16.9679 23.9515 17.0925C24.2059 17.2553 24.4912 17.3635 24.7894 17.4104C25.0877 17.4573 25.3925 17.4419 25.6845 17.3652C26.2774 17.1804 26.8089 16.8378 27.2219 16.374C27.3545 16.2287 27.5054 16.1013 27.6709 15.995C28.0304 15.8484 28.4324 15.8443 28.7948 15.9836C29.1573 16.123 29.453 16.3952 29.6217 16.7449C29.7434 16.9571 29.8206 17.1919 29.8486 17.4349C29.8765 17.6779 29.8546 17.924 29.7842 18.1583C29.7139 18.3926 29.5965 18.61 29.4393 18.7974C29.282 18.9848 29.0882 19.1382 28.8698 19.2481C28.4372 19.5221 28.0725 19.8908 27.8034 20.3264C27.5342 20.762 27.3676 21.2531 27.3162 21.7625C27.3106 22.4044 27.4541 23.0389 27.7355 23.6159C28.0169 24.193 28.4284 24.6967 28.9377 25.0876C30.0494 26.1213 30.5166 27.1449 30.2916 28.0469V28.0469Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.5'/>\r\n<path d='M11.0652 9.00629C10.9533 8.31112 10.719 7.64132 10.373 7.02804C10.0897 6.38763 9.63275 5.83934 9.05385 5.44529C8.47495 5.05124 7.79728 4.82717 7.09758 4.79846C6.65947 4.81432 6.2348 4.95389 5.87269 5.20103C5.51059 5.44817 5.22586 5.79278 5.05144 6.19499C4.83844 6.74484 4.78652 7.344 4.90175 7.9223C5.01698 8.5006 5.29459 9.03409 5.70207 9.46031C6.13463 10.0234 6.67751 10.4923 7.29751 10.8384C7.91751 11.1844 8.60159 11.4004 9.30791 11.473C9.3525 11.473 9.39676 11.473 9.44067 11.473C9.71283 11.4692 9.98006 11.3998 10.2197 11.2707C10.4593 11.1415 10.6641 10.9564 10.8169 10.7312C11.1005 10.2035 11.1884 9.59254 11.0652 9.00629V9.00629ZM10.0751 10.2346C9.99852 10.3443 9.89598 10.4334 9.77662 10.4939C9.65726 10.5544 9.52478 10.5843 9.39101 10.5812C8.80025 10.5202 8.22838 10.3382 7.71105 10.0465C7.19372 9.75477 6.74203 9.35963 6.38412 8.88569C6.08666 8.58561 5.88011 8.20754 5.7883 7.79511C5.69648 7.38268 5.72316 6.95269 5.86523 6.55476C5.97122 6.30474 6.14673 6.09039 6.37092 5.93715C6.59511 5.78392 6.85857 5.69824 7.13001 5.69029H7.20096C7.71608 5.76129 8.20503 5.96089 8.62268 6.27068C9.04034 6.58046 9.37323 6.99045 9.59066 7.46281C10.1075 8.37998 10.4227 9.71266 10.0751 10.2346Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.5'/>\r\n<path d='M18.0617 7.91857C17.8632 7.0861 17.3485 6.36355 16.6267 5.90384C16.4302 5.80133 16.2117 5.74857 15.9901 5.75016C15.7685 5.75175 15.5507 5.80765 15.3558 5.91296C15.0495 6.05731 14.7917 6.28725 14.6133 6.57499C14.4349 6.86274 14.3436 7.19598 14.3505 7.53447C14.3824 7.93971 14.5303 8.32718 14.7765 8.65064C15.0227 8.97411 15.3568 9.2199 15.7389 9.35867C16.0603 9.5113 16.4099 9.5955 16.7655 9.60595C17.0668 9.61439 17.3619 9.51924 17.6016 9.33638C17.8005 9.16465 17.9486 8.9417 18.0297 8.69174C18.1108 8.44178 18.1219 8.17438 18.0617 7.91857V7.91857ZM17.0483 8.62798C16.879 8.75973 16.5213 8.72932 16.0916 8.53677C15.8657 8.46265 15.6655 8.32615 15.514 8.14306C15.3624 7.95996 15.2658 7.73773 15.2352 7.50204C15.2353 7.33212 15.2851 7.16594 15.3783 7.02389C15.4716 6.88185 15.6043 6.77012 15.7602 6.70243C15.8311 6.66219 15.9112 6.64104 15.9927 6.64104C16.0743 6.64104 16.1544 6.66219 16.2253 6.70243C16.6908 7.03554 17.0275 7.51862 17.179 8.07058C17.2072 8.16674 17.2104 8.26852 17.1882 8.36626C17.1661 8.46399 17.1193 8.55443 17.0523 8.62899L17.0483 8.62798Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.5'/>\r\n<path d='M32.4833 9.41657C32.4579 9.23414 32.3895 9.06035 32.2838 8.90952C32.1781 8.75869 32.038 8.63514 31.8752 8.54906C31.483 8.36799 31.0425 8.31995 30.6205 8.41225C30.2328 8.50298 29.8763 8.6957 29.588 8.97045C29.2997 9.24521 29.09 9.59202 28.9808 9.97498C28.8071 10.3512 28.7272 10.7639 28.7478 11.1778C28.7685 11.5917 28.8891 11.9944 29.0993 12.3515C29.2 12.4754 29.3275 12.5748 29.4721 12.6422C29.6168 12.7096 29.7749 12.7433 29.9344 12.7407C30.0119 12.7406 30.0892 12.7338 30.1655 12.7204C30.8759 12.5259 31.4838 12.0644 31.862 11.4323C32.3092 10.8593 32.5303 10.1419 32.4833 9.41657V9.41657ZM30.0155 11.8428C29.8615 11.8701 29.8128 11.8154 29.7895 11.783C29.6867 11.5465 29.636 11.2907 29.6409 11.033C29.6458 10.7752 29.7061 10.5215 29.8179 10.2891C29.8776 10.0562 29.9958 9.84233 30.1612 9.66781C30.3267 9.4933 30.534 9.36392 30.7634 9.29192C31.5387 9.17031 31.5864 9.45508 31.6046 9.56251C31.5786 10.0528 31.4162 10.5261 31.1356 10.929C30.855 11.3319 30.4674 11.6484 30.0165 11.8428H30.0155Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.5'/>\r\n<path d='M34.8539 32.2159C34.5727 31.8597 34.2044 31.582 33.7846 31.4096C33.3647 31.2372 32.9076 31.176 32.4572 31.2318C32.1476 31.2775 31.8576 31.4108 31.6213 31.6158C31.385 31.8209 31.2123 32.0892 31.1235 32.3892C31.0001 32.9345 31.0805 33.506 31.3495 33.9961C31.6186 34.4861 32.0576 34.8608 32.5838 35.0495C32.8234 35.147 33.0792 35.1983 33.3379 35.2005C33.7154 35.1886 34.0811 35.0658 34.3894 34.8476C34.6977 34.6294 34.9351 34.3253 35.0719 33.9732C35.2044 33.6894 35.2542 33.374 35.2157 33.0632C35.1771 32.7524 35.0518 32.4587 34.8539 32.2159V32.2159ZM34.2651 33.5962C34.2233 33.7302 34.1538 33.854 34.0611 33.9595C33.9685 34.065 33.8548 34.1499 33.7273 34.2087C33.5998 34.2676 33.4614 34.299 33.321 34.301C33.1806 34.3031 33.0413 34.2756 32.9122 34.2205C32.5972 34.1141 32.3299 33.8999 32.1575 33.6156C31.9851 33.3314 31.9185 32.9954 31.9697 32.6669C32.0081 32.5212 32.0891 32.3903 32.2023 32.2908C32.3155 32.1914 32.4557 32.1279 32.6051 32.1085C32.6704 32.0976 32.7365 32.0922 32.8027 32.0923C33.0611 32.0993 33.3149 32.1619 33.5468 32.276C33.7787 32.39 33.9833 32.5527 34.1466 32.753C34.2465 32.8667 34.311 33.0071 34.3319 33.157C34.3528 33.3069 34.3292 33.4596 34.2641 33.5962H34.2651Z' fill='#8254C6' stroke='#8254C6' stroke-width='0.5'/>\r\n</svg>\r\n"
            },
            {
              value: "no_discharge",
              meaning: "\u0628\u062f\u0648\u0646 \u062a\u0631\u0634\u062d",
              icon: "<svg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<path d='M20.0012 34.4463C27.9799 34.4463 34.4478 27.9783 34.4478 19.9996C34.4478 12.021 27.9799 5.55298 20.0012 5.55298C12.0225 5.55298 5.55457 12.021 5.55457 19.9996C5.55457 27.9783 12.0225 34.4463 20.0012 34.4463Z' stroke='#8254C6'/>\r\n<path d='M30.8231 9.34839L9.6853 30.4862' stroke='#8254C6'/>\r\n<path d='M9.6853 9.34854L30.8231 30.4863' stroke='#8254C6'/>\r\n</svg>\r\n"
            }
          ]
        })
      },
      {
        path: "choices8.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getSign.data.result.current;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : (() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <HeaderLiom
                data-plasmic-name={"headerLiom"}
                data-plasmic-override={overrides.headerLiom}
                className={classNames("__wab_instance", sty.headerLiom)}
                slot={null}
              >
                <div className={classNames(projectcss.all, sty.freeBox__c3Bo6)}>
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"20px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image38.svg",
                      fullWidth: 24,
                      fullHeight: 24,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x2Cb7
                    )}
                  >
                    {
                      "\u0646\u0634\u0627\u0646\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc"
                    }
                  </div>
                </div>
              </HeaderLiom>
            ) : null}
          </section>
          <AntdModal
            data-plasmic-name={"number2"}
            data-plasmic-override={overrides.number2}
            className={classNames("__wab_instance", sty.number2)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_ao7QOs5_RJOP"]]: true
            })}
            modalScopeClassName={sty["number2__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["number2", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["number2", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dqZzs
                )}
              >
                {
                  "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0647\u0645\u06cc\u0627\u0631 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u06cc\u0646\u062c\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646."
                }
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_JlfQaey1dPY0"]]: true })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qu0To)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oryU9)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1LAFe
                  )}
                >
                  {
                    "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__ww6Ak,
                    "negative"
                  )}
                >
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    antdInput2={(() => {
                      const child$Props = {
                        "aria-label": ``,
                        bordered: false,
                        className: classNames("__wab_instance", sty.antdInput),
                        id: "inputMobile1",
                        maxLength: (() => {
                          try {
                            return $state.number.startsWith("0") ? 11 : 10;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["antdInput", "value"],
                            Input_Helpers
                          ).apply(null, eventArgs);

                          (async event => {
                            const $steps = {};

                            $steps["updateNumber"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["number"]
                                    },
                                    operation: 0,
                                    value: $state.antdInput.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateNumber"] != null &&
                              typeof $steps["updateNumber"] === "object" &&
                              typeof $steps["updateNumber"].then === "function"
                            ) {
                              $steps["updateNumber"] = await $steps[
                                "updateNumber"
                              ];
                            }
                          }).apply(null, eventArgs);
                        },
                        placeholder: "9123456789",
                        size: "large",
                        type: "tel",
                        value: generateStateValueProp($state, [
                          "antdInput",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "antdInput.value"
                          }
                        ],
                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Input
                          data-plasmic-name={"antdInput"}
                          data-plasmic-override={overrides.antdInput}
                          {...child$Props}
                        />
                      );
                    })()}
                    className={classNames("__wab_instance", sty.textInput)}
                    endIcon={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ouvg8
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bfrGn,
                            "negative"
                          )}
                        >
                          {"+98 "}
                        </div>
                        <Icon111Icon
                          className={classNames(projectcss.all, sty.svg__gY4Cq)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async event => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"09123456789"}
                    required={false}
                    showEndIcon={true}
                    type={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "tel"
                        : "tel"
                    }
                    value={
                      generateStateValueProp($state, ["textInput", "value"]) ??
                      ""
                    }
                  />
                </div>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__oi5JZ)}>
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  color={generateStateValueProp($state, ["button2", "color"])}
                  isDisabled={(() => {
                    try {
                      return $state.number.startsWith("0")
                        ? $state.number.length != 11
                        : $state.number.length != 10;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateNumber2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["number2", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateNumber2Open"] != null &&
                      typeof $steps["updateNumber2Open"] === "object" &&
                      typeof $steps["updateNumber2Open"].then === "function"
                    ) {
                      $steps["updateNumber2Open"] = await $steps[
                        "updateNumber2Open"
                      ];
                    }

                    $steps["updateName2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["name2", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateName2Open"] != null &&
                      typeof $steps["updateName2Open"] === "object" &&
                      typeof $steps["updateName2Open"].then === "function"
                    ) {
                      $steps["updateName2Open"] = await $steps[
                        "updateName2Open"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__l1Gr8
                    )}
                  >
                    {"\u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
              </div>
            </Stack__>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"name2"}
            data-plasmic-override={overrides.name2}
            className={classNames("__wab_instance", sty.name2)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_CxCtTV05gSu9"]]: true
            })}
            modalScopeClassName={sty["name2__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["name2", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["name2", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wqVz
                )}
              >
                {
                  "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0647\u0645\u06cc\u0627\u0631\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                }
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_YeBO-M7kBn8Q"]]: true })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__y9Y5V)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qvNlc)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dR19P
                  )}
                >
                  {
                    "\u0646\u0627\u0645 \u0647\u0645\u06cc\u0627\u0631 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__bqI6D,
                    "negative"
                  )}
                >
                  <TextInput
                    data-plasmic-name={"textInput2"}
                    data-plasmic-override={overrides.textInput2}
                    antdInput2={(() => {
                      const child$Props = {
                        "aria-label": ``,
                        bordered: false,
                        className: classNames("__wab_instance", sty.antdInput2),
                        id: "inputMobile1",
                        maxLength: (() => {
                          try {
                            return $state.number.startsWith("0") ? 11 : 10;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["antdInput2", "value"],
                            Input_Helpers
                          ).apply(null, eventArgs);

                          (async event => {
                            const $steps = {};

                            $steps["updateName"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["name"]
                                    },
                                    operation: 0,
                                    value: $state.antdInput2.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateName"] != null &&
                              typeof $steps["updateName"] === "object" &&
                              typeof $steps["updateName"].then === "function"
                            ) {
                              $steps["updateName"] = await $steps["updateName"];
                            }
                          }).apply(null, eventArgs);
                        },
                        placeholder:
                          "\u0645\u062b\u0644\u0627 \u0639\u0644\u06cc\u060c \u0639\u0634\u0642\u0645\u060c \u0645\u0627\u0645\u0627\u0646 \u0632\u0647\u0631\u0647\u060c \u0628\u0627\u0628\u0627\u060c \u0645\u06cc\u0646\u0627\u060c ...",
                        size: "large",
                        type: "text",
                        value: generateStateValueProp($state, [
                          "antdInput2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "antdInput2.value"
                          }
                        ],
                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Input
                          data-plasmic-name={"antdInput2"}
                          data-plasmic-override={overrides.antdInput2}
                          {...child$Props}
                        />
                      );
                    })()}
                    className={classNames("__wab_instance", sty.textInput2)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput2",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async event => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"09123456789"}
                    required={false}
                    type={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "tel"
                        : "text"
                    }
                    value={
                      generateStateValueProp($state, ["textInput2", "value"]) ??
                      ""
                    }
                  />
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ct3Gn)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kaEOk
                  )}
                >
                  {
                    "\u0686\u0647 \u0646\u0633\u0628\u062a\u06cc \u0628\u0627\u0647\u0645 \u062f\u0627\u0631\u06cc\u062f\u061f"
                  }
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__gIp7X)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [
                          {
                            type: "mother",
                            text: "مادر هستند"
                          },
                          {
                            type: "husband",
                            text: "همسر هستند"
                          }
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <RadioGrop
                        data-plasmic-name={"radioGrop"}
                        data-plasmic-override={overrides.radioGrop}
                        className={classNames("__wab_instance", sty.radioGrop)}
                        disable={(() => {
                          try {
                            return (
                              $state.getSign.data.result.filter(
                                item => item.rel.relation == currentItem.type
                              ).length != 0
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateRelation"] =
                            $state.getSign.data.result.filter(
                              item => item.rel.relation == currentItem.type
                            ).length == 0
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["relation"]
                                    },
                                    operation: 0,
                                    value: currentItem.type
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateRelation"] != null &&
                            typeof $steps["updateRelation"] === "object" &&
                            typeof $steps["updateRelation"].then === "function"
                          ) {
                            $steps["updateRelation"] = await $steps[
                              "updateRelation"
                            ];
                          }

                          $steps["invokeGlobalAction"] =
                            $state.getSign.data.result.filter(
                              item => item.rel.relation == currentItem.type
                            ).length != 0
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      (() => {
                                        try {
                                          return `فقط یک همیار با نسبت ${
                                            currentItem.text.split("هستند")[0]
                                          }میتونید اضافه کنید.`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      "bottom-center"
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        selectedLine={(() => {
                          try {
                            return currentItem.type == $state.relation;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__f3O9G
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.text;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u0627\u062f\u0631 \u0647\u0633\u062a\u0646\u062f";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </RadioGrop>
                    );
                  })}
                </Stack__>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__o9Wqd)}>
                <Button
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames("__wab_instance", sty.button3)}
                  color={generateStateValueProp($state, ["button3", "color"])}
                  isDisabled={(() => {
                    try {
                      return (
                        $state.name.length == 0 ||
                        $state.relation.length == 0 ||
                        $state.loadingBtn
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  loading={(() => {
                    try {
                      return $state.loadingBtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadingBtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingBtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingBtn2"] != null &&
                      typeof $steps["updateLoadingBtn2"] === "object" &&
                      typeof $steps["updateLoadingBtn2"].then === "function"
                    ) {
                      $steps["updateLoadingBtn2"] = await $steps[
                        "updateLoadingBtn2"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "PUT",
                              "https://n8n.staas.ir/webhook/rest/user/hamyar/add",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    authorization: $state.token,
                                    mobile: $state.number,
                                    name: $state.name,
                                    type: $state.type,
                                    relation: $state.relation
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] =
                      $steps.invokeGlobalAction?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f.",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["updateMasseg"] =
                      $steps.invokeGlobalAction?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["masseg"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction.data.result
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateMasseg"] != null &&
                      typeof $steps["updateMasseg"] === "object" &&
                      typeof $steps["updateMasseg"].then === "function"
                    ) {
                      $steps["updateMasseg"] = await $steps["updateMasseg"];
                    }

                    $steps["updateErrror"] =
                      $steps.invokeGlobalAction?.data?.success == false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["errror"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction.data.error
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateErrror"] != null &&
                      typeof $steps["updateErrror"] === "object" &&
                      typeof $steps["updateErrror"].then === "function"
                    ) {
                      $steps["updateErrror"] = await $steps["updateErrror"];
                    }

                    $steps["invokeGlobalAction3"] =
                      $steps.invokeGlobalAction?.data?.success == false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                (() => {
                                  try {
                                    return $state.errror.message;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                "bottom-center",
                                10000
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["updateSmsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["sms", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSmsOpen"] != null &&
                      typeof $steps["updateSmsOpen"] === "object" &&
                      typeof $steps["updateSmsOpen"].then === "function"
                    ) {
                      $steps["updateSmsOpen"] = await $steps["updateSmsOpen"];
                    }

                    $steps["updateName2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["name2", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateName2Open"] != null &&
                      typeof $steps["updateName2Open"] === "object" &&
                      typeof $steps["updateName2Open"].then === "function"
                    ) {
                      $steps["updateName2Open"] = await $steps[
                        "updateName2Open"
                      ];
                    }

                    $steps["updateV"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["v"]
                            },
                            operation: 0,
                            value: $state.v + "s"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateV"] != null &&
                      typeof $steps["updateV"] === "object" &&
                      typeof $steps["updateV"].then === "function"
                    ) {
                      $steps["updateV"] = await $steps["updateV"];
                    }

                    $steps["updateLoadingBtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingBtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingBtn"] != null &&
                      typeof $steps["updateLoadingBtn"] === "object" &&
                      typeof $steps["updateLoadingBtn"].then === "function"
                    ) {
                      $steps["updateLoadingBtn"] = await $steps[
                        "updateLoadingBtn"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yBh7N
                    )}
                  >
                    {"\u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
              </div>
            </Stack__>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"sms"}
            data-plasmic-override={overrides.sms}
            className={classNames("__wab_instance", sty.sms)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_nbNuFHCVb1nD"]]: true
            })}
            modalScopeClassName={sty["sms__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["sms", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["sms", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__m5Ama
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.masseg.title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0647\u0645\u06cc\u0627\u0631\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_t1MKwQ2yalEK"]]: true })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___2JAat)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3Zed0)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__npSf3
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.masseg.message;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hr2Zb)}
              >
                <Button
                  data-plasmic-name={"button4"}
                  data-plasmic-override={overrides.button4}
                  className={classNames("__wab_instance", sty.button4)}
                  color={generateStateValueProp($state, ["button4", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                let shareText = $state.masseg.message;
                                if (navigator.share) {
                                  return navigator.share({
                                    title: "لیوم | تقویم قاعدگی",
                                    text: shareText
                                  });
                                } else {
                                  $$.copyToClipboard(shareText);
                                  return alert(
                                    "مرورگر شما از قابلیت اشتراک‌گذاری پشتیبانی نمی‌کند.\nمتن در کلیپ‌بورد کپی شد. حالا می‌توانید آن را در برنامه‌های دیگر به اشتراک بگذارید."
                                  );
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button4", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qhHG
                    )}
                  >
                    {
                      "\u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc"
                    }
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button5"}
                  data-plasmic-override={overrides.button5}
                  className={classNames("__wab_instance", sty.button5)}
                  color={generateStateValueProp($state, ["button5", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateName2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["sms", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateName2Open"] != null &&
                      typeof $steps["updateName2Open"] === "object" &&
                      typeof $steps["updateName2Open"].then === "function"
                    ) {
                      $steps["updateName2Open"] = await $steps[
                        "updateName2Open"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.staas.ir/webhook/rest/user/hamyar/add",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    authorization: $state.token,
                                    id: $state.masseg.id
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] =
                      $steps.invokeGlobalAction?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0628\u0647 \u0647\u0645\u06cc\u0627\u0631\u062a \u0627\u0631\u0633\u0627\u0644 \u0634\u062f.",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button5", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v1Ufe
                    )}
                  >
                    {
                      "\u0644\u06cc\u0646\u06a9 \u062f\u0639\u0648\u062a \u062a\u0648\u0633\u0637 \u0644\u06cc\u0648\u0645 \u0628\u0631\u0627\u06cc \u0647\u0645\u06cc\u0627\u0631\u0645 \u0627\u0631\u0633\u0627\u0644 \u0634\u0648\u062f  >"
                    }
                  </div>
                </Button>
              </Stack__>
            </Stack__>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"remove"}
            data-plasmic-override={overrides.remove}
            className={classNames("__wab_instance", sty.remove)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_kqv2vR_fwH0t"]]: true,
              [sty["pcls_u5d5-MTXLWUJ"]]: hasVariant(
                globalVariants,
                "screen",
                "mobile"
              )
            })}
            modalScopeClassName={sty["remove__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["remove", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["remove", "open"])}
            title={
              <div className={classNames(projectcss.all, sty.freeBox__xdV6W)}>
                <Icon157Icon
                  className={classNames(projectcss.all, sty.svg__njG8A)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zNKb
                  )}
                >
                  {"\u062d\u0630\u0641 \u0647\u0645\u06cc\u0627\u0631"}
                </div>
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_NidDut_xRTGH"]]: true })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nKVlH)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xFlfv
                )}
              >
                {
                  "\u0628\u0627 \u062d\u0630\u0641 \u0647\u0645\u06cc\u0627\u0631\u060c \u062f\u06cc\u06af\u0647 \u067e\u06cc\u0627\u0645\u06a9\u06cc \u0628\u0631\u0627\u0634 \u0627\u0631\u0633\u0627\u0644 \u0646\u0645\u06cc\u0634\u0647. \u0627\u0632 \u0627\u0646\u062c\u0627\u0645 \u0627\u06cc\u0646\u06a9\u0627\u0631 \u0645\u0637\u0645\u0626\u0646\u06cc \u061f"
                }
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nx3Qz)}
              >
                <Button
                  data-plasmic-name={"removeBtn"}
                  data-plasmic-override={overrides.removeBtn}
                  className={classNames("__wab_instance", sty.removeBtn)}
                  color={generateStateValueProp($state, ["removeBtn", "color"])}
                  isDisabled={(() => {
                    try {
                      return $state.loadingBtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  loading={(() => {
                    try {
                      return $state.loadingBtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadingBtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingBtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingBtn"] != null &&
                      typeof $steps["updateLoadingBtn"] === "object" &&
                      typeof $steps["updateLoadingBtn"].then === "function"
                    ) {
                      $steps["updateLoadingBtn"] = await $steps[
                        "updateLoadingBtn"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "PATCH",
                              "https://n8n.staas.ir/webhook/rest/user/hamyar/add",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    id: $state.removeItem.hamyar.id,
                                    type: $state.type,
                                    hamyarType: "myHamyar",
                                    authorization: $state.token
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateV"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["v"]
                            },
                            operation: 0,
                            value: $state.v + "s"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateV"] != null &&
                      typeof $steps["updateV"] === "object" &&
                      typeof $steps["updateV"].then === "function"
                    ) {
                      $steps["updateV"] = await $steps["updateV"];
                    }

                    $steps["updateRemoveOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["remove", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateRemoveOpen"] != null &&
                      typeof $steps["updateRemoveOpen"] === "object" &&
                      typeof $steps["updateRemoveOpen"].then === "function"
                    ) {
                      $steps["updateRemoveOpen"] = await $steps[
                        "updateRemoveOpen"
                      ];
                    }

                    $steps["updateLoadingBtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingBtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingBtn2"] != null &&
                      typeof $steps["updateLoadingBtn2"] === "object" &&
                      typeof $steps["updateLoadingBtn2"].then === "function"
                    ) {
                      $steps["updateLoadingBtn2"] = await $steps[
                        "updateLoadingBtn2"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["removeBtn", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  size={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "minimal"
                      : undefined
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cUvxz
                    )}
                  >
                    {"\u062d\u0630\u0641"}
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button9"}
                  data-plasmic-override={overrides.button9}
                  className={classNames("__wab_instance", sty.button9)}
                  color={generateStateValueProp($state, ["button9", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateName2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["remove", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateName2Open"] != null &&
                      typeof $steps["updateName2Open"] === "object" &&
                      typeof $steps["updateName2Open"].then === "function"
                    ) {
                      $steps["updateName2Open"] = await $steps[
                        "updateName2Open"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button9", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  size={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "compact"
                      : "compact"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uiNoe
                    )}
                  >
                    {"\u0641\u0639\u0644\u0627 \u0646\u0647"}
                  </div>
                </Button>
              </Stack__>
            </Stack__>
          </AntdModal>
          <ApiRequest
            data-plasmic-name={"getSign"}
            data-plasmic-override={overrides.getSign}
            className={classNames("__wab_instance", sty.getSign)}
            errorDisplay={null}
            loadingDisplay={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__uepml)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jmVgt)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__yirzt,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__pb0Hk,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__kpjVs,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__obDqY,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__oDesr,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__puIkc,
                      "shimmer"
                    )}
                  />
                </Stack__>
              </Stack__>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getSign", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getSign", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getSign", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={(() => {
              try {
                return {
                  authorization: $state.token
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/calendar/getSign"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pomKc)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__zU9PX)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eb4Iq
                  )}
                >
                  {
                    "\u062a\u0648\u06cc \u062f\u0648\u0631\u0647 \u0642\u0627\u0639\u062f\u06af\u06cc \u0686\u0647 \u0639\u0644\u0627\u0626\u0645\u06cc \u062f\u0627\u0631\u06cc\u061f"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__drBiI
                  )}
                >
                  {
                    "\u0639\u0644\u0627\u0626\u0645\u062a \u0631\u0648 \u0628\u0627 \u0645\u0627 \u062f\u0631 \u0645\u06cc\u0648\u0646 \u0628\u0630\u0627\u0631 \u062a\u0627 \u062a\u0648\u06cc \u062f\u0648\u0631\u0647 \u0627\u062a \u0628\u0647\u062a \u062a\u0648\u0635\u06cc\u0647 \u06a9\u0646\u06cc\u0645 \u06a9\u0647 \u0628\u0627 \u0634\u0627\u062f\u06cc \u0648 \u062d\u0627\u0644 \u062e\u0648\u0628 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0631\u0648 \u0628\u06af\u0630\u0631\u0648\u0646\u06cc"
                  }
                </div>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox"}
                data-plasmic-override={overrides.selectionBox}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bk4X
                  )}
                >
                  {
                    "\u0642\u0628\u0644 \u067e\u0631\u06cc\u0648\u062f \u0686\u0647 \u0639\u0644\u0627\u0626\u0645\u06cc \u062f\u0627\u0631\u06cc\u061f"
                  }
                </div>
                <Choices
                  data-plasmic-name={"choices"}
                  data-plasmic-override={overrides.choices}
                  beforList={(() => {
                    try {
                      return $state.signs.before;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          {
                            title: "\u0633\u0631\u062f\u0631\u062f",
                            selected: false
                          },
                          { title: "\u062f\u0644 \u062f\u0631\u062f" },
                          {
                            title: "\u062f\u0631\u062f \u0633\u06cc\u0646\u0647"
                          },
                          { title: "\u06a9\u0648\u0641\u062a\u06af\u06cc" },
                          { title: "\u06a9\u0645\u0631\u062f\u0631\u062f" },
                          { title: "\u062f\u0631\u062f \u067e\u0627" },
                          {
                            title:
                              "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639"
                          }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.choices)}
                  list={generateStateValueProp($state, ["choices", "list"])}
                  onListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "choices",
                      "list"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox2"}
                data-plasmic-override={overrides.selectionBox2}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8I9Td
                  )}
                >
                  {
                    "\u0648\u0642\u062a\u06cc \u067e\u0631\u06cc\u0648\u062f\u06cc \u0686\u0647 \u0639\u0644\u0627\u0626\u0645\u06cc \u062f\u0627\u0631\u06cc\u061f"
                  }
                </div>
                <Choices
                  data-plasmic-name={"choices8"}
                  data-plasmic-override={overrides.choices8}
                  beforList={(() => {
                    try {
                      return $state.signs.current;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          {
                            title: "\u0633\u0631\u062f\u0631\u062f",
                            selected: false
                          },
                          { title: "\u062f\u0644 \u062f\u0631\u062f" },
                          {
                            title: "\u062f\u0631\u062f \u0633\u06cc\u0646\u0647"
                          },
                          { title: "\u06a9\u0648\u0641\u062a\u06af\u06cc" },
                          { title: "\u06a9\u0645\u0631\u062f\u0631\u062f" },
                          { title: "\u062f\u0631\u062f \u067e\u0627" },
                          {
                            title:
                              "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639"
                          }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.choices8)}
                  list={generateStateValueProp($state, ["choices8", "list"])}
                  onListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "choices8",
                      "list"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox3"}
                data-plasmic-override={overrides.selectionBox3}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox3)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__behMa
                  )}
                >
                  {
                    "\u0686\u0647 \u0646\u0634\u0627\u0646\u0647 \u0647\u0627\u06cc \u0631\u0648\u0627\u0646\u06cc \u062f\u0627\u0631\u06cc\u061f"
                  }
                </div>
                <Choices
                  data-plasmic-name={"choices3"}
                  data-plasmic-override={overrides.choices3}
                  beforList={(() => {
                    try {
                      return $state.signs.psychological;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          {
                            value: "headache",
                            meaning: "\u0633\u0631\u062f\u0631\u062f",
                            icon: "<svg width='35' height='35' viewBox='0 0 35 35' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_16159_32828)'>\r\n<path d='M4.98039 9.10027H4.91003C4.82972 9.08719 4.75405 9.0539 4.69015 9.00352L1.17217 6.2435C1.11967 6.20828 1.07462 6.16306 1.0396 6.11042C1.00458 6.05778 0.980266 5.99876 0.968053 5.93673C0.95584 5.8747 0.955964 5.81087 0.968419 5.74889C0.980874 5.68691 1.00542 5.62799 1.04064 5.57549C1.07587 5.52299 1.12109 5.47794 1.17373 5.44292C1.22636 5.4079 1.28538 5.38359 1.34741 5.37137C1.40944 5.35916 1.47327 5.35928 1.53526 5.37174C1.59724 5.38419 1.65616 5.40874 1.70866 5.44396H1.76143L4.61979 7.68508L4.84846 6.05001C4.86447 5.93542 4.92135 5.83048 5.00862 5.75452C5.0959 5.67856 5.20769 5.6367 5.3234 5.63665H5.39375C5.47324 5.64713 5.54883 5.67737 5.61362 5.7246L8.83978 8.22077C8.89784 8.25377 8.9483 8.29864 8.98785 8.35246C9.0274 8.40628 9.05514 8.46783 9.06929 8.5331C9.08343 8.59838 9.08365 8.6659 9.06993 8.73126C9.05621 8.79662 9.02885 8.85835 8.98966 8.91243C8.95046 8.9665 8.9003 9.0117 8.84245 9.04507C8.7846 9.07845 8.72036 9.09924 8.65392 9.1061C8.58749 9.11297 8.52035 9.10574 8.4569 9.08489C8.39345 9.06405 8.33512 9.03006 8.2857 8.98513L5.64721 7.05104L5.40734 8.71249C5.3875 8.81514 5.33465 8.9085 5.25686 8.97836C5.17906 9.04821 5.08058 9.09074 4.97639 9.09947L4.98039 9.10027Z' fill='#8254C6'/>\r\n<path d='M11.0898 6.07609C11.0094 6.07631 10.9301 6.05629 10.8594 6.01787C10.7887 5.97945 10.7288 5.92386 10.6853 5.85622L9.75378 4.39706L9.39318 5.03669C9.3525 5.11344 9.29174 5.1777 9.21739 5.22262C9.14304 5.26754 9.05789 5.29144 8.97102 5.29174C8.88699 5.29281 8.80409 5.27236 8.7302 5.23233C8.6563 5.19231 8.59388 5.13404 8.54887 5.06308L7.13368 2.68124C7.08823 2.62737 7.05486 2.56437 7.03584 2.4965C7.01682 2.42863 7.0126 2.35747 7.02345 2.28783C7.03429 2.21819 7.05995 2.15168 7.09871 2.09281C7.13746 2.03394 7.1884 1.98407 7.24808 1.94657C7.30777 1.90907 7.37479 1.88482 7.44465 1.87546C7.51451 1.86609 7.58557 1.87184 7.65302 1.89229C7.72047 1.91274 7.78275 1.94744 7.83564 1.99402C7.88853 2.04061 7.9308 2.09801 7.9596 2.16233L8.97023 3.82378L9.32203 3.19934C9.36446 3.12757 9.42486 3.0681 9.49727 3.02678C9.56969 2.98547 9.65162 2.96374 9.73499 2.96374C9.81836 2.96374 9.90029 2.98547 9.97271 3.02678C10.0451 3.0681 10.1055 3.12757 10.148 3.19934L11.528 5.34371C11.5626 5.39723 11.5863 5.45713 11.5976 5.51991C11.6088 5.58268 11.6075 5.64707 11.5935 5.70931C11.5796 5.77155 11.5534 5.83039 11.5165 5.88238C11.4796 5.93438 11.4326 5.97849 11.3784 6.01213L11.2817 6.0649C11.2185 6.08096 11.1526 6.08395 11.0882 6.0737L11.0898 6.07609Z' fill='#8254C6'/>\r\n<path d='M7.54056 1.9894C7.61081 1.9891 7.67998 2.00671 7.74153 2.04057C7.80309 2.07442 7.855 2.12341 7.89236 2.18289L8.83262 3.7388L8.95575 3.94109L9.07009 3.73001L9.34273 3.2111C9.37929 3.14928 9.43134 3.09805 9.49373 3.06247C9.55612 3.02688 9.6267 3.00816 9.69853 3.00816C9.77035 3.00816 9.84094 3.02688 9.90333 3.06247C9.96572 3.09805 10.0178 3.14928 10.0543 3.2111L11.4343 5.35548C11.4638 5.40109 11.484 5.45207 11.4938 5.50549C11.5035 5.55891 11.5027 5.61374 11.4912 5.66683C11.4798 5.71992 11.458 5.77023 11.4271 5.8149C11.3962 5.85957 11.3568 5.89771 11.3112 5.92715H11.2233V6.03269V5.93594C11.1344 5.9687 11.0371 5.96997 10.9474 5.93956C10.8578 5.90914 10.7813 5.84888 10.7307 5.76884L9.85124 4.40962L9.72811 4.21613L9.61378 4.41841L9.30596 4.97249C9.26877 5.0362 9.21553 5.08905 9.15156 5.12578C9.0876 5.16251 9.01512 5.18184 8.94136 5.18184C8.86759 5.18184 8.79512 5.16251 8.73115 5.12578C8.66718 5.08905 8.61396 5.0362 8.57677 4.97249L7.16158 2.58186C7.12221 2.51919 7.10038 2.44709 7.09839 2.3731C7.0964 2.29911 7.11432 2.22594 7.15027 2.16124C7.18621 2.09654 7.23887 2.04267 7.30275 2.00527C7.36662 1.96787 7.43936 1.94831 7.51338 1.94863M7.51338 1.80791C7.40973 1.80456 7.30721 1.83037 7.2175 1.8824C7.12779 1.93443 7.05448 2.0106 7.00592 2.10223C6.95735 2.19386 6.93548 2.29728 6.94278 2.40073C6.95009 2.50418 6.98628 2.60351 7.04724 2.6874L8.49762 5.08603C8.54638 5.16873 8.61578 5.23733 8.69904 5.28513C8.7823 5.33292 8.87654 5.35827 8.97254 5.35867C9.06935 5.3591 9.16459 5.33415 9.24876 5.28632C9.33293 5.23848 9.4031 5.16943 9.45227 5.08603L9.76009 4.53195L10.6396 5.89117C10.7083 5.99956 10.8125 6.08073 10.9344 6.12083C11.0563 6.16093 11.1884 6.15747 11.308 6.11104C11.3866 6.08238 11.4578 6.03629 11.516 5.9762C11.5743 5.91612 11.6182 5.84362 11.6444 5.76414C11.6707 5.68466 11.6786 5.60027 11.6675 5.51731C11.6565 5.43434 11.6268 5.35496 11.5807 5.28512L10.2006 3.14074C10.1513 3.05897 10.0817 2.99132 9.9986 2.94436C9.91546 2.8974 9.8216 2.87272 9.72611 2.87272C9.63063 2.87272 9.53675 2.8974 9.45361 2.94436C9.37047 2.99132 9.30088 3.05897 9.25158 3.14074L8.97893 3.65965L8.03788 2.10374C7.98778 2.02558 7.91882 1.96126 7.83738 1.91669C7.75593 1.87212 7.66459 1.84874 7.57174 1.84868L7.51338 1.80791Z' fill='#8254C6'/>\r\n<path d='M16.0555 15.9995C15.6679 15.999 15.2836 15.9275 14.9218 15.7885C14.8861 15.7816 14.8523 15.7672 14.8226 15.7462C14.793 15.7253 14.7681 15.6982 14.7498 15.6668C14.7314 15.6355 14.72 15.6006 14.7162 15.5644C14.7125 15.5283 14.7164 15.4918 14.7279 15.4573C14.7394 15.4229 14.7581 15.3912 14.7828 15.3646C14.8075 15.338 14.8376 15.3169 14.8711 15.3028C14.9046 15.2888 14.9407 15.282 14.977 15.283C15.0134 15.284 15.049 15.2928 15.0817 15.3087C15.4086 15.4381 15.758 15.5009 16.1095 15.4934C16.461 15.4858 16.8074 15.4081 17.1285 15.2648C17.4495 15.1215 17.7386 14.9155 17.9789 14.6589C18.2192 14.4022 18.4058 14.1002 18.5277 13.7704C18.5346 13.7347 18.549 13.7009 18.5699 13.6713C18.5909 13.6416 18.618 13.6168 18.6493 13.5984C18.6807 13.5801 18.7156 13.5686 18.7517 13.5649C18.7879 13.5611 18.8244 13.5651 18.8588 13.5766C18.8933 13.5881 18.9249 13.6068 18.9516 13.6315C18.9782 13.6562 18.9993 13.6863 19.0133 13.7198C19.0274 13.7532 19.0342 13.7894 19.0331 13.8257C19.0321 13.862 19.0234 13.8977 19.0074 13.9303C18.7832 14.5346 18.3807 15.0565 17.8533 15.427C17.3259 15.7975 16.6984 15.9991 16.0539 16.0051L16.0555 15.9995Z' fill='#8254C6'/>\r\n<path d='M13.3309 12.0362H13.2429C13.1802 12.0125 13.1294 11.965 13.1014 11.9041C13.0734 11.8433 13.0706 11.7738 13.0934 11.7108C13.2414 11.321 13.4648 10.9642 13.7509 10.6607C14.0369 10.3573 14.3799 10.1132 14.7603 9.94244C15.1407 9.77165 15.551 9.67752 15.9678 9.6654C16.3846 9.65329 16.7998 9.72344 17.1894 9.87184C17.245 9.89894 17.2889 9.94531 17.3128 10.0023C17.3367 10.0593 17.3392 10.1231 17.3196 10.1817C17.3001 10.2404 17.2599 10.29 17.2065 10.3212C17.1531 10.3524 17.0902 10.3632 17.0295 10.3516C16.7021 10.2224 16.3521 10.16 16.0002 10.1681C15.6483 10.1762 15.3016 10.2547 14.9805 10.3989C14.6593 10.543 14.3703 10.75 14.1304 11.0076C13.8905 11.2652 13.7045 11.5681 13.5835 11.8987C13.5591 11.9437 13.5218 11.9804 13.4763 12.0039C13.4308 12.0275 13.3793 12.0368 13.3284 12.0306L13.3309 12.0362Z' fill='#8254C6'/>\r\n<path d='M16.0578 14.9099H15.9699C15.9023 14.9099 15.8374 14.883 15.7895 14.8352C15.7417 14.7874 15.7148 14.7225 15.7148 14.6549C15.7148 14.5872 15.7417 14.5223 15.7895 14.4745C15.8374 14.4267 15.9023 14.3998 15.9699 14.3998C16.1773 14.4092 16.3845 14.3775 16.5796 14.3065C16.7747 14.2355 16.9538 14.1266 17.1066 13.9861C17.2594 13.8455 17.3829 13.6761 17.4699 13.4876C17.557 13.2992 17.6058 13.0953 17.6138 12.8879C17.6138 12.8202 17.6406 12.7553 17.6885 12.7075C17.7363 12.6597 17.8012 12.6328 17.8688 12.6328C17.9365 12.6328 18.0013 12.6597 18.0492 12.7075C18.097 12.7553 18.1239 12.8202 18.1239 12.8879C18.106 13.4261 17.8812 13.9366 17.4964 14.3133C17.1116 14.6899 16.5963 14.9036 16.0578 14.9099Z' fill='#8254C6'/>\r\n<path d='M14.2288 13.0058C14.1953 13.0047 14.1624 12.9969 14.1319 12.9831C14.1014 12.9692 14.0739 12.9494 14.051 12.9249C14.0281 12.9004 14.0103 12.8717 13.9986 12.8403C13.9868 12.8089 13.9814 12.7755 13.9826 12.742C13.9935 12.4681 14.0583 12.199 14.1734 11.9502C14.2885 11.7014 14.4515 11.4777 14.6531 11.292C14.8548 11.1064 15.0911 10.9623 15.3485 10.8681C15.606 10.7739 15.8795 10.7314 16.1533 10.7431C16.221 10.7431 16.2859 10.77 16.3337 10.8178C16.3815 10.8656 16.4084 10.9305 16.4084 10.9982C16.4084 11.0658 16.3815 11.1307 16.3337 11.1785C16.2859 11.2263 16.221 11.2532 16.1533 11.2532C15.7351 11.2367 15.3273 11.3867 15.0194 11.6702C14.7114 11.9537 14.5283 12.3477 14.5103 12.7659C14.5103 12.8336 14.4834 12.8985 14.4356 12.9463C14.3877 12.9941 14.3229 13.021 14.2552 13.021L14.2288 13.0058Z' fill='#8254C6'/>\r\n<path d='M16.056 13.8471H16.0121C15.7507 13.8414 15.5021 13.7327 15.3203 13.5448C15.1385 13.3569 15.0382 13.1048 15.0411 12.8434C15.044 12.5819 15.1499 12.3322 15.3358 12.1483C15.5217 11.9644 15.7726 11.8613 16.0341 11.8613C16.2955 11.8613 16.5464 11.9644 16.7323 12.1483C16.9182 12.3322 17.0241 12.5819 17.027 12.8434C17.0299 13.1048 16.9296 13.3569 16.7478 13.5448C16.566 13.7327 16.3174 13.8414 16.056 13.8471ZM16.056 12.3176C15.9615 12.3202 15.8699 12.3505 15.7926 12.405C15.7153 12.4594 15.6558 12.5355 15.6216 12.6236C15.5874 12.7117 15.58 12.808 15.6003 12.9003C15.6207 12.9926 15.6678 13.0769 15.7359 13.1425C15.8039 13.2081 15.8898 13.2522 15.9828 13.2691C16.0758 13.2861 16.1718 13.2752 16.2586 13.2378C16.3454 13.2004 16.4192 13.1382 16.4708 13.059C16.5224 12.9798 16.5495 12.8871 16.5486 12.7926C16.5479 12.7289 16.5347 12.6659 16.5095 12.6074C16.4843 12.549 16.4477 12.4961 16.4018 12.4518C16.356 12.4076 16.3018 12.373 16.2424 12.35C16.1831 12.3269 16.1197 12.3159 16.056 12.3176Z' fill='#8254C6'/>\r\n<path d='M32.5997 22.8655C32.5006 19.0538 31.5441 15.3135 29.8013 11.9221C28.8198 10.0677 27.3524 8.51515 25.5563 7.43068C23.7601 6.3462 21.7029 5.77066 19.6047 5.76567C17.9819 5.7609 16.3786 6.11915 14.9122 6.81418C13.4458 7.50922 12.1533 8.52344 11.1296 9.78257C10.8745 10.1024 10.6499 10.3982 10.6722 10.6621C10.6879 10.7456 10.7201 10.8252 10.7669 10.8962C10.8138 10.9672 10.8743 11.0281 10.9449 11.0754C11.0567 11.177 11.1989 11.2388 11.3495 11.2513C11.6485 11.2513 11.9563 10.9315 12.229 10.6621L12.4576 10.4334C13.1113 9.71802 13.8456 9.0808 14.646 8.53448C16.1275 7.60952 17.839 7.11917 19.5855 7.11929C21.423 7.13786 23.2219 7.64925 24.7943 8.6001C26.3668 9.55094 27.6552 10.9064 28.5252 12.525C30.6176 16.322 31.1005 20.5204 31.3116 24.4965C31.3732 25.6567 31.3556 26.8152 31.3116 27.925V29.5952L23.7959 28.2152L24.0686 27.9426C26.9165 24.9843 28.0415 21.3416 27.4882 16.8289C27.3739 15.9494 27.0085 15.7216 26.4864 15.7216H26.1434C25.9104 15.7554 25.6753 15.773 25.4398 15.7743C24.1453 15.7546 22.8994 15.2783 21.9218 14.4295C21.315 13.9498 20.9623 13.6564 20.7177 13.6564C20.473 13.6564 20.19 14.0345 19.6783 14.7197C18.3247 16.5395 16.8127 17.4182 15.0457 17.4182C14.1985 17.3983 13.3618 17.2255 12.576 16.9081C12.3858 16.8295 12.1834 16.7848 11.9779 16.7762C11.818 16.7762 11.3447 16.7762 11.2743 17.6557C10.9545 21.6374 11.9339 24.8196 14.2454 27.3949C14.3637 27.527 14.4752 27.6649 14.5796 27.8082L14.7395 28.0017L14.9594 28.2744L8.05054 29.5313H7.9642C7.77071 29.5313 7.74433 29.3554 7.72434 29.1267C7.35617 25.2129 7.67739 21.2649 8.67339 17.4622C8.84929 16.7154 8.67339 16.4779 8.25123 16.3548C8.16604 16.3268 8.07706 16.312 7.98738 16.3108C7.87305 16.3108 7.53005 16.3108 7.33656 17.0488C6.15978 21.3244 5.84024 25.7905 6.3963 30.1901C6.40152 30.2721 6.40152 30.3543 6.3963 30.4363C7.89065 30.1165 9.40257 29.8383 10.9233 29.6456C11.2412 29.5567 11.5639 29.4862 11.8899 29.4345C12.1879 29.4031 12.4823 29.3442 12.7694 29.2586C13.259 29.1113 13.7629 29.017 14.2726 28.9772C14.3186 28.964 14.3673 28.964 14.4133 28.9772C14.9456 28.7718 15.5269 28.7289 16.0836 28.854H16.3826C16.4398 28.8698 16.49 28.9045 16.5252 28.9524C16.5603 29.0002 16.5782 29.0586 16.5761 29.1179C17.582 29.3461 18.6131 29.4437 19.6439 29.4081C20.7854 29.2624 21.9027 28.9667 22.9668 28.5286C23.0234 28.507 23.0861 28.507 23.1427 28.5286C23.6433 28.5101 24.1417 28.6033 24.6019 28.8013C24.761 28.7973 24.9193 28.8245 25.068 28.8812C27.4762 29.7607 30.0691 29.8743 32.487 30.6402C32.4769 30.532 32.4769 30.4231 32.487 30.3148C32.487 29.4353 32.5397 28.4951 32.5749 27.6076C32.5997 26.1004 32.6788 24.4654 32.5997 22.8655ZM22.667 27.263C21.7355 27.9973 20.5914 28.4105 19.4056 28.4407C18.4159 28.436 17.447 28.1561 16.6073 27.6323C14.0407 26.0764 12.1506 21.9012 12.6431 18.8422V18.6023L12.863 18.6639C13.5112 18.8379 14.1787 18.9296 14.8499 18.9365C15.963 18.9098 17.0549 18.627 18.0412 18.1103C19.0274 17.5935 19.8814 16.8566 20.537 15.9566L20.6249 15.8423L26.0746 17.6812V17.7868C26.9006 20.7139 25.1951 25.4344 22.6638 27.3013L22.667 27.263Z' fill='#8254C6'/>\r\n<path d='M6.60938 30.3646L16.1287 28.6057C16.1287 28.6057 18.6873 30.3023 23.0048 28.3242C32.0676 30.3726 32.0788 30.4686 32.0788 30.4686' stroke='#8254C6' stroke-width='0.262956' stroke-miterlimit='10'/>\r\n<path d='M8.91211 14.4964L9.59812 12.8877' stroke='#8254C6' stroke-width='0.797349' stroke-miterlimit='10' stroke-linecap='round'/>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_16159_32828'>\r\n<rect width='34.778' height='34.778' fill='white' transform='translate(0.113281 0.111328)'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
                          },
                          {
                            value: "stomach_ache",
                            meaning: "\u062f\u0644\u200c\u062f\u0631\u062f",
                            icon: "\ud83e\udd22"
                          },
                          {
                            value: "chest_pain",
                            meaning:
                              "\u062f\u0631\u062f \u0642\u0641\u0633\u0647 \u0633\u06cc\u0646\u0647",
                            icon: "\ud83d\udc94"
                          },
                          {
                            value: "contusion",
                            meaning: "\u06a9\u0628\u0648\u062f\u06cc",
                            icon: "\ud83e\ude79"
                          },
                          {
                            value: "back_ache",
                            meaning: "\u06a9\u0645\u0631\u062f\u0631\u062f",
                            icon: "\ud83d\udeb6\u200d\u2642\ufe0f\ud83d\udca2"
                          },
                          {
                            value: "foot_ache",
                            meaning: "\u062f\u0631\u062f \u067e\u0627",
                            icon: "\ud83e\uddb6\ud83d\udca5"
                          },
                          {
                            value: "nausea",
                            meaning:
                              "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639",
                            icon: "\ud83e\udd2e"
                          }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.choices3)}
                  list={generateStateValueProp($state, ["choices3", "list"])}
                  onListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "choices3",
                      "list"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox4"}
                data-plasmic-override={overrides.selectionBox4}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox4)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3IJiT
                  )}
                >
                  {
                    "\u062a\u0631\u0634\u062d\u0627\u062a \u0648\u0627\u0698\u0646\u062a \u0628\u0647 \u0686\u0647 \u0635\u0648\u0631\u062a\u0647\u061f"
                  }
                </div>
                <Choices
                  data-plasmic-name={"choices4"}
                  data-plasmic-override={overrides.choices4}
                  beforList={(() => {
                    try {
                      return $state.signs.vaginal;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          {
                            value: "headache",
                            meaning: "\u0633\u0631\u062f\u0631\u062f",
                            icon: "<svg width='35' height='35' viewBox='0 0 35 35' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_16159_32828)'>\r\n<path d='M4.98039 9.10027H4.91003C4.82972 9.08719 4.75405 9.0539 4.69015 9.00352L1.17217 6.2435C1.11967 6.20828 1.07462 6.16306 1.0396 6.11042C1.00458 6.05778 0.980266 5.99876 0.968053 5.93673C0.95584 5.8747 0.955964 5.81087 0.968419 5.74889C0.980874 5.68691 1.00542 5.62799 1.04064 5.57549C1.07587 5.52299 1.12109 5.47794 1.17373 5.44292C1.22636 5.4079 1.28538 5.38359 1.34741 5.37137C1.40944 5.35916 1.47327 5.35928 1.53526 5.37174C1.59724 5.38419 1.65616 5.40874 1.70866 5.44396H1.76143L4.61979 7.68508L4.84846 6.05001C4.86447 5.93542 4.92135 5.83048 5.00862 5.75452C5.0959 5.67856 5.20769 5.6367 5.3234 5.63665H5.39375C5.47324 5.64713 5.54883 5.67737 5.61362 5.7246L8.83978 8.22077C8.89784 8.25377 8.9483 8.29864 8.98785 8.35246C9.0274 8.40628 9.05514 8.46783 9.06929 8.5331C9.08343 8.59838 9.08365 8.6659 9.06993 8.73126C9.05621 8.79662 9.02885 8.85835 8.98966 8.91243C8.95046 8.9665 8.9003 9.0117 8.84245 9.04507C8.7846 9.07845 8.72036 9.09924 8.65392 9.1061C8.58749 9.11297 8.52035 9.10574 8.4569 9.08489C8.39345 9.06405 8.33512 9.03006 8.2857 8.98513L5.64721 7.05104L5.40734 8.71249C5.3875 8.81514 5.33465 8.9085 5.25686 8.97836C5.17906 9.04821 5.08058 9.09074 4.97639 9.09947L4.98039 9.10027Z' fill='#8254C6'/>\r\n<path d='M11.0898 6.07609C11.0094 6.07631 10.9301 6.05629 10.8594 6.01787C10.7887 5.97945 10.7288 5.92386 10.6853 5.85622L9.75378 4.39706L9.39318 5.03669C9.3525 5.11344 9.29174 5.1777 9.21739 5.22262C9.14304 5.26754 9.05789 5.29144 8.97102 5.29174C8.88699 5.29281 8.80409 5.27236 8.7302 5.23233C8.6563 5.19231 8.59388 5.13404 8.54887 5.06308L7.13368 2.68124C7.08823 2.62737 7.05486 2.56437 7.03584 2.4965C7.01682 2.42863 7.0126 2.35747 7.02345 2.28783C7.03429 2.21819 7.05995 2.15168 7.09871 2.09281C7.13746 2.03394 7.1884 1.98407 7.24808 1.94657C7.30777 1.90907 7.37479 1.88482 7.44465 1.87546C7.51451 1.86609 7.58557 1.87184 7.65302 1.89229C7.72047 1.91274 7.78275 1.94744 7.83564 1.99402C7.88853 2.04061 7.9308 2.09801 7.9596 2.16233L8.97023 3.82378L9.32203 3.19934C9.36446 3.12757 9.42486 3.0681 9.49727 3.02678C9.56969 2.98547 9.65162 2.96374 9.73499 2.96374C9.81836 2.96374 9.90029 2.98547 9.97271 3.02678C10.0451 3.0681 10.1055 3.12757 10.148 3.19934L11.528 5.34371C11.5626 5.39723 11.5863 5.45713 11.5976 5.51991C11.6088 5.58268 11.6075 5.64707 11.5935 5.70931C11.5796 5.77155 11.5534 5.83039 11.5165 5.88238C11.4796 5.93438 11.4326 5.97849 11.3784 6.01213L11.2817 6.0649C11.2185 6.08096 11.1526 6.08395 11.0882 6.0737L11.0898 6.07609Z' fill='#8254C6'/>\r\n<path d='M7.54056 1.9894C7.61081 1.9891 7.67998 2.00671 7.74153 2.04057C7.80309 2.07442 7.855 2.12341 7.89236 2.18289L8.83262 3.7388L8.95575 3.94109L9.07009 3.73001L9.34273 3.2111C9.37929 3.14928 9.43134 3.09805 9.49373 3.06247C9.55612 3.02688 9.6267 3.00816 9.69853 3.00816C9.77035 3.00816 9.84094 3.02688 9.90333 3.06247C9.96572 3.09805 10.0178 3.14928 10.0543 3.2111L11.4343 5.35548C11.4638 5.40109 11.484 5.45207 11.4938 5.50549C11.5035 5.55891 11.5027 5.61374 11.4912 5.66683C11.4798 5.71992 11.458 5.77023 11.4271 5.8149C11.3962 5.85957 11.3568 5.89771 11.3112 5.92715H11.2233V6.03269V5.93594C11.1344 5.9687 11.0371 5.96997 10.9474 5.93956C10.8578 5.90914 10.7813 5.84888 10.7307 5.76884L9.85124 4.40962L9.72811 4.21613L9.61378 4.41841L9.30596 4.97249C9.26877 5.0362 9.21553 5.08905 9.15156 5.12578C9.0876 5.16251 9.01512 5.18184 8.94136 5.18184C8.86759 5.18184 8.79512 5.16251 8.73115 5.12578C8.66718 5.08905 8.61396 5.0362 8.57677 4.97249L7.16158 2.58186C7.12221 2.51919 7.10038 2.44709 7.09839 2.3731C7.0964 2.29911 7.11432 2.22594 7.15027 2.16124C7.18621 2.09654 7.23887 2.04267 7.30275 2.00527C7.36662 1.96787 7.43936 1.94831 7.51338 1.94863M7.51338 1.80791C7.40973 1.80456 7.30721 1.83037 7.2175 1.8824C7.12779 1.93443 7.05448 2.0106 7.00592 2.10223C6.95735 2.19386 6.93548 2.29728 6.94278 2.40073C6.95009 2.50418 6.98628 2.60351 7.04724 2.6874L8.49762 5.08603C8.54638 5.16873 8.61578 5.23733 8.69904 5.28513C8.7823 5.33292 8.87654 5.35827 8.97254 5.35867C9.06935 5.3591 9.16459 5.33415 9.24876 5.28632C9.33293 5.23848 9.4031 5.16943 9.45227 5.08603L9.76009 4.53195L10.6396 5.89117C10.7083 5.99956 10.8125 6.08073 10.9344 6.12083C11.0563 6.16093 11.1884 6.15747 11.308 6.11104C11.3866 6.08238 11.4578 6.03629 11.516 5.9762C11.5743 5.91612 11.6182 5.84362 11.6444 5.76414C11.6707 5.68466 11.6786 5.60027 11.6675 5.51731C11.6565 5.43434 11.6268 5.35496 11.5807 5.28512L10.2006 3.14074C10.1513 3.05897 10.0817 2.99132 9.9986 2.94436C9.91546 2.8974 9.8216 2.87272 9.72611 2.87272C9.63063 2.87272 9.53675 2.8974 9.45361 2.94436C9.37047 2.99132 9.30088 3.05897 9.25158 3.14074L8.97893 3.65965L8.03788 2.10374C7.98778 2.02558 7.91882 1.96126 7.83738 1.91669C7.75593 1.87212 7.66459 1.84874 7.57174 1.84868L7.51338 1.80791Z' fill='#8254C6'/>\r\n<path d='M16.0555 15.9995C15.6679 15.999 15.2836 15.9275 14.9218 15.7885C14.8861 15.7816 14.8523 15.7672 14.8226 15.7462C14.793 15.7253 14.7681 15.6982 14.7498 15.6668C14.7314 15.6355 14.72 15.6006 14.7162 15.5644C14.7125 15.5283 14.7164 15.4918 14.7279 15.4573C14.7394 15.4229 14.7581 15.3912 14.7828 15.3646C14.8075 15.338 14.8376 15.3169 14.8711 15.3028C14.9046 15.2888 14.9407 15.282 14.977 15.283C15.0134 15.284 15.049 15.2928 15.0817 15.3087C15.4086 15.4381 15.758 15.5009 16.1095 15.4934C16.461 15.4858 16.8074 15.4081 17.1285 15.2648C17.4495 15.1215 17.7386 14.9155 17.9789 14.6589C18.2192 14.4022 18.4058 14.1002 18.5277 13.7704C18.5346 13.7347 18.549 13.7009 18.5699 13.6713C18.5909 13.6416 18.618 13.6168 18.6493 13.5984C18.6807 13.5801 18.7156 13.5686 18.7517 13.5649C18.7879 13.5611 18.8244 13.5651 18.8588 13.5766C18.8933 13.5881 18.9249 13.6068 18.9516 13.6315C18.9782 13.6562 18.9993 13.6863 19.0133 13.7198C19.0274 13.7532 19.0342 13.7894 19.0331 13.8257C19.0321 13.862 19.0234 13.8977 19.0074 13.9303C18.7832 14.5346 18.3807 15.0565 17.8533 15.427C17.3259 15.7975 16.6984 15.9991 16.0539 16.0051L16.0555 15.9995Z' fill='#8254C6'/>\r\n<path d='M13.3309 12.0362H13.2429C13.1802 12.0125 13.1294 11.965 13.1014 11.9041C13.0734 11.8433 13.0706 11.7738 13.0934 11.7108C13.2414 11.321 13.4648 10.9642 13.7509 10.6607C14.0369 10.3573 14.3799 10.1132 14.7603 9.94244C15.1407 9.77165 15.551 9.67752 15.9678 9.6654C16.3846 9.65329 16.7998 9.72344 17.1894 9.87184C17.245 9.89894 17.2889 9.94531 17.3128 10.0023C17.3367 10.0593 17.3392 10.1231 17.3196 10.1817C17.3001 10.2404 17.2599 10.29 17.2065 10.3212C17.1531 10.3524 17.0902 10.3632 17.0295 10.3516C16.7021 10.2224 16.3521 10.16 16.0002 10.1681C15.6483 10.1762 15.3016 10.2547 14.9805 10.3989C14.6593 10.543 14.3703 10.75 14.1304 11.0076C13.8905 11.2652 13.7045 11.5681 13.5835 11.8987C13.5591 11.9437 13.5218 11.9804 13.4763 12.0039C13.4308 12.0275 13.3793 12.0368 13.3284 12.0306L13.3309 12.0362Z' fill='#8254C6'/>\r\n<path d='M16.0578 14.9099H15.9699C15.9023 14.9099 15.8374 14.883 15.7895 14.8352C15.7417 14.7874 15.7148 14.7225 15.7148 14.6549C15.7148 14.5872 15.7417 14.5223 15.7895 14.4745C15.8374 14.4267 15.9023 14.3998 15.9699 14.3998C16.1773 14.4092 16.3845 14.3775 16.5796 14.3065C16.7747 14.2355 16.9538 14.1266 17.1066 13.9861C17.2594 13.8455 17.3829 13.6761 17.4699 13.4876C17.557 13.2992 17.6058 13.0953 17.6138 12.8879C17.6138 12.8202 17.6406 12.7553 17.6885 12.7075C17.7363 12.6597 17.8012 12.6328 17.8688 12.6328C17.9365 12.6328 18.0013 12.6597 18.0492 12.7075C18.097 12.7553 18.1239 12.8202 18.1239 12.8879C18.106 13.4261 17.8812 13.9366 17.4964 14.3133C17.1116 14.6899 16.5963 14.9036 16.0578 14.9099Z' fill='#8254C6'/>\r\n<path d='M14.2288 13.0058C14.1953 13.0047 14.1624 12.9969 14.1319 12.9831C14.1014 12.9692 14.0739 12.9494 14.051 12.9249C14.0281 12.9004 14.0103 12.8717 13.9986 12.8403C13.9868 12.8089 13.9814 12.7755 13.9826 12.742C13.9935 12.4681 14.0583 12.199 14.1734 11.9502C14.2885 11.7014 14.4515 11.4777 14.6531 11.292C14.8548 11.1064 15.0911 10.9623 15.3485 10.8681C15.606 10.7739 15.8795 10.7314 16.1533 10.7431C16.221 10.7431 16.2859 10.77 16.3337 10.8178C16.3815 10.8656 16.4084 10.9305 16.4084 10.9982C16.4084 11.0658 16.3815 11.1307 16.3337 11.1785C16.2859 11.2263 16.221 11.2532 16.1533 11.2532C15.7351 11.2367 15.3273 11.3867 15.0194 11.6702C14.7114 11.9537 14.5283 12.3477 14.5103 12.7659C14.5103 12.8336 14.4834 12.8985 14.4356 12.9463C14.3877 12.9941 14.3229 13.021 14.2552 13.021L14.2288 13.0058Z' fill='#8254C6'/>\r\n<path d='M16.056 13.8471H16.0121C15.7507 13.8414 15.5021 13.7327 15.3203 13.5448C15.1385 13.3569 15.0382 13.1048 15.0411 12.8434C15.044 12.5819 15.1499 12.3322 15.3358 12.1483C15.5217 11.9644 15.7726 11.8613 16.0341 11.8613C16.2955 11.8613 16.5464 11.9644 16.7323 12.1483C16.9182 12.3322 17.0241 12.5819 17.027 12.8434C17.0299 13.1048 16.9296 13.3569 16.7478 13.5448C16.566 13.7327 16.3174 13.8414 16.056 13.8471ZM16.056 12.3176C15.9615 12.3202 15.8699 12.3505 15.7926 12.405C15.7153 12.4594 15.6558 12.5355 15.6216 12.6236C15.5874 12.7117 15.58 12.808 15.6003 12.9003C15.6207 12.9926 15.6678 13.0769 15.7359 13.1425C15.8039 13.2081 15.8898 13.2522 15.9828 13.2691C16.0758 13.2861 16.1718 13.2752 16.2586 13.2378C16.3454 13.2004 16.4192 13.1382 16.4708 13.059C16.5224 12.9798 16.5495 12.8871 16.5486 12.7926C16.5479 12.7289 16.5347 12.6659 16.5095 12.6074C16.4843 12.549 16.4477 12.4961 16.4018 12.4518C16.356 12.4076 16.3018 12.373 16.2424 12.35C16.1831 12.3269 16.1197 12.3159 16.056 12.3176Z' fill='#8254C6'/>\r\n<path d='M32.5997 22.8655C32.5006 19.0538 31.5441 15.3135 29.8013 11.9221C28.8198 10.0677 27.3524 8.51515 25.5563 7.43068C23.7601 6.3462 21.7029 5.77066 19.6047 5.76567C17.9819 5.7609 16.3786 6.11915 14.9122 6.81418C13.4458 7.50922 12.1533 8.52344 11.1296 9.78257C10.8745 10.1024 10.6499 10.3982 10.6722 10.6621C10.6879 10.7456 10.7201 10.8252 10.7669 10.8962C10.8138 10.9672 10.8743 11.0281 10.9449 11.0754C11.0567 11.177 11.1989 11.2388 11.3495 11.2513C11.6485 11.2513 11.9563 10.9315 12.229 10.6621L12.4576 10.4334C13.1113 9.71802 13.8456 9.0808 14.646 8.53448C16.1275 7.60952 17.839 7.11917 19.5855 7.11929C21.423 7.13786 23.2219 7.64925 24.7943 8.6001C26.3668 9.55094 27.6552 10.9064 28.5252 12.525C30.6176 16.322 31.1005 20.5204 31.3116 24.4965C31.3732 25.6567 31.3556 26.8152 31.3116 27.925V29.5952L23.7959 28.2152L24.0686 27.9426C26.9165 24.9843 28.0415 21.3416 27.4882 16.8289C27.3739 15.9494 27.0085 15.7216 26.4864 15.7216H26.1434C25.9104 15.7554 25.6753 15.773 25.4398 15.7743C24.1453 15.7546 22.8994 15.2783 21.9218 14.4295C21.315 13.9498 20.9623 13.6564 20.7177 13.6564C20.473 13.6564 20.19 14.0345 19.6783 14.7197C18.3247 16.5395 16.8127 17.4182 15.0457 17.4182C14.1985 17.3983 13.3618 17.2255 12.576 16.9081C12.3858 16.8295 12.1834 16.7848 11.9779 16.7762C11.818 16.7762 11.3447 16.7762 11.2743 17.6557C10.9545 21.6374 11.9339 24.8196 14.2454 27.3949C14.3637 27.527 14.4752 27.6649 14.5796 27.8082L14.7395 28.0017L14.9594 28.2744L8.05054 29.5313H7.9642C7.77071 29.5313 7.74433 29.3554 7.72434 29.1267C7.35617 25.2129 7.67739 21.2649 8.67339 17.4622C8.84929 16.7154 8.67339 16.4779 8.25123 16.3548C8.16604 16.3268 8.07706 16.312 7.98738 16.3108C7.87305 16.3108 7.53005 16.3108 7.33656 17.0488C6.15978 21.3244 5.84024 25.7905 6.3963 30.1901C6.40152 30.2721 6.40152 30.3543 6.3963 30.4363C7.89065 30.1165 9.40257 29.8383 10.9233 29.6456C11.2412 29.5567 11.5639 29.4862 11.8899 29.4345C12.1879 29.4031 12.4823 29.3442 12.7694 29.2586C13.259 29.1113 13.7629 29.017 14.2726 28.9772C14.3186 28.964 14.3673 28.964 14.4133 28.9772C14.9456 28.7718 15.5269 28.7289 16.0836 28.854H16.3826C16.4398 28.8698 16.49 28.9045 16.5252 28.9524C16.5603 29.0002 16.5782 29.0586 16.5761 29.1179C17.582 29.3461 18.6131 29.4437 19.6439 29.4081C20.7854 29.2624 21.9027 28.9667 22.9668 28.5286C23.0234 28.507 23.0861 28.507 23.1427 28.5286C23.6433 28.5101 24.1417 28.6033 24.6019 28.8013C24.761 28.7973 24.9193 28.8245 25.068 28.8812C27.4762 29.7607 30.0691 29.8743 32.487 30.6402C32.4769 30.532 32.4769 30.4231 32.487 30.3148C32.487 29.4353 32.5397 28.4951 32.5749 27.6076C32.5997 26.1004 32.6788 24.4654 32.5997 22.8655ZM22.667 27.263C21.7355 27.9973 20.5914 28.4105 19.4056 28.4407C18.4159 28.436 17.447 28.1561 16.6073 27.6323C14.0407 26.0764 12.1506 21.9012 12.6431 18.8422V18.6023L12.863 18.6639C13.5112 18.8379 14.1787 18.9296 14.8499 18.9365C15.963 18.9098 17.0549 18.627 18.0412 18.1103C19.0274 17.5935 19.8814 16.8566 20.537 15.9566L20.6249 15.8423L26.0746 17.6812V17.7868C26.9006 20.7139 25.1951 25.4344 22.6638 27.3013L22.667 27.263Z' fill='#8254C6'/>\r\n<path d='M6.60938 30.3646L16.1287 28.6057C16.1287 28.6057 18.6873 30.3023 23.0048 28.3242C32.0676 30.3726 32.0788 30.4686 32.0788 30.4686' stroke='#8254C6' stroke-width='0.262956' stroke-miterlimit='10'/>\r\n<path d='M8.91211 14.4964L9.59812 12.8877' stroke='#8254C6' stroke-width='0.797349' stroke-miterlimit='10' stroke-linecap='round'/>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_16159_32828'>\r\n<rect width='34.778' height='34.778' fill='white' transform='translate(0.113281 0.111328)'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
                          },
                          {
                            value: "stomach_ache",
                            meaning: "\u062f\u0644\u200c\u062f\u0631\u062f",
                            icon: "\ud83e\udd22"
                          },
                          {
                            value: "chest_pain",
                            meaning:
                              "\u062f\u0631\u062f \u0642\u0641\u0633\u0647 \u0633\u06cc\u0646\u0647",
                            icon: "\ud83d\udc94"
                          },
                          {
                            value: "contusion",
                            meaning: "\u06a9\u0628\u0648\u062f\u06cc",
                            icon: "\ud83e\ude79"
                          },
                          {
                            value: "back_ache",
                            meaning: "\u06a9\u0645\u0631\u062f\u0631\u062f",
                            icon: "\ud83d\udeb6\u200d\u2642\ufe0f\ud83d\udca2"
                          },
                          {
                            value: "foot_ache",
                            meaning: "\u062f\u0631\u062f \u067e\u0627",
                            icon: "\ud83e\uddb6\ud83d\udca5"
                          },
                          {
                            value: "nausea",
                            meaning:
                              "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639",
                            icon: "\ud83e\udd2e"
                          }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.choices4)}
                  list={generateStateValueProp($state, ["choices4", "list"])}
                  onListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "choices4",
                      "list"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox5"}
                data-plasmic-override={overrides.selectionBox5}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox5)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jDiy
                  )}
                >
                  {
                    "\u0628\u06cc\u0645\u0627\u0631\u06cc \u0632\u0646\u0627\u0646"
                  }
                </div>
                <Choices
                  data-plasmic-name={"choices5"}
                  data-plasmic-override={overrides.choices5}
                  beforList={(() => {
                    try {
                      return $state.signs.womens;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          {
                            value: "headache",
                            meaning: "\u0633\u0631\u062f\u0631\u062f",
                            icon: "<svg width='35' height='35' viewBox='0 0 35 35' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_16159_32828)'>\r\n<path d='M4.98039 9.10027H4.91003C4.82972 9.08719 4.75405 9.0539 4.69015 9.00352L1.17217 6.2435C1.11967 6.20828 1.07462 6.16306 1.0396 6.11042C1.00458 6.05778 0.980266 5.99876 0.968053 5.93673C0.95584 5.8747 0.955964 5.81087 0.968419 5.74889C0.980874 5.68691 1.00542 5.62799 1.04064 5.57549C1.07587 5.52299 1.12109 5.47794 1.17373 5.44292C1.22636 5.4079 1.28538 5.38359 1.34741 5.37137C1.40944 5.35916 1.47327 5.35928 1.53526 5.37174C1.59724 5.38419 1.65616 5.40874 1.70866 5.44396H1.76143L4.61979 7.68508L4.84846 6.05001C4.86447 5.93542 4.92135 5.83048 5.00862 5.75452C5.0959 5.67856 5.20769 5.6367 5.3234 5.63665H5.39375C5.47324 5.64713 5.54883 5.67737 5.61362 5.7246L8.83978 8.22077C8.89784 8.25377 8.9483 8.29864 8.98785 8.35246C9.0274 8.40628 9.05514 8.46783 9.06929 8.5331C9.08343 8.59838 9.08365 8.6659 9.06993 8.73126C9.05621 8.79662 9.02885 8.85835 8.98966 8.91243C8.95046 8.9665 8.9003 9.0117 8.84245 9.04507C8.7846 9.07845 8.72036 9.09924 8.65392 9.1061C8.58749 9.11297 8.52035 9.10574 8.4569 9.08489C8.39345 9.06405 8.33512 9.03006 8.2857 8.98513L5.64721 7.05104L5.40734 8.71249C5.3875 8.81514 5.33465 8.9085 5.25686 8.97836C5.17906 9.04821 5.08058 9.09074 4.97639 9.09947L4.98039 9.10027Z' fill='#8254C6'/>\r\n<path d='M11.0898 6.07609C11.0094 6.07631 10.9301 6.05629 10.8594 6.01787C10.7887 5.97945 10.7288 5.92386 10.6853 5.85622L9.75378 4.39706L9.39318 5.03669C9.3525 5.11344 9.29174 5.1777 9.21739 5.22262C9.14304 5.26754 9.05789 5.29144 8.97102 5.29174C8.88699 5.29281 8.80409 5.27236 8.7302 5.23233C8.6563 5.19231 8.59388 5.13404 8.54887 5.06308L7.13368 2.68124C7.08823 2.62737 7.05486 2.56437 7.03584 2.4965C7.01682 2.42863 7.0126 2.35747 7.02345 2.28783C7.03429 2.21819 7.05995 2.15168 7.09871 2.09281C7.13746 2.03394 7.1884 1.98407 7.24808 1.94657C7.30777 1.90907 7.37479 1.88482 7.44465 1.87546C7.51451 1.86609 7.58557 1.87184 7.65302 1.89229C7.72047 1.91274 7.78275 1.94744 7.83564 1.99402C7.88853 2.04061 7.9308 2.09801 7.9596 2.16233L8.97023 3.82378L9.32203 3.19934C9.36446 3.12757 9.42486 3.0681 9.49727 3.02678C9.56969 2.98547 9.65162 2.96374 9.73499 2.96374C9.81836 2.96374 9.90029 2.98547 9.97271 3.02678C10.0451 3.0681 10.1055 3.12757 10.148 3.19934L11.528 5.34371C11.5626 5.39723 11.5863 5.45713 11.5976 5.51991C11.6088 5.58268 11.6075 5.64707 11.5935 5.70931C11.5796 5.77155 11.5534 5.83039 11.5165 5.88238C11.4796 5.93438 11.4326 5.97849 11.3784 6.01213L11.2817 6.0649C11.2185 6.08096 11.1526 6.08395 11.0882 6.0737L11.0898 6.07609Z' fill='#8254C6'/>\r\n<path d='M7.54056 1.9894C7.61081 1.9891 7.67998 2.00671 7.74153 2.04057C7.80309 2.07442 7.855 2.12341 7.89236 2.18289L8.83262 3.7388L8.95575 3.94109L9.07009 3.73001L9.34273 3.2111C9.37929 3.14928 9.43134 3.09805 9.49373 3.06247C9.55612 3.02688 9.6267 3.00816 9.69853 3.00816C9.77035 3.00816 9.84094 3.02688 9.90333 3.06247C9.96572 3.09805 10.0178 3.14928 10.0543 3.2111L11.4343 5.35548C11.4638 5.40109 11.484 5.45207 11.4938 5.50549C11.5035 5.55891 11.5027 5.61374 11.4912 5.66683C11.4798 5.71992 11.458 5.77023 11.4271 5.8149C11.3962 5.85957 11.3568 5.89771 11.3112 5.92715H11.2233V6.03269V5.93594C11.1344 5.9687 11.0371 5.96997 10.9474 5.93956C10.8578 5.90914 10.7813 5.84888 10.7307 5.76884L9.85124 4.40962L9.72811 4.21613L9.61378 4.41841L9.30596 4.97249C9.26877 5.0362 9.21553 5.08905 9.15156 5.12578C9.0876 5.16251 9.01512 5.18184 8.94136 5.18184C8.86759 5.18184 8.79512 5.16251 8.73115 5.12578C8.66718 5.08905 8.61396 5.0362 8.57677 4.97249L7.16158 2.58186C7.12221 2.51919 7.10038 2.44709 7.09839 2.3731C7.0964 2.29911 7.11432 2.22594 7.15027 2.16124C7.18621 2.09654 7.23887 2.04267 7.30275 2.00527C7.36662 1.96787 7.43936 1.94831 7.51338 1.94863M7.51338 1.80791C7.40973 1.80456 7.30721 1.83037 7.2175 1.8824C7.12779 1.93443 7.05448 2.0106 7.00592 2.10223C6.95735 2.19386 6.93548 2.29728 6.94278 2.40073C6.95009 2.50418 6.98628 2.60351 7.04724 2.6874L8.49762 5.08603C8.54638 5.16873 8.61578 5.23733 8.69904 5.28513C8.7823 5.33292 8.87654 5.35827 8.97254 5.35867C9.06935 5.3591 9.16459 5.33415 9.24876 5.28632C9.33293 5.23848 9.4031 5.16943 9.45227 5.08603L9.76009 4.53195L10.6396 5.89117C10.7083 5.99956 10.8125 6.08073 10.9344 6.12083C11.0563 6.16093 11.1884 6.15747 11.308 6.11104C11.3866 6.08238 11.4578 6.03629 11.516 5.9762C11.5743 5.91612 11.6182 5.84362 11.6444 5.76414C11.6707 5.68466 11.6786 5.60027 11.6675 5.51731C11.6565 5.43434 11.6268 5.35496 11.5807 5.28512L10.2006 3.14074C10.1513 3.05897 10.0817 2.99132 9.9986 2.94436C9.91546 2.8974 9.8216 2.87272 9.72611 2.87272C9.63063 2.87272 9.53675 2.8974 9.45361 2.94436C9.37047 2.99132 9.30088 3.05897 9.25158 3.14074L8.97893 3.65965L8.03788 2.10374C7.98778 2.02558 7.91882 1.96126 7.83738 1.91669C7.75593 1.87212 7.66459 1.84874 7.57174 1.84868L7.51338 1.80791Z' fill='#8254C6'/>\r\n<path d='M16.0555 15.9995C15.6679 15.999 15.2836 15.9275 14.9218 15.7885C14.8861 15.7816 14.8523 15.7672 14.8226 15.7462C14.793 15.7253 14.7681 15.6982 14.7498 15.6668C14.7314 15.6355 14.72 15.6006 14.7162 15.5644C14.7125 15.5283 14.7164 15.4918 14.7279 15.4573C14.7394 15.4229 14.7581 15.3912 14.7828 15.3646C14.8075 15.338 14.8376 15.3169 14.8711 15.3028C14.9046 15.2888 14.9407 15.282 14.977 15.283C15.0134 15.284 15.049 15.2928 15.0817 15.3087C15.4086 15.4381 15.758 15.5009 16.1095 15.4934C16.461 15.4858 16.8074 15.4081 17.1285 15.2648C17.4495 15.1215 17.7386 14.9155 17.9789 14.6589C18.2192 14.4022 18.4058 14.1002 18.5277 13.7704C18.5346 13.7347 18.549 13.7009 18.5699 13.6713C18.5909 13.6416 18.618 13.6168 18.6493 13.5984C18.6807 13.5801 18.7156 13.5686 18.7517 13.5649C18.7879 13.5611 18.8244 13.5651 18.8588 13.5766C18.8933 13.5881 18.9249 13.6068 18.9516 13.6315C18.9782 13.6562 18.9993 13.6863 19.0133 13.7198C19.0274 13.7532 19.0342 13.7894 19.0331 13.8257C19.0321 13.862 19.0234 13.8977 19.0074 13.9303C18.7832 14.5346 18.3807 15.0565 17.8533 15.427C17.3259 15.7975 16.6984 15.9991 16.0539 16.0051L16.0555 15.9995Z' fill='#8254C6'/>\r\n<path d='M13.3309 12.0362H13.2429C13.1802 12.0125 13.1294 11.965 13.1014 11.9041C13.0734 11.8433 13.0706 11.7738 13.0934 11.7108C13.2414 11.321 13.4648 10.9642 13.7509 10.6607C14.0369 10.3573 14.3799 10.1132 14.7603 9.94244C15.1407 9.77165 15.551 9.67752 15.9678 9.6654C16.3846 9.65329 16.7998 9.72344 17.1894 9.87184C17.245 9.89894 17.2889 9.94531 17.3128 10.0023C17.3367 10.0593 17.3392 10.1231 17.3196 10.1817C17.3001 10.2404 17.2599 10.29 17.2065 10.3212C17.1531 10.3524 17.0902 10.3632 17.0295 10.3516C16.7021 10.2224 16.3521 10.16 16.0002 10.1681C15.6483 10.1762 15.3016 10.2547 14.9805 10.3989C14.6593 10.543 14.3703 10.75 14.1304 11.0076C13.8905 11.2652 13.7045 11.5681 13.5835 11.8987C13.5591 11.9437 13.5218 11.9804 13.4763 12.0039C13.4308 12.0275 13.3793 12.0368 13.3284 12.0306L13.3309 12.0362Z' fill='#8254C6'/>\r\n<path d='M16.0578 14.9099H15.9699C15.9023 14.9099 15.8374 14.883 15.7895 14.8352C15.7417 14.7874 15.7148 14.7225 15.7148 14.6549C15.7148 14.5872 15.7417 14.5223 15.7895 14.4745C15.8374 14.4267 15.9023 14.3998 15.9699 14.3998C16.1773 14.4092 16.3845 14.3775 16.5796 14.3065C16.7747 14.2355 16.9538 14.1266 17.1066 13.9861C17.2594 13.8455 17.3829 13.6761 17.4699 13.4876C17.557 13.2992 17.6058 13.0953 17.6138 12.8879C17.6138 12.8202 17.6406 12.7553 17.6885 12.7075C17.7363 12.6597 17.8012 12.6328 17.8688 12.6328C17.9365 12.6328 18.0013 12.6597 18.0492 12.7075C18.097 12.7553 18.1239 12.8202 18.1239 12.8879C18.106 13.4261 17.8812 13.9366 17.4964 14.3133C17.1116 14.6899 16.5963 14.9036 16.0578 14.9099Z' fill='#8254C6'/>\r\n<path d='M14.2288 13.0058C14.1953 13.0047 14.1624 12.9969 14.1319 12.9831C14.1014 12.9692 14.0739 12.9494 14.051 12.9249C14.0281 12.9004 14.0103 12.8717 13.9986 12.8403C13.9868 12.8089 13.9814 12.7755 13.9826 12.742C13.9935 12.4681 14.0583 12.199 14.1734 11.9502C14.2885 11.7014 14.4515 11.4777 14.6531 11.292C14.8548 11.1064 15.0911 10.9623 15.3485 10.8681C15.606 10.7739 15.8795 10.7314 16.1533 10.7431C16.221 10.7431 16.2859 10.77 16.3337 10.8178C16.3815 10.8656 16.4084 10.9305 16.4084 10.9982C16.4084 11.0658 16.3815 11.1307 16.3337 11.1785C16.2859 11.2263 16.221 11.2532 16.1533 11.2532C15.7351 11.2367 15.3273 11.3867 15.0194 11.6702C14.7114 11.9537 14.5283 12.3477 14.5103 12.7659C14.5103 12.8336 14.4834 12.8985 14.4356 12.9463C14.3877 12.9941 14.3229 13.021 14.2552 13.021L14.2288 13.0058Z' fill='#8254C6'/>\r\n<path d='M16.056 13.8471H16.0121C15.7507 13.8414 15.5021 13.7327 15.3203 13.5448C15.1385 13.3569 15.0382 13.1048 15.0411 12.8434C15.044 12.5819 15.1499 12.3322 15.3358 12.1483C15.5217 11.9644 15.7726 11.8613 16.0341 11.8613C16.2955 11.8613 16.5464 11.9644 16.7323 12.1483C16.9182 12.3322 17.0241 12.5819 17.027 12.8434C17.0299 13.1048 16.9296 13.3569 16.7478 13.5448C16.566 13.7327 16.3174 13.8414 16.056 13.8471ZM16.056 12.3176C15.9615 12.3202 15.8699 12.3505 15.7926 12.405C15.7153 12.4594 15.6558 12.5355 15.6216 12.6236C15.5874 12.7117 15.58 12.808 15.6003 12.9003C15.6207 12.9926 15.6678 13.0769 15.7359 13.1425C15.8039 13.2081 15.8898 13.2522 15.9828 13.2691C16.0758 13.2861 16.1718 13.2752 16.2586 13.2378C16.3454 13.2004 16.4192 13.1382 16.4708 13.059C16.5224 12.9798 16.5495 12.8871 16.5486 12.7926C16.5479 12.7289 16.5347 12.6659 16.5095 12.6074C16.4843 12.549 16.4477 12.4961 16.4018 12.4518C16.356 12.4076 16.3018 12.373 16.2424 12.35C16.1831 12.3269 16.1197 12.3159 16.056 12.3176Z' fill='#8254C6'/>\r\n<path d='M32.5997 22.8655C32.5006 19.0538 31.5441 15.3135 29.8013 11.9221C28.8198 10.0677 27.3524 8.51515 25.5563 7.43068C23.7601 6.3462 21.7029 5.77066 19.6047 5.76567C17.9819 5.7609 16.3786 6.11915 14.9122 6.81418C13.4458 7.50922 12.1533 8.52344 11.1296 9.78257C10.8745 10.1024 10.6499 10.3982 10.6722 10.6621C10.6879 10.7456 10.7201 10.8252 10.7669 10.8962C10.8138 10.9672 10.8743 11.0281 10.9449 11.0754C11.0567 11.177 11.1989 11.2388 11.3495 11.2513C11.6485 11.2513 11.9563 10.9315 12.229 10.6621L12.4576 10.4334C13.1113 9.71802 13.8456 9.0808 14.646 8.53448C16.1275 7.60952 17.839 7.11917 19.5855 7.11929C21.423 7.13786 23.2219 7.64925 24.7943 8.6001C26.3668 9.55094 27.6552 10.9064 28.5252 12.525C30.6176 16.322 31.1005 20.5204 31.3116 24.4965C31.3732 25.6567 31.3556 26.8152 31.3116 27.925V29.5952L23.7959 28.2152L24.0686 27.9426C26.9165 24.9843 28.0415 21.3416 27.4882 16.8289C27.3739 15.9494 27.0085 15.7216 26.4864 15.7216H26.1434C25.9104 15.7554 25.6753 15.773 25.4398 15.7743C24.1453 15.7546 22.8994 15.2783 21.9218 14.4295C21.315 13.9498 20.9623 13.6564 20.7177 13.6564C20.473 13.6564 20.19 14.0345 19.6783 14.7197C18.3247 16.5395 16.8127 17.4182 15.0457 17.4182C14.1985 17.3983 13.3618 17.2255 12.576 16.9081C12.3858 16.8295 12.1834 16.7848 11.9779 16.7762C11.818 16.7762 11.3447 16.7762 11.2743 17.6557C10.9545 21.6374 11.9339 24.8196 14.2454 27.3949C14.3637 27.527 14.4752 27.6649 14.5796 27.8082L14.7395 28.0017L14.9594 28.2744L8.05054 29.5313H7.9642C7.77071 29.5313 7.74433 29.3554 7.72434 29.1267C7.35617 25.2129 7.67739 21.2649 8.67339 17.4622C8.84929 16.7154 8.67339 16.4779 8.25123 16.3548C8.16604 16.3268 8.07706 16.312 7.98738 16.3108C7.87305 16.3108 7.53005 16.3108 7.33656 17.0488C6.15978 21.3244 5.84024 25.7905 6.3963 30.1901C6.40152 30.2721 6.40152 30.3543 6.3963 30.4363C7.89065 30.1165 9.40257 29.8383 10.9233 29.6456C11.2412 29.5567 11.5639 29.4862 11.8899 29.4345C12.1879 29.4031 12.4823 29.3442 12.7694 29.2586C13.259 29.1113 13.7629 29.017 14.2726 28.9772C14.3186 28.964 14.3673 28.964 14.4133 28.9772C14.9456 28.7718 15.5269 28.7289 16.0836 28.854H16.3826C16.4398 28.8698 16.49 28.9045 16.5252 28.9524C16.5603 29.0002 16.5782 29.0586 16.5761 29.1179C17.582 29.3461 18.6131 29.4437 19.6439 29.4081C20.7854 29.2624 21.9027 28.9667 22.9668 28.5286C23.0234 28.507 23.0861 28.507 23.1427 28.5286C23.6433 28.5101 24.1417 28.6033 24.6019 28.8013C24.761 28.7973 24.9193 28.8245 25.068 28.8812C27.4762 29.7607 30.0691 29.8743 32.487 30.6402C32.4769 30.532 32.4769 30.4231 32.487 30.3148C32.487 29.4353 32.5397 28.4951 32.5749 27.6076C32.5997 26.1004 32.6788 24.4654 32.5997 22.8655ZM22.667 27.263C21.7355 27.9973 20.5914 28.4105 19.4056 28.4407C18.4159 28.436 17.447 28.1561 16.6073 27.6323C14.0407 26.0764 12.1506 21.9012 12.6431 18.8422V18.6023L12.863 18.6639C13.5112 18.8379 14.1787 18.9296 14.8499 18.9365C15.963 18.9098 17.0549 18.627 18.0412 18.1103C19.0274 17.5935 19.8814 16.8566 20.537 15.9566L20.6249 15.8423L26.0746 17.6812V17.7868C26.9006 20.7139 25.1951 25.4344 22.6638 27.3013L22.667 27.263Z' fill='#8254C6'/>\r\n<path d='M6.60938 30.3646L16.1287 28.6057C16.1287 28.6057 18.6873 30.3023 23.0048 28.3242C32.0676 30.3726 32.0788 30.4686 32.0788 30.4686' stroke='#8254C6' stroke-width='0.262956' stroke-miterlimit='10'/>\r\n<path d='M8.91211 14.4964L9.59812 12.8877' stroke='#8254C6' stroke-width='0.797349' stroke-miterlimit='10' stroke-linecap='round'/>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_16159_32828'>\r\n<rect width='34.778' height='34.778' fill='white' transform='translate(0.113281 0.111328)'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
                          },
                          {
                            value: "stomach_ache",
                            meaning: "\u062f\u0644\u200c\u062f\u0631\u062f",
                            icon: "\ud83e\udd22"
                          },
                          {
                            value: "chest_pain",
                            meaning:
                              "\u062f\u0631\u062f \u0642\u0641\u0633\u0647 \u0633\u06cc\u0646\u0647",
                            icon: "\ud83d\udc94"
                          },
                          {
                            value: "contusion",
                            meaning: "\u06a9\u0628\u0648\u062f\u06cc",
                            icon: "\ud83e\ude79"
                          },
                          {
                            value: "back_ache",
                            meaning: "\u06a9\u0645\u0631\u062f\u0631\u062f",
                            icon: "\ud83d\udeb6\u200d\u2642\ufe0f\ud83d\udca2"
                          },
                          {
                            value: "foot_ache",
                            meaning: "\u062f\u0631\u062f \u067e\u0627",
                            icon: "\ud83e\uddb6\ud83d\udca5"
                          },
                          {
                            value: "nausea",
                            meaning:
                              "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639",
                            icon: "\ud83e\udd2e"
                          }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.choices5)}
                  list={generateStateValueProp($state, ["choices5", "list"])}
                  onListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "choices5",
                      "list"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox6"}
                data-plasmic-override={overrides.selectionBox6}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox6)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__io863
                  )}
                >
                  {
                    "\u0628\u06cc\u0645\u0627\u0631\u06cc \u0627\u0631\u062b\u06cc"
                  }
                </div>
                <Choices
                  data-plasmic-name={"choices6"}
                  data-plasmic-override={overrides.choices6}
                  beforList={(() => {
                    try {
                      return $state.signs.hereditary;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          {
                            value: "headache",
                            meaning: "\u0633\u0631\u062f\u0631\u062f",
                            icon: "<svg width='35' height='35' viewBox='0 0 35 35' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_16159_32828)'>\r\n<path d='M4.98039 9.10027H4.91003C4.82972 9.08719 4.75405 9.0539 4.69015 9.00352L1.17217 6.2435C1.11967 6.20828 1.07462 6.16306 1.0396 6.11042C1.00458 6.05778 0.980266 5.99876 0.968053 5.93673C0.95584 5.8747 0.955964 5.81087 0.968419 5.74889C0.980874 5.68691 1.00542 5.62799 1.04064 5.57549C1.07587 5.52299 1.12109 5.47794 1.17373 5.44292C1.22636 5.4079 1.28538 5.38359 1.34741 5.37137C1.40944 5.35916 1.47327 5.35928 1.53526 5.37174C1.59724 5.38419 1.65616 5.40874 1.70866 5.44396H1.76143L4.61979 7.68508L4.84846 6.05001C4.86447 5.93542 4.92135 5.83048 5.00862 5.75452C5.0959 5.67856 5.20769 5.6367 5.3234 5.63665H5.39375C5.47324 5.64713 5.54883 5.67737 5.61362 5.7246L8.83978 8.22077C8.89784 8.25377 8.9483 8.29864 8.98785 8.35246C9.0274 8.40628 9.05514 8.46783 9.06929 8.5331C9.08343 8.59838 9.08365 8.6659 9.06993 8.73126C9.05621 8.79662 9.02885 8.85835 8.98966 8.91243C8.95046 8.9665 8.9003 9.0117 8.84245 9.04507C8.7846 9.07845 8.72036 9.09924 8.65392 9.1061C8.58749 9.11297 8.52035 9.10574 8.4569 9.08489C8.39345 9.06405 8.33512 9.03006 8.2857 8.98513L5.64721 7.05104L5.40734 8.71249C5.3875 8.81514 5.33465 8.9085 5.25686 8.97836C5.17906 9.04821 5.08058 9.09074 4.97639 9.09947L4.98039 9.10027Z' fill='#8254C6'/>\r\n<path d='M11.0898 6.07609C11.0094 6.07631 10.9301 6.05629 10.8594 6.01787C10.7887 5.97945 10.7288 5.92386 10.6853 5.85622L9.75378 4.39706L9.39318 5.03669C9.3525 5.11344 9.29174 5.1777 9.21739 5.22262C9.14304 5.26754 9.05789 5.29144 8.97102 5.29174C8.88699 5.29281 8.80409 5.27236 8.7302 5.23233C8.6563 5.19231 8.59388 5.13404 8.54887 5.06308L7.13368 2.68124C7.08823 2.62737 7.05486 2.56437 7.03584 2.4965C7.01682 2.42863 7.0126 2.35747 7.02345 2.28783C7.03429 2.21819 7.05995 2.15168 7.09871 2.09281C7.13746 2.03394 7.1884 1.98407 7.24808 1.94657C7.30777 1.90907 7.37479 1.88482 7.44465 1.87546C7.51451 1.86609 7.58557 1.87184 7.65302 1.89229C7.72047 1.91274 7.78275 1.94744 7.83564 1.99402C7.88853 2.04061 7.9308 2.09801 7.9596 2.16233L8.97023 3.82378L9.32203 3.19934C9.36446 3.12757 9.42486 3.0681 9.49727 3.02678C9.56969 2.98547 9.65162 2.96374 9.73499 2.96374C9.81836 2.96374 9.90029 2.98547 9.97271 3.02678C10.0451 3.0681 10.1055 3.12757 10.148 3.19934L11.528 5.34371C11.5626 5.39723 11.5863 5.45713 11.5976 5.51991C11.6088 5.58268 11.6075 5.64707 11.5935 5.70931C11.5796 5.77155 11.5534 5.83039 11.5165 5.88238C11.4796 5.93438 11.4326 5.97849 11.3784 6.01213L11.2817 6.0649C11.2185 6.08096 11.1526 6.08395 11.0882 6.0737L11.0898 6.07609Z' fill='#8254C6'/>\r\n<path d='M7.54056 1.9894C7.61081 1.9891 7.67998 2.00671 7.74153 2.04057C7.80309 2.07442 7.855 2.12341 7.89236 2.18289L8.83262 3.7388L8.95575 3.94109L9.07009 3.73001L9.34273 3.2111C9.37929 3.14928 9.43134 3.09805 9.49373 3.06247C9.55612 3.02688 9.6267 3.00816 9.69853 3.00816C9.77035 3.00816 9.84094 3.02688 9.90333 3.06247C9.96572 3.09805 10.0178 3.14928 10.0543 3.2111L11.4343 5.35548C11.4638 5.40109 11.484 5.45207 11.4938 5.50549C11.5035 5.55891 11.5027 5.61374 11.4912 5.66683C11.4798 5.71992 11.458 5.77023 11.4271 5.8149C11.3962 5.85957 11.3568 5.89771 11.3112 5.92715H11.2233V6.03269V5.93594C11.1344 5.9687 11.0371 5.96997 10.9474 5.93956C10.8578 5.90914 10.7813 5.84888 10.7307 5.76884L9.85124 4.40962L9.72811 4.21613L9.61378 4.41841L9.30596 4.97249C9.26877 5.0362 9.21553 5.08905 9.15156 5.12578C9.0876 5.16251 9.01512 5.18184 8.94136 5.18184C8.86759 5.18184 8.79512 5.16251 8.73115 5.12578C8.66718 5.08905 8.61396 5.0362 8.57677 4.97249L7.16158 2.58186C7.12221 2.51919 7.10038 2.44709 7.09839 2.3731C7.0964 2.29911 7.11432 2.22594 7.15027 2.16124C7.18621 2.09654 7.23887 2.04267 7.30275 2.00527C7.36662 1.96787 7.43936 1.94831 7.51338 1.94863M7.51338 1.80791C7.40973 1.80456 7.30721 1.83037 7.2175 1.8824C7.12779 1.93443 7.05448 2.0106 7.00592 2.10223C6.95735 2.19386 6.93548 2.29728 6.94278 2.40073C6.95009 2.50418 6.98628 2.60351 7.04724 2.6874L8.49762 5.08603C8.54638 5.16873 8.61578 5.23733 8.69904 5.28513C8.7823 5.33292 8.87654 5.35827 8.97254 5.35867C9.06935 5.3591 9.16459 5.33415 9.24876 5.28632C9.33293 5.23848 9.4031 5.16943 9.45227 5.08603L9.76009 4.53195L10.6396 5.89117C10.7083 5.99956 10.8125 6.08073 10.9344 6.12083C11.0563 6.16093 11.1884 6.15747 11.308 6.11104C11.3866 6.08238 11.4578 6.03629 11.516 5.9762C11.5743 5.91612 11.6182 5.84362 11.6444 5.76414C11.6707 5.68466 11.6786 5.60027 11.6675 5.51731C11.6565 5.43434 11.6268 5.35496 11.5807 5.28512L10.2006 3.14074C10.1513 3.05897 10.0817 2.99132 9.9986 2.94436C9.91546 2.8974 9.8216 2.87272 9.72611 2.87272C9.63063 2.87272 9.53675 2.8974 9.45361 2.94436C9.37047 2.99132 9.30088 3.05897 9.25158 3.14074L8.97893 3.65965L8.03788 2.10374C7.98778 2.02558 7.91882 1.96126 7.83738 1.91669C7.75593 1.87212 7.66459 1.84874 7.57174 1.84868L7.51338 1.80791Z' fill='#8254C6'/>\r\n<path d='M16.0555 15.9995C15.6679 15.999 15.2836 15.9275 14.9218 15.7885C14.8861 15.7816 14.8523 15.7672 14.8226 15.7462C14.793 15.7253 14.7681 15.6982 14.7498 15.6668C14.7314 15.6355 14.72 15.6006 14.7162 15.5644C14.7125 15.5283 14.7164 15.4918 14.7279 15.4573C14.7394 15.4229 14.7581 15.3912 14.7828 15.3646C14.8075 15.338 14.8376 15.3169 14.8711 15.3028C14.9046 15.2888 14.9407 15.282 14.977 15.283C15.0134 15.284 15.049 15.2928 15.0817 15.3087C15.4086 15.4381 15.758 15.5009 16.1095 15.4934C16.461 15.4858 16.8074 15.4081 17.1285 15.2648C17.4495 15.1215 17.7386 14.9155 17.9789 14.6589C18.2192 14.4022 18.4058 14.1002 18.5277 13.7704C18.5346 13.7347 18.549 13.7009 18.5699 13.6713C18.5909 13.6416 18.618 13.6168 18.6493 13.5984C18.6807 13.5801 18.7156 13.5686 18.7517 13.5649C18.7879 13.5611 18.8244 13.5651 18.8588 13.5766C18.8933 13.5881 18.9249 13.6068 18.9516 13.6315C18.9782 13.6562 18.9993 13.6863 19.0133 13.7198C19.0274 13.7532 19.0342 13.7894 19.0331 13.8257C19.0321 13.862 19.0234 13.8977 19.0074 13.9303C18.7832 14.5346 18.3807 15.0565 17.8533 15.427C17.3259 15.7975 16.6984 15.9991 16.0539 16.0051L16.0555 15.9995Z' fill='#8254C6'/>\r\n<path d='M13.3309 12.0362H13.2429C13.1802 12.0125 13.1294 11.965 13.1014 11.9041C13.0734 11.8433 13.0706 11.7738 13.0934 11.7108C13.2414 11.321 13.4648 10.9642 13.7509 10.6607C14.0369 10.3573 14.3799 10.1132 14.7603 9.94244C15.1407 9.77165 15.551 9.67752 15.9678 9.6654C16.3846 9.65329 16.7998 9.72344 17.1894 9.87184C17.245 9.89894 17.2889 9.94531 17.3128 10.0023C17.3367 10.0593 17.3392 10.1231 17.3196 10.1817C17.3001 10.2404 17.2599 10.29 17.2065 10.3212C17.1531 10.3524 17.0902 10.3632 17.0295 10.3516C16.7021 10.2224 16.3521 10.16 16.0002 10.1681C15.6483 10.1762 15.3016 10.2547 14.9805 10.3989C14.6593 10.543 14.3703 10.75 14.1304 11.0076C13.8905 11.2652 13.7045 11.5681 13.5835 11.8987C13.5591 11.9437 13.5218 11.9804 13.4763 12.0039C13.4308 12.0275 13.3793 12.0368 13.3284 12.0306L13.3309 12.0362Z' fill='#8254C6'/>\r\n<path d='M16.0578 14.9099H15.9699C15.9023 14.9099 15.8374 14.883 15.7895 14.8352C15.7417 14.7874 15.7148 14.7225 15.7148 14.6549C15.7148 14.5872 15.7417 14.5223 15.7895 14.4745C15.8374 14.4267 15.9023 14.3998 15.9699 14.3998C16.1773 14.4092 16.3845 14.3775 16.5796 14.3065C16.7747 14.2355 16.9538 14.1266 17.1066 13.9861C17.2594 13.8455 17.3829 13.6761 17.4699 13.4876C17.557 13.2992 17.6058 13.0953 17.6138 12.8879C17.6138 12.8202 17.6406 12.7553 17.6885 12.7075C17.7363 12.6597 17.8012 12.6328 17.8688 12.6328C17.9365 12.6328 18.0013 12.6597 18.0492 12.7075C18.097 12.7553 18.1239 12.8202 18.1239 12.8879C18.106 13.4261 17.8812 13.9366 17.4964 14.3133C17.1116 14.6899 16.5963 14.9036 16.0578 14.9099Z' fill='#8254C6'/>\r\n<path d='M14.2288 13.0058C14.1953 13.0047 14.1624 12.9969 14.1319 12.9831C14.1014 12.9692 14.0739 12.9494 14.051 12.9249C14.0281 12.9004 14.0103 12.8717 13.9986 12.8403C13.9868 12.8089 13.9814 12.7755 13.9826 12.742C13.9935 12.4681 14.0583 12.199 14.1734 11.9502C14.2885 11.7014 14.4515 11.4777 14.6531 11.292C14.8548 11.1064 15.0911 10.9623 15.3485 10.8681C15.606 10.7739 15.8795 10.7314 16.1533 10.7431C16.221 10.7431 16.2859 10.77 16.3337 10.8178C16.3815 10.8656 16.4084 10.9305 16.4084 10.9982C16.4084 11.0658 16.3815 11.1307 16.3337 11.1785C16.2859 11.2263 16.221 11.2532 16.1533 11.2532C15.7351 11.2367 15.3273 11.3867 15.0194 11.6702C14.7114 11.9537 14.5283 12.3477 14.5103 12.7659C14.5103 12.8336 14.4834 12.8985 14.4356 12.9463C14.3877 12.9941 14.3229 13.021 14.2552 13.021L14.2288 13.0058Z' fill='#8254C6'/>\r\n<path d='M16.056 13.8471H16.0121C15.7507 13.8414 15.5021 13.7327 15.3203 13.5448C15.1385 13.3569 15.0382 13.1048 15.0411 12.8434C15.044 12.5819 15.1499 12.3322 15.3358 12.1483C15.5217 11.9644 15.7726 11.8613 16.0341 11.8613C16.2955 11.8613 16.5464 11.9644 16.7323 12.1483C16.9182 12.3322 17.0241 12.5819 17.027 12.8434C17.0299 13.1048 16.9296 13.3569 16.7478 13.5448C16.566 13.7327 16.3174 13.8414 16.056 13.8471ZM16.056 12.3176C15.9615 12.3202 15.8699 12.3505 15.7926 12.405C15.7153 12.4594 15.6558 12.5355 15.6216 12.6236C15.5874 12.7117 15.58 12.808 15.6003 12.9003C15.6207 12.9926 15.6678 13.0769 15.7359 13.1425C15.8039 13.2081 15.8898 13.2522 15.9828 13.2691C16.0758 13.2861 16.1718 13.2752 16.2586 13.2378C16.3454 13.2004 16.4192 13.1382 16.4708 13.059C16.5224 12.9798 16.5495 12.8871 16.5486 12.7926C16.5479 12.7289 16.5347 12.6659 16.5095 12.6074C16.4843 12.549 16.4477 12.4961 16.4018 12.4518C16.356 12.4076 16.3018 12.373 16.2424 12.35C16.1831 12.3269 16.1197 12.3159 16.056 12.3176Z' fill='#8254C6'/>\r\n<path d='M32.5997 22.8655C32.5006 19.0538 31.5441 15.3135 29.8013 11.9221C28.8198 10.0677 27.3524 8.51515 25.5563 7.43068C23.7601 6.3462 21.7029 5.77066 19.6047 5.76567C17.9819 5.7609 16.3786 6.11915 14.9122 6.81418C13.4458 7.50922 12.1533 8.52344 11.1296 9.78257C10.8745 10.1024 10.6499 10.3982 10.6722 10.6621C10.6879 10.7456 10.7201 10.8252 10.7669 10.8962C10.8138 10.9672 10.8743 11.0281 10.9449 11.0754C11.0567 11.177 11.1989 11.2388 11.3495 11.2513C11.6485 11.2513 11.9563 10.9315 12.229 10.6621L12.4576 10.4334C13.1113 9.71802 13.8456 9.0808 14.646 8.53448C16.1275 7.60952 17.839 7.11917 19.5855 7.11929C21.423 7.13786 23.2219 7.64925 24.7943 8.6001C26.3668 9.55094 27.6552 10.9064 28.5252 12.525C30.6176 16.322 31.1005 20.5204 31.3116 24.4965C31.3732 25.6567 31.3556 26.8152 31.3116 27.925V29.5952L23.7959 28.2152L24.0686 27.9426C26.9165 24.9843 28.0415 21.3416 27.4882 16.8289C27.3739 15.9494 27.0085 15.7216 26.4864 15.7216H26.1434C25.9104 15.7554 25.6753 15.773 25.4398 15.7743C24.1453 15.7546 22.8994 15.2783 21.9218 14.4295C21.315 13.9498 20.9623 13.6564 20.7177 13.6564C20.473 13.6564 20.19 14.0345 19.6783 14.7197C18.3247 16.5395 16.8127 17.4182 15.0457 17.4182C14.1985 17.3983 13.3618 17.2255 12.576 16.9081C12.3858 16.8295 12.1834 16.7848 11.9779 16.7762C11.818 16.7762 11.3447 16.7762 11.2743 17.6557C10.9545 21.6374 11.9339 24.8196 14.2454 27.3949C14.3637 27.527 14.4752 27.6649 14.5796 27.8082L14.7395 28.0017L14.9594 28.2744L8.05054 29.5313H7.9642C7.77071 29.5313 7.74433 29.3554 7.72434 29.1267C7.35617 25.2129 7.67739 21.2649 8.67339 17.4622C8.84929 16.7154 8.67339 16.4779 8.25123 16.3548C8.16604 16.3268 8.07706 16.312 7.98738 16.3108C7.87305 16.3108 7.53005 16.3108 7.33656 17.0488C6.15978 21.3244 5.84024 25.7905 6.3963 30.1901C6.40152 30.2721 6.40152 30.3543 6.3963 30.4363C7.89065 30.1165 9.40257 29.8383 10.9233 29.6456C11.2412 29.5567 11.5639 29.4862 11.8899 29.4345C12.1879 29.4031 12.4823 29.3442 12.7694 29.2586C13.259 29.1113 13.7629 29.017 14.2726 28.9772C14.3186 28.964 14.3673 28.964 14.4133 28.9772C14.9456 28.7718 15.5269 28.7289 16.0836 28.854H16.3826C16.4398 28.8698 16.49 28.9045 16.5252 28.9524C16.5603 29.0002 16.5782 29.0586 16.5761 29.1179C17.582 29.3461 18.6131 29.4437 19.6439 29.4081C20.7854 29.2624 21.9027 28.9667 22.9668 28.5286C23.0234 28.507 23.0861 28.507 23.1427 28.5286C23.6433 28.5101 24.1417 28.6033 24.6019 28.8013C24.761 28.7973 24.9193 28.8245 25.068 28.8812C27.4762 29.7607 30.0691 29.8743 32.487 30.6402C32.4769 30.532 32.4769 30.4231 32.487 30.3148C32.487 29.4353 32.5397 28.4951 32.5749 27.6076C32.5997 26.1004 32.6788 24.4654 32.5997 22.8655ZM22.667 27.263C21.7355 27.9973 20.5914 28.4105 19.4056 28.4407C18.4159 28.436 17.447 28.1561 16.6073 27.6323C14.0407 26.0764 12.1506 21.9012 12.6431 18.8422V18.6023L12.863 18.6639C13.5112 18.8379 14.1787 18.9296 14.8499 18.9365C15.963 18.9098 17.0549 18.627 18.0412 18.1103C19.0274 17.5935 19.8814 16.8566 20.537 15.9566L20.6249 15.8423L26.0746 17.6812V17.7868C26.9006 20.7139 25.1951 25.4344 22.6638 27.3013L22.667 27.263Z' fill='#8254C6'/>\r\n<path d='M6.60938 30.3646L16.1287 28.6057C16.1287 28.6057 18.6873 30.3023 23.0048 28.3242C32.0676 30.3726 32.0788 30.4686 32.0788 30.4686' stroke='#8254C6' stroke-width='0.262956' stroke-miterlimit='10'/>\r\n<path d='M8.91211 14.4964L9.59812 12.8877' stroke='#8254C6' stroke-width='0.797349' stroke-miterlimit='10' stroke-linecap='round'/>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_16159_32828'>\r\n<rect width='34.778' height='34.778' fill='white' transform='translate(0.113281 0.111328)'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
                          },
                          {
                            value: "stomach_ache",
                            meaning: "\u062f\u0644\u200c\u062f\u0631\u062f",
                            icon: "\ud83e\udd22"
                          },
                          {
                            value: "chest_pain",
                            meaning:
                              "\u062f\u0631\u062f \u0642\u0641\u0633\u0647 \u0633\u06cc\u0646\u0647",
                            icon: "\ud83d\udc94"
                          },
                          {
                            value: "contusion",
                            meaning: "\u06a9\u0628\u0648\u062f\u06cc",
                            icon: "\ud83e\ude79"
                          },
                          {
                            value: "back_ache",
                            meaning: "\u06a9\u0645\u0631\u062f\u0631\u062f",
                            icon: "\ud83d\udeb6\u200d\u2642\ufe0f\ud83d\udca2"
                          },
                          {
                            value: "foot_ache",
                            meaning: "\u062f\u0631\u062f \u067e\u0627",
                            icon: "\ud83e\uddb6\ud83d\udca5"
                          },
                          {
                            value: "nausea",
                            meaning:
                              "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639",
                            icon: "\ud83e\udd2e"
                          }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.choices6)}
                  list={generateStateValueProp($state, ["choices6", "list"])}
                  onListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "choices6",
                      "list"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"selectionBox7"}
                data-plasmic-override={overrides.selectionBox7}
                hasGap={true}
                className={classNames(projectcss.all, sty.selectionBox7)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nGJqJ
                  )}
                >
                  {
                    "\u0628\u06cc\u0645\u0627\u0631\u06cc \u0645\u0642\u0627\u0631\u0628\u062a\u06cc"
                  }
                </div>
                <Choices
                  data-plasmic-name={"choices7"}
                  data-plasmic-override={overrides.choices7}
                  beforList={(() => {
                    try {
                      return $state.signs.venereal;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          {
                            value: "headache",
                            meaning: "\u0633\u0631\u062f\u0631\u062f",
                            icon: "<svg width='35' height='35' viewBox='0 0 35 35' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_16159_32828)'>\r\n<path d='M4.98039 9.10027H4.91003C4.82972 9.08719 4.75405 9.0539 4.69015 9.00352L1.17217 6.2435C1.11967 6.20828 1.07462 6.16306 1.0396 6.11042C1.00458 6.05778 0.980266 5.99876 0.968053 5.93673C0.95584 5.8747 0.955964 5.81087 0.968419 5.74889C0.980874 5.68691 1.00542 5.62799 1.04064 5.57549C1.07587 5.52299 1.12109 5.47794 1.17373 5.44292C1.22636 5.4079 1.28538 5.38359 1.34741 5.37137C1.40944 5.35916 1.47327 5.35928 1.53526 5.37174C1.59724 5.38419 1.65616 5.40874 1.70866 5.44396H1.76143L4.61979 7.68508L4.84846 6.05001C4.86447 5.93542 4.92135 5.83048 5.00862 5.75452C5.0959 5.67856 5.20769 5.6367 5.3234 5.63665H5.39375C5.47324 5.64713 5.54883 5.67737 5.61362 5.7246L8.83978 8.22077C8.89784 8.25377 8.9483 8.29864 8.98785 8.35246C9.0274 8.40628 9.05514 8.46783 9.06929 8.5331C9.08343 8.59838 9.08365 8.6659 9.06993 8.73126C9.05621 8.79662 9.02885 8.85835 8.98966 8.91243C8.95046 8.9665 8.9003 9.0117 8.84245 9.04507C8.7846 9.07845 8.72036 9.09924 8.65392 9.1061C8.58749 9.11297 8.52035 9.10574 8.4569 9.08489C8.39345 9.06405 8.33512 9.03006 8.2857 8.98513L5.64721 7.05104L5.40734 8.71249C5.3875 8.81514 5.33465 8.9085 5.25686 8.97836C5.17906 9.04821 5.08058 9.09074 4.97639 9.09947L4.98039 9.10027Z' fill='#8254C6'/>\r\n<path d='M11.0898 6.07609C11.0094 6.07631 10.9301 6.05629 10.8594 6.01787C10.7887 5.97945 10.7288 5.92386 10.6853 5.85622L9.75378 4.39706L9.39318 5.03669C9.3525 5.11344 9.29174 5.1777 9.21739 5.22262C9.14304 5.26754 9.05789 5.29144 8.97102 5.29174C8.88699 5.29281 8.80409 5.27236 8.7302 5.23233C8.6563 5.19231 8.59388 5.13404 8.54887 5.06308L7.13368 2.68124C7.08823 2.62737 7.05486 2.56437 7.03584 2.4965C7.01682 2.42863 7.0126 2.35747 7.02345 2.28783C7.03429 2.21819 7.05995 2.15168 7.09871 2.09281C7.13746 2.03394 7.1884 1.98407 7.24808 1.94657C7.30777 1.90907 7.37479 1.88482 7.44465 1.87546C7.51451 1.86609 7.58557 1.87184 7.65302 1.89229C7.72047 1.91274 7.78275 1.94744 7.83564 1.99402C7.88853 2.04061 7.9308 2.09801 7.9596 2.16233L8.97023 3.82378L9.32203 3.19934C9.36446 3.12757 9.42486 3.0681 9.49727 3.02678C9.56969 2.98547 9.65162 2.96374 9.73499 2.96374C9.81836 2.96374 9.90029 2.98547 9.97271 3.02678C10.0451 3.0681 10.1055 3.12757 10.148 3.19934L11.528 5.34371C11.5626 5.39723 11.5863 5.45713 11.5976 5.51991C11.6088 5.58268 11.6075 5.64707 11.5935 5.70931C11.5796 5.77155 11.5534 5.83039 11.5165 5.88238C11.4796 5.93438 11.4326 5.97849 11.3784 6.01213L11.2817 6.0649C11.2185 6.08096 11.1526 6.08395 11.0882 6.0737L11.0898 6.07609Z' fill='#8254C6'/>\r\n<path d='M7.54056 1.9894C7.61081 1.9891 7.67998 2.00671 7.74153 2.04057C7.80309 2.07442 7.855 2.12341 7.89236 2.18289L8.83262 3.7388L8.95575 3.94109L9.07009 3.73001L9.34273 3.2111C9.37929 3.14928 9.43134 3.09805 9.49373 3.06247C9.55612 3.02688 9.6267 3.00816 9.69853 3.00816C9.77035 3.00816 9.84094 3.02688 9.90333 3.06247C9.96572 3.09805 10.0178 3.14928 10.0543 3.2111L11.4343 5.35548C11.4638 5.40109 11.484 5.45207 11.4938 5.50549C11.5035 5.55891 11.5027 5.61374 11.4912 5.66683C11.4798 5.71992 11.458 5.77023 11.4271 5.8149C11.3962 5.85957 11.3568 5.89771 11.3112 5.92715H11.2233V6.03269V5.93594C11.1344 5.9687 11.0371 5.96997 10.9474 5.93956C10.8578 5.90914 10.7813 5.84888 10.7307 5.76884L9.85124 4.40962L9.72811 4.21613L9.61378 4.41841L9.30596 4.97249C9.26877 5.0362 9.21553 5.08905 9.15156 5.12578C9.0876 5.16251 9.01512 5.18184 8.94136 5.18184C8.86759 5.18184 8.79512 5.16251 8.73115 5.12578C8.66718 5.08905 8.61396 5.0362 8.57677 4.97249L7.16158 2.58186C7.12221 2.51919 7.10038 2.44709 7.09839 2.3731C7.0964 2.29911 7.11432 2.22594 7.15027 2.16124C7.18621 2.09654 7.23887 2.04267 7.30275 2.00527C7.36662 1.96787 7.43936 1.94831 7.51338 1.94863M7.51338 1.80791C7.40973 1.80456 7.30721 1.83037 7.2175 1.8824C7.12779 1.93443 7.05448 2.0106 7.00592 2.10223C6.95735 2.19386 6.93548 2.29728 6.94278 2.40073C6.95009 2.50418 6.98628 2.60351 7.04724 2.6874L8.49762 5.08603C8.54638 5.16873 8.61578 5.23733 8.69904 5.28513C8.7823 5.33292 8.87654 5.35827 8.97254 5.35867C9.06935 5.3591 9.16459 5.33415 9.24876 5.28632C9.33293 5.23848 9.4031 5.16943 9.45227 5.08603L9.76009 4.53195L10.6396 5.89117C10.7083 5.99956 10.8125 6.08073 10.9344 6.12083C11.0563 6.16093 11.1884 6.15747 11.308 6.11104C11.3866 6.08238 11.4578 6.03629 11.516 5.9762C11.5743 5.91612 11.6182 5.84362 11.6444 5.76414C11.6707 5.68466 11.6786 5.60027 11.6675 5.51731C11.6565 5.43434 11.6268 5.35496 11.5807 5.28512L10.2006 3.14074C10.1513 3.05897 10.0817 2.99132 9.9986 2.94436C9.91546 2.8974 9.8216 2.87272 9.72611 2.87272C9.63063 2.87272 9.53675 2.8974 9.45361 2.94436C9.37047 2.99132 9.30088 3.05897 9.25158 3.14074L8.97893 3.65965L8.03788 2.10374C7.98778 2.02558 7.91882 1.96126 7.83738 1.91669C7.75593 1.87212 7.66459 1.84874 7.57174 1.84868L7.51338 1.80791Z' fill='#8254C6'/>\r\n<path d='M16.0555 15.9995C15.6679 15.999 15.2836 15.9275 14.9218 15.7885C14.8861 15.7816 14.8523 15.7672 14.8226 15.7462C14.793 15.7253 14.7681 15.6982 14.7498 15.6668C14.7314 15.6355 14.72 15.6006 14.7162 15.5644C14.7125 15.5283 14.7164 15.4918 14.7279 15.4573C14.7394 15.4229 14.7581 15.3912 14.7828 15.3646C14.8075 15.338 14.8376 15.3169 14.8711 15.3028C14.9046 15.2888 14.9407 15.282 14.977 15.283C15.0134 15.284 15.049 15.2928 15.0817 15.3087C15.4086 15.4381 15.758 15.5009 16.1095 15.4934C16.461 15.4858 16.8074 15.4081 17.1285 15.2648C17.4495 15.1215 17.7386 14.9155 17.9789 14.6589C18.2192 14.4022 18.4058 14.1002 18.5277 13.7704C18.5346 13.7347 18.549 13.7009 18.5699 13.6713C18.5909 13.6416 18.618 13.6168 18.6493 13.5984C18.6807 13.5801 18.7156 13.5686 18.7517 13.5649C18.7879 13.5611 18.8244 13.5651 18.8588 13.5766C18.8933 13.5881 18.9249 13.6068 18.9516 13.6315C18.9782 13.6562 18.9993 13.6863 19.0133 13.7198C19.0274 13.7532 19.0342 13.7894 19.0331 13.8257C19.0321 13.862 19.0234 13.8977 19.0074 13.9303C18.7832 14.5346 18.3807 15.0565 17.8533 15.427C17.3259 15.7975 16.6984 15.9991 16.0539 16.0051L16.0555 15.9995Z' fill='#8254C6'/>\r\n<path d='M13.3309 12.0362H13.2429C13.1802 12.0125 13.1294 11.965 13.1014 11.9041C13.0734 11.8433 13.0706 11.7738 13.0934 11.7108C13.2414 11.321 13.4648 10.9642 13.7509 10.6607C14.0369 10.3573 14.3799 10.1132 14.7603 9.94244C15.1407 9.77165 15.551 9.67752 15.9678 9.6654C16.3846 9.65329 16.7998 9.72344 17.1894 9.87184C17.245 9.89894 17.2889 9.94531 17.3128 10.0023C17.3367 10.0593 17.3392 10.1231 17.3196 10.1817C17.3001 10.2404 17.2599 10.29 17.2065 10.3212C17.1531 10.3524 17.0902 10.3632 17.0295 10.3516C16.7021 10.2224 16.3521 10.16 16.0002 10.1681C15.6483 10.1762 15.3016 10.2547 14.9805 10.3989C14.6593 10.543 14.3703 10.75 14.1304 11.0076C13.8905 11.2652 13.7045 11.5681 13.5835 11.8987C13.5591 11.9437 13.5218 11.9804 13.4763 12.0039C13.4308 12.0275 13.3793 12.0368 13.3284 12.0306L13.3309 12.0362Z' fill='#8254C6'/>\r\n<path d='M16.0578 14.9099H15.9699C15.9023 14.9099 15.8374 14.883 15.7895 14.8352C15.7417 14.7874 15.7148 14.7225 15.7148 14.6549C15.7148 14.5872 15.7417 14.5223 15.7895 14.4745C15.8374 14.4267 15.9023 14.3998 15.9699 14.3998C16.1773 14.4092 16.3845 14.3775 16.5796 14.3065C16.7747 14.2355 16.9538 14.1266 17.1066 13.9861C17.2594 13.8455 17.3829 13.6761 17.4699 13.4876C17.557 13.2992 17.6058 13.0953 17.6138 12.8879C17.6138 12.8202 17.6406 12.7553 17.6885 12.7075C17.7363 12.6597 17.8012 12.6328 17.8688 12.6328C17.9365 12.6328 18.0013 12.6597 18.0492 12.7075C18.097 12.7553 18.1239 12.8202 18.1239 12.8879C18.106 13.4261 17.8812 13.9366 17.4964 14.3133C17.1116 14.6899 16.5963 14.9036 16.0578 14.9099Z' fill='#8254C6'/>\r\n<path d='M14.2288 13.0058C14.1953 13.0047 14.1624 12.9969 14.1319 12.9831C14.1014 12.9692 14.0739 12.9494 14.051 12.9249C14.0281 12.9004 14.0103 12.8717 13.9986 12.8403C13.9868 12.8089 13.9814 12.7755 13.9826 12.742C13.9935 12.4681 14.0583 12.199 14.1734 11.9502C14.2885 11.7014 14.4515 11.4777 14.6531 11.292C14.8548 11.1064 15.0911 10.9623 15.3485 10.8681C15.606 10.7739 15.8795 10.7314 16.1533 10.7431C16.221 10.7431 16.2859 10.77 16.3337 10.8178C16.3815 10.8656 16.4084 10.9305 16.4084 10.9982C16.4084 11.0658 16.3815 11.1307 16.3337 11.1785C16.2859 11.2263 16.221 11.2532 16.1533 11.2532C15.7351 11.2367 15.3273 11.3867 15.0194 11.6702C14.7114 11.9537 14.5283 12.3477 14.5103 12.7659C14.5103 12.8336 14.4834 12.8985 14.4356 12.9463C14.3877 12.9941 14.3229 13.021 14.2552 13.021L14.2288 13.0058Z' fill='#8254C6'/>\r\n<path d='M16.056 13.8471H16.0121C15.7507 13.8414 15.5021 13.7327 15.3203 13.5448C15.1385 13.3569 15.0382 13.1048 15.0411 12.8434C15.044 12.5819 15.1499 12.3322 15.3358 12.1483C15.5217 11.9644 15.7726 11.8613 16.0341 11.8613C16.2955 11.8613 16.5464 11.9644 16.7323 12.1483C16.9182 12.3322 17.0241 12.5819 17.027 12.8434C17.0299 13.1048 16.9296 13.3569 16.7478 13.5448C16.566 13.7327 16.3174 13.8414 16.056 13.8471ZM16.056 12.3176C15.9615 12.3202 15.8699 12.3505 15.7926 12.405C15.7153 12.4594 15.6558 12.5355 15.6216 12.6236C15.5874 12.7117 15.58 12.808 15.6003 12.9003C15.6207 12.9926 15.6678 13.0769 15.7359 13.1425C15.8039 13.2081 15.8898 13.2522 15.9828 13.2691C16.0758 13.2861 16.1718 13.2752 16.2586 13.2378C16.3454 13.2004 16.4192 13.1382 16.4708 13.059C16.5224 12.9798 16.5495 12.8871 16.5486 12.7926C16.5479 12.7289 16.5347 12.6659 16.5095 12.6074C16.4843 12.549 16.4477 12.4961 16.4018 12.4518C16.356 12.4076 16.3018 12.373 16.2424 12.35C16.1831 12.3269 16.1197 12.3159 16.056 12.3176Z' fill='#8254C6'/>\r\n<path d='M32.5997 22.8655C32.5006 19.0538 31.5441 15.3135 29.8013 11.9221C28.8198 10.0677 27.3524 8.51515 25.5563 7.43068C23.7601 6.3462 21.7029 5.77066 19.6047 5.76567C17.9819 5.7609 16.3786 6.11915 14.9122 6.81418C13.4458 7.50922 12.1533 8.52344 11.1296 9.78257C10.8745 10.1024 10.6499 10.3982 10.6722 10.6621C10.6879 10.7456 10.7201 10.8252 10.7669 10.8962C10.8138 10.9672 10.8743 11.0281 10.9449 11.0754C11.0567 11.177 11.1989 11.2388 11.3495 11.2513C11.6485 11.2513 11.9563 10.9315 12.229 10.6621L12.4576 10.4334C13.1113 9.71802 13.8456 9.0808 14.646 8.53448C16.1275 7.60952 17.839 7.11917 19.5855 7.11929C21.423 7.13786 23.2219 7.64925 24.7943 8.6001C26.3668 9.55094 27.6552 10.9064 28.5252 12.525C30.6176 16.322 31.1005 20.5204 31.3116 24.4965C31.3732 25.6567 31.3556 26.8152 31.3116 27.925V29.5952L23.7959 28.2152L24.0686 27.9426C26.9165 24.9843 28.0415 21.3416 27.4882 16.8289C27.3739 15.9494 27.0085 15.7216 26.4864 15.7216H26.1434C25.9104 15.7554 25.6753 15.773 25.4398 15.7743C24.1453 15.7546 22.8994 15.2783 21.9218 14.4295C21.315 13.9498 20.9623 13.6564 20.7177 13.6564C20.473 13.6564 20.19 14.0345 19.6783 14.7197C18.3247 16.5395 16.8127 17.4182 15.0457 17.4182C14.1985 17.3983 13.3618 17.2255 12.576 16.9081C12.3858 16.8295 12.1834 16.7848 11.9779 16.7762C11.818 16.7762 11.3447 16.7762 11.2743 17.6557C10.9545 21.6374 11.9339 24.8196 14.2454 27.3949C14.3637 27.527 14.4752 27.6649 14.5796 27.8082L14.7395 28.0017L14.9594 28.2744L8.05054 29.5313H7.9642C7.77071 29.5313 7.74433 29.3554 7.72434 29.1267C7.35617 25.2129 7.67739 21.2649 8.67339 17.4622C8.84929 16.7154 8.67339 16.4779 8.25123 16.3548C8.16604 16.3268 8.07706 16.312 7.98738 16.3108C7.87305 16.3108 7.53005 16.3108 7.33656 17.0488C6.15978 21.3244 5.84024 25.7905 6.3963 30.1901C6.40152 30.2721 6.40152 30.3543 6.3963 30.4363C7.89065 30.1165 9.40257 29.8383 10.9233 29.6456C11.2412 29.5567 11.5639 29.4862 11.8899 29.4345C12.1879 29.4031 12.4823 29.3442 12.7694 29.2586C13.259 29.1113 13.7629 29.017 14.2726 28.9772C14.3186 28.964 14.3673 28.964 14.4133 28.9772C14.9456 28.7718 15.5269 28.7289 16.0836 28.854H16.3826C16.4398 28.8698 16.49 28.9045 16.5252 28.9524C16.5603 29.0002 16.5782 29.0586 16.5761 29.1179C17.582 29.3461 18.6131 29.4437 19.6439 29.4081C20.7854 29.2624 21.9027 28.9667 22.9668 28.5286C23.0234 28.507 23.0861 28.507 23.1427 28.5286C23.6433 28.5101 24.1417 28.6033 24.6019 28.8013C24.761 28.7973 24.9193 28.8245 25.068 28.8812C27.4762 29.7607 30.0691 29.8743 32.487 30.6402C32.4769 30.532 32.4769 30.4231 32.487 30.3148C32.487 29.4353 32.5397 28.4951 32.5749 27.6076C32.5997 26.1004 32.6788 24.4654 32.5997 22.8655ZM22.667 27.263C21.7355 27.9973 20.5914 28.4105 19.4056 28.4407C18.4159 28.436 17.447 28.1561 16.6073 27.6323C14.0407 26.0764 12.1506 21.9012 12.6431 18.8422V18.6023L12.863 18.6639C13.5112 18.8379 14.1787 18.9296 14.8499 18.9365C15.963 18.9098 17.0549 18.627 18.0412 18.1103C19.0274 17.5935 19.8814 16.8566 20.537 15.9566L20.6249 15.8423L26.0746 17.6812V17.7868C26.9006 20.7139 25.1951 25.4344 22.6638 27.3013L22.667 27.263Z' fill='#8254C6'/>\r\n<path d='M6.60938 30.3646L16.1287 28.6057C16.1287 28.6057 18.6873 30.3023 23.0048 28.3242C32.0676 30.3726 32.0788 30.4686 32.0788 30.4686' stroke='#8254C6' stroke-width='0.262956' stroke-miterlimit='10'/>\r\n<path d='M8.91211 14.4964L9.59812 12.8877' stroke='#8254C6' stroke-width='0.797349' stroke-miterlimit='10' stroke-linecap='round'/>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_16159_32828'>\r\n<rect width='34.778' height='34.778' fill='white' transform='translate(0.113281 0.111328)'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
                          },
                          {
                            value: "stomach_ache",
                            meaning: "\u062f\u0644\u200c\u062f\u0631\u062f",
                            icon: "\ud83e\udd22"
                          },
                          {
                            value: "chest_pain",
                            meaning:
                              "\u062f\u0631\u062f \u0642\u0641\u0633\u0647 \u0633\u06cc\u0646\u0647",
                            icon: "\ud83d\udc94"
                          },
                          {
                            value: "contusion",
                            meaning: "\u06a9\u0628\u0648\u062f\u06cc",
                            icon: "\ud83e\ude79"
                          },
                          {
                            value: "back_ache",
                            meaning: "\u06a9\u0645\u0631\u062f\u0631\u062f",
                            icon: "\ud83d\udeb6\u200d\u2642\ufe0f\ud83d\udca2"
                          },
                          {
                            value: "foot_ache",
                            meaning: "\u062f\u0631\u062f \u067e\u0627",
                            icon: "\ud83e\uddb6\ud83d\udca5"
                          },
                          {
                            value: "nausea",
                            meaning:
                              "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639",
                            icon: "\ud83e\udd2e"
                          }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.choices7)}
                  list={generateStateValueProp($state, ["choices7", "list"])}
                  onListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "choices7",
                      "list"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                />
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__aZ6Jv)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vGOqz
                  )}
                >
                  {
                    "\u0630\u062e\u06cc\u0631\u0647 \u0639\u0644\u0627\u0626\u0645"
                  }
                </div>
              </div>
            </Stack__>
          </ApiRequest>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "headerLiom",
    "img",
    "number2",
    "textInput",
    "antdInput",
    "button2",
    "name2",
    "textInput2",
    "antdInput2",
    "radioGrop",
    "button3",
    "sms",
    "button4",
    "button5",
    "remove",
    "removeBtn",
    "button9",
    "getSign",
    "selectionBox",
    "choices",
    "selectionBox2",
    "choices8",
    "selectionBox3",
    "choices3",
    "selectionBox4",
    "choices4",
    "selectionBox5",
    "choices5",
    "selectionBox6",
    "choices6",
    "selectionBox7",
    "choices7"
  ],
  section: ["section", "headerLiom", "img"],
  headerLiom: ["headerLiom", "img"],
  img: ["img"],
  number2: ["number2", "textInput", "antdInput", "button2"],
  textInput: ["textInput", "antdInput"],
  antdInput: ["antdInput"],
  button2: ["button2"],
  name2: ["name2", "textInput2", "antdInput2", "radioGrop", "button3"],
  textInput2: ["textInput2", "antdInput2"],
  antdInput2: ["antdInput2"],
  radioGrop: ["radioGrop"],
  button3: ["button3"],
  sms: ["sms", "button4", "button5"],
  button4: ["button4"],
  button5: ["button5"],
  remove: ["remove", "removeBtn", "button9"],
  removeBtn: ["removeBtn"],
  button9: ["button9"],
  getSign: [
    "getSign",
    "selectionBox",
    "choices",
    "selectionBox2",
    "choices8",
    "selectionBox3",
    "choices3",
    "selectionBox4",
    "choices4",
    "selectionBox5",
    "choices5",
    "selectionBox6",
    "choices6",
    "selectionBox7",
    "choices7"
  ],
  selectionBox: ["selectionBox", "choices"],
  choices: ["choices"],
  selectionBox2: ["selectionBox2", "choices8"],
  choices8: ["choices8"],
  selectionBox3: ["selectionBox3", "choices3"],
  choices3: ["choices3"],
  selectionBox4: ["selectionBox4", "choices4"],
  choices4: ["choices4"],
  selectionBox5: ["selectionBox5", "choices5"],
  choices5: ["choices5"],
  selectionBox6: ["selectionBox6", "choices6"],
  choices6: ["choices6"],
  selectionBox7: ["selectionBox7", "choices7"],
  choices7: ["choices7"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  headerLiom: typeof HeaderLiom;
  img: typeof PlasmicImg__;
  number2: typeof AntdModal;
  textInput: typeof TextInput;
  antdInput: typeof Input;
  button2: typeof Button;
  name2: typeof AntdModal;
  textInput2: typeof TextInput;
  antdInput2: typeof Input;
  radioGrop: typeof RadioGrop;
  button3: typeof Button;
  sms: typeof AntdModal;
  button4: typeof Button;
  button5: typeof Button;
  remove: typeof AntdModal;
  removeBtn: typeof Button;
  button9: typeof Button;
  getSign: typeof ApiRequest;
  selectionBox: "div";
  choices: typeof Choices;
  selectionBox2: "div";
  choices8: typeof Choices;
  selectionBox3: "div";
  choices3: typeof Choices;
  selectionBox4: "div";
  choices4: typeof Choices;
  selectionBox5: "div";
  choices5: typeof Choices;
  selectionBox6: "div";
  choices6: typeof Choices;
  selectionBox7: "div";
  choices7: typeof Choices;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignsPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignsPage__VariantsArgs;
    args?: PlasmicSignsPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignsPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSignsPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSignsPage__ArgProps,
          internalVariantPropNames: PlasmicSignsPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignsPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignsPage";
  } else {
    func.displayName = `PlasmicSignsPage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSignsPage = Object.assign(
  // Top-level PlasmicSignsPage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    headerLiom: makeNodeComponent("headerLiom"),
    img: makeNodeComponent("img"),
    number2: makeNodeComponent("number2"),
    textInput: makeNodeComponent("textInput"),
    antdInput: makeNodeComponent("antdInput"),
    button2: makeNodeComponent("button2"),
    name2: makeNodeComponent("name2"),
    textInput2: makeNodeComponent("textInput2"),
    antdInput2: makeNodeComponent("antdInput2"),
    radioGrop: makeNodeComponent("radioGrop"),
    button3: makeNodeComponent("button3"),
    sms: makeNodeComponent("sms"),
    button4: makeNodeComponent("button4"),
    button5: makeNodeComponent("button5"),
    remove: makeNodeComponent("remove"),
    removeBtn: makeNodeComponent("removeBtn"),
    button9: makeNodeComponent("button9"),
    getSign: makeNodeComponent("getSign"),
    selectionBox: makeNodeComponent("selectionBox"),
    choices: makeNodeComponent("choices"),
    selectionBox2: makeNodeComponent("selectionBox2"),
    choices8: makeNodeComponent("choices8"),
    selectionBox3: makeNodeComponent("selectionBox3"),
    choices3: makeNodeComponent("choices3"),
    selectionBox4: makeNodeComponent("selectionBox4"),
    choices4: makeNodeComponent("choices4"),
    selectionBox5: makeNodeComponent("selectionBox5"),
    choices5: makeNodeComponent("choices5"),
    selectionBox6: makeNodeComponent("selectionBox6"),
    choices6: makeNodeComponent("choices6"),
    selectionBox7: makeNodeComponent("selectionBox7"),
    choices7: makeNodeComponent("choices7"),

    // Metadata about props expected for PlasmicSignsPage
    internalVariantProps: PlasmicSignsPage__VariantProps,
    internalArgProps: PlasmicSignsPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignsPage;
/* prettier-ignore-end */
