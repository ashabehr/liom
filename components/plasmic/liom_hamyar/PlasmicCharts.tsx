/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: lCS9WJtBvfol

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Chart } from "@/fragment/components/chart"; // plasmic-import: 2Vi4mc7aEpf-/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicCharts.module.css"; // plasmic-import: lCS9WJtBvfol/css

import Line3Icon from "./icons/PlasmicIcon__Line3"; // plasmic-import: cDBsZfQFOOWa/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon302Icon from "./icons/PlasmicIcon__Icon302"; // plasmic-import: DJz0qfLJXRLW/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicCharts__VariantMembers = {};
export type PlasmicCharts__VariantsArgs = {};
type VariantPropType = keyof PlasmicCharts__VariantsArgs;
export const PlasmicCharts__VariantProps = new Array<VariantPropType>();

export type PlasmicCharts__ArgsType = {
  header?: any;
  data?: any;
  onBack?: (event: any) => void;
  loading?: boolean;
  onClick?: (event: any) => void;
  children?: React.ReactNode;
  onPaymentChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicCharts__ArgsType;
export const PlasmicCharts__ArgProps = new Array<ArgPropType>(
  "header",
  "data",
  "onBack",
  "loading",
  "onClick",
  "children",
  "onPaymentChange"
);

export type PlasmicCharts__OverridesType = {
  frame49?: Flex__<"div">;
  frame25?: Flex__<"div">;
  frame48?: Flex__<"div">;
  frame47?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  frame50?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  button3?: Flex__<typeof Button>;
};

export interface DefaultChartsProps {
  header?: any;
  data?: any;
  onBack?: (event: any) => void;
  loading?: boolean;
  onClick?: (event: any) => void;
  children?: React.ReactNode;
  onPaymentChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCharts__RenderFunc(props: {
  variants: PlasmicCharts__VariantsArgs;
  args: PlasmicCharts__ArgsType;
  overrides: PlasmicCharts__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          header: [
            { field: "id", label_fa: "#", width: 80, type: "number" },
            {
              field: "username",
              label_fa:
                "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc",
              width: 150,
              type: "text"
            },
            {
              field: "mobile",
              label_fa:
                "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644",
              width: 170,
              type: "text"
            },
            {
              field: "refcode",
              label_fa: "\u06a9\u062f \u0645\u0639\u0631\u0641",
              width: 100,
              type: "text"
            },
            {
              field: "activeTel",
              label_fa:
                "\u062a\u0644\u06af\u0631\u0627\u0645 \u0641\u0639\u0627\u0644",
              width: 90,
              type: "bool"
            },
            {
              field: "countBuyHusbandSms",
              label_fa:
                "\u062a\u0639\u062f\u0627\u062f \u062e\u0631\u06cc\u062f \u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627",
              width: 120,
              type: "number"
            },
            {
              field: "countBuySelfSms",
              label_fa:
                "\u062a\u0639\u062f\u0627\u062f \u062e\u0631\u06cc\u062f \u0647\u0645\u06cc\u0627\u0631 \u062e\u0648\u062f",
              width: 120,
              type: "number"
            },
            {
              field: "lastActivity",
              label_fa:
                "\u0622\u062e\u0631\u06cc\u0646 \u0641\u0639\u0627\u0644\u06cc\u062a",
              width: 160,
              type: "datetime"
            },
            {
              field: "husbandSmsSubTime",
              label_fa:
                "\u067e\u0627\u06cc\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627",
              width: 160,
              type: "datetime"
            },
            {
              field: "selfHamyarSmsSubTime",
              label_fa:
                "\u067e\u0627\u06cc\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0645\u06cc\u0627\u0631 \u062e\u0648\u062f",
              width: 160,
              type: "datetime"
            },
            {
              field: "hamyarData",
              label_fa:
                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0647\u0645\u06cc\u0627\u0631\u0647\u0627",
              width: 220,
              type: "array"
            }
          ],
          data: {
            success: true,
            result: {
              total: 881,
              list: [
                {
                  user: {
                    countBuyBreastCancer: 3,
                    countBuyHamyarStatus: 1,
                    countBuyHusbandSms: 3,
                    countBuyPregnancySubStatus: 5,
                    countBuySelfSms: 1,
                    countBuySpecialAdvice: 1,
                    activeTel: true,
                    breastCancerSmsSubTime: {
                      year: 2026,
                      month: 2,
                      day: 3,
                      hour: 4,
                      minute: 3,
                      second: 11,
                      nanosecond: 141000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancySubTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 358000000,
                      timeZoneOffsetSeconds: 0
                    },
                    hamyarTime: {
                      year: 2025,
                      month: 5,
                      day: 21,
                      hour: 22,
                      minute: 22,
                      second: 35,
                      nanosecond: 336000000,
                      timeZoneOffsetSeconds: 0
                    },
                    husbandSmsSubTime: {
                      year: 2025,
                      month: 10,
                      day: 7,
                      hour: 8,
                      minute: 39,
                      second: 22,
                      nanosecond: 886000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancyBabyGrowthTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancyBecomeFatherTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancyBetterRelationTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancyDangerTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancySelfSmsTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    selfHamyarSmsSubTime: {
                      year: 2025,
                      month: 12,
                      day: 6,
                      hour: 10,
                      minute: 33,
                      second: 20,
                      nanosecond: 363000000,
                      timeZoneOffsetSeconds: 0
                    },
                    specialAdviceSubTim: {
                      year: 2025,
                      month: 3,
                      day: 9,
                      hour: 16,
                      minute: 11,
                      second: 12,
                      nanosecond: 839000000,
                      timeZoneOffsetSeconds: 0
                    },
                    mobile: "",
                    id: "265149",
                    lastActivity: {
                      year: 2025,
                      month: 9,
                      day: 12,
                      hour: 18,
                      minute: 23,
                      second: 34,
                      nanosecond: 707000000,
                      timeZoneOffsetSeconds: 0
                    },
                    username: "melika",
                    refcode: "3d8fb3"
                  }
                },
                {
                  user: {
                    countBuyHusbandSms: 1,
                    activeTel: false,
                    husbandSmsSubTime: {
                      year: 2025,
                      month: 9,
                      day: 13,
                      hour: 5,
                      minute: 49,
                      second: 2,
                      nanosecond: 612000000,
                      timeZoneOffsetSeconds: 0
                    },
                    mobile: "09139140864",
                    id: "f0afd250-6395-4253-b257-e167262cdd3d",
                    lastActivity: {
                      year: 2025,
                      month: 9,
                      day: 7,
                      hour: 3,
                      minute: 48,
                      second: 36,
                      nanosecond: 74000000,
                      timeZoneOffsetSeconds: 0
                    },
                    username: "guest_M8KxaugoDA",
                    refcode: "fGC3sVlYv"
                  }
                }
              ]
            }
          },
          loading: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "payment",
        type: "readonly",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [],

        onChangeProp: "onPaymentChange"
      },
      {
        path: "upseling",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHAiOiJsaW9tX3BhbmVsIn0.X3Y6yLedtYcV-7xxz2sFVoO6OBddGxGU3cB6Z23GBEQ"
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "button2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "charts",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            lable:
              "\u0646\u0631\u062e \u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0648\u0641\u0642",
            link: "https://n8n.staas.ir/webhook/panel/convertionPayment"
          },
          {
            lable: "\u0646\u0631\u062e \u0635\u0641\u062d\u0647 upselling",
            link: "https://n8n.staas.ir/webhook/panel/convertionUpsellCustomPage",
            icon: '<svg width="305" height="137" viewBox="0 0 305 137" fill="none" xmlns="http://www.w3.org/2000/svg">\r\n<path fill-rule="evenodd" clip-rule="evenodd" d="M4.8252 135.741L4.82521 64.9098C4.82521 61.9412 8.02757 60.076 10.6097 61.5407C12.2149 62.4513 14.2397 62.1029 15.4482 60.7081L19.383 56.1669C20.9099 54.4047 23.361 53.7586 25.5581 54.5393C28.3298 55.5241 31.394 54.2227 32.6099 51.5443L33.2476 50.1395C35.6887 44.762 43.1571 44.321 46.2142 49.3737L47.5493 51.5803L56.0942 69.011L62.0301 80.5526C63.7174 83.8333 66.4859 86.4307 69.8674 87.9056C72.0508 88.8579 73.9942 90.2854 75.556 92.084L80.106 97.3241C81.1823 98.5636 82.4295 99.6437 83.8102 100.532L86.8339 102.477C89.0238 103.885 91.7077 104.301 94.221 103.62C97.1044 102.839 99.4298 100.708 100.459 97.9039L107.363 79.0821L110.883 71.7764C113.254 66.8556 119.895 65.983 123.456 70.1243C124.114 70.8889 124.918 71.5146 125.82 71.9646L131.548 74.821C132.509 75.3001 133.395 75.9178 134.176 76.6541L134.912 77.3473C138.657 80.876 144.484 80.9377 148.304 77.4891C149.476 76.4309 150.377 75.1071 150.932 73.6288L156.733 58.168C157.775 55.3938 160.896 54.0212 163.644 55.1289C165.753 55.9791 168.169 55.3819 169.64 53.6472L175.722 46.4715L181.571 41.1466C183.257 39.6119 185.594 39.0118 187.811 39.5441C190.776 40.2562 193.857 38.9316 195.38 36.2893L201.356 25.921L207.02 15.5816C208.873 12.1991 211.927 9.63465 215.58 8.39519C217.472 7.75284 219.222 6.74827 220.731 5.43751L222.393 3.99334C225.267 1.49741 229.195 0.596769 232.868 1.59149C234.621 2.06607 236.236 2.95173 237.578 4.17501L242.101 8.29814C243.418 9.49849 244.842 10.5749 246.357 11.5138L250.577 14.1299C251.94 14.975 253.231 15.9318 254.436 16.9903L260.239 22.0878C260.856 22.6306 261.395 23.2574 261.838 23.95L262.904 25.6148C265.991 30.4371 273.103 30.2354 275.911 25.2457L276.131 24.8546C277.432 22.5447 279.944 21.1874 282.588 21.3656C285.175 21.5399 287.639 20.2455 288.964 18.0174L293.14 10.9925C294.45 8.78867 297.055 7.71048 299.539 8.3436C302.101 8.99649 303.894 11.3037 303.894 13.9476V135.741" fill="url(#paint0_linear_19_555)"/>\r\n<path d="M4.8252 135.741L4.82521 64.9098C4.82521 61.9412 8.02757 60.076 10.6097 61.5407C12.2149 62.4513 14.2397 62.1029 15.4482 60.7081L19.383 56.1669C20.9099 54.4047 23.361 53.7586 25.5581 54.5393C28.3298 55.5241 31.394 54.2227 32.6099 51.5443L33.2476 50.1395C35.6887 44.762 43.1571 44.321 46.2142 49.3737L47.5493 51.5803L56.0942 69.011L62.0301 80.5526C63.7174 83.8333 66.4859 86.4307 69.8674 87.9056C72.0508 88.8579 73.9942 90.2854 75.556 92.084L80.106 97.3241C81.1823 98.5636 82.4295 99.6437 83.8102 100.532L86.8339 102.477C89.0238 103.885 91.7077 104.301 94.221 103.62C97.1044 102.839 99.4298 100.708 100.459 97.9039L107.363 79.0821L110.883 71.7764C113.254 66.8556 119.895 65.983 123.456 70.1243C124.114 70.8889 124.918 71.5146 125.82 71.9646L131.548 74.821C132.509 75.3001 133.395 75.9178 134.176 76.6541L134.912 77.3473C138.657 80.876 144.484 80.9377 148.304 77.4891C149.476 76.4309 150.377 75.1071 150.932 73.6288L156.733 58.168C157.775 55.3938 160.896 54.0212 163.644 55.1289C165.753 55.9791 168.169 55.3819 169.64 53.6472L175.722 46.4715L181.571 41.1467C183.257 39.6119 185.594 39.0118 187.811 39.5441C190.776 40.2562 193.857 38.9316 195.38 36.2893L201.356 25.921L207.02 15.5816C208.873 12.1991 211.927 9.63465 215.58 8.39519C217.472 7.75284 219.222 6.74827 220.731 5.43751L222.393 3.99334C225.267 1.49741 229.195 0.596769 232.868 1.59149C234.621 2.06607 236.236 2.95173 237.578 4.17501L242.101 8.29814C243.418 9.49849 244.842 10.5749 246.357 11.5138L250.577 14.1299C251.94 14.975 253.231 15.9318 254.436 16.9903L260.239 22.0878C260.856 22.6306 261.395 23.2574 261.838 23.95L262.904 25.6148C265.991 30.4371 273.103 30.2354 275.911 25.2457L276.131 24.8546C277.432 22.5447 279.944 21.1874 282.588 21.3656C285.175 21.5399 287.639 20.2455 288.964 18.0174L293.14 10.9925C294.45 8.78867 297.055 7.71048 299.539 8.3436C302.101 8.99649 303.894 11.3037 303.894 13.9476V135.741" stroke="#7854DF" stroke-linecap="round" stroke-linejoin="round"/>\r\n<rect x="299.421" y="7.09753" width="5.57927" height="129.531" rx="2.78963" fill="#F9F9F9"/>\r\n<rect y="49.6829" width="7.43902" height="86.9451" rx="3.71951" fill="#F9F9F9"/>\r\n<defs>\r\n<linearGradient id="paint0_linear_19_555" x1="154.36" y1="0" x2="154.36" y2="135.741" gradientUnits="userSpaceOnUse">\r\n<stop stop-color="#7854DF"/>\r\n<stop offset="1" stop-color="white" stop-opacity="0"/>\r\n</linearGradient>\r\n</defs>\r\n</svg>\r\n  },\r\n  '
          }
        ]
      },
      {
        path: "button3[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "button3[].loading",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button3[].load",
        type: "private",
        variableType: "boolean"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"frame49"}
      data-plasmic-override={overrides.frame49}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame49
      )}
    >
      <div
        data-plasmic-name={"frame25"}
        data-plasmic-override={overrides.frame25}
        className={classNames(projectcss.all, sty.frame25)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__wYxmJ)}>
          {renderPlasmicSlot({
            defaultContents: "Journal Name",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>
      </div>
      <div
        data-plasmic-name={"frame48"}
        data-plasmic-override={overrides.frame48}
        className={classNames(projectcss.all, sty.frame48)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__xaz6S)}>
          <Line3Icon
            className={classNames(projectcss.all, sty.svg__oPc6Z)}
            role={"img"}
          />
        </div>
        <div
          data-plasmic-name={"frame47"}
          data-plasmic-override={overrides.frame47}
          className={classNames(projectcss.all, sty.frame47)}
        >
          <div className={classNames(projectcss.all, sty.freeBox___5OOpX)}>
            <div className={classNames(projectcss.all, sty.freeBox__c0Kjn)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k515Z
                )}
              >
                {
                  "\u0646\u0631\u062e \u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0648\u0641\u0642"
                }
              </div>
              {(() => {
                try {
                  return $state.payment.length == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__mmSfz)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__hIf8O)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image111.png",
                      fullWidth: 690,
                      fullHeight: 431,
                      aspectRatio: undefined
                    }}
                  />

                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={generateStateValueProp($state, ["button", "color"])}
                    load={generateStateValueProp($state, ["button", "load"])}
                    loading={generateStateValueProp($state, [
                      "button",
                      "loading"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updatePayment2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["button", "loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePayment2"] != null &&
                        typeof $steps["updatePayment2"] === "object" &&
                        typeof $steps["updatePayment2"].then === "function"
                      ) {
                        $steps["updatePayment2"] = await $steps[
                          "updatePayment2"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "https://n8n.staas.ir/webhook/panel/convertionPayment",
                                undefined,
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        Authorization: "Bearer " + $state.token
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updatePayment"] = $steps.invokeGlobalAction?.data
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["payment"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction?.data
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePayment"] != null &&
                        typeof $steps["updatePayment"] === "object" &&
                        typeof $steps["updatePayment"].then === "function"
                      ) {
                        $steps["updatePayment"] = await $steps["updatePayment"];
                      }

                      $steps["updatePayment3"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["button", "loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePayment3"] != null &&
                        typeof $steps["updatePayment3"] === "object" &&
                        typeof $steps["updatePayment3"].then === "function"
                      ) {
                        $steps["updatePayment3"] = await $steps[
                          "updatePayment3"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button", "load"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button",
                          "loading"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__s7VcO)}
                    >
                      <Icon302Icon
                        className={classNames(projectcss.all, sty.svg__cmGwL)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jJ6Cj
                        )}
                      >
                        {
                          "\u0646\u0645\u0627\u06cc\u0634 \u0646\u0645\u0648\u062f\u0627\u0631"
                        }
                      </div>
                    </div>
                  </Button>
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.payment.length > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Chart
                  cartesianGrid={[]}
                  chartConfig={(() => {
                    const __composite = [
                      {
                        color: null,
                        type: "natural",
                        dot: false,
                        key: null,
                        label: null
                      },
                      {
                        color: null,
                        type: "natural",
                        dot: false,
                        hidden: null,
                        key: null,
                        label: null
                      },
                      {
                        color: null,
                        type: "natural",
                        dot: false,
                        hidden: null,
                        key: null,
                        label: null
                      }
                    ];
                    __composite["0"]["color"] = "var(--token-qvl81LxkOSoe)";
                    __composite["0"]["key"] = "value";
                    __composite["0"]["label"] = "\u0645\u0628\u0644\u063a";
                    __composite["1"]["color"] = "var(--token-G-IZ_XhVdlqp)";
                    __composite["1"]["hidden"] = true;
                    __composite["1"]["key"] = "ok_unique";
                    __composite["1"]["label"] =
                      "\u062a\u0623\u06cc\u06cc\u062f \u0634\u062f\u0647";
                    __composite["2"]["color"] = "var(--token-bZhLbadoELTb)";
                    __composite["2"]["hidden"] = true;
                    __composite["2"]["key"] = "pending_unique";
                    __composite["2"]["label"] =
                      "\u062f\u0631 \u0627\u0646\u062a\u0638\u0627\u0631 \u062a\u0623\u06cc\u06cc\u062f";
                    return __composite;
                  })()}
                  className={classNames(
                    "__wab_instance",
                    sty.fragmentChart__vpBBm
                  )}
                  data={(() => {
                    try {
                      return $state.payment.map(i => {
                        const now = new Date(i.date);
                        const g = new Intl.DateTimeFormat("fa-IR", {
                          month: "long",
                          day: "numeric"
                        }).format(now);
                        return {
                          date: g,
                          value: i.value,
                          ok_unique: i.ok_unique,
                          pending_unique: i.pending_unique
                        };
                      });
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={false}
                  layout={"horizontal"}
                  legend={false}
                  stack={false}
                  tooltip={(() => {
                    const __composite = {
                      enabled: null,
                      indicator: null,
                      hideLabel: null,
                      hideIndicator: null
                    };
                    __composite["enabled"] = true;
                    __composite["indicator"] = "dashed";
                    __composite["hideLabel"] = true;
                    __composite["hideIndicator"] = true;
                    return __composite;
                  })()}
                  type={"bar"}
                  xAxis={(() => {
                    const __composite = {
                      key: null,
                      enabled: null,
                      type: null,
                      tickLine: null,
                      axisLine: null
                    };
                    __composite["key"] = "date";
                    __composite["enabled"] = true;
                    __composite["type"] = "category";
                    __composite["tickLine"] = true;
                    __composite["axisLine"] = true;
                    return __composite;
                  })()}
                  yAxis={(() => {
                    const __composite = {
                      key: null,
                      type: null,
                      enabled: null,
                      tickLine: null,
                      axisLine: null
                    };
                    __composite["key"] = "value";
                    __composite["type"] = "number";
                    __composite["enabled"] = true;
                    __composite["tickLine"] = false;
                    __composite["axisLine"] = true;
                    return __composite;
                  })()}
                />
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__csmYx)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aABe
                )}
              >
                {"\u0646\u0631\u062e \u0635\u0641\u062d\u0647 upselling"}
              </div>
              {(() => {
                try {
                  return $state.upseling.length == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__vsPA)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dwXXl)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image112.png",
                      fullWidth: 686,
                      fullHeight: 431,
                      aspectRatio: undefined
                    }}
                  />

                  <Button
                    data-plasmic-name={"button2"}
                    data-plasmic-override={overrides.button2}
                    className={classNames("__wab_instance", sty.button2)}
                    color={generateStateValueProp($state, ["button2", "color"])}
                    load={generateStateValueProp($state, ["button2", "load"])}
                    loading={generateStateValueProp($state, [
                      "button2",
                      "loading"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateButton2Loading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["button2", "loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateButton2Loading"] != null &&
                        typeof $steps["updateButton2Loading"] === "object" &&
                        typeof $steps["updateButton2Loading"].then ===
                          "function"
                      ) {
                        $steps["updateButton2Loading"] = await $steps[
                          "updateButton2Loading"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "https://n8n.staas.ir/webhook/panel/convertionUpsellingPage",
                                undefined,
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        Authorization: "Bearer " + $state.token
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateUpseling"] = $steps.invokeGlobalAction?.data
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["upseling"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction?.data
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUpseling"] != null &&
                        typeof $steps["updateUpseling"] === "object" &&
                        typeof $steps["updateUpseling"].then === "function"
                      ) {
                        $steps["updateUpseling"] = await $steps[
                          "updateUpseling"
                        ];
                      }

                      $steps["updatePayment2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["button2", "loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePayment2"] != null &&
                        typeof $steps["updatePayment2"] === "object" &&
                        typeof $steps["updatePayment2"].then === "function"
                      ) {
                        $steps["updatePayment2"] = await $steps[
                          "updatePayment2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button2", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button2", "load"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button2",
                          "loading"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__c8Ipf)}
                    >
                      <Icon302Icon
                        className={classNames(projectcss.all, sty.svg___94Y)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nwkQr
                        )}
                      >
                        {
                          "\u0646\u0645\u0627\u06cc\u0634 \u0646\u0645\u0648\u062f\u0627\u0631"
                        }
                      </div>
                    </div>
                  </Button>
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.upseling.length > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Chart
                  cartesianGrid={[]}
                  chartConfig={(() => {
                    const __composite = [
                      {
                        color: null,
                        type: "natural",
                        dot: false,
                        key: null,
                        label: null
                      }
                    ];
                    __composite["0"]["color"] = "var(--token-bHHJuMx2zyxz)";
                    __composite["0"]["key"] = "page_conversion_rate";
                    __composite["0"]["label"] =
                      "\u0646\u0631\u062e \u062a\u0628\u062f\u06cc\u0644 (%)";
                    return __composite;
                  })()}
                  className={classNames(
                    "__wab_instance",
                    sty.fragmentChart__benNv
                  )}
                  data={(() => {
                    try {
                      return $state.upseling.map(i => {
                        const now = new Date(i.date);
                        const g = new Intl.DateTimeFormat("fa-IR", {
                          month: "long",
                          day: "numeric"
                        }).format(now);
                        return {
                          date: g,
                          ok_count: i.ok_count,
                          not_ok_count: i.not_ok_count,
                          ok_nok_conversion_rate: i.ok_nok_conversion_rate,
                          page_view_count: i.page_view_count,
                          page_conversion_rate: i.page_conversion_rate
                        };
                      });
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={false}
                  layout={"horizontal"}
                  legend={false}
                  stack={false}
                  tooltip={(() => {
                    const __composite = {
                      enabled: null,
                      indicator: null,
                      hideLabel: null,
                      hideIndicator: null
                    };
                    __composite["enabled"] = true;
                    __composite["indicator"] = "line";
                    __composite["hideLabel"] = false;
                    __composite["hideIndicator"] = false;
                    return __composite;
                  })()}
                  type={"bar"}
                  xAxis={(() => {
                    const __composite = {
                      key: null,
                      enabled: null,
                      type: null,
                      tickLine: null,
                      axisLine: null
                    };
                    __composite["key"] = "date";
                    __composite["enabled"] = true;
                    __composite["type"] = "category";
                    __composite["tickLine"] = true;
                    __composite["axisLine"] = true;
                    return __composite;
                  })()}
                  yAxis={(() => {
                    const __composite = {
                      key: null,
                      type: null,
                      enabled: null,
                      tickLine: null,
                      axisLine: null
                    };
                    __composite["key"] = "page_conversion_rate";
                    __composite["type"] = "number";
                    __composite["enabled"] = true;
                    __composite["tickLine"] = false;
                    __composite["axisLine"] = true;
                    return __composite;
                  })()}
                />
              ) : null}
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"frame50"}
          data-plasmic-override={overrides.frame50}
          className={classNames(projectcss.all, sty.frame50)}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.charts;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__rBw2N)}
                key={currentIndex}
              >
                <div className={classNames(projectcss.all, sty.freeBox__qT68T)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r2GXa
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.lable;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0646\u0631\u062e \u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0648\u0641\u0642";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml)}
                  code={(() => {
                    try {
                      return currentItem.icon;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "<div>Paste your embed code via the right sidebar</div>";
                      }
                      throw e;
                    }
                  })()}
                />

                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.button3),
                    color: generateStateValueProp($state, [
                      "button3",
                      __plasmic_idx_0,
                      "color"
                    ]),
                    load: generateStateValueProp($state, [
                      "button3",
                      __plasmic_idx_0,
                      "load"
                    ]),
                    loading: generateStateValueProp($state, [
                      "button3",
                      __plasmic_idx_0,
                      "loading"
                    ]),
                    onClick: async event => {
                      const $steps = {};

                      $steps["updatePayment2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["button3", "loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePayment2"] != null &&
                        typeof $steps["updatePayment2"] === "object" &&
                        typeof $steps["updatePayment2"].then === "function"
                      ) {
                        $steps["updatePayment2"] = await $steps[
                          "updatePayment2"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                (() => {
                                  try {
                                    return currentItem.link;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined,
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        Authorization: "Bearer " + $state.token
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updatePayment"] = $steps.invokeGlobalAction?.data
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["payment"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction?.data
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePayment"] != null &&
                        typeof $steps["updatePayment"] === "object" &&
                        typeof $steps["updatePayment"].then === "function"
                      ) {
                        $steps["updatePayment"] = await $steps["updatePayment"];
                      }

                      $steps["updatePayment3"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["button3", "loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePayment3"] != null &&
                        typeof $steps["updatePayment3"] === "object" &&
                        typeof $steps["updatePayment3"].then === "function"
                      ) {
                        $steps["updatePayment3"] = await $steps[
                          "updatePayment3"
                        ];
                      }
                    },
                    onColorChange: async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button3",
                          __plasmic_idx_0,
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    onLoadChange: async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button3",
                          __plasmic_idx_0,
                          "load"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    onLoadingChange: async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button3",
                          __plasmic_idx_0,
                          "loading"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    shape: "rounded",
                    size: "compact"
                  };

                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "button3[].color",
                        initFunc: ({ $props, $state, $queries }) => []
                      },
                      {
                        name: "button3[].loading",
                        initFunc: ({ $props, $state, $queries }) => undefined
                      },
                      {
                        name: "button3[].load",
                        initFunc: ({ $props, $state, $queries }) => false
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <Button
                      data-plasmic-name={"button3"}
                      data-plasmic-override={overrides.button3}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sOnzJ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___53Mvc
                          )}
                        >
                          {
                            "\u0646\u0645\u0627\u06cc\u0634 \u0646\u0645\u0648\u062f\u0627\u0631"
                          }
                        </div>
                        <Icon302Icon
                          className={classNames(projectcss.all, sty.svg__kXbxa)}
                          role={"img"}
                        />
                      </div>
                    </Button>
                  );
                })()}
              </div>
            );
          })}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___6MzkJ)} />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame49: [
    "frame49",
    "frame25",
    "frame48",
    "frame47",
    "button",
    "button2",
    "frame50",
    "embedHtml",
    "button3"
  ],
  frame25: ["frame25"],
  frame48: [
    "frame48",
    "frame47",
    "button",
    "button2",
    "frame50",
    "embedHtml",
    "button3"
  ],
  frame47: ["frame47", "button", "button2"],
  button: ["button"],
  button2: ["button2"],
  frame50: ["frame50", "embedHtml", "button3"],
  embedHtml: ["embedHtml"],
  button3: ["button3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame49: "div";
  frame25: "div";
  frame48: "div";
  frame47: "div";
  button: typeof Button;
  button2: typeof Button;
  frame50: "div";
  embedHtml: typeof Embed;
  button3: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCharts__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCharts__VariantsArgs;
    args?: PlasmicCharts__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCharts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCharts__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCharts__ArgProps,
          internalVariantPropNames: PlasmicCharts__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCharts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame49") {
    func.displayName = "PlasmicCharts";
  } else {
    func.displayName = `PlasmicCharts.${nodeName}`;
  }
  return func;
}

export const PlasmicCharts = Object.assign(
  // Top-level PlasmicCharts renders the root element
  makeNodeComponent("frame49"),
  {
    // Helper components rendering sub-elements
    frame25: makeNodeComponent("frame25"),
    frame48: makeNodeComponent("frame48"),
    frame47: makeNodeComponent("frame47"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    frame50: makeNodeComponent("frame50"),
    embedHtml: makeNodeComponent("embedHtml"),
    button3: makeNodeComponent("button3"),

    // Metadata about props expected for PlasmicCharts
    internalVariantProps: PlasmicCharts__VariantProps,
    internalArgProps: PlasmicCharts__ArgProps
  }
);

export default PlasmicCharts;
/* prettier-ignore-end */
