/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: O_6FIPF6rDTy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import UploudeTime from "../../UploudeTime"; // plasmic-import: aUO_fJR7ceN4/component
import Post2ForSocialMain from "../../Post2ForSocialMain"; // plasmic-import: eaFD2jwbxRPb/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicRepeatPost.module.css"; // plasmic-import: O_6FIPF6rDTy/css

createPlasmicElementProxy;

export type PlasmicRepeatPost__VariantMembers = {};
export type PlasmicRepeatPost__VariantsArgs = {};
type VariantPropType = keyof PlasmicRepeatPost__VariantsArgs;
export const PlasmicRepeatPost__VariantProps = new Array<VariantPropType>();

export type PlasmicRepeatPost__ArgsType = { postData?: any };
type ArgPropType = keyof PlasmicRepeatPost__ArgsType;
export const PlasmicRepeatPost__ArgProps = new Array<ArgPropType>("postData");

export type PlasmicRepeatPost__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  uploudeTime?: Flex__<typeof UploudeTime>;
  svg?: Flex__<"svg">;
  post2ForSocialMain?: Flex__<typeof Post2ForSocialMain>;
};

export interface DefaultRepeatPostProps {
  postData?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRepeatPost__RenderFunc(props: {
  variants: PlasmicRepeatPost__VariantsArgs;
  args: PlasmicRepeatPost__ArgsType;
  overrides: PlasmicRepeatPost__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__xUaP8)}>
        <div className={classNames(projectcss.all, sty.freeBox__zsaNa)}>
          <div className={classNames(projectcss.all, sty.freeBox__dn2W3)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"48px"}
              height={``}
              loading={"lazy"}
              src={(() => {
                try {
                  return $props.postData.user.image;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              width={``}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jntva)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___59Di2
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.postData.user.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0627\u0645\u06cc\u0631 \u062d\u0633\u06cc\u0646";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fqDdC
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.postData.user.username;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "amir__@";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__gc81X)}>
            <UploudeTime
              data-plasmic-name={"uploudeTime"}
              data-plasmic-override={overrides.uploudeTime}
              className={classNames("__wab_instance", sty.uploudeTime)}
            />

            <svg
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__vsEl2)}>
        <Post2ForSocialMain
          data-plasmic-name={"post2ForSocialMain"}
          data-plasmic-override={overrides.post2ForSocialMain}
          className={classNames("__wab_instance", sty.post2ForSocialMain)}
          data={(() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          image2={(() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "https://storage.c2.liara.space/liom/2025-03/post/2025-03-28-38fa0b71-308d-49f8-87e0-290a8573a25c.mp4\n";
              }
              throw e;
            }
          })()}
          postType={(() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
          text={(() => {
            try {
              return $props.postData.post.text;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          title={(() => {
            try {
              return $props.postData.post.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          video={(() => {
            try {
              return $props.postData.post.action;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "uploudeTime", "svg", "post2ForSocialMain"],
  img: ["img"],
  uploudeTime: ["uploudeTime"],
  svg: ["svg"],
  post2ForSocialMain: ["post2ForSocialMain"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  uploudeTime: typeof UploudeTime;
  svg: "svg";
  post2ForSocialMain: typeof Post2ForSocialMain;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRepeatPost__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRepeatPost__VariantsArgs;
    args?: PlasmicRepeatPost__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRepeatPost__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRepeatPost__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRepeatPost__ArgProps,
          internalVariantPropNames: PlasmicRepeatPost__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRepeatPost__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRepeatPost";
  } else {
    func.displayName = `PlasmicRepeatPost.${nodeName}`;
  }
  return func;
}

export const PlasmicRepeatPost = Object.assign(
  // Top-level PlasmicRepeatPost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    uploudeTime: makeNodeComponent("uploudeTime"),
    svg: makeNodeComponent("svg"),
    post2ForSocialMain: makeNodeComponent("post2ForSocialMain"),

    // Metadata about props expected for PlasmicRepeatPost
    internalVariantProps: PlasmicRepeatPost__VariantProps,
    internalArgProps: PlasmicRepeatPost__ArgProps
  }
);

export default PlasmicRepeatPost;
/* prettier-ignore-end */
