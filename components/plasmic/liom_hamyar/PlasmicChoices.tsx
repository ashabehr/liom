// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: kqjrVA4cMqR_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ButtonWithNote from "../../ButtonWithNote"; // plasmic-import: rV9-uXl-J5jS/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicChoices.module.css"; // plasmic-import: kqjrVA4cMqR_/css

createPlasmicElementProxy;

export type PlasmicChoices__VariantMembers = {
  circl: "circl";
  rectangle: "rectangle";
};
export type PlasmicChoices__VariantsArgs = {
  circl?: SingleBooleanChoiceArg<"circl">;
  rectangle?: SingleBooleanChoiceArg<"rectangle">;
};
type VariantPropType = keyof PlasmicChoices__VariantsArgs;
export const PlasmicChoices__VariantProps = new Array<VariantPropType>(
  "circl",
  "rectangle"
);

export type PlasmicChoices__ArgsType = {
  beforList?: any;
  list?: any;
  onListChange?: (val: string) => void;
  html?: string;
  shape?: string;
  selectOne?: boolean;
  onSelectOneChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicChoices__ArgsType;
export const PlasmicChoices__ArgProps = new Array<ArgPropType>(
  "beforList",
  "list",
  "onListChange",
  "html",
  "shape",
  "selectOne",
  "onSelectOneChange"
);

export type PlasmicChoices__OverridesType = {
  choices?: Flex__<"div">;
  buttonWithNote?: Flex__<typeof ButtonWithNote>;
  embedHtml?: Flex__<typeof Embed>;
  text?: Flex__<"div">;
};

export interface DefaultChoicesProps {
  beforList?: any;
  list?: any;
  onListChange?: (val: string) => void;
  html?: string;
  shape?: string;
  selectOne?: boolean;
  onSelectOneChange?: (val: string) => void;
  circl?: SingleBooleanChoiceArg<"circl">;
  rectangle?: SingleBooleanChoiceArg<"rectangle">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChoices__RenderFunc(props: {
  variants: PlasmicChoices__VariantsArgs;
  args: PlasmicChoices__ArgsType;
  overrides: PlasmicChoices__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          beforList: [
            {
              value: "headache",
              meaning: "\u0633\u0631\u062f\u0631\u062f",
              icon: "<svg width='35' height='35' viewBox='0 0 35 35' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n<g clip-path='url(#clip0_16159_32828)'>\r\n<path d='M4.98039 9.10027H4.91003C4.82972 9.08719 4.75405 9.0539 4.69015 9.00352L1.17217 6.2435C1.11967 6.20828 1.07462 6.16306 1.0396 6.11042C1.00458 6.05778 0.980266 5.99876 0.968053 5.93673C0.95584 5.8747 0.955964 5.81087 0.968419 5.74889C0.980874 5.68691 1.00542 5.62799 1.04064 5.57549C1.07587 5.52299 1.12109 5.47794 1.17373 5.44292C1.22636 5.4079 1.28538 5.38359 1.34741 5.37137C1.40944 5.35916 1.47327 5.35928 1.53526 5.37174C1.59724 5.38419 1.65616 5.40874 1.70866 5.44396H1.76143L4.61979 7.68508L4.84846 6.05001C4.86447 5.93542 4.92135 5.83048 5.00862 5.75452C5.0959 5.67856 5.20769 5.6367 5.3234 5.63665H5.39375C5.47324 5.64713 5.54883 5.67737 5.61362 5.7246L8.83978 8.22077C8.89784 8.25377 8.9483 8.29864 8.98785 8.35246C9.0274 8.40628 9.05514 8.46783 9.06929 8.5331C9.08343 8.59838 9.08365 8.6659 9.06993 8.73126C9.05621 8.79662 9.02885 8.85835 8.98966 8.91243C8.95046 8.9665 8.9003 9.0117 8.84245 9.04507C8.7846 9.07845 8.72036 9.09924 8.65392 9.1061C8.58749 9.11297 8.52035 9.10574 8.4569 9.08489C8.39345 9.06405 8.33512 9.03006 8.2857 8.98513L5.64721 7.05104L5.40734 8.71249C5.3875 8.81514 5.33465 8.9085 5.25686 8.97836C5.17906 9.04821 5.08058 9.09074 4.97639 9.09947L4.98039 9.10027Z' fill='#8254C6'/>\r\n<path d='M11.0898 6.07609C11.0094 6.07631 10.9301 6.05629 10.8594 6.01787C10.7887 5.97945 10.7288 5.92386 10.6853 5.85622L9.75378 4.39706L9.39318 5.03669C9.3525 5.11344 9.29174 5.1777 9.21739 5.22262C9.14304 5.26754 9.05789 5.29144 8.97102 5.29174C8.88699 5.29281 8.80409 5.27236 8.7302 5.23233C8.6563 5.19231 8.59388 5.13404 8.54887 5.06308L7.13368 2.68124C7.08823 2.62737 7.05486 2.56437 7.03584 2.4965C7.01682 2.42863 7.0126 2.35747 7.02345 2.28783C7.03429 2.21819 7.05995 2.15168 7.09871 2.09281C7.13746 2.03394 7.1884 1.98407 7.24808 1.94657C7.30777 1.90907 7.37479 1.88482 7.44465 1.87546C7.51451 1.86609 7.58557 1.87184 7.65302 1.89229C7.72047 1.91274 7.78275 1.94744 7.83564 1.99402C7.88853 2.04061 7.9308 2.09801 7.9596 2.16233L8.97023 3.82378L9.32203 3.19934C9.36446 3.12757 9.42486 3.0681 9.49727 3.02678C9.56969 2.98547 9.65162 2.96374 9.73499 2.96374C9.81836 2.96374 9.90029 2.98547 9.97271 3.02678C10.0451 3.0681 10.1055 3.12757 10.148 3.19934L11.528 5.34371C11.5626 5.39723 11.5863 5.45713 11.5976 5.51991C11.6088 5.58268 11.6075 5.64707 11.5935 5.70931C11.5796 5.77155 11.5534 5.83039 11.5165 5.88238C11.4796 5.93438 11.4326 5.97849 11.3784 6.01213L11.2817 6.0649C11.2185 6.08096 11.1526 6.08395 11.0882 6.0737L11.0898 6.07609Z' fill='#8254C6'/>\r\n<path d='M7.54056 1.9894C7.61081 1.9891 7.67998 2.00671 7.74153 2.04057C7.80309 2.07442 7.855 2.12341 7.89236 2.18289L8.83262 3.7388L8.95575 3.94109L9.07009 3.73001L9.34273 3.2111C9.37929 3.14928 9.43134 3.09805 9.49373 3.06247C9.55612 3.02688 9.6267 3.00816 9.69853 3.00816C9.77035 3.00816 9.84094 3.02688 9.90333 3.06247C9.96572 3.09805 10.0178 3.14928 10.0543 3.2111L11.4343 5.35548C11.4638 5.40109 11.484 5.45207 11.4938 5.50549C11.5035 5.55891 11.5027 5.61374 11.4912 5.66683C11.4798 5.71992 11.458 5.77023 11.4271 5.8149C11.3962 5.85957 11.3568 5.89771 11.3112 5.92715H11.2233V6.03269V5.93594C11.1344 5.9687 11.0371 5.96997 10.9474 5.93956C10.8578 5.90914 10.7813 5.84888 10.7307 5.76884L9.85124 4.40962L9.72811 4.21613L9.61378 4.41841L9.30596 4.97249C9.26877 5.0362 9.21553 5.08905 9.15156 5.12578C9.0876 5.16251 9.01512 5.18184 8.94136 5.18184C8.86759 5.18184 8.79512 5.16251 8.73115 5.12578C8.66718 5.08905 8.61396 5.0362 8.57677 4.97249L7.16158 2.58186C7.12221 2.51919 7.10038 2.44709 7.09839 2.3731C7.0964 2.29911 7.11432 2.22594 7.15027 2.16124C7.18621 2.09654 7.23887 2.04267 7.30275 2.00527C7.36662 1.96787 7.43936 1.94831 7.51338 1.94863M7.51338 1.80791C7.40973 1.80456 7.30721 1.83037 7.2175 1.8824C7.12779 1.93443 7.05448 2.0106 7.00592 2.10223C6.95735 2.19386 6.93548 2.29728 6.94278 2.40073C6.95009 2.50418 6.98628 2.60351 7.04724 2.6874L8.49762 5.08603C8.54638 5.16873 8.61578 5.23733 8.69904 5.28513C8.7823 5.33292 8.87654 5.35827 8.97254 5.35867C9.06935 5.3591 9.16459 5.33415 9.24876 5.28632C9.33293 5.23848 9.4031 5.16943 9.45227 5.08603L9.76009 4.53195L10.6396 5.89117C10.7083 5.99956 10.8125 6.08073 10.9344 6.12083C11.0563 6.16093 11.1884 6.15747 11.308 6.11104C11.3866 6.08238 11.4578 6.03629 11.516 5.9762C11.5743 5.91612 11.6182 5.84362 11.6444 5.76414C11.6707 5.68466 11.6786 5.60027 11.6675 5.51731C11.6565 5.43434 11.6268 5.35496 11.5807 5.28512L10.2006 3.14074C10.1513 3.05897 10.0817 2.99132 9.9986 2.94436C9.91546 2.8974 9.8216 2.87272 9.72611 2.87272C9.63063 2.87272 9.53675 2.8974 9.45361 2.94436C9.37047 2.99132 9.30088 3.05897 9.25158 3.14074L8.97893 3.65965L8.03788 2.10374C7.98778 2.02558 7.91882 1.96126 7.83738 1.91669C7.75593 1.87212 7.66459 1.84874 7.57174 1.84868L7.51338 1.80791Z' fill='#8254C6'/>\r\n<path d='M16.0555 15.9995C15.6679 15.999 15.2836 15.9275 14.9218 15.7885C14.8861 15.7816 14.8523 15.7672 14.8226 15.7462C14.793 15.7253 14.7681 15.6982 14.7498 15.6668C14.7314 15.6355 14.72 15.6006 14.7162 15.5644C14.7125 15.5283 14.7164 15.4918 14.7279 15.4573C14.7394 15.4229 14.7581 15.3912 14.7828 15.3646C14.8075 15.338 14.8376 15.3169 14.8711 15.3028C14.9046 15.2888 14.9407 15.282 14.977 15.283C15.0134 15.284 15.049 15.2928 15.0817 15.3087C15.4086 15.4381 15.758 15.5009 16.1095 15.4934C16.461 15.4858 16.8074 15.4081 17.1285 15.2648C17.4495 15.1215 17.7386 14.9155 17.9789 14.6589C18.2192 14.4022 18.4058 14.1002 18.5277 13.7704C18.5346 13.7347 18.549 13.7009 18.5699 13.6713C18.5909 13.6416 18.618 13.6168 18.6493 13.5984C18.6807 13.5801 18.7156 13.5686 18.7517 13.5649C18.7879 13.5611 18.8244 13.5651 18.8588 13.5766C18.8933 13.5881 18.9249 13.6068 18.9516 13.6315C18.9782 13.6562 18.9993 13.6863 19.0133 13.7198C19.0274 13.7532 19.0342 13.7894 19.0331 13.8257C19.0321 13.862 19.0234 13.8977 19.0074 13.9303C18.7832 14.5346 18.3807 15.0565 17.8533 15.427C17.3259 15.7975 16.6984 15.9991 16.0539 16.0051L16.0555 15.9995Z' fill='#8254C6'/>\r\n<path d='M13.3309 12.0362H13.2429C13.1802 12.0125 13.1294 11.965 13.1014 11.9041C13.0734 11.8433 13.0706 11.7738 13.0934 11.7108C13.2414 11.321 13.4648 10.9642 13.7509 10.6607C14.0369 10.3573 14.3799 10.1132 14.7603 9.94244C15.1407 9.77165 15.551 9.67752 15.9678 9.6654C16.3846 9.65329 16.7998 9.72344 17.1894 9.87184C17.245 9.89894 17.2889 9.94531 17.3128 10.0023C17.3367 10.0593 17.3392 10.1231 17.3196 10.1817C17.3001 10.2404 17.2599 10.29 17.2065 10.3212C17.1531 10.3524 17.0902 10.3632 17.0295 10.3516C16.7021 10.2224 16.3521 10.16 16.0002 10.1681C15.6483 10.1762 15.3016 10.2547 14.9805 10.3989C14.6593 10.543 14.3703 10.75 14.1304 11.0076C13.8905 11.2652 13.7045 11.5681 13.5835 11.8987C13.5591 11.9437 13.5218 11.9804 13.4763 12.0039C13.4308 12.0275 13.3793 12.0368 13.3284 12.0306L13.3309 12.0362Z' fill='#8254C6'/>\r\n<path d='M16.0578 14.9099H15.9699C15.9023 14.9099 15.8374 14.883 15.7895 14.8352C15.7417 14.7874 15.7148 14.7225 15.7148 14.6549C15.7148 14.5872 15.7417 14.5223 15.7895 14.4745C15.8374 14.4267 15.9023 14.3998 15.9699 14.3998C16.1773 14.4092 16.3845 14.3775 16.5796 14.3065C16.7747 14.2355 16.9538 14.1266 17.1066 13.9861C17.2594 13.8455 17.3829 13.6761 17.4699 13.4876C17.557 13.2992 17.6058 13.0953 17.6138 12.8879C17.6138 12.8202 17.6406 12.7553 17.6885 12.7075C17.7363 12.6597 17.8012 12.6328 17.8688 12.6328C17.9365 12.6328 18.0013 12.6597 18.0492 12.7075C18.097 12.7553 18.1239 12.8202 18.1239 12.8879C18.106 13.4261 17.8812 13.9366 17.4964 14.3133C17.1116 14.6899 16.5963 14.9036 16.0578 14.9099Z' fill='#8254C6'/>\r\n<path d='M14.2288 13.0058C14.1953 13.0047 14.1624 12.9969 14.1319 12.9831C14.1014 12.9692 14.0739 12.9494 14.051 12.9249C14.0281 12.9004 14.0103 12.8717 13.9986 12.8403C13.9868 12.8089 13.9814 12.7755 13.9826 12.742C13.9935 12.4681 14.0583 12.199 14.1734 11.9502C14.2885 11.7014 14.4515 11.4777 14.6531 11.292C14.8548 11.1064 15.0911 10.9623 15.3485 10.8681C15.606 10.7739 15.8795 10.7314 16.1533 10.7431C16.221 10.7431 16.2859 10.77 16.3337 10.8178C16.3815 10.8656 16.4084 10.9305 16.4084 10.9982C16.4084 11.0658 16.3815 11.1307 16.3337 11.1785C16.2859 11.2263 16.221 11.2532 16.1533 11.2532C15.7351 11.2367 15.3273 11.3867 15.0194 11.6702C14.7114 11.9537 14.5283 12.3477 14.5103 12.7659C14.5103 12.8336 14.4834 12.8985 14.4356 12.9463C14.3877 12.9941 14.3229 13.021 14.2552 13.021L14.2288 13.0058Z' fill='#8254C6'/>\r\n<path d='M16.056 13.8471H16.0121C15.7507 13.8414 15.5021 13.7327 15.3203 13.5448C15.1385 13.3569 15.0382 13.1048 15.0411 12.8434C15.044 12.5819 15.1499 12.3322 15.3358 12.1483C15.5217 11.9644 15.7726 11.8613 16.0341 11.8613C16.2955 11.8613 16.5464 11.9644 16.7323 12.1483C16.9182 12.3322 17.0241 12.5819 17.027 12.8434C17.0299 13.1048 16.9296 13.3569 16.7478 13.5448C16.566 13.7327 16.3174 13.8414 16.056 13.8471ZM16.056 12.3176C15.9615 12.3202 15.8699 12.3505 15.7926 12.405C15.7153 12.4594 15.6558 12.5355 15.6216 12.6236C15.5874 12.7117 15.58 12.808 15.6003 12.9003C15.6207 12.9926 15.6678 13.0769 15.7359 13.1425C15.8039 13.2081 15.8898 13.2522 15.9828 13.2691C16.0758 13.2861 16.1718 13.2752 16.2586 13.2378C16.3454 13.2004 16.4192 13.1382 16.4708 13.059C16.5224 12.9798 16.5495 12.8871 16.5486 12.7926C16.5479 12.7289 16.5347 12.6659 16.5095 12.6074C16.4843 12.549 16.4477 12.4961 16.4018 12.4518C16.356 12.4076 16.3018 12.373 16.2424 12.35C16.1831 12.3269 16.1197 12.3159 16.056 12.3176Z' fill='#8254C6'/>\r\n<path d='M32.5997 22.8655C32.5006 19.0538 31.5441 15.3135 29.8013 11.9221C28.8198 10.0677 27.3524 8.51515 25.5563 7.43068C23.7601 6.3462 21.7029 5.77066 19.6047 5.76567C17.9819 5.7609 16.3786 6.11915 14.9122 6.81418C13.4458 7.50922 12.1533 8.52344 11.1296 9.78257C10.8745 10.1024 10.6499 10.3982 10.6722 10.6621C10.6879 10.7456 10.7201 10.8252 10.7669 10.8962C10.8138 10.9672 10.8743 11.0281 10.9449 11.0754C11.0567 11.177 11.1989 11.2388 11.3495 11.2513C11.6485 11.2513 11.9563 10.9315 12.229 10.6621L12.4576 10.4334C13.1113 9.71802 13.8456 9.0808 14.646 8.53448C16.1275 7.60952 17.839 7.11917 19.5855 7.11929C21.423 7.13786 23.2219 7.64925 24.7943 8.6001C26.3668 9.55094 27.6552 10.9064 28.5252 12.525C30.6176 16.322 31.1005 20.5204 31.3116 24.4965C31.3732 25.6567 31.3556 26.8152 31.3116 27.925V29.5952L23.7959 28.2152L24.0686 27.9426C26.9165 24.9843 28.0415 21.3416 27.4882 16.8289C27.3739 15.9494 27.0085 15.7216 26.4864 15.7216H26.1434C25.9104 15.7554 25.6753 15.773 25.4398 15.7743C24.1453 15.7546 22.8994 15.2783 21.9218 14.4295C21.315 13.9498 20.9623 13.6564 20.7177 13.6564C20.473 13.6564 20.19 14.0345 19.6783 14.7197C18.3247 16.5395 16.8127 17.4182 15.0457 17.4182C14.1985 17.3983 13.3618 17.2255 12.576 16.9081C12.3858 16.8295 12.1834 16.7848 11.9779 16.7762C11.818 16.7762 11.3447 16.7762 11.2743 17.6557C10.9545 21.6374 11.9339 24.8196 14.2454 27.3949C14.3637 27.527 14.4752 27.6649 14.5796 27.8082L14.7395 28.0017L14.9594 28.2744L8.05054 29.5313H7.9642C7.77071 29.5313 7.74433 29.3554 7.72434 29.1267C7.35617 25.2129 7.67739 21.2649 8.67339 17.4622C8.84929 16.7154 8.67339 16.4779 8.25123 16.3548C8.16604 16.3268 8.07706 16.312 7.98738 16.3108C7.87305 16.3108 7.53005 16.3108 7.33656 17.0488C6.15978 21.3244 5.84024 25.7905 6.3963 30.1901C6.40152 30.2721 6.40152 30.3543 6.3963 30.4363C7.89065 30.1165 9.40257 29.8383 10.9233 29.6456C11.2412 29.5567 11.5639 29.4862 11.8899 29.4345C12.1879 29.4031 12.4823 29.3442 12.7694 29.2586C13.259 29.1113 13.7629 29.017 14.2726 28.9772C14.3186 28.964 14.3673 28.964 14.4133 28.9772C14.9456 28.7718 15.5269 28.7289 16.0836 28.854H16.3826C16.4398 28.8698 16.49 28.9045 16.5252 28.9524C16.5603 29.0002 16.5782 29.0586 16.5761 29.1179C17.582 29.3461 18.6131 29.4437 19.6439 29.4081C20.7854 29.2624 21.9027 28.9667 22.9668 28.5286C23.0234 28.507 23.0861 28.507 23.1427 28.5286C23.6433 28.5101 24.1417 28.6033 24.6019 28.8013C24.761 28.7973 24.9193 28.8245 25.068 28.8812C27.4762 29.7607 30.0691 29.8743 32.487 30.6402C32.4769 30.532 32.4769 30.4231 32.487 30.3148C32.487 29.4353 32.5397 28.4951 32.5749 27.6076C32.5997 26.1004 32.6788 24.4654 32.5997 22.8655ZM22.667 27.263C21.7355 27.9973 20.5914 28.4105 19.4056 28.4407C18.4159 28.436 17.447 28.1561 16.6073 27.6323C14.0407 26.0764 12.1506 21.9012 12.6431 18.8422V18.6023L12.863 18.6639C13.5112 18.8379 14.1787 18.9296 14.8499 18.9365C15.963 18.9098 17.0549 18.627 18.0412 18.1103C19.0274 17.5935 19.8814 16.8566 20.537 15.9566L20.6249 15.8423L26.0746 17.6812V17.7868C26.9006 20.7139 25.1951 25.4344 22.6638 27.3013L22.667 27.263Z' fill='#8254C6'/>\r\n<path d='M6.60938 30.3646L16.1287 28.6057C16.1287 28.6057 18.6873 30.3023 23.0048 28.3242C32.0676 30.3726 32.0788 30.4686 32.0788 30.4686' stroke='#8254C6' stroke-width='0.262956' stroke-miterlimit='10'/>\r\n<path d='M8.91211 14.4964L9.59812 12.8877' stroke='#8254C6' stroke-width='0.797349' stroke-miterlimit='10' stroke-linecap='round'/>\r\n</g>\r\n<defs>\r\n<clipPath id='clip0_16159_32828'>\r\n<rect width='34.778' height='34.778' fill='white' transform='translate(0.113281 0.111328)'/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n"
            },
            {
              value: "stomach_ache",
              meaning: "\u062f\u0644\u200c\u062f\u0631\u062f",
              icon: "\ud83e\udd22"
            },
            {
              value: "chest_pain",
              meaning:
                "\u062f\u0631\u062f \u0642\u0641\u0633\u0647 \u0633\u06cc\u0646\u0647",
              icon: "\ud83d\udc94"
            },
            {
              value: "contusion",
              meaning: "\u06a9\u0628\u0648\u062f\u06cc",
              icon: "\ud83e\ude79"
            },
            {
              value: "back_ache",
              meaning: "\u06a9\u0645\u0631\u062f\u0631\u062f",
              icon: "\ud83d\udeb6\u200d\u2642\ufe0f\ud83d\udca2"
            },
            {
              value: "foot_ache",
              meaning: "\u062f\u0631\u062f \u067e\u0627",
              icon: "\ud83e\uddb6\ud83d\udca5"
            },
            {
              value: "nausea",
              meaning: "\u062d\u0627\u0644\u062a \u062a\u0647\u0648\u0639",
              icon: "\ud83e\udd2e"
            }
          ]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "buttonWithNote[].arraylist",
        type: "private",
        variableType: "array"
      },
      {
        path: "list",
        type: "writable",
        variableType: "array",

        valueProp: "list",
        onChangeProp: "onListChange"
      },
      {
        path: "select",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonWithNote[].select",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "selectOne",
        type: "writable",
        variableType: "boolean",

        valueProp: "selectOne",
        onChangeProp: "onSelectOneChange"
      },
      {
        path: "circl",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.circl
      },
      {
        path: "buttonWithNote[].text",
        type: "private",
        variableType: "text"
      },
      {
        path: "rectangle",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.rectangle
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"choices"}
      data-plasmic-override={overrides.choices}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.choices,
        {
          [sty.choicescircl]: hasVariant($state, "circl", "circl"),
          [sty.choicesrectangle]: hasVariant($state, "rectangle", "rectangle"),
          [sty.choicesrectangle_circl]:
            hasVariant($state, "rectangle", "rectangle") &&
            hasVariant($state, "circl", "circl")
        }
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $props.beforList;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            className={classNames(projectcss.all, sty.freeBox__mBxAb, {
              [sty.freeBoxcircl__mBxAbjkoGr]: hasVariant(
                $state,
                "circl",
                "circl"
              ),
              [sty.freeBoxrectangle__mBxAb5DUuO]: hasVariant(
                $state,
                "rectangle",
                "rectangle"
              )
            })}
            key={currentIndex}
          >
            {(() => {
              const child$Props = {
                arraylist: generateStateValueProp($state, [
                  "buttonWithNote",
                  __plasmic_idx_0,
                  "arraylist"
                ]),
                className: classNames("__wab_instance", sty.buttonWithNote, {
                  [sty.buttonWithNotecircl]: hasVariant(
                    $state,
                    "circl",
                    "circl"
                  ),
                  [sty.buttonWithNoterectangle]: hasVariant(
                    $state,
                    "rectangle",
                    "rectangle"
                  )
                }),
                html: (() => {
                  try {
                    return currentItem.icon;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                name: (() => {
                  try {
                    return currentItem.value;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                onArraylistChange: async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "buttonWithNote",
                    __plasmic_idx_0,
                    "arraylist"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                },
                onClick: async event => {
                  const $steps = {};

                  $steps["runCode"] =
                    $state.selectOne == false
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                if (
                                  $state.list.filter(
                                    item => item == currentItem.value
                                  ).length == 0
                                )
                                  return $state.list.push(currentItem.value);
                                else {
                                  return ($state.list = $state.list.filter(
                                    item => item !== currentItem.value
                                  ));
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["runCode2"] = $state.selectOne
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return ($state.list = [currentItem.value]);
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode2"] != null &&
                    typeof $steps["runCode2"] === "object" &&
                    typeof $steps["runCode2"].then === "function"
                  ) {
                    $steps["runCode2"] = await $steps["runCode2"];
                  }
                },
                onSelectChange: async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "buttonWithNote",
                    __plasmic_idx_0,
                    "select"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                },
                onTextChange: async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "buttonWithNote",
                    __plasmic_idx_0,
                    "text"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                },
                select: generateStateValueProp($state, [
                  "buttonWithNote",
                  __plasmic_idx_0,
                  "select"
                ]),
                shaoe: (() => {
                  try {
                    return $props.shape;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })(),
                slot: (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ndUob, {
                      [sty.freeBoxcircl__ndUoBjkoGr]: hasVariant(
                        $state,
                        "circl",
                        "circl"
                      )
                    })}
                  >
                    {(() => {
                      try {
                        return $props.shape != "rectangle";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Embed
                        data-plasmic-name={"embedHtml"}
                        data-plasmic-override={overrides.embedHtml}
                        className={classNames("__wab_instance", sty.embedHtml, {
                          [sty.embedHtmlcircl]: hasVariant(
                            $state,
                            "circl",
                            "circl"
                          )
                        })}
                        code={(() => {
                          try {
                            return currentItem.icon;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "<div>Paste your embed code via the right sidebar</div>";
                            }
                            throw e;
                          }
                        })()}
                      />
                    ) : null}
                  </div>
                ),
                text: generateStateValueProp($state, [
                  "buttonWithNote",
                  __plasmic_idx_0,
                  "text"
                ])
              };

              initializePlasmicStates(
                $state,
                [
                  {
                    name: "buttonWithNote[].arraylist",
                    initFunc: ({ $props, $state, $queries }) => []
                  },
                  {
                    name: "buttonWithNote[].select",
                    initFunc: ({ $props, $state, $queries }) =>
                      (() => {
                        try {
                          return (
                            $state.list.filter(
                              item => item == currentItem.value
                            ).length == 1
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                  },
                  {
                    name: "buttonWithNote[].text",
                    initFunc: ({ $props, $state, $queries }) =>
                      (() => {
                        try {
                          return currentItem.meaning;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                  }
                ],
                [__plasmic_idx_0]
              );
              return (
                <ButtonWithNote
                  data-plasmic-name={"buttonWithNote"}
                  data-plasmic-override={overrides.buttonWithNote}
                  {...child$Props}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gEQo3)}
                  >
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text,
                        {
                          [sty.textcircl]: hasVariant($state, "circl", "circl")
                        }
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.meaning;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </ButtonWithNote>
              );
            })()}
          </div>
        );
      })}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  choices: ["choices", "buttonWithNote", "embedHtml", "text"],
  buttonWithNote: ["buttonWithNote", "embedHtml", "text"],
  embedHtml: ["embedHtml"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  choices: "div";
  buttonWithNote: typeof ButtonWithNote;
  embedHtml: typeof Embed;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChoices__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChoices__VariantsArgs;
    args?: PlasmicChoices__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChoices__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicChoices__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChoices__ArgProps,
          internalVariantPropNames: PlasmicChoices__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChoices__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "choices") {
    func.displayName = "PlasmicChoices";
  } else {
    func.displayName = `PlasmicChoices.${nodeName}`;
  }
  return func;
}

export const PlasmicChoices = Object.assign(
  // Top-level PlasmicChoices renders the root element
  makeNodeComponent("choices"),
  {
    // Helper components rendering sub-elements
    buttonWithNote: makeNodeComponent("buttonWithNote"),
    embedHtml: makeNodeComponent("embedHtml"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicChoices
    internalVariantProps: PlasmicChoices__VariantProps,
    internalArgProps: PlasmicChoices__ArgProps
  }
);

export default PlasmicChoices;
/* prettier-ignore-end */
