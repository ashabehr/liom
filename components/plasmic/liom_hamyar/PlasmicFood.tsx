// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: utcZajxc4g3k

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { Input } from "@/fragment/components/input"; // plasmic-import: zZH7vV9pXyf8/codeComponent
import Tick from "../../Tick"; // plasmic-import: 9Gr6sjq9gB59/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicFood.module.css"; // plasmic-import: utcZajxc4g3k/css

import Icon52Icon from "./icons/PlasmicIcon__Icon52"; // plasmic-import: PoQFgDwPJYC-/icon
import Icon51Icon from "./icons/PlasmicIcon__Icon51"; // plasmic-import: povCrdwb744L/icon
import Icon44Icon from "./icons/PlasmicIcon__Icon44"; // plasmic-import: 6VtI9bWSM_Li/icon
import Icon48Icon from "./icons/PlasmicIcon__Icon48"; // plasmic-import: gDaB_rFhdqND/icon
import Icon47Icon from "./icons/PlasmicIcon__Icon47"; // plasmic-import: 4mROOlMjOzhC/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon50Icon from "./icons/PlasmicIcon__Icon50"; // plasmic-import: OWul-aq2fF6T/icon

createPlasmicElementProxy;

export type PlasmicFood__VariantMembers = {};
export type PlasmicFood__VariantsArgs = {};
type VariantPropType = keyof PlasmicFood__VariantsArgs;
export const PlasmicFood__VariantProps = new Array<VariantPropType>();

export type PlasmicFood__ArgsType = {};
type ArgPropType = keyof PlasmicFood__ArgsType;
export const PlasmicFood__ArgProps = new Array<ArgPropType>();

export type PlasmicFood__OverridesType = {
  root?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  input?: Flex__<typeof Input>;
  tick?: Flex__<typeof Tick>;
  button2?: Flex__<typeof Button>;
};

export interface DefaultFoodProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFood__RenderFunc(props: {
  variants: PlasmicFood__VariantsArgs;
  args: PlasmicFood__ArgsType;
  overrides: PlasmicFood__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "tick.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fs7Iu)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__vuErL)}>
              <div className={classNames(projectcss.all, sty.freeBox___60Gba)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nmThf)}
                >
                  <Icon52Icon
                    className={classNames(projectcss.all, sty.svg__m38Yr)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d86Cv
                    )}
                  >
                    {"\u0627\u0645\u062a\u06cc\u0627\u0632"}
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fyuNt
                  )}
                >
                  {"200"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__k2IDx)}>
                <Icon51Icon
                  className={classNames(projectcss.all, sty.svg__nu4J)}
                  role={"img"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__qIkHa)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__oejfd)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3QnIo
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "\u0627\u0645\u062a\u06cc\u0627\u0632 \u0647\u0641\u062a\u0647 \u0642\u0628\u0644"
                      : "\u0627\u0645\u062a\u06cc\u0627\u0632"}
                  </div>
                  <Icon52Icon
                    className={classNames(projectcss.all, sty.svg__xt4NX)}
                    role={"img"}
                  />
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9Bomd
                  )}
                >
                  {"200"}
                </div>
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ml43R
              )}
            >
              {
                "\u0627\u06cc\u0646 \u0647\u0641\u062a\u0647 \u0639\u0627\u0644\u06cc \u0628\u0648\u062f\u06cc"
              }
            </div>
            <AntdModal
              data-plasmic-name={"modal"}
              data-plasmic-override={overrides.modal}
              className={classNames("__wab_instance", sty.modal)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              maskClosable={false}
              modalContentClassName={classNames({
                [sty["pcls_k3w1JVzrApEC"]]: true
              })}
              modalScopeClassName={sty["modal__modal"]}
              onOpenChange={generateStateOnChangeProp($state, [
                "modal",
                "open"
              ])}
              open={generateStateValueProp($state, ["modal", "open"])}
              title={null}
              trigger={null}
              width={"100vw"}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__r8Aa9)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lWtp7
                  )}
                >
                  {
                    "\u062f\u0633\u062a\u0647 \u0628\u0646\u062f\u06cc \u0647\u0627"
                  }
                </div>
                <Input
                  data-plasmic-name={"input"}
                  data-plasmic-override={overrides.input}
                  className={classNames("__wab_instance", sty.input)}
                  onChange={generateStateOnChangeProp($state, [
                    "input",
                    "value"
                  ])}
                  placeholder={"\u062c\u0633\u062a\u062c\u0648"}
                  type={"text"}
                  value={generateStateValueProp($state, ["input", "value"])}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___6D7Rw)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6Cza9)}
                  >
                    <Icon44Icon
                      className={classNames(projectcss.all, sty.svg__yIEn)}
                      role={"img"}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__kuNex)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__glAi3
                        )}
                      >
                        {"\u0641\u0633\u062a \u0641\u0648\u062f"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__t1Yjs
                        )}
                      >
                        {
                          "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0648\u0632\u0646 + \u0627\u0641\u0632\u0627\u06cc\u0634 \u0686\u0631\u0628\u06cc \u062e\u0648\u0646"
                        }
                      </div>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5Rc1A
                      )}
                    >
                      <Tick
                        data-plasmic-name={"tick"}
                        data-plasmic-override={overrides.tick}
                        className={classNames("__wab_instance", sty.tick)}
                        click={generateStateValueProp($state, [
                          "tick",
                          "click"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateTickClick"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["tick", "click"]
                                  },
                                  operation: 4,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTickClick"] != null &&
                            typeof $steps["updateTickClick"] === "object" &&
                            typeof $steps["updateTickClick"].then === "function"
                          ) {
                            $steps["updateTickClick"] = await $steps[
                              "updateTickClick"
                            ];
                          }
                        }}
                        onClickChange={generateStateOnChangeProp($state, [
                          "tick",
                          "click"
                        ])}
                      />
                    </Stack__>
                  </div>
                </Stack__>
              </Stack__>
            </AntdModal>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qTzrp)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__usOcU)}>
              <Icon44Icon
                className={classNames(projectcss.all, sty.svg__ydD5E)}
                role={"img"}
              />

              <div className={classNames(projectcss.all, sty.freeBox__adUVp)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d422Z
                  )}
                >
                  {"\u0641\u0633\u062a \u0641\u0648\u062f"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tk2Co
                  )}
                >
                  {
                    "\u0647\u0641\u062a\u0647 \u067e\u06cc\u0634 3 \u062e\u0648\u0631\u062f\u06cc"
                  }
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__r8If3)}
              >
                <Icon48Icon
                  className={classNames(projectcss.all, sty.svg__x7JKl)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rt7BT
                  )}
                >
                  {"2"}
                </div>
                <Icon47Icon
                  className={classNames(projectcss.all, sty.svg___855L)}
                  role={"img"}
                />
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zzT3S)}>
              <Icon44Icon
                className={classNames(projectcss.all, sty.svg___44Zw1)}
                role={"img"}
              />

              <div className={classNames(projectcss.all, sty.freeBox__eo4P2)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yllgP
                  )}
                >
                  {"\u0641\u0633\u062a \u0641\u0648\u062f"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sJzSp
                  )}
                >
                  {
                    "\u0647\u0641\u062a\u0647 \u067e\u06cc\u0634 3 \u062e\u0648\u0631\u062f\u06cc"
                  }
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iv7Jz)}
              >
                <Icon48Icon
                  className={classNames(projectcss.all, sty.svg__qGHpK)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gtvk4
                  )}
                >
                  {"2"}
                </div>
                <Icon47Icon
                  className={classNames(projectcss.all, sty.svg__rWyLt)}
                  role={"img"}
                />
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__oaMby)}>
              <Icon44Icon
                className={classNames(projectcss.all, sty.svg__cohEh)}
                role={"img"}
              />

              <div className={classNames(projectcss.all, sty.freeBox__euqVx)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__utlsh
                  )}
                >
                  {"\u0641\u0633\u062a \u0641\u0648\u062f"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z7JlE
                  )}
                >
                  {
                    "\u0647\u0641\u062a\u0647 \u067e\u06cc\u0634 3 \u062e\u0648\u0631\u062f\u06cc"
                  }
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lqEhT)}
              >
                <Icon48Icon
                  className={classNames(projectcss.all, sty.svg___1Yn2Y)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wHeHo
                  )}
                >
                  {"2"}
                </div>
                <Icon47Icon
                  className={classNames(projectcss.all, sty.svg__k9O3X)}
                  role={"img"}
                />
              </Stack__>
            </div>
            <Button
              data-plasmic-name={"button2"}
              data-plasmic-override={overrides.button2}
              className={classNames("__wab_instance", sty.button2)}
              color={generateStateValueProp($state, ["button2", "color"])}
              endIcon={
                <Icon50Icon
                  className={classNames(projectcss.all, sty.svg__cCbA0)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};

                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }
              }}
              onColorChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["button2", "color"])(
                  eventArgs[0]
                );
              }}
              shape={"rounded"}
              showEndIcon={true}
              size={"compact"}
            >
              {
                "\u0627\u0641\u0632\u0648\u062f \u062f\u0633\u062a\u0647 \u0628\u0646\u062f\u06cc \u062c\u062f\u06cc\u062f"
              }
            </Button>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "modal", "input", "tick", "button2"],
  modal: ["modal", "input", "tick"],
  input: ["input"],
  tick: ["tick"],
  button2: ["button2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof AntdModal;
  input: typeof Input;
  tick: typeof Tick;
  button2: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFood__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFood__VariantsArgs;
    args?: PlasmicFood__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFood__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFood__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFood__ArgProps,
          internalVariantPropNames: PlasmicFood__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFood__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFood";
  } else {
    func.displayName = `PlasmicFood.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicFood = Object.assign(
  // Top-level PlasmicFood renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    input: makeNodeComponent("input"),
    tick: makeNodeComponent("tick"),
    button2: makeNodeComponent("button2"),

    // Metadata about props expected for PlasmicFood
    internalVariantProps: PlasmicFood__VariantProps,
    internalArgProps: PlasmicFood__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFood;
/* prettier-ignore-end */
