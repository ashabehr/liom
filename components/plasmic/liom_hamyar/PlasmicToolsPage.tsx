/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 7fkym_8d4GAx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import TabWidget from "../../TabWidget"; // plasmic-import: 5oNm4PTVAr6q/component
import ToolsComponent from "../../ToolsComponent"; // plasmic-import: TGSOhksfnMdG/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicToolsPage.module.css"; // plasmic-import: 7fkym_8d4GAx/css

createPlasmicElementProxy;

export type PlasmicToolsPage__VariantMembers = {};
export type PlasmicToolsPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicToolsPage__VariantsArgs;
export const PlasmicToolsPage__VariantProps = new Array<VariantPropType>();

export type PlasmicToolsPage__ArgsType = {};
type ArgPropType = keyof PlasmicToolsPage__ArgsType;
export const PlasmicToolsPage__ArgProps = new Array<ArgPropType>();

export type PlasmicToolsPage__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  getUserInfo?: Flex__<typeof ApiRequest>;
  tabWidget?: Flex__<typeof TabWidget>;
  img?: Flex__<typeof PlasmicImg__>;
  toolsComponent?: Flex__<typeof ToolsComponent>;
};

export interface DefaultToolsPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicToolsPage__RenderFunc(props: {
  variants: PlasmicToolsPage__VariantsArgs;
  args: PlasmicToolsPage__ArgsType;
  overrides: PlasmicToolsPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "index",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "sub2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                subscription_features: {
                  services: [
                    {
                      category: "مادر",
                      items: [
                        {
                          // "title": "ابزارهای بارداری",
                          title: "",
                          items: [
                            {
                              text: "یادآوری غربالگری و آزمایش های مهم",
                              action: "#selfSms",
                              shopType: "pregnancy_sub_self_sms",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/selfSmsOutlined.png"
                            },
                            {
                              text: "معرفی مکمل‌ها و ویتامین‌ها",
                              action: "",
                              shopType: "danger",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/vitaminOutlined.png"
                            },
                            {
                              text: "ویدیو آموزشی",
                              description:
                                "مجموعه ویدیوهای آموزشی مرتبط با بارداری و مراقبت‌ها.",
                              action: "#video",
                              shopType: "",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/videoOutlined.png"
                            },
                            {
                              text: "کنترل وزن",
                              description:
                                "برنامه کنترل وزن مادر و نوزاد در دوران بارداری.",
                              action: "#weight",
                              shopType: "",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/bmiOutlined.png"
                              // }
                              //   ]
                            },

                            // {
                            //   "title": "خود درمانی",
                            //   "items": [
                            //     {
                            //       "text": "روتین مو",
                            //       "description": "برنامه مراقبت و نگهداری از موها در دوران بارداری.",
                            //       "action": "#hair_care",
                            //       "shopType" : "hair_car" ,
                            //       "icon": "https://liom.storage.c2.liara.space/config/self_care/hairCareOutlined.png"
                            //     },
                            //     {
                            //       "text": "روتین پوست",
                            //       "description": "راهنمای مراقبت از پوست در دوران بارداری برای حفظ زیبایی و سلامت.",
                            //       "action": "#skinCare",
                            //       "shopType" : "skinCare" ,
                            //       "icon": "https://liom.storage.c2.liara.space/config/self_care/skinCareOutlined.png"
                            //     },
                            //     {
                            //       "text": "پیشگیری از ترک پوستی",
                            //       "description": "روش‌های جلوگیری از ایجاد ترک‌های پوستی در بارداری.",
                            //       "action": "#stretch_marks",
                            //       "shopType" : "stretch_marks_sub" ,
                            //       "icon": "https://liom.storage.c2.liara.space/config/self_care/stretchMarkOutlined.png"
                            //     },
                            //     {
                            //       "text": "درمان  ADHD ",
                            //       "action": "#adhd_treatment_sub",
                            //       "shopType" : "adhd_treatment_sub" ,
                            //       "icon": "https://liom.storage.c2.liara.space/config/self_care/adhdOutlined.png"
                            //     }
                            //   ]
                            // },
                            // {
                            //   "title": "خود آزمایی",
                            //   "items": [
                            //     {
                            //       "text": "تست نیاز به تراپی دارم",
                            //       "description": "ارزیابی نیاز به خدمات تراپی روانشناسی و درمانی.",
                            //       "action": "#need_therapy",
                            //       "shopType" : "need_therapy_sub" ,
                            //       "icon": "https://liom.storage.c2.liara.space/config/self_care/therapyOutlined.png"
                            //     },
                            //     {
                            //       "text": "تست افسردگی",
                            //       "description": "ارزیابی سلامت روان و تشخیص علائم افسردگی.",
                            //       "action": "#depression",
                            //       "shopType" : "" ,
                            //       "icon": "https://liom.storage.c2.liara.space/config/self_care/depressionNew.png"
                            //     },
                            //     {
                            //       "text": "تست ADHD",
                            //       "description": "آزمون و ارزیابی اختلال نقص توجه و بیش‌فعالی.",
                            //       "action": "#adhd",
                            //       "shopType" : "adhd_sub" ,
                            //       "icon": "https://liom.storage.c2.liara.space/config/self_care/adhdOutlined.png"
                            //     },
                            //     {
                            //       "text": "تست دیابت بارداری (GD)",
                            //       "action": "#pregnancyDiabetes",
                            //       "shopType" : "pregnancy_diabetes" ,
                            //       "icon": "https://liom.storage.c2.liara.space/config/self_care/diabetOutlined.png"
                            //     },
                            //     {
                            //       "text": "تست مسمومیت بارداری",
                            //       "action": "#preeclampsia",
                            //       "shopType" : "preeclampsia" ,
                            //       "icon": "https://liom.storage.c2.liara.space/config/self_care/preeclampsiaOutlined.png"
                            //     },
                            //     {
                            //       "text": "تست اختلال تیروئید",
                            //       "action": "#thyroid",
                            //       "shopType" : "thyroid" ,
                            //       "icon": "https://liom.storage.c2.liara.space/config/self_care/therapyOutlined.png"
                            //     }
                            //   ]
                            // },
                            //  {
                            //     "title": "دیگر ابزارها",
                            //     "items": [
                            // {
                            //   "text": "یادآوری خودآزمایی سرطان سینه",
                            //   "action": "#breastCancer",
                            //   "shopType" : "" ,
                            //   "icon": "https://liom.storage.c2.liara.space/config/self_care/breastCancerOutlined.png"
                            // },
                            {
                              text: "همیار بارداری",
                              shopType: "",
                              action: "#hamyarInfo",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/hamyarOutlined.png"
                            },
                            {
                              text: "کلینیک",
                              action: "#clinic",
                              shopType: "",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/clinicOutlined.png"
                            },
                            {
                              text: "بیوریتم",
                              description:
                                "برنامه بیوریتم و چرخه‌های طبیعی بدن در دوران بارداری.",
                              action: "#biorhythm",
                              shopType: "",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/biorhythmOutlined.png"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      category: "فرزند",
                      items: [
                        {
                          title: "",
                          items: [
                            {
                              text: "سیسمونی",
                              shopType: "",
                              description:
                                "راهنمای انتخاب و تهیه سیسمونی مناسب برای نوزاد.",
                              action: "#sismony",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/sismoonyOutlined.png"
                            },
                            {
                              text: "کیف بیمارستان",
                              shopType: "",
                              description:
                                "لیست کامل وسایل ضروری برای بیمارستان هنگام زایمان.",
                              action: "#hospitalBag",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/haspitalBagOutlined.png"
                            },
                            {
                              text: "تست پیش‌بینی جنسیت",
                              shopType: "",
                              description:
                                "آزمون و بررسی احتمالات جنسیت نوزاد.",
                              action: "#genderDetection",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/genderTestOutlined.png"
                            },
                            {
                              text: "چک‌لیست ایمنی و علائم هشدار",
                              action: "#danger",
                              shopType: "",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/dangerOutlined.png"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "getUserInfo.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getUserInfo.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getUserInfo.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["getParams"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          return urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getParams"] != null &&
                typeof $steps["getParams"] === "object" &&
                typeof $steps["getParams"].then === "function"
              ) {
                $steps["getParams"] = await $steps["getParams"];
              }

              $steps["clearParams"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const searchParams = new URLSearchParams(
                            window.location.search
                          );
                          searchParams.delete("token");
                          searchParams.delete("userId");
                          searchParams.delete("user_id");
                          const newUrl = `${
                            window.location.pathname
                          }?${searchParams.toString()}`;
                          return window.history.replaceState(null, "", newUrl);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["clearParams"] != null &&
                typeof $steps["clearParams"] === "object" &&
                typeof $steps["clearParams"].then === "function"
              ) {
                $steps["clearParams"] = await $steps["clearParams"];
              }

              $steps["getToken"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (
                            $state.paramsObject.token !== undefined &&
                            $state.paramsObject.token.trim() !== ""
                          ) {
                            if (!$state.paramsObject.token.startsWith("ey"))
                              $state.paramsObject.token =
                                $state.paramsObject.token.slice(6, -3);
                            var setCookie = (name, value, days) => {
                              const expires = new Date(
                                Date.now() + days * 86400000
                              ).toUTCString();
                              document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                            };
                            return setCookie(
                              "token",
                              JSON.stringify([$state.paramsObject.token]),
                              100
                            );
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getToken"] != null &&
                typeof $steps["getToken"] === "object" &&
                typeof $steps["getToken"].then === "function"
              ) {
                $steps["getToken"] = await $steps["getToken"];
              }

              $steps["getTokenFromCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var getCookie = name => {
                            const cookies = document.cookie.split("; ");
                            for (let cookie of cookies) {
                              const [key, value] = cookie.split("=");
                              if (key === name) return JSON.parse(value)[0];
                            }
                            return "";
                          };
                          return ($state.token = getCookie("token"));
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getTokenFromCookie"] != null &&
                typeof $steps["getTokenFromCookie"] === "object" &&
                typeof $steps["getTokenFromCookie"].then === "function"
              ) {
                $steps["getTokenFromCookie"] = await $steps[
                  "getTokenFromCookie"
                ];
              }
            }}
          />

          <ApiRequest
            data-plasmic-name={"getUserInfo"}
            data-plasmic-override={overrides.getUserInfo}
            className={classNames("__wab_instance", sty.getUserInfo)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oaPTc
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div className={classNames(projectcss.all, sty.freeBox__xvl4)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___278K2)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pgG7I)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__eXvC,
                        "shimmer"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4G3Uy,
                        "shimmer"
                      )}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__firv3)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [1, 2, 3, 4, 5];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1OJv
                          )}
                          key={currentIndex}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zUAoT,
                              "shimmer"
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__usCv9
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return [1, 2, 3, 4, 5, 6];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__l8Ctr
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___2C1XV,
                                      "shimmer"
                                    )}
                                  />
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getUserInfo", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "getUserInfo",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getUserInfo", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={(() => {
              try {
                return {
                  token: $state.token
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            shouldFetch={true}
            url={"https://n8n.staas.ir/webhook/userInfo_v2"}
          >
            <div className={classNames(projectcss.all, sty.freeBox___9Tbb)}>
              <div className={classNames(projectcss.all, sty.freeBox__tqSx)}>
                <div className={classNames(projectcss.all, sty.freeBox__zyKgI)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.sub2.subscription_features.services
                          .length > 0
                          ? $state.sub2.subscription_features.services
                          : [];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <TabWidget
                        data-plasmic-name={"tabWidget"}
                        data-plasmic-override={overrides.tabWidget}
                        className={classNames("__wab_instance", sty.tabWidget)}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateIndex"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["index"]
                                  },
                                  operation: 0,
                                  value: currentIndex
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateIndex"] != null &&
                            typeof $steps["updateIndex"] === "object" &&
                            typeof $steps["updateIndex"].then === "function"
                          ) {
                            $steps["updateIndex"] = await $steps["updateIndex"];
                          }
                        }}
                        selected={(() => {
                          try {
                            return $state.index == currentIndex;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        title={(() => {
                          try {
                            return currentItem.category;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__mc3U5)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.sub2.subscription_features.services[
                          $state.index
                        ].items.length > 0
                          ? $state.sub2.subscription_features.services[
                              $state.index
                            ].items
                          : [];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fRaT
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jDvq7
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__txWpb
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return currentItem.items.length > 0
                                  ? currentItem.items
                                  : [];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_1, __plasmic_idx_1) => {
                            const currentItem = __plasmic_item_1;
                            const currentIndex = __plasmic_idx_1;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__xWbfQ
                                )}
                                key={currentIndex}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["invokeGlobalAction"] = (() => {
                                    const allowance =
                                      $state?.getUserInfo?.data?.[0]?.result
                                        ?.allowance || [];
                                    const filteredItem = allowance.find(item =>
                                      item.type.includes(currentItem.shopType)
                                    );
                                    const active = filteredItem
                                      ? filteredItem.active
                                      : false;
                                    return active || currentItem.shopType == "";
                                  })()
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            (() => {
                                              try {
                                                return currentItem.action;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return $state.token;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return $state.paramsObject
                                                  .userId;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return $ctx.query.inApp;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return $ctx.query.theme;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            undefined,
                                            (() => {
                                              try {
                                                return (() => {
                                                  if (
                                                    currentItem.action ==
                                                    "#selfSms"
                                                  ) {
                                                    return {
                                                      status: "pregnancy"
                                                    };
                                                  } else {
                                                    return {
                                                      origin: "liomSelfCare"
                                                    };
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.deepLink"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["invokeGlobalAction"] != null &&
                                    typeof $steps["invokeGlobalAction"] ===
                                      "object" &&
                                    typeof $steps["invokeGlobalAction"].then ===
                                      "function"
                                  ) {
                                    $steps["invokeGlobalAction"] = await $steps[
                                      "invokeGlobalAction"
                                    ];
                                  }

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              const allowance =
                                                $state?.getUserInfo?.data?.[0]
                                                  ?.result?.allowance || [];
                                              const filteredItem =
                                                allowance.find(item =>
                                                  item.type.includes(
                                                    currentItem.shopType
                                                  )
                                                );
                                              const active = filteredItem
                                                ? filteredItem.active
                                                : false;
                                              if (
                                                !active &&
                                                currentItem.shopType != ""
                                              ) {
                                                if (
                                                  $ctx.query.inApp != "true"
                                                ) {
                                                  $state.typeBuy =
                                                    "pregnancySub";
                                                  return ($state.directDialog2.open =
                                                    true);
                                                } else {
                                                  return window.FlutterChannel.postMessage(
                                                    "#healthSubscription"
                                                  );
                                                }
                                              }
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }
                                }}
                                style={(() => {
                                  try {
                                    return {
                                      "background-color": "#ffffff" //currentItem.color
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <PlasmicImg__
                                  data-plasmic-name={"img"}
                                  data-plasmic-override={overrides.img}
                                  alt={""}
                                  className={classNames(sty.img)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={currentItem.icon}
                                  width={"30"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___2OeZq
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          </ApiRequest>
          <ToolsComponent
            data-plasmic-name={"toolsComponent"}
            data-plasmic-override={overrides.toolsComponent}
            className={classNames("__wab_instance", sty.toolsComponent)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "getUserInfo",
    "tabWidget",
    "img",
    "toolsComponent"
  ],
  sideEffect: ["sideEffect"],
  getUserInfo: ["getUserInfo", "tabWidget", "img"],
  tabWidget: ["tabWidget"],
  img: ["img"],
  toolsComponent: ["toolsComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  getUserInfo: typeof ApiRequest;
  tabWidget: typeof TabWidget;
  img: typeof PlasmicImg__;
  toolsComponent: typeof ToolsComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicToolsPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicToolsPage__VariantsArgs;
    args?: PlasmicToolsPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicToolsPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicToolsPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicToolsPage__ArgProps,
          internalVariantPropNames: PlasmicToolsPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicToolsPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicToolsPage";
  } else {
    func.displayName = `PlasmicToolsPage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicToolsPage = Object.assign(
  // Top-level PlasmicToolsPage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    getUserInfo: makeNodeComponent("getUserInfo"),
    tabWidget: makeNodeComponent("tabWidget"),
    img: makeNodeComponent("img"),
    toolsComponent: makeNodeComponent("toolsComponent"),

    // Metadata about props expected for PlasmicToolsPage
    internalVariantProps: PlasmicToolsPage__VariantProps,
    internalArgProps: PlasmicToolsPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicToolsPage;
/* prettier-ignore-end */
