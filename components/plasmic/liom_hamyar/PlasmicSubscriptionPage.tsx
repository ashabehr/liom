/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: SFydXtruRu5z

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import Dialog3 from "../../Dialog3"; // plasmic-import: j5op3vcM_4hJ/component
import Subscription3 from "../../Subscription3"; // plasmic-import: vcwQDI5OpjvX/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSubscriptionPage.module.css"; // plasmic-import: SFydXtruRu5z/css

import Icon231Icon from "./icons/PlasmicIcon__Icon231"; // plasmic-import: hKdHVi-I7onj/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: H9d2pdUvXD_1/icon

createPlasmicElementProxy;

export type PlasmicSubscriptionPage__VariantMembers = {};
export type PlasmicSubscriptionPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicSubscriptionPage__VariantsArgs;
export const PlasmicSubscriptionPage__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSubscriptionPage__ArgsType = {};
type ArgPropType = keyof PlasmicSubscriptionPage__ArgsType;
export const PlasmicSubscriptionPage__ArgProps = new Array<ArgPropType>();

export type PlasmicSubscriptionPage__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  ul?: Flex__<"ul">;
  collapse?: Flex__<typeof AntdSingleCollapse>;
  section?: Flex__<"section">;
  input4?: Flex__<typeof AntdInput>;
  button12?: Flex__<typeof Button>;
  button8?: Flex__<typeof Button>;
  button11?: Flex__<typeof Button>;
  p?: Flex__<"p">;
  dialog2?: Flex__<typeof Dialog3>;
  subscription3?: Flex__<typeof Subscription3>;
  button14?: Flex__<typeof Button>;
  button10?: Flex__<typeof Button>;
  input5?: Flex__<typeof AntdInput>;
  button13?: Flex__<typeof Button>;
};

export interface DefaultSubscriptionPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSubscriptionPage__RenderFunc(props: {
  variants: PlasmicSubscriptionPage__VariantsArgs;
  args: PlasmicSubscriptionPage__ArgsType;
  overrides: PlasmicSubscriptionPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "subList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  text: "تست‌های سلامتی",
                  description:
                    "این بخش شامل تست‌های مهم دوران بارداری مانند تست دیابت بارداری، تست مسمومیت بارداری و ارزیابی‌های اولیه سلامت مادر و جنین است."
                },
                {
                  text: "مراقبت‌های پوستی و مو",
                  description:
                    "راهنمای روتین مراقبت از مو و پوست، روش‌های پیشگیری از ترک‌های پوستی و حفظ سلامت پوست در دوران بارداری."
                },
                {
                  text: "ارزیابی و پشتیبانی روانی",
                  description:
                    "شامل تست نیاز به تراپی، تست افسردگی، تست اختلال نقص توجه و بیش‌فعالی (ADHD) و روش‌های درمان آن."
                },
                {
                  text: "پیامک‌های حمایتی برای مادر و پدر",
                  description:
                    "ارسال پیامک‌هایی درباره نیازهای مادر، رشد جنین، راهنمایی برای پدر و ابزار ارتباطی همیار برای هماهنگی بهتر بین مادر و پدر."
                },
                {
                  text: "تست پیش‌بینی جنسیت",
                  description:
                    "روش‌های سرگرم‌کننده و تست‌هایی برای حدس جنسیت جنین."
                },
                {
                  text: "خودآزمایی سرطان سینه",
                  description:
                    "یادآوری ماهانه برای انجام معاینات خودآزمایی سرطان سینه جهت پیشگیری و تشخیص زودهنگام."
                },
                {
                  text: "مراقبت‌های هفتگی",
                  description:
                    "پیگیری وزن مادر، یادآوری آزمایش‌ها و غربالگری‌های مهم و راهنمای استفاده از مکمل‌ها و ویتامین‌های ضروری برای حفظ سلامت مادر و رشد جنین، به همراه فهرستی از نکات ایمنی و علائم هشداردهنده بر اساس هفته بارداری."
                },
                {
                  text: "امکان مشاوره تخصصی (مامایی، روان‌شناسی، تغذیه)",
                  description:
                    "امکان انتخاب و دسترسی به مشاوره‌های تخصصی مامایی، روان‌شناسی و تغذیه در دوران بارداری."
                },
                {
                  text: "سیسمونی و کیف بیمارستان",
                  description:
                    "راهنمای کامل و کاربردی برای انتخاب و تهیه وسایل ضروری نوزاد و لیست جامع وسایل مورد نیاز هنگام رفتن به بیمارستان برای زایمان."
                },
                {
                  text: "بیوریتم",
                  description:
                    "پیگیری و تحلیل چرخه‌های طبیعی بدن و بیوریتم‌ها در دوران بارداری برای کمک به تنظیم برنامه روزانه و بهبود سلامت جسمی و روحی."
                },
                {
                  text: "ویدیو آموزشی",
                  description:
                    "مجموعه‌ای از ویدیوهای تخصصی و کاربردی درباره بارداری، تغذیه، ورزش و مراقبت‌های قبل و بعد از زایمان برای مادران."
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "sub",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                subscription_features: {
                  intro:
                    "با فعال‌سازی اشتراک ویژه، مجموعه‌ای از خدمات علمی، عاطفی و سلامتی را یک‌جا دریافت می‌کنی.",
                  benefits: [
                    {
                      title: "⏰ به‌موقع و بدون فراموشی",
                      description:
                        "یادآوری‌های هوشمند در دقیق‌ترین زمان‌های ممکن (مثلاً «تایم طلایی» خودآزمایی سرطان سینه).",
                      color: "#FDEDEC",
                      icon_svg:
                        "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10' stroke='#E74C3C' stroke-width='2'/><path d='M12 6V12L16 14' stroke='#E74C3C' stroke-width='2' stroke-linecap='round'/></svg>"
                    },
                    {
                      title: "💰 صرفه‌جویی واقعی",
                      description:
                        "بسته‌های چندماهه تا ۴۰٪ ارزان‌تر از خرید جداگانه هستند.",
                      color: "#FEF9E7",
                      icon_svg:
                        "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10' stroke='#F1C40F' stroke-width='2'/><path d='M8 12H16' stroke='#F1C40F' stroke-width='2' stroke-linecap='round'/><path d='M12 8V16' stroke='#F1C40F' stroke-width='2' stroke-linecap='round'/></svg>"
                    },
                    {
                      title: "🧑‍⚕️ پشتیبانی تخصصی",
                      description:
                        "از پیامک‌های طراحی‌شده توسط کارشناسان تا گفت‌وگوی محرمانه با روان‌شناس.",
                      color: "#E8F8F5",
                      icon_svg:
                        "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='8' r='4' stroke='#1ABC9C' stroke-width='2'/><path d='M6 20C6 16 18 16 18 20' stroke='#1ABC9C' stroke-width='2' stroke-linecap='round'/></svg>"
                    },
                    {
                      title: "👫 حمایت عاطفی دوطرفه",
                      description:
                        "پیامک‌هایی برای همسر که درک و همدلی او را نسبت به تو بیشتر می‌کند.",
                      color: "#FDEBD0",
                      icon_svg:
                        "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M12 21C12 21 5 14 5 9.5C5 7 7 5 9.5 5C11 5 12 6.5 12 6.5C12 6.5 13 5 14.5 5C17 5 19 7 19 9.5C19 14 12 21 12 21Z' stroke='#F39C12' stroke-width='2' stroke-linejoin='round'/></svg>"
                    },
                    {
                      title: "🔒 حریم خصوصی کامل",
                      description:
                        "پیامک‌ها بدون نام برنامه و داده‌ها رمزگذاری‌شده‌اند.",
                      color: "#EBF5FB",
                      icon_svg:
                        "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><rect x='6' y='11' width='12' height='9' stroke='#3498DB' stroke-width='2' rx='2'/><path d='M9 11V8C9 6 15 6 15 8V11' stroke='#3498DB' stroke-width='2'/></svg>"
                    }
                  ],

                  services: [
                    {
                      category: "سلامت و غربالگری",
                      items: [
                        {
                          text: "یادآوری خودآزمایی سرطان سینه",
                          color: "#FADBD8",
                          icon_svg:
                            "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10' stroke='#E74C3C' stroke-width='2'/><path d='M8 12L11 15L16 10' stroke='#E74C3C' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/></svg>"
                        },
                        {
                          text: "تست دیابت بارداری (GD)",
                          color: "#D6EAF8",
                          icon_svg:
                            "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><rect x='3' y='3' width='18' height='18' rx='3' stroke='#2980B9' stroke-width='2'/><circle cx='12' cy='12' r='5' stroke='#2980B9' stroke-width='2'/></svg>"
                        },
                        {
                          text: "تست مسمومیت بارداری",
                          color: "#D5F5E3",
                          icon_svg:
                            "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M12 2L2 22H22L12 2Z' stroke='#27AE60' stroke-width='2' stroke-linejoin='round'/><line x1='12' y1='8' x2='12' y2='14' stroke='#27AE60' stroke-width='2' stroke-linecap='round'/><circle cx='12' cy='17' r='1' fill='#27AE60'/></svg>"
                        },
                        {
                          text: "درمان  ADHD ",
                          color: "#F9E79F",
                          icon_svg:
                            "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10' stroke='#F1C40F' stroke-width='2'/><path d='M8 12L11 15L16 10' stroke='#F1C40F' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/></svg>"
                        }
                      ]
                    },
                    {
                      category: "مراقبت هفته‌به‌هفته بارداری",
                      items: [
                        {
                          text: "چک‌لیست ایمنی و علائم هشدار همان هفته",
                          color: "#E8DAEF",
                          icon_svg:
                            "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><rect x='5' y='4' width='14' height='16' rx='2' stroke='#8E44AD' stroke-width='2'/><path d='M8 10H16' stroke='#8E44AD' stroke-width='2' stroke-linecap='round'/><path d='M8 14H13' stroke='#8E44AD' stroke-width='2' stroke-linecap='round'/></svg>"
                        },
                        {
                          text: "به‌روزرسانی براساس سن بارداری",
                          color: "#FDEBD0",
                          icon_svg:
                            "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10' stroke='#F39C12' stroke-width='2'/><path d='M12 6V12L16 14' stroke='#F39C12' stroke-width='2' stroke-linecap='round'/></svg>"
                        },
                        {
                          text: "یادآوری غربالگری و آزمایش های مهم",
                          color: "#FDEBD0",
                          icon_svg:
                            "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10' stroke='#F39C12' stroke-width='2'/><path d='M12 6V12L16 14' stroke='#F39C12' stroke-width='2' stroke-linecap='round'/></svg>"
                        },
                        {
                          text: "معرفی مکمل‌ها و ویتامین‌ها",
                          color: "#FDEBD0",
                          icon_svg:
                            "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10' stroke='#F39C12' stroke-width='2'/><path d='M12 6V12L16 14' stroke='#F39C12' stroke-width='2' stroke-linecap='round'/></svg>"
                        }
                      ]
                    },
                    {
                      category: "همراهی همسر",
                      items: [
                        {
                          text: "پیامک درک نیازهای تو",
                          color: "#FADBD8",
                          icon_svg:
                            "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M4 4H20V20H4V4Z' stroke='#E74C3C' stroke-width='2' stroke-linejoin='round'/><path d='M4 10H20' stroke='#E74C3C' stroke-width='2'/><circle cx='8' cy='16' r='1.5' fill='#E74C3C'/></svg>"
                        },
                        {
                          text: "پیامک رشد جنین برای پدر",
                          color: "#D6EAF8",
                          icon_svg:
                            "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><rect x='3' y='3' width='18' height='18' rx='3' stroke='#2980B9' stroke-width='2'/><circle cx='12' cy='12' r='5' stroke='#2980B9' stroke-width='2'/></svg>"
                        },
                        {
                          text: "پیامک چطور پدر بهتری باشم",
                          color: "#D5F5E3",
                          icon_svg:
                            "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M12 2L2 22H22L12 2Z' stroke='#27AE60' stroke-width='2' stroke-linejoin='round'/><line x1='12' y1='8' x2='12' y2='14' stroke='#27AE60' stroke-width='2' stroke-linecap='round'/><circle cx='12' cy='17' r='1' fill='#27AE60'/></svg>"
                        }
                      ]
                    },
                    {
                      category: "گفت‌وگوی محرمانه با کارشناس لیوم",
                      items: [
                        {
                          text: "امکان انتخاب متخصص (مامایی، روان‌شناسی، تغذیه)",
                          color: "#F9E79F",
                          icon_svg:
                            "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10' stroke='#F1C40F' stroke-width='2'/><path d='M8 12L11 15L16 10' stroke='#F1C40F' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/></svg>"
                        },
                        {
                          text: "بدون افشای هویت و درون اپ",
                          color: "#EBF5FB",
                          icon_svg:
                            "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><rect x='6' y='11' width='12' height='9' stroke='#3498DB' stroke-width='2' rx='2'/><path d='M9 11V8C9 6 15 6 15 8V11' stroke='#3498DB' stroke-width='2'/></svg>"
                        }
                      ]
                    },
                    {
                      category: "مراقبت پوست و مو",
                      items: [
                        {
                          text: "روتین مو",
                          description:
                            "برنامه مراقبت و نگهداری از موها در دوران بارداری.",
                          color: "#FFD8A8", // پاستلی زرد کمرنگ
                          icon_svg:
                            "<svg width='24' height='24' fill='#FFD8A8' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10'/><path d='M7 12h10' stroke='#FFF' stroke-width='2'/></svg>"
                        },
                        {
                          text: "روتین پوست",
                          description:
                            "راهنمای مراقبت از پوست در دوران بارداری برای حفظ زیبایی و سلامت.",
                          color: "#FFB5A7", // پاستلی هلویی روشن
                          icon_svg:
                            "<svg width='24' height='24' fill='#FFB5A7' xmlns='http://www.w3.org/2000/svg'><rect x='4' y='4' width='16' height='16' rx='8'/></svg>"
                        },
                        {
                          text: "پیشگیری از ترک پوستی",
                          description:
                            "روش‌های جلوگیری از ایجاد ترک‌های پوستی در بارداری.",
                          color: "#FF9CEE", // پاستلی صورتی ملایم
                          icon_svg:
                            "<svg width='24' height='24' fill='#FF9CEE' xmlns='http://www.w3.org/2000/svg'><path d='M6 6l12 12M18 6L6 18' stroke='#FFF' stroke-width='2'/></svg>"
                        }
                      ]
                    },
                    {
                      category: "آزمون‌ها و تست‌ها",
                      items: [
                        {
                          text: "تست نیاز به تراپی دارم",
                          description:
                            "ارزیابی نیاز به خدمات تراپی روانشناسی و درمانی.",
                          color: "#B5A7FF", // پاستلی بنفش روشن
                          icon_svg:
                            "<svg width='24' height='24' fill='#B5A7FF' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10'/><path d='M12 7v5l4 2' stroke='#FFF' stroke-width='2'/></svg>"
                        },
                        {
                          text: "تست افسردگی",
                          description:
                            "ارزیابی سلامت روان و تشخیص علائم افسردگی.",
                          color: "#A7C7FF", // پاستلی آبی روشن
                          icon_svg:
                            "<svg width='24' height='24' fill='#A7C7FF' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10'/><path d='M8 16h8M8 12h8M8 8h8' stroke='#FFF' stroke-width='2'/></svg>"
                        },
                        {
                          text: "تست ADHD",
                          description:
                            "آزمون و ارزیابی اختلال نقص توجه و بیش‌فعالی.",
                          color: "#A7FFF1", // پاستلی فیروزه‌ای خیلی روشن
                          icon_svg:
                            "<svg width='24' height='24' fill='#A7FFF1' xmlns='http://www.w3.org/2000/svg'><rect x='4' y='4' width='16' height='16'/><circle cx='12' cy='12' r='5' fill='#FFF'/></svg>"
                        },
                        {
                          text: "تست پیش‌بینی جنسیت",
                          description: "آزمون و بررسی احتمالات جنسیت نوزاد.",
                          color: "#B5FFF1", // پاستلی آبی-سبز ملایم
                          icon_svg:
                            "<svg width='24' height='24' fill='#B5FFF1' xmlns='http://www.w3.org/2000/svg'><path d='M12 2l3 7h-6l3-7zM5 21h14v-2H5v2z'/></svg>"
                        }
                      ]
                    },
                    {
                      category: "آمادگی زایمان و نوزاد",
                      items: [
                        {
                          text: "سیسمونی",
                          description:
                            "راهنمای انتخاب و تهیه سیسمونی مناسب برای نوزاد.",
                          color: "#FFB3C6", // پاستلی صورتی خیلی روشن
                          icon_svg:
                            "<svg width='24' height='24' fill='#FFB3C6' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10'/><path d='M8 12h8M8 16h8' stroke='#FFF' stroke-width='2'/></svg>"
                        },
                        {
                          text: "کیف بیمارستان",
                          description:
                            "لیست کامل وسایل ضروری برای بیمارستان هنگام زایمان.",
                          color: "#C9B3FF", // پاستلی بنفش خیلی روشن
                          icon_svg:
                            "<svg width='24' height='24' fill='#C9B3FF' xmlns='http://www.w3.org/2000/svg'><rect x='6' y='8' width='12' height='10' rx='2'/><path d='M9 8v-2h6v2' stroke='#FFF' stroke-width='2'/></svg>"
                        }
                      ]
                    },
                    {
                      category: "سلامت و سبک زندگی",
                      items: [
                        {
                          text: "کنترل وزن",
                          description:
                            "برنامه کنترل وزن مادر و نوزاد در دوران بارداری.",
                          color: "#B3FFC9", // پاستلی سبز روشن
                          icon_svg:
                            "<svg width='24' height='24' fill='#B3FFC9' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10'/><path d='M8 12l4 4 4-8' stroke='#FFF' stroke-width='2'/></svg>"
                        },
                        {
                          text: "بیوریتم",
                          description:
                            "برنامه بیوریتم و چرخه‌های طبیعی بدن در دوران بارداری.",
                          color: "#DCC9B3", // پاستلی قهوه‌ای روشن
                          icon_svg:
                            "<svg width='24' height='24' fill='#DCC9B3' xmlns='http://www.w3.org/2000/svg'><path d='M12 2v20M2 12h20' stroke='#FFF' stroke-width='2'/></svg>"
                        }
                      ]
                    },
                    {
                      category: "آموزش و ویدیو",
                      items: [
                        {
                          text: "ویدیو آموزشی",
                          description:
                            "مجموعه ویدیوهای آموزشی مرتبط با بارداری و مراقبت‌ها.",
                          color: "#A7B3FF", // پاستلی آبی ملایم
                          icon_svg:
                            "<svg width='24' height='24' fill='#A7B3FF' xmlns='http://www.w3.org/2000/svg'><polygon points='8,5 19,12 8,19' fill='#FFF'/></svg>"
                        }
                      ]
                    }
                  ],

                  plans: [
                    {
                      title: "ماهیانه",
                      price_per_month: null,
                      description: "انعطاف بالا، بدون تعهد",
                      color: "#D6EAF8",
                      icon_svg:
                        "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10' stroke='#2980B9' stroke-width='2'/><path d='M12 6V12L16 14' stroke='#2980B9' stroke-width='2' stroke-linecap='round'/></svg>"
                    },
                    {
                      title: "۶ ماهه",
                      price_per_month: "۴۰٪ تخفیف",
                      description: "مناسب افرادی که برنامه بلندمدت می‌خوان",
                      color: "#FADBD8",
                      icon_svg:
                        "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10' stroke='#E74C3C' stroke-width='2'/><path d='M8 12L11 15L16 10' stroke='#E74C3C' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/></svg>"
                    },
                    {
                      title: "۱۲ ماهه",
                      price_per_month: "۴۰٪ تخفیف",
                      description: "پیشنهاد ویژه و به صرفه",
                      color: "#FEF9E7",
                      icon_svg:
                        "<svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><circle cx='12' cy='12' r='10' stroke='#F1C40F' stroke-width='2'/><path d='M12 8V16' stroke='#F1C40F' stroke-width='2' stroke-linecap='round'/></svg>"
                    }
                  ]
                }
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "values",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  icon: "🌱",
                  title: "امنیت در سلامت",
                  description:
                    "نگران فراموش کردن چکاپ‌ها و آزمایش‌ها نباش. ما در مهم‌ترین لحظه‌ها کنارت هستیم."
                },
                {
                  icon: "💊",
                  title: "یادآور مکمل‌های مهم",
                  description:
                    "نگران فراموش کردن مصرف مکمل‌ها نباش، لیوم هر هفته بهت یادآوری می‌کنه."
                },
                {
                  icon: "🕊",
                  title: "آرامش ذهن و دل",
                  description:
                    "هفته‌به‌هفته می‌دونی باید منتظر چه چیزهایی باشی، چی طبیعی‌ه و چی هشداردهنده."
                },
                {
                  icon: "💑",
                  title: "رابطه‌ای نزدیک‌تر با همسرت",
                  description:
                    "با پیامک‌هایی که برای شریک زندگیت طراحی شدن، کمکش می‌کنی تو رو بهتر درک کنه."
                },
                {
                  icon: "🧠",
                  title: "دسترسی به راهنمایی‌های تخصصی، بدون استرس",
                  description:
                    "از مشاوره‌های علمی و دقیق تا گفت‌وگو با روان‌شناس، بدون اینکه دنبال جواب بگردی، پاسخ‌هات رو همدلانه می‌گیری."
                },
                {
                  icon: "📈",
                  title: "پیگیری رشد نوزاد",
                  description: "اطلاعات هفتگی درباره رشد و تکامل کوچولوت."
                },
                {
                  icon: "🤰",
                  title: "حمایت از سلامت مادر",
                  description:
                    "نکات ساده و کاربردی برای حفظ سلامت تو در هر روز."
                },
                {
                  icon: "💬",
                  title: "ارتباط آسان با پزشک",
                  description:
                    "ثبت سوالات و دریافت پاسخ‌های سریع و قابل اعتماد."
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "collapse[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button8.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button11.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "subscription3[].clickitem",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "subscription3[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription3[].price",
        type: "private",
        variableType: "number"
      },
      {
        path: "subscription3[].discount",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription3[].fullprice",
        type: "private",
        variableType: "number"
      },
      {
        path: "button14.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button10.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button13.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button12.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button8.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button11.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button14.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button10.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button13.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button12.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button8.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button11.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button14.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button10.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button13.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__jyJyb)}>
            <div className={classNames(projectcss.all, sty.freeBox__gk0K2)}>
              <div className={classNames(projectcss.all, sty.freeBox__sx71)}>
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liom_hamyar/images/newProjectPng3.png",
                    fullWidth: 1640,
                    fullHeight: 664,
                    aspectRatio: undefined
                  }}
                />

                <div className={classNames(projectcss.all, sty.freeBox__lsVs3)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7EzXk
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return `ما توی لیوم نمی‌خوایم فقط یه اپلیکیشن باشیم؛ می‌خوایم  رفیق  و  همراه  این روزای خاص تو باشیم.   `;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <ul
                    data-plasmic-name={"ul"}
                    data-plasmic-override={overrides.ul}
                    className={classNames(
                      projectcss.all,
                      projectcss.ul,
                      sty.ul
                    )}
                  >
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        sty.li__j3Qcj
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tIgFz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uEqwr
                          )}
                        >
                          {
                            "\u062d\u0633 \u0648 \u062d\u0627\u0644\u062a \u0631\u0648 \u0628\u0647\u062a\u0631 \u0628\u0634\u0646\u0627\u0633\u06cc"
                          }
                        </div>
                      </div>
                    </li>
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        sty.li__mTk94
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jasK4
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___28PYu
                          )}
                        >
                          {
                            "\u0647\u0641\u062a\u0647\u200c\u0628\u0647\u200c\u0647\u0641\u062a\u0647 \u0631\u0634\u062f \u06a9\u0648\u0686\u0648\u0644\u0648\u062a \u0631\u0648 \u0628\u0628\u06cc\u0646\u06cc"
                          }
                        </div>
                      </div>
                    </li>
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        sty.li___0Q4LN
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___923JN
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__feFy6
                          )}
                        >
                          {
                            "\u0647\u0645\u0633\u0631\u062a\u00a0 \u0647\u0645 \u0628\u06cc\u0634\u062a\u0631 \u062f\u0631 \u062c\u0631\u06cc\u0627\u0646 \u062d\u0627\u0644 \u0648 \u0647\u0648\u0627\u06cc \u062a\u0648 \u0645\u06cc\u0632\u0627\u0631\u06cc\u0645"
                          }
                        </div>
                      </div>
                    </li>
                  </ul>
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ca5Au
                )}
              >
                {
                  "\u0644\u06cc\u0648\u0645\u00a0\u00a0\u060c \u06cc\u0647 \u0647\u0645\u0631\u0627\u0647 \u0635\u0645\u06cc\u0645\u06cc\u060c  \u0628\u0631\u0627\u06cc \u0647\u0631 \u0644\u062d\u0638\u0647 \u0627\u0632   \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\u062a\u0647\u00a0."
                }
              </div>
              <Icon231Icon
                className={classNames(projectcss.all, sty.svg__cyfQ)}
                role={"img"}
              />

              <div className={classNames(projectcss.all, sty.freeBox__nh1Zo)}>
                <div className={classNames(projectcss.all, sty.freeBox__r7Tuf)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fJaz6
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 500 }}
                      >
                        {
                          "\ud83c\udf31 \u0627\u0645\u0646\u06cc\u062a \u062f\u0631 \u0633\u0644\u0627\u0645\u062a"
                        }
                      </span>
                      <React.Fragment>
                        {
                          "\n\u0646\u06af\u0631\u0627\u0646 \u0641\u0631\u0627\u0645\u0648\u0634 \u06a9\u0631\u062f\u0646 \u0686\u06a9\u0627\u067e\u200c\u0647\u0627 \u0648 \u0622\u0632\u0645\u0627\u06cc\u0634\u200c\u0647\u0627 \u0646\u0628\u0627\u0634. \u0645\u0627 \u062f\u0631 \u0645\u0647\u0645\u200c\u062a\u0631\u06cc\u0646 \u0644\u062d\u0638\u0647\u200c\u0647\u0627 \u06a9\u0646\u0627\u0631\u062a \u0647\u0633\u062a\u06cc\u0645\u061b \u0627\u0632 \u063a\u0631\u0628\u0627\u0644\u06af\u0631\u06cc \u06af\u0631\u0641\u062a\u0647 \u062a\u0627 \u0645\u06a9\u0645\u0644\u200c\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u062a\u0648\u06cc \u0647\u0631 \u0647\u0641\u062a\u0647 \u0628\u0631\u0627\u062a \u0645\u0646\u0627\u0633\u0628\u0646. \u0627\u06cc\u0646 \u06cc\u0639\u0646\u06cc \u06cc\u06a9 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc \u0622\u06af\u0627\u0647\u0627\u0646\u0647\u060c \u0628\u062f\u0648\u0646 \u062c\u0627 \u0627\u0646\u062f\u0627\u062e\u062a\u0646 \u0647\u06cc\u0686 \u0646\u06a9\u062a\u0647\u200c\u0627\u06cc \u06a9\u0647 \u0628\u0647 \u0633\u0644\u0627\u0645\u062a \u062a\u0648 \u0648 \u0628\u0686\u0647\u200c\u0627\u062a \u0645\u0631\u0628\u0648\u0637 \u0628\u0627\u0634\u0647.\n\n"
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 500 }}
                      >
                        {
                          "\ud83d\udd4a \u0622\u0631\u0627\u0645\u0634 \u0630\u0647\u0646 \u0648 \u062f\u0644"
                        }
                      </span>
                      <React.Fragment>
                        {
                          "\n\u0647\u0641\u062a\u0647\u200c\u0628\u0647\u200c\u0647\u0641\u062a\u0647 \u0645\u06cc\u200c\u062f\u0648\u0646\u06cc \u0628\u0627\u06cc\u062f \u0645\u0646\u062a\u0638\u0631 \u0686\u0647 \u0686\u06cc\u0632\u0647\u0627\u06cc\u06cc \u0628\u0627\u0634\u06cc\u060c \u0686\u06cc \u0637\u0628\u06cc\u0639\u06cc\u200c\u0647 \u0648 \u0686\u06cc \u0647\u0634\u062f\u0627\u0631\u062f\u0647\u0646\u062f\u0647. \u0627\u06cc\u0646 \u06cc\u0639\u0646\u06cc \u0622\u0633\u0627\u06cc\u0634 \u0631\u0648\u0627\u0646\u06cc \u0648 \u062f\u0648\u0631\u06cc \u0627\u0632 \u0627\u0633\u062a\u0631\u0633\u200c\u0647\u0627\u06cc \u0627\u0636\u0627\u0641\u06cc.\n\n"
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 500 }}
                      >
                        {
                          "\ud83d\udc91 \u0631\u0627\u0628\u0637\u0647\u200c\u0627\u06cc \u0646\u0632\u062f\u06cc\u06a9\u200c\u062a\u0631 \u0628\u0627 \u0647\u0645\u0633\u0631\u062a"
                        }
                      </span>
                      <React.Fragment>
                        {
                          "\n\u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9\u200c\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0628\u0631\u0627\u06cc \u0634\u0631\u06cc\u06a9 \u0632\u0646\u062f\u06af\u06cc\u062a \u0637\u0631\u0627\u062d\u06cc \u0634\u062f\u0646\u060c \u06a9\u0645\u06a9\u0634 \u0645\u06cc\u200c\u06a9\u0646\u06cc \u062a\u0648 \u0631\u0648 \u0628\u0647\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0646\u0647 \u0648 \u0647\u0645\u0631\u0627\u0647\u06cc \u0639\u0645\u06cc\u0642\u200c\u062a\u0631\u06cc \u0628\u06cc\u0646\u200c\u062a\u0648\u0646 \u0634\u06a9\u0644 \u0628\u06af\u06cc\u0631\u0647. \u0627\u06cc\u0646 \u06cc\u0647 \u0633\u0631\u0645\u0627\u06cc\u0647\u200c\u06af\u0630\u0627\u0631\u06cc \u0639\u0627\u0637\u0641\u06cc \u0628\u0631\u0627\u06cc \u0647\u0631 \u062f\u0648\u062a\u0648\u0646 \u0647\u0633\u062a.\n\n"
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 500 }}
                      >
                        {
                          "\ud83e\udde0 \u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u0647 \u0631\u0627\u0647\u0646\u0645\u0627\u06cc\u06cc\u200c\u0647\u0627\u06cc \u062a\u062e\u0635\u0635\u06cc\u060c \u0628\u062f\u0648\u0646 \u0627\u0633\u062a\u0631\u0633"
                        }
                      </span>
                      <React.Fragment>
                        {
                          "\n\u0627\u0632 \u0645\u0634\u0627\u0648\u0631\u0647\u200c\u0647\u0627\u06cc \u0639\u0644\u0645\u06cc \u0648 \u062f\u0642\u06cc\u0642 \u062a\u0627 \u06af\u0641\u062a\u200c\u0648\u06af\u0648 \u0628\u0627 \u0631\u0648\u0627\u0646\u200c\u0634\u0646\u0627\u0633\u060c \u0628\u062f\u0648\u0646 \u0627\u06cc\u0646\u06a9\u0647 \u062f\u0646\u0628\u0627\u0644 \u062c\u0648\u0627\u0628 \u0628\u06af\u0631\u062f\u06cc\u060c \u067e\u0627\u0633\u062e\u200c\u0647\u0627\u062a \u0631\u0648 \u0647\u0645\u062f\u0644\u0627\u0646\u0647 \u0645\u06cc\u200c\u06af\u06cc\u0631\u06cc.\n\n"
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 500 }}
                      >
                        {
                          "\ud83d\udd12 \u0627\u062d\u0633\u0627\u0633 \u0627\u0645\u0646\u06cc\u062a\u060c \u062d\u062a\u06cc \u062f\u0631 \u062d\u0631\u06cc\u0645 \u062e\u0635\u0648\u0635\u06cc"
                        }
                      </span>
                      <React.Fragment>
                        {
                          "\n\u067e\u06cc\u0627\u0645\u06a9\u200c\u0647\u0627\u0645\u0648\u0646 \u0628\u062f\u0648\u0646 \u0646\u0627\u0645 \u0628\u0631\u0646\u0627\u0645\u0647\u200c\u0646 \u0648 \u0647\u0645\u0647 \u0686\u06cc\u0632 \u0631\u0645\u0632\u06af\u0630\u0627\u0631\u06cc\u200c\u0634\u062f\u0647\u200c\u0633\u062a. \u06cc\u0639\u0646\u06cc \u062d\u062a\u06cc \u0648\u0642\u062a\u06cc \u0646\u0645\u06cc\u200c\u062e\u0648\u0627\u06cc \u06a9\u0633\u06cc \u0628\u062f\u0648\u0646\u0647\u060c \u0647\u0646\u0648\u0632 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u062d\u0645\u0627\u06cc\u062a \u0628\u06af\u06cc\u0631\u06cc.\n\n"
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 500 }}
                      >
                        {
                          "\ud83d\udcb8 \u0635\u0631\u0641\u0647\u200c\u062c\u0648\u06cc\u06cc \u0647\u0648\u0634\u0645\u0646\u062f\u0627\u0646\u0647"
                        }
                      </span>
                      <React.Fragment>
                        {
                          "\n\u0628\u0627 \u062e\u0631\u06cc\u062f \u0628\u0633\u062a\u0647\u200c\u0647\u0627\u06cc \u0686\u0646\u062f\u0645\u0627\u0647\u0647\u060c \u0647\u0645 \u0628\u0647\u200c\u0635\u0631\u0641\u0647\u200c\u0633\u062a\u060c \u0647\u0645 \u062f\u06cc\u06af\u0647 \u0644\u0627\u0632\u0645 \u0646\u06cc\u0633\u062a \u0647\u0631 \u0628\u0627\u0631 \u062c\u062f\u0627\u06af\u0627\u0646\u0647 \u0647\u0632\u06cc\u0646\u0647 \u06a9\u0646\u06cc. \u062e\u06cc\u0627\u0644 \u0631\u0627\u062d\u062a\u060c \u062c\u06cc\u0628 \u0631\u0627\u062d\u062a\u200c\u062a\u0631!"
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6LBh
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-55cSeNPovQFh)",
                          fontWeight: 700
                        }}
                      >
                        {"\u0644\u06cc\u0648\u0645"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#535353", fontWeight: 700 }}
                      >
                        {
                          " \u062f\u0631\u0633\u062a \u0647\u0645\u0648\u0646\u200c\u062c\u0627\u06cc\u06cc\u0647 \u06a9\u0647 \u0628\u0627\u06cc\u062f \u0628\u0627\u0634\u0647\u061b \u06a9\u0646\u0627\u0631 \u062a\u0648\u060c \u062a\u0648\u06cc \u0644\u062d\u0638\u0647\u200c\u0644\u062d\u0638\u0647\u200c\u06cc \u0627\u06cc\u0646 \u0645\u0633\u06cc\u0631 \u062e\u0627\u0635 \u0648 \u067e\u0631 \u0627\u0632 \u0627\u062d\u0633\u0627\u0633.  \u0648\u0642\u062a\u06cc \u0628\u0627 \u06cc\u0647 \u0630\u0648\u0642 \u062e\u0627\u0635 \u0627\u0648\u0644\u06cc\u0646"
                        }
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-55cSeNPovQFh)",
                          fontWeight: 700
                        }}
                      >
                        {
                          " \u0631\u0648\u0632\u0627\u06cc \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\u062a"
                        }
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#535353", fontWeight: 700 }}
                      >
                        {
                          " \u0631\u0648 \u0645\u06cc\u200c\u06af\u0630\u0631\u0648\u0646\u06cc\u060c \u06cc\u0627 \u062d\u062a\u06cc \u0648\u0642\u062a\u06cc \u06cc\u0647\u200c\u06a9\u0645 "
                        }
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-55cSeNPovQFh)",
                          fontWeight: 700
                        }}
                      >
                        {"\u0646\u06af\u0631\u0627\u0646\u06cc"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#535353", fontWeight: 700 }}
                      >
                        {
                          " \u0648 \u0646\u0645\u06cc\u200c\u062f\u0648\u0646\u06cc \u0627\u0644\u0627\u0646 \u0628\u0627\u06cc\u062f "
                        }
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-55cSeNPovQFh)",
                          fontWeight: 700
                        }}
                      >
                        {"\u0686\u06cc \u06a9\u0627\u0631 \u06a9\u0646\u06cc"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#535353", fontWeight: 700 }}
                      >
                        {"\u060c"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#535353", fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-55cSeNPovQFh)",
                          fontWeight: 700
                        }}
                      >
                        {"\u0644\u06cc\u0648\u0645"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#535353", fontWeight: 700 }}
                      >
                        {" \u06a9\u0646\u0627\u0631\u062a\u0647."}
                      </span>
                    </React.Fragment>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wgK92)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dAy7R
                  )}
                >
                  {
                    "\u0644\u06cc\u0648\u0645 \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646 \u0686\u0648\u0646 \u0644\u06cc\u0648\u0645 \u0641\u0642\u0637 \u06cc\u0647 \u0627\u067e \u0646\u06cc\u0633\u062a\u060c \u06cc\u0647 \u0647\u0645\u0631\u0627\u0647\u0650 \u0648\u0627\u0642\u0639\u06cc\u200c\u0640\u0647 : "
                  }
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rGQuL)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__aoYM)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.values.length > 0 ? $state.values : [];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hanz5
                          )}
                          key={currentIndex}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iUpBd
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.icon;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hUry0
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pSWek
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.description;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vhMS)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__i5P7L
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "\u0627\u0645\u06a9\u0627\u0646\u0627\u062a\u06cc \u06a9\u0647 \u0644\u06cc\u0648\u0645 \u062f\u0631 \u0627\u062e\u062a\u06cc\u0627\u0631\u062a \u0645\u06cc\u0632\u0627\u0631\u0647 \u062a\u0627  \u062f\u0648\u0631\u0627\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\u200c\u062a \u0631\u0648 \u0631\u0627\u062d\u062a \u0648 \u0628\u0627 \u0622\u0631\u0627\u0645\u0634 \u0628\u06af\u0630\u0631\u0648\u0646\u06cc:"
                      }
                    </span>
                  </React.Fragment>
                </div>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.subList;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (() => {
                    const child$Props = {
                      bordered: false,
                      className: classNames("__wab_instance", sty.collapse),
                      expandIconPosition: "end",
                      ghost: true,
                      key: currentIndex,
                      label2: (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___306J0
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.text;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Header";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      ),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "open",
                          ["collapse", __plasmic_idx_0, "open"],
                          AntdSingleCollapse_Helpers
                        ).apply(null, eventArgs);
                      },
                      open: generateStateValueProp($state, [
                        "collapse",
                        __plasmic_idx_0,
                        "open"
                      ]),
                      showArrow: true,
                      size: "small"
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "open",
                          plasmicStateName: "collapse[].open"
                        }
                      ],
                      [__plasmic_idx_0],
                      AntdSingleCollapse_Helpers ?? {},
                      child$Props
                    );
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "collapse[].open",
                          initFunc: ({ $props, $state, $queries }) => undefined
                        }
                      ],
                      [__plasmic_idx_0]
                    );
                    return (
                      <AntdSingleCollapse
                        data-plasmic-name={"collapse"}
                        data-plasmic-override={overrides.collapse}
                        {...child$Props}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__amSJ
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.description;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Collapsible text...";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </AntdSingleCollapse>
                    );
                  })();
                })}
              </div>
            </div>
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__dCnsH)}>
                <div className={classNames(projectcss.all, sty.freeBox__r6Q7A)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__n8Atl)}
                    dir={"rtl"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__aazGu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sGe0N
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pDOlg
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iG9WQ
                            )}
                          >
                            {""}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bnfp8
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__egZtJ
                            )}
                          >
                            {""}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__r6Z93
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___5Pd3I
                              )}
                            >
                              {""}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__taV4I
                              )}
                            >
                              {""}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__klgWh
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__n6Vrn
                              )}
                            >
                              {""}
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zefUp
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__s0EmE
                            )}
                          >
                            {(() => {
                              const child$Props = {
                                allowClear: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                autoFocus: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                bordered: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                className: classNames(
                                  "__wab_instance",
                                  sty.input4
                                ),
                                disabled: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input4", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder:
                                  "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f.",
                                prefix: null,
                                readOnly: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                size: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? "small"
                                  : "small",
                                suffix: null,
                                value: generateStateValueProp($state, [
                                  "input4",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input4.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input4"}
                                  data-plasmic-override={overrides.input4}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </div>
                          <Button
                            data-plasmic-name={"button12"}
                            data-plasmic-override={overrides.button12}
                            className={classNames(
                              "__wab_instance",
                              sty.button12
                            )}
                            color={generateStateValueProp($state, [
                              "button12",
                              "color"
                            ])}
                            disabled={false}
                            load={generateStateValueProp($state, [
                              "button12",
                              "load"
                            ])}
                            loading={generateStateValueProp($state, [
                              "button12",
                              "loading"
                            ])}
                            onColorChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button12",
                                  "color"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onLoadChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button12",
                                  "load"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onLoadingChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button12",
                                  "loading"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dInP
                              )}
                            >
                              {"\u062a\u0627\u06cc\u06cc\u062f"}
                            </div>
                          </Button>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yGpT8
                          )}
                        >
                          <Button
                            data-plasmic-name={"button8"}
                            data-plasmic-override={overrides.button8}
                            className={classNames(
                              "__wab_instance",
                              sty.button8
                            )}
                            color={generateStateValueProp($state, [
                              "button8",
                              "color"
                            ])}
                            endIcon={
                              <Icon12Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___0PlI
                                )}
                                role={"img"}
                              />
                            }
                            load={generateStateValueProp($state, [
                              "button8",
                              "load"
                            ])}
                            loading={generateStateValueProp($state, [
                              "button8",
                              "loading"
                            ])}
                            onColorChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button8",
                                  "color"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onLoadChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button8",
                                  "load"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onLoadingChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button8",
                                  "loading"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aSrdW
                              )}
                            >
                              {
                                "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                              }
                            </div>
                          </Button>
                          <Button
                            data-plasmic-name={"button11"}
                            data-plasmic-override={overrides.button11}
                            className={classNames(
                              "__wab_instance",
                              sty.button11
                            )}
                            color={generateStateValueProp($state, [
                              "button11",
                              "color"
                            ])}
                            endIcon={
                              <Icon12Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__zxSun
                                )}
                                role={"img"}
                              />
                            }
                            load={generateStateValueProp($state, [
                              "button11",
                              "load"
                            ])}
                            loading={generateStateValueProp($state, [
                              "button11",
                              "loading"
                            ])}
                            onColorChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button11",
                                  "color"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onLoadChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button11",
                                  "load"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onLoadingChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button11",
                                  "loading"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__f0Xp
                              )}
                            >
                              {
                                "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u0645"
                              }
                            </div>
                          </Button>
                        </div>
                        <p
                          data-plasmic-name={"p"}
                          data-plasmic-override={overrides.p}
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p
                          )}
                        >
                          {
                            "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                          }
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
                <Dialog3
                  data-plasmic-name={"dialog2"}
                  data-plasmic-override={overrides.dialog2}
                  className={classNames("__wab_instance", sty.dialog2)}
                  onOpendialogChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "dialog2",
                      "opendialog"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  opendialog={generateStateValueProp($state, [
                    "dialog2",
                    "opendialog"
                  ])}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qVTsM)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__aa13D)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        []
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.subscription3
                            ),
                            clickitem: generateStateValueProp($state, [
                              "subscription3",
                              __plasmic_idx_0,
                              "clickitem"
                            ]),
                            discount: generateStateValueProp($state, [
                              "subscription3",
                              __plasmic_idx_0,
                              "discount"
                            ]),
                            fullprice: generateStateValueProp($state, [
                              "subscription3",
                              __plasmic_idx_0,
                              "fullprice"
                            ]),
                            key: currentIndex,
                            onClickitemChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription3",
                                __plasmic_idx_0,
                                "clickitem"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onDiscountChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription3",
                                __plasmic_idx_0,
                                "discount"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onFullpriceChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription3",
                                __plasmic_idx_0,
                                "fullprice"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onPriceChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription3",
                                __plasmic_idx_0,
                                "price"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onTitleChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription3",
                                __plasmic_idx_0,
                                "title"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            price: generateStateValueProp($state, [
                              "subscription3",
                              __plasmic_idx_0,
                              "price"
                            ]),
                            title: generateStateValueProp($state, [
                              "subscription3",
                              __plasmic_idx_0,
                              "title"
                            ])
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "subscription3[].clickitem",
                                initFunc: ({ $props, $state, $queries }) => true
                              },
                              {
                                name: "subscription3[].title",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.name;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "subscription3[].price",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.price.toLocaleString();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 120000;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "subscription3[].discount",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.badge;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "subscription3[].fullprice",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.fullPrice.toLocaleString();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 0;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Subscription3
                              data-plasmic-name={"subscription3"}
                              data-plasmic-override={overrides.subscription3}
                              {...child$Props}
                            >
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? (() => {
                                      try {
                                        return currentItem.topBadge
                                          ? true
                                          : false;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return currentItem.topBadge
                                          ? true
                                          : false;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ay4S1
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__kDtLk
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.topBadge;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              ) : null}
                            </Subscription3>
                          );
                        })();
                      })}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bwtIn)}
                    >
                      <Button
                        data-plasmic-name={"button14"}
                        data-plasmic-override={overrides.button14}
                        className={classNames("__wab_instance", sty.button14)}
                        color={generateStateValueProp($state, [
                          "button14",
                          "color"
                        ])}
                        endIcon={
                          <Icon12Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kiw0L
                            )}
                            role={"img"}
                          />
                        }
                        load={generateStateValueProp($state, [
                          "button14",
                          "load"
                        ])}
                        loading={generateStateValueProp($state, [
                          "button14",
                          "loading"
                        ])}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button14",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button14",
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadingChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button14",
                              "loading"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fzIFj
                          )}
                        >
                          {""}
                        </div>
                      </Button>
                      <Button
                        data-plasmic-name={"button10"}
                        data-plasmic-override={overrides.button10}
                        className={classNames("__wab_instance", sty.button10)}
                        color={generateStateValueProp($state, [
                          "button10",
                          "color"
                        ])}
                        endIcon={
                          <Icon12Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__rR9S7
                            )}
                            role={"img"}
                          />
                        }
                        load={generateStateValueProp($state, [
                          "button10",
                          "load"
                        ])}
                        loading={generateStateValueProp($state, [
                          "button10",
                          "loading"
                        ])}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button10",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button10",
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadingChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button10",
                              "loading"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__q84Xz
                          )}
                        >
                          {
                            "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u0645"
                          }
                        </div>
                      </Button>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wmnFb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8ShT
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            allowClear: hasVariant(
                              globalVariants,
                              "screen",
                              "mobile"
                            )
                              ? false
                              : false,
                            autoFocus: hasVariant(
                              globalVariants,
                              "screen",
                              "mobile"
                            )
                              ? false
                              : false,
                            bordered: hasVariant(
                              globalVariants,
                              "screen",
                              "mobile"
                            )
                              ? false
                              : false,
                            className: classNames("__wab_instance", sty.input5),
                            disabled: hasVariant(
                              globalVariants,
                              "screen",
                              "mobile"
                            )
                              ? false
                              : false,
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input5", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder:
                              "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f.",
                            prefix: null,
                            readOnly: hasVariant(
                              globalVariants,
                              "screen",
                              "mobile"
                            )
                              ? false
                              : false,
                            size: hasVariant(globalVariants, "screen", "mobile")
                              ? "small"
                              : "small",
                            suffix: null,
                            value: generateStateValueProp($state, [
                              "input5",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input5.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input5"}
                              data-plasmic-override={overrides.input5}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                      <Button
                        data-plasmic-name={"button13"}
                        data-plasmic-override={overrides.button13}
                        className={classNames("__wab_instance", sty.button13)}
                        color={generateStateValueProp($state, [
                          "button13",
                          "color"
                        ])}
                        disabled={false}
                        load={generateStateValueProp($state, [
                          "button13",
                          "load"
                        ])}
                        loading={generateStateValueProp($state, [
                          "button13",
                          "loading"
                        ])}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button13",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button13",
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadingChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button13",
                              "loading"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fPsJb
                          )}
                        >
                          {"\u062a\u0627\u06cc\u06cc\u062f"}
                        </div>
                      </Button>
                    </div>
                  </div>
                </Dialog3>
              </div>
            </section>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "ul",
    "collapse",
    "section",
    "input4",
    "button12",
    "button8",
    "button11",
    "p",
    "dialog2",
    "subscription3",
    "button14",
    "button10",
    "input5",
    "button13"
  ],
  img: ["img"],
  ul: ["ul"],
  collapse: ["collapse"],
  section: [
    "section",
    "input4",
    "button12",
    "button8",
    "button11",
    "p",
    "dialog2",
    "subscription3",
    "button14",
    "button10",
    "input5",
    "button13"
  ],
  input4: ["input4"],
  button12: ["button12"],
  button8: ["button8"],
  button11: ["button11"],
  p: ["p"],
  dialog2: [
    "dialog2",
    "subscription3",
    "button14",
    "button10",
    "input5",
    "button13"
  ],
  subscription3: ["subscription3"],
  button14: ["button14"],
  button10: ["button10"],
  input5: ["input5"],
  button13: ["button13"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  ul: "ul";
  collapse: typeof AntdSingleCollapse;
  section: "section";
  input4: typeof AntdInput;
  button12: typeof Button;
  button8: typeof Button;
  button11: typeof Button;
  p: "p";
  dialog2: typeof Dialog3;
  subscription3: typeof Subscription3;
  button14: typeof Button;
  button10: typeof Button;
  input5: typeof AntdInput;
  button13: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSubscriptionPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSubscriptionPage__VariantsArgs;
    args?: PlasmicSubscriptionPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSubscriptionPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSubscriptionPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSubscriptionPage__ArgProps,
          internalVariantPropNames: PlasmicSubscriptionPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSubscriptionPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSubscriptionPage";
  } else {
    func.displayName = `PlasmicSubscriptionPage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSubscriptionPage = Object.assign(
  // Top-level PlasmicSubscriptionPage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    ul: makeNodeComponent("ul"),
    collapse: makeNodeComponent("collapse"),
    section: makeNodeComponent("section"),
    input4: makeNodeComponent("input4"),
    button12: makeNodeComponent("button12"),
    button8: makeNodeComponent("button8"),
    button11: makeNodeComponent("button11"),
    p: makeNodeComponent("p"),
    dialog2: makeNodeComponent("dialog2"),
    subscription3: makeNodeComponent("subscription3"),
    button14: makeNodeComponent("button14"),
    button10: makeNodeComponent("button10"),
    input5: makeNodeComponent("input5"),
    button13: makeNodeComponent("button13"),

    // Metadata about props expected for PlasmicSubscriptionPage
    internalVariantProps: PlasmicSubscriptionPage__VariantProps,
    internalArgProps: PlasmicSubscriptionPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSubscriptionPage;
/* prettier-ignore-end */
