/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: YKiT8gl73-sD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import NotifBox from "../../NotifBox"; // plasmic-import: xI5TnebPGhVr/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicNotification.module.css"; // plasmic-import: YKiT8gl73-sD/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon

createPlasmicElementProxy;

export type PlasmicNotification__VariantMembers = {
  noNotification: "noNotification";
};
export type PlasmicNotification__VariantsArgs = {
  noNotification?: SingleBooleanChoiceArg<"noNotification">;
};
type VariantPropType = keyof PlasmicNotification__VariantsArgs;
export const PlasmicNotification__VariantProps = new Array<VariantPropType>(
  "noNotification"
);

export type PlasmicNotification__ArgsType = {};
type ArgPropType = keyof PlasmicNotification__ArgsType;
export const PlasmicNotification__ArgProps = new Array<ArgPropType>();

export type PlasmicNotification__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  svg?: Flex__<"svg">;
  apiRequest?: Flex__<typeof ApiRequest>;
  notifBox2?: Flex__<typeof NotifBox>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultNotificationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNotification__RenderFunc(props: {
  variants: PlasmicNotification__VariantsArgs;
  args: PlasmicNotification__ArgsType;
  overrides: PlasmicNotification__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "noNotification",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data?.success === false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.noNotification
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "notifBox2[].seen",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "notifBox2[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "notifBox2[].text",
        type: "private",
        variableType: "text"
      },
      {
        path: "notifBox2[].date",
        type: "private",
        variableType: "text"
      },
      {
        path: "notifBox2[].delet",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "userInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let userinfo = localStorage.getItem("userinfo");
                return (userinfo = JSON.parse(userinfo));
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root,
            {
              [sty.rootnoNotification]: hasVariant(
                $state,
                "noNotification",
                "noNotification"
              )
            }
          )}
          style={(() => {
            try {
              return {
                "padding-top":
                  typeof window?.FlutterChannel?.postMessage == "function"
                    ? "8px"
                    : "70px"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section, {
              [sty.sectionnoNotification]: hasVariant(
                $state,
                "noNotification",
                "noNotification"
              )
            })}
          >
            {(() => {
              try {
                return typeof window?.FlutterChannel?.postMessage != "function";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <HeaderLiom
                data-plasmic-name={"headerLiom"}
                data-plasmic-override={overrides.headerLiom}
                className={classNames("__wab_instance", sty.headerLiom)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__vbUj4)}>
                  <XIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return window.history.back();
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dXtwM
                    )}
                  >
                    {"\u0627\u0639\u0644\u0627\u0646\u0627\u062a"}
                  </div>
                </div>
              </HeaderLiom>
            ) : null}
          </section>
          <div
            className={classNames(projectcss.all, sty.freeBox__xZf, {
              [sty.freeBoxnoNotification__xZfObwoa]: hasVariant(
                $state,
                "noNotification",
                "noNotification"
              )
            })}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___6DKUy, {
                [sty.imgnoNotification___6DKUyobwoa]: hasVariant(
                  $state,
                  "noNotification",
                  "noNotification"
                )
              })}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={
                hasVariant($state, "noNotification", "noNotification") &&
                hasVariant(globalVariants, "screen", "mobile")
                  ? "50%"
                  : hasVariant($state, "noNotification", "noNotification")
                  ? "30%"
                  : hasVariant(globalVariants, "screen", "mobile")
                  ? "50%"
                  : "30%"
              }
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image9.png",
                fullWidth: 450,
                fullHeight: 450,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uV80F,
                {
                  [sty.textnoNotification__uV80Fobwoa]: hasVariant(
                    $state,
                    "noNotification",
                    "noNotification"
                  )
                }
              )}
            >
              {hasVariant($state, "noNotification", "noNotification")
                ? "\u0627\u0639\u0644\u0627\u0646\u06cc \u0628\u0631\u0627\u06cc \u0634\u0645\u0627 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f."
                : "Enter some text"}
            </div>
          </div>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest, {
              [sty.apiRequestnoNotification]: hasVariant(
                $state,
                "noNotification",
                "noNotification"
              )
            })}
            errorDisplay={null}
            loadingDisplay={
              <div className={classNames(projectcss.all, sty.freeBox__knz2I)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
                  2, 3, 4
                ]).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__ufOCw,
                        "shimmer"
                      )}
                      key={currentIndex}
                    />
                  );
                })}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={
              hasVariant($state, "noNotification", "noNotification")
                ? (() => {
                    try {
                      return {
                        userId: "cc0050d7-f509-4f4a-b553-faa895910984"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return {
                        userId: $state.paramsObject.userId
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
            }
            shouldFetch={(() => {
              try {
                return (
                  $state.paramsObject?.userId != "" &&
                  $state.paramsObject?.userId != null
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/notification"}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___8LpCi, {
                [sty.freeBoxnoNotification___8LpCIobwoa]: hasVariant(
                  $state,
                  "noNotification",
                  "noNotification"
                )
              })}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.apiRequest.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const notifItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (() => {
                  const child$Props = {
                    button2: (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jDwMo
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lxT1E
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return JSON.parse(notifItem.butten);
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_1, __plasmic_idx_1) => {
                            const currentItem = __plasmic_item_1;
                            const currentIndex = __plasmic_idx_1;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__u7Atx
                                )}
                                key={currentIndex}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["goToPage"] =
                                    !currentItem.action.startsWith("#")
                                      ? (() => {
                                          const actionArgs = {
                                            destination: (() => {
                                              try {
                                                return currentItem.action;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          };
                                          return (({ destination }) => {
                                            if (
                                              typeof destination === "string" &&
                                              destination.startsWith("#")
                                            ) {
                                              document
                                                .getElementById(
                                                  destination.substr(1)
                                                )
                                                .scrollIntoView({
                                                  behavior: "smooth"
                                                });
                                            } else {
                                              __nextRouter?.push(destination);
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["goToPage"] != null &&
                                    typeof $steps["goToPage"] === "object" &&
                                    typeof $steps["goToPage"].then ===
                                      "function"
                                  ) {
                                    $steps["goToPage"] = await $steps[
                                      "goToPage"
                                    ];
                                  }

                                  $steps["invokeGlobalAction"] =
                                    currentItem.action.startsWith("#")
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              (() => {
                                                try {
                                                  return currentItem.action;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.deepLink"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["invokeGlobalAction"] != null &&
                                    typeof $steps["invokeGlobalAction"] ===
                                      "object" &&
                                    typeof $steps["invokeGlobalAction"].then ===
                                      "function"
                                  ) {
                                    $steps["invokeGlobalAction"] = await $steps[
                                      "invokeGlobalAction"
                                    ];
                                  }
                                }}
                                style={(() => {
                                  try {
                                    return {
                                      background: currentItem.color
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fUm1J
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.btnText;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    ),
                    className: classNames("__wab_instance", sty.notifBox2, {
                      [sty.notifBox2noNotification]: hasVariant(
                        $state,
                        "noNotification",
                        "noNotification"
                      )
                    }),
                    date: generateStateValueProp($state, [
                      "notifBox2",
                      __plasmic_idx_0,
                      "date"
                    ]),
                    delet: generateStateValueProp($state, [
                      "notifBox2",
                      __plasmic_idx_0,
                      "delet"
                    ]),
                    forAll: (() => {
                      try {
                        return notifItem.type == "all";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })(),
                    key: currentIndex,
                    onChange: async activeIds => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] =
                        notifItem.userId != null &&
                        !$state.notifBox2[currentIndex].seen
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.staas.ir/webhook/notification",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        userId: $state.paramsObject.userId,
                                        notifId: notifItem.id
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.notifBox2[currentIndex].seen = true;
                                  let seenArrey =
                                    JSON.parse(
                                      localStorage.getItem("seenArrey")
                                    ) || [];
                                  if (!seenArrey.includes(notifItem.id)) {
                                    seenArrey.push(notifItem.id);
                                    return localStorage.setItem(
                                      "seenArrey",
                                      JSON.stringify(seenArrey)
                                    );
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    },
                    onClick: async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  if (notifItem.type == "all") {
                                    let notId =
                                      JSON.parse(
                                        localStorage.getItem("notId")
                                      ) || [];
                                    if (!notId.includes(notifItem.id)) {
                                      notId.push(notifItem.id);
                                      localStorage.setItem(
                                        "notId",
                                        JSON.stringify(notId)
                                      );
                                    }
                                  }
                                  return ($state.notifBox2[currentIndex].delet =
                                    true);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    },
                    onDateChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "notifBox2",
                        __plasmic_idx_0,
                        "date"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    onDeletChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "notifBox2",
                        __plasmic_idx_0,
                        "delet"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    onSeenChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "notifBox2",
                        __plasmic_idx_0,
                        "seen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    onTextChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "notifBox2",
                        __plasmic_idx_0,
                        "text"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    onTitleChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "notifBox2",
                        __plasmic_idx_0,
                        "title"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    seen: generateStateValueProp($state, [
                      "notifBox2",
                      __plasmic_idx_0,
                      "seen"
                    ]),
                    text: generateStateValueProp($state, [
                      "notifBox2",
                      __plasmic_idx_0,
                      "text"
                    ]),
                    title: generateStateValueProp($state, [
                      "notifBox2",
                      __plasmic_idx_0,
                      "title"
                    ])
                  };

                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "notifBox2[].seen",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return (() => {
                                let seenArrey =
                                  JSON.parse(
                                    localStorage.getItem("seenArrey")
                                  ) || [];
                                return (
                                  notifItem.seen != 0 ||
                                  seenArrey.includes(notifItem.id)
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "notifBox2[].title",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return notifItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "notifBox2[].text",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return notifItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "notifBox2[].date",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return (
                                // فقط تاریخ
                                new Date(notifItem.date).toLocaleDateString(
                                  "fa-IR",
                                  {
                                    year: "numeric",
                                    month: "numeric",
                                    day: "numeric"
                                  }
                                )
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "notifBox2[].delet",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return (() => {
                                let notId =
                                  JSON.parse(localStorage.getItem("notId")) ||
                                  [];
                                return notId.includes(notifItem.id);
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <NotifBox
                      data-plasmic-name={"notifBox2"}
                      data-plasmic-override={overrides.notifBox2}
                      {...child$Props}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__w0FQd)}
                        displayHeight={"40px"}
                        displayMaxHeight={"100%"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"40px"}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return notifItem.icon;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return {
                                src: "/plasmic/liom_hamyar/images/image10.ico",
                                fullWidth: 256,
                                fullHeight: 256,
                                aspectRatio: undefined
                              };
                            }
                            throw e;
                          }
                        })()}
                      />
                    </NotifBox>
                  );
                })();
              })}
            </div>
          </ApiRequest>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          return urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["runCode2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const searchParams = new URLSearchParams(
                            window.location.search
                          );
                          searchParams.delete("token");
                          searchParams.delete("userId");
                          searchParams.delete("user_id");
                          const newUrl = `${
                            window.location.pathname
                          }?${searchParams.toString()}`;
                          return window.history.replaceState(null, "", newUrl);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "headerLiom",
    "svg",
    "apiRequest",
    "notifBox2",
    "sideEffect"
  ],
  section: ["section", "headerLiom", "svg"],
  headerLiom: ["headerLiom", "svg"],
  svg: ["svg"],
  apiRequest: ["apiRequest", "notifBox2"],
  notifBox2: ["notifBox2"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  headerLiom: typeof HeaderLiom;
  svg: "svg";
  apiRequest: typeof ApiRequest;
  notifBox2: typeof NotifBox;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNotification__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNotification__VariantsArgs;
    args?: PlasmicNotification__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNotification__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNotification__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNotification__ArgProps,
          internalVariantPropNames: PlasmicNotification__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNotification__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNotification";
  } else {
    func.displayName = `PlasmicNotification.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNotification = Object.assign(
  // Top-level PlasmicNotification renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    headerLiom: makeNodeComponent("headerLiom"),
    svg: makeNodeComponent("svg"),
    apiRequest: makeNodeComponent("apiRequest"),
    notifBox2: makeNodeComponent("notifBox2"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicNotification
    internalVariantProps: PlasmicNotification__VariantProps,
    internalArgProps: PlasmicNotification__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNotification;
/* prettier-ignore-end */
