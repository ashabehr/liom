/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: MCAKqEbtK9Qy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSendmessage.module.css"; // plasmic-import: MCAKqEbtK9Qy/css

import Line3Icon from "./icons/PlasmicIcon__Line3"; // plasmic-import: cDBsZfQFOOWa/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicSendmessage__VariantMembers = {};
export type PlasmicSendmessage__VariantsArgs = {};
type VariantPropType = keyof PlasmicSendmessage__VariantsArgs;
export const PlasmicSendmessage__VariantProps = new Array<VariantPropType>();

export type PlasmicSendmessage__ArgsType = {
  onClick?: (event: any) => void;
  reportsSelect?: any;
  onReportsSelectChange?: (val: string) => void;
  tabList?: any;
  onTabListChange?: (val: string) => void;
  selectedTab?: number;
  onSelectedTabChange?: (val: string) => void;
  onFilessChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicSendmessage__ArgsType;
export const PlasmicSendmessage__ArgProps = new Array<ArgPropType>(
  "onClick",
  "reportsSelect",
  "onReportsSelectChange",
  "tabList",
  "onTabListChange",
  "selectedTab",
  "onSelectedTabChange",
  "onFilessChange"
);

export type PlasmicSendmessage__OverridesType = {
  frame49?: Flex__<"div">;
  frame25?: Flex__<"div">;
  frame48?: Flex__<"div">;
  svg?: Flex__<"svg">;
  frame50?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  antdInput?: Flex__<typeof Input>;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  antdInput2?: Flex__<typeof Input>;
};

export interface DefaultSendmessageProps {
  onClick?: (event: any) => void;
  reportsSelect?: any;
  onReportsSelectChange?: (val: string) => void;
  tabList?: any;
  onTabListChange?: (val: string) => void;
  selectedTab?: number;
  onSelectedTabChange?: (val: string) => void;
  onFilessChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSendmessage__RenderFunc(props: {
  variants: PlasmicSendmessage__VariantsArgs;
  args: PlasmicSendmessage__ArgsType;
  overrides: PlasmicSendmessage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "titre",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9\u200c\u0647\u0627\u06cc \u063a\u06cc\u0631 \u0641\u0639\u0627\u0644 \u0647\u0645\u06cc\u0627\u0631",
            type: "expired_subscriptions",
            api: "endSmsSubs",
            backColor: "#ed5151"
          },
          {
            title:
              "\u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627 - \u06f3 \u0631\u0648\u0632 \u0645\u0627\u0646\u062f\u0647 \u062a\u0627 \u0627\u062a\u0645\u0627\u0645",
            type: "expiring_3_days",
            api: "endSmsSubsByDay",
            backColor: "#FFA500"
          },
          {
            title:
              "\u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627 - \u06f1\u06f0 \u0631\u0648\u0632 \u0645\u0627\u0646\u062f\u0647 \u062a\u0627 \u0627\u062a\u0645\u0627\u0645",
            type: "expiring_10_days",
            api: "endHusbandSub",
            backColor: ""
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0627\u06cc \u0641\u0639\u0627\u0644 \u0647\u0645\u06cc\u0627\u0631",
            type: "active_count",
            api: "hamyarActiveList",
            backColor: ""
          }
        ]
      },
      {
        path: "reportsSelect",
        type: "writable",
        variableType: "object",

        valueProp: "reportsSelect",
        onChangeProp: "onReportsSelectChange"
      },
      {
        path: "tabList",
        type: "writable",
        variableType: "array",

        valueProp: "tabList",
        onChangeProp: "onTabListChange"
      },
      {
        path: "selectedTab",
        type: "writable",
        variableType: "number",

        valueProp: "selectedTab",
        onChangeProp: "onSelectedTabChange"
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "softSand"
      },
      {
        path: "button2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "antdInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "filess",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({}),

        onChangeProp: "onFilessChange"
      },
      {
        path: "imageload",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"frame49"}
      data-plasmic-override={overrides.frame49}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame49
      )}
    >
      <div
        data-plasmic-name={"frame25"}
        data-plasmic-override={overrides.frame25}
        className={classNames(projectcss.all, sty.frame25)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7Qc37
          )}
        >
          {"\u0627\u0631\u0633\u0627\u0644 \u067e\u06cc\u0627\u0645\u06a9"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame48"}
        data-plasmic-override={overrides.frame48}
        className={classNames(projectcss.all, sty.frame48)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__e5Rd7)}>
          <Line3Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      </div>
      <div
        data-plasmic-name={"frame50"}
        data-plasmic-override={overrides.frame50}
        className={classNames(projectcss.all, sty.frame50)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___1CUiz)}>
          <div className={classNames(projectcss.all, sty.freeBox__mNf9I)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jWDxd
              )}
            >
              {"\u067e\u06cc\u0627\u0645\u06a9"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jpyX)}>
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              antdInput2={(() => {
                const child$Props = {
                  "aria-label": ``,
                  bordered: false,
                  className: classNames("__wab_instance", sty.antdInput),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["antdInput", "value"],
                      Input_Helpers
                    ).apply(null, eventArgs);

                    (async event => {
                      const $steps = {};
                    }).apply(null, eventArgs);
                  },
                  size: "large",
                  value: generateStateValueProp($state, ["antdInput", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "antdInput.value"
                    }
                  ],
                  [],
                  Input_Helpers ?? {},
                  child$Props
                );

                return (
                  <Input
                    data-plasmic-name={"antdInput"}
                    data-plasmic-override={overrides.antdInput}
                    {...child$Props}
                  />
                );
              })()}
              className={classNames("__wab_instance", sty.textInput)}
              color={"soft"}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={
                "\u067e\u06cc\u0627\u0645 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
              }
              value={
                generateStateValueProp($state, ["textInput", "value"]) ?? ""
              }
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___1YrX)}>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={generateStateValueProp($state, ["button", "color"])}
              load={generateStateValueProp($state, ["button", "load"])}
              loading={generateStateValueProp($state, ["button", "loading"])}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              {"\u0627\u0631\u0633\u0627\u0644 \u067e\u06cc\u0627\u0645"}
            </Button>
            <Button
              data-plasmic-name={"button2"}
              data-plasmic-override={overrides.button2}
              className={classNames("__wab_instance", sty.button2)}
              color={generateStateValueProp($state, ["button2", "color"])}
              load={generateStateValueProp($state, ["button2", "load"])}
              loading={generateStateValueProp($state, ["button2", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.document
                              .getElementById("fileInput")
                              .click();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button2", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button2", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button2", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bQoQ
                )}
              >
                {"\u0627\u0646\u062a\u062e\u0627\u0628 \u0639\u06a9\u0633"}
              </div>
            </Button>
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__oOgBr)} />

      {(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.antdInput2),
          id: "fileInput",
          onChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["antdInput2", "value"],
              Input_Helpers
            ).apply(null, eventArgs);

            (async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function isAccepted(type) {
                            return ["image/jpeg", "image/png"].includes(type);
                          }
                          function addFiles(newFiles) {
                            for (var f of newFiles) {
                              if (!isAccepted(f.type)) continue;
                              window.filess = f;
                              $state.imageload = URL.createObjectURL(f);
                              console.log($state.files);
                              console.log($state.imageload);
                            }
                          }
                          return addFiles(event.currentTarget.files);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }).apply(null, eventArgs);
          },
          type: "file",
          value: generateStateValueProp($state, ["antdInput2", "value"])
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "antdInput2.value"
            }
          ],
          [],
          Input_Helpers ?? {},
          child$Props
        );

        return (
          <Input
            data-plasmic-name={"antdInput2"}
            data-plasmic-override={overrides.antdInput2}
            {...child$Props}
          />
        );
      })()}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame49: [
    "frame49",
    "frame25",
    "frame48",
    "svg",
    "frame50",
    "textInput",
    "antdInput",
    "button",
    "button2",
    "antdInput2"
  ],
  frame25: ["frame25"],
  frame48: ["frame48", "svg"],
  svg: ["svg"],
  frame50: ["frame50", "textInput", "antdInput", "button", "button2"],
  textInput: ["textInput", "antdInput"],
  antdInput: ["antdInput"],
  button: ["button"],
  button2: ["button2"],
  antdInput2: ["antdInput2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame49: "div";
  frame25: "div";
  frame48: "div";
  svg: "svg";
  frame50: "div";
  textInput: typeof TextInput;
  antdInput: typeof Input;
  button: typeof Button;
  button2: typeof Button;
  antdInput2: typeof Input;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSendmessage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSendmessage__VariantsArgs;
    args?: PlasmicSendmessage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSendmessage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSendmessage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSendmessage__ArgProps,
          internalVariantPropNames: PlasmicSendmessage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSendmessage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame49") {
    func.displayName = "PlasmicSendmessage";
  } else {
    func.displayName = `PlasmicSendmessage.${nodeName}`;
  }
  return func;
}

export const PlasmicSendmessage = Object.assign(
  // Top-level PlasmicSendmessage renders the root element
  makeNodeComponent("frame49"),
  {
    // Helper components rendering sub-elements
    frame25: makeNodeComponent("frame25"),
    frame48: makeNodeComponent("frame48"),
    svg: makeNodeComponent("svg"),
    frame50: makeNodeComponent("frame50"),
    textInput: makeNodeComponent("textInput"),
    antdInput: makeNodeComponent("antdInput"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    antdInput2: makeNodeComponent("antdInput2"),

    // Metadata about props expected for PlasmicSendmessage
    internalVariantProps: PlasmicSendmessage__VariantProps,
    internalArgProps: PlasmicSendmessage__ArgProps
  }
);

export default PlasmicSendmessage;
/* prettier-ignore-end */
