/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 3v9tn6uUJCPM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import { Input } from "@/fragment/components/input"; // plasmic-import: zZH7vV9pXyf8/codeComponent
import { Select } from "@/fragment/components/select"; // plasmic-import: 5Mch6ak-Pshg/codeComponent
import Switchbest from "../../Switchbest"; // plasmic-import: ofUp1AS5glz5/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { DatePickers } from "@/components/DatePickers"; // plasmic-import: Pxh5xTWczGDl/codeComponent
import MenuIcon from "../../MenuIcon"; // plasmic-import: JBF-V8Q5mpWl/component
import Countdown from "../../Countdown"; // plasmic-import: 1ruheQLCU5pc/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicReminder.module.css"; // plasmic-import: 3v9tn6uUJCPM/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import InfoIcon from "../fragment_icons/icons/PlasmicIcon__Info"; // plasmic-import: 7Dhq6fgU-utK/icon

createPlasmicElementProxy;

export type PlasmicReminder__VariantMembers = {};
export type PlasmicReminder__VariantsArgs = {};
type VariantPropType = keyof PlasmicReminder__VariantsArgs;
export const PlasmicReminder__VariantProps = new Array<VariantPropType>();

export type PlasmicReminder__ArgsType = {
  data?: any;
  manId?: string;
  subscription?: boolean;
  refresh?: string;
  onRefreshChange?: (val: string) => void;
  shop?: () => void;
  back?: () => void;
};
type ArgPropType = keyof PlasmicReminder__ArgsType;
export const PlasmicReminder__ArgProps = new Array<ArgPropType>(
  "data",
  "manId",
  "subscription",
  "refresh",
  "onRefreshChange",
  "shop",
  "back"
);

export type PlasmicReminder__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  dialog?: Flex__<typeof Dialog>;
  input?: Flex__<typeof Input>;
  select?: Flex__<typeof Select>;
  switchbest3?: Flex__<typeof Switchbest>;
  button5?: Flex__<typeof Button>;
  dialog2?: Flex__<typeof Dialog>;
  datePickers?: Flex__<typeof DatePickers>;
  button4?: Flex__<typeof Button>;
  todayMeeting2?: Flex__<"div">;
  frame10?: Flex__<"div">;
  frame11?: Flex__<"div">;
  frame12?: Flex__<"div">;
  frame13?: Flex__<"div">;
  frame14?: Flex__<"div">;
  frame15?: Flex__<"div">;
  frame16?: Flex__<"div">;
  group4?: Flex__<"div">;
  group5?: Flex__<"div">;
  frame17?: Flex__<"div">;
  countdown2?: Flex__<typeof Countdown>;
  frame18?: Flex__<"div">;
  button2?: Flex__<typeof Button>;
  popover?: Flex__<typeof AntdPopover>;
  switchbest2?: Flex__<typeof Switchbest>;
  button3?: Flex__<typeof Button>;
  todayMeeting?: Flex__<"div">;
  frame?: Flex__<"div">;
  frame2?: Flex__<"div">;
  frame19?: Flex__<"div">;
  frame20?: Flex__<"div">;
  frame21?: Flex__<"div">;
  frame22?: Flex__<"div">;
  frame23?: Flex__<"div">;
  group6?: Flex__<"div">;
  group7?: Flex__<"div">;
  frame24?: Flex__<"div">;
  countdown3?: Flex__<typeof Countdown>;
  frame25?: Flex__<"div">;
  button6?: Flex__<typeof Button>;
  popover2?: Flex__<typeof AntdPopover>;
  switchbest4?: Flex__<typeof Switchbest>;
};

export interface DefaultReminderProps {
  data?: any;
  manId?: string;
  subscription?: boolean;
  refresh?: string;
  onRefreshChange?: (val: string) => void;
  shop?: () => void;
  back?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReminder__RenderFunc(props: {
  variants: PlasmicReminder__VariantsArgs;
  args: PlasmicReminder__ArgsType;
  overrides: PlasmicReminder__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: [
            {
              id: 32,
              man_id: 3,
              name: "\u062a\u0648\u0644\u062f \u062a\u0627\u0646\u0627\u0646\u062a\u0627\u062a\u0646",
              date_greg: "2025-12-02",
              date_shamsi: "1386/10/10",
              type: "ChildBirthday",
              description: null,
              repeat_yearly: 1,
              remind_before: 0,
              smsActive: 1
            },
            {
              id: 31,
              man_id: 3,
              name: "\u062a\u0648\u0644\u062f \u0646\u062a\u0627\u0646\u062a\u0627",
              date_greg: "2025-12-05",
              date_shamsi: "1386/10/10",
              type: "ChildBirthday",
              description: null,
              repeat_yearly: 1,
              remind_before: 0,
              smsActive: 1
            },
            {
              id: 30,
              man_id: 3,
              name: "\u062a\u0648\u0644\u062f \u0645\u062d\u0645\u062f",
              date_greg: "2025-12-15",
              date_shamsi: "1386/10/10",
              type: "ChildBirthday",
              description: null,
              repeat_yearly: 1,
              remind_before: 0,
              smsActive: 0
            },
            {
              id: 29,
              man_id: 3,
              name: "\u062a\u0648\u0644\u062f \u0639\u0644\u06cc",
              date_greg: "2025-12-31",
              date_shamsi: "1388/10/10",
              type: "ChildBirthday",
              description: null,
              repeat_yearly: 1,
              remind_before: 0,
              smsActive: 0
            },
            {
              id: 21,
              man_id: 3,
              name: "\u0631\u0648\u0632 \u0632\u0646 \u0648 \u0645\u0627\u062f\u0631",
              date_greg: "2026-02-09",
              date_shamsi: "1404/11/20",
              type: "Occasion",
              description:
                "\u0648\u0644\u0627\u062f\u062a \u062d\u0636\u0631\u062a \u0641\u0627\u0637\u0645\u0647 \u0632\u0647\u0631\u0627 (\u0633)",
              repeat_yearly: 1,
              remind_before: 3,
              smsActive: 0
            },
            {
              id: 24,
              man_id: 3,
              name: "\u0648\u0644\u0646\u062a\u0627\u06cc\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642)",
              date_greg: "2026-02-14",
              date_shamsi: "1404/11/25",
              type: "Occasion",
              description:
                "\u0631\u0648\u0632 \u0639\u0634\u0642 \u062c\u0647\u0627\u0646\u06cc",
              repeat_yearly: 1,
              remind_before: 7,
              smsActive: 0
            },
            {
              id: 25,
              man_id: 3,
              name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
              date_greg: "2026-02-19",
              date_shamsi: "1404/11/30",
              type: "Occasion",
              description:
                "\u0631\u0648\u0632 \u0632\u0646 \u0648 \u0639\u0634\u0642 \u062f\u0631 \u0627\u06cc\u0631\u0627\u0646 \u0628\u0627\u0633\u062a\u0627\u0646",
              repeat_yearly: 1,
              remind_before: 7,
              smsActive: 0
            },
            {
              id: 23,
              man_id: 3,
              name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u0632\u0646",
              date_greg: "2026-03-08",
              date_shamsi: "1404/12/17",
              type: "Occasion",
              description: "International Women's Day",
              repeat_yearly: 1,
              remind_before: 7,
              smsActive: 0
            },
            {
              id: 22,
              man_id: 3,
              name: "\u0631\u0648\u0632 \u062f\u062e\u062a\u0631",
              date_greg: "2026-05-30",
              date_shamsi: "1405/03/09",
              type: "Occasion",
              description:
                "\u0648\u0644\u0627\u062f\u062a \u062d\u0636\u0631\u062a \u0645\u0639\u0635\u0648\u0645\u0647 (\u0633)",
              repeat_yearly: 1,
              remind_before: 3,
              smsActive: 0
            },
            {
              id: 26,
              man_id: 3,
              name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631\u0627\u0646",
              date_greg: "2026-10-11",
              date_shamsi: "1405/07/19",
              type: "Occasion",
              description: "International Day of the Girl Child",
              repeat_yearly: 1,
              remind_before: 7,
              smsActive: 0
            },
            {
              id: 28,
              man_id: 3,
              name: "\u062a\u0648\u0644\u062f \u0632\u0647\u0631\u0627",
              date_greg: "2026-12-30",
              date_shamsi: "1379/10/10",
              type: "SpouseBirthday",
              description: null,
              repeat_yearly: 1,
              remind_before: 0,
              smsActive: 0
            }
          ],
          subscription: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label: "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
            value: "SpouseBirthday"
          },
          {
            label:
              "\u0633\u0627\u0644\u06af\u0631\u062f \u0622\u0634\u0646\u0627\u06cc\u06cc",
            value: "MeetingAnniversary"
          },
          {
            label:
              "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
            value: "WeddingAnniversary"
          },
          {
            label: "\u062a\u0648\u0644\u062f \u0641\u0631\u0632\u0646\u062f",
            value: "ChildBirthday"
          },
          {
            label:
              "\u0631\u0648\u06cc\u062f\u0627\u062f \u0634\u062e\u0635\u06cc",
            value: "PersonalEvent"
          }
        ]
      },
      {
        path: "countdown2[].remainingSeconds",
        type: "private",
        variableType: "number"
      },
      {
        path: "button2[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "button2[].loading",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button2[].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "switchbest2[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button3.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button3.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? true : false
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.select2.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.select2.type;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? true : false
      },
      {
        path: "datePickers.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "date",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "switchbest3.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.select2.smsActive && $props.subscription;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "isChecked";
              }
              throw e;
            }
          })()
      },
      {
        path: "select2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "popover[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "countdown3[].remainingSeconds",
        type: "private",
        variableType: "number"
      },
      {
        path: "button6[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "button6[].loading",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button6[].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "popover2[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "switchbest4[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "refresh",
        type: "writable",
        variableType: "text",

        valueProp: "refresh",
        onChangeProp: "onRefreshChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <HeaderLiom
          data-plasmic-name={"headerLiom"}
          data-plasmic-override={overrides.headerLiom}
          className={classNames("__wab_instance", sty.headerLiom)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__gaKaO)}>
            <XIcon
              className={classNames(projectcss.all, sty.svg__a2F2A)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wzGEt
              )}
            >
              {"\u06cc\u0627\u062f \u0622\u0648\u0631\u06cc \u0647\u0627"}
            </div>
          </div>
        </HeaderLiom>
        <Dialog
          data-plasmic-name={"dialog"}
          data-plasmic-override={overrides.dialog}
          className={classNames("__wab_instance", sty.dialog)}
          onOpendialogChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog", "opendialog"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          opendialog={generateStateValueProp($state, ["dialog", "opendialog"])}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ka3Jm)}>
            <div className={classNames(projectcss.all, sty.freeBox__y8LJx)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bijdP
                )}
              >
                {"\u0639\u0646\u0648\u0627\u0646 "}
              </div>
              <Input
                data-plasmic-name={"input"}
                data-plasmic-override={overrides.input}
                className={classNames("__wab_instance", sty.input)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["input", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                placeholder={
                  "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 \u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631\u0645"
                }
                type={"text"}
                value={generateStateValueProp($state, ["input", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__hK5R)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3JyFy
                )}
              >
                {"\u0646\u0648\u0639 "}
              </div>
              <Select
                data-plasmic-name={"select"}
                data-plasmic-override={overrides.select}
                disabled={(() => {
                  try {
                    return $state.select2.type;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["select", "open"])}
                options={(() => {
                  try {
                    return Object.keys($state.select2).length == 0
                      ? $state.type.filter(i => {
                          if (i.value === "ChildBirthday") {
                            const count = $props.data.filter(
                              a => a.type === i.value
                            ).length;
                            return count < 4;
                          } else {
                            return !$props.data.some(a => a.type === i.value);
                          }
                        })
                      : $state.type;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                placeholder={
                  "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 \u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c"
                }
                triggerClassName={classNames("__wab_instance", sty.select)}
                value={generateStateValueProp($state, ["select", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__sQJd)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2RWLw
                )}
              >
                {
                  "\u062a\u0627\u0631\u06cc\u062e \u0631\u0648\u06cc\u062f\u0627\u062f"
                }
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__ss7CV)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDialog2Opendialog"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog2", "opendialog"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialog2Opendialog"] != null &&
                    typeof $steps["updateDialog2Opendialog"] === "object" &&
                    typeof $steps["updateDialog2Opendialog"].then === "function"
                  ) {
                    $steps["updateDialog2Opendialog"] = await $steps[
                      "updateDialog2Opendialog"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pdomG
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.date.f;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 1404/1/1";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__v4P1)}>
              <Switchbest
                data-plasmic-name={"switchbest3"}
                data-plasmic-override={overrides.switchbest3}
                className={classNames("__wab_instance", sty.switchbest3)}
                isChecked={
                  generateStateValueProp($state, [
                    "switchbest3",
                    "isChecked"
                  ]) ?? false
                }
                isDisabled={(() => {
                  try {
                    return !$props.subscription;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "switchbest3",
                      "isChecked"
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d1Zl
                  )}
                >
                  {
                    "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc  \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc  \u0628\u0647 \u0635\u0648\u0631\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0648 \u062a\u0644\u06af\u0631\u0627\u0645"
                  }
                </div>
              </Switchbest>
            </div>
            <Button
              data-plasmic-name={"button5"}
              data-plasmic-override={overrides.button5}
              className={classNames("__wab_instance", sty.button5)}
              color={generateStateValueProp($state, ["button5", "color"])}
              load={generateStateValueProp($state, ["button5", "load"])}
              loading={generateStateValueProp($state, ["button5", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateButton5Loading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["button5", "loading"]
                        },
                        operation: 4,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateButton5Loading"] != null &&
                  typeof $steps["updateButton5Loading"] === "object" &&
                  typeof $steps["updateButton5Loading"].then === "function"
                ) {
                  $steps["updateButton5Loading"] = await $steps[
                    "updateButton5Loading"
                  ];
                }

                $steps["insert"] =
                  Object.keys($state.select2).length == 0
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "PUT",
                            "https://n8n.staas.ir/webhook/hamyar/reminder",
                            undefined,
                            (() => {
                              try {
                                return {
                                  man_id: $props.manId,
                                  name: $state.input.value,
                                  date_greg: $state.date.g,
                                  date_shamsi: $state.date.f,
                                  type: $state.select.value,
                                  smsActive: $state.switchbest3.isChecked
                                    ? 1
                                    : 0
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["insert"] != null &&
                  typeof $steps["insert"] === "object" &&
                  typeof $steps["insert"].then === "function"
                ) {
                  $steps["insert"] = await $steps["insert"];
                }

                $steps["update"] =
                  Object.keys($state.select2).length != 0
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://n8n.staas.ir/webhook/hamyar/reminder",
                            undefined,
                            (() => {
                              try {
                                return {
                                  id: $state.select2.id,
                                  man_id: $props.manId,
                                  name: $state.input.value,
                                  date_greg: $state.date.g,
                                  date_shamsi: $state.date.f,
                                  type: $state.select.value,
                                  smsActive: $state.switchbest3.isChecked
                                    ? 1
                                    : 0
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["update"] != null &&
                  typeof $steps["update"] === "object" &&
                  typeof $steps["update"].then === "function"
                ) {
                  $steps["update"] = await $steps["update"];
                }

                $steps["invokeGlobalAction2"] =
                  $steps.insert?.data?.success == true ||
                  $steps.update?.data?.success == true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                            "bottom-center",
                            2000
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["invokeGlobalAction2"] != null &&
                  typeof $steps["invokeGlobalAction2"] === "object" &&
                  typeof $steps["invokeGlobalAction2"].then === "function"
                ) {
                  $steps["invokeGlobalAction2"] = await $steps[
                    "invokeGlobalAction2"
                  ];
                }

                $steps["updateButton5Load2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["button5", "loading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateButton5Load2"] != null &&
                  typeof $steps["updateButton5Load2"] === "object" &&
                  typeof $steps["updateButton5Load2"].then === "function"
                ) {
                  $steps["updateButton5Load2"] = await $steps[
                    "updateButton5Load2"
                  ];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button5", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button5", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button5", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__z7Tnh
                )}
              >
                {
                  "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0630\u062e\u06cc\u0631\u0647"
                }
              </div>
            </Button>
          </div>
        </Dialog>
        <Dialog
          data-plasmic-name={"dialog2"}
          data-plasmic-override={overrides.dialog2}
          className={classNames("__wab_instance", sty.dialog2)}
          onOpendialogChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog2", "opendialog"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          opendialog={generateStateValueProp($state, ["dialog2", "opendialog"])}
        >
          <div className={classNames(projectcss.all, sty.freeBox__pNTja)}>
            <DatePickers
              data-plasmic-name={"datePickers"}
              data-plasmic-override={overrides.datePickers}
              SelectedDay={10}
              SelectedMonth={10}
              SelectedYear={1379}
              className={classNames("__wab_instance", sty.datePickers)}
              customYears={[]}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "datePickers",
                  "value"
                ]).apply(null, eventArgs);
              }}
              selectedValues={generateStateValueProp($state, [
                "datePickers",
                "value"
              ])}
            />

            <Button
              data-plasmic-name={"button4"}
              data-plasmic-override={overrides.button4}
              className={classNames("__wab_instance", sty.button4)}
              color={generateStateValueProp($state, ["button4", "color"])}
              load={generateStateValueProp($state, ["button4", "load"])}
              loading={generateStateValueProp($state, ["button4", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateDate"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["date"]
                        },
                        operation: 0,
                        value: (() => {
                          const { year, month, day, gregorian } =
                            $state.datePickers.value;
                          const f = `${year}/${month}/${day}`;
                          let gYear = new Date().getFullYear();
                          const gMonth = gregorian.month;
                          const gDay = gregorian.day;
                          let birthdayThisYear = new Date(
                            gYear,
                            gMonth - 1,
                            gDay
                          );
                          const today = new Date();
                          if (birthdayThisYear < today) {
                            gYear += 1;
                          }
                          const g = `${gYear}-${String(gMonth).padStart(
                            2,
                            "0"
                          )}-${String(gDay).padStart(2, "0")}`;
                          const result = {
                            f,
                            g
                          };
                          return result;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDate"] != null &&
                  typeof $steps["updateDate"] === "object" &&
                  typeof $steps["updateDate"].then === "function"
                ) {
                  $steps["updateDate"] = await $steps["updateDate"];
                }

                $steps["updateDialog2Opendialog"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dialog2", "opendialog"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialog2Opendialog"] != null &&
                  typeof $steps["updateDialog2Opendialog"] === "object" &&
                  typeof $steps["updateDialog2Opendialog"].then === "function"
                ) {
                  $steps["updateDialog2Opendialog"] = await $steps[
                    "updateDialog2Opendialog"
                  ];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button4", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button4", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button4", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bGhoM
                )}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </div>
            </Button>
          </div>
        </Dialog>
      </section>
      <div className={classNames(projectcss.all, sty.freeBox__xMddU)}>
        <div
          data-plasmic-name={"todayMeeting2"}
          data-plasmic-override={overrides.todayMeeting2}
          className={classNames(projectcss.all, sty.todayMeeting2)}
        >
          <div
            data-plasmic-name={"frame10"}
            data-plasmic-override={overrides.frame10}
            className={classNames(projectcss.all, sty.frame10)}
          >
            <div
              data-plasmic-name={"frame11"}
              data-plasmic-override={overrides.frame11}
              className={classNames(projectcss.all, sty.frame11)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wf2F
                )}
              >
                {
                  "\u0645\u0646\u0627\u0633\u0628\u062a \u0647\u0627\u06cc \u0634\u062e\u0635\u06cc"
                }
              </div>
            </div>
          </div>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.data.filter(i => i.type != "Occasion");
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                data-plasmic-name={"frame12"}
                data-plasmic-override={overrides.frame12}
                className={classNames(projectcss.all, sty.frame12)}
                key={currentIndex}
              >
                <div
                  data-plasmic-name={"frame13"}
                  data-plasmic-override={overrides.frame13}
                  className={classNames(projectcss.all, sty.frame13)}
                >
                  <div
                    data-plasmic-name={"frame14"}
                    data-plasmic-override={overrides.frame14}
                    className={classNames(projectcss.all, sty.frame14)}
                  >
                    <div
                      data-plasmic-name={"frame15"}
                      data-plasmic-override={overrides.frame15}
                      className={classNames(projectcss.all, sty.frame15)}
                    >
                      <div
                        data-plasmic-name={"frame16"}
                        data-plasmic-override={overrides.frame16}
                        className={classNames(projectcss.all, sty.frame16)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__c1I0O
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zqSyr
                            )}
                          >
                            <div
                              data-plasmic-name={"group4"}
                              data-plasmic-override={overrides.group4}
                              className={classNames(projectcss.all, sty.group4)}
                            >
                              <div
                                data-plasmic-name={"group5"}
                                data-plasmic-override={overrides.group5}
                                className={classNames(
                                  projectcss.all,
                                  sty.group5
                                )}
                                style={(() => {
                                  try {
                                    return {
                                      background:
                                        $props.subscription &&
                                        !currentItem.smsActive
                                          ? "#FAAD14"
                                          : ""
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <MenuIcon
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuIcon__qzv6L
                                  )}
                                  icons={(() => {
                                    try {
                                      return (() => {
                                        if (
                                          $props.subscription &&
                                          !currentItem.smsActive
                                        )
                                          return "alert";
                                        else
                                          return currentItem.type
                                            .toLowerCase()
                                            .includes("birthday")
                                            ? "birthday"
                                            : "";
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__u5Wa
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Townhall Meeting";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uZeO4
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.date_shamsi;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame17"}
                          data-plasmic-override={overrides.frame17}
                          className={classNames(projectcss.all, sty.frame17)}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.countdown2
                              ),
                              color: (() => {
                                try {
                                  return (() => {
                                    var targetDate = new Date(
                                      currentItem.date_greg
                                    );
                                    var nowDate = new Date();
                                    var diffMs =
                                      targetDate.getTime() - nowDate.getTime();
                                    var diffDays = Math.floor(
                                      diffMs / (1000 * 60 * 60 * 24)
                                    );
                                    if (diffDays >= 0 && diffDays < 7) {
                                      return "red";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })(),
                              date: "moanth",
                              normal: true,
                              onRemainingSecondsChange2: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangeProp($state, [
                                  "countdown2",
                                  __plasmic_idx_0,
                                  "remainingSeconds"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              },
                              remainingSeconds: generateStateValueProp($state, [
                                "countdown2",
                                __plasmic_idx_0,
                                "remainingSeconds"
                              ])
                            };

                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "countdown2[].remainingSeconds",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return (() => {
                                          var targetDate = new Date(
                                            currentItem.date_greg
                                          );
                                          var nowDate = new Date();
                                          var diffMs =
                                            targetDate.getTime() -
                                            nowDate.getTime();
                                          var diffSeconds = Math.floor(
                                            diffMs / 1000
                                          );
                                          return diffSeconds;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return 28339675.211;
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <Countdown
                                data-plasmic-name={"countdown2"}
                                data-plasmic-override={overrides.countdown2}
                                {...child$Props}
                              />
                            );
                          })()}
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame18"}
                      data-plasmic-override={overrides.frame18}
                      className={classNames(projectcss.all, sty.frame18)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7XmAl
                        )}
                      >
                        {(() => {
                          try {
                            return currentItem.type != "Occasion";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                          ? (() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.button2
                                ),
                                color: generateStateValueProp($state, [
                                  "button2",
                                  __plasmic_idx_0,
                                  "color"
                                ]),
                                load: generateStateValueProp($state, [
                                  "button2",
                                  __plasmic_idx_0,
                                  "load"
                                ]),
                                loading: generateStateValueProp($state, [
                                  "button2",
                                  __plasmic_idx_0,
                                  "loading"
                                ]),
                                onClick: async event => {
                                  const $steps = {};

                                  $steps["updateSelect2"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["select2"]
                                          },
                                          operation: 0,
                                          value: currentItem
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateSelect2"] != null &&
                                    typeof $steps["updateSelect2"] ===
                                      "object" &&
                                    typeof $steps["updateSelect2"].then ===
                                      "function"
                                  ) {
                                    $steps["updateSelect2"] = await $steps[
                                      "updateSelect2"
                                    ];
                                  }

                                  $steps["updateDate"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["date"]
                                          },
                                          operation: 0,
                                          value: {
                                            f: currentItem.date_shamsi,
                                            g: currentItem.date_greg
                                          }
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateDate"] != null &&
                                    typeof $steps["updateDate"] === "object" &&
                                    typeof $steps["updateDate"].then ===
                                      "function"
                                  ) {
                                    $steps["updateDate"] = await $steps[
                                      "updateDate"
                                    ];
                                  }

                                  $steps["updateDialogOpendialog"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "dialog",
                                              "opendialog"
                                            ]
                                          },
                                          operation: 4
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          const oldValue = $stateGet(
                                            objRoot,
                                            variablePath
                                          );
                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            !oldValue
                                          );
                                          return !oldValue;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateDialogOpendialog"] != null &&
                                    typeof $steps["updateDialogOpendialog"] ===
                                      "object" &&
                                    typeof $steps["updateDialogOpendialog"]
                                      .then === "function"
                                  ) {
                                    $steps["updateDialogOpendialog"] =
                                      await $steps["updateDialogOpendialog"];
                                  }
                                },
                                onColorChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "button2",
                                      __plasmic_idx_0,
                                      "color"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                },
                                onLoadChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "button2",
                                      __plasmic_idx_0,
                                      "load"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                },
                                onLoadingChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "button2",
                                      __plasmic_idx_0,
                                      "loading"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                },
                                shape: "rounded",
                                size: "minimal"
                              };

                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "button2[].color",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  },
                                  {
                                    name: "button2[].loading",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  },
                                  {
                                    name: "button2[].load",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      false
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <Button
                                  data-plasmic-name={"button2"}
                                  data-plasmic-override={overrides.button2}
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wyutS
                                    )}
                                  >
                                    {"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
                                  </div>
                                </Button>
                              );
                            })()
                          : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__i0HbK,
                          (() => {
                            try {
                              return $props.subscription &&
                                !currentItem.smsActive
                                ? "bounce-yellow"
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            arrow: true,
                            className: classNames(
                              "__wab_instance",
                              sty.popover
                            ),
                            content: (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__d58My
                                )}
                              >
                                {
                                  "\u0628\u0627 \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0627\u06cc\u0646 \u06af\u0632\u06cc\u0646\u0647\u060c \u062f\u06cc\u06af\u0647 \u0647\u06cc\u0686 \u0645\u0646\u0627\u0633\u0628\u062a\u06cc  \u0631\u0648 \u0627\u0632 \u062f\u0633\u062a \u0646\u0645\u06cc\u200c\u062f\u06cc\u061b \u0647\u0645 \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645 \u0648 \u0647\u0645 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0628\u0631\u0627\u062a \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u200c\u0634\u0647."
                                }
                              </div>
                            ),
                            contentText: "Popover contents",
                            defaultOpen: false,
                            defaultStylesClassName: classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              styleTokensClassNames,
                              styleTokensClassNames_antd_5_hostless,
                              styleTokensClassNames_plasmic_rich_components
                            ),
                            mouseEnterDelay: 0,
                            mouseLeaveDelay: 0,
                            onOpenChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "popover",
                                __plasmic_idx_0,
                                "open"
                              ]).apply(null, eventArgs);
                            },
                            open: generateStateValueProp($state, [
                              "popover",
                              __plasmic_idx_0,
                              "open"
                            ]),
                            overlayClassName: classNames({
                              [sty["pcls_prLt4wJFgNow"]]: true
                            }),
                            placement: "bottom",
                            popoverContentClassName: classNames({
                              [sty["pcls_MsckSNXawv6n"]]: true
                            }),
                            popoverScopeClassName: sty["popover__popover"],
                            title: null,
                            trigger: "click"
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "open",
                                plasmicStateName: "popover[].open"
                              }
                            ],
                            [__plasmic_idx_0],
                            undefined ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "popover[].open",
                                initFunc: ({ $props, $state, $queries }) =>
                                  false
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <AntdPopover
                              data-plasmic-name={"popover"}
                              data-plasmic-override={overrides.popover}
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__pPRl
                                )}
                              >
                                <InfoIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__w9Poc
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__mkbme
                                  )}
                                >
                                  {
                                    "\u0627\u0631\u0633\u0627\u0644 \u06cc\u0627\u062f\u0622\u0648\u0631"
                                  }
                                </div>
                              </div>
                            </AntdPopover>
                          );
                        })()}
                        {(() => {
                          const child$Props = {
                            children: null,
                            className: classNames(
                              "__wab_instance",
                              sty.switchbest2
                            ),
                            isChecked:
                              generateStateValueProp($state, [
                                "switchbest2",
                                __plasmic_idx_0,
                                "isChecked"
                              ]) ?? false,
                            onChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "switchbest2",
                                  __plasmic_idx_0,
                                  "isChecked"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }

                              (async isChecked => {
                                const $steps = {};

                                $steps["runShop"] = !$props.subscription
                                  ? (() => {
                                      const actionArgs = {
                                        eventRef: $props["shop"]
                                      };
                                      return (({ eventRef, args }) => {
                                        return eventRef?.(...(args ?? []));
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runShop"] != null &&
                                  typeof $steps["runShop"] === "object" &&
                                  typeof $steps["runShop"].then === "function"
                                ) {
                                  $steps["runShop"] = await $steps["runShop"];
                                }

                                $steps["runCode"] = !$props.subscription
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return ($state.switchbest2[
                                            currentIndex
                                          ].isChecked = false);
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["update"] = $props.subscription
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://n8n.staas.ir/webhook/hamyar/reminder/smsactive",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                id: currentItem.id,
                                                man_id: $props.manId,
                                                smsActive: $state.switchbest2[
                                                  currentIndex
                                                ].isChecked
                                                  ? 1
                                                  : 0
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["update"] != null &&
                                  typeof $steps["update"] === "object" &&
                                  typeof $steps["update"].then === "function"
                                ) {
                                  $steps["update"] = await $steps["update"];
                                }
                              }).apply(null, eventArgs);
                            }
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "switchbest2[].isChecked",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return (
                                        $props.subscription &&
                                        currentItem.smsActive
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Switchbest
                              data-plasmic-name={"switchbest2"}
                              data-plasmic-override={overrides.switchbest2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
          <Button
            data-plasmic-name={"button3"}
            data-plasmic-override={overrides.button3}
            className={classNames("__wab_instance", sty.button3)}
            color={generateStateValueProp($state, ["button3", "color"])}
            load={generateStateValueProp($state, ["button3", "load"])}
            loading={generateStateValueProp($state, ["button3", "loading"])}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.select2 = {};
                          return ($state.date = {});
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateDialogOpendialog"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog", "opendialog"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDialogOpendialog"] != null &&
                typeof $steps["updateDialogOpendialog"] === "object" &&
                typeof $steps["updateDialogOpendialog"].then === "function"
              ) {
                $steps["updateDialogOpendialog"] = await $steps[
                  "updateDialogOpendialog"
                ];
              }
            }}
            onColorChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button3", "color"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onLoadChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button3", "load"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onLoadingChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button3", "loading"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            {
              "\u0627\u0641\u0632\u0648\u062f\u0646 \u0631\u0648\u06cc\u062f\u0627\u062f"
            }
          </Button>
        </div>
        <div
          data-plasmic-name={"todayMeeting"}
          data-plasmic-override={overrides.todayMeeting}
          className={classNames(projectcss.all, sty.todayMeeting)}
        >
          <div
            data-plasmic-name={"frame"}
            data-plasmic-override={overrides.frame}
            className={classNames(projectcss.all, sty.frame)}
          >
            <div
              data-plasmic-name={"frame2"}
              data-plasmic-override={overrides.frame2}
              className={classNames(projectcss.all, sty.frame2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lbIiv
                )}
              >
                {
                  "\u0645\u0646\u0627\u0633\u0628\u062a \u0647\u0627\u06cc \u062a\u0642\u0648\u06cc\u0645"
                }
              </div>
            </div>
          </div>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.data.filter(i => i.type == "Occasion");
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                data-plasmic-name={"frame19"}
                data-plasmic-override={overrides.frame19}
                className={classNames(projectcss.all, sty.frame19)}
                key={currentIndex}
              >
                <div
                  data-plasmic-name={"frame20"}
                  data-plasmic-override={overrides.frame20}
                  className={classNames(projectcss.all, sty.frame20)}
                >
                  <div
                    data-plasmic-name={"frame21"}
                    data-plasmic-override={overrides.frame21}
                    className={classNames(projectcss.all, sty.frame21)}
                  >
                    <div
                      data-plasmic-name={"frame22"}
                      data-plasmic-override={overrides.frame22}
                      className={classNames(projectcss.all, sty.frame22)}
                    >
                      <div
                        data-plasmic-name={"frame23"}
                        data-plasmic-override={overrides.frame23}
                        className={classNames(projectcss.all, sty.frame23)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__glafg
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___9WLwx
                            )}
                          >
                            <div
                              data-plasmic-name={"group6"}
                              data-plasmic-override={overrides.group6}
                              className={classNames(projectcss.all, sty.group6)}
                            >
                              <div
                                data-plasmic-name={"group7"}
                                data-plasmic-override={overrides.group7}
                                className={classNames(
                                  projectcss.all,
                                  sty.group7
                                )}
                                style={(() => {
                                  try {
                                    return {
                                      background:
                                        $props.subscription &&
                                        !currentItem.smsActive
                                          ? "#FAAD14"
                                          : ""
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <MenuIcon
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuIcon__pgJwo
                                  )}
                                  icons={(() => {
                                    try {
                                      return (() => {
                                        if (
                                          $props.subscription &&
                                          !currentItem.smsActive
                                        )
                                          return "alert";
                                        else
                                          return currentItem.type
                                            .toLowerCase()
                                            .includes("birthday")
                                            ? "birthday"
                                            : currentItem.type.toLocaleLowerCase();
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__slQH
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Townhall Meeting";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eBhr
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.date_shamsi;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame24"}
                          data-plasmic-override={overrides.frame24}
                          className={classNames(projectcss.all, sty.frame24)}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.countdown3
                              ),
                              color: (() => {
                                try {
                                  return (() => {
                                    var targetDate = new Date(
                                      currentItem.date_greg
                                    );
                                    var nowDate = new Date();
                                    var diffMs =
                                      targetDate.getTime() - nowDate.getTime();
                                    var diffDays = Math.floor(
                                      diffMs / (1000 * 60 * 60 * 24)
                                    );
                                    if (diffDays >= 0 && diffDays < 7) {
                                      return "red";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })(),
                              date: "moanth",
                              normal: true,
                              onRemainingSecondsChange2: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangeProp($state, [
                                  "countdown3",
                                  __plasmic_idx_0,
                                  "remainingSeconds"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              },
                              remainingSeconds: generateStateValueProp($state, [
                                "countdown3",
                                __plasmic_idx_0,
                                "remainingSeconds"
                              ])
                            };

                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "countdown3[].remainingSeconds",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return (() => {
                                          var targetDate = new Date(
                                            currentItem.date_greg
                                          );
                                          var nowDate = new Date();
                                          var diffMs =
                                            targetDate.getTime() -
                                            nowDate.getTime();
                                          var diffSeconds = Math.floor(
                                            diffMs / 1000
                                          );
                                          return diffSeconds;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return 28339675.211;
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <Countdown
                                data-plasmic-name={"countdown3"}
                                data-plasmic-override={overrides.countdown3}
                                {...child$Props}
                              />
                            );
                          })()}
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame25"}
                      data-plasmic-override={overrides.frame25}
                      className={classNames(projectcss.all, sty.frame25)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9PwDv
                        )}
                      >
                        {(() => {
                          try {
                            return currentItem.type != "Occasion";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                          ? (() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.button6
                                ),
                                color: generateStateValueProp($state, [
                                  "button6",
                                  __plasmic_idx_0,
                                  "color"
                                ]),
                                load: generateStateValueProp($state, [
                                  "button6",
                                  __plasmic_idx_0,
                                  "load"
                                ]),
                                loading: generateStateValueProp($state, [
                                  "button6",
                                  __plasmic_idx_0,
                                  "loading"
                                ]),
                                onClick: async event => {
                                  const $steps = {};

                                  $steps["updateSelect2"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["select2"]
                                          },
                                          operation: 0,
                                          value: currentItem
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateSelect2"] != null &&
                                    typeof $steps["updateSelect2"] ===
                                      "object" &&
                                    typeof $steps["updateSelect2"].then ===
                                      "function"
                                  ) {
                                    $steps["updateSelect2"] = await $steps[
                                      "updateSelect2"
                                    ];
                                  }

                                  $steps["updateDate"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["date"]
                                          },
                                          operation: 0,
                                          value: {
                                            f: currentItem.date_shamsi,
                                            g: currentItem.date_greg
                                          }
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateDate"] != null &&
                                    typeof $steps["updateDate"] === "object" &&
                                    typeof $steps["updateDate"].then ===
                                      "function"
                                  ) {
                                    $steps["updateDate"] = await $steps[
                                      "updateDate"
                                    ];
                                  }

                                  $steps["updateDialogOpendialog"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "dialog",
                                              "opendialog"
                                            ]
                                          },
                                          operation: 4
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          const oldValue = $stateGet(
                                            objRoot,
                                            variablePath
                                          );
                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            !oldValue
                                          );
                                          return !oldValue;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateDialogOpendialog"] != null &&
                                    typeof $steps["updateDialogOpendialog"] ===
                                      "object" &&
                                    typeof $steps["updateDialogOpendialog"]
                                      .then === "function"
                                  ) {
                                    $steps["updateDialogOpendialog"] =
                                      await $steps["updateDialogOpendialog"];
                                  }
                                },
                                onColorChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "button6",
                                      __plasmic_idx_0,
                                      "color"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                },
                                onLoadChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "button6",
                                      __plasmic_idx_0,
                                      "load"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                },
                                onLoadingChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "button6",
                                      __plasmic_idx_0,
                                      "loading"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                },
                                shape: "rounded",
                                size: "minimal"
                              };

                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "button6[].color",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  },
                                  {
                                    name: "button6[].loading",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  },
                                  {
                                    name: "button6[].load",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      false
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <Button
                                  data-plasmic-name={"button6"}
                                  data-plasmic-override={overrides.button6}
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__dJOc1
                                    )}
                                  >
                                    {"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
                                  </div>
                                </Button>
                              );
                            })()
                          : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rvlK4,
                          (() => {
                            try {
                              return $props.subscription &&
                                !currentItem.smsActive
                                ? "bounce-yellow"
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            arrow: true,
                            className: classNames(
                              "__wab_instance",
                              sty.popover2
                            ),
                            content: (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qe7Ei
                                )}
                              >
                                {
                                  "\u0628\u0627 \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0627\u06cc\u0646 \u06af\u0632\u06cc\u0646\u0647\u060c \u062f\u06cc\u06af\u0647 \u0647\u06cc\u0686 \u0645\u0646\u0627\u0633\u0628\u062a\u06cc  \u0631\u0648 \u0627\u0632 \u062f\u0633\u062a \u0646\u0645\u06cc\u200c\u062f\u06cc\u061b \u0647\u0645 \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645 \u0648 \u0647\u0645 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0628\u0631\u0627\u062a \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u200c\u0634\u0647."
                                }
                              </div>
                            ),
                            contentText: "Popover contents",
                            defaultOpen: false,
                            defaultStylesClassName: classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              styleTokensClassNames,
                              styleTokensClassNames_antd_5_hostless,
                              styleTokensClassNames_plasmic_rich_components
                            ),
                            mouseEnterDelay: 0,
                            mouseLeaveDelay: 0,
                            onOpenChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "popover2",
                                __plasmic_idx_0,
                                "open"
                              ]).apply(null, eventArgs);
                            },
                            open: generateStateValueProp($state, [
                              "popover2",
                              __plasmic_idx_0,
                              "open"
                            ]),
                            overlayClassName: classNames({
                              [sty["pcls_8kHyAFUqFcFV"]]: true
                            }),
                            placement: "bottom",
                            popoverContentClassName: classNames({
                              [sty["pcls_ZRvGNYd2A3_M"]]: true
                            }),
                            popoverScopeClassName: sty["popover2__popover"],
                            title: null,
                            trigger: "click"
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "open",
                                plasmicStateName: "popover2[].open"
                              }
                            ],
                            [__plasmic_idx_0],
                            undefined ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "popover2[].open",
                                initFunc: ({ $props, $state, $queries }) =>
                                  false
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <AntdPopover
                              data-plasmic-name={"popover2"}
                              data-plasmic-override={overrides.popover2}
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__p7KF
                                )}
                              >
                                <InfoIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__smxx2
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__bnGgz
                                  )}
                                >
                                  {
                                    "\u0627\u0631\u0633\u0627\u0644 \u06cc\u0627\u062f\u0622\u0648\u0631"
                                  }
                                </div>
                              </div>
                            </AntdPopover>
                          );
                        })()}
                        {(() => {
                          const child$Props = {
                            children: null,
                            className: classNames(
                              "__wab_instance",
                              sty.switchbest4
                            ),
                            isChecked:
                              generateStateValueProp($state, [
                                "switchbest4",
                                __plasmic_idx_0,
                                "isChecked"
                              ]) ?? false,
                            isDisabled: (() => {
                              try {
                                return !$props.subscription;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })(),
                            onChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "switchbest4",
                                  __plasmic_idx_0,
                                  "isChecked"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }

                              (async isChecked => {
                                const $steps = {};

                                $steps["update"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://n8n.staas.ir/webhook/hamyar/reminder/smsactive",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                id: currentItem.id,
                                                man_id: $props.manId,
                                                smsActive: $state.switchbest2[
                                                  currentIndex
                                                ].isChecked
                                                  ? 1
                                                  : 0
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["update"] != null &&
                                  typeof $steps["update"] === "object" &&
                                  typeof $steps["update"].then === "function"
                                ) {
                                  $steps["update"] = await $steps["update"];
                                }
                              }).apply(null, eventArgs);
                            }
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "switchbest4[].isChecked",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return (
                                        $props.subscription &&
                                        currentItem.smsActive
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Switchbest
                              data-plasmic-name={"switchbest4"}
                              data-plasmic-override={overrides.switchbest4}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "headerLiom",
    "dialog",
    "input",
    "select",
    "switchbest3",
    "button5",
    "dialog2",
    "datePickers",
    "button4",
    "todayMeeting2",
    "frame10",
    "frame11",
    "frame12",
    "frame13",
    "frame14",
    "frame15",
    "frame16",
    "group4",
    "group5",
    "frame17",
    "countdown2",
    "frame18",
    "button2",
    "popover",
    "switchbest2",
    "button3",
    "todayMeeting",
    "frame",
    "frame2",
    "frame19",
    "frame20",
    "frame21",
    "frame22",
    "frame23",
    "group6",
    "group7",
    "frame24",
    "countdown3",
    "frame25",
    "button6",
    "popover2",
    "switchbest4"
  ],
  section: [
    "section",
    "headerLiom",
    "dialog",
    "input",
    "select",
    "switchbest3",
    "button5",
    "dialog2",
    "datePickers",
    "button4"
  ],
  headerLiom: ["headerLiom"],
  dialog: ["dialog", "input", "select", "switchbest3", "button5"],
  input: ["input"],
  select: ["select"],
  switchbest3: ["switchbest3"],
  button5: ["button5"],
  dialog2: ["dialog2", "datePickers", "button4"],
  datePickers: ["datePickers"],
  button4: ["button4"],
  todayMeeting2: [
    "todayMeeting2",
    "frame10",
    "frame11",
    "frame12",
    "frame13",
    "frame14",
    "frame15",
    "frame16",
    "group4",
    "group5",
    "frame17",
    "countdown2",
    "frame18",
    "button2",
    "popover",
    "switchbest2",
    "button3"
  ],
  frame10: ["frame10", "frame11"],
  frame11: ["frame11"],
  frame12: [
    "frame12",
    "frame13",
    "frame14",
    "frame15",
    "frame16",
    "group4",
    "group5",
    "frame17",
    "countdown2",
    "frame18",
    "button2",
    "popover",
    "switchbest2"
  ],
  frame13: [
    "frame13",
    "frame14",
    "frame15",
    "frame16",
    "group4",
    "group5",
    "frame17",
    "countdown2",
    "frame18",
    "button2",
    "popover",
    "switchbest2"
  ],
  frame14: [
    "frame14",
    "frame15",
    "frame16",
    "group4",
    "group5",
    "frame17",
    "countdown2",
    "frame18",
    "button2",
    "popover",
    "switchbest2"
  ],
  frame15: ["frame15", "frame16", "group4", "group5", "frame17", "countdown2"],
  frame16: ["frame16", "group4", "group5", "frame17", "countdown2"],
  group4: ["group4", "group5"],
  group5: ["group5"],
  frame17: ["frame17", "countdown2"],
  countdown2: ["countdown2"],
  frame18: ["frame18", "button2", "popover", "switchbest2"],
  button2: ["button2"],
  popover: ["popover"],
  switchbest2: ["switchbest2"],
  button3: ["button3"],
  todayMeeting: [
    "todayMeeting",
    "frame",
    "frame2",
    "frame19",
    "frame20",
    "frame21",
    "frame22",
    "frame23",
    "group6",
    "group7",
    "frame24",
    "countdown3",
    "frame25",
    "button6",
    "popover2",
    "switchbest4"
  ],
  frame: ["frame", "frame2"],
  frame2: ["frame2"],
  frame19: [
    "frame19",
    "frame20",
    "frame21",
    "frame22",
    "frame23",
    "group6",
    "group7",
    "frame24",
    "countdown3",
    "frame25",
    "button6",
    "popover2",
    "switchbest4"
  ],
  frame20: [
    "frame20",
    "frame21",
    "frame22",
    "frame23",
    "group6",
    "group7",
    "frame24",
    "countdown3",
    "frame25",
    "button6",
    "popover2",
    "switchbest4"
  ],
  frame21: [
    "frame21",
    "frame22",
    "frame23",
    "group6",
    "group7",
    "frame24",
    "countdown3",
    "frame25",
    "button6",
    "popover2",
    "switchbest4"
  ],
  frame22: ["frame22", "frame23", "group6", "group7", "frame24", "countdown3"],
  frame23: ["frame23", "group6", "group7", "frame24", "countdown3"],
  group6: ["group6", "group7"],
  group7: ["group7"],
  frame24: ["frame24", "countdown3"],
  countdown3: ["countdown3"],
  frame25: ["frame25", "button6", "popover2", "switchbest4"],
  button6: ["button6"],
  popover2: ["popover2"],
  switchbest4: ["switchbest4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  headerLiom: typeof HeaderLiom;
  dialog: typeof Dialog;
  input: typeof Input;
  select: typeof Select;
  switchbest3: typeof Switchbest;
  button5: typeof Button;
  dialog2: typeof Dialog;
  datePickers: typeof DatePickers;
  button4: typeof Button;
  todayMeeting2: "div";
  frame10: "div";
  frame11: "div";
  frame12: "div";
  frame13: "div";
  frame14: "div";
  frame15: "div";
  frame16: "div";
  group4: "div";
  group5: "div";
  frame17: "div";
  countdown2: typeof Countdown;
  frame18: "div";
  button2: typeof Button;
  popover: typeof AntdPopover;
  switchbest2: typeof Switchbest;
  button3: typeof Button;
  todayMeeting: "div";
  frame: "div";
  frame2: "div";
  frame19: "div";
  frame20: "div";
  frame21: "div";
  frame22: "div";
  frame23: "div";
  group6: "div";
  group7: "div";
  frame24: "div";
  countdown3: typeof Countdown;
  frame25: "div";
  button6: typeof Button;
  popover2: typeof AntdPopover;
  switchbest4: typeof Switchbest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReminder__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReminder__VariantsArgs;
    args?: PlasmicReminder__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReminder__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReminder__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReminder__ArgProps,
          internalVariantPropNames: PlasmicReminder__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReminder__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReminder";
  } else {
    func.displayName = `PlasmicReminder.${nodeName}`;
  }
  return func;
}

export const PlasmicReminder = Object.assign(
  // Top-level PlasmicReminder renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    headerLiom: makeNodeComponent("headerLiom"),
    dialog: makeNodeComponent("dialog"),
    input: makeNodeComponent("input"),
    select: makeNodeComponent("select"),
    switchbest3: makeNodeComponent("switchbest3"),
    button5: makeNodeComponent("button5"),
    dialog2: makeNodeComponent("dialog2"),
    datePickers: makeNodeComponent("datePickers"),
    button4: makeNodeComponent("button4"),
    todayMeeting2: makeNodeComponent("todayMeeting2"),
    frame10: makeNodeComponent("frame10"),
    frame11: makeNodeComponent("frame11"),
    frame12: makeNodeComponent("frame12"),
    frame13: makeNodeComponent("frame13"),
    frame14: makeNodeComponent("frame14"),
    frame15: makeNodeComponent("frame15"),
    frame16: makeNodeComponent("frame16"),
    group4: makeNodeComponent("group4"),
    group5: makeNodeComponent("group5"),
    frame17: makeNodeComponent("frame17"),
    countdown2: makeNodeComponent("countdown2"),
    frame18: makeNodeComponent("frame18"),
    button2: makeNodeComponent("button2"),
    popover: makeNodeComponent("popover"),
    switchbest2: makeNodeComponent("switchbest2"),
    button3: makeNodeComponent("button3"),
    todayMeeting: makeNodeComponent("todayMeeting"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    frame19: makeNodeComponent("frame19"),
    frame20: makeNodeComponent("frame20"),
    frame21: makeNodeComponent("frame21"),
    frame22: makeNodeComponent("frame22"),
    frame23: makeNodeComponent("frame23"),
    group6: makeNodeComponent("group6"),
    group7: makeNodeComponent("group7"),
    frame24: makeNodeComponent("frame24"),
    countdown3: makeNodeComponent("countdown3"),
    frame25: makeNodeComponent("frame25"),
    button6: makeNodeComponent("button6"),
    popover2: makeNodeComponent("popover2"),
    switchbest4: makeNodeComponent("switchbest4"),

    // Metadata about props expected for PlasmicReminder
    internalVariantProps: PlasmicReminder__VariantProps,
    internalArgProps: PlasmicReminder__ArgProps
  }
);

export default PlasmicReminder;
/* prettier-ignore-end */
