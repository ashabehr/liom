/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 3v9tn6uUJCPM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import { Input } from "@/fragment/components/input"; // plasmic-import: zZH7vV9pXyf8/codeComponent
import { Select } from "@/fragment/components/select"; // plasmic-import: 5Mch6ak-Pshg/codeComponent
import Switchbest from "../../Switchbest"; // plasmic-import: ofUp1AS5glz5/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { DatePickers } from "@/components/DatePickers"; // plasmic-import: Pxh5xTWczGDl/codeComponent
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import MenuIcon from "../../MenuIcon"; // plasmic-import: JBF-V8Q5mpWl/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";
import ReminderSetting from "../../ReminderSetting"; // plasmic-import: VZcPBQBUFNbT/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicReminder.module.css"; // plasmic-import: 3v9tn6uUJCPM/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: Wm-tjDMQJVfn/icon
import Icon270Icon from "./icons/PlasmicIcon__Icon270"; // plasmic-import: Y171g_Z8ZZ84/icon
import Oval3Icon from "./icons/PlasmicIcon__Oval3"; // plasmic-import: lOJpmSR7qOUd/icon
import Icon295Icon from "./icons/PlasmicIcon__Icon295"; // plasmic-import: SfM64OkCrE9j/icon
import Icon322Icon from "./icons/PlasmicIcon__Icon322"; // plasmic-import: YXpo7oAohDig/icon
import Icon291Icon from "./icons/PlasmicIcon__Icon291"; // plasmic-import: U9F0Jow4owN9/icon
import Icon349Icon from "./icons/PlasmicIcon__Icon349"; // plasmic-import: EddWTnUv3Qwo/icon
import Icon50Icon from "./icons/PlasmicIcon__Icon50"; // plasmic-import: OWul-aq2fF6T/icon

createPlasmicElementProxy;

export type PlasmicReminder__VariantMembers = {
  slide3: "slide3";
  hamyar: "hamyar";
};
export type PlasmicReminder__VariantsArgs = {
  slide3?: SingleBooleanChoiceArg<"slide3">;
  hamyar?: SingleBooleanChoiceArg<"hamyar">;
};
type VariantPropType = keyof PlasmicReminder__VariantsArgs;
export const PlasmicReminder__VariantProps = new Array<VariantPropType>(
  "slide3",
  "hamyar"
);

export type PlasmicReminder__ArgsType = {
  data?: any;
  manId?: string;
  subscription?: boolean;
  refresh?: string;
  onRefreshChange?: (val: string) => void;
  shop?: () => void;
  back?: () => void;
  setting?: () => void;
  telegram?: boolean;
  activeSmsNotif?: boolean;
  token?: string;
  telegramId?: string;
  phone?: string;
  sms?: boolean;
  onSmsChange?: (val: string) => void;
  tel?: boolean;
  onTelChange?: (val: string) => void;
  onSlide3Change?: (val: any) => void;
  ferst?: boolean;
  first?: boolean;
  onFirstChange?: (val: string) => void;
  reminderSettingReminderCategory2Data?: any;
  onReminderSettingReminderCategory2DataChange?: (val: any) => void;
};
type ArgPropType = keyof PlasmicReminder__ArgsType;
export const PlasmicReminder__ArgProps = new Array<ArgPropType>(
  "data",
  "manId",
  "subscription",
  "refresh",
  "onRefreshChange",
  "shop",
  "back",
  "setting",
  "telegram",
  "activeSmsNotif",
  "token",
  "telegramId",
  "phone",
  "sms",
  "onSmsChange",
  "tel",
  "onTelChange",
  "onSlide3Change",
  "ferst",
  "first",
  "onFirstChange",
  "reminderSettingReminderCategory2Data",
  "onReminderSettingReminderCategory2DataChange"
);

export type PlasmicReminder__OverridesType = {
  root?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  input?: Flex__<typeof Input>;
  select?: Flex__<typeof Select>;
  switchbest3?: Flex__<typeof Switchbest>;
  button5?: Flex__<typeof Button>;
  dialog2?: Flex__<typeof Dialog>;
  datePickers?: Flex__<typeof DatePickers>;
  button4?: Flex__<typeof Button>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  button2?: Flex__<typeof Button>;
  todayMeeting2?: Flex__<"div">;
  frame22?: Flex__<"div">;
  frame23?: Flex__<"div">;
  frame24?: Flex__<"div">;
  frame25?: Flex__<"div">;
  frame26?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  frame32?: Flex__<"div">;
  menuIcon?: Flex__<typeof MenuIcon>;
  frame33?: Flex__<"div">;
  frame34?: Flex__<"div">;
  frame35?: Flex__<"div">;
  frame36?: Flex__<"div">;
  lottie?: Flex__<typeof LottieWrapper>;
  button3?: Flex__<typeof Button>;
  button9?: Flex__<typeof Button>;
  tooltip?: Flex__<typeof AntdTooltip>;
  button10?: Flex__<typeof Button>;
  reminderSetting?: Flex__<typeof ReminderSetting>;
};

export interface DefaultReminderProps {
  data?: any;
  manId?: string;
  subscription?: boolean;
  refresh?: string;
  onRefreshChange?: (val: string) => void;
  shop?: () => void;
  back?: () => void;
  setting?: () => void;
  telegram?: boolean;
  activeSmsNotif?: boolean;
  token?: string;
  telegramId?: string;
  phone?: string;
  sms?: boolean;
  onSmsChange?: (val: string) => void;
  tel?: boolean;
  onTelChange?: (val: string) => void;
  onSlide3Change?: (val: any) => void;
  ferst?: boolean;
  first?: boolean;
  onFirstChange?: (val: string) => void;
  reminderSettingReminderCategory2Data?: any;
  onReminderSettingReminderCategory2DataChange?: (val: any) => void;
  slide3?: SingleBooleanChoiceArg<"slide3">;
  hamyar?: SingleBooleanChoiceArg<"hamyar">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReminder__RenderFunc(props: {
  variants: PlasmicReminder__VariantsArgs;
  args: PlasmicReminder__ArgsType;
  overrides: PlasmicReminder__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: [
            {
              id: 243,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: null,
              schedule_type: "everyDay",
              type: null,
              name: "\u0646\u0648\u0634\u06cc\u062f\u0646 \u0622\u0628",
              text: "drinkWater",
              token1: null,
              dates: null,
              weekdays:
                '["sunday","monday","tuesday","wednesday","thursday","friday","saturday"]',
              times:
                '["08:00","10:00","12:00","15:20","18:00","22:00","00:30"]',
              finishTime: "2026-08-27 00:00:00",
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 255,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: null,
              schedule_type: "everyYear",
              type: null,
              name: "\u062a\u0648\u0644\u062f \u0641\u0631\u0632\u0646\u062f",
              text: "birthdayBoyChild",
              token1: null,
              dates: '["2025-11-19","2026-06-24"]',
              weekdays:
                '["sunday","monday","tuesday","wednesday","friday","saturday"]',
              times: '["10:00"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 256,
              liomId: "1",
              telegramId: "573538820",
              phoneNumber: "",
              schedule_type: "everyDay",
              type: null,
              name: "\u0642\u0631\u0635 \u0645\u0641\u0646\u0627\u0646\u06cc\u06a9 \u0627\u0633\u06cc\u062f",
              text: "pill",
              token1: null,
              dates: null,
              weekdays:
                '["sunday","monday","tuesday","wednesday","thursday","friday","saturday"]',
              times: '["10:00","18:00","02:00"]',
              finishTime: "2025-09-30 23:59:59",
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 257,
              liomId: "1",
              telegramId: "33263188",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u062a\u0648\u0644\u062f \u062d\u0644\u0645\u0627",
              text: "birthday",
              token1: null,
              dates: '["2026-03-29"]',
              weekdays:
                '["sunday","monday","tuesday","wednesday","friday","saturday"]',
              times: '["10:00"]',
              finishTime: "2026-12-11 23:59:02",
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 258,
              liomId: "1",
              telegramId: "33263188",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0631\u0648\u0632 \u0645\u0627\u062f\u0631 ",
              text: "motherAndWifeDayIran",
              token1: null,
              dates: '["2025-12-11"]',
              weekdays:
                '["sunday","monday","tuesday","wednesday","friday","saturday"]',
              times: '["10:00"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 259,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "09154807701",
              schedule_type: "everyDay",
              type: null,
              name: "\u0631\u0648\u062a\u06cc\u0646 \u067e\u0648\u0633\u062a ",
              text: "routineSkinMorning",
              token1: null,
              dates: null,
              weekdays:
                '["sunday","monday","tuesday","wednesday","thursday","friday","saturday"]',
              times: '["10:07"]',
              finishTime: null,
              chanels: '["notification","telegram","sms"]',
              active: 1
            },
            {
              id: 260,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "09154807701",
              schedule_type: "everyDay",
              type: null,
              name: "\u0646\u0648\u0634\u06cc\u062f\u0646 \u0622\u0628 ",
              text: "drinkWater",
              token1: null,
              dates: null,
              weekdays:
                '["sunday","monday","tuesday","wednesday","thursday","friday","saturday"]',
              times: '["08:00","10:00","11:46","22:00","00:30"]',
              finishTime: null,
              chanels: '["notification","telegram","sms"]',
              active: 0
            },
            {
              id: 279,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0631\u0648\u0632  \u062c\u0647\u0627\u0646\u06cc \u0632\u0646",
              text: "occasion",
              token1: null,
              dates: '["2026-03-08"]',
              weekdays: null,
              times: '["09:00"]',
              finishTime: "2025-10-04 15:04:26",
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 358,
              liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
              telegramId: null,
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0648\u0644\u0646\u062a\u0627\u06cc\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642)",
              text: "occasion",
              token1: null,
              dates: '["2026-02-14"]',
              weekdays: null,
              times: '["09:00"]',
              finishTime: null,
              chanels: "{",
              active: 1
            },
            {
              id: 359,
              liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
              telegramId: null,
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
              text: "occasion",
              token1: null,
              dates: '["2026-02-18"]',
              weekdays: null,
              times: '["09:00"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 360,
              liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
              telegramId: null,
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
              text: "occasion",
              token1: null,
              dates: '["2026-02-18"]',
              weekdays: null,
              times: '["09:00"]',
              finishTime: null,
              chanels: "{",
              active: 1
            },
            {
              id: 361,
              liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
              telegramId: null,
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
              text: "wedding_anniversary",
              token1: null,
              dates: '["2025-12-31"]',
              weekdays: null,
              times: '["10:00"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 365,
              liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
              telegramId: null,
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0631\u0648\u0632  \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631\u0627\u0646",
              text: "occasion",
              token1: null,
              dates: '["2026-10-11"]',
              weekdays: null,
              times: '["09:00"]',
              finishTime: null,
              chanels: "{",
              active: 1
            },
            {
              id: 491,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631",
              text: "occasion",
              token1: null,
              dates: '["2026-04-19"]',
              weekdays: null,
              times: '["10:00"]',
              finishTime: null,
              chanels: '["notification"]',
              active: 1
            },
            {
              id: 492,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0631\u0648\u0632 \u0648\u0644\u0646\u062a\u0627\u06cc\u0646",
              text: "occasion",
              token1: null,
              dates: '["2026-02-14"]',
              weekdays: null,
              times: '["10:00"]',
              finishTime: null,
              chanels: '["notification"]',
              active: 1
            },
            {
              id: 500,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: "wedding_anniversary",
              name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
              text: "wedding_anniversary",
              token1: null,
              dates: '["2026-01-01"]',
              weekdays: null,
              times: "[]",
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 507,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: "religious_womens_day",
              name: "\u0631\u0648\u0632 \u0632\u0646 (\u0627\u0633\u0644\u0627\u0645\u06cc)",
              text: "occasion",
              token1: null,
              dates: '["2025-12-11"]',
              weekdays: null,
              times: '["09:30"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 508,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: "sepandarmazgan",
              name: "\u0631\u0648\u0632 \u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646",
              text: "occasion",
              token1: null,
              dates: '["2026-02-18"]',
              weekdays: null,
              times: "[]",
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 509,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyDay",
              type: "Water_time",
              name: "\u0646\u0648\u0634\u06cc\u062f\u0646 \u0622\u0628qq",
              text: "Water_time",
              token1: null,
              dates: null,
              weekdays: null,
              times: '["00:00","00:05"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 510,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyDay",
              type: "Water_time",
              name: "\u0646\u0648\u0634\u06cc\u062f\u0646 \u0622\u0628",
              text: "Water_time",
              token1: null,
              dates: null,
              weekdays: null,
              times: '["15:15"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 511,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyDay",
              type: "Water_time",
              name: "\u0646\u0648\u0634\u06cc\u062f\u0646 ddddd\u0622\u0628",
              text: "Water_time",
              token1: null,
              dates: null,
              weekdays: null,
              times: '["22:50","23:05"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 538,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyDay",
              type: "medicine_time",
              name: "\u0645\u0635\u0631\u0641 \u062f\u0627\u0631\u0648",
              text: "medicine_time",
              token1: null,
              dates: null,
              weekdays:
                '["sunday","monday","tuesday","wednesday","friday","saturday"]',
              times: '["09:30"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 511,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyDay",
              type: "Water_time",
              name: "\u0646\u0648\u0634\u06cc\u062f\u0646 ddddd\u0622\u0628",
              text: "Water_time",
              token1: null,
              dates: null,
              weekdays:
                '["sunday","monday","tuesday","wednesday","friday","saturday"]',
              times: '["22:50","23:05"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            }
          ],
          subscription: true,
          telegram: false,
          activeSmsNotif: false,
          ferst: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label: "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
            value: "SpouseBirthday"
          },
          {
            label:
              "\u0633\u0627\u0644\u06af\u0631\u062f \u0622\u0634\u0646\u0627\u06cc\u06cc",
            value: "MeetingAnniversary"
          },
          {
            label:
              "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
            value: "WeddingAnniversary"
          },
          {
            label: "\u062a\u0648\u0644\u062f \u0641\u0631\u0632\u0646\u062f",
            value: "ChildBirthday"
          },
          {
            label:
              "\u0631\u0648\u06cc\u062f\u0627\u062f \u0634\u062e\u0635\u06cc",
            value: "PersonalEvent"
          }
        ]
      },
      {
        path: "dialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.select2.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.select2.type;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "datePickers.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "date",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "switchbest3.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.select2.smsActive && $props.subscription;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "isChecked";
              }
              throw e;
            }
          })()
      },
      {
        path: "select2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "refresh",
        type: "writable",
        variableType: "text",

        valueProp: "refresh",
        onChangeProp: "onRefreshChange"
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "button2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderSetting.refresh",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "slide",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.localStorage.getItem("reminder_slide");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "button3.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button3.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderSetting.tel",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderSetting.sms",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sms",
        type: "writable",
        variableType: "boolean",

        valueProp: "sms",
        onChangeProp: "onSmsChange"
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "tel",
        type: "writable",
        variableType: "boolean",

        valueProp: "tel",
        onChangeProp: "onTelChange"
      },
      {
        path: "ofline",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            liomId: null,
            telegramId: null,
            phoneNumber: null,
            schedule_type: "everyYear",
            name: "\u0631\u0648\u0632  \u0632\u0646 \u0648 \u0645\u0627\u062f\u0631",
            text: "occasion",
            token1: null,
            dates: '["2025-12-11"]',
            weekdays: null,
            times: '["10:00"]',
            finishTime: null,
            active: 0,
            chanels: ["notification", "telegram"]
          },
          {
            liomId: null,
            telegramId: null,
            phoneNumber: null,
            schedule_type: "everyYear",
            name: "\u0631\u0648\u0632 \u062f\u062e\u062a\u0631",
            text: "occasion",
            token1: null,
            dates: '["2026-04-19"]',
            weekdays: null,
            times: '["10:00"]',
            finishTime: null,
            active: 0,
            chanels: ["notification", "telegram"]
          },
          {
            liomId: null,
            telegramId: null,
            phoneNumber: null,
            schedule_type: "everyYear",
            name: "\u0631\u0648\u0632  \u062c\u0647\u0627\u0646\u06cc \u0632\u0646",
            text: "occasion",
            token1: null,
            dates: '["2026-03-08"]',
            weekdays: null,
            times: '["10:00"]',
            finishTime: null,
            active: 0,
            chanels: ["notification", "telegram"]
          },
          {
            liomId: null,
            telegramId: null,
            phoneNumber: null,
            schedule_type: "everyYear",
            name: "\u0648\u0644\u0646\u062a\u0627\u06cc\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642)",
            text: "occasion",
            token1: null,
            dates: '["2026-02-14"]',
            weekdays: null,
            times: '["10:00"]',
            finishTime: null,
            active: 0,
            chanels: ["notification", "telegram"]
          },
          {
            liomId: null,
            telegramId: null,
            phoneNumber: null,
            schedule_type: "everyYear",
            name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
            text: "occasion",
            token1: null,
            dates: '["2026-02-18"]',
            weekdays: null,
            times: '["10:00"]',
            finishTime: null,
            active: 0,
            chanels: ["notification", "telegram"]
          },
          {
            liomId: null,
            telegramId: null,
            phoneNumber: null,
            schedule_type: "everyYear",
            name: "\u0631\u0648\u0632  \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631\u0627\u0646",
            text: "occasion",
            token1: null,
            dates: '["2026-10-11"]',
            weekdays: null,
            times: '["10:00"]',
            finishTime: null,
            active: 0,
            chanels: ["notification", "telegram"]
          },
          {
            liomId: null,
            telegramId: null,
            phoneNumber: null,
            schedule_type: "everyYear",
            name: "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631\u0645",
            text: "wife_birthday",
            token1: null,
            dates: null,
            weekdays: null,
            times: '["10:00"]',
            finishTime: null,
            active: 0,
            chanels: ["notification", "telegram"]
          },
          {
            liomId: null,
            telegramId: null,
            phoneNumber: null,
            schedule_type: "everyYear",
            name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
            text: "wedding_anniversary",
            token1: null,
            dates: null,
            weekdays: null,
            times: '["10:00"]',
            finishTime: null,
            active: 0,
            chanels: ["notification", "telegram"]
          },
          {
            liomId: null,
            telegramId: null,
            phoneNumber: null,
            schedule_type: "everyYear",
            name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0622\u0634\u0646\u0627\u06cc\u06cc",
            text: "relationship_anniversary",
            token1: null,
            dates: null,
            weekdays: null,
            times: '["10:00"]',
            finishTime: null,
            active: 0,
            chanels: ["notification", "telegram"]
          },
          {
            liomId: null,
            telegramId: null,
            phoneNumber: null,
            schedule_type: "everyYear",
            name: "\u062a\u0648\u0644\u062f \u0641\u0631\u0632\u0646\u062f",
            text: "birthday_child",
            token1: null,
            dates: null,
            weekdays: null,
            times: '["10:00"]',
            finishTime: null,
            active: 0,
            chanels: ["notification", "telegram"]
          }
        ]
      },
      {
        path: "slide3",
        type: "writable",
        variableType: "variant",

        valueProp: "slide3",
        onChangeProp: "onSlide3Change"
      },
      {
        path: "hamyar",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hamyar
      },
      {
        path: "first",
        type: "writable",
        variableType: "boolean",

        valueProp: "first",
        onChangeProp: "onFirstChange"
      },
      {
        path: "reminderSetting.refreshTime",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "reminderSetting.dialogOpendialog3",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "switchbest3.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "reminderSetting.reminderCategory2Data",
        type: "writable",
        variableType: "object",

        valueProp: "reminderSettingReminderCategory2Data",
        onChangeProp: "onReminderSettingReminderCategory2DataChange"
      },
      {
        path: "button9.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "gray"
      },
      {
        path: "button9.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button9.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button10.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "button10.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button10.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "reminderSetting.pageSelect",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.roothamyar]: hasVariant($state, "hamyar", "hamyar"),
          [sty.rootslide3]: hasVariant($state, "slide3", "slide3"),
          [sty.rootslide3_hamyar]:
            hasVariant($state, "hamyar", "hamyar") &&
            hasVariant($state, "slide3", "slide3")
        }
      )}
    >
      <section
        className={classNames(projectcss.all, sty.section__wVsy2, {
          [sty.sectionslide3__wVsy2WyFt]: hasVariant($state, "slide3", "slide3")
        })}
      >
        <Dialog
          data-plasmic-name={"dialog"}
          data-plasmic-override={overrides.dialog}
          className={classNames("__wab_instance", sty.dialog)}
          onOpendialogChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog", "opendialog"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          opendialog={generateStateValueProp($state, ["dialog", "opendialog"])}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ka3Jm)}>
            <div className={classNames(projectcss.all, sty.freeBox__y8LJx)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bijdP
                )}
              >
                {"\u0639\u0646\u0648\u0627\u0646 "}
              </div>
              <Input
                data-plasmic-name={"input"}
                data-plasmic-override={overrides.input}
                className={classNames("__wab_instance", sty.input)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["input", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                placeholder={
                  "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 \u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631\u0645"
                }
                type={"text"}
                value={generateStateValueProp($state, ["input", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__hK5R)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3JyFy
                )}
              >
                {"\u0646\u0648\u0639 "}
              </div>
              <Select
                data-plasmic-name={"select"}
                data-plasmic-override={overrides.select}
                disabled={(() => {
                  try {
                    return $state.select2.type;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["select", "open"])}
                options={(() => {
                  try {
                    return Object.keys($state.select2).length == 0
                      ? $state.type.filter(i => {
                          if (i.value === "ChildBirthday") {
                            const count = $props.data.filter(
                              a => a.type === i.value
                            ).length;
                            return count < 4;
                          } else {
                            return !$props.data.some(a => a.type === i.value);
                          }
                        })
                      : $state.type;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                placeholder={
                  "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 \u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c"
                }
                triggerClassName={classNames("__wab_instance", sty.select)}
                value={generateStateValueProp($state, ["select", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__sQJd)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2RWLw
                )}
              >
                {
                  "\u062a\u0627\u0631\u06cc\u062e \u0631\u0648\u06cc\u062f\u0627\u062f"
                }
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__ss7CV)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDialog2Opendialog"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog2", "opendialog"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialog2Opendialog"] != null &&
                    typeof $steps["updateDialog2Opendialog"] === "object" &&
                    typeof $steps["updateDialog2Opendialog"].then === "function"
                  ) {
                    $steps["updateDialog2Opendialog"] =
                      await $steps["updateDialog2Opendialog"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pdomG
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.date.f;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 1404/1/1";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__v4P1)}>
              <Switchbest
                data-plasmic-name={"switchbest3"}
                data-plasmic-override={overrides.switchbest3}
                className={classNames("__wab_instance", sty.switchbest3)}
                data={
                  generateStateValueProp($state, ["switchbest3", "data"]) ??
                  false
                }
                isChecked={
                  generateStateValueProp($state, [
                    "switchbest3",
                    "isChecked"
                  ]) ?? false
                }
                isDisabled={(() => {
                  try {
                    return !$props.subscription;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "switchbest3",
                      "isChecked"
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onDataChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["switchbest3", "data"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d1Zl
                  )}
                >
                  {
                    "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc  \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc  \u0628\u0647 \u0635\u0648\u0631\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0648 \u062a\u0644\u06af\u0631\u0627\u0645"
                  }
                </div>
              </Switchbest>
            </div>
            <Button
              data-plasmic-name={"button5"}
              data-plasmic-override={overrides.button5}
              className={classNames("__wab_instance", sty.button5)}
              color={generateStateValueProp($state, ["button5", "color"])}
              load={generateStateValueProp($state, ["button5", "load"])}
              loading={generateStateValueProp($state, ["button5", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateButton5Loading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["button5", "loading"]
                        },
                        operation: 4,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateButton5Loading"] != null &&
                  typeof $steps["updateButton5Loading"] === "object" &&
                  typeof $steps["updateButton5Loading"].then === "function"
                ) {
                  $steps["updateButton5Loading"] =
                    await $steps["updateButton5Loading"];
                }

                $steps["insert"] =
                  Object.keys($state.select2).length == 0
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "PUT",
                            "https://n8n.staas.ir/webhook/hamyar/reminder",
                            undefined,
                            (() => {
                              try {
                                return {
                                  man_id: $props.manId,
                                  name: $state.input.value,
                                  date_greg: $state.date.g,
                                  date_shamsi: $state.date.f,
                                  type: $state.select.value,
                                  smsActive: $state.switchbest3.isChecked
                                    ? 1
                                    : 0
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["insert"] != null &&
                  typeof $steps["insert"] === "object" &&
                  typeof $steps["insert"].then === "function"
                ) {
                  $steps["insert"] = await $steps["insert"];
                }

                $steps["update"] =
                  Object.keys($state.select2).length != 0
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://n8n.staas.ir/webhook/hamyar/reminder",
                            undefined,
                            (() => {
                              try {
                                return {
                                  id: $state.select2.id,
                                  man_id: $props.manId,
                                  name: $state.input.value,
                                  date_greg: $state.date.g,
                                  date_shamsi: $state.date.f,
                                  type: $state.select.value,
                                  smsActive: $state.switchbest3.isChecked
                                    ? 1
                                    : 0
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["update"] != null &&
                  typeof $steps["update"] === "object" &&
                  typeof $steps["update"].then === "function"
                ) {
                  $steps["update"] = await $steps["update"];
                }

                $steps["invokeGlobalAction2"] =
                  $steps.insert?.data?.success == true ||
                  $steps.update?.data?.success == true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                            "bottom-center",
                            2000
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["invokeGlobalAction2"] != null &&
                  typeof $steps["invokeGlobalAction2"] === "object" &&
                  typeof $steps["invokeGlobalAction2"].then === "function"
                ) {
                  $steps["invokeGlobalAction2"] =
                    await $steps["invokeGlobalAction2"];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.refresh += "1");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateButton5Load2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["button5", "loading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateButton5Load2"] != null &&
                  typeof $steps["updateButton5Load2"] === "object" &&
                  typeof $steps["updateButton5Load2"].then === "function"
                ) {
                  $steps["updateButton5Load2"] =
                    await $steps["updateButton5Load2"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button5", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button5", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button5", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__z7Tnh
                )}
              >
                {
                  "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0630\u062e\u06cc\u0631\u0647"
                }
              </div>
            </Button>
          </div>
        </Dialog>
        <Dialog
          data-plasmic-name={"dialog2"}
          data-plasmic-override={overrides.dialog2}
          className={classNames("__wab_instance", sty.dialog2)}
          onOpendialogChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog2", "opendialog"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          opendialog={generateStateValueProp($state, ["dialog2", "opendialog"])}
        >
          <div className={classNames(projectcss.all, sty.freeBox__pNTja)}>
            <DatePickers
              data-plasmic-name={"datePickers"}
              data-plasmic-override={overrides.datePickers}
              SelectedDay={10}
              SelectedMonth={10}
              SelectedYear={1379}
              className={classNames("__wab_instance", sty.datePickers)}
              customYears={[]}
              hideYear={false}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "datePickers",
                  "value"
                ]).apply(null, eventArgs);
              }}
              selectedValues={generateStateValueProp($state, [
                "datePickers",
                "value"
              ])}
            />

            <Button
              data-plasmic-name={"button4"}
              data-plasmic-override={overrides.button4}
              className={classNames("__wab_instance", sty.button4)}
              color={generateStateValueProp($state, ["button4", "color"])}
              load={generateStateValueProp($state, ["button4", "load"])}
              loading={generateStateValueProp($state, ["button4", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateDate"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["date"]
                        },
                        operation: 0,
                        value: (() => {
                          const { year, month, day, gregorian } =
                            $state.datePickers.value;
                          const f = `${year}/${month}/${day}`;
                          let gYear = new Date().getFullYear();
                          const gMonth = gregorian.month;
                          const gDay = gregorian.day;
                          let birthdayThisYear = new Date(
                            gYear,
                            gMonth - 1,
                            gDay
                          );
                          const today = new Date();
                          if (birthdayThisYear < today) {
                            gYear += 1;
                          }
                          const g = `${gYear}-${String(gMonth).padStart(2, "0")}-${String(gDay).padStart(2, "0")}`;
                          const result = {
                            f,
                            g
                          };
                          return result;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDate"] != null &&
                  typeof $steps["updateDate"] === "object" &&
                  typeof $steps["updateDate"].then === "function"
                ) {
                  $steps["updateDate"] = await $steps["updateDate"];
                }

                $steps["updateDialog2Opendialog"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dialog2", "opendialog"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialog2Opendialog"] != null &&
                  typeof $steps["updateDialog2Opendialog"] === "object" &&
                  typeof $steps["updateDialog2Opendialog"].then === "function"
                ) {
                  $steps["updateDialog2Opendialog"] =
                    await $steps["updateDialog2Opendialog"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button4", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button4", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button4", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bGhoM
                )}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </div>
            </Button>
          </div>
        </Dialog>
        <HeaderLiom
          data-plasmic-name={"headerLiom"}
          data-plasmic-override={overrides.headerLiom}
          className={classNames("__wab_instance", sty.headerLiom, {
            [sty.headerLiomhamyar]: hasVariant($state, "hamyar", "hamyar")
          })}
          slot={
            <Button
              data-plasmic-name={"button2"}
              data-plasmic-override={overrides.button2}
              className={classNames("__wab_instance", sty.button2, {
                [sty.button2slide3]: hasVariant($state, "slide3", "slide3")
              })}
              color={generateStateValueProp($state, ["button2", "color"])}
              endIcon={
                <Icon270Icon
                  className={classNames(projectcss.all, sty.svg__k7GJq)}
                  role={"img"}
                />
              }
              load={generateStateValueProp($state, ["button2", "load"])}
              loading={generateStateValueProp($state, ["button2", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["runSetting"] =
                  $props.data.length > 0
                    ? (() => {
                        const actionArgs = { eventRef: $props["setting"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["runSetting"] != null &&
                  typeof $steps["runSetting"] === "object" &&
                  typeof $steps["runSetting"].then === "function"
                ) {
                  $steps["runSetting"] = await $steps["runSetting"];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.refresh = +"1");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["runCode2"] =
                  $props.data.length == 0
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.reminderSetting.dialogOpendialog3 = true);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["runCode2"] != null &&
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button2", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button2", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button2", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              showEndIcon={true}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kiqd2
                )}
              >
                {
                  "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0648 \u062a\u0646\u0638\u06cc\u0645\u0627\u062a"
                }
              </div>
            </Button>
          }
        >
          <div className={classNames(projectcss.all, sty.freeBox__mFarw)}>
            <ChevronRightIcon
              className={classNames(projectcss.all, sty.svg__qTt4T, {
                [sty.svgslide3__qTt4TWyFt]: hasVariant(
                  $state,
                  "slide3",
                  "slide3"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateSlide3"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "slide3",
                        operation: 2,
                        value: "slide3"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSlide3"] != null &&
                  typeof $steps["updateSlide3"] === "object" &&
                  typeof $steps["updateSlide3"].then === "function"
                ) {
                  $steps["updateSlide3"] = await $steps["updateSlide3"];
                }
              }}
              role={"img"}
            />

            <ChevronRightIcon
              className={classNames(projectcss.all, sty.svg__vwOkj, {
                [sty.svgslide3__vwOkjWyFt]: hasVariant(
                  $state,
                  "slide3",
                  "slide3"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["runBack"] = true
                  ? (() => {
                      const actionArgs = { eventRef: $props["back"] };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runBack"] != null &&
                  typeof $steps["runBack"] === "object" &&
                  typeof $steps["runBack"].then === "function"
                ) {
                  $steps["runBack"] = await $steps["runBack"];
                }
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yuoPm
              )}
            >
              {"\u0631\u0648\u06cc\u062f\u0627\u062f \u0647\u0627"}
            </div>
          </div>
        </HeaderLiom>
      </section>
      <div
        className={classNames(projectcss.all, sty.freeBox__xMddU, {
          [sty.freeBoxhamyar__xMddUxX8Tw]: hasVariant(
            $state,
            "hamyar",
            "hamyar"
          ),
          [sty.freeBoxslide3__xMddUWyFt]: hasVariant($state, "slide3", "slide3")
        })}
      >
        {(() => {
          try {
            return (() => {
              const groupsMap = new Map();
              try {
                function getIranISODate() {
                  const nowIran = new Date(
                    new Date().toLocaleString("en-US", {
                      timeZone: "Asia/Tehran"
                    })
                  );
                  const year = nowIran.getFullYear();
                  const month = String(nowIran.getMonth() + 1).padStart(2, "0");
                  const day = String(nowIran.getDate()).padStart(2, "0");
                  return `${year}-${month}-${day}`;
                }
                const todayISO = getIranISODate();
                const today = new Date(todayISO);
                today.setHours(0, 0, 0, 0);
                $props.data.forEach(t => {
                  let parsedDates;
                  try {
                    parsedDates = t.dates ? JSON.parse(t.dates) : [];
                  } catch (e) {
                    parsedDates = [];
                  }
                  if (
                    t.schedule_type === "everyDay" ||
                    parsedDates.includes(todayISO)
                  ) {
                    return;
                  }
                  if (parsedDates.length === 0) {
                    const copy = {
                      ...t,
                      dates: [],
                      telegramId: $props.telegramId,
                      phoneNumber: $props.phoneNumber,
                      liomId: $props.manId
                    };
                    const key = "__noDate__";
                    if (!groupsMap.has(key)) groupsMap.set(key, []);
                    groupsMap.get(key).push(copy);
                  } else {
                    parsedDates.forEach(date => {
                      const dt = new Date(date);
                      dt.setHours(0, 0, 0, 0);
                      if (dt >= today) {
                        const copy = {
                          ...t,
                          dates: [date],
                          telegramId: $props.telegramId,
                          phoneNumber: $props.phoneNumber,
                          liomId: $props.manId
                        };
                        const key = date || "__noDate__";
                        if (!groupsMap.has(key)) groupsMap.set(key, []);
                        groupsMap.get(key).push(copy);
                      }
                    });
                  }
                });
                const groups = Array.from(groupsMap.entries())
                  .sort((a, b) => {
                    if (a[0] === "__noDate__") return -1;
                    if (b[0] === "__noDate__") return 1;
                    const dateA = new Date(a[0]);
                    const dateB = new Date(b[0]);
                    dateA.setHours(0, 0, 0, 0);
                    dateB.setHours(0, 0, 0, 0);
                    const timeA = dateA.getTime();
                    const timeB = dateB.getTime();
                    if (Number.isNaN(timeA)) return 1;
                    if (Number.isNaN(timeB)) return -1;
                    return timeA - timeB;
                  })
                  .map(entry => entry[1]);
                return groups.length > 0;
              } catch {
                return false;
              }
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox___8U23F)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kxln7
              )}
            >
              {
                "\u0631\u0648\u06cc\u062f\u0627\u062f \u0647\u0627\u06cc \u0645\u0647\u0645 \u067e\u06cc\u0634 \u0631\u0648"
              }
            </div>
            {(() => {
              try {
                return $props.data && $props.data?.length !== 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"todayMeeting2"}
                data-plasmic-override={overrides.todayMeeting2}
                className={classNames(projectcss.all, sty.todayMeeting2)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return (() => {
                        const groupsMap = new Map();
                        try {
                          function getIranISODate() {
                            const nowIran = new Date(
                              new Date().toLocaleString("en-US", {
                                timeZone: "Asia/Tehran"
                              })
                            );
                            const year = nowIran.getFullYear();
                            const month = String(
                              nowIran.getMonth() + 1
                            ).padStart(2, "0");
                            const day = String(nowIran.getDate()).padStart(
                              2,
                              "0"
                            );
                            return `${year}-${month}-${day}`;
                          }
                          const todayISO = getIranISODate();
                          const today = new Date(todayISO);
                          today.setHours(0, 0, 0, 0);
                          $props.data.forEach(t => {
                            if (t.active === 0) return;
                            let parsedDates;
                            try {
                              parsedDates = t.dates ? JSON.parse(t.dates) : [];
                            } catch {
                              parsedDates = [];
                            }
                            if (
                              t.schedule_type === "everyDay" ||
                              parsedDates.includes(todayISO)
                            )
                              return;
                            if (parsedDates.length === 0) {
                              const copy = {
                                ...t,
                                dates: [],
                                telegramId: $props.telegramId,
                                phoneNumber: $props.phoneNumber,
                                liomId: $props.manId
                              };
                              const key = "__noDate__";
                              if (!groupsMap.has(key)) groupsMap.set(key, []);
                              groupsMap.get(key).push(copy);
                            } else {
                              parsedDates.forEach(date => {
                                const dt = new Date(date);
                                dt.setHours(0, 0, 0, 0);
                                if (dt >= today) {
                                  const copy = {
                                    ...t,
                                    dates: [date],
                                    telegramId: $props.telegramId,
                                    phoneNumber: $props.phoneNumber,
                                    liomId: $props.manId
                                  };
                                  const key = date || "__noDate__";
                                  if (!groupsMap.has(key))
                                    groupsMap.set(key, []);
                                  groupsMap.get(key).push(copy);
                                }
                              });
                            }
                          });
                          const groupsEntries = Array.from(
                            groupsMap.entries()
                          ).sort((a, b) => {
                            if (a[0] === "__noDate__") return -1;
                            if (b[0] === "__noDate__") return 1;
                            const dateA = new Date(a[0]);
                            const dateB = new Date(b[0]);
                            dateA.setHours(0, 0, 0, 0);
                            dateB.setHours(0, 0, 0, 0);
                            const timeA = dateA.getTime();
                            const timeB = dateB.getTime();
                            if (Number.isNaN(timeA)) return 1;
                            if (Number.isNaN(timeB)) return -1;
                            return timeA - timeB;
                          });
                          const groups = [];
                          let lastPersianYear = null;
                          groupsEntries.forEach(([key, value]) => {
                            if (key !== "__noDate__") {
                              const persianYear = new Date(
                                key
                              ).toLocaleDateString("fa-IR", {
                                year: "numeric"
                              });
                              if (persianYear !== lastPersianYear) {
                                groups.push([{ year: persianYear }]);
                                lastPersianYear = persianYear;
                              }
                            }
                            groups.push(value);
                          });
                          return groups;
                        } catch {
                          return [];
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentday = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      data-plasmic-name={"frame22"}
                      data-plasmic-override={overrides.frame22}
                      className={classNames(projectcss.all, sty.frame22)}
                      key={currentIndex}
                    >
                      {(() => {
                        try {
                          return !currentday[0].year;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"frame23"}
                          data-plasmic-override={overrides.frame23}
                          className={classNames(projectcss.all, sty.frame23)}
                        >
                          <div
                            data-plasmic-name={"frame24"}
                            data-plasmic-override={overrides.frame24}
                            className={classNames(projectcss.all, sty.frame24)}
                          >
                            <div
                              data-plasmic-name={"frame25"}
                              data-plasmic-override={overrides.frame25}
                              className={classNames(
                                projectcss.all,
                                sty.frame25
                              )}
                            >
                              <div
                                data-plasmic-name={"frame26"}
                                data-plasmic-override={overrides.frame26}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame26
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xyX1M
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___3Gkze
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___6Fi2N
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (() => {
                                              try {
                                                var date =
                                                  currentday[0].dates[0];
                                                if (date) {
                                                  function parseISOToUTC(
                                                    dateStr
                                                  ) {
                                                    let [y, m, d] = dateStr
                                                      .split("-")
                                                      .map(Number);
                                                    return new Date(
                                                      Date.UTC(y, m - 1, d)
                                                    );
                                                  }
                                                  let d = parseISOToUTC(date);
                                                  let formatter =
                                                    new Intl.DateTimeFormat(
                                                      "fa-IR",
                                                      {
                                                        timeZone: "Asia/Tehran",
                                                        day: "2-digit"
                                                      }
                                                    );
                                                  return formatter.format(d);
                                                } else {
                                                  return "?";
                                                }
                                              } catch {
                                                return "?";
                                              }
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Townhall Meeting";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__kf8Ml
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (() => {
                                              try {
                                                var date =
                                                  currentday[0].dates[0];
                                                if (date)
                                                  return new Date(
                                                    date
                                                  ).toLocaleDateString(
                                                    "fa-IR",
                                                    { month: "long" }
                                                  );
                                                else return "";
                                              } catch {
                                                return "";
                                              }
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Townhall Meeting";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___03FqS
                                    )}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                          ? _par
                                          : [_par])(
                                      (() => {
                                        try {
                                          return currentday;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_1, __plasmic_idx_1) => {
                                        const currentItem = __plasmic_item_1;
                                        const currentIndex = __plasmic_idx_1;
                                        return (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__s65D5
                                            )}
                                            key={currentIndex}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__iOGk
                                              )}
                                            >
                                              <Oval3Icon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__c0H1J
                                                )}
                                                role={"img"}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___3JjUn
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem.token1
                                                        ? `${currentItem.name} ${currentItem.token1}`
                                                        : currentItem.name;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </div>
                                            {(() => {
                                              try {
                                                return !currentItem.active;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__qeK7
                                                )}
                                              >
                                                <Icon295Icon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__dlIv8
                                                  )}
                                                  role={"img"}
                                                />
                                              </div>
                                            ) : null}
                                          </div>
                                        );
                                      }
                                    )}
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return currentIndex != 0 && currentday[0].year;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ezLq
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zaVQn
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__r5JEo
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___3V3Xh
                              )}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                (() => {
                                  try {
                                    return [0, 1, 2, 3];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                const currentItem = __plasmic_item_1;
                                const currentIndex = __plasmic_idx_1;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__poj8Y
                                    )}
                                    key={currentIndex}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentday[0].year[
                                            currentIndex
                                          ];
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                );
                              })}
                            </div>
                            <Icon322Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___1Ke
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      ) : null}
                    </div>
                  );
                })}
              </div>
            ) : null}
          </div>
        ) : null}
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__o4PAk
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return (() => {
                  const today = new Date();
                  const formatter = new Intl.DateTimeFormat("fa-IR", {
                    day: "numeric",
                    month: "long",
                    timeZone: "Asia/Tehran"
                  });
                  const todayFa = formatter.format(today);
                  const title = `رویدادهای امروز (${todayFa})`;
                  return title;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u0631\u0648\u06cc\u062f\u0627\u062f \u0647\u0627\u06cc \u0645\u0647\u0645 \u067e\u06cc\u0634 \u0631\u0648";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        {(() => {
          try {
            return (() => {
              try {
                const today = new Date();
                const todayISO = today.toISOString().split("T")[0];
                const todayWeekday = today
                  .toLocaleDateString("en-US", { weekday: "long" })
                  .toLowerCase();
                const todayAndEveryDayList = $props.data.filter(t => {
                  let parsedDates = [];
                  try {
                    parsedDates = t.dates ? JSON.parse(t.dates) : [];
                  } catch {}
                  if (t.schedule_type === "everyDay") {
                    let weekdays = [];
                    try {
                      weekdays = t.weekdays ? JSON.parse(t.weekdays) : [];
                    } catch {}
                    return weekdays.includes(todayWeekday);
                  }
                  return parsedDates[0] === todayISO;
                });
                return todayAndEveryDayList.length == 0;
              } catch {
                return true;
              }
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox___2TeVq)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"80px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"80px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image118.png",
                fullWidth: 512,
                fullHeight: 512,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4Uf40
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return "«برای امروز رویدادی وجود ندارد»";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0631\u0648\u06cc\u062f\u0627\u062f \u0647\u0627\u06cc \u0645\u0647\u0645 \u067e\u06cc\u0634 \u0631\u0648";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        ) : null}
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return (() => {
                try {
                  const today = new Date();
                  const todayISO = today.toISOString().split("T")[0];
                  const todayWeekday = today
                    .toLocaleDateString("en-US", { weekday: "long" })
                    .toLowerCase();
                  const todayAndEveryDayList = $props.data.filter(t => {
                    if (t.active === 0) return false;
                    let parsedDates = [];
                    try {
                      parsedDates = t.dates ? JSON.parse(t.dates) : [];
                    } catch {}
                    if (t.schedule_type === "everyDay") {
                      let weekdays = [];
                      try {
                        weekdays = t.weekdays ? JSON.parse(t.weekdays) : [];
                      } catch {}
                      return weekdays.includes(todayWeekday);
                    }
                    return parsedDates[0] === todayISO;
                  });
                  return todayAndEveryDayList;
                } catch {
                  return [];
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentday = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              data-plasmic-name={"frame32"}
              data-plasmic-override={overrides.frame32}
              className={classNames(projectcss.all, sty.frame32)}
              key={currentIndex}
            >
              <div className={classNames(projectcss.all, sty.freeBox___30GP4)}>
                <MenuIcon
                  data-plasmic-name={"menuIcon"}
                  data-plasmic-override={overrides.menuIcon}
                  className={classNames("__wab_instance", sty.menuIcon)}
                  color={(() => {
                    try {
                      return (() => {
                        let color;
                        switch (currentday.text) {
                          case "drinkWater":
                            color = "blue";
                            break;
                          case "Water_time":
                            color = "blue";
                            break;
                          case "routineSkinMorning":
                            color = "warning";
                            break;
                          default:
                            color = "fuchsia";
                            break;
                        }
                        return color;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  icons={(() => {
                    try {
                      return (() => {
                        if (typeof currentday?.text === "string") {
                          let text = currentday.text.replace(
                            /_([a-zA-Z])/g,
                            (_, c) => c.toUpperCase()
                          );
                          if (text[0] && text[0] === text[0].toUpperCase()) {
                            text = text[0].toLowerCase() + text.slice(1);
                          }
                          return text;
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  size={"_25"}
                />
              </div>
              <div
                data-plasmic-name={"frame33"}
                data-plasmic-override={overrides.frame33}
                className={classNames(projectcss.all, sty.frame33)}
              >
                <div
                  data-plasmic-name={"frame34"}
                  data-plasmic-override={overrides.frame34}
                  className={classNames(projectcss.all, sty.frame34)}
                >
                  <div
                    data-plasmic-name={"frame35"}
                    data-plasmic-override={overrides.frame35}
                    className={classNames(projectcss.all, sty.frame35)}
                  >
                    <div
                      data-plasmic-name={"frame36"}
                      data-plasmic-override={overrides.frame36}
                      className={classNames(projectcss.all, sty.frame36)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__czZhb
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yoYac
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__glRVz
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentday.token1
                                    ? `${currentday.name} ${currentday.token1}`
                                    : currentday.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Townhall Meeting";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__e6Ao0
                          )}
                        >
                          <Icon291Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__s9SIs
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pRlD7
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    try {
                                      return JSON.parse(currentday.times).join(
                                        "  ,  "
                                      );
                                    } catch {}
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Townhall Meeting";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
        })}
        {(() => {
          try {
            return (
              // !$state.sms && !$props.subscription
              false
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___1Go7U)}
            onClick={async event => {
              const $steps = {};

              $steps["runShop"] = true
                ? (() => {
                    const actionArgs = { eventRef: $props["shop"] };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runShop"] != null &&
                typeof $steps["runShop"] === "object" &&
                typeof $steps["runShop"].then === "function"
              ) {
                $steps["runShop"] = await $steps["runShop"];
              }
            }}
          >
            <LottieWrapper
              data-plasmic-name={"lottie"}
              data-plasmic-override={overrides.lottie}
              animationData={{
                v: "5.7.4",
                fr: 60,
                ip: 0,
                op: 190,
                w: 200,
                h: 200,
                nm: "Notification_Updated",
                ddd: 0,
                assets: [],
                layers: [
                  {
                    ddd: 0,
                    ind: 1,
                    ty: 4,
                    nm: "Bell 2",
                    sr: 1,
                    ks: {
                      o: { a: 0, k: 100, ix: 11 },
                      r: {
                        a: 1,
                        k: [
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 95,
                            s: [0]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 110,
                            s: [22]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 125,
                            s: [-22]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 140,
                            s: [15]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 155,
                            s: [-10]
                          },
                          { t: 170, s: [0] }
                        ],
                        ix: 10
                      },
                      p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                      a: { a: 0, k: [-14.219, -40.102, 0], ix: 1, l: 2 },
                      s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                    },
                    ao: 0,
                    hasMask: true,
                    masksProperties: [
                      {
                        inv: false,
                        mode: "f",
                        pt: {
                          a: 0,
                          k: {
                            i: [
                              [0, -1.934],
                              [4.932, 0],
                              [0, 0],
                              [0.032, 4.223],
                              [-1.547, 1.676],
                              [0, 26.361],
                              [-18.949, 3.932],
                              [0, 0],
                              [-4.544, 0],
                              [0, -4.544],
                              [0, 0],
                              [0, -20.045],
                              [-4.963, -5.35]
                            ],
                            o: [
                              [-0.033, 4.223],
                              [0, 0],
                              [-4.931, 0],
                              [0, -1.934],
                              [4.963, -5.35],
                              [0, -20.045],
                              [0, 0],
                              [0, -4.544],
                              [4.544, 0],
                              [0, 0],
                              [18.949, 3.932],
                              [0, 26.361],
                              [1.547, 1.676]
                            ],
                            v: [
                              [43.75, 49.5],
                              [35.467, 57.75],
                              [-63.468, 57.75],
                              [-71.75, 49.5],
                              [-69.527, 43.892],
                              [-55.218, 4.125],
                              [-22.25, -35.868],
                              [-22.25, -41.25],
                              [-14, -49.5],
                              [-5.75, -41.25],
                              [-5.75, -35.868],
                              [27.217, 4.125],
                              [41.526, 43.892]
                            ],
                            c: true
                          },
                          ix: 1
                        },
                        o: { a: 0, k: 100, ix: 3 },
                        x: { a: 0, k: 0, ix: 4 },
                        nm: "Bell"
                      }
                    ],
                    shapes: [
                      {
                        ty: "gr",
                        it: [
                          {
                            ty: "rc",
                            d: 1,
                            s: { a: 0, k: [200, 200], ix: 2 },
                            p: { a: 0, k: [0, 0], ix: 3 },
                            r: { a: 0, k: 0, ix: 4 },
                            nm: "Rectangle Path 1",
                            mn: "ADBE Vector Shape - Rect",
                            hd: false
                          },
                          {
                            ty: "fl",
                            c: { a: 0, k: [0.5098, 0.3294, 0.7765, 1], ix: 4 },
                            o: { a: 0, k: 100, ix: 5 },
                            r: 1,
                            bm: 0,
                            nm: "Fill 1",
                            mn: "ADBE Vector Graphic - Fill",
                            hd: false
                          },
                          {
                            ty: "tr",
                            p: { a: 0, k: [-14.219, 20.398], ix: 2 },
                            a: { a: 0, k: [0, 0], ix: 1 },
                            s: { a: 0, k: [100, 100], ix: 3 },
                            r: { a: 0, k: 0, ix: 6 },
                            o: { a: 0, k: 100, ix: 7 },
                            sk: { a: 0, k: 0, ix: 4 },
                            sa: { a: 0, k: 0, ix: 5 },
                            nm: "Transform"
                          }
                        ],
                        nm: "Rectangle 1",
                        np: 3,
                        cix: 2,
                        bm: 0,
                        ix: 1,
                        mn: "ADBE Vector Group",
                        hd: false
                      }
                    ],
                    ip: 95,
                    op: 190,
                    st: 95,
                    bm: 0
                  },
                  {
                    ddd: 0,
                    ind: 2,
                    ty: 4,
                    nm: "Spindle 2",
                    sr: 1,
                    ks: {
                      o: { a: 0, k: 100, ix: 11 },
                      r: {
                        a: 1,
                        k: [
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 95,
                            s: [0]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 110,
                            s: [35]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 125,
                            s: [-35]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 140,
                            s: [25]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 155,
                            s: [-22]
                          },
                          { t: 170, s: [0] }
                        ],
                        ix: 10
                      },
                      p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                      a: { a: 0, k: [-14.219, -40.102, 0], ix: 1, l: 2 },
                      s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                    },
                    ao: 0,
                    hasMask: true,
                    masksProperties: [
                      {
                        inv: false,
                        mode: "f",
                        pt: {
                          a: 0,
                          k: {
                            i: [
                              [0, 9.121],
                              [0, 0],
                              [9.12, 0]
                            ],
                            o: [
                              [0, 0],
                              [0, 9.121],
                              [-9.12, 0]
                            ],
                            v: [
                              [-30.5, 66],
                              [2.5, 66],
                              [-14, 82.5]
                            ],
                            c: true
                          },
                          ix: 1
                        },
                        o: { a: 0, k: 100, ix: 3 },
                        x: { a: 0, k: 0, ix: 4 },
                        nm: "Spindle"
                      }
                    ],
                    shapes: [
                      {
                        ty: "gr",
                        it: [
                          {
                            ty: "rc",
                            d: 1,
                            s: { a: 0, k: [200, 200], ix: 2 },
                            p: { a: 0, k: [0, 0], ix: 3 },
                            r: { a: 0, k: 0, ix: 4 },
                            nm: "Rectangle Path 1",
                            mn: "ADBE Vector Shape - Rect",
                            hd: false
                          },
                          {
                            ty: "fl",
                            c: { a: 0, k: [0.5098, 0.3294, 0.7765, 1], ix: 4 },
                            o: { a: 0, k: 100, ix: 5 },
                            r: 1,
                            bm: 0,
                            nm: "Fill 1",
                            mn: "ADBE Vector Graphic - Fill",
                            hd: false
                          },
                          {
                            ty: "tr",
                            p: { a: 0, k: [-14.219, 20.398], ix: 2 },
                            a: { a: 0, k: [0, 0], ix: 1 },
                            s: { a: 0, k: [100, 100], ix: 3 },
                            r: { a: 0, k: 0, ix: 6 },
                            o: { a: 0, k: 100, ix: 7 },
                            sk: { a: 0, k: 0, ix: 4 },
                            sa: { a: 0, k: 0, ix: 5 },
                            nm: "Transform"
                          }
                        ],
                        nm: "Rectangle 1",
                        np: 3,
                        cix: 2,
                        bm: 0,
                        ix: 1,
                        mn: "ADBE Vector Group",
                        hd: false
                      }
                    ],
                    ip: 95,
                    op: 190,
                    st: 95,
                    bm: 0
                  },
                  {
                    ddd: 0,
                    ind: 3,
                    ty: 4,
                    nm: "Bell",
                    sr: 1,
                    ks: {
                      o: { a: 0, k: 100, ix: 11 },
                      r: {
                        a: 1,
                        k: [
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 0,
                            s: [0]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 15,
                            s: [22]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 30,
                            s: [-22]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 45,
                            s: [15]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 60,
                            s: [-10]
                          },
                          { t: 75, s: [0] }
                        ],
                        ix: 10
                      },
                      p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                      a: { a: 0, k: [-14.219, -40.102, 0], ix: 1, l: 2 },
                      s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                    },
                    ao: 0,
                    hasMask: true,
                    masksProperties: [
                      {
                        inv: false,
                        mode: "f",
                        pt: {
                          a: 0,
                          k: {
                            i: [
                              [0, -1.934],
                              [4.932, 0],
                              [0, 0],
                              [0.032, 4.223],
                              [-1.547, 1.676],
                              [0, 26.361],
                              [-18.949, 3.932],
                              [0, 0],
                              [-4.544, 0],
                              [0, -4.544],
                              [0, 0],
                              [0, -20.045],
                              [-4.963, -5.35]
                            ],
                            o: [
                              [-0.033, 4.223],
                              [0, 0],
                              [-4.931, 0],
                              [0, -1.934],
                              [4.963, -5.35],
                              [0, -20.045],
                              [0, 0],
                              [0, -4.544],
                              [4.544, 0],
                              [0, 0],
                              [18.949, 3.932],
                              [0, 26.361],
                              [1.547, 1.676]
                            ],
                            v: [
                              [43.75, 49.5],
                              [35.467, 57.75],
                              [-63.468, 57.75],
                              [-71.75, 49.5],
                              [-69.527, 43.892],
                              [-55.218, 4.125],
                              [-22.25, -35.868],
                              [-22.25, -41.25],
                              [-14, -49.5],
                              [-5.75, -41.25],
                              [-5.75, -35.868],
                              [27.217, 4.125],
                              [41.526, 43.892]
                            ],
                            c: true
                          },
                          ix: 1
                        },
                        o: { a: 0, k: 100, ix: 3 },
                        x: { a: 0, k: 0, ix: 4 },
                        nm: "Bell"
                      }
                    ],
                    shapes: [
                      {
                        ty: "gr",
                        it: [
                          {
                            ty: "rc",
                            d: 1,
                            s: { a: 0, k: [200, 200], ix: 2 },
                            p: { a: 0, k: [0, 0], ix: 3 },
                            r: { a: 0, k: 0, ix: 4 },
                            nm: "Rectangle Path 1",
                            mn: "ADBE Vector Shape - Rect",
                            hd: false
                          },
                          {
                            ty: "fl",
                            c: { a: 0, k: [0.5098, 0.3294, 0.7765, 1], ix: 4 },
                            o: { a: 0, k: 100, ix: 5 },
                            r: 1,
                            bm: 0,
                            nm: "Fill 1",
                            mn: "ADBE Vector Graphic - Fill",
                            hd: false
                          },
                          {
                            ty: "tr",
                            p: { a: 0, k: [-14.219, 20.398], ix: 2 },
                            a: { a: 0, k: [0, 0], ix: 1 },
                            s: { a: 0, k: [100, 100], ix: 3 },
                            r: { a: 0, k: 0, ix: 6 },
                            o: { a: 0, k: 100, ix: 7 },
                            sk: { a: 0, k: 0, ix: 4 },
                            sa: { a: 0, k: 0, ix: 5 },
                            nm: "Transform"
                          }
                        ],
                        nm: "Rectangle 1",
                        np: 3,
                        cix: 2,
                        bm: 0,
                        ix: 1,
                        mn: "ADBE Vector Group",
                        hd: false
                      }
                    ],
                    ip: 0,
                    op: 95,
                    st: 0,
                    bm: 0
                  },
                  {
                    ddd: 0,
                    ind: 4,
                    ty: 4,
                    nm: "Spindle",
                    sr: 1,
                    ks: {
                      o: { a: 0, k: 100, ix: 11 },
                      r: {
                        a: 1,
                        k: [
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 0,
                            s: [0]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 15,
                            s: [35]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 30,
                            s: [-35]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 45,
                            s: [25]
                          },
                          {
                            i: { x: [0.667], y: [1] },
                            o: { x: [0.333], y: [0] },
                            t: 60,
                            s: [-22]
                          },
                          { t: 75, s: [0] }
                        ],
                        ix: 10
                      },
                      p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                      a: { a: 0, k: [-14.219, -40.102, 0], ix: 1, l: 2 },
                      s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                    },
                    ao: 0,
                    hasMask: true,
                    masksProperties: [
                      {
                        inv: false,
                        mode: "f",
                        pt: {
                          a: 0,
                          k: {
                            i: [
                              [0, 9.121],
                              [0, 0],
                              [9.12, 0]
                            ],
                            o: [
                              [0, 0],
                              [0, 9.121],
                              [-9.12, 0]
                            ],
                            v: [
                              [-30.5, 66],
                              [2.5, 66],
                              [-14, 82.5]
                            ],
                            c: true
                          },
                          ix: 1
                        },
                        o: { a: 0, k: 100, ix: 3 },
                        x: { a: 0, k: 0, ix: 4 },
                        nm: "Spindle"
                      }
                    ],
                    shapes: [
                      {
                        ty: "gr",
                        it: [
                          {
                            ty: "rc",
                            d: 1,
                            s: { a: 0, k: [200, 200], ix: 2 },
                            p: { a: 0, k: [0, 0], ix: 3 },
                            r: { a: 0, k: 0, ix: 4 },
                            nm: "Rectangle Path 1",
                            mn: "ADBE Vector Shape - Rect",
                            hd: false
                          },
                          {
                            ty: "fl",
                            c: { a: 0, k: [0.5098, 0.3294, 0.7765, 1], ix: 4 },
                            o: { a: 0, k: 100, ix: 5 },
                            r: 1,
                            bm: 0,
                            nm: "Fill 1",
                            mn: "ADBE Vector Graphic - Fill",
                            hd: false
                          },
                          {
                            ty: "tr",
                            p: { a: 0, k: [-14.219, 20.398], ix: 2 },
                            a: { a: 0, k: [0, 0], ix: 1 },
                            s: { a: 0, k: [100, 100], ix: 3 },
                            r: { a: 0, k: 0, ix: 6 },
                            o: { a: 0, k: 100, ix: 7 },
                            sk: { a: 0, k: 0, ix: 4 },
                            sa: { a: 0, k: 0, ix: 5 },
                            nm: "Transform"
                          }
                        ],
                        nm: "Rectangle 1",
                        np: 3,
                        cix: 2,
                        bm: 0,
                        ix: 1,
                        mn: "ADBE Vector Group",
                        hd: false
                      }
                    ],
                    ip: 0,
                    op: 95,
                    st: 0,
                    bm: 0
                  }
                ],
                markers: []
              }}
              className={classNames("__wab_instance", sty.lottie)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__cGom)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vFcq
                )}
              >
                {
                  "\u0628\u0631\u0627\u06cc \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0631\u0648\u06cc\u062f\u0627\u062f \u0647\u0627\u06cc \u0645\u0647\u0645 \u0627\u0632 \u0637\u0631\u06cc\u0642 \u067e\u06cc\u0627\u0645\u06a9 \u06cc\u0627 \u062a\u0644\u06af\u0631\u0627\u0645 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647 \u0631\u0627 \u062a\u0647\u06cc\u0647 \u06a9\u0646\u06cc\u062f."
                }
              </div>
            </div>
            <Button
              data-plasmic-name={"button3"}
              data-plasmic-override={overrides.button3}
              className={classNames("__wab_instance", sty.button3)}
              color={generateStateValueProp($state, ["button3", "color"])}
              load={generateStateValueProp($state, ["button3", "load"])}
              loading={generateStateValueProp($state, ["button3", "loading"])}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button3", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button3", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button3", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              size={"minimal"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cGkq
                )}
              >
                {
                  "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9"
                }
              </div>
            </Button>
          </div>
        ) : null}
      </div>
      <section
        className={classNames(projectcss.all, sty.section__wBpwR, {
          [sty.sectionhamyar__wBpwRxX8Tw]: hasVariant(
            $state,
            "hamyar",
            "hamyar"
          ),
          [sty.sectionslide3__wBpwRWyFt]: hasVariant(
            $state,
            "slide3",
            "slide3"
          ),
          [sty.sectionslide3_hamyar__wBpwRWyFtXX8Tw]:
            hasVariant($state, "hamyar", "hamyar") &&
            hasVariant($state, "slide3", "slide3")
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__nYlDo)}>
          <div className={classNames(projectcss.all, sty.freeBox__sjaPa)}>
            <Button
              data-plasmic-name={"button9"}
              data-plasmic-override={overrides.button9}
              className={classNames("__wab_instance", sty.button9, {
                [sty.button9slide3]: hasVariant($state, "slide3", "slide3")
              })}
              color={generateStateValueProp($state, ["button9", "color"])}
              endIcon={null}
              load={generateStateValueProp($state, ["button9", "load"])}
              loading={generateStateValueProp($state, ["button9", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["runSetting"] =
                  $props.data.length > 0
                    ? (() => {
                        const actionArgs = { eventRef: $props["setting"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["runSetting"] != null &&
                  typeof $steps["runSetting"] === "object" &&
                  typeof $steps["runSetting"].then === "function"
                ) {
                  $steps["runSetting"] = await $steps["runSetting"];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.refresh = +"1");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["runCode2"] =
                  $props.data.length == 0
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.reminderSetting.dialogOpendialog3 = true);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["runCode2"] != null &&
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button9", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button9", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button9", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              shape={"round"}
              size={"compact"}
            >
              <Icon349Icon
                className={classNames(projectcss.all, sty.svg___36Xo1)}
                role={"img"}
              />
            </Button>
            <AntdTooltip
              data-plasmic-name={"tooltip"}
              data-plasmic-override={overrides.tooltip}
              className={classNames("__wab_instance", sty.tooltip)}
              placement={"left"}
              titleText={
                "\u0627\u0641\u0632\u0648\u062f\u0646 \u0631\u0648\u06cc\u062f\u0627\u062f \u062c\u062f\u06cc\u062f"
              }
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__pDska, {
                  [sty.freeBoxslide3__pDskaWyFt]: hasVariant(
                    $state,
                    "slide3",
                    "slide3"
                  )
                })}
              >
                <Button
                  data-plasmic-name={"button10"}
                  data-plasmic-override={overrides.button10}
                  className={classNames("__wab_instance", sty.button10, {
                    [sty.button10slide3]: hasVariant($state, "slide3", "slide3")
                  })}
                  color={generateStateValueProp($state, ["button10", "color"])}
                  load={generateStateValueProp($state, ["button10", "load"])}
                  loading={generateStateValueProp($state, [
                    "button10",
                    "loading"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return ($state.reminderSetting.dialogOpendialog3 = true);
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button10", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button10", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "button10",
                        "loading"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={"round"}
                >
                  <Icon50Icon
                    className={classNames(projectcss.all, sty.svg__rSu4)}
                    role={"img"}
                  />
                </Button>
              </div>
            </AntdTooltip>
          </div>
        </div>
      </section>
      <ReminderSetting
        data-plasmic-name={"reminderSetting"}
        data-plasmic-override={overrides.reminderSetting}
        className={classNames("__wab_instance", sty.reminderSetting, {
          [sty.reminderSettingslide3]: hasVariant($state, "slide3", "slide3")
        })}
        data={
          hasVariant($state, "slide3", "slide3")
            ? (() => {
                try {
                  return (() => {
                    const merged = $state.ofline.map(i => {
                      const found = $props.data.find(a =>
                        i.text !== "occasion"
                          ? a.text === i.text
                          : a.name === i.name
                      );
                      return found ? found : i;
                    });
                    return merged;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [
                      {
                        id: "04d77165-ab7d-4537-86ba-1099e4f66091-1",
                        progressGroupId: null,
                        userId: "1",
                        doctorId: "21353",
                        name: "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
                        text: "",
                        actionText: null,
                        canSkip: null,
                        actionIcon: null,
                        actionType: null,
                        action: null,
                        type: "SpouseBirthday",
                        category: "personal",
                        category_fa:
                          "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
                        status: "waiting",
                        done: false,
                        date: "2025-09-10T00:00:00.000Z",
                        dependId: null,
                        dependAt: null,
                        exclude: [],
                        order: 7,
                        priority: 10,
                        createdAt: "2025-09-08T07:45:09.172Z",
                        updatedAt: "2025-09-08T07:45:09.172Z"
                      },
                      {
                        id: "d2e905f3-2837-4bda-8404-368f6a63527b-1",
                        progressGroupId: null,
                        userId: "1",
                        doctorId: "21353",
                        name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
                        text: "",
                        actionText: null,
                        canSkip: null,
                        actionIcon: null,
                        actionType: null,
                        action: null,
                        type: "WeddingAnniversary",
                        category: "notification",
                        category_fa:
                          "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                        status: "waiting",
                        done: false,
                        date: "2025-10-01T00:00:00.000Z",
                        dependId: null,
                        dependAt: null,
                        exclude: [],
                        order: 9,
                        priority: 10,
                        createdAt: "2025-09-08T08:47:52.446Z",
                        updatedAt: "2025-09-08T08:47:52.446Z"
                      },
                      {
                        id: "04d77165-ab7d-4537-86ba-1099e4f66091-2",
                        progressGroupId: null,
                        userId: "1",
                        doctorId: "21353",
                        name: "\u0648\u0644\u0646\u062a\u0627\u06cc\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642)",
                        text: "\u0631\u0648\u0632 \u0639\u0634\u0642 \u062c\u0647\u0627\u0646\u06cc",
                        actionText: null,
                        canSkip: null,
                        actionIcon: null,
                        actionType: null,
                        action: null,
                        type: "occasion",
                        category: "notification",
                        category_fa:
                          "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                        status: "waiting",
                        done: false,
                        date: "2026-02-14T00:00:00.000Z",
                        dependId: null,
                        dependAt: null,
                        exclude: [],
                        order: 4,
                        priority: 10,
                        createdAt: "2025-09-08T07:50:00.000Z",
                        updatedAt: "2025-09-08T07:50:00.000Z"
                      },
                      {
                        id: "04d77165-ab7d-4537-86ba-1099e4f66091-3",
                        progressGroupId: null,
                        userId: "1",
                        doctorId: "21353",
                        name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
                        text: "\u0631\u0648\u0632 \u0632\u0646 \u0648 \u0639\u0634\u0642 \u062f\u0631 \u0627\u06cc\u0631\u0627\u0646 \u0628\u0627\u0633\u062a\u0627\u0646",
                        actionText: null,
                        canSkip: null,
                        actionIcon: null,
                        actionType: null,
                        action: null,
                        type: "occasion",
                        category: "notification",
                        category_fa:
                          "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                        status: "waiting",
                        done: false,
                        date: "2026-02-18T00:00:00.000Z",
                        dependId: null,
                        dependAt: null,
                        exclude: [],
                        order: 5,
                        priority: 10,
                        createdAt: "2025-09-08T07:51:00.000Z",
                        updatedAt: "2025-09-08T07:51:00.000Z"
                      },
                      {
                        id: "04d77165-ab7d-4537-86ba-1099e4f66091-4",
                        progressGroupId: null,
                        userId: "1",
                        doctorId: "21353",
                        name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u0632\u0646",
                        text: "International Women's Day",
                        actionText: null,
                        canSkip: null,
                        actionIcon: null,
                        actionType: null,
                        action: null,
                        type: "occasion",
                        category: "notification",
                        category_fa:
                          "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                        status: "waiting",
                        done: false,
                        date: "2026-03-08T00:00:00.000Z",
                        dependId: null,
                        dependAt: null,
                        exclude: [],
                        order: 3,
                        priority: 10,
                        createdAt: "2025-09-08T07:52:00.000Z",
                        updatedAt: "2025-09-08T07:52:00.000Z"
                      }
                    ];
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $state.ofline.filter(
                    i => !$props.data.find(a => a.text === i.text)
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [
                      {
                        id: "04d77165-ab7d-4537-86ba-1099e4f66091-1",
                        progressGroupId: null,
                        userId: "1",
                        doctorId: "21353",
                        name: "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
                        text: "",
                        actionText: null,
                        canSkip: null,
                        actionIcon: null,
                        actionType: null,
                        action: null,
                        type: "SpouseBirthday",
                        category: "personal",
                        category_fa:
                          "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
                        status: "waiting",
                        done: false,
                        date: "2025-09-10T00:00:00.000Z",
                        dependId: null,
                        dependAt: null,
                        exclude: [],
                        order: 7,
                        priority: 10,
                        createdAt: "2025-09-08T07:45:09.172Z",
                        updatedAt: "2025-09-08T07:45:09.172Z"
                      },
                      {
                        id: "d2e905f3-2837-4bda-8404-368f6a63527b-1",
                        progressGroupId: null,
                        userId: "1",
                        doctorId: "21353",
                        name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
                        text: "",
                        actionText: null,
                        canSkip: null,
                        actionIcon: null,
                        actionType: null,
                        action: null,
                        type: "WeddingAnniversary",
                        category: "notification",
                        category_fa:
                          "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                        status: "waiting",
                        done: false,
                        date: "2025-10-01T00:00:00.000Z",
                        dependId: null,
                        dependAt: null,
                        exclude: [],
                        order: 9,
                        priority: 10,
                        createdAt: "2025-09-08T08:47:52.446Z",
                        updatedAt: "2025-09-08T08:47:52.446Z"
                      },
                      {
                        id: "04d77165-ab7d-4537-86ba-1099e4f66091-2",
                        progressGroupId: null,
                        userId: "1",
                        doctorId: "21353",
                        name: "\u0648\u0644\u0646\u062a\u0627\u06cc\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642)",
                        text: "\u0631\u0648\u0632 \u0639\u0634\u0642 \u062c\u0647\u0627\u0646\u06cc",
                        actionText: null,
                        canSkip: null,
                        actionIcon: null,
                        actionType: null,
                        action: null,
                        type: "occasion",
                        category: "notification",
                        category_fa:
                          "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                        status: "waiting",
                        done: false,
                        date: "2026-02-14T00:00:00.000Z",
                        dependId: null,
                        dependAt: null,
                        exclude: [],
                        order: 4,
                        priority: 10,
                        createdAt: "2025-09-08T07:50:00.000Z",
                        updatedAt: "2025-09-08T07:50:00.000Z"
                      },
                      {
                        id: "04d77165-ab7d-4537-86ba-1099e4f66091-3",
                        progressGroupId: null,
                        userId: "1",
                        doctorId: "21353",
                        name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
                        text: "\u0631\u0648\u0632 \u0632\u0646 \u0648 \u0639\u0634\u0642 \u062f\u0631 \u0627\u06cc\u0631\u0627\u0646 \u0628\u0627\u0633\u062a\u0627\u0646",
                        actionText: null,
                        canSkip: null,
                        actionIcon: null,
                        actionType: null,
                        action: null,
                        type: "occasion",
                        category: "notification",
                        category_fa:
                          "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                        status: "waiting",
                        done: false,
                        date: "2026-02-18T00:00:00.000Z",
                        dependId: null,
                        dependAt: null,
                        exclude: [],
                        order: 5,
                        priority: 10,
                        createdAt: "2025-09-08T07:51:00.000Z",
                        updatedAt: "2025-09-08T07:51:00.000Z"
                      },
                      {
                        id: "04d77165-ab7d-4537-86ba-1099e4f66091-4",
                        progressGroupId: null,
                        userId: "1",
                        doctorId: "21353",
                        name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u0632\u0646",
                        text: "International Women's Day",
                        actionText: null,
                        canSkip: null,
                        actionIcon: null,
                        actionType: null,
                        action: null,
                        type: "occasion",
                        category: "notification",
                        category_fa:
                          "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                        status: "waiting",
                        done: false,
                        date: "2026-03-08T00:00:00.000Z",
                        dependId: null,
                        dependAt: null,
                        exclude: [],
                        order: 3,
                        priority: 10,
                        createdAt: "2025-09-08T07:52:00.000Z",
                        updatedAt: "2025-09-08T07:52:00.000Z"
                      }
                    ];
                  }
                  throw e;
                }
              })()
        }
        dialogOpendialog3={generateStateValueProp($state, [
          "reminderSetting",
          "dialogOpendialog3"
        ])}
        manId={(() => {
          try {
            return $props.manId;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        onDialogOpendialog3Change={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "reminderSetting",
            "dialogOpendialog3"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onPageSelectChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "reminderSetting",
            "pageSelect"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onRefreshChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "reminderSetting",
            "refresh"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }

          (async val => {
            const $steps = {};

            $steps["updateRefresh"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["refresh"]
                    },
                    operation: 0,
                    value: $state.refresh + 1
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateRefresh"] != null &&
              typeof $steps["updateRefresh"] === "object" &&
              typeof $steps["updateRefresh"].then === "function"
            ) {
              $steps["updateRefresh"] = await $steps["updateRefresh"];
            }
          }).apply(null, eventArgs);
        }}
        onRefreshTimeChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "reminderSetting",
            "refreshTime"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onReminderCategory2DataChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "reminderSetting",
            "reminderCategory2Data"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onSmsChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reminderSetting", "sms"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }

          (async val => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return ($state.sms = $state.reminderSetting.sms);
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }).apply(null, eventArgs);
        }}
        onTelChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reminderSetting", "tel"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }

          (async val => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return ($state.tel = $state.reminderSetting.tel);
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }).apply(null, eventArgs);
        }}
        pageSelect={generateStateValueProp($state, [
          "reminderSetting",
          "pageSelect"
        ])}
        phoneNumber={(() => {
          try {
            return $props.phone;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        refresh={generateStateValueProp($state, ["reminderSetting", "refresh"])}
        refreshTime={generateStateValueProp($state, [
          "reminderSetting",
          "refreshTime"
        ])}
        reminderCategory2Data={generateStateValueProp($state, [
          "reminderSetting",
          "reminderCategory2Data"
        ])}
        shop={async () => {
          const $steps = {};

          $steps["runShop"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["shop"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runShop"] != null &&
            typeof $steps["runShop"] === "object" &&
            typeof $steps["runShop"].then === "function"
          ) {
            $steps["runShop"] = await $steps["runShop"];
          }
        }}
        slide={"_1"}
        sms={generateStateValueProp($state, ["reminderSetting", "sms"])}
        subscription={(() => {
          try {
            return (
              // $props.subscription
              true
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
        tel={generateStateValueProp($state, ["reminderSetting", "tel"])}
        telegramId={(() => {
          try {
            return $props.telegramId;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        telegramOn={(() => {
          try {
            return $props.telegram;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
        token={(() => {
          try {
            return $props.token;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dialog",
    "input",
    "select",
    "switchbest3",
    "button5",
    "dialog2",
    "datePickers",
    "button4",
    "headerLiom",
    "button2",
    "todayMeeting2",
    "frame22",
    "frame23",
    "frame24",
    "frame25",
    "frame26",
    "img",
    "frame32",
    "menuIcon",
    "frame33",
    "frame34",
    "frame35",
    "frame36",
    "lottie",
    "button3",
    "button9",
    "tooltip",
    "button10",
    "reminderSetting"
  ],
  dialog: ["dialog", "input", "select", "switchbest3", "button5"],
  input: ["input"],
  select: ["select"],
  switchbest3: ["switchbest3"],
  button5: ["button5"],
  dialog2: ["dialog2", "datePickers", "button4"],
  datePickers: ["datePickers"],
  button4: ["button4"],
  headerLiom: ["headerLiom", "button2"],
  button2: ["button2"],
  todayMeeting2: [
    "todayMeeting2",
    "frame22",
    "frame23",
    "frame24",
    "frame25",
    "frame26"
  ],
  frame22: ["frame22", "frame23", "frame24", "frame25", "frame26"],
  frame23: ["frame23", "frame24", "frame25", "frame26"],
  frame24: ["frame24", "frame25", "frame26"],
  frame25: ["frame25", "frame26"],
  frame26: ["frame26"],
  img: ["img"],
  frame32: ["frame32", "menuIcon", "frame33", "frame34", "frame35", "frame36"],
  menuIcon: ["menuIcon"],
  frame33: ["frame33", "frame34", "frame35", "frame36"],
  frame34: ["frame34", "frame35", "frame36"],
  frame35: ["frame35", "frame36"],
  frame36: ["frame36"],
  lottie: ["lottie"],
  button3: ["button3"],
  button9: ["button9"],
  tooltip: ["tooltip", "button10"],
  button10: ["button10"],
  reminderSetting: ["reminderSetting"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dialog: typeof Dialog;
  input: typeof Input;
  select: typeof Select;
  switchbest3: typeof Switchbest;
  button5: typeof Button;
  dialog2: typeof Dialog;
  datePickers: typeof DatePickers;
  button4: typeof Button;
  headerLiom: typeof HeaderLiom;
  button2: typeof Button;
  todayMeeting2: "div";
  frame22: "div";
  frame23: "div";
  frame24: "div";
  frame25: "div";
  frame26: "div";
  img: typeof PlasmicImg__;
  frame32: "div";
  menuIcon: typeof MenuIcon;
  frame33: "div";
  frame34: "div";
  frame35: "div";
  frame36: "div";
  lottie: typeof LottieWrapper;
  button3: typeof Button;
  button9: typeof Button;
  tooltip: typeof AntdTooltip;
  button10: typeof Button;
  reminderSetting: typeof ReminderSetting;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReminder__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReminder__VariantsArgs;
    args?: PlasmicReminder__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicReminder__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicReminder__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReminder__ArgProps,
          internalVariantPropNames: PlasmicReminder__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReminder__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReminder";
  } else {
    func.displayName = `PlasmicReminder.${nodeName}`;
  }
  return func;
}

export const PlasmicReminder = Object.assign(
  // Top-level PlasmicReminder renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dialog: makeNodeComponent("dialog"),
    input: makeNodeComponent("input"),
    select: makeNodeComponent("select"),
    switchbest3: makeNodeComponent("switchbest3"),
    button5: makeNodeComponent("button5"),
    dialog2: makeNodeComponent("dialog2"),
    datePickers: makeNodeComponent("datePickers"),
    button4: makeNodeComponent("button4"),
    headerLiom: makeNodeComponent("headerLiom"),
    button2: makeNodeComponent("button2"),
    todayMeeting2: makeNodeComponent("todayMeeting2"),
    frame22: makeNodeComponent("frame22"),
    frame23: makeNodeComponent("frame23"),
    frame24: makeNodeComponent("frame24"),
    frame25: makeNodeComponent("frame25"),
    frame26: makeNodeComponent("frame26"),
    img: makeNodeComponent("img"),
    frame32: makeNodeComponent("frame32"),
    menuIcon: makeNodeComponent("menuIcon"),
    frame33: makeNodeComponent("frame33"),
    frame34: makeNodeComponent("frame34"),
    frame35: makeNodeComponent("frame35"),
    frame36: makeNodeComponent("frame36"),
    lottie: makeNodeComponent("lottie"),
    button3: makeNodeComponent("button3"),
    button9: makeNodeComponent("button9"),
    tooltip: makeNodeComponent("tooltip"),
    button10: makeNodeComponent("button10"),
    reminderSetting: makeNodeComponent("reminderSetting"),

    // Metadata about props expected for PlasmicReminder
    internalVariantProps: PlasmicReminder__VariantProps,
    internalArgProps: PlasmicReminder__ArgProps
  }
);

export default PlasmicReminder;
/* prettier-ignore-end */
