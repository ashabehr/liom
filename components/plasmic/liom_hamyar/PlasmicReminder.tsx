/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 3v9tn6uUJCPM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import { Input } from "@/fragment/components/input"; // plasmic-import: zZH7vV9pXyf8/codeComponent
import { Select } from "@/fragment/components/select"; // plasmic-import: 5Mch6ak-Pshg/codeComponent
import Switchbest from "../../Switchbest"; // plasmic-import: ofUp1AS5glz5/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { DatePickers } from "@/components/DatePickers"; // plasmic-import: Pxh5xTWczGDl/codeComponent
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import Line from "../../Line"; // plasmic-import: tYgE5kAlYGXB/component
import { SwiperSlider } from "@/components/SwiperSlider"; // plasmic-import: hd-bzFw1zcpE/codeComponent
import ReminderSetting from "../../ReminderSetting"; // plasmic-import: VZcPBQBUFNbT/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicReminder.module.css"; // plasmic-import: 3v9tn6uUJCPM/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Oval3Icon from "./icons/PlasmicIcon__Oval3"; // plasmic-import: lOJpmSR7qOUd/icon
import Icon270Icon from "./icons/PlasmicIcon__Icon270"; // plasmic-import: Y171g_Z8ZZ84/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: Wm-tjDMQJVfn/icon
import Icon283Icon from "./icons/PlasmicIcon__Icon283"; // plasmic-import: d6oFXeX9yzDi/icon

createPlasmicElementProxy;

export type PlasmicReminder__VariantMembers = {};
export type PlasmicReminder__VariantsArgs = {};
type VariantPropType = keyof PlasmicReminder__VariantsArgs;
export const PlasmicReminder__VariantProps = new Array<VariantPropType>();

export type PlasmicReminder__ArgsType = {
  data?: any;
  manId?: string;
  subscription?: boolean;
  refresh?: string;
  onRefreshChange?: (val: string) => void;
  shop?: () => void;
  back?: () => void;
  setting?: () => void;
  telegram?: boolean;
  activeSmsNotif?: boolean;
  token?: string;
  activeNotifTel?: boolean;
  telegramId?: string;
  phone?: string;
};
type ArgPropType = keyof PlasmicReminder__ArgsType;
export const PlasmicReminder__ArgProps = new Array<ArgPropType>(
  "data",
  "manId",
  "subscription",
  "refresh",
  "onRefreshChange",
  "shop",
  "back",
  "setting",
  "telegram",
  "activeSmsNotif",
  "token",
  "activeNotifTel",
  "telegramId",
  "phone"
);

export type PlasmicReminder__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  dialog?: Flex__<typeof Dialog>;
  input?: Flex__<typeof Input>;
  select?: Flex__<typeof Select>;
  switchbest3?: Flex__<typeof Switchbest>;
  button5?: Flex__<typeof Button>;
  dialog2?: Flex__<typeof Dialog>;
  datePickers?: Flex__<typeof DatePickers>;
  button4?: Flex__<typeof Button>;
  todayMeeting2?: Flex__<"div">;
  frame22?: Flex__<"div">;
  frame23?: Flex__<"div">;
  frame24?: Flex__<"div">;
  frame25?: Flex__<"div">;
  frame26?: Flex__<"div">;
  todayMeeting3?: Flex__<"div">;
  frame17?: Flex__<"div">;
  frame18?: Flex__<"div">;
  frame19?: Flex__<"div">;
  frame20?: Flex__<"div">;
  frame21?: Flex__<"div">;
  ul?: Flex__<"ul">;
  li?: Flex__<"li">;
  button3?: Flex__<typeof Button>;
  lottie?: Flex__<typeof LottieWrapper>;
  button2?: Flex__<typeof Button>;
  line?: Flex__<typeof Line>;
  swiperSlider?: Flex__<typeof SwiperSlider>;
  slide1?: Flex__<"div">;
  button6?: Flex__<typeof Button>;
  reminderSetting?: Flex__<typeof ReminderSetting>;
  slide2?: Flex__<"div">;
  reminderSetting2?: Flex__<typeof ReminderSetting>;
  button?: Flex__<typeof Button>;
};

export interface DefaultReminderProps {
  data?: any;
  manId?: string;
  subscription?: boolean;
  refresh?: string;
  onRefreshChange?: (val: string) => void;
  shop?: () => void;
  back?: () => void;
  setting?: () => void;
  telegram?: boolean;
  activeSmsNotif?: boolean;
  token?: string;
  activeNotifTel?: boolean;
  telegramId?: string;
  phone?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReminder__RenderFunc(props: {
  variants: PlasmicReminder__VariantsArgs;
  args: PlasmicReminder__ArgsType;
  overrides: PlasmicReminder__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: [
            {
              id: 178,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: "",
              schedule_type: "everyYear",
              name: "\u062a\u0648\u0644\u062f  \u0628\u06cc\u0628\u0647\u0647\u0647\u0647\u0647 \u0686\u06cc\u067e\u0633\u06cc",
              text: "birthday_spouse",
              token1: "",
              dates: '["2025-09-17"]',
              weekdays: null,
              times: '["09:30"]',
              finishTime: "2025-09-17 09:48:12",
              active: 0
            },
            {
              id: 185,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: "null",
              schedule_type: "everyYear",
              name: "\u062a\u0648\u0644\u062f  \u0641\u0631\u0632\u0646\u062f",
              text: "birthday_child",
              token1:
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEiLCJ0eXBlIjoidXNlciIsImlhdCI6MTc1NzMxMjM4N30.pdVwl5PBNOb_8qOvch4mCHnnO_nPudkzmuNdHeGfEuY",
              dates: '["2025-09-17"]',
              weekdays: null,
              times: '["09:30"]',
              finishTime: "2025-09-17 10:28:23",
              active: 1
            },
            {
              id: 181,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: "",
              schedule_type: "everyYear",
              name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0622\u0634\u0646\u0627\u06cc\u06cc",
              text: "anniversary_relationship",
              token1: "",
              dates: '["2025-10-10"]',
              weekdays: null,
              times: '["09:30"]',
              finishTime: "2025-09-17 10:01:35",
              active: 1
            },
            {
              id: 182,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: "",
              schedule_type: "everyYear",
              name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0622\u0634\u0646\u0627\u06cc\u06cc",
              text: "anniversary_relationship",
              token1: "",
              dates: '["2025-10-10"]',
              weekdays: null,
              times: '["09:30"]',
              finishTime: "2025-09-17 10:01:36",
              active: 0
            },
            {
              id: 183,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: "",
              schedule_type: "everyYear",
              name: "\u0633\u0627\u0644\u06af\u0631\u062f  \u0627\u0632\u062f\u0648\u0627\u062c",
              text: "anniversary_wedding",
              token1: "",
              dates: '["2025-10-10"]',
              weekdays: null,
              times: '["09:30"]',
              finishTime: "2025-09-17 10:03:16",
              active: 0
            },
            {
              id: 180,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: "",
              schedule_type: "everyYear",
              name: "\u0631\u0648\u0632  \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631\u0627\u0646",
              text: "occasion",
              token1: "",
              dates: '["2025-10-11"]',
              weekdays: null,
              times: "09:00",
              finishTime: "2025-09-17 09:50:43",
              active: 0
            },
            {
              id: 184,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: "null",
              schedule_type: "everyYear",
              name: "\u062a\u0648\u0644\u062f  \u0641\u0631\u0632\u0646\u062f",
              text: "birthday_child",
              token1:
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEiLCJ0eXBlIjoidXNlciIsImlhdCI6MTc1NzMxMjM4N30.pdVwl5PBNOb_8qOvch4mCHnnO_nPudkzmuNdHeGfEuY",
              dates: '["2025-10-11"]',
              weekdays: null,
              times: '["09:30"]',
              finishTime: "2025-09-17 10:20:16",
              active: 1
            },
            {
              id: 187,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: "null",
              schedule_type: "everyYear",
              name: "\u0631\u0648\u0632  \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631\u0627\u0646",
              text: "occasion",
              token1:
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEiLCJ0eXBlIjoidXNlciIsImlhdCI6MTc1NzMxMjM4N30.pdVwl5PBNOb_8qOvch4mCHnnO_nPudkzmuNdHeGfEuY",
              dates: '["2025-10-11"]',
              weekdays: null,
              times: "09:00",
              finishTime: "2025-09-17 10:57:18",
              active: 1
            },
            {
              id: 188,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: "null",
              schedule_type: "everyYear",
              name: "\u0631\u0648\u0632  \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631\u0627\u0646",
              text: "occasion",
              token1:
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEiLCJ0eXBlIjoidXNlciIsImlhdCI6MTc1NzMxMjM4N30.pdVwl5PBNOb_8qOvch4mCHnnO_nPudkzmuNdHeGfEuY",
              dates: '["2025-10-11"]',
              weekdays: null,
              times: "09:00",
              finishTime: "2025-09-17 10:57:48",
              active: 1
            },
            {
              id: 189,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: "null",
              schedule_type: "everyYear",
              name: "\u0631\u0648\u0632  \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631\u0627\u0646",
              text: "occasion",
              token1:
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEiLCJ0eXBlIjoidXNlciIsImlhdCI6MTc1NzMxMjM4N30.pdVwl5PBNOb_8qOvch4mCHnnO_nPudkzmuNdHeGfEuY",
              dates: '["2025-10-11"]',
              weekdays: null,
              times: "09:00",
              finishTime: "2025-09-17 10:57:48",
              active: 0
            },
            {
              id: 186,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: "null",
              schedule_type: "everyYear",
              name: "\u0631\u0648\u0632  \u0632\u0646 \u0648 \u0645\u0627\u062f\u0631",
              text: "occasion",
              token1:
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEiLCJ0eXBlIjoidXNlciIsImlhdCI6MTc1NzMxMjM4N30.pdVwl5PBNOb_8qOvch4mCHnnO_nPudkzmuNdHeGfEuY",
              dates: '["2025-12-11"]',
              weekdays: null,
              times: "09:00",
              finishTime: "2025-09-17 10:56:10",
              active: 1
            },
            {
              id: 179,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: "",
              schedule_type: "everyYear",
              name: "\u062a\u0648\u0644\u062f  \u0641\u0631\u0632\u0646\u062f",
              text: "birthday_child",
              token1: "",
              dates: '["2026-04-07"]',
              weekdays: null,
              times: '["09:30"]',
              finishTime: "2025-09-17 09:49:19",
              active: 0
            }
          ],
          subscription: false,
          telegram: false,
          activeSmsNotif: false,
          activeNotifTel: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label: "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
            value: "SpouseBirthday"
          },
          {
            label:
              "\u0633\u0627\u0644\u06af\u0631\u062f \u0622\u0634\u0646\u0627\u06cc\u06cc",
            value: "MeetingAnniversary"
          },
          {
            label:
              "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
            value: "WeddingAnniversary"
          },
          {
            label: "\u062a\u0648\u0644\u062f \u0641\u0631\u0632\u0646\u062f",
            value: "ChildBirthday"
          },
          {
            label:
              "\u0631\u0648\u06cc\u062f\u0627\u062f \u0634\u062e\u0635\u06cc",
            value: "PersonalEvent"
          }
        ]
      },
      {
        path: "dialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.select2.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.select2.type;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "datePickers.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "date",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "switchbest3.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.select2.smsActive && $props.subscription;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "isChecked";
              }
              throw e;
            }
          })()
      },
      {
        path: "select2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "refresh",
        type: "writable",
        variableType: "text",

        valueProp: "refresh",
        onChangeProp: "onRefreshChange"
      },
      {
        path: "swiperSlider.activeSlideIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "swiperSlider.lockSlides",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "button6.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button6.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderSetting.refresh",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "slide",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.localStorage.getItem("reminder_slide");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "shimmerData",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            id: "04d77165-ab7d-4537-86ba-1099e4f66091-1",
            progressGroupId: null,
            userId: "1",
            doctorId: "21353",
            name: "\u0631\u0648\u0632 \u0632\u0646 \u0648 \u0645\u0627\u062f\u0631",
            text: "\u0648\u0644\u0627\u062f\u062a \u062d\u0636\u0631\u062a \u0641\u0627\u0637\u0645\u0647 \u0632\u0647\u0631\u0627 (\u0633)",
            actionText: null,
            canSkip: null,
            actionIcon: null,
            actionType: null,
            action: null,
            type: "occasion",
            category: "notification",
            category_fa:
              "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
            status: "waiting",
            done: false,
            date: "2025-12-11T00:00:00.000Z",
            dependId: null,
            dependAt: null,
            exclude: [],
            order: 1,
            priority: 10,
            createdAt: "2025-09-08T07:45:09.172Z",
            updatedAt: "2025-09-08T07:45:09.172Z"
          },
          {
            id: "04d77165-ab7d-4537-86ba-1099e4f66091-2",
            progressGroupId: null,
            userId: "1",
            doctorId: "21353",
            name: "\u0631\u0648\u0632 \u062f\u062e\u062a\u0631",
            text: "\u0648\u0644\u0627\u062f\u062a \u062d\u0636\u0631\u062a \u0645\u0639\u0635\u0648\u0645\u0647 (\u0633)",
            actionText: null,
            canSkip: null,
            actionIcon: null,
            actionType: null,
            action: null,
            type: "occasion",
            category: "notification",
            category_fa:
              "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
            status: "waiting",
            done: false,
            date: "2026-04-19T00:00:00.000Z",
            dependId: null,
            dependAt: null,
            exclude: [],
            order: 2,
            priority: 10,
            createdAt: "2025-09-08T07:45:09.172Z",
            updatedAt: "2025-09-08T07:45:09.172Z"
          },
          {
            id: "04d77165-ab7d-4537-86ba-1099e4f66091-3",
            progressGroupId: null,
            userId: "1",
            doctorId: "21353",
            name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u0632\u0646",
            text: "International Women's Day",
            actionText: null,
            canSkip: null,
            actionIcon: null,
            actionType: null,
            action: null,
            type: "occasion",
            category: "notification",
            category_fa:
              "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
            status: "waiting",
            done: false,
            date: "2026-03-08T00:00:00.000Z",
            dependId: null,
            dependAt: null,
            exclude: [],
            order: 3,
            priority: 10,
            createdAt: "2025-09-08T07:45:09.172Z",
            updatedAt: "2025-09-08T07:45:09.172Z"
          },
          {
            id: "04d77165-ab7d-4537-86ba-1099e4f66091-4",
            progressGroupId: null,
            userId: "1",
            doctorId: "21353",
            name: "\u0648\u0644\u0646\u062a\u0627\u06cc\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642)",
            text: "\u0631\u0648\u0632 \u0639\u0634\u0642 \u062c\u0647\u0627\u0646\u06cc",
            actionText: null,
            canSkip: null,
            actionIcon: null,
            actionType: null,
            action: null,
            type: "occasion",
            category: "notification",
            category_fa:
              "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
            status: "waiting",
            done: false,
            date: "2026-02-14T00:00:00.000Z",
            dependId: null,
            dependAt: null,
            exclude: [],
            order: 4,
            priority: 10,
            createdAt: "2025-09-08T07:45:09.172Z",
            updatedAt: "2025-09-08T07:45:09.172Z"
          },
          {
            id: "04d77165-ab7d-4537-86ba-1099e4f66091-5",
            progressGroupId: null,
            userId: "1",
            doctorId: "21353",
            name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
            text: "\u0631\u0648\u0632 \u0632\u0646 \u0648 \u0639\u0634\u0642 \u062f\u0631 \u0627\u06cc\u0631\u0627\u0646 \u0628\u0627\u0633\u062a\u0627\u0646",
            actionText: null,
            canSkip: null,
            actionIcon: null,
            actionType: null,
            action: null,
            type: "occasion",
            category: "notification",
            category_fa:
              "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
            status: "waiting",
            done: false,
            date: "2026-02-18T00:00:00.000Z",
            dependId: null,
            dependAt: null,
            exclude: [],
            order: 5,
            priority: 10,
            createdAt: "2025-09-08T07:45:09.172Z",
            updatedAt: "2025-09-08T07:45:09.172Z"
          },
          {
            id: "04d77165-ab7d-4537-86ba-1099e4f66091-6",
            progressGroupId: null,
            userId: "1",
            doctorId: "21353",
            name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631\u0627\u0646",
            text: "International Day of the Girl Child",
            actionText: null,
            canSkip: null,
            actionIcon: null,
            actionType: null,
            action: null,
            type: "occasion",
            category: "notification",
            category_fa:
              "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
            status: "waiting",
            done: false,
            date: "2026-10-11T00:00:00.000Z",
            dependId: null,
            dependAt: null,
            exclude: [],
            order: 6,
            priority: 10,
            createdAt: "2025-09-08T07:45:09.172Z",
            updatedAt: "2025-09-08T07:45:09.172Z"
          },
          {
            id: "04d77165-ab7d-4537-86ba-1099e4f66091-7",
            progressGroupId: null,
            userId: "1",
            doctorId: "21353",
            name: "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
            text: "",
            actionText: null,
            canSkip: null,
            actionIcon: null,
            actionType: null,
            action: null,
            type: "SpouseBirthday",
            category: "personal",
            category_fa: "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
            status: "waiting",
            done: false,
            date: "0000-00-00T00:00:00.000Z",
            dependId: null,
            dependAt: null,
            exclude: [],
            order: 7,
            priority: 10,
            createdAt: "2025-09-08T07:45:09.172Z",
            updatedAt: "2025-09-08T07:45:09.172Z"
          },
          {
            id: "04d77165-ab7d-4537-86ba-1099e4f66091-8",
            progressGroupId: null,
            userId: "1",
            doctorId: "21353",
            name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0622\u0634\u0646\u0627\u06cc\u06cc",
            text: "",
            actionText: null,
            canSkip: null,
            actionIcon: null,
            actionType: null,
            action: null,
            type: "MeetingAnniversary",
            category: "personal",
            category_fa:
              "\u0633\u0627\u0644\u06af\u0631\u062f \u0622\u0634\u0646\u0627\u06cc\u06cc",
            status: "waiting",
            done: false,
            date: "0000-00-00T00:00:00.000Z",
            dependId: null,
            dependAt: null,
            exclude: [],
            order: 8,
            priority: 10,
            createdAt: "2025-09-08T07:45:09.172Z",
            updatedAt: "2025-09-08T07:45:09.172Z"
          }
        ]
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "blue"
      },
      {
        path: "button3.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button3.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderSetting.tel",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.activeNotifTel;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "reminderSetting.sms",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "reminderSetting2.refresh",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "reminderSetting2.tel",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.activeNotifTel;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "reminderSetting2.sms",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <Dialog
          data-plasmic-name={"dialog"}
          data-plasmic-override={overrides.dialog}
          className={classNames("__wab_instance", sty.dialog)}
          onOpendialogChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog", "opendialog"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          opendialog={generateStateValueProp($state, ["dialog", "opendialog"])}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ka3Jm)}>
            <div className={classNames(projectcss.all, sty.freeBox__y8LJx)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bijdP
                )}
              >
                {"\u0639\u0646\u0648\u0627\u0646 "}
              </div>
              <Input
                data-plasmic-name={"input"}
                data-plasmic-override={overrides.input}
                className={classNames("__wab_instance", sty.input)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["input", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                placeholder={
                  "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 \u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631\u0645"
                }
                type={"text"}
                value={generateStateValueProp($state, ["input", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__hK5R)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3JyFy
                )}
              >
                {"\u0646\u0648\u0639 "}
              </div>
              <Select
                data-plasmic-name={"select"}
                data-plasmic-override={overrides.select}
                disabled={(() => {
                  try {
                    return $state.select2.type;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["select", "open"])}
                options={(() => {
                  try {
                    return Object.keys($state.select2).length == 0
                      ? $state.type.filter(i => {
                          if (i.value === "ChildBirthday") {
                            const count = $props.data.filter(
                              a => a.type === i.value
                            ).length;
                            return count < 4;
                          } else {
                            return !$props.data.some(a => a.type === i.value);
                          }
                        })
                      : $state.type;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                placeholder={
                  "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 \u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c"
                }
                triggerClassName={classNames("__wab_instance", sty.select)}
                value={generateStateValueProp($state, ["select", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__sQJd)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2RWLw
                )}
              >
                {
                  "\u062a\u0627\u0631\u06cc\u062e \u0631\u0648\u06cc\u062f\u0627\u062f"
                }
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__ss7CV)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDialog2Opendialog"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog2", "opendialog"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialog2Opendialog"] != null &&
                    typeof $steps["updateDialog2Opendialog"] === "object" &&
                    typeof $steps["updateDialog2Opendialog"].then === "function"
                  ) {
                    $steps["updateDialog2Opendialog"] = await $steps[
                      "updateDialog2Opendialog"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pdomG
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.date.f;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 1404/1/1";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__v4P1)}>
              <Switchbest
                data-plasmic-name={"switchbest3"}
                data-plasmic-override={overrides.switchbest3}
                className={classNames("__wab_instance", sty.switchbest3)}
                isChecked={
                  generateStateValueProp($state, [
                    "switchbest3",
                    "isChecked"
                  ]) ?? false
                }
                isDisabled={(() => {
                  try {
                    return !$props.subscription;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "switchbest3",
                      "isChecked"
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d1Zl
                  )}
                >
                  {
                    "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc  \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc  \u0628\u0647 \u0635\u0648\u0631\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0648 \u062a\u0644\u06af\u0631\u0627\u0645"
                  }
                </div>
              </Switchbest>
            </div>
            <Button
              data-plasmic-name={"button5"}
              data-plasmic-override={overrides.button5}
              className={classNames("__wab_instance", sty.button5)}
              color={generateStateValueProp($state, ["button5", "color"])}
              load={generateStateValueProp($state, ["button5", "load"])}
              loading={generateStateValueProp($state, ["button5", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateButton5Loading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["button5", "loading"]
                        },
                        operation: 4,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateButton5Loading"] != null &&
                  typeof $steps["updateButton5Loading"] === "object" &&
                  typeof $steps["updateButton5Loading"].then === "function"
                ) {
                  $steps["updateButton5Loading"] = await $steps[
                    "updateButton5Loading"
                  ];
                }

                $steps["insert"] =
                  Object.keys($state.select2).length == 0
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "PUT",
                            "https://n8n.staas.ir/webhook/hamyar/reminder",
                            undefined,
                            (() => {
                              try {
                                return {
                                  man_id: $props.manId,
                                  name: $state.input.value,
                                  date_greg: $state.date.g,
                                  date_shamsi: $state.date.f,
                                  type: $state.select.value,
                                  smsActive: $state.switchbest3.isChecked
                                    ? 1
                                    : 0
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["insert"] != null &&
                  typeof $steps["insert"] === "object" &&
                  typeof $steps["insert"].then === "function"
                ) {
                  $steps["insert"] = await $steps["insert"];
                }

                $steps["update"] =
                  Object.keys($state.select2).length != 0
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://n8n.staas.ir/webhook/hamyar/reminder",
                            undefined,
                            (() => {
                              try {
                                return {
                                  id: $state.select2.id,
                                  man_id: $props.manId,
                                  name: $state.input.value,
                                  date_greg: $state.date.g,
                                  date_shamsi: $state.date.f,
                                  type: $state.select.value,
                                  smsActive: $state.switchbest3.isChecked
                                    ? 1
                                    : 0
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["update"] != null &&
                  typeof $steps["update"] === "object" &&
                  typeof $steps["update"].then === "function"
                ) {
                  $steps["update"] = await $steps["update"];
                }

                $steps["invokeGlobalAction2"] =
                  $steps.insert?.data?.success == true ||
                  $steps.update?.data?.success == true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                            "bottom-center",
                            2000
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["invokeGlobalAction2"] != null &&
                  typeof $steps["invokeGlobalAction2"] === "object" &&
                  typeof $steps["invokeGlobalAction2"].then === "function"
                ) {
                  $steps["invokeGlobalAction2"] = await $steps[
                    "invokeGlobalAction2"
                  ];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.refresh += "1");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateButton5Load2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["button5", "loading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateButton5Load2"] != null &&
                  typeof $steps["updateButton5Load2"] === "object" &&
                  typeof $steps["updateButton5Load2"].then === "function"
                ) {
                  $steps["updateButton5Load2"] = await $steps[
                    "updateButton5Load2"
                  ];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button5", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button5", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button5", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__z7Tnh
                )}
              >
                {
                  "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0630\u062e\u06cc\u0631\u0647"
                }
              </div>
            </Button>
          </div>
        </Dialog>
        <Dialog
          data-plasmic-name={"dialog2"}
          data-plasmic-override={overrides.dialog2}
          className={classNames("__wab_instance", sty.dialog2)}
          onOpendialogChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog2", "opendialog"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          opendialog={generateStateValueProp($state, ["dialog2", "opendialog"])}
        >
          <div className={classNames(projectcss.all, sty.freeBox__pNTja)}>
            <DatePickers
              data-plasmic-name={"datePickers"}
              data-plasmic-override={overrides.datePickers}
              SelectedDay={10}
              SelectedMonth={10}
              SelectedYear={1379}
              className={classNames("__wab_instance", sty.datePickers)}
              customYears={[]}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "datePickers",
                  "value"
                ]).apply(null, eventArgs);
              }}
              selectedValues={generateStateValueProp($state, [
                "datePickers",
                "value"
              ])}
            />

            <Button
              data-plasmic-name={"button4"}
              data-plasmic-override={overrides.button4}
              className={classNames("__wab_instance", sty.button4)}
              color={generateStateValueProp($state, ["button4", "color"])}
              load={generateStateValueProp($state, ["button4", "load"])}
              loading={generateStateValueProp($state, ["button4", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateDate"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["date"]
                        },
                        operation: 0,
                        value: (() => {
                          const { year, month, day, gregorian } =
                            $state.datePickers.value;
                          const f = `${year}/${month}/${day}`;
                          let gYear = new Date().getFullYear();
                          const gMonth = gregorian.month;
                          const gDay = gregorian.day;
                          let birthdayThisYear = new Date(
                            gYear,
                            gMonth - 1,
                            gDay
                          );
                          const today = new Date();
                          if (birthdayThisYear < today) {
                            gYear += 1;
                          }
                          const g = `${gYear}-${String(gMonth).padStart(
                            2,
                            "0"
                          )}-${String(gDay).padStart(2, "0")}`;
                          const result = {
                            f,
                            g
                          };
                          return result;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDate"] != null &&
                  typeof $steps["updateDate"] === "object" &&
                  typeof $steps["updateDate"].then === "function"
                ) {
                  $steps["updateDate"] = await $steps["updateDate"];
                }

                $steps["updateDialog2Opendialog"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dialog2", "opendialog"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialog2Opendialog"] != null &&
                  typeof $steps["updateDialog2Opendialog"] === "object" &&
                  typeof $steps["updateDialog2Opendialog"].then === "function"
                ) {
                  $steps["updateDialog2Opendialog"] = await $steps[
                    "updateDialog2Opendialog"
                  ];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button4", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button4", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button4", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bGhoM
                )}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </div>
            </Button>
          </div>
        </Dialog>
      </section>
      {(() => {
        try {
          return (() => {
            if ($props.data && $props.data.length !== 0) {
              return true;
            } else {
              return $state.slide;
            }
          })();
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__xMddU)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__kxln7
            )}
          >
            {
              "\u0631\u0648\u06cc\u062f\u0627\u062f \u0647\u0627\u06cc \u067e\u06cc\u0634 \u0631\u0648"
            }
          </div>
          {(() => {
            try {
              return $props.data && $props.data?.length !== 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"todayMeeting2"}
              data-plasmic-override={overrides.todayMeeting2}
              className={classNames(projectcss.all, sty.todayMeeting2)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return (() => {
                      try {
                        const groupsMap = new Map();
                        $props.data.forEach(t => {
                          let parsedDates;
                          try {
                            parsedDates = t.dates ? JSON.parse(t.dates) : [];
                          } catch (e) {
                            parsedDates = [];
                          }
                          t.telegramId = $props.telegramId;
                          t.phoneNumber = $props.phoneNumber;
                          t.token1 = $props.token;
                          t.liomId = $props.manId;
                          const key = parsedDates[0] || "__noDate__";
                          if (!groupsMap.has(key)) groupsMap.set(key, []);
                          groupsMap.get(key).push(t);
                        });
                        const groups = Array.from(groupsMap.entries())
                          .sort((a, b) => {
                            if (a[0] === "__noDate__") return 1;
                            if (b[0] === "__noDate__") return -1;
                            const dateA = new Date(a[0]);
                            const dateB = new Date(b[0]);
                            const timeA = dateA.getTime();
                            const timeB = dateB.getTime();
                            if (Number.isNaN(timeA)) return 1;
                            if (Number.isNaN(timeB)) return -1;
                            return timeA - timeB;
                          })
                          .map(entry => entry[1]);
                        return groups;
                      } catch {
                        return "?";
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentday = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    data-plasmic-name={"frame22"}
                    data-plasmic-override={overrides.frame22}
                    className={classNames(projectcss.all, sty.frame22)}
                    key={currentIndex}
                  >
                    <div
                      data-plasmic-name={"frame23"}
                      data-plasmic-override={overrides.frame23}
                      className={classNames(projectcss.all, sty.frame23)}
                    >
                      <div
                        data-plasmic-name={"frame24"}
                        data-plasmic-override={overrides.frame24}
                        className={classNames(projectcss.all, sty.frame24)}
                      >
                        <div
                          data-plasmic-name={"frame25"}
                          data-plasmic-override={overrides.frame25}
                          className={classNames(projectcss.all, sty.frame25)}
                        >
                          <div
                            data-plasmic-name={"frame26"}
                            data-plasmic-override={overrides.frame26}
                            className={classNames(projectcss.all, sty.frame26)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xyX1M
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___3Gkze
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___6Fi2N
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (() => {
                                          try {
                                            var date = JSON.parse(
                                              currentday[0].dates
                                            )[0];
                                            function parseISOToLocal(dateStr) {
                                              let [y, m, d] =
                                                dateStr.split("-");
                                              return new Date(y, m - 1, d);
                                            }
                                            let d = parseISOToLocal(date);
                                            return d.toLocaleDateString(
                                              "fa-IR",
                                              { day: "numeric" }
                                            );
                                          } catch {
                                            return "";
                                          }
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Townhall Meeting";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__kf8Ml
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (() => {
                                          try {
                                            var date = JSON.parse(
                                              currentday[0].dates
                                            )[0];
                                            if (date)
                                              return new Date(
                                                date
                                              ).toLocaleDateString("fa-IR", {
                                                month: "long"
                                              });
                                            else return "";
                                          } catch {
                                            return "";
                                          }
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Townhall Meeting";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___03FqS
                                )}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return currentday;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                  const currentItem = __plasmic_item_1;
                                  const currentIndex = __plasmic_idx_1;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__s65D5
                                      )}
                                      key={currentIndex}
                                    >
                                      <Oval3Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__c0H1J
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___3JjUn
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.name;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  );
                                })}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          ) : null}
          {(() => {
            try {
              return !$props.data || $props.data.length === 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"todayMeeting3"}
              data-plasmic-override={overrides.todayMeeting3}
              className={classNames(projectcss.all, sty.todayMeeting3)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return (() => {
                      const groupsMap = new Map();
                      $state.shimmerData.forEach(t => {
                        const key = t.date || "__noDate__";
                        if (!groupsMap.has(key)) groupsMap.set(key, []);
                        groupsMap.get(key).push(t);
                      });
                      const groups = Array.from(groupsMap.entries())
                        .sort((a, b) => {
                          if (a[0] === "__noDate__") return 1;
                          if (b[0] === "__noDate__") return -1;
                          return new Date(a[0]) - new Date(b[0]);
                        })
                        .map(entry => entry[1]);
                      return groups;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentday = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    data-plasmic-name={"frame17"}
                    data-plasmic-override={overrides.frame17}
                    className={classNames(projectcss.all, sty.frame17)}
                    key={currentIndex}
                  >
                    <div
                      data-plasmic-name={"frame18"}
                      data-plasmic-override={overrides.frame18}
                      className={classNames(projectcss.all, sty.frame18)}
                    >
                      <div
                        data-plasmic-name={"frame19"}
                        data-plasmic-override={overrides.frame19}
                        className={classNames(projectcss.all, sty.frame19)}
                      >
                        <div
                          data-plasmic-name={"frame20"}
                          data-plasmic-override={overrides.frame20}
                          className={classNames(projectcss.all, sty.frame20)}
                        >
                          <div
                            data-plasmic-name={"frame21"}
                            data-plasmic-override={overrides.frame21}
                            className={classNames(projectcss.all, sty.frame21)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jlOu
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__vdCp5
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__tahWh
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (() => {
                                          const dateString =
                                            currentday?.[0]?.date;
                                          let formattedDate = "?";
                                          if (dateString) {
                                            const d = new Date(dateString);
                                            if (d.getTime()) {
                                              formattedDate =
                                                d.toLocaleDateString("fa-IR", {
                                                  day: "numeric"
                                                });
                                            }
                                          }
                                          return formattedDate;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Townhall Meeting";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__iIIx9
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (() => {
                                          const dateString =
                                            currentday?.[0]?.date;
                                          let formattedDate = "--";
                                          if (dateString) {
                                            const d = new Date(dateString);
                                            if (d.getTime()) {
                                              formattedDate =
                                                d.toLocaleDateString("fa-IR", {
                                                  month: "long"
                                                });
                                            }
                                          }
                                          return formattedDate;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Townhall Meeting";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <ul
                                data-plasmic-name={"ul"}
                                data-plasmic-override={overrides.ul}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.ul,
                                  sty.ul
                                )}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return currentday;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                  const currentItem = __plasmic_item_1;
                                  const currentIndex = __plasmic_idx_1;
                                  return (
                                    <li
                                      data-plasmic-name={"li"}
                                      data-plasmic-override={overrides.li}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        sty.li
                                      )}
                                      key={currentIndex}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__bL7
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__sBLnT
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.name;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </li>
                                  );
                                })}
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          ) : null}
          {(() => {
            try {
              return (
                !$props.activeNotifTel &&
                !$props.activeSmsNotif &&
                !$props.subscription
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(projectcss.all, sty.freeBox___1Go7U)}
              onClick={async event => {
                const $steps = {};

                $steps["runShop"] = true
                  ? (() => {
                      const actionArgs = { eventRef: $props["shop"] };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runShop"] != null &&
                  typeof $steps["runShop"] === "object" &&
                  typeof $steps["runShop"].then === "function"
                ) {
                  $steps["runShop"] = await $steps["runShop"];
                }
              }}
            >
              <div className={classNames(projectcss.all, sty.freeBox__cGom)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vFcq
                  )}
                >
                  {
                    "\u0628\u0631\u0627\u06cc \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0631\u0648\u06cc\u062f\u0627\u062f \u0647\u0627\u06cc \u0645\u0647\u0645 \u0627\u0632 \u0637\u0631\u06cc\u0642 \u067e\u06cc\u0627\u0645\u06a9 \u06cc\u0627 \u062a\u0644\u06af\u0631\u0627\u0645 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647 \u0631\u0627 \u062a\u0647\u06cc\u0647 \u06a9\u0646\u06cc\u062f."
                  }
                </div>
                <Button
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames("__wab_instance", sty.button3)}
                  color={generateStateValueProp($state, ["button3", "color"])}
                  load={generateStateValueProp($state, ["button3", "load"])}
                  loading={generateStateValueProp($state, [
                    "button3",
                    "loading"
                  ])}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "loading"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cGkq
                    )}
                  >
                    {
                      "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9"
                    }
                  </div>
                </Button>
              </div>
              <LottieWrapper
                data-plasmic-name={"lottie"}
                data-plasmic-override={overrides.lottie}
                animationData={{
                  v: "5.7.4",
                  fr: 60,
                  ip: 0,
                  op: 190,
                  w: 200,
                  h: 200,
                  nm: "Notification_Updated",
                  ddd: 0,
                  assets: [],
                  layers: [
                    {
                      ddd: 0,
                      ind: 1,
                      ty: 4,
                      nm: "Bell 2",
                      sr: 1,
                      ks: {
                        o: { a: 0, k: 100, ix: 11 },
                        r: {
                          a: 1,
                          k: [
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 95,
                              s: [0]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 110,
                              s: [22]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 125,
                              s: [-22]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 140,
                              s: [15]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 155,
                              s: [-10]
                            },
                            { t: 170, s: [0] }
                          ],
                          ix: 10
                        },
                        p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                        a: { a: 0, k: [-14.219, -40.102, 0], ix: 1, l: 2 },
                        s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                      },
                      ao: 0,
                      hasMask: true,
                      masksProperties: [
                        {
                          inv: false,
                          mode: "f",
                          pt: {
                            a: 0,
                            k: {
                              i: [
                                [0, -1.934],
                                [4.932, 0],
                                [0, 0],
                                [0.032, 4.223],
                                [-1.547, 1.676],
                                [0, 26.361],
                                [-18.949, 3.932],
                                [0, 0],
                                [-4.544, 0],
                                [0, -4.544],
                                [0, 0],
                                [0, -20.045],
                                [-4.963, -5.35]
                              ],
                              o: [
                                [-0.033, 4.223],
                                [0, 0],
                                [-4.931, 0],
                                [0, -1.934],
                                [4.963, -5.35],
                                [0, -20.045],
                                [0, 0],
                                [0, -4.544],
                                [4.544, 0],
                                [0, 0],
                                [18.949, 3.932],
                                [0, 26.361],
                                [1.547, 1.676]
                              ],
                              v: [
                                [43.75, 49.5],
                                [35.467, 57.75],
                                [-63.468, 57.75],
                                [-71.75, 49.5],
                                [-69.527, 43.892],
                                [-55.218, 4.125],
                                [-22.25, -35.868],
                                [-22.25, -41.25],
                                [-14, -49.5],
                                [-5.75, -41.25],
                                [-5.75, -35.868],
                                [27.217, 4.125],
                                [41.526, 43.892]
                              ],
                              c: true
                            },
                            ix: 1
                          },
                          o: { a: 0, k: 100, ix: 3 },
                          x: { a: 0, k: 0, ix: 4 },
                          nm: "Bell"
                        }
                      ],
                      shapes: [
                        {
                          ty: "gr",
                          it: [
                            {
                              ty: "rc",
                              d: 1,
                              s: { a: 0, k: [200, 200], ix: 2 },
                              p: { a: 0, k: [0, 0], ix: 3 },
                              r: { a: 0, k: 0, ix: 4 },
                              nm: "Rectangle Path 1",
                              mn: "ADBE Vector Shape - Rect",
                              hd: false
                            },
                            {
                              ty: "fl",
                              c: {
                                a: 0,
                                k: [
                                  0.078431372549, 0.494117647059,
                                  0.898039215686, 1
                                ],
                                ix: 4
                              },
                              o: { a: 0, k: 100, ix: 5 },
                              r: 1,
                              bm: 0,
                              nm: "Fill 1",
                              mn: "ADBE Vector Graphic - Fill",
                              hd: false
                            },
                            {
                              ty: "tr",
                              p: { a: 0, k: [-14.219, 20.398], ix: 2 },
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              r: { a: 0, k: 0, ix: 6 },
                              o: { a: 0, k: 100, ix: 7 },
                              sk: { a: 0, k: 0, ix: 4 },
                              sa: { a: 0, k: 0, ix: 5 },
                              nm: "Transform"
                            }
                          ],
                          nm: "Rectangle 1",
                          np: 3,
                          cix: 2,
                          bm: 0,
                          ix: 1,
                          mn: "ADBE Vector Group",
                          hd: false
                        }
                      ],
                      ip: 95,
                      op: 190,
                      st: 95,
                      bm: 0
                    },
                    {
                      ddd: 0,
                      ind: 2,
                      ty: 4,
                      nm: "Spindle 2",
                      sr: 1,
                      ks: {
                        o: { a: 0, k: 100, ix: 11 },
                        r: {
                          a: 1,
                          k: [
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 95,
                              s: [0]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 110,
                              s: [35]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 125,
                              s: [-35]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 140,
                              s: [25]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 155,
                              s: [-22]
                            },
                            { t: 170, s: [0] }
                          ],
                          ix: 10
                        },
                        p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                        a: { a: 0, k: [-14.219, -40.102, 0], ix: 1, l: 2 },
                        s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                      },
                      ao: 0,
                      hasMask: true,
                      masksProperties: [
                        {
                          inv: false,
                          mode: "f",
                          pt: {
                            a: 0,
                            k: {
                              i: [
                                [0, 9.121],
                                [0, 0],
                                [9.12, 0]
                              ],
                              o: [
                                [0, 0],
                                [0, 9.121],
                                [-9.12, 0]
                              ],
                              v: [
                                [-30.5, 66],
                                [2.5, 66],
                                [-14, 82.5]
                              ],
                              c: true
                            },
                            ix: 1
                          },
                          o: { a: 0, k: 100, ix: 3 },
                          x: { a: 0, k: 0, ix: 4 },
                          nm: "Spindle"
                        }
                      ],
                      shapes: [
                        {
                          ty: "gr",
                          it: [
                            {
                              ty: "rc",
                              d: 1,
                              s: { a: 0, k: [200, 200], ix: 2 },
                              p: { a: 0, k: [0, 0], ix: 3 },
                              r: { a: 0, k: 0, ix: 4 },
                              nm: "Rectangle Path 1",
                              mn: "ADBE Vector Shape - Rect",
                              hd: false
                            },
                            {
                              ty: "fl",
                              c: {
                                a: 0,
                                k: [
                                  0.078431372549, 0.494117647059,
                                  0.898039215686, 1
                                ],
                                ix: 4
                              },
                              o: { a: 0, k: 100, ix: 5 },
                              r: 1,
                              bm: 0,
                              nm: "Fill 1",
                              mn: "ADBE Vector Graphic - Fill",
                              hd: false
                            },
                            {
                              ty: "tr",
                              p: { a: 0, k: [-14.219, 20.398], ix: 2 },
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              r: { a: 0, k: 0, ix: 6 },
                              o: { a: 0, k: 100, ix: 7 },
                              sk: { a: 0, k: 0, ix: 4 },
                              sa: { a: 0, k: 0, ix: 5 },
                              nm: "Transform"
                            }
                          ],
                          nm: "Rectangle 1",
                          np: 3,
                          cix: 2,
                          bm: 0,
                          ix: 1,
                          mn: "ADBE Vector Group",
                          hd: false
                        }
                      ],
                      ip: 95,
                      op: 190,
                      st: 95,
                      bm: 0
                    },
                    {
                      ddd: 0,
                      ind: 3,
                      ty: 4,
                      nm: "Bell",
                      sr: 1,
                      ks: {
                        o: { a: 0, k: 100, ix: 11 },
                        r: {
                          a: 1,
                          k: [
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 0,
                              s: [0]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 15,
                              s: [22]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 30,
                              s: [-22]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 45,
                              s: [15]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 60,
                              s: [-10]
                            },
                            { t: 75, s: [0] }
                          ],
                          ix: 10
                        },
                        p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                        a: { a: 0, k: [-14.219, -40.102, 0], ix: 1, l: 2 },
                        s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                      },
                      ao: 0,
                      hasMask: true,
                      masksProperties: [
                        {
                          inv: false,
                          mode: "f",
                          pt: {
                            a: 0,
                            k: {
                              i: [
                                [0, -1.934],
                                [4.932, 0],
                                [0, 0],
                                [0.032, 4.223],
                                [-1.547, 1.676],
                                [0, 26.361],
                                [-18.949, 3.932],
                                [0, 0],
                                [-4.544, 0],
                                [0, -4.544],
                                [0, 0],
                                [0, -20.045],
                                [-4.963, -5.35]
                              ],
                              o: [
                                [-0.033, 4.223],
                                [0, 0],
                                [-4.931, 0],
                                [0, -1.934],
                                [4.963, -5.35],
                                [0, -20.045],
                                [0, 0],
                                [0, -4.544],
                                [4.544, 0],
                                [0, 0],
                                [18.949, 3.932],
                                [0, 26.361],
                                [1.547, 1.676]
                              ],
                              v: [
                                [43.75, 49.5],
                                [35.467, 57.75],
                                [-63.468, 57.75],
                                [-71.75, 49.5],
                                [-69.527, 43.892],
                                [-55.218, 4.125],
                                [-22.25, -35.868],
                                [-22.25, -41.25],
                                [-14, -49.5],
                                [-5.75, -41.25],
                                [-5.75, -35.868],
                                [27.217, 4.125],
                                [41.526, 43.892]
                              ],
                              c: true
                            },
                            ix: 1
                          },
                          o: { a: 0, k: 100, ix: 3 },
                          x: { a: 0, k: 0, ix: 4 },
                          nm: "Bell"
                        }
                      ],
                      shapes: [
                        {
                          ty: "gr",
                          it: [
                            {
                              ty: "rc",
                              d: 1,
                              s: { a: 0, k: [200, 200], ix: 2 },
                              p: { a: 0, k: [0, 0], ix: 3 },
                              r: { a: 0, k: 0, ix: 4 },
                              nm: "Rectangle Path 1",
                              mn: "ADBE Vector Shape - Rect",
                              hd: false
                            },
                            {
                              ty: "fl",
                              c: {
                                a: 0,
                                k: [
                                  0.078431372549, 0.494117647059,
                                  0.898039215686, 1
                                ],
                                ix: 4
                              },
                              o: { a: 0, k: 100, ix: 5 },
                              r: 1,
                              bm: 0,
                              nm: "Fill 1",
                              mn: "ADBE Vector Graphic - Fill",
                              hd: false
                            },
                            {
                              ty: "tr",
                              p: { a: 0, k: [-14.219, 20.398], ix: 2 },
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              r: { a: 0, k: 0, ix: 6 },
                              o: { a: 0, k: 100, ix: 7 },
                              sk: { a: 0, k: 0, ix: 4 },
                              sa: { a: 0, k: 0, ix: 5 },
                              nm: "Transform"
                            }
                          ],
                          nm: "Rectangle 1",
                          np: 3,
                          cix: 2,
                          bm: 0,
                          ix: 1,
                          mn: "ADBE Vector Group",
                          hd: false
                        }
                      ],
                      ip: 0,
                      op: 95,
                      st: 0,
                      bm: 0
                    },
                    {
                      ddd: 0,
                      ind: 4,
                      ty: 4,
                      nm: "Spindle",
                      sr: 1,
                      ks: {
                        o: { a: 0, k: 100, ix: 11 },
                        r: {
                          a: 1,
                          k: [
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 0,
                              s: [0]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 15,
                              s: [35]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 30,
                              s: [-35]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 45,
                              s: [25]
                            },
                            {
                              i: { x: [0.667], y: [1] },
                              o: { x: [0.333], y: [0] },
                              t: 60,
                              s: [-22]
                            },
                            { t: 75, s: [0] }
                          ],
                          ix: 10
                        },
                        p: { a: 0, k: [100, 39.5, 0], ix: 2, l: 2 },
                        a: { a: 0, k: [-14.219, -40.102, 0], ix: 1, l: 2 },
                        s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 }
                      },
                      ao: 0,
                      hasMask: true,
                      masksProperties: [
                        {
                          inv: false,
                          mode: "f",
                          pt: {
                            a: 0,
                            k: {
                              i: [
                                [0, 9.121],
                                [0, 0],
                                [9.12, 0]
                              ],
                              o: [
                                [0, 0],
                                [0, 9.121],
                                [-9.12, 0]
                              ],
                              v: [
                                [-30.5, 66],
                                [2.5, 66],
                                [-14, 82.5]
                              ],
                              c: true
                            },
                            ix: 1
                          },
                          o: { a: 0, k: 100, ix: 3 },
                          x: { a: 0, k: 0, ix: 4 },
                          nm: "Spindle"
                        }
                      ],
                      shapes: [
                        {
                          ty: "gr",
                          it: [
                            {
                              ty: "rc",
                              d: 1,
                              s: { a: 0, k: [200, 200], ix: 2 },
                              p: { a: 0, k: [0, 0], ix: 3 },
                              r: { a: 0, k: 0, ix: 4 },
                              nm: "Rectangle Path 1",
                              mn: "ADBE Vector Shape - Rect",
                              hd: false
                            },
                            {
                              ty: "fl",
                              c: {
                                a: 0,
                                k: [
                                  0.078431372549, 0.494117647059,
                                  0.898039215686, 1
                                ],
                                ix: 4
                              },
                              o: { a: 0, k: 100, ix: 5 },
                              r: 1,
                              bm: 0,
                              nm: "Fill 1",
                              mn: "ADBE Vector Graphic - Fill",
                              hd: false
                            },
                            {
                              ty: "tr",
                              p: { a: 0, k: [-14.219, 20.398], ix: 2 },
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              r: { a: 0, k: 0, ix: 6 },
                              o: { a: 0, k: 100, ix: 7 },
                              sk: { a: 0, k: 0, ix: 4 },
                              sa: { a: 0, k: 0, ix: 5 },
                              nm: "Transform"
                            }
                          ],
                          nm: "Rectangle 1",
                          np: 3,
                          cix: 2,
                          bm: 0,
                          ix: 1,
                          mn: "ADBE Vector Group",
                          hd: false
                        }
                      ],
                      ip: 0,
                      op: 95,
                      st: 0,
                      bm: 0
                    }
                  ],
                  markers: []
                }}
                className={classNames("__wab_instance", sty.lottie)}
              />
            </div>
          ) : null}
          <Button
            data-plasmic-name={"button2"}
            data-plasmic-override={overrides.button2}
            className={classNames("__wab_instance", sty.button2)}
            color={generateStateValueProp($state, ["button2", "color"])}
            endIcon={
              <Icon270Icon
                className={classNames(projectcss.all, sty.svg__k7GJq)}
                role={"img"}
              />
            }
            load={generateStateValueProp($state, ["button2", "load"])}
            loading={generateStateValueProp($state, ["button2", "loading"])}
            onClick={async event => {
              const $steps = {};

              $steps["runSetting"] = true
                ? (() => {
                    const actionArgs = { eventRef: $props["setting"] };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runSetting"] != null &&
                typeof $steps["runSetting"] === "object" &&
                typeof $steps["runSetting"].then === "function"
              ) {
                $steps["runSetting"] = await $steps["runSetting"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return ($state.refresh = +"1");
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
            onColorChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button2", "color"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onLoadChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button2", "load"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onLoadingChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button2", "loading"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showEndIcon={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kiqd2
              )}
            >
              {
                "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0627\u0631\u0633\u0627\u0644 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc"
              }
            </div>
          </Button>
        </div>
      ) : null}
      {(() => {
        try {
          return (() => {
            if (!$props.data || $props.data.length === 0) {
              return !$state.slide;
            } else {
              return false;
            }
          })();
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__x6OL)}>
          <div className={classNames(projectcss.all, sty.freeBox__naPbd)}>
            {(() => {
              try {
                return $state.swiperSlider.activeSlideIndex > 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <ChevronRightIcon
                className={classNames(projectcss.all, sty.svg__n7O1P)}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return ($state.swiperSlider.activeSlideIndex -= 1);
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                role={"img"}
              />
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__lo4C7)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return [2, 3];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Line
                    data-plasmic-name={"line"}
                    data-plasmic-override={overrides.line}
                    active={(() => {
                      try {
                        return (
                          $state.swiperSlider.activeSlideIndex == currentIndex
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "active";
                        }
                        throw e;
                      }
                    })()}
                    className={classNames("__wab_instance", sty.line)}
                    key={currentIndex}
                    style2={(() => {
                      try {
                        return {
                          width:
                            $state.swiperSlider.activeSlideIndex == currentIndex
                              ? "60%"
                              : "40%"
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                );
              })}
            </div>
          </div>
          <SwiperSlider
            data-plasmic-name={"swiperSlider"}
            data-plasmic-override={overrides.swiperSlider}
            activeBulletColor={
              hasVariant(globalVariants, "newView", "newView")
                ? "#1264D1"
                : true
                ? "#7444BC"
                : undefined
            }
            activeSlideIndex={generateStateValueProp($state, [
              "swiperSlider",
              "activeSlideIndex"
            ])}
            autoplay={false}
            autoplayDelay={3000}
            bulletColor={true ? "var(--antd-colorTextSecondary)" : undefined}
            className={classNames("__wab_instance", sty.swiperSlider)}
            disablePaginationClick={false}
            lockSlides={generateStateValueProp($state, [
              "swiperSlider",
              "lockSlides"
            ])}
            loop={false}
            onActiveSlideIndexChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "swiperSlider",
                "activeSlideIndex"
              ]).apply(null, eventArgs);
            }}
            onLockSlidesChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "swiperSlider",
                "lockSlides"
              ]).apply(null, eventArgs);
            }}
            showNavigationButtons={false}
            showPagination={false}
          >
            <div
              data-plasmic-name={"slide1"}
              data-plasmic-override={overrides.slide1}
              className={classNames(projectcss.all, sty.slide1)}
              style={(() => {
                try {
                  return {
                    height: "75dvh"
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div className={classNames(projectcss.all, sty.freeBox__yJoEg)}>
                <div className={classNames(projectcss.all, sty.freeBox__gpjvc)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qy2X)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__f6XH
                      )}
                    >
                      {
                        "\u062b\u0628\u062a \u0631\u0648\u06cc\u062f\u0627\u062f \u0647\u0627"
                      }
                    </div>
                    <Button
                      data-plasmic-name={"button6"}
                      data-plasmic-override={overrides.button6}
                      className={classNames("__wab_instance", sty.button6)}
                      color={generateStateValueProp($state, [
                        "button6",
                        "color"
                      ])}
                      endIcon={
                        <Icon283Icon
                          className={classNames(projectcss.all, sty.svg__gLyNi)}
                          role={"img"}
                        />
                      }
                      load={generateStateValueProp($state, ["button6", "load"])}
                      loading={generateStateValueProp($state, [
                        "button6",
                        "loading"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.select2 = {};
                                    return ($state.date = {});
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["updateDialogOpendialog"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog", "opendialog"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogOpendialog"] != null &&
                          typeof $steps["updateDialogOpendialog"] ===
                            "object" &&
                          typeof $steps["updateDialogOpendialog"].then ===
                            "function"
                        ) {
                          $steps["updateDialogOpendialog"] = await $steps[
                            "updateDialogOpendialog"
                          ];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button6",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button6",
                            "load"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadingChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button6",
                            "loading"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      showEndIcon={true}
                      size={"compact"}
                    >
                      {"\u0627\u0641\u0632\u0648\u062f\u0646 "}
                    </Button>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rUpbX
                    )}
                  >
                    {
                      "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062a\u0627\u0631\u06cc\u062e \u0647\u0627\u06cc \u0645\u0647\u0645 \u0631\u0648 \u0631\u0648\u0634\u0646 \u06a9\u0646 \u062a\u0627 \u0647\u06cc\u0686 \u0648\u0642\u062a \u0641\u0631\u0627\u0645\u0648\u0634 \u0646\u06a9\u0646\u06cc"
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__kcpB)}>
                  <ReminderSetting
                    data-plasmic-name={"reminderSetting"}
                    data-plasmic-override={overrides.reminderSetting}
                    activeNotifTel={(() => {
                      try {
                        return $props.activeNotifTel;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    activeSmsNotif={(() => {
                      try {
                        return $props.activeSmsNotif;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    className={classNames(
                      "__wab_instance",
                      sty.reminderSetting
                    )}
                    data={(() => {
                      try {
                        return $props.data || [];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              id: "04d77165-ab7d-4537-86ba-1099e4f66091-1",
                              progressGroupId: null,
                              userId: "1",
                              doctorId: "21353",
                              name: "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
                              text: "",
                              actionText: null,
                              canSkip: null,
                              actionIcon: null,
                              actionType: null,
                              action: null,
                              type: "SpouseBirthday",
                              category: "personal",
                              category_fa:
                                "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
                              status: "waiting",
                              done: false,
                              date: "2025-09-10T00:00:00.000Z",
                              dependId: null,
                              dependAt: null,
                              exclude: [],
                              order: 7,
                              priority: 10,
                              createdAt: "2025-09-08T07:45:09.172Z",
                              updatedAt: "2025-09-08T07:45:09.172Z"
                            },
                            {
                              id: "d2e905f3-2837-4bda-8404-368f6a63527b-1",
                              progressGroupId: null,
                              userId: "1",
                              doctorId: "21353",
                              name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
                              text: "",
                              actionText: null,
                              canSkip: null,
                              actionIcon: null,
                              actionType: null,
                              action: null,
                              type: "WeddingAnniversary",
                              category: "notification",
                              category_fa:
                                "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                              status: "waiting",
                              done: false,
                              date: "2025-10-01T00:00:00.000Z",
                              dependId: null,
                              dependAt: null,
                              exclude: [],
                              order: 9,
                              priority: 10,
                              createdAt: "2025-09-08T08:47:52.446Z",
                              updatedAt: "2025-09-08T08:47:52.446Z"
                            },
                            {
                              id: "04d77165-ab7d-4537-86ba-1099e4f66091-2",
                              progressGroupId: null,
                              userId: "1",
                              doctorId: "21353",
                              name: "\u0648\u0644\u0646\u062a\u0627\u06cc\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642)",
                              text: "\u0631\u0648\u0632 \u0639\u0634\u0642 \u062c\u0647\u0627\u0646\u06cc",
                              actionText: null,
                              canSkip: null,
                              actionIcon: null,
                              actionType: null,
                              action: null,
                              type: "occasion",
                              category: "notification",
                              category_fa:
                                "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                              status: "waiting",
                              done: false,
                              date: "2026-02-14T00:00:00.000Z",
                              dependId: null,
                              dependAt: null,
                              exclude: [],
                              order: 4,
                              priority: 10,
                              createdAt: "2025-09-08T07:50:00.000Z",
                              updatedAt: "2025-09-08T07:50:00.000Z"
                            },
                            {
                              id: "04d77165-ab7d-4537-86ba-1099e4f66091-3",
                              progressGroupId: null,
                              userId: "1",
                              doctorId: "21353",
                              name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
                              text: "\u0631\u0648\u0632 \u0632\u0646 \u0648 \u0639\u0634\u0642 \u062f\u0631 \u0627\u06cc\u0631\u0627\u0646 \u0628\u0627\u0633\u062a\u0627\u0646",
                              actionText: null,
                              canSkip: null,
                              actionIcon: null,
                              actionType: null,
                              action: null,
                              type: "occasion",
                              category: "notification",
                              category_fa:
                                "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                              status: "waiting",
                              done: false,
                              date: "2026-02-18T00:00:00.000Z",
                              dependId: null,
                              dependAt: null,
                              exclude: [],
                              order: 5,
                              priority: 10,
                              createdAt: "2025-09-08T07:51:00.000Z",
                              updatedAt: "2025-09-08T07:51:00.000Z"
                            },
                            {
                              id: "04d77165-ab7d-4537-86ba-1099e4f66091-4",
                              progressGroupId: null,
                              userId: "1",
                              doctorId: "21353",
                              name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u0632\u0646",
                              text: "International Women's Day",
                              actionText: null,
                              canSkip: null,
                              actionIcon: null,
                              actionType: null,
                              action: null,
                              type: "occasion",
                              category: "notification",
                              category_fa:
                                "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                              status: "waiting",
                              done: false,
                              date: "2026-03-08T00:00:00.000Z",
                              dependId: null,
                              dependAt: null,
                              exclude: [],
                              order: 3,
                              priority: 10,
                              createdAt: "2025-09-08T07:52:00.000Z",
                              updatedAt: "2025-09-08T07:52:00.000Z"
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    manId={(() => {
                      try {
                        return $props.manId;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onRefreshChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "reminderSetting",
                        "refresh"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["updateRefresh"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["refresh"]
                                },
                                operation: 0,
                                value: $state.refresh + 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateRefresh"] != null &&
                          typeof $steps["updateRefresh"] === "object" &&
                          typeof $steps["updateRefresh"].then === "function"
                        ) {
                          $steps["updateRefresh"] = await $steps[
                            "updateRefresh"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    onSmsChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "reminderSetting",
                        "sms"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($props.activeSmsNotif =
                                    $state.reminderSetting.sms);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    onTelChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "reminderSetting",
                        "tel"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($props.activeNotifTel =
                                    $state.reminderSetting.tel);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    phoneNumber={(() => {
                      try {
                        return $props.phone;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    refresh={generateStateValueProp($state, [
                      "reminderSetting",
                      "refresh"
                    ])}
                    shop={async () => {
                      const $steps = {};

                      $steps["runShop"] = true
                        ? (() => {
                            const actionArgs = { eventRef: $props["shop"] };
                            return (({ eventRef, args }) => {
                              return eventRef?.(...(args ?? []));
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runShop"] != null &&
                        typeof $steps["runShop"] === "object" &&
                        typeof $steps["runShop"].then === "function"
                      ) {
                        $steps["runShop"] = await $steps["runShop"];
                      }
                    }}
                    slide={"_1"}
                    subscription={(() => {
                      try {
                        return $props.subscription;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    tel={generateStateValueProp($state, [
                      "reminderSetting",
                      "tel"
                    ])}
                    telegramId={(() => {
                      try {
                        return $props.telegramId;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    telegramOn={(() => {
                      try {
                        return $props.telegram;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    token={(() => {
                      try {
                        return $props.token;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"slide2"}
              data-plasmic-override={overrides.slide2}
              className={classNames(projectcss.all, sty.slide2)}
              style={(() => {
                try {
                  return {
                    height: "75dvh"
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div className={classNames(projectcss.all, sty.freeBox___6Ix2C)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__drDze
                  )}
                >
                  {
                    "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u0647\u0648\u0634\u0645\u0646\u062f"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fYsCt
                  )}
                >
                  {
                    "\u0645\u0627 \u0628\u0647 \u0645\u0648\u0642\u0639 \u0628\u0647\u062a \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u0645\u06cc\u200c\u06a9\u0646\u06cc\u0645\u060c \u0628\u062f\u0648\u0646 \u0646\u06af\u0631\u0627\u0646\u06cc \u0648 \u0641\u0631\u0627\u0645\u0648\u0634\u06cc."
                  }
                </div>
              </div>
              <ReminderSetting
                data-plasmic-name={"reminderSetting2"}
                data-plasmic-override={overrides.reminderSetting2}
                activeNotifTel={(() => {
                  try {
                    return $props.activeNotifTel;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                activeSmsNotif={(() => {
                  try {
                    return $props.activeSmsNotif;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.reminderSetting2)}
                data={(() => {
                  try {
                    return $props.data || [];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [
                        {
                          id: "04d77165-ab7d-4537-86ba-1099e4f66091-1",
                          progressGroupId: null,
                          userId: "1",
                          doctorId: "21353",
                          name: "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
                          text: "",
                          actionText: null,
                          canSkip: null,
                          actionIcon: null,
                          actionType: null,
                          action: null,
                          type: "SpouseBirthday",
                          category: "personal",
                          category_fa:
                            "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
                          status: "waiting",
                          done: false,
                          date: "2025-09-10T00:00:00.000Z",
                          dependId: null,
                          dependAt: null,
                          exclude: [],
                          order: 7,
                          priority: 10,
                          createdAt: "2025-09-08T07:45:09.172Z",
                          updatedAt: "2025-09-08T07:45:09.172Z"
                        },
                        {
                          id: "d2e905f3-2837-4bda-8404-368f6a63527b-1",
                          progressGroupId: null,
                          userId: "1",
                          doctorId: "21353",
                          name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
                          text: "",
                          actionText: null,
                          canSkip: null,
                          actionIcon: null,
                          actionType: null,
                          action: null,
                          type: "WeddingAnniversary",
                          category: "notification",
                          category_fa:
                            "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                          status: "waiting",
                          done: false,
                          date: "2025-10-01T00:00:00.000Z",
                          dependId: null,
                          dependAt: null,
                          exclude: [],
                          order: 9,
                          priority: 10,
                          createdAt: "2025-09-08T08:47:52.446Z",
                          updatedAt: "2025-09-08T08:47:52.446Z"
                        },
                        {
                          id: "04d77165-ab7d-4537-86ba-1099e4f66091-2",
                          progressGroupId: null,
                          userId: "1",
                          doctorId: "21353",
                          name: "\u0648\u0644\u0646\u062a\u0627\u06cc\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642)",
                          text: "\u0631\u0648\u0632 \u0639\u0634\u0642 \u062c\u0647\u0627\u0646\u06cc",
                          actionText: null,
                          canSkip: null,
                          actionIcon: null,
                          actionType: null,
                          action: null,
                          type: "occasion",
                          category: "notification",
                          category_fa:
                            "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                          status: "waiting",
                          done: false,
                          date: "2026-02-14T00:00:00.000Z",
                          dependId: null,
                          dependAt: null,
                          exclude: [],
                          order: 4,
                          priority: 10,
                          createdAt: "2025-09-08T07:50:00.000Z",
                          updatedAt: "2025-09-08T07:50:00.000Z"
                        },
                        {
                          id: "04d77165-ab7d-4537-86ba-1099e4f66091-3",
                          progressGroupId: null,
                          userId: "1",
                          doctorId: "21353",
                          name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
                          text: "\u0631\u0648\u0632 \u0632\u0646 \u0648 \u0639\u0634\u0642 \u062f\u0631 \u0627\u06cc\u0631\u0627\u0646 \u0628\u0627\u0633\u062a\u0627\u0646",
                          actionText: null,
                          canSkip: null,
                          actionIcon: null,
                          actionType: null,
                          action: null,
                          type: "occasion",
                          category: "notification",
                          category_fa:
                            "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                          status: "waiting",
                          done: false,
                          date: "2026-02-18T00:00:00.000Z",
                          dependId: null,
                          dependAt: null,
                          exclude: [],
                          order: 5,
                          priority: 10,
                          createdAt: "2025-09-08T07:51:00.000Z",
                          updatedAt: "2025-09-08T07:51:00.000Z"
                        },
                        {
                          id: "04d77165-ab7d-4537-86ba-1099e4f66091-4",
                          progressGroupId: null,
                          userId: "1",
                          doctorId: "21353",
                          name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u0632\u0646",
                          text: "International Women's Day",
                          actionText: null,
                          canSkip: null,
                          actionIcon: null,
                          actionType: null,
                          action: null,
                          type: "occasion",
                          category: "notification",
                          category_fa:
                            "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
                          status: "waiting",
                          done: false,
                          date: "2026-03-08T00:00:00.000Z",
                          dependId: null,
                          dependAt: null,
                          exclude: [],
                          order: 3,
                          priority: 10,
                          createdAt: "2025-09-08T07:52:00.000Z",
                          updatedAt: "2025-09-08T07:52:00.000Z"
                        }
                      ];
                    }
                    throw e;
                  }
                })()}
                manId={(() => {
                  try {
                    return $props.manId;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onRefreshChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reminderSetting2",
                    "refresh"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }

                  (async val => {
                    const $steps = {};

                    $steps["updateRefresh"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["refresh"]
                            },
                            operation: 0,
                            value: $state.refresh + 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateRefresh"] != null &&
                      typeof $steps["updateRefresh"] === "object" &&
                      typeof $steps["updateRefresh"].then === "function"
                    ) {
                      $steps["updateRefresh"] = await $steps["updateRefresh"];
                    }
                  }).apply(null, eventArgs);
                }}
                onSmsChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reminderSetting2",
                    "sms"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }

                  (async val => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return ($props.activeSmsNotif =
                                $state.reminderSetting2.sms);
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }).apply(null, eventArgs);
                }}
                onTelChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reminderSetting2",
                    "tel"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }

                  (async val => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return ($props.activeNotifTel =
                                $state.reminderSetting2.tel);
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }).apply(null, eventArgs);
                }}
                phoneNumber={(() => {
                  try {
                    return $props.phone;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                refresh={generateStateValueProp($state, [
                  "reminderSetting2",
                  "refresh"
                ])}
                shop={async () => {
                  const $steps = {};

                  $steps["runShop"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["shop"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runShop"] != null &&
                    typeof $steps["runShop"] === "object" &&
                    typeof $steps["runShop"].then === "function"
                  ) {
                    $steps["runShop"] = await $steps["runShop"];
                  }
                }}
                slide={"_2"}
                subscription={(() => {
                  try {
                    return $props.subscription;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                tel={generateStateValueProp($state, [
                  "reminderSetting2",
                  "tel"
                ])}
                telegramId={(() => {
                  try {
                    return $props.telegramId;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                telegramOn={(() => {
                  try {
                    return $props.telegram;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                token={(() => {
                  try {
                    return $props.token;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          </SwiperSlider>
          <div className={classNames(projectcss.all, sty.freeBox___1Ccif)}>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={generateStateValueProp($state, ["button", "color"])}
              load={generateStateValueProp($state, ["button", "load"])}
              loading={generateStateValueProp($state, ["button", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if ($state.swiperSlider.activeSlideIndex < 1)
                              return ($state.swiperSlider.activeSlideIndex += 1);
                            else {
                              $state.slide = true;
                              window.localStorage.setItem(
                                "reminder_slide",
                                "true"
                              );
                              return ($state.refresh = +"1");
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__esSew
                )}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </div>
            </Button>
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "dialog",
    "input",
    "select",
    "switchbest3",
    "button5",
    "dialog2",
    "datePickers",
    "button4",
    "todayMeeting2",
    "frame22",
    "frame23",
    "frame24",
    "frame25",
    "frame26",
    "todayMeeting3",
    "frame17",
    "frame18",
    "frame19",
    "frame20",
    "frame21",
    "ul",
    "li",
    "button3",
    "lottie",
    "button2",
    "line",
    "swiperSlider",
    "slide1",
    "button6",
    "reminderSetting",
    "slide2",
    "reminderSetting2",
    "button"
  ],
  section: [
    "section",
    "dialog",
    "input",
    "select",
    "switchbest3",
    "button5",
    "dialog2",
    "datePickers",
    "button4"
  ],
  dialog: ["dialog", "input", "select", "switchbest3", "button5"],
  input: ["input"],
  select: ["select"],
  switchbest3: ["switchbest3"],
  button5: ["button5"],
  dialog2: ["dialog2", "datePickers", "button4"],
  datePickers: ["datePickers"],
  button4: ["button4"],
  todayMeeting2: [
    "todayMeeting2",
    "frame22",
    "frame23",
    "frame24",
    "frame25",
    "frame26"
  ],
  frame22: ["frame22", "frame23", "frame24", "frame25", "frame26"],
  frame23: ["frame23", "frame24", "frame25", "frame26"],
  frame24: ["frame24", "frame25", "frame26"],
  frame25: ["frame25", "frame26"],
  frame26: ["frame26"],
  todayMeeting3: [
    "todayMeeting3",
    "frame17",
    "frame18",
    "frame19",
    "frame20",
    "frame21",
    "ul",
    "li"
  ],
  frame17: ["frame17", "frame18", "frame19", "frame20", "frame21", "ul", "li"],
  frame18: ["frame18", "frame19", "frame20", "frame21", "ul", "li"],
  frame19: ["frame19", "frame20", "frame21", "ul", "li"],
  frame20: ["frame20", "frame21", "ul", "li"],
  frame21: ["frame21", "ul", "li"],
  ul: ["ul", "li"],
  li: ["li"],
  button3: ["button3"],
  lottie: ["lottie"],
  button2: ["button2"],
  line: ["line"],
  swiperSlider: [
    "swiperSlider",
    "slide1",
    "button6",
    "reminderSetting",
    "slide2",
    "reminderSetting2"
  ],
  slide1: ["slide1", "button6", "reminderSetting"],
  button6: ["button6"],
  reminderSetting: ["reminderSetting"],
  slide2: ["slide2", "reminderSetting2"],
  reminderSetting2: ["reminderSetting2"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  dialog: typeof Dialog;
  input: typeof Input;
  select: typeof Select;
  switchbest3: typeof Switchbest;
  button5: typeof Button;
  dialog2: typeof Dialog;
  datePickers: typeof DatePickers;
  button4: typeof Button;
  todayMeeting2: "div";
  frame22: "div";
  frame23: "div";
  frame24: "div";
  frame25: "div";
  frame26: "div";
  todayMeeting3: "div";
  frame17: "div";
  frame18: "div";
  frame19: "div";
  frame20: "div";
  frame21: "div";
  ul: "ul";
  li: "li";
  button3: typeof Button;
  lottie: typeof LottieWrapper;
  button2: typeof Button;
  line: typeof Line;
  swiperSlider: typeof SwiperSlider;
  slide1: "div";
  button6: typeof Button;
  reminderSetting: typeof ReminderSetting;
  slide2: "div";
  reminderSetting2: typeof ReminderSetting;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReminder__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReminder__VariantsArgs;
    args?: PlasmicReminder__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReminder__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReminder__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReminder__ArgProps,
          internalVariantPropNames: PlasmicReminder__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReminder__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReminder";
  } else {
    func.displayName = `PlasmicReminder.${nodeName}`;
  }
  return func;
}

export const PlasmicReminder = Object.assign(
  // Top-level PlasmicReminder renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    dialog: makeNodeComponent("dialog"),
    input: makeNodeComponent("input"),
    select: makeNodeComponent("select"),
    switchbest3: makeNodeComponent("switchbest3"),
    button5: makeNodeComponent("button5"),
    dialog2: makeNodeComponent("dialog2"),
    datePickers: makeNodeComponent("datePickers"),
    button4: makeNodeComponent("button4"),
    todayMeeting2: makeNodeComponent("todayMeeting2"),
    frame22: makeNodeComponent("frame22"),
    frame23: makeNodeComponent("frame23"),
    frame24: makeNodeComponent("frame24"),
    frame25: makeNodeComponent("frame25"),
    frame26: makeNodeComponent("frame26"),
    todayMeeting3: makeNodeComponent("todayMeeting3"),
    frame17: makeNodeComponent("frame17"),
    frame18: makeNodeComponent("frame18"),
    frame19: makeNodeComponent("frame19"),
    frame20: makeNodeComponent("frame20"),
    frame21: makeNodeComponent("frame21"),
    ul: makeNodeComponent("ul"),
    li: makeNodeComponent("li"),
    button3: makeNodeComponent("button3"),
    lottie: makeNodeComponent("lottie"),
    button2: makeNodeComponent("button2"),
    line: makeNodeComponent("line"),
    swiperSlider: makeNodeComponent("swiperSlider"),
    slide1: makeNodeComponent("slide1"),
    button6: makeNodeComponent("button6"),
    reminderSetting: makeNodeComponent("reminderSetting"),
    slide2: makeNodeComponent("slide2"),
    reminderSetting2: makeNodeComponent("reminderSetting2"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicReminder
    internalVariantProps: PlasmicReminder__VariantProps,
    internalArgProps: PlasmicReminder__ArgProps
  }
);

export default PlasmicReminder;
/* prettier-ignore-end */
