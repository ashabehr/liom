/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: B6yNtMobOT_E

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicNoname3.module.css"; // plasmic-import: B6yNtMobOT_E/css

import Icon160Icon from "./icons/PlasmicIcon__Icon160"; // plasmic-import: cU7PVNSdSlaD/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicNoname3__VariantMembers = {};
export type PlasmicNoname3__VariantsArgs = {};
type VariantPropType = keyof PlasmicNoname3__VariantsArgs;
export const PlasmicNoname3__VariantProps = new Array<VariantPropType>();

export type PlasmicNoname3__ArgsType = {};
type ArgPropType = keyof PlasmicNoname3__ArgsType;
export const PlasmicNoname3__ArgProps = new Array<ArgPropType>();

export type PlasmicNoname3__OverridesType = {
  root?: Flex__<"div">;
  halamanUtama?: Flex__<"div">;
  svg?: Flex__<"svg">;
  button2?: Flex__<typeof Button>;
  info?: Flex__<typeof Dialog>;
  button?: Flex__<typeof Button>;
};

export interface DefaultNoname3Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNoname3__RenderFunc(props: {
  variants: PlasmicNoname3__VariantsArgs;
  args: PlasmicNoname3__ArgsType;
  overrides: PlasmicNoname3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "info.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "white"
      },
      {
        path: "button2.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"halamanUtama"}
            data-plasmic-override={overrides.halamanUtama}
            className={classNames(projectcss.all, sty.halamanUtama)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ggEJ)}>
              <div className={classNames(projectcss.all, sty.freeBox__mcPtg)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__crqnW)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateInfoOpendialog"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["info", "opendialog"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateInfoOpendialog"] != null &&
                      typeof $steps["updateInfoOpendialog"] === "object" &&
                      typeof $steps["updateInfoOpendialog"].then === "function"
                    ) {
                      $steps["updateInfoOpendialog"] = await $steps[
                        "updateInfoOpendialog"
                      ];
                    }
                  }}
                >
                  <Icon160Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cdcuc
                    )}
                  >
                    {"\u0630\u06a9\u0631 \u0647\u0627\u06cc \u0645\u0646"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7GueD
                  )}
                >
                  {
                    "\u0630\u06a9\u0631 \u0648\u06cc\u0698\u0647\u200c\u06cc \u0646\u0627\u0645 \u0634\u0645\u0627 \u0628\u0631 \u0627\u0633\u0627\u0633 \u062d\u0631\u0648\u0641 \u0627\u0628\u062c\u062f"
                  }
                </div>
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  color={generateStateValueProp($state, ["button2", "color"])}
                  load={generateStateValueProp($state, ["button2", "load"])}
                  loading={generateStateValueProp($state, [
                    "button2",
                    "loading"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateInfoOpendialog"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["info", "opendialog"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateInfoOpendialog"] != null &&
                      typeof $steps["updateInfoOpendialog"] === "object" &&
                      typeof $steps["updateInfoOpendialog"].then === "function"
                    ) {
                      $steps["updateInfoOpendialog"] = await $steps[
                        "updateInfoOpendialog"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "loading"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  {
                    "\u0645\u062d\u0627\u0633\u0628\u0647 \u0648 \u062f\u0631\u06cc\u0627\u0641\u062a \u0630\u06a9\u0631"
                  }
                </Button>
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__dzZGh)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "150px"
                    : "200px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/liom_hamyar/images/image79.svg",
                  fullWidth: 198,
                  fullHeight: 196,
                  aspectRatio: 1.010204
                }}
              />
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mPwwe
              )}
            >
              {"\u0627\u0628\u0632\u0627\u0631 \u0647\u0627"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__vu1Qr)}>
              <div className={classNames(projectcss.all, sty.freeBox__wGn1)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___1A3Gl)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__anIl
                    )}
                  >
                    {"\u0646\u0627\u0645 \u0647\u0645\u0633\u0631"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__h7WIm)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0Isee
                    )}
                  >
                    {"\u0646\u0627\u0645 \u0641\u0631\u0632\u0646\u062f"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hbLYm)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__qizC6)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "auto"
                          : "80px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "50px"
                          : "100px"
                      }
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/liom_hamyar/images/image87.png",
                        fullWidth: 450,
                        fullHeight: 450,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__rithk)}>
                <div className={classNames(projectcss.all, sty.freeBox__cvRP)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gk5SX
                    )}
                  >
                    {"\u062a\u063a\u06cc\u06cc\u0631 \u0646\u0627\u0645"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__o8OpC)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w0AJ
                    )}
                  >
                    {"\u0627\u0646\u0631\u0698\u06cc \u0646\u0627\u0645"}
                  </div>
                </div>
              </div>
            </div>
          </div>
          <Dialog
            data-plasmic-name={"info"}
            data-plasmic-override={overrides.info}
            className={classNames("__wab_instance", sty.info)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["info", "opendialog"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, ["info", "opendialog"])}
          >
            <div className={classNames(projectcss.all, sty.freeBox__mx1V)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__stxkR
                )}
              >
                <div
                  className={projectcss.__wab_expr_html_text}
                  dangerouslySetInnerHTML={{
                    __html: (() => {
                      try {
                        return ` <h5>📿 ذکر ویژه‌ی نام شما بر اساس حروف ابجد </h5>
       <br>
        <p>
            هر نام، فرکانس و انرژی مخصوص به خود را دارد! در علوم عرفانی و معنوی، حروف ابجد یکی از روش‌های کهن برای کشف اسرار نام‌ها و دریافت ذکرهای هماهنگ با آن‌هاست. 
            با محاسبه‌ی عدد ابجدی نامتان، ذکری خاص و متناسب با ارتعاشات وجودی شما مشخص می‌شود که می‌تواند تأثیرات شگفت‌انگیزی بر زندگی‌تان بگذارد.
        </p>
               <br>

        <ul style="margin: 0 28px 0 0;">
            <li>آیا به دنبال آرامش و تمرکز بیشتر هستید؟</li>
            <li>می‌خواهید انرژی مثبت و برکت را در زندگی خود افزایش دهید؟</li>
            <li>به تأثیر تکرار اذکار در جذب خواسته‌ها و بهبود حال روحی اعتقاد دارید؟</li>
        </ul>
               <br>

        <p>تنها کافیست نام خود را وارد کنید تا ذکر منحصر‌به‌فرد خود را دریافت کنید. 
           این ذکر بر اساس محاسبه‌ی دقیق حروف ابجد تعیین شده و می‌تواند راهی برای تعادل درونی، آرامش ذهن و ارتباطی عمیق‌تر با بعد معنوی شما باشد.</p>
                  <br>`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()
                  }}
                />
              </div>
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                color={generateStateValueProp($state, ["button", "color"])}
                load={generateStateValueProp($state, ["button", "load"])}
                loading={generateStateValueProp($state, ["button", "loading"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateInfoOpendialog"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["info", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateInfoOpendialog"] != null &&
                    typeof $steps["updateInfoOpendialog"] === "object" &&
                    typeof $steps["updateInfoOpendialog"].then === "function"
                  ) {
                    $steps["updateInfoOpendialog"] = await $steps[
                      "updateInfoOpendialog"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadingChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "loading"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                {
                  "\u0647\u0645\u06cc\u0646 \u062d\u0627\u0644\u0627 \u0627\u0645\u062a\u062d\u0627\u0646 \u06a9\u0646\u06cc\u062f! "
                }
              </Button>
            </div>
          </Dialog>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "halamanUtama", "svg", "button2", "info", "button"],
  halamanUtama: ["halamanUtama", "svg", "button2"],
  svg: ["svg"],
  button2: ["button2"],
  info: ["info", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  halamanUtama: "div";
  svg: "svg";
  button2: typeof Button;
  info: typeof Dialog;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNoname3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNoname3__VariantsArgs;
    args?: PlasmicNoname3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNoname3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNoname3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNoname3__ArgProps,
          internalVariantPropNames: PlasmicNoname3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNoname3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNoname3";
  } else {
    func.displayName = `PlasmicNoname3.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNoname3 = Object.assign(
  // Top-level PlasmicNoname3 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    halamanUtama: makeNodeComponent("halamanUtama"),
    svg: makeNodeComponent("svg"),
    button2: makeNodeComponent("button2"),
    info: makeNodeComponent("info"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicNoname3
    internalVariantProps: PlasmicNoname3__VariantProps,
    internalArgProps: PlasmicNoname3__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNoname3;
/* prettier-ignore-end */
