/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 1f3SHQQwHGQn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import Switchbest from "../../Switchbest"; // plasmic-import: ofUp1AS5glz5/component
import { DatePickers } from "@/components/DatePickers"; // plasmic-import: Pxh5xTWczGDl/codeComponent
import RadioGroupLiom from "../../RadioGroupLiom"; // plasmic-import: tXN0uQ-uT9R3/component
import CheckboxGroup from "../../CheckboxGroup"; // plasmic-import: AhgoIztCTzjf/component
import Checkbox from "../../Checkbox"; // plasmic-import: IwXl9xUH-ZMp/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSendnotif.module.css"; // plasmic-import: 1f3SHQQwHGQn/css

import Line3Icon from "./icons/PlasmicIcon__Line3"; // plasmic-import: cDBsZfQFOOWa/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon300Icon from "./icons/PlasmicIcon__Icon300"; // plasmic-import: kGRkoZZWjwVN/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon290Icon from "./icons/PlasmicIcon__Icon290"; // plasmic-import: jLdE-DKzPlst/icon
import Icon291Icon from "./icons/PlasmicIcon__Icon291"; // plasmic-import: U9F0Jow4owN9/icon
import Icon305Icon from "./icons/PlasmicIcon__Icon305"; // plasmic-import: oMWvE38W149h/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 32haUKsu6raY/icon

createPlasmicElementProxy;

export type PlasmicSendnotif__VariantMembers = {};
export type PlasmicSendnotif__VariantsArgs = {};
type VariantPropType = keyof PlasmicSendnotif__VariantsArgs;
export const PlasmicSendnotif__VariantProps = new Array<VariantPropType>();

export type PlasmicSendnotif__ArgsType = {
  onClick?: (event: any) => void;
  reportsSelect?: any;
  onReportsSelectChange?: (val: string) => void;
  tabList?: any;
  onTabListChange?: (val: string) => void;
  selectedTab?: number;
  onSelectedTabChange?: (val: string) => void;
  onFilessChange?: (val: string) => void;
  onDatapickerboolChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicSendnotif__ArgsType;
export const PlasmicSendnotif__ArgProps = new Array<ArgPropType>(
  "onClick",
  "reportsSelect",
  "onReportsSelectChange",
  "tabList",
  "onTabListChange",
  "selectedTab",
  "onSelectedTabChange",
  "onFilessChange",
  "onDatapickerboolChange"
);

export type PlasmicSendnotif__OverridesType = {
  frame49?: Flex__<"div">;
  frame25?: Flex__<"div">;
  frame48?: Flex__<"div">;
  frame50?: Flex__<"div">;
  title?: Flex__<typeof TextInput>;
  text?: Flex__<typeof TextInput>;
  antdInput?: Flex__<typeof Input>;
  image2?: Flex__<typeof TextInput>;
  antdInput2?: Flex__<typeof Input>;
  button?: Flex__<typeof Button>;
  action?: Flex__<typeof TextInput>;
  antdInput3?: Flex__<typeof Input>;
  switchbest?: Flex__<typeof Switchbest>;
  title2?: Flex__<typeof TextInput>;
  datePickers?: Flex__<typeof DatePickers>;
  title3?: Flex__<typeof TextInput>;
  radioGroupLiom?: Flex__<typeof RadioGroupLiom>;
  fcm2?: Flex__<typeof TextInput>;
  antdInput6?: Flex__<typeof Input>;
  checkboxGroup?: Flex__<typeof CheckboxGroup>;
  checkbox?: Flex__<typeof Checkbox>;
  topic?: Flex__<typeof TextInput>;
  antdInput8?: Flex__<typeof Input>;
  fcm3?: Flex__<typeof TextInput>;
  antdInput7?: Flex__<typeof Input>;
  checkboxGroup2?: Flex__<typeof CheckboxGroup>;
  checkbox2?: Flex__<typeof Checkbox>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultSendnotifProps {
  onClick?: (event: any) => void;
  reportsSelect?: any;
  onReportsSelectChange?: (val: string) => void;
  tabList?: any;
  onTabListChange?: (val: string) => void;
  selectedTab?: number;
  onSelectedTabChange?: (val: string) => void;
  onFilessChange?: (val: string) => void;
  onDatapickerboolChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSendnotif__RenderFunc(props: {
  variants: PlasmicSendnotif__VariantsArgs;
  args: PlasmicSendnotif__ArgsType;
  overrides: PlasmicSendnotif__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "titre",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9\u200c\u0647\u0627\u06cc \u063a\u06cc\u0631 \u0641\u0639\u0627\u0644 \u0647\u0645\u06cc\u0627\u0631",
            type: "expired_subscriptions",
            api: "endSmsSubs",
            backColor: "#ed5151"
          },
          {
            title:
              "\u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627 - \u06f3 \u0631\u0648\u0632 \u0645\u0627\u0646\u062f\u0647 \u062a\u0627 \u0627\u062a\u0645\u0627\u0645",
            type: "expiring_3_days",
            api: "endSmsSubsByDay",
            backColor: "#FFA500"
          },
          {
            title:
              "\u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627 - \u06f1\u06f0 \u0631\u0648\u0632 \u0645\u0627\u0646\u062f\u0647 \u062a\u0627 \u0627\u062a\u0645\u0627\u0645",
            type: "expiring_10_days",
            api: "endHusbandSub",
            backColor: ""
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0627\u06cc \u0641\u0639\u0627\u0644 \u0647\u0645\u06cc\u0627\u0631",
            type: "active_count",
            api: "hamyarActiveList",
            backColor: ""
          }
        ]
      },
      {
        path: "reportsSelect",
        type: "writable",
        variableType: "object",

        valueProp: "reportsSelect",
        onChangeProp: "onReportsSelectChange"
      },
      {
        path: "tabList",
        type: "writable",
        variableType: "array",

        valueProp: "tabList",
        onChangeProp: "onTabListChange"
      },
      {
        path: "selectedTab",
        type: "writable",
        variableType: "number",

        valueProp: "selectedTab",
        onChangeProp: "onSelectedTabChange"
      },
      {
        path: "text[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "antdInput[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "filess",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({}),

        onChangeProp: "onFilessChange"
      },
      {
        path: "imageload",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "title[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "step",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label: "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u0634\u0646",
            value: "notification"
          },
          { label: "\u06af\u06cc\u0631\u0646\u062f\u0647", value: "target" },
          { label: "\u062a\u0627\u0631\u06cc\u062e", value: "sendTime" }
        ]
      },
      {
        path: "selectstep",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "notification"
      },
      {
        path: "antdInput[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "image2[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "antdInput2[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "button[].loading",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button[].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "action[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "antdInput3[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "fcm2[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "antdInput6[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "radioGroupLiom[].selected",
        type: "private",
        variableType: "text"
      },
      {
        path: "radioGroupLiom[].list",
        type: "private",
        variableType: "array"
      },
      {
        path: "checkboxGroup[][].value",
        type: "private",
        variableType: "array"
      },
      {
        path: "checkbox[][].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "fcm",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "fcm3[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "antdInput7[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "checkboxGroup2[][].value",
        type: "private",
        variableType: "array"
      },
      {
        path: "checkbox2[][].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "userId",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "topic[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "antdInput8[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "title2[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "switchbest[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "title3[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "date",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "time",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "datapickerbool",
        type: "readonly",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onChangeProp: "onDatapickerboolChange"
      },
      {
        path: "datepic",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "datePickers[].value",
        type: "private",
        variableType: "object"
      },
      {
        path: "radioGroupLiom[].selects",
        type: "private",
        variableType: "array"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"frame49"}
      data-plasmic-override={overrides.frame49}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame49
      )}
    >
      <div
        data-plasmic-name={"frame25"}
        data-plasmic-override={overrides.frame25}
        className={classNames(projectcss.all, sty.frame25)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__kcCUf
          )}
        >
          {
            "\u0627\u0631\u0633\u0627\u0644 \u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646"
          }
        </div>
      </div>
      <div
        data-plasmic-name={"frame48"}
        data-plasmic-override={overrides.frame48}
        className={classNames(projectcss.all, sty.frame48)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__k6Rkn)}>
          <Line3Icon
            className={classNames(projectcss.all, sty.svg__gNpDz)}
            role={"img"}
          />
        </div>
      </div>
      <div
        data-plasmic-name={"frame50"}
        data-plasmic-override={overrides.frame50}
        className={classNames(projectcss.all, sty.frame50)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__tErMr)}>
          <div className={classNames(projectcss.all, sty.freeBox__wifYz)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.step;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const step = __plasmic_item_0;
              const stepIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__hrBlc)}
                  key={stepIndex}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__addyD)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__awLjF
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateSelectstep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectstep"]
                                },
                                operation: 0,
                                value: step.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSelectstep"] != null &&
                          typeof $steps["updateSelectstep"] === "object" &&
                          typeof $steps["updateSelectstep"].then === "function"
                        ) {
                          $steps["updateSelectstep"] =
                            await $steps["updateSelectstep"];
                        }
                      }}
                      style={(() => {
                        try {
                          return (() => {
                            var a = $state.step.findIndex(
                              i => i.value == $state.selectstep
                            );
                            if (stepIndex <= a) {
                              return {
                                background:
                                  "var(--plasmic-token-system-primary-hover)",
                                color: "#ffffff"
                              };
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return stepIndex + 1;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iAp7X)}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__a367)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xo0F
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return step.label;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    {(() => {
                      try {
                        return (
                          step.value == "notification" &&
                          $state.selectstep == "notification"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wNvsi
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___45GcK
                          )}
                        >
                          {"\u0645\u0648\u0636\u0648\u0639 \u0645\u062a\u0646"}
                        </div>
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.title),
                            color: "soft",
                            onChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "title",
                                  __plasmic_idx_0,
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            placeholder:
                              "\u0645\u0648\u0636\u0648\u0639 \u0645\u062a\u0646",
                            value:
                              generateStateValueProp($state, [
                                "title",
                                __plasmic_idx_0,
                                "value"
                              ]) ?? ""
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "title[].value",
                                initFunc: ({ $props, $state, $queries }) => ""
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <TextInput
                              data-plasmic-name={"title"}
                              data-plasmic-override={overrides.title}
                              {...child$Props}
                            />
                          );
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bQ0WL
                          )}
                        >
                          {"\u0645\u062a\u0646"}
                        </div>
                        {(() => {
                          const child$Props = {
                            antdInput2: (() => {
                              const child$Props = {
                                "aria-label": ``,
                                bordered: false,
                                className: classNames(
                                  "__wab_instance",
                                  sty.antdInput
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["antdInput", __plasmic_idx_0, "value"],
                                    Input_Helpers
                                  ).apply(null, eventArgs);

                                  (async event => {
                                    const $steps = {};
                                  }).apply(null, eventArgs);
                                },
                                size: "large",
                                value: generateStateValueProp($state, [
                                  "antdInput",
                                  __plasmic_idx_0,
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "antdInput[].value"
                                  }
                                ],
                                [__plasmic_idx_0],
                                Input_Helpers ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "antdInput[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <Input
                                  data-plasmic-name={"antdInput"}
                                  data-plasmic-override={overrides.antdInput}
                                  {...child$Props}
                                />
                              );
                            })(),
                            className: classNames("__wab_instance", sty.text),
                            color: "soft",
                            onChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "text",
                                  __plasmic_idx_0,
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            placeholder:
                              "\u067e\u06cc\u0627\u0645 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f",
                            value:
                              generateStateValueProp($state, [
                                "text",
                                __plasmic_idx_0,
                                "value"
                              ]) ?? ""
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "text[].value",
                                initFunc: ({ $props, $state, $queries }) => ""
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <TextInput
                              data-plasmic-name={"text"}
                              data-plasmic-override={overrides.text}
                              {...child$Props}
                            />
                          );
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tErOc
                          )}
                        >
                          {"\u062a\u0635\u0648\u06cc\u0631"}
                        </div>
                        {(() => {
                          const child$Props = {
                            antdInput2: (() => {
                              const child$Props = {
                                "aria-label": ``,
                                bordered: false,
                                className: classNames(
                                  "__wab_instance",
                                  sty.antdInput2
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["antdInput2", __plasmic_idx_0, "value"],
                                    Input_Helpers
                                  ).apply(null, eventArgs);

                                  (async event => {
                                    const $steps = {};
                                  }).apply(null, eventArgs);
                                },
                                placeholder:
                                  "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644:  https://example.com/image.png",
                                size: "large",
                                value: generateStateValueProp($state, [
                                  "antdInput2",
                                  __plasmic_idx_0,
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "antdInput2[].value"
                                  }
                                ],
                                [__plasmic_idx_0],
                                Input_Helpers ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "antdInput2[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <Input
                                  data-plasmic-name={"antdInput2"}
                                  data-plasmic-override={overrides.antdInput2}
                                  {...child$Props}
                                />
                              );
                            })(),
                            className: classNames("__wab_instance", sty.image2),
                            color: "soft",
                            endIcon: (() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.button
                                ),
                                color: generateStateValueProp($state, [
                                  "button",
                                  __plasmic_idx_0,
                                  "color"
                                ]),
                                load: generateStateValueProp($state, [
                                  "button",
                                  __plasmic_idx_0,
                                  "load"
                                ]),
                                loading: generateStateValueProp($state, [
                                  "button",
                                  __plasmic_idx_0,
                                  "loading"
                                ]),
                                onColorChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "button",
                                      __plasmic_idx_0,
                                      "color"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                },
                                onLoadChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "button",
                                      __plasmic_idx_0,
                                      "load"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                },
                                onLoadingChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "button",
                                      __plasmic_idx_0,
                                      "loading"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                },
                                size: "compact"
                              };

                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "button[].color",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      "perper"
                                  },
                                  {
                                    name: "button[].loading",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  },
                                  {
                                    name: "button[].load",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      false
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <Button
                                  data-plasmic-name={"button"}
                                  data-plasmic-override={overrides.button}
                                  {...child$Props}
                                >
                                  <Icon300Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__pge0S
                                    )}
                                    role={"img"}
                                  />
                                </Button>
                              );
                            })(),
                            onChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "image2",
                                  __plasmic_idx_0,
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            placeholder:
                              "\u0645\u0648\u0636\u0648\u0639 \u0645\u062a\u0646",
                            showEndIcon: true,
                            value:
                              generateStateValueProp($state, [
                                "image2",
                                __plasmic_idx_0,
                                "value"
                              ]) ?? ""
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "image2[].value",
                                initFunc: ({ $props, $state, $queries }) => ""
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <TextInput
                              data-plasmic-name={"image2"}
                              data-plasmic-override={overrides.image2}
                              {...child$Props}
                            />
                          );
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bufxw
                          )}
                        >
                          {"\u0631\u0648\u06cc\u062f\u0627\u062f "}
                        </div>
                        {(() => {
                          const child$Props = {
                            antdInput2: (() => {
                              const child$Props = {
                                "aria-label": ``,
                                bordered: false,
                                className: classNames(
                                  "__wab_instance",
                                  sty.antdInput3
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["antdInput3", __plasmic_idx_0, "value"],
                                    Input_Helpers
                                  ).apply(null, eventArgs);

                                  (async event => {
                                    const $steps = {};
                                  }).apply(null, eventArgs);
                                },
                                placeholder:
                                  " \u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644:  shop#",
                                size: "large",
                                value: generateStateValueProp($state, [
                                  "antdInput3",
                                  __plasmic_idx_0,
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "antdInput3[].value"
                                  }
                                ],
                                [__plasmic_idx_0],
                                Input_Helpers ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "antdInput3[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <Input
                                  data-plasmic-name={"antdInput3"}
                                  data-plasmic-override={overrides.antdInput3}
                                  {...child$Props}
                                />
                              );
                            })(),
                            className: classNames("__wab_instance", sty.action),
                            color: "soft",
                            onChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "action",
                                  __plasmic_idx_0,
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            placeholder:
                              "\u0645\u0648\u0636\u0648\u0639 \u0645\u062a\u0646",
                            value:
                              generateStateValueProp($state, [
                                "action",
                                __plasmic_idx_0,
                                "value"
                              ]) ?? ""
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "action[].value",
                                initFunc: ({ $props, $state, $queries }) => ""
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <TextInput
                              data-plasmic-name={"action"}
                              data-plasmic-override={overrides.action}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return (
                          step.value == "sendTime" &&
                          $state.selectstep == "sendTime"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uKs8Y
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.switchbest
                            ),
                            isChecked:
                              generateStateValueProp($state, [
                                "switchbest",
                                __plasmic_idx_0,
                                "isChecked"
                              ]) ?? false,
                            onChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "switchbest",
                                  __plasmic_idx_0,
                                  "isChecked"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "switchbest[].isChecked",
                                initFunc: ({ $props, $state, $queries }) =>
                                  undefined
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Switchbest
                              data-plasmic-name={"switchbest"}
                              data-plasmic-override={overrides.switchbest}
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jwhEd
                                )}
                              >
                                {
                                  "\u0627\u0631\u0633\u0627\u0644 \u062f\u0631 \u0644\u062d\u0638\u0647"
                                }
                              </div>
                            </Switchbest>
                          );
                        })()}
                        {(() => {
                          try {
                            return $state.switchbest[stepIndex].isChecked
                              ? false
                              : true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aWrIp
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__utH8C
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tWx5E
                                )}
                              >
                                {
                                  "\u062a\u0627\u0631\u06cc\u062e \u0627\u0631\u0633\u0627\u0644"
                                }
                              </div>
                              {(() => {
                                const child$Props = {
                                  antdInput2: (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__adtqg
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__mXbqm
                                        )}
                                      >
                                        {""}
                                      </div>
                                    </div>
                                  ),
                                  className: classNames(
                                    "__wab_instance",
                                    sty.title2
                                  ),
                                  color: "soft",
                                  onChange: async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "title2",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }

                                    (async event => {
                                      const $steps = {};

                                      $steps["updateTitre"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["titre"]
                                              },
                                              operation: 0
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateTitre"] != null &&
                                        typeof $steps["updateTitre"] ===
                                          "object" &&
                                        typeof $steps["updateTitre"].then ===
                                          "function"
                                      ) {
                                        $steps["updateTitre"] =
                                          await $steps["updateTitre"];
                                      }
                                    }).apply(null, eventArgs);
                                  },
                                  onClick: async event => {
                                    const $steps = {};

                                    $steps["updateTitre"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["titre"]
                                            },
                                            operation: 0
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateTitre"] != null &&
                                      typeof $steps["updateTitre"] ===
                                        "object" &&
                                      typeof $steps["updateTitre"].then ===
                                        "function"
                                    ) {
                                      $steps["updateTitre"] =
                                        await $steps["updateTitre"];
                                    }

                                    $steps["updateTitre2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["datapickerbool"]
                                            },
                                            operation: 4,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            const oldValue = $stateGet(
                                              objRoot,
                                              variablePath
                                            );
                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              !oldValue
                                            );
                                            return !oldValue;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateTitre2"] != null &&
                                      typeof $steps["updateTitre2"] ===
                                        "object" &&
                                      typeof $steps["updateTitre2"].then ===
                                        "function"
                                    ) {
                                      $steps["updateTitre2"] =
                                        await $steps["updateTitre2"];
                                    }
                                  },
                                  placeholder:
                                    "\u0645\u0648\u0636\u0648\u0639 \u0645\u062a\u0646",
                                  showStartIcon: true,
                                  startIcon: (
                                    <Icon290Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__rlOoM
                                      )}
                                      role={"img"}
                                    />
                                  ),

                                  value:
                                    generateStateValueProp($state, [
                                      "title2",
                                      __plasmic_idx_0,
                                      "value"
                                    ]) ?? ""
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "title2[].value",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => ""
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <TextInput
                                    data-plasmic-name={"title2"}
                                    data-plasmic-override={overrides.title2}
                                    {...child$Props}
                                  />
                                );
                              })()}
                              {(() => {
                                try {
                                  return $state.datapickerbool ? true : false;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ovUfd
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__hshzG
                                    )}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        SelectedDay: 10,
                                        SelectedMonth: 10,
                                        SelectedYear: 1379,
                                        className: classNames(
                                          "__wab_instance",
                                          sty.datePickers
                                        ),
                                        customYears: [],
                                        hideYear: false,
                                        onChange: async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "datePickers",
                                            __plasmic_idx_0,
                                            "value"
                                          ]).apply(null, eventArgs);

                                          (async selectedValues => {
                                            const $steps = {};

                                            $steps["updateDatepic"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: ["datepic"]
                                                    },
                                                    operation: 0,
                                                    value:
                                                      $state.datePickers[
                                                        stepIndex
                                                      ].value
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateDatepic"] != null &&
                                              typeof $steps["updateDatepic"] ===
                                                "object" &&
                                              typeof $steps["updateDatepic"]
                                                .then === "function"
                                            ) {
                                              $steps["updateDatepic"] =
                                                await $steps["updateDatepic"];
                                            }
                                          }).apply(null, eventArgs);
                                        },
                                        selectedValues: generateStateValueProp(
                                          $state,
                                          [
                                            "datePickers",
                                            __plasmic_idx_0,
                                            "value"
                                          ]
                                        )
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName:
                                              "datePickers[].value"
                                          }
                                        ],
                                        [__plasmic_idx_0],
                                        undefined ?? {},
                                        child$Props
                                      );
                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "datePickers[].value",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) => ({})
                                          }
                                        ],
                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <DatePickers
                                          data-plasmic-name={"datePickers"}
                                          data-plasmic-override={
                                            overrides.datePickers
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </div>
                                </div>
                              ) : null}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ruK5V
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qFHfW
                                )}
                              >
                                {
                                  "\u0632\u0645\u0627\u0646 \u0627\u0631\u0633\u0627\u0644"
                                }
                              </div>
                              {(() => {
                                const child$Props = {
                                  antdInput2: (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___6AoJu
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__jMuf1
                                        )}
                                      >
                                        {""}
                                      </div>
                                    </div>
                                  ),
                                  className: classNames(
                                    "__wab_instance",
                                    sty.title3
                                  ),
                                  color: "soft",
                                  onChange: async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "title3",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onClick: async event => {
                                    const $steps = {};

                                    $steps["updateTitre"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["titre"]
                                            },
                                            operation: 0
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateTitre"] != null &&
                                      typeof $steps["updateTitre"] ===
                                        "object" &&
                                      typeof $steps["updateTitre"].then ===
                                        "function"
                                    ) {
                                      $steps["updateTitre"] =
                                        await $steps["updateTitre"];
                                    }
                                  },
                                  placeholder:
                                    "\u0645\u0648\u0636\u0648\u0639 \u0645\u062a\u0646",
                                  showStartIcon: true,
                                  startIcon: (
                                    <Icon291Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___79DZn
                                      )}
                                      role={"img"}
                                    />
                                  ),

                                  value:
                                    generateStateValueProp($state, [
                                      "title3",
                                      __plasmic_idx_0,
                                      "value"
                                    ]) ?? ""
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "title3[].value",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => ""
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <TextInput
                                    data-plasmic-name={"title3"}
                                    data-plasmic-override={overrides.title3}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return (
                          step.value == "target" &&
                          $state.selectstep == "target"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oc81O
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.radioGroupLiom
                            ),
                            list: generateStateValueProp($state, [
                              "radioGroupLiom",
                              __plasmic_idx_0,
                              "list"
                            ]),
                            onListChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "radioGroupLiom",
                                __plasmic_idx_0,
                                "list"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onSelectedChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "radioGroupLiom",
                                __plasmic_idx_0,
                                "selected"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onSelectsChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "radioGroupLiom",
                                __plasmic_idx_0,
                                "selects"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            selected: generateStateValueProp($state, [
                              "radioGroupLiom",
                              __plasmic_idx_0,
                              "selected"
                            ]),
                            selects: generateStateValueProp($state, [
                              "radioGroupLiom",
                              __plasmic_idx_0,
                              "selects"
                            ])
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "radioGroupLiom[].selected",
                                initFunc: ({ $props, $state, $queries }) =>
                                  "fcm"
                              },
                              {
                                name: "radioGroupLiom[].list",
                                initFunc: ({ $props, $state, $queries }) => [
                                  { label: "fcm", value: "fcm" },
                                  { label: "user id", value: "userId" },
                                  { label: "topic", value: "topic" }
                                ]
                              },
                              {
                                name: "radioGroupLiom[].selects",
                                initFunc: ({ $props, $state, $queries }) => []
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <RadioGroupLiom
                              data-plasmic-name={"radioGroupLiom"}
                              data-plasmic-override={overrides.radioGroupLiom}
                              {...child$Props}
                            />
                          );
                        })()}
                        {(() => {
                          try {
                            return (
                              $state.radioGroupLiom[stepIndex].selected == "fcm"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rsLmo
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xxN7Y
                              )}
                            >
                              {
                                "fcm \u062a\u0648\u06a9\u0646 \u062f\u0633\u062a\u06af\u0627\u0647 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646"
                              }
                            </div>
                            {(() => {
                              const child$Props = {
                                antdInput2: (() => {
                                  const child$Props = {
                                    "aria-label": ``,
                                    bordered: false,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.antdInput6
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        [
                                          "antdInput6",
                                          __plasmic_idx_0,
                                          "value"
                                        ],
                                        Input_Helpers
                                      ).apply(null, eventArgs);

                                      (async event => {
                                        const $steps = {};
                                      }).apply(null, eventArgs);
                                    },
                                    placeholder: "fcm Token",
                                    size: "large",
                                    value: generateStateValueProp($state, [
                                      "antdInput6",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "antdInput6[].value"
                                      }
                                    ],
                                    [__plasmic_idx_0],
                                    Input_Helpers ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "antdInput6[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <Input
                                      data-plasmic-name={"antdInput6"}
                                      data-plasmic-override={
                                        overrides.antdInput6
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })(),
                                className: classNames(
                                  "__wab_instance",
                                  sty.fcm2
                                ),
                                color: "soft",
                                endIcon: (
                                  <Icon305Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__gwaQ9
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["runCode"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return (() => {
                                                  if (
                                                    $state.antdInput6[stepIndex]
                                                      .value.length > 0
                                                  ) {
                                                    $state.fcm.push({
                                                      value:
                                                        $state.antdInput6[
                                                          stepIndex
                                                        ].value,
                                                      check: true
                                                    });
                                                    return ($state.antdInput6[
                                                      stepIndex
                                                    ].value = "");
                                                  }
                                                })();
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runCode"] != null &&
                                        typeof $steps["runCode"] === "object" &&
                                        typeof $steps["runCode"].then ===
                                          "function"
                                      ) {
                                        $steps["runCode"] =
                                          await $steps["runCode"];
                                      }
                                    }}
                                    role={"img"}
                                  />
                                ),

                                onChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "fcm2",
                                      __plasmic_idx_0,
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                },
                                placeholder:
                                  "\u0645\u0648\u0636\u0648\u0639 \u0645\u062a\u0646",
                                showEndIcon: true,
                                value:
                                  generateStateValueProp($state, [
                                    "fcm2",
                                    __plasmic_idx_0,
                                    "value"
                                  ]) ?? ""
                              };

                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "fcm2[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      ""
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <TextInput
                                  data-plasmic-name={"fcm2"}
                                  data-plasmic-override={overrides.fcm2}
                                  {...child$Props}
                                />
                              );
                            })()}
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.fcm;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.checkboxGroup
                                  ),
                                  key: currentIndex,
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "checkboxGroup",
                                      __plasmic_idx_0,
                                      __plasmic_idx_1,
                                      "value"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  options: (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__ofTjZ
                                      )}
                                    >
                                      {(() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.checkbox
                                          ),
                                          isChecked:
                                            generateStateValueProp($state, [
                                              "checkbox",
                                              __plasmic_idx_0,
                                              __plasmic_idx_1,
                                              "isChecked"
                                            ]) ?? false,
                                          onChange: async (
                                            ...eventArgs: any
                                          ) => {
                                            ((...eventArgs) => {
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "checkbox",
                                                  __plasmic_idx_0,
                                                  __plasmic_idx_1,
                                                  "isChecked"
                                                ]
                                              )(eventArgs[0]);
                                            }).apply(null, eventArgs);

                                            if (
                                              eventArgs.length > 1 &&
                                              eventArgs[1] &&
                                              eventArgs[1]._plasmic_state_init_
                                            ) {
                                              return;
                                            }

                                            (async isChecked => {
                                              const $steps = {};

                                              $steps["runCode"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      customFunction:
                                                        async () => {
                                                          return (currentItem.check =
                                                            $state.checkbox[
                                                              stepIndex
                                                            ][currentIndex]
                                                              .isChecked
                                                              ? true
                                                              : false);
                                                        }
                                                    };
                                                    return (({
                                                      customFunction
                                                    }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["runCode"] != null &&
                                                typeof $steps["runCode"] ===
                                                  "object" &&
                                                typeof $steps["runCode"]
                                                  .then === "function"
                                              ) {
                                                $steps["runCode"] =
                                                  await $steps["runCode"];
                                              }
                                            }).apply(null, eventArgs);
                                          }
                                        };

                                        initializePlasmicStates(
                                          $state,
                                          [
                                            {
                                              name: "checkbox[][].isChecked",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) =>
                                                (() => {
                                                  try {
                                                    return currentItem.check;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "isChecked";
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                            }
                                          ],
                                          [__plasmic_idx_0, __plasmic_idx_1]
                                        );
                                        return (
                                          <Checkbox
                                            data-plasmic-name={"checkbox"}
                                            data-plasmic-override={
                                              overrides.checkbox
                                            }
                                            {...child$Props}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__guKfq
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return currentItem.value;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                          </Checkbox>
                                        );
                                      })()}
                                    </div>
                                  ),
                                  showLabel: false,
                                  value: generateStateValueProp($state, [
                                    "checkboxGroup",
                                    __plasmic_idx_0,
                                    __plasmic_idx_1,
                                    "value"
                                  ])
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "checkboxGroup[][].value",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0, __plasmic_idx_1]
                                );
                                return (
                                  <CheckboxGroup
                                    data-plasmic-name={"checkboxGroup"}
                                    data-plasmic-override={
                                      overrides.checkboxGroup
                                    }
                                    {...child$Props}
                                  />
                                );
                              })();
                            })}
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return (
                              $state.radioGroupLiom[stepIndex].selected ==
                              "topic"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aYwp6
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kQaI
                              )}
                            >
                              {
                                "\u062f\u0633\u062a\u0647 \u0628\u0646\u062f\u06cc \u067e\u06cc\u0627\u0645"
                              }
                            </div>
                            {(() => {
                              const child$Props = {
                                antdInput2: (() => {
                                  const child$Props = {
                                    "aria-label": ``,
                                    bordered: false,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.antdInput8
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        [
                                          "antdInput8",
                                          __plasmic_idx_0,
                                          "value"
                                        ],
                                        Input_Helpers
                                      ).apply(null, eventArgs);

                                      (async event => {
                                        const $steps = {};
                                      }).apply(null, eventArgs);
                                    },
                                    placeholder: "message topic",
                                    size: "large",
                                    value: generateStateValueProp($state, [
                                      "antdInput8",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "antdInput8[].value"
                                      }
                                    ],
                                    [__plasmic_idx_0],
                                    Input_Helpers ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "antdInput8[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <Input
                                      data-plasmic-name={"antdInput8"}
                                      data-plasmic-override={
                                        overrides.antdInput8
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })(),
                                className: classNames(
                                  "__wab_instance",
                                  sty.topic
                                ),
                                color: "soft",
                                endIcon: null,
                                onChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "topic",
                                      __plasmic_idx_0,
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                },
                                placeholder:
                                  "\u0645\u0648\u0636\u0648\u0639 \u0645\u062a\u0646",
                                value:
                                  generateStateValueProp($state, [
                                    "topic",
                                    __plasmic_idx_0,
                                    "value"
                                  ]) ?? ""
                              };

                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "topic[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      ""
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <TextInput
                                  data-plasmic-name={"topic"}
                                  data-plasmic-override={overrides.topic}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return (
                              $state.radioGroupLiom[stepIndex].selected ==
                              "userId"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___7By5U
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__olNb
                              )}
                            >
                              {
                                "\u0634\u0646\u0627\u0633\u0647 \u06cc\u06a9\u062a\u0627 \u06a9\u0627\u0631\u0628\u0631"
                              }
                            </div>
                            {(() => {
                              const child$Props = {
                                antdInput2: (() => {
                                  const child$Props = {
                                    "aria-label": ``,
                                    bordered: false,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.antdInput7
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        [
                                          "antdInput7",
                                          __plasmic_idx_0,
                                          "value"
                                        ],
                                        Input_Helpers
                                      ).apply(null, eventArgs);

                                      (async event => {
                                        const $steps = {};
                                      }).apply(null, eventArgs);
                                    },
                                    placeholder: "user Id",
                                    size: "large",
                                    value: generateStateValueProp($state, [
                                      "antdInput7",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "antdInput7[].value"
                                      }
                                    ],
                                    [__plasmic_idx_0],
                                    Input_Helpers ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "antdInput7[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <Input
                                      data-plasmic-name={"antdInput7"}
                                      data-plasmic-override={
                                        overrides.antdInput7
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })(),
                                className: classNames(
                                  "__wab_instance",
                                  sty.fcm3
                                ),
                                color: "soft",
                                endIcon: (
                                  <Icon305Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__jIOr
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["runCode"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return (() => {
                                                  if (
                                                    $state.antdInput7[stepIndex]
                                                      .value.length > 0
                                                  ) {
                                                    $state.userId.push({
                                                      value:
                                                        $state.antdInput7[
                                                          stepIndex
                                                        ].value,
                                                      check: true
                                                    });
                                                    return ($state.antdInput7[
                                                      stepIndex
                                                    ].value = "");
                                                  }
                                                })();
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runCode"] != null &&
                                        typeof $steps["runCode"] === "object" &&
                                        typeof $steps["runCode"].then ===
                                          "function"
                                      ) {
                                        $steps["runCode"] =
                                          await $steps["runCode"];
                                      }
                                    }}
                                    role={"img"}
                                  />
                                ),

                                onChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "fcm3",
                                      __plasmic_idx_0,
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                },
                                placeholder:
                                  "\u0645\u0648\u0636\u0648\u0639 \u0645\u062a\u0646",
                                showEndIcon: true,
                                value:
                                  generateStateValueProp($state, [
                                    "fcm3",
                                    __plasmic_idx_0,
                                    "value"
                                  ]) ?? ""
                              };

                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "fcm3[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      ""
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <TextInput
                                  data-plasmic-name={"fcm3"}
                                  data-plasmic-override={overrides.fcm3}
                                  {...child$Props}
                                />
                              );
                            })()}
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.userId;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.checkboxGroup2
                                  ),
                                  key: currentIndex,
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "checkboxGroup2",
                                      __plasmic_idx_0,
                                      __plasmic_idx_1,
                                      "value"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  options: (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__d6Uqk
                                      )}
                                    >
                                      {(() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.checkbox2
                                          ),
                                          isChecked:
                                            generateStateValueProp($state, [
                                              "checkbox2",
                                              __plasmic_idx_0,
                                              __plasmic_idx_1,
                                              "isChecked"
                                            ]) ?? false,
                                          onChange: async (
                                            ...eventArgs: any
                                          ) => {
                                            ((...eventArgs) => {
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "checkbox2",
                                                  __plasmic_idx_0,
                                                  __plasmic_idx_1,
                                                  "isChecked"
                                                ]
                                              )(eventArgs[0]);
                                            }).apply(null, eventArgs);

                                            if (
                                              eventArgs.length > 1 &&
                                              eventArgs[1] &&
                                              eventArgs[1]._plasmic_state_init_
                                            ) {
                                              return;
                                            }

                                            (async isChecked => {
                                              const $steps = {};

                                              $steps["runCode"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      customFunction:
                                                        async () => {
                                                          return (currentItem.check =
                                                            $state.checkbox2[
                                                              stepIndex
                                                            ][currentIndex]
                                                              .isChecked
                                                              ? true
                                                              : false);
                                                        }
                                                    };
                                                    return (({
                                                      customFunction
                                                    }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["runCode"] != null &&
                                                typeof $steps["runCode"] ===
                                                  "object" &&
                                                typeof $steps["runCode"]
                                                  .then === "function"
                                              ) {
                                                $steps["runCode"] =
                                                  await $steps["runCode"];
                                              }
                                            }).apply(null, eventArgs);
                                          }
                                        };

                                        initializePlasmicStates(
                                          $state,
                                          [
                                            {
                                              name: "checkbox2[][].isChecked",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) =>
                                                (() => {
                                                  try {
                                                    return currentItem.check;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "isChecked";
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                            }
                                          ],
                                          [__plasmic_idx_0, __plasmic_idx_1]
                                        );
                                        return (
                                          <Checkbox
                                            data-plasmic-name={"checkbox2"}
                                            data-plasmic-override={
                                              overrides.checkbox2
                                            }
                                            {...child$Props}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__yVFhS
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return currentItem.value;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                          </Checkbox>
                                        );
                                      })()}
                                    </div>
                                  ),
                                  showLabel: false,
                                  value: generateStateValueProp($state, [
                                    "checkboxGroup2",
                                    __plasmic_idx_0,
                                    __plasmic_idx_1,
                                    "value"
                                  ])
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "checkboxGroup2[][].value",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0, __plasmic_idx_1]
                                );
                                return (
                                  <CheckboxGroup
                                    data-plasmic-name={"checkboxGroup2"}
                                    data-plasmic-override={
                                      overrides.checkboxGroup2
                                    }
                                    {...child$Props}
                                  />
                                );
                              })();
                            })}
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
      {(() => {
        try {
          return $state.imageload != "";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__unNoa)}>
          <div className={classNames(projectcss.all, sty.freeBox__eJj1R)}>
            {(() => {
              try {
                return $state.imageload != null;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
              ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.imageload;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"87px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"105px"}
                      key={currentIndex}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $state.imageload;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })
              : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__muHj
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.imageload.split(".").pop();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__exQh)}
            onClick={async event => {
              const $steps = {};

              $steps["updateImageload"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["imageload"]
                      },
                      operation: 0,
                      value: $state.imageload == ""
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateImageload"] != null &&
                typeof $steps["updateImageload"] === "object" &&
                typeof $steps["updateImageload"].then === "function"
              ) {
                $steps["updateImageload"] = await $steps["updateImageload"];
              }
            }}
          >
            <Icon22Icon
              className={classNames(projectcss.all, sty.svg__fzM5)}
              role={"img"}
            />
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame49: [
    "frame49",
    "frame25",
    "frame48",
    "frame50",
    "title",
    "text",
    "antdInput",
    "image2",
    "antdInput2",
    "button",
    "action",
    "antdInput3",
    "switchbest",
    "title2",
    "datePickers",
    "title3",
    "radioGroupLiom",
    "fcm2",
    "antdInput6",
    "checkboxGroup",
    "checkbox",
    "topic",
    "antdInput8",
    "fcm3",
    "antdInput7",
    "checkboxGroup2",
    "checkbox2",
    "img"
  ],
  frame25: ["frame25"],
  frame48: ["frame48"],
  frame50: [
    "frame50",
    "title",
    "text",
    "antdInput",
    "image2",
    "antdInput2",
    "button",
    "action",
    "antdInput3",
    "switchbest",
    "title2",
    "datePickers",
    "title3",
    "radioGroupLiom",
    "fcm2",
    "antdInput6",
    "checkboxGroup",
    "checkbox",
    "topic",
    "antdInput8",
    "fcm3",
    "antdInput7",
    "checkboxGroup2",
    "checkbox2"
  ],
  title: ["title"],
  text: ["text", "antdInput"],
  antdInput: ["antdInput"],
  image2: ["image2", "antdInput2", "button"],
  antdInput2: ["antdInput2"],
  button: ["button"],
  action: ["action", "antdInput3"],
  antdInput3: ["antdInput3"],
  switchbest: ["switchbest"],
  title2: ["title2"],
  datePickers: ["datePickers"],
  title3: ["title3"],
  radioGroupLiom: ["radioGroupLiom"],
  fcm2: ["fcm2", "antdInput6"],
  antdInput6: ["antdInput6"],
  checkboxGroup: ["checkboxGroup", "checkbox"],
  checkbox: ["checkbox"],
  topic: ["topic", "antdInput8"],
  antdInput8: ["antdInput8"],
  fcm3: ["fcm3", "antdInput7"],
  antdInput7: ["antdInput7"],
  checkboxGroup2: ["checkboxGroup2", "checkbox2"],
  checkbox2: ["checkbox2"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame49: "div";
  frame25: "div";
  frame48: "div";
  frame50: "div";
  title: typeof TextInput;
  text: typeof TextInput;
  antdInput: typeof Input;
  image2: typeof TextInput;
  antdInput2: typeof Input;
  button: typeof Button;
  action: typeof TextInput;
  antdInput3: typeof Input;
  switchbest: typeof Switchbest;
  title2: typeof TextInput;
  datePickers: typeof DatePickers;
  title3: typeof TextInput;
  radioGroupLiom: typeof RadioGroupLiom;
  fcm2: typeof TextInput;
  antdInput6: typeof Input;
  checkboxGroup: typeof CheckboxGroup;
  checkbox: typeof Checkbox;
  topic: typeof TextInput;
  antdInput8: typeof Input;
  fcm3: typeof TextInput;
  antdInput7: typeof Input;
  checkboxGroup2: typeof CheckboxGroup;
  checkbox2: typeof Checkbox;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSendnotif__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSendnotif__VariantsArgs;
    args?: PlasmicSendnotif__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicSendnotif__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicSendnotif__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSendnotif__ArgProps,
          internalVariantPropNames: PlasmicSendnotif__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSendnotif__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame49") {
    func.displayName = "PlasmicSendnotif";
  } else {
    func.displayName = `PlasmicSendnotif.${nodeName}`;
  }
  return func;
}

export const PlasmicSendnotif = Object.assign(
  // Top-level PlasmicSendnotif renders the root element
  makeNodeComponent("frame49"),
  {
    // Helper components rendering sub-elements
    frame25: makeNodeComponent("frame25"),
    frame48: makeNodeComponent("frame48"),
    frame50: makeNodeComponent("frame50"),
    title: makeNodeComponent("title"),
    text: makeNodeComponent("text"),
    antdInput: makeNodeComponent("antdInput"),
    image2: makeNodeComponent("image2"),
    antdInput2: makeNodeComponent("antdInput2"),
    button: makeNodeComponent("button"),
    action: makeNodeComponent("action"),
    antdInput3: makeNodeComponent("antdInput3"),
    switchbest: makeNodeComponent("switchbest"),
    title2: makeNodeComponent("title2"),
    datePickers: makeNodeComponent("datePickers"),
    title3: makeNodeComponent("title3"),
    radioGroupLiom: makeNodeComponent("radioGroupLiom"),
    fcm2: makeNodeComponent("fcm2"),
    antdInput6: makeNodeComponent("antdInput6"),
    checkboxGroup: makeNodeComponent("checkboxGroup"),
    checkbox: makeNodeComponent("checkbox"),
    topic: makeNodeComponent("topic"),
    antdInput8: makeNodeComponent("antdInput8"),
    fcm3: makeNodeComponent("fcm3"),
    antdInput7: makeNodeComponent("antdInput7"),
    checkboxGroup2: makeNodeComponent("checkboxGroup2"),
    checkbox2: makeNodeComponent("checkbox2"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicSendnotif
    internalVariantProps: PlasmicSendnotif__VariantProps,
    internalArgProps: PlasmicSendnotif__ArgProps
  }
);

export default PlasmicSendnotif;
/* prettier-ignore-end */
