/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 1f3SHQQwHGQn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSendnotif.module.css"; // plasmic-import: 1f3SHQQwHGQn/css

import Line3Icon from "./icons/PlasmicIcon__Line3"; // plasmic-import: cDBsZfQFOOWa/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 32haUKsu6raY/icon

createPlasmicElementProxy;

export type PlasmicSendnotif__VariantMembers = {};
export type PlasmicSendnotif__VariantsArgs = {};
type VariantPropType = keyof PlasmicSendnotif__VariantsArgs;
export const PlasmicSendnotif__VariantProps = new Array<VariantPropType>();

export type PlasmicSendnotif__ArgsType = {
  onClick?: (event: any) => void;
  reportsSelect?: any;
  onReportsSelectChange?: (val: string) => void;
  tabList?: any;
  onTabListChange?: (val: string) => void;
  selectedTab?: number;
  onSelectedTabChange?: (val: string) => void;
  onFilessChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicSendnotif__ArgsType;
export const PlasmicSendnotif__ArgProps = new Array<ArgPropType>(
  "onClick",
  "reportsSelect",
  "onReportsSelectChange",
  "tabList",
  "onTabListChange",
  "selectedTab",
  "onSelectedTabChange",
  "onFilessChange"
);

export type PlasmicSendnotif__OverridesType = {
  frame49?: Flex__<"div">;
  frame25?: Flex__<"div">;
  frame48?: Flex__<"div">;
  frame50?: Flex__<"div">;
  textInput2?: Flex__<typeof TextInput>;
  textInput?: Flex__<typeof TextInput>;
  antdInput?: Flex__<typeof Input>;
  image?: Flex__<typeof Button>;
  matn?: Flex__<typeof Button>;
};

export interface DefaultSendnotifProps {
  onClick?: (event: any) => void;
  reportsSelect?: any;
  onReportsSelectChange?: (val: string) => void;
  tabList?: any;
  onTabListChange?: (val: string) => void;
  selectedTab?: number;
  onSelectedTabChange?: (val: string) => void;
  onFilessChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSendnotif__RenderFunc(props: {
  variants: PlasmicSendnotif__VariantsArgs;
  args: PlasmicSendnotif__ArgsType;
  overrides: PlasmicSendnotif__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "titre",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9\u200c\u0647\u0627\u06cc \u063a\u06cc\u0631 \u0641\u0639\u0627\u0644 \u0647\u0645\u06cc\u0627\u0631",
            type: "expired_subscriptions",
            api: "endSmsSubs",
            backColor: "#ed5151"
          },
          {
            title:
              "\u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627 - \u06f3 \u0631\u0648\u0632 \u0645\u0627\u0646\u062f\u0647 \u062a\u0627 \u0627\u062a\u0645\u0627\u0645",
            type: "expiring_3_days",
            api: "endSmsSubsByDay",
            backColor: "#FFA500"
          },
          {
            title:
              "\u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627 - \u06f1\u06f0 \u0631\u0648\u0632 \u0645\u0627\u0646\u062f\u0647 \u062a\u0627 \u0627\u062a\u0645\u0627\u0645",
            type: "expiring_10_days",
            api: "endHusbandSub",
            backColor: ""
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0627\u06cc \u0641\u0639\u0627\u0644 \u0647\u0645\u06cc\u0627\u0631",
            type: "active_count",
            api: "hamyarActiveList",
            backColor: ""
          }
        ]
      },
      {
        path: "reportsSelect",
        type: "writable",
        variableType: "object",

        valueProp: "reportsSelect",
        onChangeProp: "onReportsSelectChange"
      },
      {
        path: "tabList",
        type: "writable",
        variableType: "array",

        valueProp: "tabList",
        onChangeProp: "onTabListChange"
      },
      {
        path: "selectedTab",
        type: "writable",
        variableType: "number",

        valueProp: "selectedTab",
        onChangeProp: "onSelectedTabChange"
      },
      {
        path: "matn.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "matn.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "matn.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "image.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "softSand"
      },
      {
        path: "image.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "image.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "filess",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({}),

        onChangeProp: "onFilessChange"
      },
      {
        path: "imageload",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "step",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label: "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u0634\u0646",
            value: "notification"
          },
          { label: "\u06af\u06cc\u0631\u0646\u062f\u0647", value: "target" },
          { label: "\u062a\u0627\u0631\u06cc\u062e", value: "date" }
        ]
      },
      {
        path: "selectstep",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "notification"
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"frame49"}
      data-plasmic-override={overrides.frame49}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.frame49
      )}
    >
      <div
        data-plasmic-name={"frame25"}
        data-plasmic-override={overrides.frame25}
        className={classNames(projectcss.all, sty.frame25)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__kcCUf
          )}
        >
          {
            "\u0627\u0631\u0633\u0627\u0644 \u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646"
          }
        </div>
      </div>
      <div
        data-plasmic-name={"frame48"}
        data-plasmic-override={overrides.frame48}
        className={classNames(projectcss.all, sty.frame48)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__k6Rkn)}>
          <Line3Icon
            className={classNames(projectcss.all, sty.svg__gNpDz)}
            role={"img"}
          />
        </div>
      </div>
      <div
        data-plasmic-name={"frame50"}
        data-plasmic-override={overrides.frame50}
        className={classNames(projectcss.all, sty.frame50)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__wy0L2)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fecH
            )}
          >
            {
              "\u0627\u0631\u0633\u0627\u0644 \u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646"
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xhYun
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return new Date().toLocaleDateString("fa-IR");
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__tErMr)}>
          <div className={classNames(projectcss.all, sty.freeBox__wNvsi)}>
            <div className={classNames(projectcss.all, sty.freeBox__sqTSf)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___45GcK
                )}
              >
                {"\u0645\u0648\u0636\u0648\u0639 \u0645\u062a\u0646"}
              </div>
              <TextInput
                data-plasmic-name={"textInput2"}
                data-plasmic-override={overrides.textInput2}
                className={classNames("__wab_instance", sty.textInput2)}
                color={"soft"}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput2", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={
                  "\u0645\u0648\u0636\u0648\u0639 \u0645\u062a\u0646"
                }
                value={
                  generateStateValueProp($state, ["textInput2", "value"]) ?? ""
                }
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bQ0WL
                )}
              >
                {"\u0645\u062a\u0646"}
              </div>
              <TextInput
                data-plasmic-name={"textInput"}
                data-plasmic-override={overrides.textInput}
                antdInput2={(() => {
                  const child$Props = {
                    "aria-label": ``,
                    bordered: false,
                    className: classNames("__wab_instance", sty.antdInput),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["antdInput", "value"],
                        Input_Helpers
                      ).apply(null, eventArgs);

                      (async event => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    },
                    size: "large",
                    value: generateStateValueProp($state, [
                      "antdInput",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "antdInput.value"
                      }
                    ],
                    [],
                    Input_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <Input
                      data-plasmic-name={"antdInput"}
                      data-plasmic-override={overrides.antdInput}
                      {...child$Props}
                    />
                  );
                })()}
                className={classNames("__wab_instance", sty.textInput)}
                color={"soft"}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={
                  "\u067e\u06cc\u0627\u0645 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                }
                value={
                  generateStateValueProp($state, ["textInput", "value"]) ?? ""
                }
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__l6Ikl)}>
              <div className={classNames(projectcss.all, sty.freeBox__mPPbs)}>
                {(() => {
                  try {
                    return $state.imageload == "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Button
                    data-plasmic-name={"image"}
                    data-plasmic-override={overrides.image}
                    className={classNames("__wab_instance", sty.image)}
                    color={generateStateValueProp($state, ["image", "color"])}
                    endIcon={
                      <Icon115Icon
                        className={classNames(projectcss.all, sty.svg__s2H5M)}
                        role={"img"}
                      />
                    }
                    load={generateStateValueProp($state, ["image", "load"])}
                    loading={generateStateValueProp($state, [
                      "image",
                      "loading"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return window.document
                                    .getElementById("fileInput")
                                    .click();
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["image", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["image", "load"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["image", "loading"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__imSyh
                      )}
                    >
                      {
                        "\u0627\u0646\u062a\u062e\u0627\u0628 \u0639\u06a9\u0633"
                      }
                    </div>
                  </Button>
                ) : null}
                <Button
                  data-plasmic-name={"matn"}
                  data-plasmic-override={overrides.matn}
                  className={classNames("__wab_instance", sty.matn)}
                  color={generateStateValueProp($state, ["matn", "color"])}
                  load={generateStateValueProp($state, ["matn", "load"])}
                  loading={generateStateValueProp($state, ["matn", "loading"])}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["matn", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["matn", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["matn", "loading"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dgmyy
                    )}
                  >
                    {"\u0627\u0631\u0633\u0627\u0644 \u0645\u062a\u0646"}
                  </div>
                </Button>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__wifYz)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.step;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__hrBlc)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__a367)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xo0F
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.label;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__addyD)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__awLjF
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateSelectstep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectstep"]
                                },
                                operation: 0,
                                value: currentItem.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSelectstep"] != null &&
                          typeof $steps["updateSelectstep"] === "object" &&
                          typeof $steps["updateSelectstep"].then === "function"
                        ) {
                          $steps["updateSelectstep"] = await $steps[
                            "updateSelectstep"
                          ];
                        }
                      }}
                      style={(() => {
                        try {
                          return (() => {
                            var a = $state.step.findIndex(
                              i => i.value == $state.selectstep
                            );
                            if (currentIndex <= a) {
                              return { background: "#7254c6a1" };
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentIndex + 1;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iAp7X)}
                    >
                      {(() => {
                        try {
                          return currentIndex < 2;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__f8T13)}
                          displayHeight={"63px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"1px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/liom_hamyar/images/downloadPng.png",
                            fullWidth: 225,
                            fullHeight: 225,
                            aspectRatio: undefined
                          }}
                        />
                      ) : null}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
      {(() => {
        try {
          return $state.imageload != "";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__unNoa)}>
          <div className={classNames(projectcss.all, sty.freeBox__eJj1R)}>
            {(() => {
              try {
                return $state.imageload != null;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
              ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.imageload;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__qwqoK)}
                      displayHeight={"87px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"105px"}
                      key={currentIndex}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $state.imageload;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })
              : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__muHj
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.imageload.split(".").pop();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__exQh)}
            onClick={async event => {
              const $steps = {};

              $steps["updateImageload"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["imageload"]
                      },
                      operation: 0,
                      value: $state.imageload == ""
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateImageload"] != null &&
                typeof $steps["updateImageload"] === "object" &&
                typeof $steps["updateImageload"].then === "function"
              ) {
                $steps["updateImageload"] = await $steps["updateImageload"];
              }
            }}
          >
            <Icon22Icon
              className={classNames(projectcss.all, sty.svg__fzM5)}
              role={"img"}
            />
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame49: [
    "frame49",
    "frame25",
    "frame48",
    "frame50",
    "textInput2",
    "textInput",
    "antdInput",
    "image",
    "matn"
  ],
  frame25: ["frame25"],
  frame48: ["frame48"],
  frame50: ["frame50", "textInput2", "textInput", "antdInput", "image", "matn"],
  textInput2: ["textInput2"],
  textInput: ["textInput", "antdInput"],
  antdInput: ["antdInput"],
  image: ["image"],
  matn: ["matn"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame49: "div";
  frame25: "div";
  frame48: "div";
  frame50: "div";
  textInput2: typeof TextInput;
  textInput: typeof TextInput;
  antdInput: typeof Input;
  image: typeof Button;
  matn: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSendnotif__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSendnotif__VariantsArgs;
    args?: PlasmicSendnotif__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSendnotif__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSendnotif__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSendnotif__ArgProps,
          internalVariantPropNames: PlasmicSendnotif__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSendnotif__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame49") {
    func.displayName = "PlasmicSendnotif";
  } else {
    func.displayName = `PlasmicSendnotif.${nodeName}`;
  }
  return func;
}

export const PlasmicSendnotif = Object.assign(
  // Top-level PlasmicSendnotif renders the root element
  makeNodeComponent("frame49"),
  {
    // Helper components rendering sub-elements
    frame25: makeNodeComponent("frame25"),
    frame48: makeNodeComponent("frame48"),
    frame50: makeNodeComponent("frame50"),
    textInput2: makeNodeComponent("textInput2"),
    textInput: makeNodeComponent("textInput"),
    antdInput: makeNodeComponent("antdInput"),
    image: makeNodeComponent("image"),
    matn: makeNodeComponent("matn"),

    // Metadata about props expected for PlasmicSendnotif
    internalVariantProps: PlasmicSendnotif__VariantProps,
    internalArgProps: PlasmicSendnotif__ArgProps
  }
);

export default PlasmicSendnotif;
/* prettier-ignore-end */
