/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: C5hqeG28n8GP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import { Pickers } from "@/components/Pickers"; // plasmic-import: htE-oGSeNx82/codeComponent
import { BackHandler } from "@/components/BackHandler"; // plasmic-import: wpIQCsQJqUoV/codeComponent

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSettingCycle4.module.css"; // plasmic-import: C5hqeG28n8GP/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicSettingCycle4__VariantMembers = {
  dark: "dark";
};
export type PlasmicSettingCycle4__VariantsArgs = {
  dark?: SingleBooleanChoiceArg<"dark">;
};
type VariantPropType = keyof PlasmicSettingCycle4__VariantsArgs;
export const PlasmicSettingCycle4__VariantProps = new Array<VariantPropType>(
  "dark"
);

export type PlasmicSettingCycle4__ArgsType = {
  onBack?: (event: any) => void;
  editTime?: string;
  onEditTimeChange2?: (val: string) => void;
  userStatus?: any;
  active?: boolean;
};
type ArgPropType = keyof PlasmicSettingCycle4__ArgsType;
export const PlasmicSettingCycle4__ArgProps = new Array<ArgPropType>(
  "onBack",
  "editTime",
  "onEditTimeChange2",
  "userStatus",
  "active"
);

export type PlasmicSettingCycle4__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  sideEffect?: Flex__<typeof SideEffect>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  svg?: Flex__<"svg">;
  dateOfBirthBox?: Flex__<typeof AntdInput>;
  lastTimeBox?: Flex__<typeof AntdInput>;
  lastTimeBox3?: Flex__<typeof AntdInput>;
  lastTimeBox2?: Flex__<typeof AntdInput>;
  button3?: Flex__<typeof Button>;
  dialog?: Flex__<typeof Dialog>;
  pickers?: Flex__<typeof Pickers>;
  button2?: Flex__<typeof Button>;
  dialog2?: Flex__<typeof Dialog>;
  pickers2?: Flex__<typeof Pickers>;
  button4?: Flex__<typeof Button>;
  dialog3?: Flex__<typeof Dialog>;
  pickers3?: Flex__<typeof Pickers>;
  button5?: Flex__<typeof Button>;
  dialog4?: Flex__<typeof Dialog>;
  pickers4?: Flex__<typeof Pickers>;
  button6?: Flex__<typeof Button>;
  backHandler?: Flex__<typeof BackHandler>;
};

export interface DefaultSettingCycle4Props {
  onBack?: (event: any) => void;
  editTime?: string;
  onEditTimeChange2?: (val: string) => void;
  userStatus?: any;
  active?: boolean;
  dark?: SingleBooleanChoiceArg<"dark">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSettingCycle4__RenderFunc(props: {
  variants: PlasmicSettingCycle4__VariantsArgs;
  args: PlasmicSettingCycle4__ArgsType;
  overrides: PlasmicSettingCycle4__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          active: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dateOfBirthBox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.lengh != 0) return `${$state.lengh} روز `;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "typeInterDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lastTimeBox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.cycle != 0) return `${$state.cycle} روز`;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "lastTime",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (!$props.userStatus.periodStart) {
                  return { date: "" };
                }
                var a = $props.userStatus.periodStart.split("T")[0].split("-");
                return {
                  gy: parseInt(a[0]),
                  gm: parseInt(a[1]),
                  gd: parseInt(a[2])
                };
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return { data: "" };
              }
              throw e;
            }
          })()
      },
      {
        path: "lengh",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return parseInt($props.userStatus.length || 0);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "cycle",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return parseInt($props.userStatus.cycle || 0);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "dark",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.theme == "dark";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.dark
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shouldBlockBackButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "isGetInfo",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "lastTimeBox2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.lasttime != 100) {
                  return $state.datepas.filter(
                    item => item.value == $state.lasttime
                  )[0].label;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "dialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog3.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pickers.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return parseInt($ctx.query.length || 5);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 5;
              }
              throw e;
            }
          })()
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pickers2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return parseInt($ctx.query.cycle || 19);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 9;
              }
              throw e;
            }
          })()
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "list",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(localStorage.getItem("calender"))[0];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "loadbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "nex",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.nextTime == -1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "lastTimeBox3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.nextTime != 100) {
                  if ($state.nextTime == -1) {
                    return "یادم نیست";
                  } else {
                    return $state.datenex.filter(
                      item => item.value == $state.nextTime
                    )[0].label;
                  }
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "dialog4.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "pickers3.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => -1
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "datepas",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const today = new Date();
                const daysOfWeek = [
                  "یکشنبه",
                  "دوشنبه",
                  "سه‌شنبه",
                  "چهارشنبه",
                  "پنج‌شنبه",
                  "جمعه",
                  "شنبه"
                ];

                const monthNames = [
                  "فروردین",
                  "اردیبهشت",
                  "خرداد",
                  "تیر",
                  "مرداد",
                  "شهریور",
                  "مهر",
                  "آبان",
                  "آذر",
                  "دی",
                  "بهمن",
                  "اسفند"
                ];

                const updatedPeriods = [
                  (() => {
                    const dayOfWeek = daysOfWeek[today.getDay()];
                    const jalaaliDate = window.jalaali.toJalaali(
                      today.getFullYear(),
                      today.getMonth() + 1,
                      today.getDate()
                    );
                    const monthName = monthNames[jalaaliDate.jm - 1];
                    return {
                      label: `${dayOfWeek} ${jalaaliDate.jd} ${monthName} `,
                      value: 0
                    };
                  })(),
                  ...Array.from(
                    { length: $state.cycle != 0 ? $state.cycle : 30 },
                    (_, i) => {
                      const date = new Date(today);
                      date.setDate(today.getDate() - (i + 1));
                      const dayOfWeek = daysOfWeek[date.getDay()];
                      const jalaaliDate = window.jalaali.toJalaali(
                        date.getFullYear(),
                        date.getMonth() + 1,
                        date.getDate()
                      );
                      const monthName = monthNames[jalaaliDate.jm - 1];
                      const label = `${dayOfWeek}   ${jalaaliDate.jd}   ${monthName} `;
                      return {
                        label,
                        value: -(i + 1)
                      };
                    }
                  )
                ];

                return updatedPeriods;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "datenex",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const today = new Date();
                const daysOfWeek = [
                  "یکشنبه",
                  "دوشنبه",
                  "سه‌شنبه",
                  "چهارشنبه",
                  "پنج‌شنبه",
                  "جمعه",
                  "شنبه"
                ];

                const monthNames = [
                  "فروردین",
                  "اردیبهشت",
                  "خرداد",
                  "تیر",
                  "مرداد",
                  "شهریور",
                  "مهر",
                  "آبان",
                  "آذر",
                  "دی",
                  "بهمن",
                  "اسفند"
                ];

                const updatedPeriods = [
                  {
                    label:
                      "نمیدونم کی پریود میشم\u060C دوره قبلی و وارد میکنم.",
                    value: -1
                  },
                  (() => {
                    const dayOfWeek = daysOfWeek[today.getDay()];
                    const jalaaliDate = window.jalaali.toJalaali(
                      today.getFullYear(),
                      today.getMonth() + 1,
                      today.getDate()
                    );
                    const monthName = monthNames[jalaaliDate.jm - 1];
                    return {
                      label: `${dayOfWeek} ${jalaaliDate.jd} ${monthName} `,
                      value: 0
                    };
                  })(),
                  ...Array.from(
                    { length: $state.cycle != 0 ? $state.cycle : 30 },
                    (_, i) => {
                      const date = new Date(today);
                      date.setDate(today.getDate() + (i + 1));
                      const dayOfWeek = daysOfWeek[date.getDay()];
                      const jalaaliDate = window.jalaali.toJalaali(
                        date.getFullYear(),
                        date.getMonth() + 1,
                        date.getDate()
                      );
                      const monthName = monthNames[jalaaliDate.jm - 1];
                      const label = `${dayOfWeek} ${jalaaliDate.jd} ${monthName} `;
                      return {
                        label,
                        value: i + 1
                      };
                    }
                  )
                ];

                return updatedPeriods;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "pickers4.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "lasttime",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (!$props.userStatus.periodStart) {
                  return 100;
                }
                const date = new Date(
                  $props.userStatus.periodStart.split("T")[0]
                );
                const date2 = new Date();
                const differenceInMilliseconds = date - date2;
                const differenceInDays = Math.floor(
                  differenceInMilliseconds / (1000 * 60 * 60 * 24) + 1
                );
                if (differenceInDays < 0) return differenceInDays;
                return 100;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 100;
              }
              throw e;
            }
          })()
      },
      {
        path: "nextTime",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (!$props.userStatus.periodStart) {
                  return 100;
                }
                const date = new Date(
                  $props.userStatus.periodStart.split("T")[0]
                );
                const date2 = new Date();
                const differenceInMilliseconds = date - date2;
                const differenceInDays = Math.floor(
                  differenceInMilliseconds / (1000 * 60 * 60 * 24) + 1
                );
                if (differenceInDays >= 0) return differenceInDays;
                return -1;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 100;
              }
              throw e;
            }
          })()
      },
      {
        path: "editTime",
        type: "writable",
        variableType: "text",

        valueProp: "editTime",
        onChangeProp: "onEditTimeChange2"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootdark]: hasVariant($state, "dark", "dark") }
      )}
    >
      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml)}
        code={
          '<script src="https://cdn.jsdelivr.net/npm/jalaali-js/dist/jalaali.js"></script>'
        }
      />

      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      var getCookie = name => {
                        const cookies = document.cookie.split("; ");
                        for (let cookie of cookies) {
                          const [key, value] = cookie.split("=");
                          if (key === name) return JSON.parse(value)[0];
                        }
                        return "";
                      };
                      return ($state.token = getCookie("token"));
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      />

      <div className={classNames(projectcss.all, sty.freeBox__nXb93)}>
        <section className={classNames(projectcss.all, sty.section__mc0T7)}>
          <HeaderLiom
            data-plasmic-name={"headerLiom"}
            data-plasmic-override={overrides.headerLiom}
            className={classNames("__wab_instance", sty.headerLiom)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__msTaz)}>
              <XIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                onClick={async event => {
                  const $steps = {};

                  $steps["runOnBack"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["onBack"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnBack"] != null &&
                    typeof $steps["runOnBack"] === "object" &&
                    typeof $steps["runOnBack"].then === "function"
                  ) {
                    $steps["runOnBack"] = await $steps["runOnBack"];
                  }
                }}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hzOs
                )}
              >
                {"\u062a\u0646\u0638\u06cc\u0645\u0627\u062a"}
              </div>
            </div>
          </HeaderLiom>
        </section>
        <div className={classNames(projectcss.all, sty.freeBox__xJmH)}>
          <div
            className={classNames(projectcss.all, sty.freeBox__uTvo8, {
              [sty.freeBoxdark__uTvo8Rm0PC]: hasVariant($state, "dark", "dark")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xUyu4,
                {
                  [sty.textdark__xUyu4Rm0PC]: hasVariant($state, "dark", "dark")
                }
              )}
            >
              {
                '\u0628\u0631\u0627\u06cc \u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc "\u062a\u0642\u0648\u06cc\u0645 \u067e\u0631\u06cc\u0648\u062f" \u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0632\u06cc\u0631 \u0631\u0627 \u067e\u0631 \u06a9\u0646\u06cc\u062f.'
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__dpVxh)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rmIq3,
                  {
                    [sty.textdark__rmIq3Rm0PC]: hasVariant(
                      $state,
                      "dark",
                      "dark"
                    )
                  }
                )}
              >
                {
                  "\u0645\u0639\u0645\u0648\u0644\u0627 \u0686\u0646\u062f \u0631\u0648\u0632 \u062e\u0648\u0646\u0631\u06cc\u0632\u06cc \u062f\u0627\u0631\u06cc\u061f"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___8F3Cm,
                  hasVariant($state, "dark", "dark") ? "input-dark" : ``,
                  {
                    [sty.freeBoxdark___8F3CmRm0PC]: hasVariant(
                      $state,
                      "dark",
                      "dark"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSlideinModalClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog", "opendialog"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }
                }}
              >
                {(() => {
                  const child$Props = {
                    bordered: true,
                    className: classNames(
                      "__wab_instance",
                      sty.dateOfBirthBox,
                      {
                        [sty.dateOfBirthBoxdark]: hasVariant(
                          $state,
                          "dark",
                          "dark"
                        )
                      }
                    ),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["dateOfBirthBox", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    placeholder:
                      "\u0645\u062b\u0644\u0627   5 \u0631\u0648\u0632",
                    readOnly: true,
                    value: generateStateValueProp($state, [
                      "dateOfBirthBox",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "dateOfBirthBox.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"dateOfBirthBox"}
                      data-plasmic-override={overrides.dateOfBirthBox}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__crw4C)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zrS5C,
                  {
                    [sty.textdark__zrS5CRm0PC]: hasVariant(
                      $state,
                      "dark",
                      "dark"
                    )
                  }
                )}
              >
                {
                  "\u0637\u0648\u0644 \u0633\u06cc\u06a9\u0644 \u067e\u0631\u06cc\u0648\u062f \u0634\u0645\u0627 \u0686\u0646\u062f \u0631\u0648\u0632 \u0627\u0633\u062a\u061f"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___43BY2,
                  hasVariant($state, "dark", "dark") ? "input-dark" : ``,
                  {
                    [sty.freeBoxdark___43BY2Rm0PC]: hasVariant(
                      $state,
                      "dark",
                      "dark"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSlideinModalClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog2", "opendialog"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }
                }}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.lastTimeBox, {
                      [sty.lastTimeBoxdark]: hasVariant($state, "dark", "dark")
                    }),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["lastTimeBox", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    placeholder:
                      "\u0645\u062b\u0644\u0627   23 \u0631\u0648\u0632",
                    readOnly: true,
                    value: generateStateValueProp($state, [
                      "lastTimeBox",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "lastTimeBox.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"lastTimeBox"}
                      data-plasmic-override={overrides.lastTimeBox}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fdESa,
                  {
                    [sty.textdark__fdESaRm0PC]: hasVariant(
                      $state,
                      "dark",
                      "dark"
                    )
                  }
                )}
              >
                {
                  '\u0641\u0627\u0635\u0644\u0647 \u0627\u0648\u0644\u06cc\u0646 \u0642\u0627\u0639\u062f\u06af\u06cc \u062a\u0627 \u0634\u0631\u0648\u0639 \u0642\u0627\u0639\u062f\u06af\u06cc \u0628\u0639\u062f\u06cc\u062a \u0627\u0633\u062a. ( \u062d\u0648\u0627\u0633\u062a \u0628\u0627\u0634\u0647 \u06a9\u0647 \u062a\u0639\u062f\u0627\u062f \u0631\u0648\u0632 \u067e\u0631\u06cc\u0648\u062f\u062a "\u062e\u0648\u0646\u0631\u06cc\u0632\u06cc"  \u0631\u0648\u0647\u0645 \u062d\u0633\u0627\u0628 \u06a9\u0646\u06cc)'
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__nQ7IJ)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yuIbI,
                  {
                    [sty.textdark__yuIbIRm0PC]: hasVariant(
                      $state,
                      "dark",
                      "dark"
                    )
                  }
                )}
              >
                {
                  "\u06a9\u06cc \u067e\u0631\u06cc\u0648\u062f \u0645\u06cc\u0634\u06cc\u062f\u061f"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__hMqpq,
                  hasVariant($state, "dark", "dark") ? "input-dark" : ``,
                  {
                    [sty.freeBoxdark__hMqpqRm0PC]: hasVariant(
                      $state,
                      "dark",
                      "dark"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSlideinModalClick"] =
                    $state.lengh != 0 && $state.cycle != 0
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog3", "opendialog"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }

                  $steps["invokeGlobalAction"] =
                    $state.lengh == 0 || $state.cycle == 0
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "warning",
                              "\u0627\u0648\u0644 \u0637\u0648\u0644 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f\u06cc\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646.",
                              undefined,
                              undefined,
                              "bottomRight"
                            ]
                          };
                          return $globalActions[
                            "plasmic-antd5-config-provider.showNotification"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.lastTimeBox3, {
                      [sty.lastTimeBox3dark]: hasVariant($state, "dark", "dark")
                    }),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["lastTimeBox3", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    placeholder: (() => {
                      try {
                        return " مثلا " + $state.datenex[2].label;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    readOnly: true,
                    value: generateStateValueProp($state, [
                      "lastTimeBox3",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "lastTimeBox3.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"lastTimeBox3"}
                      data-plasmic-override={overrides.lastTimeBox3}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            </div>
            {(() => {
              try {
                return $state.nex;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox___7Gvg)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__visWp,
                    {
                      [sty.textdark__visWpRm0PC]: hasVariant(
                        $state,
                        "dark",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "\u062d\u0627\u0644\u0627 \u06a9\u0647 \u06cc\u0627\u062f\u062a \u0646\u0645\u06cc\u0627\u062f \u06a9\u06cc \u067e\u0631\u06cc\u0648\u062f \u0645\u06cc\u0634\u06cc\u060c \u0645\u06cc\u062f\u0648\u0646\u06cc \u0622\u062e\u0631\u06cc\u0646 \u0628\u0627\u0631 \u06a9\u06cc \u067e\u0631\u06cc\u0648\u062f \u0634\u062f\u06cc\u061f"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__asH2G,
                    hasVariant($state, "dark", "dark") ? "input-dark" : ``,
                    {
                      [sty.freeBoxdark__asH2GRm0PC]: hasVariant(
                        $state,
                        "dark",
                        "dark"
                      )
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSlideinModalClick"] =
                      $state.lengh != 0 && $state.cycle != 0
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dialog4", "opendialog"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateSlideinModalClick"] != null &&
                      typeof $steps["updateSlideinModalClick"] === "object" &&
                      typeof $steps["updateSlideinModalClick"].then ===
                        "function"
                    ) {
                      $steps["updateSlideinModalClick"] = await $steps[
                        "updateSlideinModalClick"
                      ];
                    }

                    $steps["invokeGlobalAction"] =
                      $state.lengh == 0 || $state.cycle == 0
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "warning",
                                "\u0627\u0648\u0644 \u0637\u0648\u0644 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f\u06cc\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646.",
                                undefined,
                                undefined,
                                "bottomRight"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }
                  }}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.lastTimeBox2,
                        {
                          [sty.lastTimeBox2dark]: hasVariant(
                            $state,
                            "dark",
                            "dark"
                          )
                        }
                      ),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["lastTimeBox2", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      placeholder: (() => {
                        try {
                          return " مثلا " + $state.datepas[1].label;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      readOnly: true,
                      value: generateStateValueProp($state, [
                        "lastTimeBox2",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "lastTimeBox2.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"lastTimeBox2"}
                        data-plasmic-override={overrides.lastTimeBox2}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              </div>
            ) : null}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__zlb1C)}>
          <section className={classNames(projectcss.all, sty.section__bQTjF)}>
            <div className={classNames(projectcss.all, sty.freeBox__xfVt4)}>
              <Button
                data-plasmic-name={"button3"}
                data-plasmic-override={overrides.button3}
                className={classNames("__wab_instance", sty.button3)}
                color={generateStateValueProp($state, ["button3", "color"])}
                isDisabled={(() => {
                  try {
                    return (
                      ($state.lengh == 0 &&
                        $state.cycle == 0 &&
                        $state.lastTime.data == "") ||
                      $state.loadbtn
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                loading={(() => {
                  try {
                    return $state.loadbtn;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateLoadbtn"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loadbtn"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoadbtn"] != null &&
                    typeof $steps["updateLoadbtn"] === "object" &&
                    typeof $steps["updateLoadbtn"].then === "function"
                  ) {
                    $steps["updateLoadbtn"] = await $steps["updateLoadbtn"];
                  }

                  $steps["add"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://n8n.staas.ir/webhook/calendar/getData",
                            undefined,
                            (() => {
                              try {
                                return {
                                  cycle: $state.cycle,
                                  length: $state.lengh,
                                  last_time: `${$state.lastTime.gy}-${String(
                                    $state.lastTime.gm
                                  ).padStart(2, "0")}-${String(
                                    $state.lastTime.gd
                                  ).padStart(2, "0")}`,
                                  type: "add",
                                  authorization: $state.token
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["add"] != null &&
                    typeof $steps["add"] === "object" &&
                    typeof $steps["add"].then === "function"
                  ) {
                    $steps["add"] = await $steps["add"];
                  }

                  $steps["edit"] = false
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://n8n.staas.ir/webhook/calendar/getData",
                            undefined,
                            (() => {
                              try {
                                return (() => {
                                  $state.list.period.start = {
                                    year: $state.lastTime.gy,
                                    month: $state.lastTime.gm,
                                    day: $state.lastTime.gd
                                  };
                                  return {
                                    cycle: $state.cycle,
                                    length: $state.lengh,
                                    type: $ctx.query.type,
                                    authorization: $state.token,
                                    calendar: $state.list
                                  };
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["edit"] != null &&
                    typeof $steps["edit"] === "object" &&
                    typeof $steps["edit"].then === "function"
                  ) {
                    $steps["edit"] = await $steps["edit"];
                  }

                  $steps["invokeGlobalAction2"] =
                    $steps.add?.data?.success || $steps.edit?.data?.success
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f",
                              "top-center"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction2"] != null &&
                    typeof $steps["invokeGlobalAction2"] === "object" &&
                    typeof $steps["invokeGlobalAction2"].then === "function"
                  ) {
                    $steps["invokeGlobalAction2"] = await $steps[
                      "invokeGlobalAction2"
                    ];
                  }

                  $steps["invokeGlobalAction"] =
                    $steps.add?.data?.success == false ||
                    $steps.edit?.data.success == false
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u062e\u0637\u0627 \u062f\u0631 \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u0627\u0631\u062a\u0628\u0627\u0637 ! \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                              "top-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["updateEditTime"] =
                    $steps.add?.data?.success || $steps.edit?.data?.success
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["editTime"]
                            },
                            operation: 0,
                            value: new Date().toLocaleString("fa-IR", {
                              timeZone: "Asia/Tehran"
                            })
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateEditTime"] != null &&
                    typeof $steps["updateEditTime"] === "object" &&
                    typeof $steps["updateEditTime"].then === "function"
                  ) {
                    $steps["updateEditTime"] = await $steps["updateEditTime"];
                  }

                  $steps["runOnBack"] =
                    $steps.add?.data?.success || $steps.edit?.data?.success
                      ? (() => {
                          const actionArgs = { eventRef: $props["onBack"] };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["runOnBack"] != null &&
                    typeof $steps["runOnBack"] === "object" &&
                    typeof $steps["runOnBack"].then === "function"
                  ) {
                    $steps["runOnBack"] = await $steps["runOnBack"];
                  }

                  $steps["updateLoadbtn2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loadbtn"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoadbtn2"] != null &&
                    typeof $steps["updateLoadbtn2"] === "object" &&
                    typeof $steps["updateLoadbtn2"].then === "function"
                  ) {
                    $steps["updateLoadbtn2"] = await $steps["updateLoadbtn2"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button3", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                {
                  "\u0630\u062e\u06cc\u0631\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                }
              </Button>
            </div>
          </section>
        </div>
      </div>
      <Dialog
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        className={classNames("__wab_instance", sty.dialog, {
          [sty.dialogdark]: hasVariant($state, "dark", "dark")
        })}
        onOpendialogChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog", "opendialog"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        opendialog={generateStateValueProp($state, ["dialog", "opendialog"])}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__qNb2W,
            { [sty.textdark__qNb2WRm0PC]: hasVariant($state, "dark", "dark") }
          )}
        >
          {
            "\u062a\u0639\u062f\u0627\u062f \u0631\u0648\u0632\u200c\u0647\u0627\u06cc \u062e\u0648\u0646 \u0631\u06cc\u0632\u06cc"
          }
        </div>
        {(() => {
          const child$Props = {
            className: classNames("__wab_instance", sty.pickers, {
              [sty.pickersdark]: hasVariant($state, "dark", "dark")
            }),
            data: (() => {
              try {
                return (() => {
                  return Array.from({ length: 9 }, (_, i) => ({
                    label: `${i + 2} روز`,
                    value: i + 2
                  }));
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })(),
            initialValue: generateStateValueProp($state, ["pickers", "value"]),
            onChange: async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["pickers", "value"]).apply(
                null,
                eventArgs
              );
            }
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "value",
                plasmicStateName: "pickers.value"
              }
            ],
            [],
            undefined ?? {},
            child$Props
          );
          initializePlasmicStates(
            $state,
            [
              {
                name: "pickers.value",
                initFunc: ({ $props, $state, $queries }) =>
                  (() => {
                    try {
                      return parseInt($ctx.query.length || 5);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 5;
                      }
                      throw e;
                    }
                  })()
              }
            ],
            []
          );
          return (
            <Pickers
              data-plasmic-name={"pickers"}
              data-plasmic-override={overrides.pickers}
              {...child$Props}
            />
          );
        })()}
        <div className={classNames(projectcss.all, sty.freeBox__x6Kf)}>
          <Button
            data-plasmic-name={"button2"}
            data-plasmic-override={overrides.button2}
            className={classNames("__wab_instance", sty.button2)}
            color={generateStateValueProp($state, ["button2", "color"])}
            onClick={async event => {
              const $steps = {};

              $steps["updateDateOfBirth"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["lengh"]
                      },
                      operation: 0,
                      value: $state.pickers.value
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDateOfBirth"] != null &&
                typeof $steps["updateDateOfBirth"] === "object" &&
                typeof $steps["updateDateOfBirth"].then === "function"
              ) {
                $steps["updateDateOfBirth"] = await $steps["updateDateOfBirth"];
              }

              $steps["updateSlideinModalClick"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog", "opendialog"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSlideinModalClick"] != null &&
                typeof $steps["updateSlideinModalClick"] === "object" &&
                typeof $steps["updateSlideinModalClick"].then === "function"
              ) {
                $steps["updateSlideinModalClick"] = await $steps[
                  "updateSlideinModalClick"
                ];
              }
            }}
            onColorChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button2", "color"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            {"\u062a\u0627\u06cc\u06cc\u062f"}
          </Button>
          <div
            className={classNames(projectcss.all, sty.freeBox__jqBv9)}
            onClick={async event => {
              const $steps = {};

              $steps["updateSlideinModalClick"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog", "opendialog"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSlideinModalClick"] != null &&
                typeof $steps["updateSlideinModalClick"] === "object" &&
                typeof $steps["updateSlideinModalClick"].then === "function"
              ) {
                $steps["updateSlideinModalClick"] = await $steps[
                  "updateSlideinModalClick"
                ];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__emYky
              )}
            >
              {"\u0628\u0633\u062a\u0646"}
            </div>
          </div>
        </div>
      </Dialog>
      <Dialog
        data-plasmic-name={"dialog2"}
        data-plasmic-override={overrides.dialog2}
        className={classNames("__wab_instance", sty.dialog2)}
        onOpendialogChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog2", "opendialog"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        opendialog={generateStateValueProp($state, ["dialog2", "opendialog"])}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___4Y9Cx
          )}
        >
          {
            "\u0641\u0627\u0635\u0644\u0647 \u0627\u0648\u0644\u06cc\u0646 \u0631\u0648\u0632 \u0642\u0627\u0639\u062f\u06af\u06cc \u062a\u0627 \u0634\u0631\u0648\u0639 \u0642\u0627\u0639\u062f\u06af\u06cc \u0628\u0639\u062f\u06cc\u062a \u0627\u0633\u062a.\n(\u062d\u0648\u0627\u0633\u062a \u0628\u0627\u0634\u0647 \u06a9\u0647 \u062a\u0639\u062f\u0627\u062f \u0631\u0648\u0632 \u067e\u0631\u06cc\u0648\u062f\u062a(\u062e\u0648\u0646\u0631\u06cc\u0632\u06cc) \u0631\u0648 \u0647\u0645 \u062d\u0633\u0627\u0628 \u06a9\u0646\u06cc)"
          }
        </div>
        {(() => {
          const child$Props = {
            className: classNames("__wab_instance", sty.pickers2, {
              [sty.pickers2dark]: hasVariant($state, "dark", "dark")
            }),
            data: (() => {
              try {
                return (() => {
                  return Array.from({ length: 64 - 15 }, (_, i) => ({
                    label: `${i + 17} روز`,
                    value: i + 17
                  }));
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })(),
            initialValue: generateStateValueProp($state, ["pickers2", "value"]),
            onChange: async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["pickers2", "value"]).apply(
                null,
                eventArgs
              );
            }
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "value",
                plasmicStateName: "pickers2.value"
              }
            ],
            [],
            undefined ?? {},
            child$Props
          );
          initializePlasmicStates(
            $state,
            [
              {
                name: "pickers2.value",
                initFunc: ({ $props, $state, $queries }) =>
                  (() => {
                    try {
                      return parseInt($ctx.query.cycle || 19);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 9;
                      }
                      throw e;
                    }
                  })()
              }
            ],
            []
          );
          return (
            <Pickers
              data-plasmic-name={"pickers2"}
              data-plasmic-override={overrides.pickers2}
              {...child$Props}
            />
          );
        })()}
        <div className={classNames(projectcss.all, sty.freeBox__omNnr)}>
          <Button
            data-plasmic-name={"button4"}
            data-plasmic-override={overrides.button4}
            className={classNames("__wab_instance", sty.button4)}
            color={generateStateValueProp($state, ["button4", "color"])}
            onClick={async event => {
              const $steps = {};

              $steps["updateDateOfBirth"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["cycle"]
                      },
                      operation: 0,
                      value: $state.pickers2.value
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDateOfBirth"] != null &&
                typeof $steps["updateDateOfBirth"] === "object" &&
                typeof $steps["updateDateOfBirth"].then === "function"
              ) {
                $steps["updateDateOfBirth"] = await $steps["updateDateOfBirth"];
              }

              $steps["updateSlideinModalClick"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog2", "opendialog"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSlideinModalClick"] != null &&
                typeof $steps["updateSlideinModalClick"] === "object" &&
                typeof $steps["updateSlideinModalClick"].then === "function"
              ) {
                $steps["updateSlideinModalClick"] = await $steps[
                  "updateSlideinModalClick"
                ];
              }
            }}
            onColorChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button4", "color"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            {"\u062a\u0627\u06cc\u06cc\u062f"}
          </Button>
          <div
            className={classNames(projectcss.all, sty.freeBox__nCqeu)}
            onClick={async event => {
              const $steps = {};

              $steps["updateSlideinModalClick"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog2", "opendialog"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSlideinModalClick"] != null &&
                typeof $steps["updateSlideinModalClick"] === "object" &&
                typeof $steps["updateSlideinModalClick"].then === "function"
              ) {
                $steps["updateSlideinModalClick"] = await $steps[
                  "updateSlideinModalClick"
                ];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__csfKs
              )}
            >
              {"\u0628\u0633\u062a\u0646"}
            </div>
          </div>
        </div>
      </Dialog>
      <Dialog
        data-plasmic-name={"dialog3"}
        data-plasmic-override={overrides.dialog3}
        className={classNames("__wab_instance", sty.dialog3)}
        onOpendialogChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog3", "opendialog"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        opendialog={generateStateValueProp($state, ["dialog3", "opendialog"])}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vawji
          )}
        >
          {
            "\u062a\u0627\u0631\u06cc\u062e \u0634\u0631\u0648\u0639 \u0642\u0627\u0639\u062f\u06af\u06cc \u0628\u0639\u062f\u06cc\u062a"
          }
        </div>
        <Pickers
          data-plasmic-name={"pickers3"}
          data-plasmic-override={overrides.pickers3}
          className={classNames("__wab_instance", sty.pickers3, {
            [sty.pickers3dark]: hasVariant($state, "dark", "dark")
          })}
          data={
            hasVariant(globalVariants, "screen", "mobile")
              ? (() => {
                  try {
                    return $state.datenex;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return $state.datenex;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
          }
          initialValue={generateStateValueProp($state, ["pickers3", "value"])}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["pickers3", "value"]).apply(
              null,
              eventArgs
            );
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox__eD)}>
          <Button
            data-plasmic-name={"button5"}
            data-plasmic-override={overrides.button5}
            className={classNames("__wab_instance", sty.button5)}
            color={generateStateValueProp($state, ["button5", "color"])}
            onClick={async event => {
              const $steps = {};

              $steps["updateDateOfBirth"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["nextTime"]
                      },
                      operation: 0,
                      value: $state.pickers3.value
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDateOfBirth"] != null &&
                typeof $steps["updateDateOfBirth"] === "object" &&
                typeof $steps["updateDateOfBirth"].then === "function"
              ) {
                $steps["updateDateOfBirth"] = await $steps["updateDateOfBirth"];
              }

              $steps["updateSlideinModalClick"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog3", "opendialog"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSlideinModalClick"] != null &&
                typeof $steps["updateSlideinModalClick"] === "object" &&
                typeof $steps["updateSlideinModalClick"].then === "function"
              ) {
                $steps["updateSlideinModalClick"] = await $steps[
                  "updateSlideinModalClick"
                ];
              }

              $steps["updateNex"] =
                $state.nextTime == -1
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["nex"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateNex"] != null &&
                typeof $steps["updateNex"] === "object" &&
                typeof $steps["updateNex"].then === "function"
              ) {
                $steps["updateNex"] = await $steps["updateNex"];
              }

              $steps["updateNex2"] =
                $state.nextTime != -1
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["nex"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateNex2"] != null &&
                typeof $steps["updateNex2"] === "object" &&
                typeof $steps["updateNex2"].then === "function"
              ) {
                $steps["updateNex2"] = await $steps["updateNex2"];
              }

              $steps["updateLastTime"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["lastTime"]
                      },
                      operation: 0,
                      value: (() => {
                        if ($state.nextTime != -1) {
                          const date = new Date();
                          date.setDate(date.getDate() + $state.nextTime);
                          date.setDate(date.getDate() - $state.cycle);
                          const gy = date.getFullYear();
                          const gm = date.getMonth() + 1;
                          const gd = date.getDate();
                          return {
                            gy,
                            gm,
                            gd
                          };
                        } else {
                          return { date: "" };
                        }
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateLastTime"] != null &&
                typeof $steps["updateLastTime"] === "object" &&
                typeof $steps["updateLastTime"].then === "function"
              ) {
                $steps["updateLastTime"] = await $steps["updateLastTime"];
              }
            }}
            onColorChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button5", "color"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            {"\u062a\u0627\u06cc\u06cc\u062f"}
          </Button>
          <div
            className={classNames(projectcss.all, sty.freeBox__zxxkU)}
            onClick={async event => {
              const $steps = {};

              $steps["updateSlideinModalClick"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog3", "opendialog"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSlideinModalClick"] != null &&
                typeof $steps["updateSlideinModalClick"] === "object" &&
                typeof $steps["updateSlideinModalClick"].then === "function"
              ) {
                $steps["updateSlideinModalClick"] = await $steps[
                  "updateSlideinModalClick"
                ];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__m7GJq
              )}
            >
              {"\u0628\u0633\u062a\u0646"}
            </div>
          </div>
        </div>
      </Dialog>
      <Dialog
        data-plasmic-name={"dialog4"}
        data-plasmic-override={overrides.dialog4}
        className={classNames("__wab_instance", sty.dialog4)}
        onOpendialogChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog4", "opendialog"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        opendialog={generateStateValueProp($state, ["dialog4", "opendialog"])}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__iud0D
          )}
        >
          {
            "\u062a\u0627\u0631\u06cc\u062e \u0634\u0631\u0648\u0639 \u0622\u062e\u0631\u06cc\u0646 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f\u06cc"
          }
        </div>
        <Pickers
          data-plasmic-name={"pickers4"}
          data-plasmic-override={overrides.pickers4}
          className={classNames("__wab_instance", sty.pickers4)}
          data={
            hasVariant(globalVariants, "screen", "mobile")
              ? (() => {
                  try {
                    return $state.datepas;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return $state.datepas;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
          }
          initialValue={generateStateValueProp($state, ["pickers4", "value"])}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["pickers4", "value"]).apply(
              null,
              eventArgs
            );
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox__rba9)}>
          <Button
            data-plasmic-name={"button6"}
            data-plasmic-override={overrides.button6}
            className={classNames("__wab_instance", sty.button6)}
            color={generateStateValueProp($state, ["button6", "color"])}
            onClick={async event => {
              const $steps = {};

              $steps["updateLasttime"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["lasttime"]
                      },
                      operation: 0,
                      value: $state.pickers4.value
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateLasttime"] != null &&
                typeof $steps["updateLasttime"] === "object" &&
                typeof $steps["updateLasttime"].then === "function"
              ) {
                $steps["updateLasttime"] = await $steps["updateLasttime"];
              }

              $steps["updateDialog4Opendialog"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog4", "opendialog"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDialog4Opendialog"] != null &&
                typeof $steps["updateDialog4Opendialog"] === "object" &&
                typeof $steps["updateDialog4Opendialog"].then === "function"
              ) {
                $steps["updateDialog4Opendialog"] = await $steps[
                  "updateDialog4Opendialog"
                ];
              }

              $steps["updateLastTime"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["lastTime"]
                      },
                      operation: 0,
                      value: (() => {
                        const date = new Date();
                        date.setDate(date.getDate() + $state.lasttime);
                        const gy = date.getFullYear();
                        const gm = date.getMonth() + 1;
                        const gd = date.getDate();
                        return {
                          gy,
                          gm,
                          gd
                        };
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateLastTime"] != null &&
                typeof $steps["updateLastTime"] === "object" &&
                typeof $steps["updateLastTime"].then === "function"
              ) {
                $steps["updateLastTime"] = await $steps["updateLastTime"];
              }
            }}
            onColorChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button6", "color"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            {"\u062a\u0627\u06cc\u06cc\u062f"}
          </Button>
          <div
            className={classNames(projectcss.all, sty.freeBox__zjlE7)}
            onClick={async event => {
              const $steps = {};

              $steps["updateSlideinModalClick"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog4", "opendialog"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSlideinModalClick"] != null &&
                typeof $steps["updateSlideinModalClick"] === "object" &&
                typeof $steps["updateSlideinModalClick"].then === "function"
              ) {
                $steps["updateSlideinModalClick"] = await $steps[
                  "updateSlideinModalClick"
                ];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hdaBm
              )}
            >
              {"\u0628\u0633\u062a\u0646"}
            </div>
          </div>
        </div>
      </Dialog>
      <BackHandler
        data-plasmic-name={"backHandler"}
        data-plasmic-override={overrides.backHandler}
        active={args.active}
        className={classNames("__wab_instance", sty.backHandler)}
        onBack={async () => {
          const $steps = {};

          $steps["runOnBack"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["onBack"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnBack"] != null &&
            typeof $steps["runOnBack"] === "object" &&
            typeof $steps["runOnBack"].then === "function"
          ) {
            $steps["runOnBack"] = await $steps["runOnBack"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "sideEffect",
    "headerLiom",
    "svg",
    "dateOfBirthBox",
    "lastTimeBox",
    "lastTimeBox3",
    "lastTimeBox2",
    "button3",
    "dialog",
    "pickers",
    "button2",
    "dialog2",
    "pickers2",
    "button4",
    "dialog3",
    "pickers3",
    "button5",
    "dialog4",
    "pickers4",
    "button6",
    "backHandler"
  ],
  embedHtml: ["embedHtml"],
  sideEffect: ["sideEffect"],
  headerLiom: ["headerLiom", "svg"],
  svg: ["svg"],
  dateOfBirthBox: ["dateOfBirthBox"],
  lastTimeBox: ["lastTimeBox"],
  lastTimeBox3: ["lastTimeBox3"],
  lastTimeBox2: ["lastTimeBox2"],
  button3: ["button3"],
  dialog: ["dialog", "pickers", "button2"],
  pickers: ["pickers"],
  button2: ["button2"],
  dialog2: ["dialog2", "pickers2", "button4"],
  pickers2: ["pickers2"],
  button4: ["button4"],
  dialog3: ["dialog3", "pickers3", "button5"],
  pickers3: ["pickers3"],
  button5: ["button5"],
  dialog4: ["dialog4", "pickers4", "button6"],
  pickers4: ["pickers4"],
  button6: ["button6"],
  backHandler: ["backHandler"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  sideEffect: typeof SideEffect;
  headerLiom: typeof HeaderLiom;
  svg: "svg";
  dateOfBirthBox: typeof AntdInput;
  lastTimeBox: typeof AntdInput;
  lastTimeBox3: typeof AntdInput;
  lastTimeBox2: typeof AntdInput;
  button3: typeof Button;
  dialog: typeof Dialog;
  pickers: typeof Pickers;
  button2: typeof Button;
  dialog2: typeof Dialog;
  pickers2: typeof Pickers;
  button4: typeof Button;
  dialog3: typeof Dialog;
  pickers3: typeof Pickers;
  button5: typeof Button;
  dialog4: typeof Dialog;
  pickers4: typeof Pickers;
  button6: typeof Button;
  backHandler: typeof BackHandler;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSettingCycle4__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSettingCycle4__VariantsArgs;
    args?: PlasmicSettingCycle4__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSettingCycle4__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSettingCycle4__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSettingCycle4__ArgProps,
          internalVariantPropNames: PlasmicSettingCycle4__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSettingCycle4__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSettingCycle4";
  } else {
    func.displayName = `PlasmicSettingCycle4.${nodeName}`;
  }
  return func;
}

export const PlasmicSettingCycle4 = Object.assign(
  // Top-level PlasmicSettingCycle4 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    sideEffect: makeNodeComponent("sideEffect"),
    headerLiom: makeNodeComponent("headerLiom"),
    svg: makeNodeComponent("svg"),
    dateOfBirthBox: makeNodeComponent("dateOfBirthBox"),
    lastTimeBox: makeNodeComponent("lastTimeBox"),
    lastTimeBox3: makeNodeComponent("lastTimeBox3"),
    lastTimeBox2: makeNodeComponent("lastTimeBox2"),
    button3: makeNodeComponent("button3"),
    dialog: makeNodeComponent("dialog"),
    pickers: makeNodeComponent("pickers"),
    button2: makeNodeComponent("button2"),
    dialog2: makeNodeComponent("dialog2"),
    pickers2: makeNodeComponent("pickers2"),
    button4: makeNodeComponent("button4"),
    dialog3: makeNodeComponent("dialog3"),
    pickers3: makeNodeComponent("pickers3"),
    button5: makeNodeComponent("button5"),
    dialog4: makeNodeComponent("dialog4"),
    pickers4: makeNodeComponent("pickers4"),
    button6: makeNodeComponent("button6"),
    backHandler: makeNodeComponent("backHandler"),

    // Metadata about props expected for PlasmicSettingCycle4
    internalVariantProps: PlasmicSettingCycle4__VariantProps,
    internalArgProps: PlasmicSettingCycle4__ArgProps
  }
);

export default PlasmicSettingCycle4;
/* prettier-ignore-end */
