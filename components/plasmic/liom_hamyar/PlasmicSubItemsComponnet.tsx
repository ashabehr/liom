/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: b9qrgB2b1TrW

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import DirectDialog2 from "../../DirectDialog2"; // plasmic-import: TQdexUKMB_Ec/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSubItemsComponnet.module.css"; // plasmic-import: b9qrgB2b1TrW/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon
import Icon188Icon from "./icons/PlasmicIcon__Icon188"; // plasmic-import: Ap0CNp82zKxk/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: DnjmD0szshuz/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: Wm-tjDMQJVfn/icon
import Icon144Icon from "./icons/PlasmicIcon__Icon144"; // plasmic-import: 1DQk0pCQHybZ/icon

createPlasmicElementProxy;

export type PlasmicSubItemsComponnet__VariantMembers = {};
export type PlasmicSubItemsComponnet__VariantsArgs = {};
type VariantPropType = keyof PlasmicSubItemsComponnet__VariantsArgs;
export const PlasmicSubItemsComponnet__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSubItemsComponnet__ArgsType = {};
type ArgPropType = keyof PlasmicSubItemsComponnet__ArgsType;
export const PlasmicSubItemsComponnet__ArgProps = new Array<ArgPropType>();

export type PlasmicSubItemsComponnet__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  sideEffect?: Flex__<typeof SideEffect>;
  button2?: Flex__<typeof Button>;
  directDialog2?: Flex__<typeof DirectDialog2>;
};

export interface DefaultSubItemsComponnetProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSubItemsComponnet__RenderFunc(props: {
  variants: PlasmicSubItemsComponnet__VariantsArgs;
  args: PlasmicSubItemsComponnet__ArgsType;
  overrides: PlasmicSubItemsComponnet__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "relation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "hamyar"
      },
      {
        path: "masseg",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "errror",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "popoverOpen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [false, false]
      },
      {
        path: "removeItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loadingBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "v",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "subItems",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(window.sessionStorage.getItem("subItems"));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {
                  title:
                    "\u0633\u0644\u0627\u0645\u062a \u067e\u0648\u0633\u062a",
                  text: "-\u0631\u0648\u062a\u06cc\u0646 \u067e\u0648\u0633\u062a\u06cc \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\n -\u062f\u0631\u0645\u0627\u0646 \u062a\u0631\u06a9 \u0634\u06a9\u0645\u06cc",
                  image: "",
                  btn_text: "\u0648\u0631\u0648\u062f",
                  btn_textV2: "\u0648\u0631\u0648\u062f",
                  style: "square",
                  badge: "\u062c\u062f\u06cc\u062f",
                  text_color: "#005f10",
                  backgorund_color1: "#e9edd2",
                  backgorund_color2: "",
                  type: "pregnancy_skin_care_health",
                  subItems: {
                    self_test: [],
                    self_treatment: [
                      {
                        title:
                          "\u0631\u0648\u062a\u06cc\u0646 \u0645\u0631\u0627\u0642\u0628\u062a \u0627\u0632 \u067e\u0648\u0633\u062a",
                        text: "\u0628\u0627 \u0627\u0646\u062c\u0627\u0645 \u0627\u06cc\u0646 \u0628\u0631\u0646\u0627\u0645\u0647 \u0648 \u0645\u0631\u0627\u062d\u0644 \u06af\u0641\u062a\u0647\u200c\u0634\u062f\u0647\u060c \u06a9\u0647 \u0628\u0631 \u0627\u0633\u0627\u0633 \u062f\u0648\u0631\u0647 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0637\u0631\u0627\u062d\u06cc \u0634\u062f\u0647\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0627\u0632 \u067e\u0648\u0633\u062a\u062a \u0645\u0631\u0627\u0642\u0628\u062a \u06a9\u0646\u06cc \u0648 \u067e\u0648\u0633\u062a\u06cc \u0634\u0627\u062f\u0627\u0628 \u0648 \u062c\u0648\u0627\u0646 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc.",
                        action: "#directDialog-skin_care_sub",
                        btn_text: "\u0634\u0631\u0648\u0639 \u06a9\u0646",
                        btn_textV2: "",
                        style: "rectangle",
                        image:
                          "https://liom.storage.c2.liara.space/config/self_care/skin_care.png",
                        isPremium: true,
                        isNew: true,
                        checkSub: true,
                        subName: "skinCareIsActive",
                        shopLink: "#directDialog-skin_care_sub",
                        linkType: "skinCare"
                      },
                      {
                        title:
                          "\u067e\u06cc\u0634\u06af\u06cc\u0631\u06cc \u062a\u0631\u06a9 \u067e\u0648\u0633\u062a\u06cc \u062f\u0631 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc",
                        text: " \u0628\u0627 \u0627\u0646\u062c\u0627\u0645 \u0627\u06cc\u0646 \u0628\u0631\u0646\u0627\u0645\u0647 \u0648 \u0645\u0631\u0627\u062d\u0644 \u06af\u0641\u062a\u0647\u200c\u0634\u062f\u0647\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0627\u0632 \u0627\u06cc\u062c\u0627\u062f \u062a\u0631\u06a9\u200c\u0647\u0627\u06cc \u067e\u0648\u0633\u062a\u06cc \u062d\u06cc\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u06a9\u0646\u06cc.",
                        action: "#directDialog-stretch_marks_sub",
                        btn_text: "\u0634\u0631\u0648\u0639 \u06a9\u0646",
                        btn_textV2: "",
                        style: "rectangle",
                        image:
                          "https://liom.storage.c2.liara.space/config/self_care/stretch_marks.png",
                        isPremium: true,
                        isNew: true,
                        checkSub: true,
                        subName: "stretchMarksIsActive",
                        shopLink: "#directDialog-stretch_marks_sub",
                        linkType: "stretchMarks"
                      }
                    ],
                    self_care: []
                  }
                };
              }
              throw e;
            }
          })()
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "directDialog2.selectShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "directDialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "shop",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "actionShop",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "link",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <HeaderLiom
          data-plasmic-name={"headerLiom"}
          data-plasmic-override={overrides.headerLiom}
          className={classNames("__wab_instance", sty.headerLiom)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__lhkU2)}>
            <XIcon
              className={classNames(projectcss.all, sty.svg__gqwoV)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6RhGs
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.subItems.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u0648\u06cc\u0698\u0647";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </HeaderLiom>
      </section>
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["params"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      const queryString = window.location.search;
                      const urlParams = new URLSearchParams(queryString);
                      return urlParams.forEach((value, key) => {
                        $state.paramsObject[key] = value;
                      });
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["params"] != null &&
            typeof $steps["params"] === "object" &&
            typeof $steps["params"].then === "function"
          ) {
            $steps["params"] = await $steps["params"];
          }

          $steps["clearParams"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      const searchParams = new URLSearchParams(
                        window.location.search
                      );
                      searchParams.delete("token");
                      searchParams.delete("userId");
                      searchParams.delete("user_id");
                      const newUrl = `${
                        window.location.pathname
                      }?${searchParams.toString()}`;
                      return window.history.replaceState(null, "", newUrl);
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["clearParams"] != null &&
            typeof $steps["clearParams"] === "object" &&
            typeof $steps["clearParams"].then === "function"
          ) {
            $steps["clearParams"] = await $steps["clearParams"];
          }

          $steps["setCookie"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      if (
                        $state.paramsObject.token !== undefined &&
                        $state.paramsObject?.token?.trim() !== ""
                      ) {
                        if (!$state.paramsObject.token.startsWith("ey"))
                          $state.paramsObject.token =
                            $state.paramsObject.token.slice(6, -3);
                        var setCookie = (name, value, days) => {
                          const expires = new Date(
                            Date.now() + days * 86400000
                          ).toUTCString();
                          document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                        };
                        return setCookie(
                          "token",
                          JSON.stringify([$state.paramsObject.token]),
                          100
                        );
                      }
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["setCookie"] != null &&
            typeof $steps["setCookie"] === "object" &&
            typeof $steps["setCookie"].then === "function"
          ) {
            $steps["setCookie"] = await $steps["setCookie"];
          }

          $steps["getCookie"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      var getCookie = name => {
                        const cookies = document.cookie.split("; ");
                        for (let cookie of cookies) {
                          const [key, value] = cookie.split("=");
                          if (key === name) return JSON.parse(value)[0];
                        }
                        return "";
                      };
                      return ($state.token = getCookie("token"));
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["getCookie"] != null &&
            typeof $steps["getCookie"] === "object" &&
            typeof $steps["getCookie"].then === "function"
          ) {
            $steps["getCookie"] = await $steps["getCookie"];
          }

          $steps["invokeGlobalAction"] = false
            ? (() => {
                const actionArgs = {
                  args: [
                    undefined,
                    "https://n8n.staas.ir/webhook/rest/tools/selfCare",
                    (() => {
                      try {
                        return { authorization: $state.token };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["invokeGlobalAction"] != null &&
            typeof $steps["invokeGlobalAction"] === "object" &&
            typeof $steps["invokeGlobalAction"].then === "function"
          ) {
            $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
          }

          $steps["updateSelfCare2"] = false
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["subItems"]
                  },
                  operation: 0,
                  value: $steps.invokeGlobalAction.data
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSelfCare2"] != null &&
            typeof $steps["updateSelfCare2"] === "object" &&
            typeof $steps["updateSelfCare2"].then === "function"
          ) {
            $steps["updateSelfCare2"] = await $steps["updateSelfCare2"];
          }
        }}
      />

      {(() => {
        try {
          return $state.subItems != undefined;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__w9D)}>
          {(() => {
            try {
              return (
                $state.subItems.subItems.self_care.filter(
                  item => item.action != "#rediucePain"
                ).length > 0
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__bd4J)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__faHxq
                )}
              >
                {
                  "\u062e\u0648\u062f\u200c\u0645\u0631\u0627\u0642\u0628\u062a\u06cc"
                }
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.subItems.subItems.self_care.filter(
                      item => item.action != "#rediucePain"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kiCuf)}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateShop"] = currentItem.action.includes(
                        "directDialog"
                      )
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["shop"]
                              },
                              operation: 0,
                              value:
                                currentItem.shopLink.split("directDialog-")[1]
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateShop"] != null &&
                        typeof $steps["updateShop"] === "object" &&
                        typeof $steps["updateShop"].then === "function"
                      ) {
                        $steps["updateShop"] = await $steps["updateShop"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return currentItem.action;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return $state.token;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined,
                                "false",
                                undefined,
                                true
                              ]
                            };
                            return $globalActions["Fragment.deepLink"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateDirectDialog2Open"] =
                        currentItem.action.includes("directDialog")
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["directDialog2", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateDirectDialog2Open"] != null &&
                        typeof $steps["updateDirectDialog2Open"] === "object" &&
                        typeof $steps["updateDirectDialog2Open"].then ===
                          "function"
                      ) {
                        $steps["updateDirectDialog2Open"] = await $steps[
                          "updateDirectDialog2Open"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5FGMk
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__sws1A)}
                        displayHeight={"100%"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return currentItem.image;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qWot)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__frs5N
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qypIn
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        {(() => {
                          try {
                            return currentItem.isNew;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___1Pahk
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oX8Yy
                              )}
                            >
                              {"new"}
                            </div>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return currentItem.isPremium;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___89Bzn
                            )}
                          >
                            <Icon188Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__nqZ5
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4F9Rm
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__gbhln)}
                      role={"img"}
                    />
                  </div>
                );
              })}
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : (() => {
                      try {
                        return $state.subItems.subItems.self_test.length > 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <Embed
                  className={classNames("__wab_instance", sty.embedHtml__ibtLu)}
                  code={"<hr></hr>"}
                />
              ) : null}
            </div>
          ) : null}
          {(() => {
            try {
              return $state.subItems.subItems.self_test.length > 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox___3PBj)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__i6OpB
                )}
              >
                {"\u062e\u0648\u062f \u0622\u0632\u0645\u0627\u06cc\u06cc"}
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.subItems.subItems.self_test;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qadSy)}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode2"] = currentItem.shopLink
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.shop =
                                    currentItem.shopLink.split(
                                      "directDialog-"
                                    )[1];
                                  return ($state.actionShop =
                                    currentItem.action);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return currentItem.action;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return $state.token;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined,
                                "false",
                                undefined,
                                true,
                                (() => {
                                  try {
                                    return {
                                      "home-page":
                                        "https://apps.liom.app/subItems/"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.deepLink"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateNumber2"] = currentItem.action.includes(
                        "directDialog"
                      )
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["directDialog2", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNumber2"] != null &&
                        typeof $steps["updateNumber2"] === "object" &&
                        typeof $steps["updateNumber2"].then === "function"
                      ) {
                        $steps["updateNumber2"] = await $steps["updateNumber2"];
                      }
                    }}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dSmH)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__zIkLc)}
                        displayHeight={"100%"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return currentItem.image;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fWHua)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bdgGi
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xF9K3
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        {(() => {
                          try {
                            return currentItem.isNew;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___2Qf4I
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wj4F6
                              )}
                            >
                              {"new"}
                            </div>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return currentItem.isPremium;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__slOxb
                            )}
                          >
                            <Icon188Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___421OT
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bjcAj
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__imC39)}
                      role={"img"}
                    />
                  </div>
                );
              })}
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : (() => {
                      try {
                        return (
                          $state.subItems.subItems.self_treatment.length > 0
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <Embed
                  className={classNames(
                    "__wab_instance",
                    sty.embedHtml___2MxRp
                  )}
                  code={"<hr></hr>"}
                />
              ) : null}
            </div>
          ) : null}
          {(() => {
            try {
              return $state.subItems.subItems.self_treatment.length > 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__gP4MF)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wJvMh
                )}
              >
                {"\u062e\u0648\u062f \u062f\u0631\u0645\u0627\u0646\u06cc"}
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.subItems.subItems.self_treatment.filter(
                      item => item.action != "#pcos"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9H1U)}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode2"] = currentItem.action.includes(
                        "directDialog"
                      )
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.shop =
                                    currentItem.shopLink.split(
                                      "directDialog-"
                                    )[1];
                                  return ($state.actionShop =
                                    currentItem.action);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return currentItem.action;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return $state.token;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined,
                                "false",
                                undefined,
                                true
                              ]
                            };
                            return $globalActions["Fragment.deepLink"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateDirectDialog2Open"] =
                        currentItem.action.includes("directDialog")
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["directDialog2", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateDirectDialog2Open"] != null &&
                        typeof $steps["updateDirectDialog2Open"] === "object" &&
                        typeof $steps["updateDirectDialog2Open"].then ===
                          "function"
                      ) {
                        $steps["updateDirectDialog2Open"] = await $steps[
                          "updateDirectDialog2Open"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__v1H7A)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__hH9Ux)}
                        displayHeight={"100%"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return currentItem.image;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zamJl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2BsGz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ekMeE
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        {(() => {
                          try {
                            return currentItem.isNew;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__irQq9
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xOfyO
                              )}
                            >
                              {"new"}
                            </div>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return currentItem.isPremium;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__iCvl
                            )}
                          >
                            <Icon188Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zD1Xt
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__i0E5X
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__q28Cx)}
                      role={"img"}
                    />
                  </div>
                );
              })}
            </div>
          ) : null}
        </div>
      ) : null}
      <div className={classNames(projectcss.all, sty.freeBox__cdaN4)}>
        <div className={classNames(projectcss.all, sty.freeBox__dCi3F)}>
          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__oTk9L,
              "shimmer"
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__ir5Wm,
              "shimmer"
            )}
          />
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox___5Txv, "shimmer")}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__cHv5, "shimmer")}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__edYmm, "shimmer")}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__fEcvG, "shimmer")}
        />
      </div>
      {(() => {
        try {
          return $state.subItems == undefined;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__gjLqg)}>
          <div className={classNames(projectcss.all, sty.freeBox__jNqeQ)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jcSWb
              )}
            >
              {
                "\u0644\u0637\u0641\u0627 \u0627\u0632 \u0627\u062a\u0635\u0627\u0644 \u0627\u06cc\u0646\u062a\u0631\u0646\u062a \u062e\u0648\u062f \u0645\u0637\u0645\u0639\u0646 \u0634\u0648\u06cc\u062f."
              }
            </div>
          </div>
          <Button
            data-plasmic-name={"button2"}
            data-plasmic-override={overrides.button2}
            className={classNames("__wab_instance", sty.button2)}
            color={generateStateValueProp($state, ["button2", "color"])}
            endIcon={
              <Icon144Icon
                className={classNames(projectcss.all, sty.svg__w3Vte)}
                role={"img"}
              />
            }
            onClick={async event => {
              const $steps = {};

              $steps["goToSelfCare"] = true
                ? (() => {
                    const actionArgs = { destination: `/Self-care` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToSelfCare"] != null &&
                typeof $steps["goToSelfCare"] === "object" &&
                typeof $steps["goToSelfCare"].then === "function"
              ) {
                $steps["goToSelfCare"] = await $steps["goToSelfCare"];
              }
            }}
            onColorChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button2", "color"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            startIcon={
              <ChevronRightIcon
                className={classNames(projectcss.all, sty.svg___7Deiq)}
                role={"img"}
              />
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kojMv
              )}
            >
              {
                "\u0628\u0627\u0631\u06af\u0632\u0627\u0631\u06cc \u0645\u062c\u062f\u062f"
              }
            </div>
          </Button>
        </div>
      ) : null}
      <DirectDialog2
        data-plasmic-name={"directDialog2"}
        data-plasmic-override={overrides.directDialog2}
        className={classNames("__wab_instance", sty.directDialog2)}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["directDialog2", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onSelectShopChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "directDialog2",
            "selectShop"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["directDialog2", "open"])}
        redirectUrl={(() => {
          try {
            return `https://apps.liom.app/shopResult?buyId=${$state.shop}&?offCode=&token=${$state.token}&redirectUrl=https://apps.liom.app/Self-care/`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        token={(() => {
          try {
            return $state.token;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        type={(() => {
          try {
            return $state.shop;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "headerLiom",
    "sideEffect",
    "button2",
    "directDialog2"
  ],
  section: ["section", "headerLiom"],
  headerLiom: ["headerLiom"],
  sideEffect: ["sideEffect"],
  button2: ["button2"],
  directDialog2: ["directDialog2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  headerLiom: typeof HeaderLiom;
  sideEffect: typeof SideEffect;
  button2: typeof Button;
  directDialog2: typeof DirectDialog2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSubItemsComponnet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSubItemsComponnet__VariantsArgs;
    args?: PlasmicSubItemsComponnet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSubItemsComponnet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSubItemsComponnet__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSubItemsComponnet__ArgProps,
          internalVariantPropNames: PlasmicSubItemsComponnet__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSubItemsComponnet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSubItemsComponnet";
  } else {
    func.displayName = `PlasmicSubItemsComponnet.${nodeName}`;
  }
  return func;
}

export const PlasmicSubItemsComponnet = Object.assign(
  // Top-level PlasmicSubItemsComponnet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    headerLiom: makeNodeComponent("headerLiom"),
    sideEffect: makeNodeComponent("sideEffect"),
    button2: makeNodeComponent("button2"),
    directDialog2: makeNodeComponent("directDialog2"),

    // Metadata about props expected for PlasmicSubItemsComponnet
    internalVariantProps: PlasmicSubItemsComponnet__VariantProps,
    internalArgProps: PlasmicSubItemsComponnet__ArgProps
  }
);

export default PlasmicSubItemsComponnet;
/* prettier-ignore-end */
