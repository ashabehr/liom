/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: ghwXD1CqaWYi

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import RadioGrop from "../../RadioGrop"; // plasmic-import: mcNKMbL_6N75/component
import DirectDialog2 from "../../DirectDialog2"; // plasmic-import: TQdexUKMB_Ec/component
import VigetLiom from "../../VigetLiom"; // plasmic-import: BIrjMygSfTRI/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import Switchbest from "../../Switchbest"; // plasmic-import: ofUp1AS5glz5/component
import Load from "../../Load"; // plasmic-import: MJo5g_R-znVP/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicHamyarAdd.module.css"; // plasmic-import: ghwXD1CqaWYi/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: rjflJ2D4OoXB/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon157Icon from "./icons/PlasmicIcon__Icon157"; // plasmic-import: pYMHtMPOTSpB/icon
import Icon153Icon from "./icons/PlasmicIcon__Icon153"; // plasmic-import: P9oglo5LEXFz/icon
import Icon156Icon from "./icons/PlasmicIcon__Icon156"; // plasmic-import: 1jjGssoVHwzo/icon
import Icon155Icon from "./icons/PlasmicIcon__Icon155"; // plasmic-import: 23a494aT3I5j/icon
import Icon217Icon from "./icons/PlasmicIcon__Icon217"; // plasmic-import: LCc0I6S3wL-C/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicHamyarAdd__VariantMembers = {};
export type PlasmicHamyarAdd__VariantsArgs = {};
type VariantPropType = keyof PlasmicHamyarAdd__VariantsArgs;
export const PlasmicHamyarAdd__VariantProps = new Array<VariantPropType>();

export type PlasmicHamyarAdd__ArgsType = {};
type ArgPropType = keyof PlasmicHamyarAdd__ArgsType;
export const PlasmicHamyarAdd__ArgProps = new Array<ArgPropType>();

export type PlasmicHamyarAdd__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  section?: Flex__<"section">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  hamyarList?: Flex__<typeof ApiRequest>;
  number2?: Flex__<typeof AntdModal>;
  textInput?: Flex__<typeof TextInput>;
  antdInput?: Flex__<typeof Input>;
  button2?: Flex__<typeof Button>;
  name2?: Flex__<typeof AntdModal>;
  textInput2?: Flex__<typeof TextInput>;
  antdInput2?: Flex__<typeof Input>;
  radioGrop?: Flex__<typeof RadioGrop>;
  button3?: Flex__<typeof Button>;
  sms?: Flex__<typeof AntdModal>;
  button4?: Flex__<typeof Button>;
  button5?: Flex__<typeof Button>;
  remove?: Flex__<typeof AntdModal>;
  removeBtn?: Flex__<typeof Button>;
  button9?: Flex__<typeof Button>;
  directDialog2?: Flex__<typeof DirectDialog2>;
  button?: Flex__<typeof Button>;
  vigetLiom?: Flex__<typeof VigetLiom>;
  popover?: Flex__<typeof AntdPopover>;
  button6?: Flex__<typeof Button>;
  button7?: Flex__<typeof Button>;
  switchbest?: Flex__<typeof Switchbest>;
  img?: Flex__<typeof PlasmicImg__>;
  load?: Flex__<typeof Load>;
};

export interface DefaultHamyarAddProps {}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamyarAdd__RenderFunc(props: {
  variants: PlasmicHamyarAdd__VariantsArgs;
  args: PlasmicHamyarAdd__ArgsType;
  overrides: PlasmicHamyarAdd__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "number2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.token || window.localStorage.getItem("token");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "relation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userinfo.healthStatus == "pregnancy"
                ? "hamyarPregnancy"
                : "hamyar";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "masseg",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "errror",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "sms.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "switchbest[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "popover[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button6[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "button7[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "remove.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "removeBtn.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? "whiteYellowLine"
            : "whiteYellowLine"
      },
      {
        path: "button9.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "hamyarList.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "hamyarList.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "hamyarList.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popoverOpen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [false, false]
      },
      {
        path: "removeItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loadingBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "v",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "directDialog2.selectShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "directDialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "errorMassege",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "v2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "load.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "userinfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "info",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          success: true,
          result: {
            text: "\u0628\u0627 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0647\u0645\u06cc\u0627\u0631 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0647 \u06a9\u0633\u06cc \u06a9\u0647 \u0634\u0645\u0627\u0631\u0647\u200c\u0634\u0648 \u0648\u0627\u0631\u062f \u0645\u06cc\u200c\u06a9\u0646\u06cc \u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u062f\u06cc \u062a\u0627 \u0645\u0631\u0627\u062d\u0644 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\u062a \u0631\u0648 \u0628\u0628\u06cc\u0646\u0647 \u0648 \u062a\u0648 \u0644\u062d\u0638\u0627\u062a \u062d\u0633\u0627\u0633 \u06a9\u0646\u0627\u0631\u062a \u0628\u0627\u0634\u0647 \u0648 \u0628\u0647\u062a\u0631 \u062f\u0631\u06a9\u062a \u06a9\u0646\u0647 \u062a\u0627 \u062d\u0633 \u0647\u0645\u0631\u0627\u0647\u06cc \u0631\u0648 \u062a\u0648\u06cc \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u062a\u062c\u0631\u0628\u0647 \u06a9\u0646\u06cc. \u2764\ufe0f \u0627\u06af\u0647 \u06af\u0632\u06cc\u0646\u0647 \u0627\u0637\u0644\u0627\u0639\u200c\u0631\u0633\u0627\u0646\u06cc \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0646\u06cc\u060c \u0645\u0627 \u0628\u0647 \u0637\u0648\u0631 \u0645\u0646\u0638\u0645 \u0647\u0631 \u0647\u0641\u062a\u0647 \u067e\u06cc\u0627\u0645\u06cc \u0628\u0647 \u0627\u0648\u0646 \u0634\u062e\u0635 \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u06a9\u0646\u06cc\u0645 \u06a9\u0647 \u0634\u0627\u0645\u0644 \u0627\u0637\u0644\u0627\u0639\u0627\u062a\u06cc \u0627\u0632 \u0648\u0636\u0639\u06cc\u062a \u0631\u0634\u062f \u06a9\u0648\u062f\u06a9 \u0648 \u0646\u06cc\u0627\u0632\u0647\u0627\u06cc \u062a\u0648 \u062f\u0631 \u0627\u06cc\u0646 \u0647\u0641\u062a\u0647 \u0627\u0632 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\u0647. \u0627\u06cc\u0646 \u067e\u06cc\u0627\u0645\u200c\u0647\u0627 \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0646 \u062a\u0627 \u0628\u0627 \u0634\u0631\u0627\u06cc\u0637\u062a \u0622\u0634\u0646\u0627 \u0628\u0634\u0647 \u0648 \u062f\u0631 \u0645\u0648\u0627\u0642\u0639\u06cc \u06a9\u0647 \u0646\u06cc\u0627\u0632 \u062f\u0627\u0631\u06cc\u060c \u0647\u0645\u0631\u0627\u0647 \u0648 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u062a \u0628\u0627\u0634\u0647  \u062a\u0627 \u0628\u0627 \u0622\u0631\u0627\u0645\u0634 \u0628\u06cc\u0634\u062a\u0631\u06cc \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0631\u0648 \u0628\u06af\u0630\u0631\u0648\u0646\u06cc. \u0628\u0627 \u0647\u0645\u06cc\u0627\u0631 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\u060c \u06cc\u06a9 \u0645\u0633\u06cc\u0631 \u0622\u0631\u0627\u0645\u200c\u062a\u0631 \u0648 \u062d\u0633 \u062d\u0645\u0627\u06cc\u062a \u0648\u0627\u0642\u0639\u06cc \u0631\u0648 \u062a\u062c\u0631\u0628\u0647 \u06a9\u0646! ",
            isActive: false,
            banners: [
              {
                banner:
                  "https://liom.storage.c2.liara.space/config/hamyar/ham1.png",
                action: "#calendar"
              },
              {
                banner:
                  "https://liom.storage.c2.liara.space/config/hamyar/ham2.png",
                action: "#calendar"
              },
              {
                banner:
                  "https://liom.storage.c2.liara.space/config/hamyar/ham3.png",
                action: "#calendar"
              }
            ],
            partnerOverView: "",
            partnerOverViewImage: "",
            limitHamyar: 1,
            background:
              "https://liom.storage.c2.liara.space/config/hamyar/hamyar_pregnancy.png"
          }
        })
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "shopType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["params"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          return urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["params"] != null &&
                typeof $steps["params"] === "object" &&
                typeof $steps["params"].then === "function"
              ) {
                $steps["params"] = await $steps["params"];
              }

              $steps["clearParams"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const searchParams = new URLSearchParams(
                            window.location.search
                          );
                          searchParams.delete("token");
                          searchParams.delete("userId");
                          searchParams.delete("user_id");
                          const newUrl = `${
                            window.location.pathname
                          }?${searchParams.toString()}`;
                          return window.history.replaceState(null, "", newUrl);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["clearParams"] != null &&
                typeof $steps["clearParams"] === "object" &&
                typeof $steps["clearParams"].then === "function"
              ) {
                $steps["clearParams"] = await $steps["clearParams"];
              }

              $steps["setCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (
                            $state.paramsObject.token !== undefined &&
                            $state.paramsObject.token.trim() !== ""
                          ) {
                            if (!$state.paramsObject.token.startsWith("ey"))
                              $state.paramsObject.token =
                                $state.paramsObject.token.slice(6, -3);
                            var setCookie = (name, value, days) => {
                              const expires = new Date(
                                Date.now() + days * 86400000
                              ).toUTCString();
                              document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                            };
                            return setCookie(
                              "token",
                              JSON.stringify([$state.paramsObject.token]),
                              100
                            );
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["setCookie"] != null &&
                typeof $steps["setCookie"] === "object" &&
                typeof $steps["setCookie"].then === "function"
              ) {
                $steps["setCookie"] = await $steps["setCookie"];
              }

              $steps["getCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var getCookie = name => {
                            const cookies = document.cookie.split("; ");
                            for (let cookie of cookies) {
                              const [key, value] = cookie.split("=");
                              if (key === name) return JSON.parse(value)[0];
                            }
                            return "";
                          };
                          return ($state.token = getCookie("token"));
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getCookie"] != null &&
                typeof $steps["getCookie"] === "object" &&
                typeof $steps["getCookie"].then === "function"
              ) {
                $steps["getCookie"] = await $steps["getCookie"];
              }

              $steps["profile"] =
                $state.token != ""
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "GET",
                          "https://n8n.staas.ir/webhook/users/profile",
                          undefined,
                          undefined,
                          (() => {
                            try {
                              return {
                                headers: { Authorization: $state.token }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["profile"] != null &&
                typeof $steps["profile"] === "object" &&
                typeof $steps["profile"].then === "function"
              ) {
                $steps["profile"] = await $steps["profile"];
              }

              $steps["updateUserinfo"] = $steps.profile?.data
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["userinfo"]
                      },
                      operation: 0,
                      value: $steps.profile.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateUserinfo"] != null &&
                typeof $steps["updateUserinfo"] === "object" &&
                typeof $steps["updateUserinfo"].then === "function"
              ) {
                $steps["updateUserinfo"] = await $steps["updateUserinfo"];
              }

              $steps["info"] = $state.userinfo?.healthStatus
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/rest/user/hamyar/info",
                        (() => {
                          try {
                            return {
                              authorization: $state.token,
                              type:
                                $state.userinfo.healthStatus == "pregnancy"
                                  ? "pregnancy"
                                  : "hamyar"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["info"] != null &&
                typeof $steps["info"] === "object" &&
                typeof $steps["info"].then === "function"
              ) {
                $steps["info"] = await $steps["info"];
              }

              $steps["updateInfo"] = $steps.info?.data
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["info"]
                      },
                      operation: 0,
                      value: $steps.info.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateInfo"] != null &&
                typeof $steps["updateInfo"] === "object" &&
                typeof $steps["updateInfo"].then === "function"
              ) {
                $steps["updateInfo"] = await $steps["updateInfo"];
              }

              $steps["updateLoading"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["loading"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateLoading"] != null &&
                typeof $steps["updateLoading"] === "object" &&
                typeof $steps["updateLoading"].then === "function"
              ) {
                $steps["updateLoading"] = await $steps["updateLoading"];
              }
            }}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <HeaderLiom
              data-plasmic-name={"headerLiom"}
              data-plasmic-override={overrides.headerLiom}
              className={classNames("__wab_instance", sty.headerLiom)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__sauTb)}>
                <XIcon
                  className={classNames(projectcss.all, sty.svg__pBure)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return window.history.back();
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__azbDv
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.userinfo.healthStatus == "pregnancy"
                          ? "همیار بارداری"
                          : "همیار قاعدگی";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0647\u0645\u06cc\u0627\u0631 \u0642\u0627\u0639\u062f\u06af\u06cc";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </HeaderLiom>
          </section>
          <ApiRequest
            data-plasmic-name={"hamyarList"}
            data-plasmic-override={overrides.hamyarList}
            children={null}
            className={classNames("__wab_instance", sty.hamyarList)}
            errorDisplay={
              <div className={classNames(projectcss.all, sty.freeBox__iCc9A)}>
                <div className={classNames(projectcss.all, sty.freeBox__sm2Ku)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__emSkm,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__rXinr,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__ra5M5,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__z6DJi,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__qxwgP,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__mgLUt,
                      "shimmer"
                    )}
                  />
                </div>
              </div>
            }
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["hamyarList", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "hamyarList",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["hamyarList", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={(() => {
              try {
                return {
                  authorization: $state.token,
                  type: $state.type,
                  v: $state.v
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            shouldFetch={true}
            url={"https://n8n.staas.ir/webhook/rest/user/hamyar/add"}
          />

          <AntdModal
            data-plasmic-name={"number2"}
            data-plasmic-override={overrides.number2}
            className={classNames("__wab_instance", sty.number2)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              styleTokensClassNames_antd_5_hostless,
              styleTokensClassNames_plasmic_rich_components
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_bUS7RcUARlW_"]]: true
            })}
            modalScopeClassName={sty["number2__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["number2", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["number2", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__er2MV
                )}
              >
                {
                  "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0647\u0645\u06cc\u0627\u0631 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u06cc\u0646\u062c\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646."
                }
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_fMYkHfSbeGo3"]]: true })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__mnTo6)}>
              <div className={classNames(projectcss.all, sty.freeBox__h6NgG)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__td4JB
                  )}
                >
                  {
                    "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___5CYz,
                    "negative"
                  )}
                >
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    antdInput2={(() => {
                      const child$Props = {
                        "aria-label": ``,
                        bordered: false,
                        className: classNames("__wab_instance", sty.antdInput),
                        id: "inputMobile1",
                        maxLength: (() => {
                          try {
                            return $state.number.startsWith("0") ? 11 : 10;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["antdInput", "value"],
                            Input_Helpers
                          ).apply(null, eventArgs);

                          (async event => {
                            const $steps = {};

                            $steps["updateNumber"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["number"]
                                    },
                                    operation: 0,
                                    value: $state.antdInput.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateNumber"] != null &&
                              typeof $steps["updateNumber"] === "object" &&
                              typeof $steps["updateNumber"].then === "function"
                            ) {
                              $steps["updateNumber"] = await $steps[
                                "updateNumber"
                              ];
                            }
                          }).apply(null, eventArgs);
                        },
                        placeholder: "9123456789",
                        size: "large",
                        type: "tel",
                        value: generateStateValueProp($state, [
                          "antdInput",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "antdInput.value"
                          }
                        ],
                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Input
                          data-plasmic-name={"antdInput"}
                          data-plasmic-override={overrides.antdInput}
                          {...child$Props}
                        />
                      );
                    })()}
                    className={classNames("__wab_instance", sty.textInput)}
                    endIcon={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yzpcH
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gYfUi,
                            "negative"
                          )}
                        >
                          {"+98 "}
                        </div>
                        <Icon111Icon
                          className={classNames(projectcss.all, sty.svg__fvBa)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async event => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"09123456789"}
                    required={false}
                    showEndIcon={true}
                    type={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "tel"
                        : "tel"
                    }
                    value={
                      generateStateValueProp($state, ["textInput", "value"]) ??
                      ""
                    }
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__njPvf)}>
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  color={generateStateValueProp($state, ["button2", "color"])}
                  isDisabled={(() => {
                    try {
                      return $state.number.startsWith("0")
                        ? $state.number.length != 11
                        : $state.number.length != 10;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateNumber2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["number2", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateNumber2Open"] != null &&
                      typeof $steps["updateNumber2Open"] === "object" &&
                      typeof $steps["updateNumber2Open"].then === "function"
                    ) {
                      $steps["updateNumber2Open"] = await $steps[
                        "updateNumber2Open"
                      ];
                    }

                    $steps["updateName2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["name2", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateName2Open"] != null &&
                      typeof $steps["updateName2Open"] === "object" &&
                      typeof $steps["updateName2Open"].then === "function"
                    ) {
                      $steps["updateName2Open"] = await $steps[
                        "updateName2Open"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mVIjF
                    )}
                  >
                    {"\u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
              </div>
            </div>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"name2"}
            data-plasmic-override={overrides.name2}
            className={classNames("__wab_instance", sty.name2)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              styleTokensClassNames_antd_5_hostless,
              styleTokensClassNames_plasmic_rich_components
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_LSqMNdqmG8Ng"]]: true
            })}
            modalScopeClassName={sty["name2__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["name2", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["name2", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__puznu
                )}
              >
                {
                  "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0647\u0645\u06cc\u0627\u0631\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                }
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_qz4vsdlQ6HR6"]]: true })}
          >
            <div className={classNames(projectcss.all, sty.freeBox___5Exa8)}>
              <div className={classNames(projectcss.all, sty.freeBox___0Vial)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yEjlJ
                  )}
                >
                  {
                    "\u0646\u0627\u0645 \u0647\u0645\u06cc\u0627\u0631 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___4DwHk,
                    "negative"
                  )}
                >
                  <TextInput
                    data-plasmic-name={"textInput2"}
                    data-plasmic-override={overrides.textInput2}
                    antdInput2={(() => {
                      const child$Props = {
                        "aria-label": ``,
                        bordered: false,
                        className: classNames("__wab_instance", sty.antdInput2),
                        id: "inputMobile1",
                        maxLength: (() => {
                          try {
                            return $state.number.startsWith("0") ? 11 : 10;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["antdInput2", "value"],
                            Input_Helpers
                          ).apply(null, eventArgs);

                          (async event => {
                            const $steps = {};

                            $steps["updateName"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["name"]
                                    },
                                    operation: 0,
                                    value: $state.antdInput2.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateName"] != null &&
                              typeof $steps["updateName"] === "object" &&
                              typeof $steps["updateName"].then === "function"
                            ) {
                              $steps["updateName"] = await $steps["updateName"];
                            }
                          }).apply(null, eventArgs);
                        },
                        placeholder:
                          "\u0645\u062b\u0644\u0627 \u0639\u0644\u06cc\u060c \u0639\u0634\u0642\u0645\u060c \u0645\u0627\u0645\u0627\u0646 \u0632\u0647\u0631\u0647\u060c \u0628\u0627\u0628\u0627\u060c \u0645\u06cc\u0646\u0627\u060c ...",
                        size: "large",
                        type: "text",
                        value: generateStateValueProp($state, [
                          "antdInput2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "antdInput2.value"
                          }
                        ],
                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Input
                          data-plasmic-name={"antdInput2"}
                          data-plasmic-override={overrides.antdInput2}
                          {...child$Props}
                        />
                      );
                    })()}
                    className={classNames("__wab_instance", sty.textInput2)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput2",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async event => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"09123456789"}
                    required={false}
                    type={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "tel"
                        : "text"
                    }
                    value={
                      generateStateValueProp($state, ["textInput2", "value"]) ??
                      ""
                    }
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__t1Fww)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fXhte
                  )}
                >
                  {
                    "\u0686\u0647 \u0646\u0633\u0628\u062a\u06cc \u0628\u0627\u0647\u0645 \u062f\u0627\u0631\u06cc\u062f\u061f"
                  }
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__aprqE)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [
                          {
                            type: "mother",
                            text: "مادر هستند"
                          },
                          {
                            type: "husband",
                            text: "همسر هستند"
                          }
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <RadioGrop
                        data-plasmic-name={"radioGrop"}
                        data-plasmic-override={overrides.radioGrop}
                        className={classNames("__wab_instance", sty.radioGrop)}
                        disable={(() => {
                          try {
                            return (
                              $state.hamyarList.data.result.filter(
                                item => item.rel.relation == currentItem.type
                              ).length != 0
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateRelation"] =
                            $state.hamyarList.data.result.filter(
                              item => item.rel.relation == currentItem.type
                            ).length == 0
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["relation"]
                                    },
                                    operation: 0,
                                    value: currentItem.type
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateRelation"] != null &&
                            typeof $steps["updateRelation"] === "object" &&
                            typeof $steps["updateRelation"].then === "function"
                          ) {
                            $steps["updateRelation"] = await $steps[
                              "updateRelation"
                            ];
                          }

                          $steps["invokeGlobalAction"] =
                            $state.hamyarList.data.result.filter(
                              item => item.rel.relation == currentItem.type
                            ).length != 0
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      (() => {
                                        try {
                                          return `فقط یک همیار با نسبت ${
                                            currentItem.text.split("هستند")[0]
                                          }میتونید اضافه کنید.`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      "bottom-center"
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        selectedLine={(() => {
                          try {
                            return currentItem.type == $state.relation;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kfOxD
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.text;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u0627\u062f\u0631 \u0647\u0633\u062a\u0646\u062f";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </RadioGrop>
                    );
                  })}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vSiEp)}>
                <Button
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames("__wab_instance", sty.button3)}
                  color={generateStateValueProp($state, ["button3", "color"])}
                  isDisabled={(() => {
                    try {
                      return (
                        $state.name.length == 0 ||
                        $state.relation.length == 0 ||
                        $state.loadingBtn
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  loading={(() => {
                    try {
                      return $state.loadingBtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadingBtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingBtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingBtn2"] != null &&
                      typeof $steps["updateLoadingBtn2"] === "object" &&
                      typeof $steps["updateLoadingBtn2"].then === "function"
                    ) {
                      $steps["updateLoadingBtn2"] = await $steps[
                        "updateLoadingBtn2"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "PUT",
                              "https://n8n.staas.ir/webhook/rest/user/hamyar/add",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    authorization: $state.token,
                                    mobile: $state.number,
                                    name: $state.name,
                                    type: $state.type,
                                    relation: $state.relation
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] =
                      $steps.invokeGlobalAction?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f.",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["updateMasseg"] =
                      $steps.invokeGlobalAction?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["masseg"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction.data.result
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateMasseg"] != null &&
                      typeof $steps["updateMasseg"] === "object" &&
                      typeof $steps["updateMasseg"].then === "function"
                    ) {
                      $steps["updateMasseg"] = await $steps["updateMasseg"];
                    }

                    $steps["updateErrror"] =
                      $steps.invokeGlobalAction?.data?.success == false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["errror"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction.data.error
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateErrror"] != null &&
                      typeof $steps["updateErrror"] === "object" &&
                      typeof $steps["updateErrror"].then === "function"
                    ) {
                      $steps["updateErrror"] = await $steps["updateErrror"];
                    }

                    $steps["invokeGlobalAction3"] =
                      $steps.invokeGlobalAction?.data?.success == false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                (() => {
                                  try {
                                    return $state.errror.message;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                "bottom-center",
                                10000
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["updateSmsOpen"] = $steps.invokeGlobalAction?.data
                      ?.success
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["sms", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSmsOpen"] != null &&
                      typeof $steps["updateSmsOpen"] === "object" &&
                      typeof $steps["updateSmsOpen"].then === "function"
                    ) {
                      $steps["updateSmsOpen"] = await $steps["updateSmsOpen"];
                    }

                    $steps["updateName2Open"] = $steps.invokeGlobalAction?.data
                      ?.success
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["name2", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateName2Open"] != null &&
                      typeof $steps["updateName2Open"] === "object" &&
                      typeof $steps["updateName2Open"].then === "function"
                    ) {
                      $steps["updateName2Open"] = await $steps[
                        "updateName2Open"
                      ];
                    }

                    $steps["updateV"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["v"]
                            },
                            operation: 0,
                            value: $state.v + "s"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateV"] != null &&
                      typeof $steps["updateV"] === "object" &&
                      typeof $steps["updateV"].then === "function"
                    ) {
                      $steps["updateV"] = await $steps["updateV"];
                    }

                    $steps["updateLoadingBtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingBtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingBtn"] != null &&
                      typeof $steps["updateLoadingBtn"] === "object" &&
                      typeof $steps["updateLoadingBtn"].then === "function"
                    ) {
                      $steps["updateLoadingBtn"] = await $steps[
                        "updateLoadingBtn"
                      ];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.antdInput.value = "";
                                return ($state.antdInput2.value = "");
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rvz35
                    )}
                  >
                    {"\u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
              </div>
            </div>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"sms"}
            data-plasmic-override={overrides.sms}
            className={classNames("__wab_instance", sty.sms)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              styleTokensClassNames_antd_5_hostless,
              styleTokensClassNames_plasmic_rich_components
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_8DFCYz1amNoQ"]]: true
            })}
            modalScopeClassName={sty["sms__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["sms", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["sms", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4K6Nb
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.masseg.title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0647\u0645\u06cc\u0627\u0631\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_cD8M0R08biXG"]]: true })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ihKTo)}>
              <div className={classNames(projectcss.all, sty.freeBox__ah5IW)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cs8YT
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.masseg.message;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__oyXk)}>
                <Button
                  data-plasmic-name={"button4"}
                  data-plasmic-override={overrides.button4}
                  className={classNames("__wab_instance", sty.button4)}
                  color={generateStateValueProp($state, ["button4", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                let shareText = $state.masseg.message;
                                if (navigator.share) {
                                  return navigator.share({
                                    title: "لیوم | تقویم قاعدگی",
                                    text: shareText
                                  });
                                } else {
                                  $$.copyToClipboard(shareText);
                                  return alert(
                                    "مرورگر شما از قابلیت اشتراک‌گذاری پشتیبانی نمی‌کند.\nمتن در کلیپ‌بورد کپی شد. حالا می‌توانید آن را در برنامه‌های دیگر به اشتراک بگذارید."
                                  );
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button4", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uceUp
                    )}
                  >
                    {
                      "\u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc"
                    }
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button5"}
                  data-plasmic-override={overrides.button5}
                  className={classNames("__wab_instance", sty.button5)}
                  color={generateStateValueProp($state, ["button5", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateName2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["sms", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateName2Open"] != null &&
                      typeof $steps["updateName2Open"] === "object" &&
                      typeof $steps["updateName2Open"].then === "function"
                    ) {
                      $steps["updateName2Open"] = await $steps[
                        "updateName2Open"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.staas.ir/webhook/rest/user/hamyar/add",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    authorization: $state.token,
                                    id: $state.masseg.id
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] =
                      $steps.invokeGlobalAction?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0628\u0647 \u0647\u0645\u06cc\u0627\u0631\u062a \u0627\u0631\u0633\u0627\u0644 \u0634\u062f.",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button5", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yk9I
                    )}
                  >
                    {
                      "\u0644\u06cc\u0646\u06a9 \u062f\u0639\u0648\u062a \u062a\u0648\u0633\u0637 \u0644\u06cc\u0648\u0645 \u0628\u0631\u0627\u06cc \u0647\u0645\u06cc\u0627\u0631\u0645 \u0627\u0631\u0633\u0627\u0644 \u0634\u0648\u062f  >"
                    }
                  </div>
                </Button>
              </div>
            </div>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"remove"}
            data-plasmic-override={overrides.remove}
            className={classNames("__wab_instance", sty.remove)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              styleTokensClassNames_antd_5_hostless,
              styleTokensClassNames_plasmic_rich_components
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_gYTfcx2OxZGf"]]: true,
              [sty["pcls_w5dAfaQVKkM0"]]: hasVariant(
                globalVariants,
                "screen",
                "mobile"
              )
            })}
            modalScopeClassName={sty["remove__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["remove", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["remove", "open"])}
            title={
              <div className={classNames(projectcss.all, sty.freeBox__iCdfj)}>
                <Icon157Icon
                  className={classNames(projectcss.all, sty.svg__oe9Ho)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8D9Gn
                  )}
                >
                  {"\u062d\u0630\u0641 \u0647\u0645\u06cc\u0627\u0631"}
                </div>
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_rDRWK3YhJHGw"]]: true })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__z1KFv)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u4WeR
                )}
              >
                {
                  "\u0628\u0627 \u062d\u0630\u0641 \u0647\u0645\u06cc\u0627\u0631\u060c \u062f\u06cc\u06af\u0647 \u067e\u06cc\u0627\u0645\u06a9\u06cc \u0628\u0631\u0627\u0634 \u0627\u0631\u0633\u0627\u0644 \u0646\u0645\u06cc\u0634\u0647. \u0627\u0632 \u0627\u0646\u062c\u0627\u0645 \u0627\u06cc\u0646\u06a9\u0627\u0631 \u0645\u0637\u0645\u0626\u0646\u06cc \u061f"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ovDxF)}>
                <Button
                  data-plasmic-name={"removeBtn"}
                  data-plasmic-override={overrides.removeBtn}
                  className={classNames("__wab_instance", sty.removeBtn)}
                  color={generateStateValueProp($state, ["removeBtn", "color"])}
                  isDisabled={(() => {
                    try {
                      return $state.loadingBtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  loading={(() => {
                    try {
                      return $state.loadingBtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadingBtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingBtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingBtn"] != null &&
                      typeof $steps["updateLoadingBtn"] === "object" &&
                      typeof $steps["updateLoadingBtn"].then === "function"
                    ) {
                      $steps["updateLoadingBtn"] = await $steps[
                        "updateLoadingBtn"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "PATCH",
                              "https://n8n.staas.ir/webhook/rest/user/hamyar/add",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    id: $state.removeItem.hamyar.id,
                                    type: $state.type,
                                    hamyarType: "myHamyar",
                                    authorization: $state.token
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateV"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["v"]
                            },
                            operation: 0,
                            value: $state.v + "s"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateV"] != null &&
                      typeof $steps["updateV"] === "object" &&
                      typeof $steps["updateV"].then === "function"
                    ) {
                      $steps["updateV"] = await $steps["updateV"];
                    }

                    $steps["updateRemoveOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["remove", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateRemoveOpen"] != null &&
                      typeof $steps["updateRemoveOpen"] === "object" &&
                      typeof $steps["updateRemoveOpen"].then === "function"
                    ) {
                      $steps["updateRemoveOpen"] = await $steps[
                        "updateRemoveOpen"
                      ];
                    }

                    $steps["updateLoadingBtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadingBtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingBtn2"] != null &&
                      typeof $steps["updateLoadingBtn2"] === "object" &&
                      typeof $steps["updateLoadingBtn2"].then === "function"
                    ) {
                      $steps["updateLoadingBtn2"] = await $steps[
                        "updateLoadingBtn2"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["removeBtn", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  size={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "minimal"
                      : undefined
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iaKjk
                    )}
                  >
                    {"\u062d\u0630\u0641"}
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button9"}
                  data-plasmic-override={overrides.button9}
                  className={classNames("__wab_instance", sty.button9)}
                  color={generateStateValueProp($state, ["button9", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateName2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["remove", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateName2Open"] != null &&
                      typeof $steps["updateName2Open"] === "object" &&
                      typeof $steps["updateName2Open"].then === "function"
                    ) {
                      $steps["updateName2Open"] = await $steps[
                        "updateName2Open"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button9", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  size={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "compact"
                      : "compact"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yk8Xc
                    )}
                  >
                    {"\u0641\u0639\u0644\u0627 \u0646\u0647"}
                  </div>
                </Button>
              </div>
            </div>
          </AntdModal>
          <DirectDialog2
            data-plasmic-name={"directDialog2"}
            data-plasmic-override={overrides.directDialog2}
            className={classNames("__wab_instance", sty.directDialog2)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "directDialog2",
                "open"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onSelectShopChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "directDialog2",
                "selectShop"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["directDialog2", "open"])}
            redirectUrl={(() => {
              try {
                return `https://apps.liom.app/shopResult?buyId=${
                  $state.directDialog2.selectShop.id
                }&?offCode=&token=hjk812${localStorage.getItem(
                  "token"
                )}jkp&redirectUrl=https://apps.liom.app/Self-care/`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            token={(() => {
              try {
                return window.localStorage.getItem("token");
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            type={(() => {
              try {
                return $state.shopType;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          {(() => {
            try {
              return !$state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox___4B9Em)}>
              <div className={classNames(projectcss.all, sty.freeBox__kHgoE)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Cs0C
                  )}
                >
                  <div
                    className={projectcss.__wab_expr_html_text}
                    dangerouslySetInnerHTML={{
                      __html: (() => {
                        try {
                          return $state.info.result.text;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "<p>\r\n    \u0628\u0627 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 <b>\u0647\u0645\u06cc\u0627\u0631 \u0642\u0627\u0639\u062f\u06af\u06cc</b> \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0647 \u0647\u0631 \u06a9\u0633\u06cc \u06a9\u0647 \u0634\u0645\u0627\u0631\u0647\u200c\u0634\u0648 \u0648\u0627\u0631\u062f \u0645\u06cc\u200c\u06a9\u0646\u06cc \u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u062f\u06cc \u062a\u0627 \r\n    <b>\u062f\u0648\u0631\u0647\u200c\u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a</b> \u0631\u0648 \u0628\u0628\u06cc\u0646\u0647 \u0648 \u062a\u0648 \u0644\u062d\u0638\u0627\u062a \u0633\u062e\u062a \u06a9\u0646\u0627\u0631\u062a \u0628\u0627\u0634\u0647 \u0648 <b>\u0628\u0647\u062a\u0631 \u062f\u0631\u06a9\u062a \u06a9\u0646\u0647 \u2764\ufe0f</b>.\r\n    \u0627\u06af\u0647 \u0642\u0627\u0628\u0644\u06cc\u062a <b>\u0627\u0637\u0644\u0627\u0639\u200c\u0631\u0633\u0627\u0646\u06cc \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9</b> \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0646\u06cc\u060c \u0645\u0627 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0648\u062f\u06a9\u0627\u0631 \u0648\u0642\u062a\u06cc \u062a\u0648 \u062f\u0648\u0631\u0627\u0646 \r\n    <b>PMS\u060c \u062a\u062e\u0645\u06a9\u200c\u06af\u0630\u0627\u0631\u06cc \u06cc\u0627 \u067e\u0631\u06cc\u0648\u062f</b> \u0628\u0627\u0634\u06cc\u060c \u0628\u0631\u0627\u06cc \u0634\u062e\u0635\u06cc \u06a9\u0647 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0631\u062f\u06cc <b>\u067e\u06cc\u0627\u0645\u06a9</b> \u0645\u06cc\u200c\u0641\u0631\u0633\u062a\u06cc\u0645.\r\n</p>\r";
                          }
                          throw e;
                        }
                      })()
                    }}
                  />
                </div>
                {(() => {
                  try {
                    return $state.hamyarList.data.result.length != 2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={generateStateValueProp($state, ["button", "color"])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["number2", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen"] != null &&
                        typeof $steps["updateModalOpen"] === "object" &&
                        typeof $steps["updateModalOpen"].then === "function"
                      ) {
                        $steps["updateModalOpen"] = await $steps[
                          "updateModalOpen"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wAY
                      )}
                    >
                      {
                        "\u0627\u0641\u0632\u0648\u062f\u0646 \u0647\u0645\u06cc\u0627\u0631"
                      }
                    </div>
                  </Button>
                ) : null}
              </div>
              {(() => {
                try {
                  return $state.hamyarList.data.result.length != 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <VigetLiom
                  data-plasmic-name={"vigetLiom"}
                  data-plasmic-override={overrides.vigetLiom}
                  className={classNames("__wab_instance", sty.vigetLiom)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sK8W
                    )}
                  >
                    {
                      "\u0647\u0645\u06cc\u0627\u0631 \u0647\u0627\u06cc \u0645\u0646"
                    }
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml___0DzHz
                    )}
                    code={"<hr></hr>"}
                  />

                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.hamyarList.data.result;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uH41B
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vkwjR
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ryj9
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.hamyar.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0639\u0644\u06cc";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__inBq9
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    var a = [
                                      {
                                        type: "mother",
                                        text: "مادر"
                                      },
                                      {
                                        type: "husband",
                                        text: "همسر"
                                      }
                                    ];

                                    return `(نسبت: ${
                                      a.find(
                                        item =>
                                          item.type == currentItem.rel.relation
                                      ).text
                                    })`;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "(\u0646\u0633\u0628\u062a: \u0647\u0645\u0633\u0631)";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          {(() => {
                            const child$Props = {
                              arrow: false,
                              className: classNames(
                                "__wab_instance",
                                sty.popover
                              ),
                              content: (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___7WG
                                  )}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.button6
                                      ),
                                      color: generateStateValueProp($state, [
                                        "button6",
                                        __plasmic_idx_0,
                                        "color"
                                      ]),
                                      onClick: async event => {
                                        const $steps = {};

                                        $steps["runCode2"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    return ($state.popover[
                                                      currentIndex
                                                    ].open = false);
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runCode2"] != null &&
                                          typeof $steps["runCode2"] ===
                                            "object" &&
                                          typeof $steps["runCode2"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode2"] = await $steps[
                                            "runCode2"
                                          ];
                                        }

                                        $steps["runCode"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    let shareText =
                                                      currentItem.textInvitation;
                                                    if (navigator.share) {
                                                      return navigator.share({
                                                        title:
                                                          "لیوم | تقویم قاعدگی",
                                                        text: shareText
                                                      });
                                                    } else {
                                                      $$.copyToClipboard(
                                                        shareText
                                                      );
                                                      return alert(
                                                        "مرورگر شما از قابلیت اشتراک‌گذاری پشتیبانی نمی‌کند.\nمتن در کلیپ‌بورد کپی شد. حالا می‌توانید آن را در برنامه‌های دیگر به اشتراک بگذارید."
                                                      );
                                                    }
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] = await $steps[
                                            "runCode"
                                          ];
                                        }
                                      },
                                      onColorChange: async (
                                        ...eventArgs: any
                                      ) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "button6",
                                            __plasmic_idx_0,
                                            "color"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      },
                                      showStartIcon: true,
                                      size: "compact",
                                      startIcon: (
                                        <Icon156Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__gNq5H
                                          )}
                                          role={"img"}
                                        />
                                      )
                                    };

                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "button6[].color",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => "clear"
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <Button
                                        data-plasmic-name={"button6"}
                                        data-plasmic-override={
                                          overrides.button6
                                        }
                                        {...child$Props}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__gqCdA
                                          )}
                                        >
                                          {
                                            "\u0627\u0631\u0633\u0627\u0644 \u062f\u0639\u0648\u062a\u0646\u0627\u0645\u0647"
                                          }
                                        </div>
                                      </Button>
                                    );
                                  })()}
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.button7
                                      ),
                                      color: generateStateValueProp($state, [
                                        "button7",
                                        __plasmic_idx_0,
                                        "color"
                                      ]),
                                      onClick: async event => {
                                        const $steps = {};

                                        $steps["runCode"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return ($state.popover[
                                                    currentIndex
                                                  ].open = false);
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] = await $steps[
                                            "runCode"
                                          ];
                                        }

                                        $steps["updateRemoveOpen"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "remove",
                                                    "open"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateRemoveOpen"] != null &&
                                          typeof $steps["updateRemoveOpen"] ===
                                            "object" &&
                                          typeof $steps["updateRemoveOpen"]
                                            .then === "function"
                                        ) {
                                          $steps["updateRemoveOpen"] =
                                            await $steps["updateRemoveOpen"];
                                        }

                                        $steps["updateRemoveItem"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["removeItem"]
                                                },
                                                operation: 0,
                                                value: currentItem
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateRemoveItem"] != null &&
                                          typeof $steps["updateRemoveItem"] ===
                                            "object" &&
                                          typeof $steps["updateRemoveItem"]
                                            .then === "function"
                                        ) {
                                          $steps["updateRemoveItem"] =
                                            await $steps["updateRemoveItem"];
                                        }
                                      },
                                      onColorChange: async (
                                        ...eventArgs: any
                                      ) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "button7",
                                            __plasmic_idx_0,
                                            "color"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      },
                                      showStartIcon: true,
                                      size: "compact",
                                      startIcon: (
                                        <Icon155Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg___7RXc4
                                          )}
                                          role={"img"}
                                        />
                                      )
                                    };

                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "button7[].color",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => "clear"
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <Button
                                        data-plasmic-name={"button7"}
                                        data-plasmic-override={
                                          overrides.button7
                                        }
                                        {...child$Props}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__exNo
                                          )}
                                        >
                                          {
                                            "\u062d\u0630\u0641 \u0647\u0645\u06cc\u0627\u0631"
                                          }
                                        </div>
                                      </Button>
                                    );
                                  })()}
                                </div>
                              ),
                              contentText: "Popover contents",
                              defaultStylesClassName: classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                styleTokensClassNames,
                                styleTokensClassNames_antd_5_hostless,
                                styleTokensClassNames_plasmic_rich_components
                              ),
                              mouseEnterDelay: 0,
                              mouseLeaveDelay: 0,
                              onOpenChange: async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "popover",
                                  __plasmic_idx_0,
                                  "open"
                                ]).apply(null, eventArgs);
                              },
                              open: generateStateValueProp($state, [
                                "popover",
                                __plasmic_idx_0,
                                "open"
                              ]),
                              placement: "bottomLeft",
                              popoverScopeClassName: sty["popover__popover"],
                              title: null,
                              trigger: "click"
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "open",
                                  plasmicStateName: "popover[].open"
                                }
                              ],
                              [__plasmic_idx_0],
                              undefined ?? {},
                              child$Props
                            );
                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "popover[].open",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    undefined
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <AntdPopover
                                data-plasmic-name={"popover"}
                                data-plasmic-override={overrides.popover}
                                {...child$Props}
                              >
                                <Icon153Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__feOog
                                  )}
                                  role={"img"}
                                />
                              </AntdPopover>
                            );
                          })()}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gztJa
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oMzwZ
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.hamyar.mobile;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "09038854947";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yqgTw
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ydQlg
                              )}
                            >
                              {
                                "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9"
                              }
                            </div>
                            {(() => {
                              const child$Props = {
                                children: null,
                                className: classNames(
                                  "__wab_instance",
                                  sty.switchbest
                                ),
                                isChecked:
                                  generateStateValueProp($state, [
                                    "switchbest",
                                    __plasmic_idx_0,
                                    "isChecked"
                                  ]) ?? false,
                                onChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "switchbest",
                                      __plasmic_idx_0,
                                      "isChecked"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }

                                  (async isChecked => {
                                    const $steps = {};

                                    $steps["updateLoadLoading"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["load", "loading"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateLoadLoading"] != null &&
                                      typeof $steps["updateLoadLoading"] ===
                                        "object" &&
                                      typeof $steps["updateLoadLoading"]
                                        .then === "function"
                                    ) {
                                      $steps["updateLoadLoading"] =
                                        await $steps["updateLoadLoading"];
                                    }

                                    $steps["invokeGlobalAction"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "POST",
                                              "https://n8n.staas.ir/webhook/rest/user/hamyar/edit",
                                              undefined,
                                              (() => {
                                                try {
                                                  return {
                                                    id: currentItem.hamyar.id,
                                                    type: $state.type,
                                                    statusSms:
                                                      $state.switchbest[
                                                        currentIndex
                                                      ].isChecked,
                                                    authorization: $state.token
                                                  };
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.apiRequest"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }

                                    $steps["runCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return (() => {
                                                if (
                                                  $steps.invokeGlobalAction
                                                    ?.data?.success == false
                                                )
                                                  return ($state.switchbest[
                                                    currentIndex
                                                  ].isChecked = false);
                                              })();
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runCode"] != null &&
                                      typeof $steps["runCode"] === "object" &&
                                      typeof $steps["runCode"].then ===
                                        "function"
                                    ) {
                                      $steps["runCode"] = await $steps[
                                        "runCode"
                                      ];
                                    }

                                    $steps["updateShopType"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["shopType"]
                                            },
                                            operation: 0,
                                            value:
                                              currentItem.rel.relation ==
                                              "mother"
                                                ? "mother_sms"
                                                : "husband_sms"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateShopType"] != null &&
                                      typeof $steps["updateShopType"] ===
                                        "object" &&
                                      typeof $steps["updateShopType"].then ===
                                        "function"
                                    ) {
                                      $steps["updateShopType"] = await $steps[
                                        "updateShopType"
                                      ];
                                    }

                                    $steps["updateDirectDialog2Open"] =
                                      $steps.invokeGlobalAction?.data?.error
                                        ?.code == 1220046
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "directDialog2",
                                                  "open"
                                                ]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateDirectDialog2Open"] !=
                                        null &&
                                      typeof $steps[
                                        "updateDirectDialog2Open"
                                      ] === "object" &&
                                      typeof $steps["updateDirectDialog2Open"]
                                        .then === "function"
                                    ) {
                                      $steps["updateDirectDialog2Open"] =
                                        await $steps["updateDirectDialog2Open"];
                                    }

                                    $steps["updateErrorMassege"] =
                                      $steps.invokeGlobalAction?.data
                                        ?.success == false
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["errorMassege"]
                                              },
                                              operation: 0,
                                              value:
                                                $steps.invokeGlobalAction?.data
                                                  ?.error.message
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateErrorMassege"] != null &&
                                      typeof $steps["updateErrorMassege"] ===
                                        "object" &&
                                      typeof $steps["updateErrorMassege"]
                                        .then === "function"
                                    ) {
                                      $steps["updateErrorMassege"] =
                                        await $steps["updateErrorMassege"];
                                    }

                                    $steps["invokeGlobalAction2"] = $steps
                                      .invokeGlobalAction?.data?.success
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              (() => {
                                                try {
                                                  return $state.switchbest[
                                                    currentIndex
                                                  ].isChecked
                                                    ? "success"
                                                    : "error";
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              (() => {
                                                try {
                                                  return $state.switchbest[
                                                    currentIndex
                                                  ].isChecked
                                                    ? ".اطلاع رسانی فعال شد"
                                                    : "اطلاع رسانی غیرفعال شد.";
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              "bottom-center",
                                              1998
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction2"] != null &&
                                      typeof $steps["invokeGlobalAction2"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction2"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction2"] =
                                        await $steps["invokeGlobalAction2"];
                                    }

                                    $steps["invokeGlobalAction3"] =
                                      $state.errorMassege != ""
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "error",
                                                (() => {
                                                  try {
                                                    return $state.errorMassege;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })(),
                                                "bottom-center",
                                                2000
                                              ]
                                            };
                                            return $globalActions[
                                              "Fragment.showToast"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["invokeGlobalAction3"] != null &&
                                      typeof $steps["invokeGlobalAction3"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction3"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction3"] =
                                        await $steps["invokeGlobalAction3"];
                                    }

                                    $steps["updateV"] = $steps
                                      .invokeGlobalAction?.data?.success
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["v"]
                                            },
                                            operation: 0,
                                            value: $state.v + "1"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateV"] != null &&
                                      typeof $steps["updateV"] === "object" &&
                                      typeof $steps["updateV"].then ===
                                        "function"
                                    ) {
                                      $steps["updateV"] = await $steps[
                                        "updateV"
                                      ];
                                    }

                                    $steps["updateLoadLoading2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["load", "loading"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateLoadLoading2"] != null &&
                                      typeof $steps["updateLoadLoading2"] ===
                                        "object" &&
                                      typeof $steps["updateLoadLoading2"]
                                        .then === "function"
                                    ) {
                                      $steps["updateLoadLoading2"] =
                                        await $steps["updateLoadLoading2"];
                                    }
                                  }).apply(null, eventArgs);
                                }
                              };

                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "switchbest[].isChecked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return currentItem.rel.statusSms;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <Switchbest
                                  data-plasmic-name={"switchbest"}
                                  data-plasmic-override={overrides.switchbest}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </div>
                        </div>
                        <Embed
                          className={classNames(
                            "__wab_instance",
                            sty.embedHtml__u7Wp
                          )}
                          code={"<hr></hr>"}
                        />
                      </div>
                    );
                  })}
                </VigetLiom>
              ) : null}
              {(() => {
                try {
                  return $state.hamyarList.data.result.length == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "100%"
                      : "50%"
                  }
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $state.info.result.background;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {
                          src: "/plasmic/liom_hamyar/images/image80.png",
                          fullWidth: 852,
                          fullHeight: 879,
                          aspectRatio: undefined
                        };
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
              {(() => {
                try {
                  return !$state.hamyarList?.data?.result[0].rel.statusSms;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__cxARf)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadLoading2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["load", "loading"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadLoading2"] != null &&
                      typeof $steps["updateLoadLoading2"] === "object" &&
                      typeof $steps["updateLoadLoading2"].then === "function"
                    ) {
                      $steps["updateLoadLoading2"] = await $steps[
                        "updateLoadLoading2"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.staas.ir/webhook/rest/user/hamyar/edit",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    id: $state.hamyarList.data.result[0].hamyar
                                      .id,
                                    type: $state.type,
                                    statusSms: true,
                                    authorization: $state.token
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateShopType"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["shopType"]
                            },
                            operation: 0,
                            value:
                              $state.hamyarList.data.result[0].rel.relation ==
                              "mother"
                                ? "mother_sms"
                                : "husband_sms"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateShopType"] != null &&
                      typeof $steps["updateShopType"] === "object" &&
                      typeof $steps["updateShopType"].then === "function"
                    ) {
                      $steps["updateShopType"] = await $steps["updateShopType"];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                if (
                                  $steps.invokeGlobalAction?.data?.success ==
                                  false
                                )
                                  return ($state.switchbest[0].isChecked =
                                    false);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["updateDirectDialog2Open"] =
                      $steps.invokeGlobalAction?.data?.error?.code == 1220046
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["directDialog2", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateDirectDialog2Open"] != null &&
                      typeof $steps["updateDirectDialog2Open"] === "object" &&
                      typeof $steps["updateDirectDialog2Open"].then ===
                        "function"
                    ) {
                      $steps["updateDirectDialog2Open"] = await $steps[
                        "updateDirectDialog2Open"
                      ];
                    }

                    $steps["updateErrorMassege"] =
                      $steps.invokeGlobalAction?.data?.success == false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["errorMassege"]
                              },
                              operation: 0,
                              value:
                                $steps.invokeGlobalAction?.data?.error.message
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateErrorMassege"] != null &&
                      typeof $steps["updateErrorMassege"] === "object" &&
                      typeof $steps["updateErrorMassege"].then === "function"
                    ) {
                      $steps["updateErrorMassege"] = await $steps[
                        "updateErrorMassege"
                      ];
                    }

                    $steps["invokeGlobalAction2"] = $steps.invokeGlobalAction
                      ?.data?.success
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return $state.switchbest[currentIndex]
                                    .isChecked
                                    ? "success"
                                    : "error";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return $state.switchbest[0].isChecked
                                    ? ".اطلاع رسانی فعال شد"
                                    : "اطلاع رسانی غیرفعال شد.";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              "bottom-center",
                              2000
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["invokeGlobalAction3"] =
                      $state.errorMassege != ""
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                (() => {
                                  try {
                                    return $state.errorMassege;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["updateV"] = $steps.invokeGlobalAction?.data?.success
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["v"]
                            },
                            operation: 0,
                            value: $state.v + "1"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateV"] != null &&
                      typeof $steps["updateV"] === "object" &&
                      typeof $steps["updateV"].then === "function"
                    ) {
                      $steps["updateV"] = await $steps["updateV"];
                    }

                    $steps["updateLoadLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["load", "loading"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadLoading"] != null &&
                      typeof $steps["updateLoadLoading"] === "object" &&
                      typeof $steps["updateLoadLoading"].then === "function"
                    ) {
                      $steps["updateLoadLoading"] = await $steps[
                        "updateLoadLoading"
                      ];
                    }
                  }}
                >
                  <Icon217Icon
                    className={classNames(projectcss.all, sty.svg__dg90C)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__u412X
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"\u0647\u0645\u06cc\u0627\u0631\u062a "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF", fontWeight: 700 }}
                      >
                        {"\u067e\u06cc\u0627\u0645\u06a9\u06cc "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {
                          "\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0645\u06cc\u06a9\u0646\u0647. \u0632\u0648\u062f\u062a\u0631 \u0641\u0639\u0627\u0644\u0634 \u06a9\u0646!"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                </div>
              ) : null}
            </div>
          ) : null}
          {(() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__iPrYx)}>
              <div className={classNames(projectcss.all, sty.freeBox__tQsAj)}>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__gloN4,
                    "shimmer"
                  )}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___6OAtk,
                    "shimmer"
                  )}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__eegaF,
                    "shimmer"
                  )}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___1FEwb,
                    "shimmer"
                  )}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__d21Xo,
                    "shimmer"
                  )}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__ujQUu,
                    "shimmer"
                  )}
                />
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Load
              data-plasmic-name={"load"}
              data-plasmic-override={overrides.load}
              className={classNames("__wab_instance", sty.load)}
              loading={generateStateValueProp($state, ["load", "loading"])}
              onLoadingChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["load", "loading"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "section",
    "headerLiom",
    "hamyarList",
    "number2",
    "textInput",
    "antdInput",
    "button2",
    "name2",
    "textInput2",
    "antdInput2",
    "radioGrop",
    "button3",
    "sms",
    "button4",
    "button5",
    "remove",
    "removeBtn",
    "button9",
    "directDialog2",
    "button",
    "vigetLiom",
    "popover",
    "button6",
    "button7",
    "switchbest",
    "img",
    "load"
  ],
  sideEffect: ["sideEffect"],
  section: ["section", "headerLiom"],
  headerLiom: ["headerLiom"],
  hamyarList: ["hamyarList"],
  number2: ["number2", "textInput", "antdInput", "button2"],
  textInput: ["textInput", "antdInput"],
  antdInput: ["antdInput"],
  button2: ["button2"],
  name2: ["name2", "textInput2", "antdInput2", "radioGrop", "button3"],
  textInput2: ["textInput2", "antdInput2"],
  antdInput2: ["antdInput2"],
  radioGrop: ["radioGrop"],
  button3: ["button3"],
  sms: ["sms", "button4", "button5"],
  button4: ["button4"],
  button5: ["button5"],
  remove: ["remove", "removeBtn", "button9"],
  removeBtn: ["removeBtn"],
  button9: ["button9"],
  directDialog2: ["directDialog2"],
  button: ["button"],
  vigetLiom: ["vigetLiom", "popover", "button6", "button7", "switchbest"],
  popover: ["popover", "button6", "button7"],
  button6: ["button6"],
  button7: ["button7"],
  switchbest: ["switchbest"],
  img: ["img"],
  load: ["load"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  section: "section";
  headerLiom: typeof HeaderLiom;
  hamyarList: typeof ApiRequest;
  number2: typeof AntdModal;
  textInput: typeof TextInput;
  antdInput: typeof Input;
  button2: typeof Button;
  name2: typeof AntdModal;
  textInput2: typeof TextInput;
  antdInput2: typeof Input;
  radioGrop: typeof RadioGrop;
  button3: typeof Button;
  sms: typeof AntdModal;
  button4: typeof Button;
  button5: typeof Button;
  remove: typeof AntdModal;
  removeBtn: typeof Button;
  button9: typeof Button;
  directDialog2: typeof DirectDialog2;
  button: typeof Button;
  vigetLiom: typeof VigetLiom;
  popover: typeof AntdPopover;
  button6: typeof Button;
  button7: typeof Button;
  switchbest: typeof Switchbest;
  img: typeof PlasmicImg__;
  load: typeof Load;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamyarAdd__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamyarAdd__VariantsArgs;
    args?: PlasmicHamyarAdd__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamyarAdd__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHamyarAdd__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamyarAdd__ArgProps,
          internalVariantPropNames: PlasmicHamyarAdd__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamyarAdd__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHamyarAdd";
  } else {
    func.displayName = `PlasmicHamyarAdd.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHamyarAdd = Object.assign(
  // Top-level PlasmicHamyarAdd renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    section: makeNodeComponent("section"),
    headerLiom: makeNodeComponent("headerLiom"),
    hamyarList: makeNodeComponent("hamyarList"),
    number2: makeNodeComponent("number2"),
    textInput: makeNodeComponent("textInput"),
    antdInput: makeNodeComponent("antdInput"),
    button2: makeNodeComponent("button2"),
    name2: makeNodeComponent("name2"),
    textInput2: makeNodeComponent("textInput2"),
    antdInput2: makeNodeComponent("antdInput2"),
    radioGrop: makeNodeComponent("radioGrop"),
    button3: makeNodeComponent("button3"),
    sms: makeNodeComponent("sms"),
    button4: makeNodeComponent("button4"),
    button5: makeNodeComponent("button5"),
    remove: makeNodeComponent("remove"),
    removeBtn: makeNodeComponent("removeBtn"),
    button9: makeNodeComponent("button9"),
    directDialog2: makeNodeComponent("directDialog2"),
    button: makeNodeComponent("button"),
    vigetLiom: makeNodeComponent("vigetLiom"),
    popover: makeNodeComponent("popover"),
    button6: makeNodeComponent("button6"),
    button7: makeNodeComponent("button7"),
    switchbest: makeNodeComponent("switchbest"),
    img: makeNodeComponent("img"),
    load: makeNodeComponent("load"),

    // Metadata about props expected for PlasmicHamyarAdd
    internalVariantProps: PlasmicHamyarAdd__VariantProps,
    internalArgProps: PlasmicHamyarAdd__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHamyarAdd;
/* prettier-ignore-end */
