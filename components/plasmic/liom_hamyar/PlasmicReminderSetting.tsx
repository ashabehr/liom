/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: VZcPBQBUFNbT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import Checkbox from "../../Checkbox"; // plasmic-import: IwXl9xUH-ZMp/component
import Repead from "../../Repead"; // plasmic-import: bTRB9n2MQ7IL/component
import RadioGrop from "../../RadioGrop"; // plasmic-import: mcNKMbL_6N75/component
import RadioGroupLiom from "../../RadioGroupLiom"; // plasmic-import: tXN0uQ-uT9R3/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import ReminderCategory from "../../ReminderCategory"; // plasmic-import: ndgNxvaF00At/component
import { DatePickers } from "@/components/DatePickers"; // plasmic-import: Pxh5xTWczGDl/codeComponent
import { Pickers } from "@/components/Pickers"; // plasmic-import: htE-oGSeNx82/codeComponent
import { TimePickerCustom } from "@/components/TimePickerCustom"; // plasmic-import: GRoigtq491XH/codeComponent
import CheckboxGroup from "../../CheckboxGroup"; // plasmic-import: AhgoIztCTzjf/component
import LineClomp from "../../LineClomp"; // plasmic-import: XsM8QG4wUKlk/component
import Switchbest from "../../Switchbest"; // plasmic-import: ofUp1AS5glz5/component
import Snackbar from "../../Snackbar"; // plasmic-import: DESzdq_iEiZG/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicReminderSetting.module.css"; // plasmic-import: VZcPBQBUFNbT/css

import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: Wm-tjDMQJVfn/icon
import Icon345Icon from "./icons/PlasmicIcon__Icon345"; // plasmic-import: JAvtUzC6_U9X/icon
import Icon49Icon from "./icons/PlasmicIcon__Icon49"; // plasmic-import: VT7Wd_x-12ob/icon
import Icon306Icon from "./icons/PlasmicIcon__Icon306"; // plasmic-import: jxGdzfvYEdqR/icon
import Icon344Icon from "./icons/PlasmicIcon__Icon344"; // plasmic-import: yGnMTXTyjf2m/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon
import ClockIcon from "../fragment_icons/icons/PlasmicIcon__Clock"; // plasmic-import: rW7v27ONOoUe/icon
import Icon346Icon from "./icons/PlasmicIcon__Icon346"; // plasmic-import: Z4J9kCEKbiAp/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 32haUKsu6raY/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: DnjmD0szshuz/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon214Icon from "./icons/PlasmicIcon__Icon214"; // plasmic-import: gfITgruAsqTI/icon
import Icon283Icon from "./icons/PlasmicIcon__Icon283"; // plasmic-import: d6oFXeX9yzDi/icon
import Icon291Icon from "./icons/PlasmicIcon__Icon291"; // plasmic-import: U9F0Jow4owN9/icon
import Icon313Icon from "./icons/PlasmicIcon__Icon313"; // plasmic-import: 2foIFDF7T4zN/icon
import Icon290Icon from "./icons/PlasmicIcon__Icon290"; // plasmic-import: jLdE-DKzPlst/icon

createPlasmicElementProxy;

export type PlasmicReminderSetting__VariantMembers = {
  slide: "_1" | "_2";
  hamyar: "hamyar";
  add: "add";
};
export type PlasmicReminderSetting__VariantsArgs = {
  slide?: SingleChoiceArg<"_1" | "_2">;
  hamyar?: SingleBooleanChoiceArg<"hamyar">;
  add?: SingleBooleanChoiceArg<"add">;
};
type VariantPropType = keyof PlasmicReminderSetting__VariantsArgs;
export const PlasmicReminderSetting__VariantProps = new Array<VariantPropType>(
  "slide",
  "hamyar",
  "add"
);

export type PlasmicReminderSetting__ArgsType = {
  data?: any;
  manId?: string;
  subscription?: boolean;
  refresh?: string;
  onRefreshChange?: (val: string) => void;
  shop?: () => void;
  back?: () => void;
  token?: string;
  telegramOn?: boolean;
  phoneNumber?: string;
  telegramId?: string;
  userdata?: any;
  tel?: boolean;
  onTelChange?: (val: string) => void;
  sms?: boolean;
  onSmsChange?: (val: string) => void;
  setMobile?: () => void;
  refreshTime?: string;
  onRefreshTimeChange?: (val: string) => void;
  man?: any;
  dialogOpendialog3?: boolean;
  onDialogOpendialog3Change?: (val: boolean) => void;
  reminderCategory2Data?: any;
  onReminderCategory2DataChange?: (val: any) => void;
  pageSelect?: any;
  onPageSelectChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicReminderSetting__ArgsType;
export const PlasmicReminderSetting__ArgProps = new Array<ArgPropType>(
  "data",
  "manId",
  "subscription",
  "refresh",
  "onRefreshChange",
  "shop",
  "back",
  "token",
  "telegramOn",
  "phoneNumber",
  "telegramId",
  "userdata",
  "tel",
  "onTelChange",
  "sms",
  "onSmsChange",
  "setMobile",
  "refreshTime",
  "onRefreshTimeChange",
  "man",
  "dialogOpendialog3",
  "onDialogOpendialog3Change",
  "reminderCategory2Data",
  "onReminderCategory2DataChange",
  "pageSelect",
  "onPageSelectChange"
);

export type PlasmicReminderSetting__OverridesType = {
  root?: Flex__<"div">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  dialog?: Flex__<typeof Dialog>;
  checkbox2?: Flex__<typeof Checkbox>;
  textbox?: Flex__<"input">;
  repead?: Flex__<typeof Repead>;
  radioGroupLiom?: Flex__<typeof RadioGroupLiom>;
  button5?: Flex__<typeof Button>;
  button8?: Flex__<typeof Button>;
  dialog2?: Flex__<typeof Dialog>;
  reminderCategory2?: Flex__<typeof ReminderCategory>;
  dateDiolog?: Flex__<typeof Dialog>;
  datePickers?: Flex__<typeof DatePickers>;
  button4?: Flex__<typeof Button>;
  time?: Flex__<typeof Dialog>;
  pickers?: Flex__<typeof Pickers>;
  pickers2?: Flex__<typeof Pickers>;
  timePickerCustom2?: Flex__<typeof TimePickerCustom>;
  button6?: Flex__<typeof Button>;
  weekDays?: Flex__<typeof Dialog>;
  checkboxGroup?: Flex__<typeof CheckboxGroup>;
  checkbox?: Flex__<typeof Checkbox>;
  button11?: Flex__<typeof Button>;
  slide2?: Flex__<"div">;
  button9?: Flex__<typeof Button>;
  button10?: Flex__<typeof Button>;
  frame?: Flex__<"div">;
  frame2?: Flex__<"div">;
  button7?: Flex__<typeof Button>;
  todayMeeting?: Flex__<"div">;
  frame26?: Flex__<"div">;
  frame27?: Flex__<"div">;
  frame28?: Flex__<"div">;
  frame29?: Flex__<"div">;
  frame30?: Flex__<"div">;
  lineClomp?: Flex__<typeof LineClomp>;
  lineClomp3?: Flex__<typeof LineClomp>;
  lineClomp2?: Flex__<typeof LineClomp>;
  editItem?: Flex__<typeof Button>;
  switchSetting?: Flex__<typeof Switchbest>;
  button2?: Flex__<typeof Button>;
  checkbox4?: Flex__<typeof Checkbox>;
  textbox2?: Flex__<"input">;
  repead2?: Flex__<typeof Repead>;
  radioGroupLiom2?: Flex__<typeof RadioGroupLiom>;
  button12?: Flex__<typeof Button>;
  snackbar?: Flex__<typeof Snackbar>;
  button?: Flex__<typeof Button>;
  button3?: Flex__<typeof Button>;
  pageselect?: Flex__<"div">;
};

export interface DefaultReminderSettingProps {
  data?: any;
  manId?: string;
  subscription?: boolean;
  refresh?: string;
  onRefreshChange?: (val: string) => void;
  shop?: () => void;
  back?: () => void;
  token?: string;
  telegramOn?: boolean;
  phoneNumber?: string;
  telegramId?: string;
  userdata?: any;
  tel?: boolean;
  onTelChange?: (val: string) => void;
  sms?: boolean;
  onSmsChange?: (val: string) => void;
  setMobile?: () => void;
  refreshTime?: string;
  onRefreshTimeChange?: (val: string) => void;
  man?: any;
  dialogOpendialog3?: boolean;
  onDialogOpendialog3Change?: (val: boolean) => void;
  reminderCategory2Data?: any;
  onReminderCategory2DataChange?: (val: any) => void;
  pageSelect?: any;
  onPageSelectChange?: (val: string) => void;
  slide?: SingleChoiceArg<"_1" | "_2">;
  hamyar?: SingleBooleanChoiceArg<"hamyar">;
  add?: SingleBooleanChoiceArg<"add">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReminderSetting__RenderFunc(props: {
  variants: PlasmicReminderSetting__VariantsArgs;
  args: PlasmicReminderSetting__ArgsType;
  overrides: PlasmicReminderSetting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: [
            {
              id: 243,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: null,
              schedule_type: "everyDay",
              type: null,
              name: "\u0646\u0648\u0634\u06cc\u062f\u0646 \u0622\u0628",
              text: "drinkWater",
              token1: null,
              dates: null,
              weekdays:
                '["sunday","monday","tuesday","wednesday","thursday","friday","saturday"]',
              times:
                '["08:00","10:00","12:00","15:20","18:00","22:00","00:30"]',
              finishTime: "2026-08-27 00:00:00",
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 255,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: null,
              schedule_type: "everyYear",
              type: null,
              name: "\u062a\u0648\u0644\u062f \u0641\u0631\u0632\u0646\u062f",
              text: "birthdayBoyChild",
              token1: null,
              dates: '["2025-11-19","2026-06-24"]',
              weekdays:
                '["sunday","monday","tuesday","wednesday","friday","saturday"]',
              times: '["10:00"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 256,
              liomId: "1",
              telegramId: "573538820",
              phoneNumber: "",
              schedule_type: "everyDay",
              type: null,
              name: "\u0642\u0631\u0635 \u0645\u0641\u0646\u0627\u0646\u06cc\u06a9 \u0627\u0633\u06cc\u062f",
              text: "pill",
              token1: null,
              dates: null,
              weekdays:
                '["sunday","monday","tuesday","wednesday","thursday","friday","saturday"]',
              times: '["10:00","18:00","02:00"]',
              finishTime: "2025-09-30 23:59:59",
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 257,
              liomId: "1",
              telegramId: "33263188",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u062a\u0648\u0644\u062f \u062d\u0644\u0645\u0627",
              text: "birthday",
              token1: null,
              dates: '["2026-03-29"]',
              weekdays:
                '["sunday","monday","tuesday","wednesday","friday","saturday"]',
              times: '["10:00"]',
              finishTime: "2026-12-11 23:59:02",
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 258,
              liomId: "1",
              telegramId: "33263188",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0631\u0648\u0632 \u0645\u0627\u062f\u0631 ",
              text: "motherAndWifeDayIran",
              token1: null,
              dates: '["2025-12-11"]',
              weekdays:
                '["sunday","monday","tuesday","wednesday","friday","saturday"]',
              times: '["10:00"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 259,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "09154807701",
              schedule_type: "everyDay",
              type: null,
              name: "\u0631\u0648\u062a\u06cc\u0646 \u067e\u0648\u0633\u062a ",
              text: "routineSkinMorning",
              token1: null,
              dates: null,
              weekdays:
                '["sunday","monday","tuesday","wednesday","thursday","friday","saturday"]',
              times: '["10:07"]',
              finishTime: null,
              chanels: '["notification","telegram","sms"]',
              active: 1
            },
            {
              id: 260,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "09154807701",
              schedule_type: "everyDay",
              type: null,
              name: "\u0646\u0648\u0634\u06cc\u062f\u0646 \u0622\u0628 ",
              text: "drinkWater",
              token1: null,
              dates: null,
              weekdays:
                '["sunday","monday","tuesday","wednesday","thursday","friday","saturday"]',
              times: '["08:00","10:00","11:46","22:00","00:30"]',
              finishTime: null,
              chanels: '["notification","telegram","sms"]',
              active: 0
            },
            {
              id: 279,
              liomId: "1",
              telegramId: "5384384618",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0631\u0648\u0632  \u062c\u0647\u0627\u0646\u06cc \u0632\u0646",
              text: "occasion",
              token1: null,
              dates: '["2026-03-08"]',
              weekdays: null,
              times: '["09:00"]',
              finishTime: "2025-10-04 15:04:26",
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 358,
              liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
              telegramId: null,
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0648\u0644\u0646\u062a\u0627\u06cc\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642)",
              text: "occasion",
              token1: null,
              dates: '["2026-02-14"]',
              weekdays: null,
              times: '["09:00"]',
              finishTime: null,
              chanels: "{",
              active: 1
            },
            {
              id: 359,
              liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
              telegramId: null,
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
              text: "occasion",
              token1: null,
              dates: '["2026-02-18"]',
              weekdays: null,
              times: '["09:00"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 360,
              liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
              telegramId: null,
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
              text: "occasion",
              token1: null,
              dates: '["2026-02-18"]',
              weekdays: null,
              times: '["09:00"]',
              finishTime: null,
              chanels: "{",
              active: 1
            },
            {
              id: 361,
              liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
              telegramId: null,
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
              text: "wedding_anniversary",
              token1: null,
              dates: '["2025-12-31"]',
              weekdays: null,
              times: '["10:00"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 365,
              liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
              telegramId: null,
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0631\u0648\u0632  \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631\u0627\u0646",
              text: "occasion",
              token1: null,
              dates: '["2026-10-11"]',
              weekdays: null,
              times: '["09:00"]',
              finishTime: null,
              chanels: "{",
              active: 1
            },
            {
              id: 491,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631",
              text: "occasion",
              token1: null,
              dates: '["2026-04-19"]',
              weekdays: null,
              times: '["10:00"]',
              finishTime: null,
              chanels: '["notification"]',
              active: 1
            },
            {
              id: 492,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: null,
              name: "\u0631\u0648\u0632 \u0648\u0644\u0646\u062a\u0627\u06cc\u0646",
              text: "occasion",
              token1: null,
              dates: '["2026-02-14"]',
              weekdays: null,
              times: '["10:00"]',
              finishTime: null,
              chanels: '["notification"]',
              active: 1
            },
            {
              id: 500,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: "wedding_anniversary",
              name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
              text: "wedding_anniversary",
              token1: null,
              dates: '["2026-01-01"]',
              weekdays: null,
              times: "[]",
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 507,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: "religious_womens_day",
              name: "\u0631\u0648\u0632 \u0632\u0646 (\u0627\u0633\u0644\u0627\u0645\u06cc)",
              text: "occasion",
              token1: null,
              dates: '["2025-12-11"]',
              weekdays: null,
              times: '["09:30"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 508,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyYear",
              type: "sepandarmazgan",
              name: "\u0631\u0648\u0632 \u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646",
              text: "occasion",
              token1: null,
              dates: '["2026-02-18"]',
              weekdays: null,
              times: "[]",
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 509,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyDay",
              type: "Water_time",
              name: "\u0646\u0648\u0634\u06cc\u062f\u0646 \u0622\u0628qq",
              text: "Water_time",
              token1: null,
              dates: null,
              weekdays: null,
              times: '["00:00","00:05"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 510,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyDay",
              type: "Water_time",
              name: "\u0646\u0648\u0634\u06cc\u062f\u0646 \u0622\u0628",
              text: "Water_time",
              token1: null,
              dates: null,
              weekdays: null,
              times: '["15:15"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 511,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyDay",
              type: "Water_time",
              name: "\u0646\u0648\u0634\u06cc\u062f\u0646 ddddd\u0622\u0628",
              text: "Water_time",
              token1: null,
              dates: null,
              weekdays: null,
              times: '["22:50","23:05"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            },
            {
              id: 511,
              liomId: "1",
              telegramId: "372883527",
              phoneNumber: "",
              schedule_type: "everyDay",
              type: "Water_time",
              name: "\u0646\u0648\u0634\u06cc\u062f\u0646 ddddd\u0622\u0628",
              text: "Water_time",
              token1: null,
              dates: null,
              weekdays: null,
              times: '["22:50","23:05"]',
              finishTime: null,
              chanels: '["notification","telegram"]',
              active: 1
            }
          ],
          subscription: false,
          token:
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEiLCJ0eXBlIjoidXNlciIsImlhdCI6MTc1NzMxMjM4N30.pdVwl5PBNOb_8qOvch4mCHnnO_nPudkzmuNdHeGfEuY",
          telegramOn: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label: "\u062a\u0648\u0644\u062f \u0647\u0645\u0633\u0631",
            value: "SpouseBirthday"
          },
          {
            label:
              "\u0633\u0627\u0644\u06af\u0631\u062f \u0622\u0634\u0646\u0627\u06cc\u06cc",
            value: "MeetingAnniversary"
          },
          {
            label:
              "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
            value: "WeddingAnniversary"
          },
          {
            label: "\u062a\u0648\u0644\u062f \u0641\u0631\u0632\u0646\u062f",
            value: "ChildBirthday"
          },
          {
            label:
              "\u0631\u0648\u06cc\u062f\u0627\u062f \u0634\u062e\u0635\u06cc",
            value: "PersonalEvent"
          }
        ]
      },
      {
        path: "dialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dateDiolog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "datePickers.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "date",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const today = new Date();
                const f = today.toISOString().split("T")[0];
                const g = new Intl.DateTimeFormat("fa-IR", {
                  year: "numeric",
                  month: "long",
                  day: "numeric"
                }).format(today);
                function toEnglishNumber(faNum) {
                  return faNum.replace(/[۰-۹]/g, d =>
                    String(d.charCodeAt(0) - 1776)
                  );
                }
                const faDate = new Intl.DateTimeFormat("fa-IR", {
                  year: "numeric",
                  month: "numeric",
                  day: "numeric"
                }).format(today);
                const [faYear, faMonth, faDay] = faDate
                  .split("/")
                  .map(x => Number(toEnglishNumber(x)));
                const obj = [
                  {
                    start: {
                      f,
                      g,
                      year: faYear,
                      month: faMonth,
                      day: faDay
                    }
                  }
                ];
                return obj;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "refresh",
        type: "writable",
        variableType: "text",

        valueProp: "refresh",
        onChangeProp: "onRefreshChange"
      },
      {
        path: "switchSetting[][].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button9.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "button9.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button9.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button2[][].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "button2[][].loading",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button2[][].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button7.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "button7.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button7.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "offlineList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "slide",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.slide
      },
      {
        path: "repead.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "once"
      },
      {
        path: "weekDays.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "checkboxGroup.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "week",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "time.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button6.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button6.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pickers.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 30
      },
      {
        path: "pickers2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 9
      },
      {
        path: "time2",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { hour: 9, minute: 30 }
        ]
      },
      {
        path: "dateType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "start"
      },
      {
        path: "list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const updatedList = [];
                if (Array.isArray($props?.data)) {
                  $props.data.forEach(r => {
                    const newEvent = {
                      id: r.id,
                      liomId: r.liomId || null,
                      telegramId: r.telegramId || null,
                      phoneNumber: r.phoneNumber || null,
                      schedule_type: r.schedule_type || null,
                      name: r.name,
                      text: r.text,
                      token1: r.token1 || null,
                      dates: r.dates || null,
                      type: r.type || null,
                      weekdays: r.weekdays || null,
                      times: r.times || null,
                      finishTime: r.finishTime || null,
                      active: r.active ?? 0,
                      channels:
                        r.channels === "{" || !r.channels
                          ? '["notification"]'
                          : r.channels
                    };
                    updatedList.push(newEvent);
                  });
                }
                return updatedList;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "timePickerCustom2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.time2[$state.timeIndex];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editItem[][].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "editItem[][].loading",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "editItem[][].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "tel",
        type: "writable",
        variableType: "boolean",

        valueProp: "tel",
        onChangeProp: "onTelChange"
      },
      {
        path: "sms",
        type: "writable",
        variableType: "boolean",

        valueProp: "sms",
        onChangeProp: "onSmsChange"
      },
      {
        path: "disable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "timeIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "dateIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "finishDate",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button8.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "button8.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button8.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "lineClomp[][].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "lineClomp2[][].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "lineClomp3[][].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "hamyar",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hamyar
      },
      {
        path: "button10.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button10.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button10.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "radioGroupLiom.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "radioGroupLiom.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const notifications = [
                  {
                    label: "نوتیفیکیشن",
                    value: "notification",
                    paid: false
                  },
                  {
                    label: "تلگرام",
                    value: "telegram",
                    paid: false
                  },
                  {
                    label: "پیامک",
                    value: "sms",
                    paid: true
                  },
                  {
                    label: "تماس",
                    value: "call",
                    paid: true
                  }
                ];

                notifications.forEach(i => {
                  i.access = i.paid ? false : true;
                });
                return notifications;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "radioGroupLiom.selects",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                try {
                  return JSON.parse($state.select2.channels);
                } catch {
                  return [];
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "refreshTime",
        type: "writable",
        variableType: "text",

        valueProp: "refreshTime",
        onChangeProp: "onRefreshTimeChange"
      },
      {
        path: "dialog2.opendialog",
        type: "writable",
        variableType: "boolean",

        valueProp: "dialogOpendialog3",
        onChangeProp: "onDialogOpendialog3Change"
      },
      {
        path: "reminderCategory2.show",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderCategory2.select",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "reminderCategory2.diable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "reminderCategory2.title",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "title",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.select2.name || $state.reminderCategory2.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "textbox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "checkbox2.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "snackbar.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "button3.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button3.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "currentEdit",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "switchSetting[][].data",
        type: "private",
        variableType: "object"
      },
      {
        path: "snackbar.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "chanels",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label:
              "\u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646",
            value: "notification",
            paid: false
          },
          {
            label: "\u062a\u0644\u06af\u0631\u0627\u0645",
            value: "telegram",
            paid: false
          },
          { label: "\u067e\u06cc\u0627\u0645\u06a9", value: "sms", paid: true },
          { label: "\u062a\u0645\u0627\u0633", value: "call", paid: true }
        ]
      },
      {
        path: "button11.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button11.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button11.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderCategory2.data",
        type: "writable",
        variableType: "object",

        valueProp: "reminderCategory2Data",
        onChangeProp: "onReminderCategory2DataChange"
      },
      {
        path: "add",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.add
      },
      {
        path: "checkbox4.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textbox2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "repead2.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "once"
      },
      {
        path: "radioGroupLiom2.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "radioGroupLiom2.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const notifications = [
                  {
                    label: "نوتیفیکیشن",
                    value: "notification",
                    paid: false
                  },
                  {
                    label: "تلگرام",
                    value: "telegram",
                    paid: false
                  },
                  {
                    label: "پیامک",
                    value: "sms",
                    paid: true
                  },
                  {
                    label: "تماس",
                    value: "call",
                    paid: true
                  }
                ];

                notifications.forEach(i => {
                  i.access = i.paid ? false : true;
                });
                return notifications;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "radioGroupLiom2.selects",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                try {
                  return JSON.parse($state.select2.channels);
                } catch {
                  return [];
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button12.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button12.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pageSelect",
        type: "writable",
        variableType: "object",

        valueProp: "pageSelect",
        onChangeProp: "onPageSelectChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootadd]: hasVariant($state, "add", "add"),
          [sty.roothamyar]: hasVariant($state, "hamyar", "hamyar"),
          [sty.rootslide__1]: hasVariant($state, "slide", "_1"),
          [sty.rootslide__2]: hasVariant($state, "slide", "_2")
        }
      )}
    >
      <section
        className={classNames(projectcss.all, sty.section___4Wna7, {
          [sty.sectionadd___4Wna7UWxSg]: hasVariant($state, "add", "add"),
          [sty.sectionslide__1___4Wna7Edcqc]: hasVariant($state, "slide", "_1"),
          [sty.sectionslide__2___4Wna7VJmCw]: hasVariant($state, "slide", "_2")
        })}
      >
        <HeaderLiom
          data-plasmic-name={"headerLiom"}
          data-plasmic-override={overrides.headerLiom}
          className={classNames("__wab_instance", sty.headerLiom, {
            [sty.headerLiomadd]: hasVariant($state, "add", "add"),
            [sty.headerLiomslide__1]: hasVariant($state, "slide", "_1"),
            [sty.headerLiomslide__2]: hasVariant($state, "slide", "_2")
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__uk4CQ)}>
            <ChevronRightIcon
              className={classNames(projectcss.all, sty.svg__vaKqd)}
              onClick={async event => {
                const $steps = {};

                $steps["runBack"] = true
                  ? (() => {
                      const actionArgs = { eventRef: $props["back"] };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runBack"] != null &&
                  typeof $steps["runBack"] === "object" &&
                  typeof $steps["runBack"].then === "function"
                ) {
                  $steps["runBack"] = await $steps["runBack"];
                }
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wEvVl,
                { [sty.textadd__wEvVluWxSg]: hasVariant($state, "add", "add") }
              )}
              id={"myTarget"}
            >
              {hasVariant($state, "add", "add")
                ? "\u0627\u0641\u0632\u0648\u062f\u0646 \u0631\u0648\u06cc\u062f\u0627\u062f"
                : "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0631\u0648\u06cc\u062f\u0627\u062f \u0647\u0627"}
            </div>
          </div>
        </HeaderLiom>
        <Dialog
          data-plasmic-name={"dialog"}
          data-plasmic-override={overrides.dialog}
          className={classNames("__wab_instance", sty.dialog, {
            [sty.dialogslide__1]: hasVariant($state, "slide", "_1")
          })}
          onOpendialogChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog", "opendialog"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }

            (async val => {
              const $steps = {};

              $steps["updateDisable"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["disable"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDisable"] != null &&
                typeof $steps["updateDisable"] === "object" &&
                typeof $steps["updateDisable"].then === "function"
              ) {
                $steps["updateDisable"] = await $steps["updateDisable"];
              }
            }).apply(null, eventArgs);
          }}
          opendialog={generateStateValueProp($state, ["dialog", "opendialog"])}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__hTnp2, {
              [sty.freeBoxadd__hTnp2UWxSg]: hasVariant($state, "add", "add")
            })}
          >
            {(() => {
              try {
                return $state.select2.add == true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__kciBn)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2QQzl
                  )}
                >
                  {
                    "\u0631\u0648\u06cc\u062f\u0627\u062f \u062c\u062f\u06cc\u062f"
                  }
                </div>
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__p32It)}>
              <Checkbox
                data-plasmic-name={"checkbox2"}
                data-plasmic-override={overrides.checkbox2}
                className={classNames("__wab_instance", sty.checkbox2)}
                isChecked={
                  generateStateValueProp($state, ["checkbox2", "isChecked"]) ??
                  false
                }
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "checkbox2",
                      "isChecked"
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              />

              <div className={classNames(projectcss.all, sty.freeBox__lk7Ua)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__zoDiw)}
                  onClick={async event => {
                    const $steps = {};
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dDwTo
                    )}
                  >
                    {"\u0639\u0646\u0648\u0627\u0646 "}
                  </div>
                  <input
                    data-plasmic-name={"textbox"}
                    data-plasmic-override={overrides.textbox}
                    className={classNames(
                      projectcss.all,
                      projectcss.input,
                      sty.textbox
                    )}
                    id={"htmltitleSetting"}
                    onChange={async (...eventArgs: any) => {
                      (e => {
                        generateStateOnChangeProp($state, ["textbox", "value"])(
                          e.target.value
                        );
                      }).apply(null, eventArgs);

                      (async event => {
                        const $steps = {};

                        $steps["updateTitle"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["title"]
                                },
                                operation: 0,
                                value:
                                  window.document.getElementById(
                                    "htmltitleSetting"
                                  ).value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTitle"] != null &&
                          typeof $steps["updateTitle"] === "object" &&
                          typeof $steps["updateTitle"].then === "function"
                        ) {
                          $steps["updateTitle"] = await $steps["updateTitle"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      "\u0639\u0646\u0648\u0627\u0646 \u0631\u0648\u06cc\u062f\u0627\u062f"
                    }
                    ref={ref => {
                      $refs["textbox"] = ref;
                    }}
                    type={"text"}
                    value={
                      generateStateValueProp($state, ["textbox", "value"]) ?? ""
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__p8KA1)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jfPcc
                    )}
                  >
                    {"\u0646\u0648\u0639 "}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__gTXuD)}>
                  {(() => {
                    try {
                      return $state.select2.schedule_type != "everyDay";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__uanmL)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vdQG
                        )}
                      >
                        <Icon345Icon
                          className={classNames(projectcss.all, sty.svg__rjCoL)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dYof4
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  let text;
                                  if ($state.date.length < 2) {
                                    return (text = "تاریخ یادآوری");
                                  } else {
                                    return (text = "تاریخ‌ها");
                                  }
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u062a\u0627\u0631\u06cc\u062e \u0634\u0631\u0648\u0639 ";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hOu8T
                          )}
                          id={``}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        $state.dateIndex = -1;
                                        $state.dateDiolog.opendialog = true;
                                        return ($state.dateType = "start");
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__inuQ
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wn8I4
                              )}
                            >
                              <Icon49Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__wts6Q
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tzt2Q
                                )}
                              >
                                {
                                  "\u0627\u0641\u0632\u0648\u062f\u0646 \u062a\u0627\u0631\u06cc\u062e"
                                }
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      {(() => {
                        try {
                          return $state.date.length > 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xgMp
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $state.date;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__kweHg
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___1F1TC
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateDateIndex"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["dateIndex"]
                                            },
                                            operation: 0,
                                            value: currentIndex
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDateIndex"] != null &&
                                      typeof $steps["updateDateIndex"] ===
                                        "object" &&
                                      typeof $steps["updateDateIndex"].then ===
                                        "function"
                                    ) {
                                      $steps["updateDateIndex"] =
                                        await $steps["updateDateIndex"];
                                    }

                                    $steps["updateDateDiologOpendialog"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "dateDiolog",
                                                "opendialog"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDateDiologOpendialog"] !=
                                        null &&
                                      typeof $steps[
                                        "updateDateDiologOpendialog"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateDateDiologOpendialog"
                                      ].then === "function"
                                    ) {
                                      $steps["updateDateDiologOpendialog"] =
                                        await $steps[
                                          "updateDateDiologOpendialog"
                                        ];
                                    }
                                  }}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__kHgMi
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return `${currentItem.start.g.slice(0, -4)} هر سال`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 1404/1/1";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                                <Icon306Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__lzsVl
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["runCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return $state.date.splice(
                                                currentIndex,
                                                1
                                              );
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runCode"] != null &&
                                      typeof $steps["runCode"] === "object" &&
                                      typeof $steps["runCode"].then ===
                                        "function"
                                    ) {
                                      $steps["runCode"] =
                                        await $steps["runCode"];
                                    }
                                  }}
                                  role={"img"}
                                />
                              </div>
                            );
                          })}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.select2.text == "occasion";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vpcxq)}
                    />
                  ) : null}
                </div>
                {(() => {
                  try {
                    return $state.select2.schedule_type == "everyDay";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tjS7E)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__s5PIg)}
                    >
                      <Icon344Icon
                        className={classNames(projectcss.all, sty.svg__a3Qqh)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r6X7I
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateDateType"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dateType"]
                                  },
                                  operation: 0,
                                  value: "end"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDateType"] != null &&
                            typeof $steps["updateDateType"] === "object" &&
                            typeof $steps["updateDateType"].then === "function"
                          ) {
                            $steps["updateDateType"] =
                              await $steps["updateDateType"];
                          }

                          $steps["updateDialog2Opendialog"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dateDiolog", "opendialog"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDialog2Opendialog"] != null &&
                            typeof $steps["updateDialog2Opendialog"] ===
                              "object" &&
                            typeof $steps["updateDialog2Opendialog"].then ===
                              "function"
                          ) {
                            $steps["updateDialog2Opendialog"] =
                              await $steps["updateDialog2Opendialog"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jQnbq
                          )}
                        >
                          <div
                            className={projectcss.__wab_expr_html_text}
                            dangerouslySetInnerHTML={{
                              __html: (() => {
                                try {
                                  return $state.finishDate.g
                                    ? "تاریخ پایان"
                                    : 'تاریخ پایان <span style="font-size:0.85em; color:#888;">(اختیاری)</span>';
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()
                            }}
                          />
                        </div>
                        {(() => {
                          try {
                            return $state.finishDate.g;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lEhgu
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.finishDate.g;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 1404/1/1";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return !$state.finishDate.g;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__j6FOh
                            )}
                          >
                            <Icon49Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__pBywk
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3VAjo
                              )}
                            >
                              {
                                "\u0627\u0641\u0632\u0648\u062f\u0646 \u062a\u0627\u0631\u06cc\u062e"
                              }
                            </div>
                          </div>
                        ) : null}
                      </div>
                      {(() => {
                        try {
                          return $state.finishDate.g ? true : false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <XIcon
                          className={classNames(projectcss.all, sty.svg__tHSl)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return ($state.finishDate = {});
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                          role={"img"}
                        />
                      ) : null}
                    </div>
                  </div>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__iOoxC)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6AMmE)}
                  >
                    <ClockIcon
                      className={classNames(projectcss.all, sty.svg__twKhv)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m26V
                      )}
                    >
                      {
                        "\u0632\u0645\u0627\u0646 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc"
                      }
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cia3Y)}
                      id={``}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateTimeIndex"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["timeIndex"]
                                },
                                operation: 0,
                                value: -1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTimeIndex"] != null &&
                          typeof $steps["updateTimeIndex"] === "object" &&
                          typeof $steps["updateTimeIndex"].then === "function"
                        ) {
                          $steps["updateTimeIndex"] =
                            await $steps["updateTimeIndex"];
                        }

                        $steps["updateDialog2Opendialog"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["time", "opendialog"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialog2Opendialog"] != null &&
                          typeof $steps["updateDialog2Opendialog"] ===
                            "object" &&
                          typeof $steps["updateDialog2Opendialog"].then ===
                            "function"
                        ) {
                          $steps["updateDialog2Opendialog"] =
                            await $steps["updateDialog2Opendialog"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jdFMu
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cej3T
                          )}
                        >
                          <Icon49Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__uDtE
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ja0
                            )}
                          >
                            {
                              "\u0627\u0641\u0632\u0648\u062f\u0646 \u0632\u0645\u0627\u0646"
                            }
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  {(() => {
                    try {
                      return $state.time2.length > 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox___4YZz)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.time2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nOBn0
                            )}
                            key={currentIndex}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__g4CiI
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateTimeIndex"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["timeIndex"]
                                        },
                                        operation: 0,
                                        value: currentIndex
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateTimeIndex"] != null &&
                                  typeof $steps["updateTimeIndex"] ===
                                    "object" &&
                                  typeof $steps["updateTimeIndex"].then ===
                                    "function"
                                ) {
                                  $steps["updateTimeIndex"] =
                                    await $steps["updateTimeIndex"];
                                }

                                $steps["updateTimeOpendialog"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["time", "opendialog"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateTimeOpendialog"] != null &&
                                  typeof $steps["updateTimeOpendialog"] ===
                                    "object" &&
                                  typeof $steps["updateTimeOpendialog"].then ===
                                    "function"
                                ) {
                                  $steps["updateTimeOpendialog"] =
                                    await $steps["updateTimeOpendialog"];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__i286M
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return `${String(currentItem.minute).padStart(2, "0")} : ${String(currentItem.hour).padStart(2, "0")}`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 1404/1/1";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <Icon306Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__uzFx4
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return $state.time2.splice(
                                            currentIndex,
                                            1
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }}
                              role={"img"}
                            />
                          </div>
                        );
                      })}
                    </div>
                  ) : null}
                </div>
                {(() => {
                  try {
                    return (() => {
                      try {
                        return $state.reminderCategory2.data.type
                          .flatMap(i => i.items)
                          .filter(a => a.type === $state.select2.type)[0]
                          .tag.includes("repead");
                      } catch {
                        return false;
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kls3Y)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tdBtA)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__l6GOs
                        )}
                      >
                        <Icon346Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___8SI9R
                          )}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dfUw0
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return ($state.weekDays.opendialog = true);
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iVkje
                            )}
                          >
                            {
                              "\u062a\u06a9\u0631\u0627\u0631 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__j35V
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const weekday = [
                                      {
                                        label: "شنبه",
                                        value: "saturday"
                                      },
                                      {
                                        label: "یکشنبه",
                                        value: "sunday"
                                      },
                                      {
                                        label: "دوشنبه",
                                        value: "monday"
                                      },
                                      {
                                        label: "سه‌شنبه",
                                        value: "tuesday"
                                      },
                                      {
                                        label: "چهارشنبه",
                                        value: "wednesday"
                                      },
                                      {
                                        label: "پنجشنبه",
                                        value: "thursday"
                                      },
                                      {
                                        label: "جمعه",
                                        value: "friday"
                                      }
                                    ];

                                    const selected = weekday.filter(i =>
                                      $state.week.includes(i.value)
                                    );
                                    const result =
                                      selected.length === weekday.length
                                        ? "هر روز هفته"
                                        : selected
                                            .map(i => i.label)
                                            .join("\u060C ");
                                    return result;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u062a\u06a9\u0631\u0627\u0631";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          {(() => {
                            try {
                              return $state.week.length == 0;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vX3U
                              )}
                            >
                              <Icon49Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___6NGo7
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__t5Zw
                                )}
                              >
                                {
                                  "\u062a\u0646\u0638\u06cc\u0645 \u062a\u06a9\u0631\u0627\u0631"
                                }
                              </div>
                            </div>
                          ) : null}
                        </div>
                        {(() => {
                          try {
                            return $state.week.length > 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Icon22Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__nN12S
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return ($state.week = []);
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gy6F8
                        )}
                      >
                        <Repead
                          data-plasmic-name={"repead"}
                          data-plasmic-override={overrides.repead}
                          className={classNames("__wab_instance", sty.repead)}
                          click={async () => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        if (
                                          $state.repead.selected === "daily"
                                        ) {
                                          return ($state.week = [
                                            "saturday",
                                            "sunday",
                                            "monday",
                                            "tuesday",
                                            "wednesday",
                                            "thursday",
                                            "friday"
                                          ]);
                                        } else if (
                                          $state.repead.selected ===
                                          "sat_to_wed"
                                        ) {
                                          return ($state.week = [
                                            "saturday",
                                            "sunday",
                                            "monday",
                                            "tuesday",
                                            "wednesday"
                                          ]);
                                        } else if (
                                          $state.repead.selected === "once"
                                        ) {
                                          return ($state.week = []);
                                        }
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                          data={[
                            {
                              label: "\u0633\u0627\u0644\u0627\u0646\u0647",
                              value: "once"
                            },
                            {
                              label: "\u0647\u0631 \u0631\u0648\u0632",
                              value: "daily",
                              days: [
                                "\u0634\u0646\u0628\u0647",
                                "\u06cc\u06a9\u0634\u0646\u0628\u0647",
                                "\u062f\u0648\u0634\u0646\u0628\u0647",
                                "\u0633\u0647\u200c\u0634\u0646\u0628\u0647",
                                "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647",
                                "\u067e\u0646\u062c\u0634\u0646\u0628\u0647",
                                "\u062c\u0645\u0639\u0647"
                              ]
                            },
                            {
                              label:
                                "\u0634\u0646\u0628\u0647 \u062a\u0627 \u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647",
                              value: "sat_to_wed",
                              days: [
                                "\u0634\u0646\u0628\u0647",
                                "\u06cc\u06a9\u0634\u0646\u0628\u0647",
                                "\u062f\u0648\u0634\u0646\u0628\u0647",
                                "\u0633\u0647\u200c\u0634\u0646\u0628\u0647",
                                "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647"
                              ]
                            }
                          ]}
                          onSelectedChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "repead",
                              "selected"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          selected={generateStateValueProp($state, [
                            "repead",
                            "selected"
                          ])}
                        />

                        <RadioGrop
                          className={classNames(
                            "__wab_instance",
                            sty.radioGrop__u5QXm
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = false
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        if (
                                          $state.repead.selected === "daily"
                                        ) {
                                          return ($state.week = [
                                            "saturday",
                                            "sunday",
                                            "monday",
                                            "tuesday",
                                            "wednesday",
                                            "thursday",
                                            "friday"
                                          ]);
                                        } else if (
                                          $state.repead.selected ===
                                          "sat_to_wed"
                                        ) {
                                          return ($state.week = [
                                            "saturday",
                                            "sunday",
                                            "monday",
                                            "tuesday",
                                            "wednesday"
                                          ]);
                                        } else if (
                                          $state.repead.selected === "once"
                                        ) {
                                          return ($state.week = []);
                                        }
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["updateDialog3Opendialog"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["weekDays", "opendialog"]
                                    },
                                    operation: 4
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(objRoot, variablePath, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDialog3Opendialog"] != null &&
                              typeof $steps["updateDialog3Opendialog"] ===
                                "object" &&
                              typeof $steps["updateDialog3Opendialog"].then ===
                                "function"
                            ) {
                              $steps["updateDialog3Opendialog"] =
                                await $steps["updateDialog3Opendialog"];
                            }
                          }}
                          selected={(() => {
                            try {
                              return $state.repead.selected == "custom";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__o4G6
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hqoGv
                              )}
                            >
                              {"\u0633\u0641\u0627\u0631\u0634\u06cc"}
                            </div>
                            <ChevronLeftIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__u4X51
                              )}
                              role={"img"}
                            />
                          </div>
                        </RadioGrop>
                      </div>
                    </div>
                  </div>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__aVHvs)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xaJcm
                    )}
                  >
                    {
                      "\u0627\u0632 \u0686\u0647 \u0637\u0631\u06cc\u0642\u06cc \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u0627\u0646\u062c\u0627\u0645 \u0634\u0648\u062f\u061f"
                    }
                  </div>
                  {(() => {
                    const child$Props = {
                      accessclicke: async () => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "custom",
                                  "\u0628\u0647\u200c\u0632\u0648\u062f\u06cc \u0627\u06cc\u0646 \u0642\u0627\u0628\u0644\u06cc\u062a \u0641\u0639\u0627\u0644 \u0645\u06cc\u200c\u0634\u0648\u062f!",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] =
                            await $steps["invokeGlobalAction"];
                        }
                      },
                      className: classNames(
                        "__wab_instance",
                        sty.radioGroupLiom
                      ),
                      list: generateStateValueProp($state, [
                        "radioGroupLiom",
                        "list"
                      ]),
                      moulty: true,
                      onListChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "radioGroupLiom",
                          "list"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      onSelectedChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "radioGroupLiom",
                          "selected"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      onSelectsChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "radioGroupLiom",
                          "selects"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      selected: generateStateValueProp($state, [
                        "radioGroupLiom",
                        "selected"
                      ]),
                      selects: generateStateValueProp($state, [
                        "radioGroupLiom",
                        "selects"
                      ]),
                      size: "small",
                      unnamedVariant: true
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "radioGroupLiom.selects",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return (() => {
                                  try {
                                    return JSON.parse($state.select2.channels);
                                  } catch {
                                    return [];
                                  }
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                        }
                      ],
                      []
                    );
                    return (
                      <RadioGroupLiom
                        data-plasmic-name={"radioGroupLiom"}
                        data-plasmic-override={overrides.radioGroupLiom}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wxPm)}>
                <Button
                  data-plasmic-name={"button5"}
                  data-plasmic-override={overrides.button5}
                  className={classNames("__wab_instance", sty.button5)}
                  color={generateStateValueProp($state, ["button5", "color"])}
                  load={generateStateValueProp($state, ["button5", "load"])}
                  loading={generateStateValueProp($state, [
                    "button5",
                    "loading"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateButton5Loading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["button5", "loading"]
                            },
                            operation: 4,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateButton5Loading"] != null &&
                      typeof $steps["updateButton5Loading"] === "object" &&
                      typeof $steps["updateButton5Loading"].then === "function"
                    ) {
                      $steps["updateButton5Loading"] =
                        await $steps["updateButton5Loading"];
                    }

                    $steps["insert"] = !$state.select2.id
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.staas.ir/webhook/user/task/add",
                              undefined,
                              (() => {
                                try {
                                  return (() => {
                                    $state.select2.weekdays = $state.week
                                      ?.length
                                      ? JSON.stringify($state.week)
                                      : undefined;
                                    if ($state.date.length > 0) {
                                      let dates = $state.date.map(
                                        i => i.start.f
                                      );
                                      if (
                                        $state.select2.schedule_type ===
                                        "everyYear"
                                      ) {
                                        dates = $state.date.map(i => {
                                          let parts = i.start.f.split(/[-/]/);
                                          parts[0] = "0000";
                                          return i.start.f.includes("-")
                                            ? parts.join("-")
                                            : parts.join("/");
                                        });
                                      }
                                      $state.select2.dates =
                                        JSON.stringify(dates);
                                    } else {
                                      $state.select2.dates = undefined;
                                    }
                                    if ($state.finishDate?.f) {
                                      $state.select2.finishTime =
                                        $state.finishDate.f;
                                    } else {
                                      $state.select2.finishTime = undefined;
                                    }
                                    $state.select2.active = 1;
                                    $state.select2.times = JSON.stringify(
                                      $state.time2.map(
                                        t =>
                                          `${String(t.hour).padStart(2, "0")}:${String(t.minute).padStart(2, "0")}`
                                      )
                                    );
                                    $state.select2.name = $state.title;
                                    $state.select2.channels = JSON.stringify(
                                      $state.radioGroupLiom.selects
                                    );
                                    return $state.select2;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              undefined
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["insert"] != null &&
                      typeof $steps["insert"] === "object" &&
                      typeof $steps["insert"].then === "function"
                    ) {
                      $steps["insert"] = await $steps["insert"];
                    }

                    $steps["edit"] = $state.select2.id
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.staas.ir/webhook/user/task/edit",
                              undefined,
                              (() => {
                                try {
                                  return (() => {
                                    try {
                                      if (
                                        Array.isArray($state.week) &&
                                        $state.week.length > 0
                                      ) {
                                        $state.select2.weekdays =
                                          JSON.stringify($state.week);
                                      } else {
                                        $state.select2.weekdays = undefined;
                                      }
                                      if (
                                        Array.isArray($state.date) &&
                                        $state.date.length > 0
                                      ) {
                                        let dates = $state.date
                                          .map(i => i?.start?.f || "")
                                          .filter(Boolean);
                                        if (
                                          $state.select2.schedule_type ===
                                          "everyYear"
                                        ) {
                                          dates = dates.map(f => {
                                            let parts = f.split(/[-/]/);
                                            if (parts.length > 1)
                                              parts[0] = "0000";
                                            return f.includes("-")
                                              ? parts.join("-")
                                              : parts.join("/");
                                          });
                                        }
                                        $state.select2.dates =
                                          JSON.stringify(dates);
                                      } else {
                                        $state.select2.dates = undefined;
                                      }
                                      $state.select2.finishTime =
                                        $state?.finishDate?.f || undefined;
                                      $state.select2.active = 1;
                                      if (
                                        Array.isArray($state.time2) &&
                                        $state.time2.length > 0
                                      ) {
                                        $state.select2.times = JSON.stringify(
                                          $state.time2.map(
                                            t =>
                                              `${String(t?.hour ?? 0).padStart(2, "0")}:${String(t?.minute ?? 0).padStart(2, "0")}`
                                          )
                                        );
                                      } else {
                                        $state.select2.times = JSON.stringify(
                                          []
                                        );
                                      }
                                      $state.select2.name = $state?.title ?? "";
                                      const selects =
                                        $state?.radioGroupLiom?.selects ?? [];
                                      $state.select2.channels =
                                        JSON.stringify(selects);
                                    } catch (err) {
                                      $state.select2 = {
                                        weekdays: undefined,
                                        dates: undefined,
                                        finishTime: undefined,
                                        active: 0,
                                        times: "[]",
                                        name: "",
                                        channels: "[]"
                                      };
                                    }
                                    return $state.select2;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["edit"] != null &&
                      typeof $steps["edit"] === "object" &&
                      typeof $steps["edit"].then === "function"
                    ) {
                      $steps["edit"] = await $steps["edit"];
                    }

                    $steps["invokeGlobalAction2"] =
                      $steps.insert?.data?.success == true ||
                      $steps.edit?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                                "bottom-center",
                                2000
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] =
                        await $steps["invokeGlobalAction2"];
                    }

                    $steps["runCode"] =
                      $steps.insert?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.dialog.opendialog = false;
                                  $state.dialog2.opendialog = false;
                                  return ($state.select2.id =
                                    $steps.insert.data.result);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["runCode3"] =
                      $steps.edit?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.dialog.opendialog = false;
                                  return ($state.dialog2.opendialog = false);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode3"] != null &&
                      typeof $steps["runCode3"] === "object" &&
                      typeof $steps["runCode3"].then === "function"
                    ) {
                      $steps["runCode3"] = await $steps["runCode3"];
                    }

                    $steps["updateButton5Load2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["button5", "loading"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateButton5Load2"] != null &&
                      typeof $steps["updateButton5Load2"] === "object" &&
                      typeof $steps["updateButton5Load2"].then === "function"
                    ) {
                      $steps["updateButton5Load2"] =
                        await $steps["updateButton5Load2"];
                    }

                    $steps["runCode4"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return ($state.refresh += 1);
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode4"] != null &&
                      typeof $steps["runCode4"] === "object" &&
                      typeof $steps["runCode4"].then === "function"
                    ) {
                      $steps["runCode4"] = await $steps["runCode4"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button5", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button5", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button5", "loading"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jEOm
                    )}
                  >
                    {
                      "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0630\u062e\u06cc\u0631\u0647"
                    }
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button8"}
                  data-plasmic-override={overrides.button8}
                  className={classNames("__wab_instance", sty.button8)}
                  color={generateStateValueProp($state, ["button8", "color"])}
                  load={generateStateValueProp($state, ["button8", "load"])}
                  loading={generateStateValueProp($state, [
                    "button8",
                    "loading"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDialogOpendialog"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog", "opendialog"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogOpendialog"] != null &&
                      typeof $steps["updateDialogOpendialog"] === "object" &&
                      typeof $steps["updateDialogOpendialog"].then ===
                        "function"
                    ) {
                      $steps["updateDialogOpendialog"] =
                        await $steps["updateDialogOpendialog"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button8", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button8", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button8", "loading"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__g0RqO
                    )}
                  >
                    {"\u0628\u0633\u062a\u0646"}
                  </div>
                </Button>
              </div>
            </div>
          </div>
        </Dialog>
        <Dialog
          data-plasmic-name={"dialog2"}
          data-plasmic-override={overrides.dialog2}
          className={classNames("__wab_instance", sty.dialog2, {
            [sty.dialog2slide__1]: hasVariant($state, "slide", "_1")
          })}
          onOpendialogChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog2", "opendialog"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }

            (async val => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.reminderCategory2.diable = true;
                          $state.reminderCategory2.title = "";
                          return ($state.reminderCategory2.select = {});
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }).apply(null, eventArgs);
          }}
          opendialog={generateStateValueProp($state, ["dialog2", "opendialog"])}
        >
          <div className={classNames(projectcss.all, sty.freeBox__zVmP4)}>
            <ReminderCategory
              data-plasmic-name={"reminderCategory2"}
              data-plasmic-override={overrides.reminderCategory2}
              className={classNames("__wab_instance", sty.reminderCategory2, {
                [sty.reminderCategory2hamyar]: hasVariant(
                  $state,
                  "hamyar",
                  "hamyar"
                )
              })}
              data={generateStateValueProp($state, [
                "reminderCategory2",
                "data"
              ])}
              diable={generateStateValueProp($state, [
                "reminderCategory2",
                "diable"
              ])}
              ok={async () => {
                const $steps = {};

                $steps["updateSelect2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["select2"]
                        },
                        operation: 0,
                        value: (() => {
                          return {
                            liomId: $props.manId,
                            telegramId: $props.telegramId,
                            phoneNumber: $props.phoneNumber,
                            name: $state.reminderCategory2.title,
                            text:
                              $state.reminderCategory2.select.text ||
                              $state.reminderCategory2.select.type,
                            schedule_type:
                              $state.reminderCategory2.select.schedule_type,
                            type: $state.reminderCategory2.select.type,
                            dates: $state.reminderCategory2.select.date
                              ? JSON.stringify([
                                  $state.reminderCategory2.select.date
                                ])
                              : "[]",
                            channels: '["notification","telegram"]',
                            times: "[]",
                            weekdays:
                              $state.reminderCategory2.select.schedule_type ==
                              "everyDay"
                                ? JSON.stringify([
                                    "saturday",
                                    "sunday",
                                    "monday",
                                    "tuesday",
                                    "wednesday",
                                    "thursday",
                                    "friday"
                                  ])
                                : null,
                            active: 1,
                            add: true
                          };
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelect2"] != null &&
                  typeof $steps["updateSelect2"] === "object" &&
                  typeof $steps["updateSelect2"].then === "function"
                ) {
                  $steps["updateSelect2"] = await $steps["updateSelect2"];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            try {
                              const dates = JSON.parse($state.select2.dates);
                              function faToEnDigits(str) {
                                return str.replace(/[۰-۹]/g, d =>
                                  "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                                );
                              }
                              $state.date = dates.map(m => {
                                const today = new Date(m);
                                const f = today.toISOString().split("T")[0];
                                const g = new Intl.DateTimeFormat("fa-IR", {
                                  year: "numeric",
                                  month: "long",
                                  day: "numeric"
                                }).format(today);
                                const jy = Number(
                                  faToEnDigits(
                                    new Intl.DateTimeFormat("fa-IR", {
                                      year: "numeric"
                                    }).format(today)
                                  )
                                );
                                const jm = Number(
                                  faToEnDigits(
                                    new Intl.DateTimeFormat("fa-IR", {
                                      month: "numeric"
                                    }).format(today)
                                  )
                                );
                                const jd = Number(
                                  faToEnDigits(
                                    new Intl.DateTimeFormat("fa-IR", {
                                      day: "numeric"
                                    }).format(today)
                                  )
                                );
                                return {
                                  start: {
                                    f,
                                    g,
                                    year: jy,
                                    month: jm,
                                    day: jd
                                  }
                                };
                              });
                            } catch {
                              $state.date = [];
                            }
                            try {
                              $state.week = JSON.parse($state.select2.weekdays);
                            } catch {}
                            try {
                              function formatTimeString(value) {
                                if (!value) return ["0", "0"];

                                return value.split(":");
                              }
                              const times = JSON.parse($state.select2.times);
                              $state.time2 = times.map(t => {
                                const [hh, mm] = formatTimeString(t);
                                return {
                                  hour: parseInt(hh),
                                  minute: parseInt(mm)
                                };
                              });
                            } catch {
                              $state.time2 = [];
                            }
                            try {
                              function arraysEqualIgnoreOrder(a, b) {
                                if (a.length !== b.length) return false;
                                return [...a]
                                  .sort()
                                  .every(
                                    (val, index) => val === [...b].sort()[index]
                                  );
                              }
                              if ($state.week.length === 0) {
                                return ($state.repead.selected = "once");
                              } else if (
                                arraysEqualIgnoreOrder($state.week, [
                                  "saturday",
                                  "sunday",
                                  "monday",
                                  "tuesday",
                                  "wednesday",
                                  "thursday",
                                  "friday"
                                ])
                              ) {
                                return ($state.repead.selected = "daily");
                              } else if (
                                arraysEqualIgnoreOrder($state.week, [
                                  "saturday",
                                  "sunday",
                                  "monday",
                                  "tuesday",
                                  "wednesday"
                                ])
                              ) {
                                return ($state.repead.selected = "sat_to_wed");
                              } else {
                                return ($state.repead.selected = "custom");
                              }
                            } catch {
                              return ($state.week = []);
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateDialogOpendialog"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dialog", "opendialog"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialogOpendialog"] != null &&
                  typeof $steps["updateDialogOpendialog"] === "object" &&
                  typeof $steps["updateDialogOpendialog"].then === "function"
                ) {
                  $steps["updateDialogOpendialog"] =
                    await $steps["updateDialogOpendialog"];
                }
              }}
              onDataChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "reminderCategory2",
                  "data"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onDiableChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "reminderCategory2",
                  "diable"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onSelectChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "reminderCategory2",
                  "select"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onShowChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "reminderCategory2",
                  "show"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onTitleChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "reminderCategory2",
                  "title"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              show={generateStateValueProp($state, [
                "reminderCategory2",
                "show"
              ])}
              title={generateStateValueProp($state, [
                "reminderCategory2",
                "title"
              ])}
            />
          </div>
        </Dialog>
        <Dialog
          data-plasmic-name={"dateDiolog"}
          data-plasmic-override={overrides.dateDiolog}
          className={classNames("__wab_instance", sty.dateDiolog)}
          onOpendialogChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "dateDiolog",
              "opendialog"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          opendialog={generateStateValueProp($state, [
            "dateDiolog",
            "opendialog"
          ])}
        >
          <div className={classNames(projectcss.all, sty.freeBox__eatO7)}>
            <DatePickers
              data-plasmic-name={"datePickers"}
              data-plasmic-override={overrides.datePickers}
              SelectedDay={(() => {
                try {
                  return (() => {
                    if ($state.dateType == "start")
                      return $state.date[
                        $state.dateIndex == -1 ? 0 : $state.dateIndex
                      ].start.day;
                    else return $state.finishDate.day;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 10;
                  }
                  throw e;
                }
              })()}
              SelectedMonth={(() => {
                try {
                  return (() => {
                    if ($state.dateType == "start")
                      return $state.date[
                        $state.dateIndex == -1 ? 0 : $state.dateIndex
                      ].start.month;
                    else return $state.finishDate.month;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 10;
                  }
                  throw e;
                }
              })()}
              SelectedYear={(() => {
                try {
                  return 1404;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 1377;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.datePickers)}
              customYears={[]}
              hideYear={(() => {
                try {
                  return $state.select2.schedule_type == "everyYear";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "datePickers",
                  "value"
                ]).apply(null, eventArgs);
              }}
              selectedValues={generateStateValueProp($state, [
                "datePickers",
                "value"
              ])}
            />

            <Button
              data-plasmic-name={"button4"}
              data-plasmic-override={overrides.button4}
              className={classNames("__wab_instance", sty.button4)}
              color={generateStateValueProp($state, ["button4", "color"])}
              load={generateStateValueProp($state, ["button4", "load"])}
              loading={generateStateValueProp($state, ["button4", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] =
                  $state.dateIndex == -1 && $state.dateType == "start"
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              const m =
                                $state.datePickers.value.gregorian.month;
                              const d = $state.datePickers.value.gregorian.day;
                              const nowUtc = new Date();
                              const now = new Date(
                                nowUtc.getTime() + 3.5 * 60 * 60 * 1000
                              );
                              const currentYear = now.getFullYear();
                              let todayUtc = new Date(
                                Date.UTC(currentYear, m - 1, d)
                              );
                              let today = new Date(
                                todayUtc.getTime() + 3.5 * 60 * 60 * 1000
                              );
                              if (today < now) {
                                today.setFullYear(currentYear + 1);
                              }
                              const f = today.toISOString().split("T")[0];
                              const g = new Intl.DateTimeFormat("fa-IR", {
                                timeZone: "Asia/Tehran",
                                year: "numeric",
                                month: "long",
                                day: "numeric"
                              }).format(today);
                              return $state.date.push({
                                start: {
                                  f,
                                  g,
                                  year: $state.datePickers.value.year,
                                  month: $state.datePickers.value.month,
                                  day: $state.datePickers.value.day
                                }
                              });
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["runCode2"] =
                  $state.dateIndex != -1 && $state.dateType == "start"
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              const m =
                                $state.datePickers.value.gregorian.month;
                              const d = $state.datePickers.value.gregorian.day;
                              const nowUtc = new Date();
                              const now = new Date(
                                nowUtc.getTime() + 3.5 * 60 * 60 * 1000
                              );
                              const currentYear = now.getFullYear();
                              let todayUtc = new Date(
                                Date.UTC(currentYear, m - 1, d)
                              );
                              let today = new Date(
                                todayUtc.getTime() + 3.5 * 60 * 60 * 1000
                              );
                              if (today < now) {
                                today.setFullYear(currentYear + 1);
                              }
                              const f = today.toISOString().split("T")[0];
                              const g = new Intl.DateTimeFormat("fa-IR", {
                                timeZone: "Asia/Tehran",
                                year: "numeric",
                                month: "long",
                                day: "numeric"
                              }).format(today);
                              return ($state.date[$state.dateIndex] = {
                                start: {
                                  f,
                                  g,
                                  year: $state.datePickers.value.year,
                                  month: $state.datePickers.value.month,
                                  day: $state.datePickers.value.day
                                }
                              });
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["runCode2"] != null &&
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }

                $steps["updateFinishDate"] =
                  $state.dateType == "end"
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["finishDate"]
                          },
                          operation: 0,
                          value: (() => {
                            const m = $state.datePickers.value.gregorian.month;
                            const d = $state.datePickers.value.gregorian.day;
                            const nowUtc = new Date();
                            const now = new Date(
                              nowUtc.getTime() + 3.5 * 60 * 60 * 1000
                            );
                            const currentYear = now.getFullYear();
                            let todayUtc = new Date(
                              Date.UTC(currentYear, m - 1, d)
                            );
                            let today = new Date(
                              todayUtc.getTime() + 3.5 * 60 * 60 * 1000
                            );
                            if (today < now) {
                              today.setFullYear(currentYear + 1);
                            }
                            const f = today.toISOString().split("T")[0];
                            const g = new Intl.DateTimeFormat("fa-IR", {
                              timeZone: "Asia/Tehran",
                              year: "numeric",
                              month: "long",
                              day: "numeric"
                            }).format(today);
                            return ($state.finishDate = {
                              f,
                              g,
                              year: $state.datePickers.value.year,
                              month: $state.datePickers.value.month,
                              day: $state.datePickers.value.day
                            });
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateFinishDate"] != null &&
                  typeof $steps["updateFinishDate"] === "object" &&
                  typeof $steps["updateFinishDate"].then === "function"
                ) {
                  $steps["updateFinishDate"] = await $steps["updateFinishDate"];
                }

                $steps["updateDialog2Opendialog"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dateDiolog", "opendialog"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialog2Opendialog"] != null &&
                  typeof $steps["updateDialog2Opendialog"] === "object" &&
                  typeof $steps["updateDialog2Opendialog"].then === "function"
                ) {
                  $steps["updateDialog2Opendialog"] =
                    await $steps["updateDialog2Opendialog"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button4", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button4", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button4", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zznB
                )}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </div>
            </Button>
          </div>
        </Dialog>
        <Dialog
          data-plasmic-name={"time"}
          data-plasmic-override={overrides.time}
          className={classNames("__wab_instance", sty.time)}
          onOpendialogChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["time", "opendialog"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          opendialog={generateStateValueProp($state, ["time", "opendialog"])}
        >
          <div className={classNames(projectcss.all, sty.freeBox___8MDPm)}>
            <div className={classNames(projectcss.all, sty.freeBox___0OmFq)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pyuK
                )}
              >
                {"\u062f\u0642\u06cc\u0642\u0647"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iIqSt
                )}
              >
                {"\u0633\u0627\u0639\u062a"}
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__fmOzt, "time")}
            >
              <Pickers
                data-plasmic-name={"pickers"}
                data-plasmic-override={overrides.pickers}
                className={classNames("__wab_instance", sty.pickers)}
                data={(() => {
                  try {
                    return (() => {
                      return Array.from({ length: 60 }, (_, i) => ({
                        label: String(i + 1),
                        value: i + 1
                      }));
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                initialValue={generateStateValueProp($state, [
                  "pickers",
                  "value"
                ])}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["pickers", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
              />

              <Pickers
                data-plasmic-name={"pickers2"}
                data-plasmic-override={overrides.pickers2}
                className={classNames("__wab_instance", sty.pickers2)}
                data={(() => {
                  try {
                    return Array.from({ length: 24 }, (_, i) => ({
                      label: String(i + 1),
                      value: i + 1
                    }));
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                initialValue={generateStateValueProp($state, [
                  "pickers2",
                  "value"
                ])}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "pickers2",
                    "value"
                  ]).apply(null, eventArgs);
                }}
              />

              <TimePickerCustom
                data-plasmic-name={"timePickerCustom2"}
                data-plasmic-override={overrides.timePickerCustom2}
                SelectedHour={9}
                SelectedMinute={30}
                className={classNames("__wab_instance", sty.timePickerCustom2)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "timePickerCustom2",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                selectedValues={generateStateValueProp($state, [
                  "timePickerCustom2",
                  "value"
                ])}
              />
            </div>
            <Button
              data-plasmic-name={"button6"}
              data-plasmic-override={overrides.button6}
              className={classNames("__wab_instance", sty.button6)}
              color={generateStateValueProp($state, ["button6", "color"])}
              load={generateStateValueProp($state, ["button6", "load"])}
              loading={generateStateValueProp($state, ["button6", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateDialog2Opendialog"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if ($state.timeIndex == -1)
                              return $state.time2.push({
                                hour: $state.timePickerCustom2.value.hour,
                                minute: $state.timePickerCustom2.value.minute
                              });
                            else {
                              return ($state.time2[$state.timeIndex] = {
                                hour: $state.timePickerCustom2.value.hour,
                                minute: $state.timePickerCustom2.value.minute
                              });
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialog2Opendialog"] != null &&
                  typeof $steps["updateDialog2Opendialog"] === "object" &&
                  typeof $steps["updateDialog2Opendialog"].then === "function"
                ) {
                  $steps["updateDialog2Opendialog"] =
                    await $steps["updateDialog2Opendialog"];
                }

                $steps["updateTimeOpendialog"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["time", "opendialog"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTimeOpendialog"] != null &&
                  typeof $steps["updateTimeOpendialog"] === "object" &&
                  typeof $steps["updateTimeOpendialog"].then === "function"
                ) {
                  $steps["updateTimeOpendialog"] =
                    await $steps["updateTimeOpendialog"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button6", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button6", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button6", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9EgE
                )}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </div>
            </Button>
          </div>
        </Dialog>
        <Dialog
          data-plasmic-name={"weekDays"}
          data-plasmic-override={overrides.weekDays}
          className={classNames("__wab_instance", sty.weekDays)}
          onOpendialogChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["weekDays", "opendialog"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          opendialog={generateStateValueProp($state, [
            "weekDays",
            "opendialog"
          ])}
        >
          <div className={classNames(projectcss.all, sty.freeBox__clX9X)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dKlLc
              )}
            >
              {"\u0631\u0648\u0632 \u0647\u0627\u06cc \u0647\u0641\u062a\u0647"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__mpTf4)}>
              <CheckboxGroup
                data-plasmic-name={"checkboxGroup"}
                data-plasmic-override={overrides.checkboxGroup}
                className={classNames("__wab_instance", sty.checkboxGroup)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "checkboxGroup",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                options={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__a5QJd)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [
                            { label: "شنبه", value: "saturday" },
                            { label: "یکشنبه", value: "sunday" },
                            { label: "دوشنبه", value: "monday" },
                            { label: "سه‌شنبه", value: "tuesday" },
                            { label: "چهارشنبه", value: "wednesday" },
                            { label: "پنجشنبه", value: "thursday" },
                            { label: "جمعه", value: "friday" }
                          ];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zPHuc
                          )}
                          key={currentIndex}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.checkbox
                              ),
                              custom: true,
                              isChecked:
                                generateStateValueProp($state, [
                                  "checkbox",
                                  __plasmic_idx_0,
                                  "isChecked"
                                ]) ?? false,
                              onChange: async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "checkbox",
                                    __plasmic_idx_0,
                                    "isChecked"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async isChecked => {
                                  const $steps = {};

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              if (
                                                $state.checkbox[currentIndex]
                                                  .isChecked
                                              ) {
                                                return $state.week.push(
                                                  currentItem.value
                                                );
                                              } else {
                                                return ($state.week =
                                                  $state.week.filter(
                                                    item =>
                                                      item !== currentItem.value
                                                  ));
                                              }
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }
                                }).apply(null, eventArgs);
                              }
                            };

                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "checkbox[].isChecked",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return $state.week.find(
                                          i => i === currentItem.value
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <Checkbox
                                data-plasmic-name={"checkbox"}
                                data-plasmic-override={overrides.checkbox}
                                {...child$Props}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__iGh
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.label;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </Checkbox>
                            );
                          })()}
                        </div>
                      );
                    })}
                  </div>
                }
                showLabel={false}
                value={generateStateValueProp($state, [
                  "checkboxGroup",
                  "value"
                ])}
              />

              <Button
                data-plasmic-name={"button11"}
                data-plasmic-override={overrides.button11}
                className={classNames("__wab_instance", sty.button11)}
                color={generateStateValueProp($state, ["button11", "color"])}
                load={generateStateValueProp($state, ["button11", "load"])}
                loading={generateStateValueProp($state, [
                  "button11",
                  "loading"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateWeekDaysOpendialog"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["weekDays", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateWeekDaysOpendialog"] != null &&
                    typeof $steps["updateWeekDaysOpendialog"] === "object" &&
                    typeof $steps["updateWeekDaysOpendialog"].then ===
                      "function"
                  ) {
                    $steps["updateWeekDaysOpendialog"] =
                      await $steps["updateWeekDaysOpendialog"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button11", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button11", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadingChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button11", "loading"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </Button>
            </div>
          </div>
        </Dialog>
      </section>
      <div
        className={classNames(projectcss.all, sty.freeBox__roMeM, {
          [sty.freeBoxadd__roMeMuWxSg]: hasVariant($state, "add", "add"),
          [sty.freeBoxhamyar__roMeMYj8LV]: hasVariant(
            $state,
            "hamyar",
            "hamyar"
          ),
          [sty.freeBoxslide__1__roMeMedcqc]: hasVariant($state, "slide", "_1"),
          [sty.freeBoxslide__2__roMeMvJmCw]: hasVariant($state, "slide", "_2")
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__dVXpG, {
            [sty.freeBoxadd__dVXpGuWxSg]: hasVariant($state, "add", "add"),
            [sty.freeBoxslide__1__dVXpGedcqc]: hasVariant(
              $state,
              "slide",
              "_1"
            ),
            [sty.freeBoxslide__2__dVXpGvJmCw]: hasVariant($state, "slide", "_2")
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rZtR,
              {
                [sty.textslide__1__rZtRedcqc]: hasVariant(
                  $state,
                  "slide",
                  "_1"
                ),
                [sty.textslide__2__rZtRvJmCw]: hasVariant($state, "slide", "_2")
              }
            )}
          >
            {
              "\u0645\u0633\u06cc\u0631 \u0647\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u0647\u0627"
            }
          </div>
        </div>
        <div
          data-plasmic-name={"slide2"}
          data-plasmic-override={overrides.slide2}
          className={classNames(projectcss.all, sty.slide2, {
            [sty.slide2add]: hasVariant($state, "add", "add"),
            [sty.slide2slide__1]: hasVariant($state, "slide", "_1"),
            [sty.slide2slide__2]: hasVariant($state, "slide", "_2")
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__mco7M)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___2Ze26, {
                [sty.imghamyar___2Ze26Yj8LV]: hasVariant(
                  $state,
                  "hamyar",
                  "hamyar"
                )
              })}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobile") ? "40px" : "50px"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobile") ? "40px" : "50px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image121.svg",
                fullWidth: 32,
                fullHeight: 32,
                aspectRatio: 1
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox__jphvW)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8SfmK
                )}
              >
                {
                  " \u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__jYkOx)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0IZfz
                )}
              >
                {"\u0641\u0639\u0627\u0644"}
              </div>
              <Icon214Icon
                className={classNames(projectcss.all, sty.svg___1Ih8Q)}
                role={"img"}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__lD35S)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__ge09I)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobile") ? "40px" : "50px"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "mobile") ? "100%" : "100%"
              }
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobile") ? "40px" : "50px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image119.svg",
                fullWidth: 32,
                fullHeight: 32,
                aspectRatio: 1
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox__nyFlb)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__glfn
                )}
              >
                {
                  "\u0631\u0628\u0627\u062a \u062a\u0644\u06af\u0631\u0627\u0645"
                }
              </div>
            </div>
            {(() => {
              try {
                return !$props.telegramOn;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                data-plasmic-name={"button9"}
                data-plasmic-override={overrides.button9}
                className={classNames("__wab_instance", sty.button9)}
                color={generateStateValueProp($state, ["button9", "color"])}
                load={generateStateValueProp($state, ["button9", "load"])}
                loading={generateStateValueProp($state, ["button9", "loading"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode2"] = false
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($props.telegramOn = !$props.telegramOn);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode2"] != null &&
                    typeof $steps["runCode2"] === "object" &&
                    typeof $steps["runCode2"].then === "function"
                  ) {
                    $steps["runCode2"] = await $steps["runCode2"];
                  }

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return window.open(
                              `https://t.me/liomApp_bot?start=ref_${$props.man.refCode}`,
                              "_blank"
                            );
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button9", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button9", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadingChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button9", "loading"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                size={"compact"}
              >
                {"\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc"}
              </Button>
            ) : null}
            {(() => {
              try {
                return $props.telegramOn;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__of6QH)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__shHvk
                  )}
                >
                  {"\u0641\u0639\u0627\u0644"}
                </div>
                <Icon214Icon
                  className={classNames(projectcss.all, sty.svg__gclh)}
                  role={"img"}
                />
              </div>
            ) : null}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__h31Sa)}
            id={"sms-tag"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___1Jflj)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobile") ? "40px" : "50px"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobile") ? "40px" : "50px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image120.svg",
                fullWidth: 34,
                fullHeight: 34,
                aspectRatio: 1
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox__ljiiw)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9HquP
                )}
              >
                {
                  " \u067e\u06cc\u0627\u0645\u06a9 \u0648 \u062a\u0645\u0627\u0633"
                }
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__ywBkh, {
                [sty.freeBoxhamyar__ywBkhYj8LV]: hasVariant(
                  $state,
                  "hamyar",
                  "hamyar"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d61Dh
                )}
              >
                {"\u0628\u0632\u0648\u062f\u06cc"}
              </div>
            </div>
            <Button
              data-plasmic-name={"button10"}
              data-plasmic-override={overrides.button10}
              className={classNames("__wab_instance", sty.button10)}
              color={generateStateValueProp($state, ["button10", "color"])}
              load={generateStateValueProp($state, ["button10", "load"])}
              loading={generateStateValueProp($state, ["button10", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["runCode2"] = false
                  ? (() => {
                      const actionArgs = { eventRef: $props["shop"] };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode2"] != null &&
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }

                $steps["runSetMobile"] = false
                  ? (() => {
                      const actionArgs = { eventRef: $props["setMobile"] };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runSetMobile"] != null &&
                  typeof $steps["runSetMobile"] === "object" &&
                  typeof $steps["runSetMobile"].then === "function"
                ) {
                  $steps["runSetMobile"] = await $steps["runSetMobile"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "\u0627\u06cc\u0646 \u0642\u0627\u0628\u0644\u06cc\u062a \u0628\u0632\u0648\u062f\u06cc \u0641\u0639\u0627\u0644 \u062e\u0648\u0627\u0647\u062f \u0634\u062f!"
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] =
                    await $steps["invokeGlobalAction"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button10", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button10", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button10", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              size={"compact"}
            >
              {"\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc"}
            </Button>
            <div className={classNames(projectcss.all, sty.freeBox__lEgr6)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xnAhg
                )}
              >
                {"\u0641\u0639\u0627\u0644"}
              </div>
              <Icon214Icon
                className={classNames(projectcss.all, sty.svg__yFzrA)}
                role={"img"}
              />
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"frame"}
          data-plasmic-override={overrides.frame}
          className={classNames(projectcss.all, sty.frame, {
            [sty.frameadd]: hasVariant($state, "add", "add"),
            [sty.frameslide__2]: hasVariant($state, "slide", "_2")
          })}
        >
          <div
            data-plasmic-name={"frame2"}
            data-plasmic-override={overrides.frame2}
            className={classNames(projectcss.all, sty.frame2, {
              [sty.frame2slide__2]: hasVariant($state, "slide", "_2")
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__hfldd, {
                [sty.freeBoxslide__2__hflddVJmCw]: hasVariant(
                  $state,
                  "slide",
                  "_2"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__eIspo)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wvUwD,
                    {
                      [sty.textslide__1__wvUwDedcqc]: hasVariant(
                        $state,
                        "slide",
                        "_1"
                      ),
                      [sty.textslide__2__wvUwDvJmCw]: hasVariant(
                        $state,
                        "slide",
                        "_2"
                      )
                    }
                  )}
                >
                  {"\u0631\u0648\u06cc\u062f\u0627\u062f \u0647\u0627"}
                </div>
                <Button
                  data-plasmic-name={"button7"}
                  data-plasmic-override={overrides.button7}
                  className={classNames("__wab_instance", sty.button7)}
                  color={generateStateValueProp($state, ["button7", "color"])}
                  endIcon={
                    <Icon283Icon
                      className={classNames(projectcss.all, sty.svg__r3Q8R)}
                      role={"img"}
                    />
                  }
                  load={generateStateValueProp($state, ["button7", "load"])}
                  loading={generateStateValueProp($state, [
                    "button7",
                    "loading"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.select2 = {};
                                return ($state.date = {});
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["updateDialogOpendialog"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog", "opendialog"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogOpendialog"] != null &&
                      typeof $steps["updateDialogOpendialog"] === "object" &&
                      typeof $steps["updateDialogOpendialog"].then ===
                        "function"
                    ) {
                      $steps["updateDialogOpendialog"] =
                        await $steps["updateDialogOpendialog"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button7", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button7", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button7", "loading"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  showEndIcon={true}
                  size={"compact"}
                >
                  {"\u0627\u0641\u0632\u0648\u062f\u0646 "}
                </Button>
              </div>
            </div>
          </div>
        </div>
        {(
          hasVariant($state, "add", "add")
            ? (() => {
                try {
                  return $props.data.length > 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "slide", "_2")
              ? true
              : true
        ) ? (
          <div
            data-plasmic-name={"todayMeeting"}
            data-plasmic-override={overrides.todayMeeting}
            className={classNames(projectcss.all, sty.todayMeeting, "days", {
              [sty.todayMeetingadd]: hasVariant($state, "add", "add"),
              [sty.todayMeetingslide__1]: hasVariant($state, "slide", "_1"),
              [sty.todayMeetingslide__2]: hasVariant($state, "slide", "_2")
            })}
            id={"scrollBox"}
            onScroll={async event => {
              const $steps = {};
            }}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return (() => {
                    const groupsMap = new Map();
                    try {
                      $state.list.forEach(t => {
                        let parsedDates;
                        try {
                          parsedDates = t.dates ? JSON.parse(t.dates) : [];
                        } catch (e) {
                          parsedDates = [];
                        }
                        t.telegramId = $props.telegramId;
                        t.phoneNumber = $props.phoneNumber;
                        t.liomId = $props.manId;
                        let key;
                        if (t.schedule_type === "everyDay") {
                          key = "__everyDay__";
                        } else {
                          key = parsedDates[0] || "__noDate__";
                        }
                        if (!groupsMap.has(key)) groupsMap.set(key, []);
                        groupsMap.get(key).push(t);
                      });
                      const groups = Array.from(groupsMap.entries())
                        .sort((a, b) => {
                          if (a[0] === "__everyDay__") return -1;
                          if (b[0] === "__everyDay__") return 1;
                          if (a[0] === "__noDate__") return -1;
                          if (b[0] === "__noDate__") return 1;
                          const dateA = new Date(a[0]);
                          const dateB = new Date(b[0]);
                          const timeA = dateA.getTime();
                          const timeB = dateB.getTime();
                          if (Number.isNaN(timeA)) return 1;
                          if (Number.isNaN(timeB)) return -1;
                          return timeA - timeB;
                        })
                        .map(entry => entry[1]);
                      return groups;
                    } catch {
                      return [];
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentday = __plasmic_item_0;
              const dayIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__fN6Ve,
                    ``,
                    {
                      [sty.freeBoxadd__fN6VeuWxSg]: hasVariant(
                        $state,
                        "add",
                        "add"
                      ),
                      [sty.freeBoxslide__2__fN6VeVJmCw]: hasVariant(
                        $state,
                        "slide",
                        "_2"
                      )
                    }
                  )}
                  key={dayIndex}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__laNy3,
                      "itemdays",
                      {
                        [sty.freeBoxadd__laNy3UWxSg]: hasVariant(
                          $state,
                          "add",
                          "add"
                        )
                      }
                    )}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox___3Qy8)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tWbb,
                          {
                            [sty.textadd__tWbbuWxSg]: hasVariant(
                              $state,
                              "add",
                              "add"
                            )
                          }
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                if (currentday[0].schedule_type == "everyYear")
                                  try {
                                    let dates = JSON.parse(currentday[0].dates);
                                    if (dates && dates.length > 0) {
                                      function parseISOToUTC(dateStr) {
                                        let [y, m, d] = dateStr
                                          .split("-")
                                          .map(Number);
                                        return new Date(Date.UTC(y, m - 1, d));
                                      }
                                      let formatter = new Intl.DateTimeFormat(
                                        "fa-IR",
                                        {
                                          timeZone: "Asia/Tehran",
                                          month: "long",
                                          day: "numeric"
                                        }
                                      );
                                      let faDate = formatter.format(
                                        parseISOToUTC(dates[0])
                                      );
                                      return faDate;
                                    } else {
                                      return "رویدادهای روزانه";
                                    }
                                  } catch {
                                    return "رویدادهای روزانه";
                                  }
                                else
                                  try {
                                    let dates = JSON.parse(currentItem.dates);
                                    if (dates && dates.length > 0) {
                                      function parseISOToUTC(dateStr) {
                                        let [y, m, d] = dateStr
                                          .split("-")
                                          .map(Number);
                                        return new Date(Date.UTC(y, m - 1, d));
                                      }
                                      let formatter = new Intl.DateTimeFormat(
                                        "fa-IR",
                                        {
                                          timeZone: "Asia/Tehran",
                                          year: "numeric",
                                          month: "numeric",
                                          day: "numeric"
                                        }
                                      );
                                      let faDate = formatter.format(
                                        parseISOToUTC(dates[0])
                                      );
                                      return faDate;
                                    } else {
                                      return "رویدادهای روزانه";
                                    }
                                  } catch {
                                    return "رویدادهای روزانه";
                                  }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return currentday;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_1, __plasmic_idx_1) => {
                      const currentItem = __plasmic_item_1;
                      const currentIndex = __plasmic_idx_1;
                      return (
                        <div
                          data-plasmic-name={"frame26"}
                          data-plasmic-override={overrides.frame26}
                          className={classNames(
                            projectcss.all,
                            sty.frame26,
                            ``,
                            {
                              [sty.frame26add]: hasVariant(
                                $state,
                                "add",
                                "add"
                              ),
                              [sty.frame26slide__1]: hasVariant(
                                $state,
                                "slide",
                                "_1"
                              )
                            }
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};
                          }}
                        >
                          <div
                            data-plasmic-name={"frame27"}
                            data-plasmic-override={overrides.frame27}
                            className={classNames(projectcss.all, sty.frame27, {
                              [sty.frame27slide__1]: hasVariant(
                                $state,
                                "slide",
                                "_1"
                              )
                            })}
                          >
                            <div
                              data-plasmic-name={"frame28"}
                              data-plasmic-override={overrides.frame28}
                              className={classNames(
                                projectcss.all,
                                sty.frame28,
                                {
                                  [sty.frame28slide__1]: hasVariant(
                                    $state,
                                    "slide",
                                    "_1"
                                  )
                                }
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["runCode"] = false
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            const daysContainer =
                                              document.querySelector(".days");
                                            if (!daysContainer) return;
                                            const firstChild =
                                              daysContainer.children[dayIndex];
                                            if (!firstChild) return;
                                            const itemDay =
                                              firstChild.querySelector(
                                                ".itemdays"
                                              );
                                            if (!itemDay) return;
                                            const targetChild =
                                              itemDay.children[currentIndex];
                                            if (!targetChild) return;
                                            const datesStr =
                                              currentItem?.dates || "[]";
                                            const parsedDates = JSON.parse(
                                              datesStr || "[]"
                                            );
                                            if (parsedDates.length === 0) {
                                              const firstButton =
                                                targetChild.querySelector(
                                                  "button"
                                                );
                                              if (firstButton)
                                                return firstButton.click();
                                            } else {
                                              const checkbox =
                                                targetChild.querySelector(
                                                  'input[type="checkbox"]'
                                                );
                                              if (checkbox) {
                                                checkbox.click();
                                                return ($state.switchSetting[
                                                  dayIndex
                                                ][currentIndex].isChecked =
                                                  !$state.switchSetting[
                                                    dayIndex
                                                  ][currentIndex].isChecked);
                                              }
                                            }
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }}
                            >
                              <div
                                data-plasmic-name={"frame29"}
                                data-plasmic-override={overrides.frame29}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame29
                                )}
                              >
                                <div
                                  data-plasmic-name={"frame30"}
                                  data-plasmic-override={overrides.frame30}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame30
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ez4GT
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__yZzHx,
                                        {
                                          [sty.textslide__1__yZzHXedcqc]:
                                            hasVariant($state, "slide", "_1")
                                        }
                                      )}
                                      onClick={async event => {
                                        const $steps = {};
                                      }}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.token1
                                              ? `${currentItem.name} ${currentItem.token1}`
                                              : currentItem.name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Townhall Meeting";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__fdVF,
                                        {
                                          [sty.freeBoxslide__1__fdVFedcqc]:
                                            hasVariant($state, "slide", "_1")
                                        }
                                      )}
                                    >
                                      {(
                                        hasVariant($state, "slide", "_1")
                                          ? true
                                          : (() => {
                                              try {
                                                return (() => {
                                                  try {
                                                    let times = JSON.parse(
                                                      currentItem.times
                                                    );
                                                    return (
                                                      times && times.length > 0
                                                    );
                                                  } catch {}
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })()
                                      ) ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__dk6G,
                                            {
                                              [sty.freeBoxslide__1__dk6Gedcqc]:
                                                hasVariant(
                                                  $state,
                                                  "slide",
                                                  "_1"
                                                )
                                            }
                                          )}
                                        >
                                          <Icon291Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg___5AYfy
                                            )}
                                            role={"img"}
                                          />

                                          <LineClomp
                                            data-plasmic-name={"lineClomp"}
                                            data-plasmic-override={
                                              overrides.lineClomp
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.lineClomp
                                            )}
                                            numberOfLine={1}
                                            onLineChange={async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "lineClomp",
                                                  __plasmic_idx_0,
                                                  __plasmic_idx_1,
                                                  "line"
                                                ]
                                              ).apply(null, eventArgs);

                                              if (
                                                eventArgs.length > 1 &&
                                                eventArgs[1] &&
                                                eventArgs[1]
                                                  ._plasmic_state_init_
                                              ) {
                                                return;
                                              }
                                            }}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___71Sm6
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["runCode"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        customFunction:
                                                          async () => {
                                                            return undefined;
                                                          }
                                                      };
                                                      return (({
                                                        customFunction
                                                      }) => {
                                                        return customFunction();
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["runCode"] != null &&
                                                  typeof $steps["runCode"] ===
                                                    "object" &&
                                                  typeof $steps["runCode"]
                                                    .then === "function"
                                                ) {
                                                  $steps["runCode"] =
                                                    await $steps["runCode"];
                                                }
                                              }}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (() => {
                                                      try {
                                                        return JSON.parse(
                                                          currentItem.times
                                                        ).join("   ,   ");
                                                      } catch {
                                                        return "";
                                                      }
                                                    })();
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "Townhall Meeting";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                          </LineClomp>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return (() => {
                                            try {
                                              let week = JSON.parse(
                                                currentItem.weekdays
                                              );
                                              let dates = JSON.parse(
                                                currentItem.dates
                                              );
                                              return (
                                                week &&
                                                week.length > 0 &&
                                                dates.length == 0
                                              );
                                            } catch {}
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__rz1Xl,
                                            {
                                              [sty.freeBoxslide__1__rz1XLedcqc]:
                                                hasVariant(
                                                  $state,
                                                  "slide",
                                                  "_1"
                                                )
                                            }
                                          )}
                                        >
                                          <Icon313Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg___51OeD,
                                              {
                                                [sty.svgslide__1___51OeDedcqc]:
                                                  hasVariant(
                                                    $state,
                                                    "slide",
                                                    "_1"
                                                  )
                                              }
                                            )}
                                            role={"img"}
                                          />

                                          <LineClomp
                                            data-plasmic-name={"lineClomp3"}
                                            data-plasmic-override={
                                              overrides.lineClomp3
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.lineClomp3
                                            )}
                                            numberOfLine={1}
                                            onLineChange={async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "lineClomp3",
                                                  __plasmic_idx_0,
                                                  __plasmic_idx_1,
                                                  "line"
                                                ]
                                              ).apply(null, eventArgs);

                                              if (
                                                eventArgs.length > 1 &&
                                                eventArgs[1] &&
                                                eventArgs[1]
                                                  ._plasmic_state_init_
                                              ) {
                                                return;
                                              }
                                            }}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__sRf
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["runCode"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        customFunction:
                                                          async () => {
                                                            return undefined;
                                                          }
                                                      };
                                                      return (({
                                                        customFunction
                                                      }) => {
                                                        return customFunction();
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["runCode"] != null &&
                                                  typeof $steps["runCode"] ===
                                                    "object" &&
                                                  typeof $steps["runCode"]
                                                    .then === "function"
                                                ) {
                                                  $steps["runCode"] =
                                                    await $steps["runCode"];
                                                }
                                              }}
                                            >
                                              {
                                                "\u0647\u0631 \u0631\u0648\u0632"
                                              }
                                            </div>
                                          </LineClomp>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return (() => {
                                            try {
                                              let dates = JSON.parse(
                                                currentItem.dates
                                              );
                                              return dates && dates.length > 0;
                                            } catch {}
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__tPVjj,
                                            {
                                              [sty.freeBoxslide__1__tPVjjedcqc]:
                                                hasVariant(
                                                  $state,
                                                  "slide",
                                                  "_1"
                                                )
                                            }
                                          )}
                                        >
                                          <Icon290Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__s21QL
                                            )}
                                            role={"img"}
                                          />

                                          <LineClomp
                                            data-plasmic-name={"lineClomp2"}
                                            data-plasmic-override={
                                              overrides.lineClomp2
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.lineClomp2
                                            )}
                                            numberOfLine={1}
                                            onLineChange={async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "lineClomp2",
                                                  __plasmic_idx_0,
                                                  __plasmic_idx_1,
                                                  "line"
                                                ]
                                              ).apply(null, eventArgs);

                                              if (
                                                eventArgs.length > 1 &&
                                                eventArgs[1] &&
                                                eventArgs[1]
                                                  ._plasmic_state_init_
                                              ) {
                                                return;
                                              }
                                            }}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__z1Vcs
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["runCode"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        customFunction:
                                                          async () => {
                                                            return (() => {
                                                              const editId = `edit${dayIndex}${currentIndex}`;
                                                              const edits =
                                                                document.getElementById(
                                                                  editId
                                                                );
                                                              if (!edits) {
                                                                return console.warn(
                                                                  `❌ Element with id "${editId}" not found`
                                                                );
                                                              } else {
                                                                const firstButton =
                                                                  edits.querySelector(
                                                                    "button"
                                                                  );
                                                                if (
                                                                  firstButton
                                                                ) {
                                                                  return firstButton.click();
                                                                } else {
                                                                  return console.warn(
                                                                    `⚠️ No button found inside #${editId}`
                                                                  );
                                                                }
                                                              }
                                                            })();
                                                          }
                                                      };
                                                      return (({
                                                        customFunction
                                                      }) => {
                                                        return customFunction();
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["runCode"] != null &&
                                                  typeof $steps["runCode"] ===
                                                    "object" &&
                                                  typeof $steps["runCode"]
                                                    .then === "function"
                                                ) {
                                                  $steps["runCode"] =
                                                    await $steps["runCode"];
                                                }
                                              }}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (() => {
                                                      if (
                                                        currentItem.schedule_type ==
                                                        "everyYear"
                                                      )
                                                        try {
                                                          let dates =
                                                            JSON.parse(
                                                              currentItem.dates
                                                            );
                                                          if (
                                                            dates &&
                                                            dates.length > 0
                                                          ) {
                                                            function parseISOToUTC(
                                                              dateStr
                                                            ) {
                                                              let [y, m, d] =
                                                                dateStr
                                                                  .split("-")
                                                                  .map(Number);
                                                              return new Date(
                                                                Date.UTC(
                                                                  y,
                                                                  m - 1,
                                                                  d
                                                                )
                                                              );
                                                            }
                                                            let formatter =
                                                              new Intl.DateTimeFormat(
                                                                "fa-IR",
                                                                {
                                                                  timeZone:
                                                                    "Asia/Tehran",
                                                                  month: "long",
                                                                  day: "numeric"
                                                                }
                                                              );
                                                            let faDates =
                                                              dates.map(d =>
                                                                formatter.format(
                                                                  parseISOToUTC(
                                                                    d
                                                                  )
                                                                )
                                                              );
                                                            return ` ${faDates.join("  ,  ")} `;
                                                          } else {
                                                            return "";
                                                          }
                                                        } catch {
                                                          return "";
                                                        }
                                                      else
                                                        try {
                                                          let dates =
                                                            JSON.parse(
                                                              currentItem.dates
                                                            );
                                                          if (
                                                            dates &&
                                                            dates.length > 0
                                                          ) {
                                                            function parseISOToUTC(
                                                              dateStr
                                                            ) {
                                                              let [y, m, d] =
                                                                dateStr
                                                                  .split("-")
                                                                  .map(Number);
                                                              return new Date(
                                                                Date.UTC(
                                                                  y,
                                                                  m - 1,
                                                                  d
                                                                )
                                                              );
                                                            }
                                                            let formatter =
                                                              new Intl.DateTimeFormat(
                                                                "fa-IR",
                                                                {
                                                                  timeZone:
                                                                    "Asia/Tehran",
                                                                  year: "numeric",
                                                                  month:
                                                                    "numeric",
                                                                  day: "numeric"
                                                                }
                                                              );
                                                            let faDates =
                                                              dates.map(d =>
                                                                formatter.format(
                                                                  parseISOToUTC(
                                                                    d
                                                                  )
                                                                )
                                                              );
                                                            return ` ${faDates.join("  ,  ")} `;
                                                          } else {
                                                            return "";
                                                          }
                                                        } catch {
                                                          return "";
                                                        }
                                                    })();
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "Townhall Meeting";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                          </LineClomp>
                                        </div>
                                      ) : null}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___0V7N,
                                {
                                  [sty.freeBoxslide__1___0V7Nedcqc]: hasVariant(
                                    $state,
                                    "slide",
                                    "_1"
                                  )
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__x0
                                )}
                                id={(() => {
                                  try {
                                    return `edit${dayIndex}${currentIndex}`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                {(() => {
                                  try {
                                    return (() => {
                                      const datesStr =
                                        currentItem.dates || "[]";
                                      const parsed = JSON.parse(
                                        datesStr || "[]"
                                      );
                                      return (
                                        parsed.length != 0 ||
                                        currentItem.id != null
                                      );
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()
                                  ? (() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.editItem,
                                          {
                                            [sty.editItemslide__1]: hasVariant(
                                              $state,
                                              "slide",
                                              "_1"
                                            )
                                          }
                                        ),
                                        color: generateStateValueProp($state, [
                                          "editItem",
                                          __plasmic_idx_0,
                                          __plasmic_idx_1,
                                          "color"
                                        ]),
                                        load: generateStateValueProp($state, [
                                          "editItem",
                                          __plasmic_idx_0,
                                          __plasmic_idx_1,
                                          "load"
                                        ]),
                                        loading: generateStateValueProp(
                                          $state,
                                          [
                                            "editItem",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "loading"
                                          ]
                                        ),
                                        onClick: async event => {
                                          const $steps = {};

                                          $steps["updateSelect2"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["select2"]
                                                  },
                                                  operation: 0,
                                                  value: currentItem
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateSelect2"] != null &&
                                            typeof $steps["updateSelect2"] ===
                                              "object" &&
                                            typeof $steps["updateSelect2"]
                                              .then === "function"
                                          ) {
                                            $steps["updateSelect2"] =
                                              await $steps["updateSelect2"];
                                          }

                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return (() => {
                                                      try {
                                                        const dates =
                                                          JSON.parse(
                                                            $state.select2.dates
                                                          );
                                                        function faToEnDigits(
                                                          str
                                                        ) {
                                                          return str.replace(
                                                            /[۰-۹]/g,
                                                            d =>
                                                              "۰۱۲۳۴۵۶۷۸۹".indexOf(
                                                                d
                                                              )
                                                          );
                                                        }
                                                        $state.date = dates.map(
                                                          m => {
                                                            const today =
                                                              new Date(m);
                                                            const f = today
                                                              .toISOString()
                                                              .split("T")[0];
                                                            const g =
                                                              new Intl.DateTimeFormat(
                                                                "fa-IR",
                                                                {
                                                                  year: "numeric",
                                                                  month: "long",
                                                                  day: "numeric"
                                                                }
                                                              ).format(today);
                                                            const jy = Number(
                                                              faToEnDigits(
                                                                new Intl.DateTimeFormat(
                                                                  "fa-IR",
                                                                  {
                                                                    year: "numeric"
                                                                  }
                                                                ).format(today)
                                                              )
                                                            );
                                                            const jm = Number(
                                                              faToEnDigits(
                                                                new Intl.DateTimeFormat(
                                                                  "fa-IR",
                                                                  {
                                                                    month:
                                                                      "numeric"
                                                                  }
                                                                ).format(today)
                                                              )
                                                            );
                                                            const jd = Number(
                                                              faToEnDigits(
                                                                new Intl.DateTimeFormat(
                                                                  "fa-IR",
                                                                  {
                                                                    day: "numeric"
                                                                  }
                                                                ).format(today)
                                                              )
                                                            );
                                                            return {
                                                              start: {
                                                                f,
                                                                g,
                                                                year: jy,
                                                                month: jm,
                                                                day: jd
                                                              }
                                                            };
                                                          }
                                                        );
                                                      } catch {
                                                        $state.date = [];
                                                      }
                                                      try {
                                                        $state.week =
                                                          JSON.parse(
                                                            currentItem.weekdays
                                                          );
                                                      } catch {}
                                                      try {
                                                        function formatTimeString(
                                                          value
                                                        ) {
                                                          if (!value)
                                                            return ["0", "0"];

                                                          return value.split(
                                                            ":"
                                                          );
                                                        }
                                                        const times =
                                                          JSON.parse(
                                                            $state.select2.times
                                                          );
                                                        $state.time2 =
                                                          times.map(t => {
                                                            const [hh, mm] =
                                                              formatTimeString(
                                                                t
                                                              );
                                                            return {
                                                              hour: parseInt(
                                                                hh
                                                              ),
                                                              minute:
                                                                parseInt(mm)
                                                            };
                                                          });
                                                      } catch {
                                                        $state.time2 = [];
                                                      }
                                                      try {
                                                        function arraysEqualIgnoreOrder(
                                                          a,
                                                          b
                                                        ) {
                                                          if (
                                                            a.length !==
                                                            b.length
                                                          )
                                                            return false;
                                                          return [...a]
                                                            .sort()
                                                            .every(
                                                              (val, index) =>
                                                                val ===
                                                                [...b].sort()[
                                                                  index
                                                                ]
                                                            );
                                                        }
                                                        if (
                                                          $state.week.length ===
                                                          0
                                                        ) {
                                                          $state.repead.selected =
                                                            "once";
                                                        } else if (
                                                          arraysEqualIgnoreOrder(
                                                            $state.week,
                                                            [
                                                              "saturday",
                                                              "sunday",
                                                              "monday",
                                                              "tuesday",
                                                              "wednesday",
                                                              "thursday",
                                                              "friday"
                                                            ]
                                                          )
                                                        ) {
                                                          $state.repead.selected =
                                                            "daily";
                                                        } else if (
                                                          arraysEqualIgnoreOrder(
                                                            $state.week,
                                                            [
                                                              "saturday",
                                                              "sunday",
                                                              "monday",
                                                              "tuesday",
                                                              "wednesday"
                                                            ]
                                                          )
                                                        ) {
                                                          $state.repead.selected =
                                                            "sat_to_wed";
                                                        } else {
                                                          $state.repead.selected =
                                                            "custom";
                                                        }
                                                      } catch {
                                                        $state.week = [];
                                                      }
                                                      try {
                                                        const finish =
                                                          $state.select2
                                                            .finishTime;
                                                        if (finish) {
                                                          const today =
                                                            new Date(finish);
                                                          function faToEnDigits(
                                                            str
                                                          ) {
                                                            return str.replace(
                                                              /[۰-۹]/g,
                                                              d =>
                                                                "۰۱۲۳۴۵۶۷۸۹".indexOf(
                                                                  d
                                                                )
                                                            );
                                                          }
                                                          const f = today
                                                            .toISOString()
                                                            .split("T")[0];
                                                          const g =
                                                            new Intl.DateTimeFormat(
                                                              "fa-IR",
                                                              {
                                                                year: "numeric",
                                                                month: "long",
                                                                day: "numeric"
                                                              }
                                                            ).format(today);
                                                          const jy = Number(
                                                            faToEnDigits(
                                                              new Intl.DateTimeFormat(
                                                                "fa-IR",
                                                                {
                                                                  year: "numeric"
                                                                }
                                                              ).format(today)
                                                            )
                                                          );
                                                          const jm = Number(
                                                            faToEnDigits(
                                                              new Intl.DateTimeFormat(
                                                                "fa-IR",
                                                                {
                                                                  month:
                                                                    "numeric"
                                                                }
                                                              ).format(today)
                                                            )
                                                          );
                                                          const jd = Number(
                                                            faToEnDigits(
                                                              new Intl.DateTimeFormat(
                                                                "fa-IR",
                                                                {
                                                                  day: "numeric"
                                                                }
                                                              ).format(today)
                                                            )
                                                          );
                                                          return ($state.finishDate =
                                                            {
                                                              f,
                                                              g,
                                                              year: jy,
                                                              month: jm,
                                                              day: jd
                                                            });
                                                        } else {
                                                          return ($state.finishDate =
                                                            {});
                                                        }
                                                      } catch {
                                                        return ($state.finishDate =
                                                          {});
                                                      }
                                                    })();
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] =
                                              await $steps["runCode"];
                                          }

                                          $steps["updateDialogOpendialog"] =
                                            true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "dialog",
                                                        "opendialog"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: true
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["updateDialogOpendialog"] !=
                                              null &&
                                            typeof $steps[
                                              "updateDialogOpendialog"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateDialogOpendialog"
                                            ].then === "function"
                                          ) {
                                            $steps["updateDialogOpendialog"] =
                                              await $steps[
                                                "updateDialogOpendialog"
                                              ];
                                          }
                                        },
                                        onColorChange: async (
                                          ...eventArgs: any
                                        ) => {
                                          ((...eventArgs) => {
                                            generateStateOnChangeProp($state, [
                                              "editItem",
                                              __plasmic_idx_0,
                                              __plasmic_idx_1,
                                              "color"
                                            ])(eventArgs[0]);
                                          }).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }
                                        },
                                        onLoadChange: async (
                                          ...eventArgs: any
                                        ) => {
                                          ((...eventArgs) => {
                                            generateStateOnChangeProp($state, [
                                              "editItem",
                                              __plasmic_idx_0,
                                              __plasmic_idx_1,
                                              "load"
                                            ])(eventArgs[0]);
                                          }).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }
                                        },
                                        onLoadingChange: async (
                                          ...eventArgs: any
                                        ) => {
                                          ((...eventArgs) => {
                                            generateStateOnChangeProp($state, [
                                              "editItem",
                                              __plasmic_idx_0,
                                              __plasmic_idx_1,
                                              "loading"
                                            ])(eventArgs[0]);
                                          }).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }
                                        },
                                        size: "compact"
                                      };

                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "editItem[][].color",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) => "clear"
                                          },
                                          {
                                            name: "editItem[][].loading",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) => undefined
                                          },
                                          {
                                            name: "editItem[][].load",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) => false
                                          }
                                        ],
                                        [__plasmic_idx_0, __plasmic_idx_1]
                                      );
                                      return (
                                        <Button
                                          data-plasmic-name={"editItem"}
                                          data-plasmic-override={
                                            overrides.editItem
                                          }
                                          {...child$Props}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__nUlYa
                                            )}
                                          >
                                            {"\u270e"}
                                          </div>
                                        </Button>
                                      );
                                    })()
                                  : null}
                              </div>
                              {(
                                hasVariant($state, "slide", "_1")
                                  ? (() => {
                                      try {
                                        return (() => {
                                          const datesStr =
                                            currentItem.dates || "[]";
                                          const parsed = JSON.parse(
                                            datesStr || "[]"
                                          );
                                          return parsed.length > 0;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : true
                              )
                                ? (() => {
                                    const child$Props = {
                                      "aria-label": "Switchbest",
                                      children: null,
                                      className: classNames(
                                        "__wab_instance",
                                        sty.switchSetting,
                                        {
                                          [sty.switchSettingadd]: hasVariant(
                                            $state,
                                            "add",
                                            "add"
                                          ),
                                          [sty.switchSettingslide__1]:
                                            hasVariant($state, "slide", "_1")
                                        }
                                      ),
                                      data:
                                        generateStateValueProp($state, [
                                          "switchSetting",
                                          __plasmic_idx_0,
                                          __plasmic_idx_1,
                                          "data"
                                        ]) ?? false,
                                      isChecked:
                                        generateStateValueProp($state, [
                                          "switchSetting",
                                          __plasmic_idx_0,
                                          __plasmic_idx_1,
                                          "isChecked"
                                        ]) ?? false,
                                      name: "Switchbest",
                                      onChange: async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "switchSetting",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "isChecked"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }

                                        (async isChecked => {
                                          const $steps = {};

                                          $steps["runCode"] = false
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return ($state.switchSetting[
                                                      dayIndex
                                                    ][currentIndex].isChecked =
                                                      false);
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] =
                                              await $steps["runCode"];
                                          }

                                          $steps["add"] = !currentItem.id
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "POST",
                                                    "https://n8n.staas.ir/webhook/user/task/add",
                                                    undefined,
                                                    (() => {
                                                      try {
                                                        return (() => {
                                                          currentItem.liomId =
                                                            $props.manId;
                                                          currentItem.active = 1;
                                                          currentItem.telegramId =
                                                            $props.telegramId;
                                                          currentItem.phoneNumber =
                                                            $props.phoneNumber;
                                                          let dates = [];
                                                          if (
                                                            currentItem.schedule_type ===
                                                            "everyYear"
                                                          ) {
                                                            const parsedDates =
                                                              JSON.parse(
                                                                currentItem.dates
                                                              );
                                                            dates =
                                                              parsedDates.map(
                                                                dateStr => {
                                                                  let parts =
                                                                    dateStr.split(
                                                                      /[-/]/
                                                                    );
                                                                  parts[0] =
                                                                    "0000";
                                                                  return dateStr.includes(
                                                                    "-"
                                                                  )
                                                                    ? parts.join(
                                                                        "-"
                                                                      )
                                                                    : parts.join(
                                                                        "/"
                                                                      );
                                                                }
                                                              );
                                                            currentItem.dates =
                                                              JSON.stringify(
                                                                dates
                                                              );
                                                          }
                                                          currentItem.times =
                                                            JSON.stringify([
                                                              "09:00"
                                                            ]);
                                                          return currentItem;
                                                        })();
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })(),
                                                    undefined
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.apiRequest"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["add"] != null &&
                                            typeof $steps["add"] === "object" &&
                                            typeof $steps["add"].then ===
                                              "function"
                                          ) {
                                            $steps["add"] = await $steps["add"];
                                          }

                                          $steps["runCode3"] = (
                                            currentItem.id &&
                                            $state.switchSetting[dayIndex][
                                              currentIndex
                                            ].isChecked
                                              ? false
                                              : true
                                          )
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return (() => {
                                                      $state.snackbar.opendialog = true;
                                                      $state.snackbar.data =
                                                        currentItem;
                                                      return ($state.switchSetting[
                                                        dayIndex
                                                      ][
                                                        currentIndex
                                                      ].isChecked = true);
                                                    })();
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode3"] != null &&
                                            typeof $steps["runCode3"] ===
                                              "object" &&
                                            typeof $steps["runCode3"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode3"] =
                                              await $steps["runCode3"];
                                          }

                                          $steps["remove"] = (
                                            currentItem.id &&
                                            $state.switchSetting[dayIndex][
                                              currentIndex
                                            ].isChecked
                                              ? true
                                              : false
                                          )
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "POST",
                                                    "https://n8n.staas.ir/webhook/user/task/edit",
                                                    undefined,
                                                    (() => {
                                                      try {
                                                        return {
                                                          id: currentItem.id,
                                                          active: $state
                                                            .switchSetting[
                                                            dayIndex
                                                          ][currentIndex]
                                                            .isChecked
                                                            ? true
                                                            : false
                                                        };
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })(),
                                                    undefined
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.apiRequest"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["remove"] != null &&
                                            typeof $steps["remove"] ===
                                              "object" &&
                                            typeof $steps["remove"].then ===
                                              "function"
                                          ) {
                                            $steps["remove"] =
                                              await $steps["remove"];
                                          }

                                          $steps["runCode2"] =
                                            $steps.add?.data?.success == true
                                              ? (() => {
                                                  const actionArgs = {
                                                    customFunction:
                                                      async () => {
                                                        return (currentItem.id =
                                                          $steps.add.data.result);
                                                      }
                                                  };
                                                  return (({
                                                    customFunction
                                                  }) => {
                                                    return customFunction();
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["runCode2"] != null &&
                                            typeof $steps["runCode2"] ===
                                              "object" &&
                                            typeof $steps["runCode2"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode2"] =
                                              await $steps["runCode2"];
                                          }

                                          $steps["runCode4"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return ($state.refresh += 1);
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode4"] != null &&
                                            typeof $steps["runCode4"] ===
                                              "object" &&
                                            typeof $steps["runCode4"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode4"] =
                                              await $steps["runCode4"];
                                          }
                                        }).apply(null, eventArgs);
                                      },
                                      onDataChange: async (
                                        ...eventArgs: any
                                      ) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "switchSetting",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "data"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }
                                    };

                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "switchSetting[][].isChecked",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) =>
                                            (() => {
                                              try {
                                                return currentItem.active;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()
                                        },
                                        {
                                          name: "switchSetting[][].data",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => ({})
                                        }
                                      ],
                                      [__plasmic_idx_0, __plasmic_idx_1]
                                    );
                                    return (
                                      <Switchbest
                                        data-plasmic-name={"switchSetting"}
                                        data-plasmic-override={
                                          overrides.switchSetting
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()
                                : null}
                              {(() => {
                                try {
                                  return (() => {
                                    const datesStr = currentItem.dates || "[]";
                                    const parsed = JSON.parse(datesStr || "[]");
                                    return (
                                      parsed.length == 0 &&
                                      currentItem.id == null
                                    );
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                                ? (() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.button2,
                                        {
                                          [sty.button2slide__1]: hasVariant(
                                            $state,
                                            "slide",
                                            "_1"
                                          )
                                        }
                                      ),
                                      color: generateStateValueProp($state, [
                                        "button2",
                                        __plasmic_idx_0,
                                        __plasmic_idx_1,
                                        "color"
                                      ]),
                                      load: generateStateValueProp($state, [
                                        "button2",
                                        __plasmic_idx_0,
                                        __plasmic_idx_1,
                                        "load"
                                      ]),
                                      loading: generateStateValueProp($state, [
                                        "button2",
                                        __plasmic_idx_0,
                                        __plasmic_idx_1,
                                        "loading"
                                      ]),
                                      onClick: async event => {
                                        const $steps = {};

                                        $steps["updateSelect2"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["select2"]
                                                },
                                                operation: 0,
                                                value: currentItem
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateSelect2"] != null &&
                                          typeof $steps["updateSelect2"] ===
                                            "object" &&
                                          typeof $steps["updateSelect2"]
                                            .then === "function"
                                        ) {
                                          $steps["updateSelect2"] =
                                            await $steps["updateSelect2"];
                                        }

                                        $steps["updateDialogOpendialog"] =
                                          currentItem.text != "none"
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "dialog",
                                                      "opendialog"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: true
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updateDialogOpendialog"] !=
                                            null &&
                                          typeof $steps[
                                            "updateDialogOpendialog"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateDialogOpendialog"
                                          ].then === "function"
                                        ) {
                                          $steps["updateDialogOpendialog"] =
                                            await $steps[
                                              "updateDialogOpendialog"
                                            ];
                                        }

                                        $steps["invokeGlobalAction"] =
                                          currentItem.text == "none"
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "custom",
                                                    "\u0628\u0647 \u0632\u0648\u062f\u06cc \u062f\u0631 \u062f\u0633\u062a\u0631\u0633 \u062e\u0648\u0627\u0647\u062f \u0628\u0648\u062f.",
                                                    "bottom-center"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.showToast"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["invokeGlobalAction"] !=
                                            null &&
                                          typeof $steps[
                                            "invokeGlobalAction"
                                          ] === "object" &&
                                          typeof $steps["invokeGlobalAction"]
                                            .then === "function"
                                        ) {
                                          $steps["invokeGlobalAction"] =
                                            await $steps["invokeGlobalAction"];
                                        }

                                        $steps["runCode"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    try {
                                                      const dates = JSON.parse(
                                                        $state.select2.dates
                                                      );
                                                      function faToEnDigits(
                                                        str
                                                      ) {
                                                        return str.replace(
                                                          /[۰-۹]/g,
                                                          d =>
                                                            "۰۱۲۳۴۵۶۷۸۹".indexOf(
                                                              d
                                                            )
                                                        );
                                                      }
                                                      $state.date = dates.map(
                                                        m => {
                                                          const today =
                                                            new Date(m);
                                                          const f = today
                                                            .toISOString()
                                                            .split("T")[0];
                                                          const g =
                                                            new Intl.DateTimeFormat(
                                                              "fa-IR",
                                                              {
                                                                year: "numeric",
                                                                month: "long",
                                                                day: "numeric"
                                                              }
                                                            ).format(today);
                                                          const jy = Number(
                                                            faToEnDigits(
                                                              new Intl.DateTimeFormat(
                                                                "fa-IR",
                                                                {
                                                                  year: "numeric"
                                                                }
                                                              ).format(today)
                                                            )
                                                          );
                                                          const jm = Number(
                                                            faToEnDigits(
                                                              new Intl.DateTimeFormat(
                                                                "fa-IR",
                                                                {
                                                                  month:
                                                                    "numeric"
                                                                }
                                                              ).format(today)
                                                            )
                                                          );
                                                          const jd = Number(
                                                            faToEnDigits(
                                                              new Intl.DateTimeFormat(
                                                                "fa-IR",
                                                                {
                                                                  day: "numeric"
                                                                }
                                                              ).format(today)
                                                            )
                                                          );
                                                          return {
                                                            start: {
                                                              f,
                                                              g,
                                                              year: jy,
                                                              month: jm,
                                                              day: jd
                                                            }
                                                          };
                                                        }
                                                      );
                                                    } catch {
                                                      $state.date = [];
                                                    }
                                                    try {
                                                      $state.week = JSON.parse(
                                                        currentItem.weekdays
                                                      );
                                                    } catch {}
                                                    try {
                                                      function formatTimeString(
                                                        value
                                                      ) {
                                                        if (!value)
                                                          return ["0", "0"];

                                                        return value.split(":");
                                                      }
                                                      const times = JSON.parse(
                                                        $state.select2.times
                                                      );
                                                      $state.time2 = times.map(
                                                        t => {
                                                          const [hh, mm] =
                                                            formatTimeString(t);
                                                          return {
                                                            hour: parseInt(hh),
                                                            minute: parseInt(mm)
                                                          };
                                                        }
                                                      );
                                                    } catch {
                                                      $state.time2 = [];
                                                    }
                                                    try {
                                                      function arraysEqualIgnoreOrder(
                                                        a,
                                                        b
                                                      ) {
                                                        if (
                                                          a.length !== b.length
                                                        )
                                                          return false;
                                                        return [...a]
                                                          .sort()
                                                          .every(
                                                            (val, index) =>
                                                              val ===
                                                              [...b].sort()[
                                                                index
                                                              ]
                                                          );
                                                      }
                                                      if (
                                                        $state.week.length === 0
                                                      ) {
                                                        return ($state.repead.selected =
                                                          "once");
                                                      } else if (
                                                        arraysEqualIgnoreOrder(
                                                          $state.week,
                                                          [
                                                            "saturday",
                                                            "sunday",
                                                            "monday",
                                                            "tuesday",
                                                            "wednesday",
                                                            "thursday",
                                                            "friday"
                                                          ]
                                                        )
                                                      ) {
                                                        return ($state.repead.selected =
                                                          "daily");
                                                      } else if (
                                                        arraysEqualIgnoreOrder(
                                                          $state.week,
                                                          [
                                                            "saturday",
                                                            "sunday",
                                                            "monday",
                                                            "tuesday",
                                                            "wednesday"
                                                          ]
                                                        )
                                                      ) {
                                                        return ($state.repead.selected =
                                                          "sat_to_wed");
                                                      } else {
                                                        return ($state.repead.selected =
                                                          "custom");
                                                      }
                                                    } catch {
                                                      return ($state.week = []);
                                                    }
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] =
                                            await $steps["runCode"];
                                        }
                                      },
                                      onColorChange: async (
                                        ...eventArgs: any
                                      ) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "button2",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "color"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      },
                                      onLoadChange: async (
                                        ...eventArgs: any
                                      ) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "button2",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "load"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      },
                                      onLoadingChange: async (
                                        ...eventArgs: any
                                      ) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "button2",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "loading"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      },
                                      size: "minimal"
                                    };

                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "button2[][].color",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => undefined
                                        },
                                        {
                                          name: "button2[][].loading",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => undefined
                                        },
                                        {
                                          name: "button2[][].load",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => false
                                        }
                                      ],
                                      [__plasmic_idx_0, __plasmic_idx_1]
                                    );
                                    return (
                                      <Button
                                        data-plasmic-name={"button2"}
                                        data-plasmic-override={
                                          overrides.button2
                                        }
                                        {...child$Props}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__lyni
                                          )}
                                        >
                                          {
                                            "\u062b\u0628\u062a \u062a\u0627\u0631\u06cc\u062e"
                                          }
                                        </div>
                                      </Button>
                                    );
                                  })()
                                : null}
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              );
            })}
            <div
              className={classNames(projectcss.all, sty.freeBox__s8QQw, {
                [sty.freeBoxslide__1__s8QQwedcqc]: hasVariant(
                  $state,
                  "slide",
                  "_1"
                )
              })}
              id={"shadowBottom"}
            />
          </div>
        ) : null}
        {(
          hasVariant($state, "add", "add")
            ? (() => {
                try {
                  return $props.data.length < 2;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__mO9Un, {
              [sty.freeBoxadd__mO9UNuWxSg]: hasVariant($state, "add", "add")
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__t3Yev)}>
              <Checkbox
                data-plasmic-name={"checkbox4"}
                data-plasmic-override={overrides.checkbox4}
                className={classNames("__wab_instance", sty.checkbox4)}
                isChecked={
                  generateStateValueProp($state, ["checkbox4", "isChecked"]) ??
                  false
                }
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "checkbox4",
                      "isChecked"
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              />

              <div className={classNames(projectcss.all, sty.freeBox__cYFhI)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__x3Eya)}
                  onClick={async event => {
                    const $steps = {};
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jY9Mk
                    )}
                  >
                    {"\u0639\u0646\u0648\u0627\u0646 "}
                  </div>
                  <input
                    data-plasmic-name={"textbox2"}
                    data-plasmic-override={overrides.textbox2}
                    className={classNames(
                      projectcss.all,
                      projectcss.input,
                      sty.textbox2
                    )}
                    id={"htmltitleSetting"}
                    onChange={async (...eventArgs: any) => {
                      (e => {
                        generateStateOnChangeProp($state, [
                          "textbox2",
                          "value"
                        ])(e.target.value);
                      }).apply(null, eventArgs);

                      (async event => {
                        const $steps = {};

                        $steps["updateTitle"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["title"]
                                },
                                operation: 0,
                                value:
                                  window.document.getElementById(
                                    "htmltitleSetting"
                                  ).value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTitle"] != null &&
                          typeof $steps["updateTitle"] === "object" &&
                          typeof $steps["updateTitle"].then === "function"
                        ) {
                          $steps["updateTitle"] = await $steps["updateTitle"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      "\u0639\u0646\u0648\u0627\u0646 \u0631\u0648\u06cc\u062f\u0627\u062f"
                    }
                    ref={ref => {
                      $refs["textbox2"] = ref;
                    }}
                    type={"text"}
                    value={
                      generateStateValueProp($state, ["textbox2", "value"]) ??
                      ""
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__suTa)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qPexR
                    )}
                  >
                    {"\u0646\u0648\u0639 "}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__cdKx7)}>
                  {(() => {
                    try {
                      return $state.select2.schedule_type != "everyDay";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___15D21
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cDh6F
                        )}
                      >
                        <Icon345Icon
                          className={classNames(projectcss.all, sty.svg__hgdYy)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6E6V6
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  let text;
                                  if ($state.date.length < 2) {
                                    return (text = "تاریخ یادآوری");
                                  } else {
                                    return (text = "تاریخ‌ها");
                                  }
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u062a\u0627\u0631\u06cc\u062e \u0634\u0631\u0648\u0639 ";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rwErL
                          )}
                          id={``}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        $state.dateIndex = -1;
                                        $state.dateDiolog.opendialog = true;
                                        return ($state.dateType = "start");
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__z36Yr
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cwoK6
                              )}
                            >
                              <Icon49Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__uL0Ym
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__l1J1O
                                )}
                              >
                                {
                                  "\u0627\u0641\u0632\u0648\u062f\u0646 \u062a\u0627\u0631\u06cc\u062e"
                                }
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      {(() => {
                        try {
                          return $state.date.length > 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4YVc3
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $state.date;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__i5Hdh
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__q5AN
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateDateIndex"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["dateIndex"]
                                            },
                                            operation: 0,
                                            value: currentIndex
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDateIndex"] != null &&
                                      typeof $steps["updateDateIndex"] ===
                                        "object" &&
                                      typeof $steps["updateDateIndex"].then ===
                                        "function"
                                    ) {
                                      $steps["updateDateIndex"] =
                                        await $steps["updateDateIndex"];
                                    }

                                    $steps["updateDateDiologOpendialog"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "dateDiolog",
                                                "opendialog"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDateDiologOpendialog"] !=
                                        null &&
                                      typeof $steps[
                                        "updateDateDiologOpendialog"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateDateDiologOpendialog"
                                      ].then === "function"
                                    ) {
                                      $steps["updateDateDiologOpendialog"] =
                                        await $steps[
                                          "updateDateDiologOpendialog"
                                        ];
                                    }
                                  }}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__yPzho
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return `${currentItem.start.g.slice(0, -4)} هر سال`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 1404/1/1";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                                <Icon306Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__iYQdG
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["runCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return $state.date.splice(
                                                currentIndex,
                                                1
                                              );
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runCode"] != null &&
                                      typeof $steps["runCode"] === "object" &&
                                      typeof $steps["runCode"].then ===
                                        "function"
                                    ) {
                                      $steps["runCode"] =
                                        await $steps["runCode"];
                                    }
                                  }}
                                  role={"img"}
                                />
                              </div>
                            );
                          })}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.select2.text == "occasion";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kbflv)}
                    />
                  ) : null}
                </div>
                {(() => {
                  try {
                    return $state.select2.schedule_type == "everyDay";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jraEf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4Amzs
                      )}
                    >
                      <Icon344Icon
                        className={classNames(projectcss.all, sty.svg__dljxw)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pQjjk
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateDateType"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dateType"]
                                  },
                                  operation: 0,
                                  value: "end"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDateType"] != null &&
                            typeof $steps["updateDateType"] === "object" &&
                            typeof $steps["updateDateType"].then === "function"
                          ) {
                            $steps["updateDateType"] =
                              await $steps["updateDateType"];
                          }

                          $steps["updateDialog2Opendialog"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dateDiolog", "opendialog"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDialog2Opendialog"] != null &&
                            typeof $steps["updateDialog2Opendialog"] ===
                              "object" &&
                            typeof $steps["updateDialog2Opendialog"].then ===
                              "function"
                          ) {
                            $steps["updateDialog2Opendialog"] =
                              await $steps["updateDialog2Opendialog"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lQbw
                          )}
                        >
                          <div
                            className={projectcss.__wab_expr_html_text}
                            dangerouslySetInnerHTML={{
                              __html: (() => {
                                try {
                                  return $state.finishDate.g
                                    ? "تاریخ پایان"
                                    : 'تاریخ پایان <span style="font-size:0.85em; color:#888;">(اختیاری)</span>';
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()
                            }}
                          />
                        </div>
                        {(() => {
                          try {
                            return $state.finishDate.g;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hpyB8
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.finishDate.g;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 1404/1/1";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return !$state.finishDate.g;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hmltp
                            )}
                          >
                            <Icon49Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__vtfCr
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6PZdU
                              )}
                            >
                              {
                                "\u0627\u0641\u0632\u0648\u062f\u0646 \u062a\u0627\u0631\u06cc\u062e"
                              }
                            </div>
                          </div>
                        ) : null}
                      </div>
                      {(() => {
                        try {
                          return $state.finishDate.g ? true : false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <XIcon
                          className={classNames(projectcss.all, sty.svg__pdFBe)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return ($state.finishDate = {});
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                          role={"img"}
                        />
                      ) : null}
                    </div>
                  </div>
                ) : null}
                <div
                  className={classNames(projectcss.all, sty.freeBox___4EYIf)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1R4Yc)}
                  >
                    <ClockIcon
                      className={classNames(projectcss.all, sty.svg__rRo4)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8FKly
                      )}
                    >
                      {
                        "\u0632\u0645\u0627\u0646 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc"
                      }
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__g28SP)}
                      id={``}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateTimeIndex"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["timeIndex"]
                                },
                                operation: 0,
                                value: -1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTimeIndex"] != null &&
                          typeof $steps["updateTimeIndex"] === "object" &&
                          typeof $steps["updateTimeIndex"].then === "function"
                        ) {
                          $steps["updateTimeIndex"] =
                            await $steps["updateTimeIndex"];
                        }

                        $steps["updateDialog2Opendialog"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["time", "opendialog"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialog2Opendialog"] != null &&
                          typeof $steps["updateDialog2Opendialog"] ===
                            "object" &&
                          typeof $steps["updateDialog2Opendialog"].then ===
                            "function"
                        ) {
                          $steps["updateDialog2Opendialog"] =
                            await $steps["updateDialog2Opendialog"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aI5RT
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__l3JOn
                          )}
                        >
                          <Icon49Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fLRxh
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mSkEe
                            )}
                          >
                            {
                              "\u0627\u0641\u0632\u0648\u062f\u0646 \u0632\u0645\u0627\u0646"
                            }
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  {(() => {
                    try {
                      return $state.time2.length > 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xcCza)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.time2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pUvms
                            )}
                            key={currentIndex}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jL5LZ
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateTimeIndex"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["timeIndex"]
                                        },
                                        operation: 0,
                                        value: currentIndex
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateTimeIndex"] != null &&
                                  typeof $steps["updateTimeIndex"] ===
                                    "object" &&
                                  typeof $steps["updateTimeIndex"].then ===
                                    "function"
                                ) {
                                  $steps["updateTimeIndex"] =
                                    await $steps["updateTimeIndex"];
                                }

                                $steps["updateTimeOpendialog"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["time", "opendialog"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateTimeOpendialog"] != null &&
                                  typeof $steps["updateTimeOpendialog"] ===
                                    "object" &&
                                  typeof $steps["updateTimeOpendialog"].then ===
                                    "function"
                                ) {
                                  $steps["updateTimeOpendialog"] =
                                    await $steps["updateTimeOpendialog"];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lvMlk
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return `${String(currentItem.minute).padStart(2, "0")} : ${String(currentItem.hour).padStart(2, "0")}`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644 1404/1/1";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <Icon306Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qzhDx
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return $state.time2.splice(
                                            currentIndex,
                                            1
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }}
                              role={"img"}
                            />
                          </div>
                        );
                      })}
                    </div>
                  ) : null}
                </div>
                {(() => {
                  try {
                    return (() => {
                      try {
                        return $state.reminderCategory2.data.type
                          .flatMap(i => i.items)
                          .filter(a => a.type === $state.select2.type)[0]
                          .tag.includes("repead");
                      } catch {
                        return false;
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jWad6)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qJu1U)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ytDuK
                        )}
                      >
                        <Icon346Icon
                          className={classNames(projectcss.all, sty.svg__brw44)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jKpas
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return ($state.weekDays.opendialog = true);
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wkqtw
                            )}
                          >
                            {
                              "\u062a\u06a9\u0631\u0627\u0631 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nWydo
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const weekday = [
                                      {
                                        label: "شنبه",
                                        value: "saturday"
                                      },
                                      {
                                        label: "یکشنبه",
                                        value: "sunday"
                                      },
                                      {
                                        label: "دوشنبه",
                                        value: "monday"
                                      },
                                      {
                                        label: "سه‌شنبه",
                                        value: "tuesday"
                                      },
                                      {
                                        label: "چهارشنبه",
                                        value: "wednesday"
                                      },
                                      {
                                        label: "پنجشنبه",
                                        value: "thursday"
                                      },
                                      {
                                        label: "جمعه",
                                        value: "friday"
                                      }
                                    ];

                                    const selected = weekday.filter(i =>
                                      $state.week.includes(i.value)
                                    );
                                    const result =
                                      selected.length === weekday.length
                                        ? "هر روز هفته"
                                        : selected
                                            .map(i => i.label)
                                            .join("\u060C ");
                                    return result;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u062a\u06a9\u0631\u0627\u0631";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          {(() => {
                            try {
                              return $state.week.length == 0;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___8RfiV
                              )}
                            >
                              <Icon49Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__uO0S
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__q8KJb
                                )}
                              >
                                {
                                  "\u062a\u0646\u0638\u06cc\u0645 \u062a\u06a9\u0631\u0627\u0631"
                                }
                              </div>
                            </div>
                          ) : null}
                        </div>
                        {(() => {
                          try {
                            return $state.week.length > 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Icon22Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__uUUU
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return ($state.week = []);
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eVgaw
                        )}
                      >
                        <Repead
                          data-plasmic-name={"repead2"}
                          data-plasmic-override={overrides.repead2}
                          className={classNames("__wab_instance", sty.repead2)}
                          click={async () => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        if (
                                          $state.repead2.selected === "daily"
                                        ) {
                                          return ($state.week = [
                                            "saturday",
                                            "sunday",
                                            "monday",
                                            "tuesday",
                                            "wednesday",
                                            "thursday",
                                            "friday"
                                          ]);
                                        } else if (
                                          $state.repead2.selected ===
                                          "sat_to_wed"
                                        ) {
                                          return ($state.week = [
                                            "saturday",
                                            "sunday",
                                            "monday",
                                            "tuesday",
                                            "wednesday"
                                          ]);
                                        } else if (
                                          $state.repead2.selected === "once"
                                        ) {
                                          return ($state.week = []);
                                        }
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                          data={[
                            {
                              label: "\u0633\u0627\u0644\u0627\u0646\u0647",
                              value: "once"
                            },
                            {
                              label: "\u0647\u0631 \u0631\u0648\u0632",
                              value: "daily",
                              days: [
                                "\u0634\u0646\u0628\u0647",
                                "\u06cc\u06a9\u0634\u0646\u0628\u0647",
                                "\u062f\u0648\u0634\u0646\u0628\u0647",
                                "\u0633\u0647\u200c\u0634\u0646\u0628\u0647",
                                "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647",
                                "\u067e\u0646\u062c\u0634\u0646\u0628\u0647",
                                "\u062c\u0645\u0639\u0647"
                              ]
                            },
                            {
                              label:
                                "\u0634\u0646\u0628\u0647 \u062a\u0627 \u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647",
                              value: "sat_to_wed",
                              days: [
                                "\u0634\u0646\u0628\u0647",
                                "\u06cc\u06a9\u0634\u0646\u0628\u0647",
                                "\u062f\u0648\u0634\u0646\u0628\u0647",
                                "\u0633\u0647\u200c\u0634\u0646\u0628\u0647",
                                "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647"
                              ]
                            }
                          ]}
                          onSelectedChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "repead2",
                              "selected"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          selected={generateStateValueProp($state, [
                            "repead2",
                            "selected"
                          ])}
                        />

                        <RadioGrop
                          className={classNames(
                            "__wab_instance",
                            sty.radioGrop__bSu4E
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = false
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        if (
                                          $state.repead2.selected === "daily"
                                        ) {
                                          return ($state.week = [
                                            "saturday",
                                            "sunday",
                                            "monday",
                                            "tuesday",
                                            "wednesday",
                                            "thursday",
                                            "friday"
                                          ]);
                                        } else if (
                                          $state.repead2.selected ===
                                          "sat_to_wed"
                                        ) {
                                          return ($state.week = [
                                            "saturday",
                                            "sunday",
                                            "monday",
                                            "tuesday",
                                            "wednesday"
                                          ]);
                                        } else if (
                                          $state.repead2.selected === "once"
                                        ) {
                                          return ($state.week = []);
                                        }
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["updateDialog3Opendialog"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["weekDays", "opendialog"]
                                    },
                                    operation: 4
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(objRoot, variablePath, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDialog3Opendialog"] != null &&
                              typeof $steps["updateDialog3Opendialog"] ===
                                "object" &&
                              typeof $steps["updateDialog3Opendialog"].then ===
                                "function"
                            ) {
                              $steps["updateDialog3Opendialog"] =
                                await $steps["updateDialog3Opendialog"];
                            }
                          }}
                          selected={(() => {
                            try {
                              return $state.repead2.selected == "custom";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__orRsQ
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qYTjg
                              )}
                            >
                              {"\u0633\u0641\u0627\u0631\u0634\u06cc"}
                            </div>
                            <ChevronLeftIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__z8InW
                              )}
                              role={"img"}
                            />
                          </div>
                        </RadioGrop>
                      </div>
                    </div>
                  </div>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__iVyFp)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1AbRk
                    )}
                  >
                    {
                      "\u0627\u0632 \u0686\u0647 \u0637\u0631\u06cc\u0642\u06cc \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u0627\u0646\u062c\u0627\u0645 \u0634\u0648\u062f\u061f"
                    }
                  </div>
                  {(() => {
                    const child$Props = {
                      accessclicke: async () => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "custom",
                                  "\u0628\u0647\u200c\u0632\u0648\u062f\u06cc \u0627\u06cc\u0646 \u0642\u0627\u0628\u0644\u06cc\u062a \u0641\u0639\u0627\u0644 \u0645\u06cc\u200c\u0634\u0648\u062f!",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] =
                            await $steps["invokeGlobalAction"];
                        }
                      },
                      className: classNames(
                        "__wab_instance",
                        sty.radioGroupLiom2
                      ),
                      list: generateStateValueProp($state, [
                        "radioGroupLiom2",
                        "list"
                      ]),
                      moulty: true,
                      onListChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "radioGroupLiom2",
                          "list"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      onSelectedChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "radioGroupLiom2",
                          "selected"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      onSelectsChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "radioGroupLiom2",
                          "selects"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      selected: generateStateValueProp($state, [
                        "radioGroupLiom2",
                        "selected"
                      ]),
                      selects: generateStateValueProp($state, [
                        "radioGroupLiom2",
                        "selects"
                      ]),
                      size: "small",
                      unnamedVariant: true
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "radioGroupLiom2.selects",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return (() => {
                                  try {
                                    return JSON.parse($state.select2.channels);
                                  } catch {
                                    return [];
                                  }
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                        }
                      ],
                      []
                    );
                    return (
                      <RadioGroupLiom
                        data-plasmic-name={"radioGroupLiom2"}
                        data-plasmic-override={overrides.radioGroupLiom2}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__arirb)}>
                <section
                  className={classNames(projectcss.all, sty.section__zlGg1)}
                >
                  <Button
                    data-plasmic-name={"button12"}
                    data-plasmic-override={overrides.button12}
                    className={classNames("__wab_instance", sty.button12)}
                    color={generateStateValueProp($state, [
                      "button12",
                      "color"
                    ])}
                    load={generateStateValueProp($state, ["button12", "load"])}
                    loading={generateStateValueProp($state, [
                      "button12",
                      "loading"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateButton5Loading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["button12", "loading"]
                              },
                              operation: 4,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateButton5Loading"] != null &&
                        typeof $steps["updateButton5Loading"] === "object" &&
                        typeof $steps["updateButton5Loading"].then ===
                          "function"
                      ) {
                        $steps["updateButton5Loading"] =
                          await $steps["updateButton5Loading"];
                      }

                      $steps["insert"] = !$state.select2.id
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/user/task/add",
                                undefined,
                                (() => {
                                  try {
                                    return (() => {
                                      $state.select2.weekdays = $state.week
                                        ?.length
                                        ? JSON.stringify($state.week)
                                        : undefined;
                                      if ($state.date.length > 0) {
                                        let dates = $state.date.map(
                                          i => i.start.f
                                        );
                                        if (
                                          $state.select2.schedule_type ===
                                          "everyYear"
                                        ) {
                                          dates = $state.date.map(i => {
                                            let parts = i.start.f.split(/[-/]/);
                                            parts[0] = "0000";
                                            return i.start.f.includes("-")
                                              ? parts.join("-")
                                              : parts.join("/");
                                          });
                                        }
                                        $state.select2.dates =
                                          JSON.stringify(dates);
                                      } else {
                                        $state.select2.dates = undefined;
                                      }
                                      if ($state.finishDate?.f) {
                                        $state.select2.finishTime =
                                          $state.finishDate.f;
                                      } else {
                                        $state.select2.finishTime = undefined;
                                      }
                                      $state.select2.active = 1;
                                      $state.select2.times = JSON.stringify(
                                        $state.time2.map(
                                          t =>
                                            `${String(t.hour).padStart(2, "0")}:${String(t.minute).padStart(2, "0")}`
                                        )
                                      );
                                      $state.select2.name = $state.title;
                                      $state.select2.channels = JSON.stringify(
                                        $state.radioGroupLiom2.selects
                                      );
                                      return $state.select2;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["insert"] != null &&
                        typeof $steps["insert"] === "object" &&
                        typeof $steps["insert"].then === "function"
                      ) {
                        $steps["insert"] = await $steps["insert"];
                      }

                      $steps["edit"] = $state.select2.id
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/user/task/edit",
                                undefined,
                                (() => {
                                  try {
                                    return (() => {
                                      try {
                                        if (
                                          Array.isArray($state.week) &&
                                          $state.week.length > 0
                                        ) {
                                          $state.select2.weekdays =
                                            JSON.stringify($state.week);
                                        } else {
                                          $state.select2.weekdays = undefined;
                                        }
                                        if (
                                          Array.isArray($state.date) &&
                                          $state.date.length > 0
                                        ) {
                                          let dates = $state.date
                                            .map(i => i?.start?.f || "")
                                            .filter(Boolean);
                                          if (
                                            $state.select2.schedule_type ===
                                            "everyYear"
                                          ) {
                                            dates = dates.map(f => {
                                              let parts = f.split(/[-/]/);
                                              if (parts.length > 1)
                                                parts[0] = "0000";
                                              return f.includes("-")
                                                ? parts.join("-")
                                                : parts.join("/");
                                            });
                                          }
                                          $state.select2.dates =
                                            JSON.stringify(dates);
                                        } else {
                                          $state.select2.dates = undefined;
                                        }
                                        $state.select2.finishTime =
                                          $state?.finishDate?.f || undefined;
                                        $state.select2.active = 1;
                                        if (
                                          Array.isArray($state.time2) &&
                                          $state.time2.length > 0
                                        ) {
                                          $state.select2.times = JSON.stringify(
                                            $state.time2.map(
                                              t =>
                                                `${String(t?.hour ?? 0).padStart(2, "0")}:${String(t?.minute ?? 0).padStart(2, "0")}`
                                            )
                                          );
                                        } else {
                                          $state.select2.times = JSON.stringify(
                                            []
                                          );
                                        }
                                        $state.select2.name =
                                          $state?.title ?? "";
                                        const selects =
                                          $state.radioGroupLiom2?.selects ?? [];
                                        $state.select2.channels =
                                          JSON.stringify(selects);
                                      } catch (err) {
                                        $state.select2 = {
                                          weekdays: undefined,
                                          dates: undefined,
                                          finishTime: undefined,
                                          active: 0,
                                          times: "[]",
                                          name: "",
                                          channels: "[]"
                                        };
                                      }
                                      return $state.select2;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["edit"] != null &&
                        typeof $steps["edit"] === "object" &&
                        typeof $steps["edit"].then === "function"
                      ) {
                        $steps["edit"] = await $steps["edit"];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.insert?.data?.success == true ||
                        $steps.edit?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                                  "bottom-center",
                                  2000
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] =
                          await $steps["invokeGlobalAction2"];
                      }

                      $steps["runCode"] =
                        $steps.insert?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.dialog.opendialog = false;
                                    $state.dialog2.opendialog = false;
                                    return ($state.select2.id =
                                      $steps.insert.data.result);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["runCode3"] =
                        $steps.edit?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.dialog.opendialog = false;
                                    return ($state.dialog2.opendialog = false);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode3"] != null &&
                        typeof $steps["runCode3"] === "object" &&
                        typeof $steps["runCode3"].then === "function"
                      ) {
                        $steps["runCode3"] = await $steps["runCode3"];
                      }

                      $steps["updateButton5Load2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["button12", "loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateButton5Load2"] != null &&
                        typeof $steps["updateButton5Load2"] === "object" &&
                        typeof $steps["updateButton5Load2"].then === "function"
                      ) {
                        $steps["updateButton5Load2"] =
                          await $steps["updateButton5Load2"];
                      }

                      $steps["runCode4"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return ($state.refresh += 1);
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode4"] != null &&
                        typeof $steps["runCode4"] === "object" &&
                        typeof $steps["runCode4"].then === "function"
                      ) {
                        $steps["runCode4"] = await $steps["runCode4"];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button12",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button12", "load"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button12",
                          "loading"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jwDX
                      )}
                    >
                      {
                        "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0630\u062e\u06cc\u0631\u0647"
                      }
                    </div>
                  </Button>
                </section>
              </div>
            </div>
          </div>
        ) : null}
      </div>
      <Snackbar
        data-plasmic-name={"snackbar"}
        data-plasmic-override={overrides.snackbar}
        className={classNames("__wab_instance", sty.snackbar)}
        data={generateStateValueProp($state, ["snackbar", "data"])}
        onDataChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["snackbar", "data"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onOpendialogChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["snackbar", "opendialog"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        opendialog={generateStateValueProp($state, ["snackbar", "opendialog"])}
        slot={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vKmuj
            )}
          >
            {
              "\u0645\u0637\u0645\u0626\u0646\u06cc \u0627\u0632 \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u0646\u061f"
            }
          </div>
        }
        slot2={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___4Yzc6
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (() => {
                    try {
                      var list = JSON.parse($state.snackbar.data.channels);
                    } catch {
                      var list = [];
                    }
                    var a = $state.chanels
                      .filter(i => list.includes(i.value))
                      .map(i => i.label)
                      .join(", ");
                    return `با غیرفعال کردن این یادآوری، ارسال یادآوری از طریق «${a}» غیرفعال می شود. اگه رویداد نیاز به تغییر داره، روی دکمه ویرایش کلیک کنید..
`;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0628\u0627 \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u0646\u060c \u062f\u06cc\u06af\u0647 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0631 \u0628\u062e\u0634 \u00ab\u0641\u0644\u0627\u0646 \u0641\u0644\u0627\u0646\u00bb \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0645\u06cc\u200c\u06a9\u0646\u06cc.\n\u0627\u06af\u0647 \u0631\u0648\u06cc\u062f\u0627\u062f \u0646\u06cc\u0627\u0632 \u0628\u0647 \u062a\u063a\u06cc\u06cc\u0631 \u062f\u0627\u0631\u0647\u060c \u0648\u06cc\u0631\u0627\u06cc\u0634\u0634 \u06a9\u0646.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        }
        type={"info"}
      >
        <div className={classNames(projectcss.all, sty.freeBox__hveNm)}>
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            color={generateStateValueProp($state, ["button", "color"])}
            load={generateStateValueProp($state, ["button", "load"])}
            loading={generateStateValueProp($state, ["button", "loading"])}
            onClick={async event => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://n8n.staas.ir/webhook/user/task/edit",
                        undefined,
                        (() => {
                          try {
                            return {
                              id: $state.snackbar.data.id,
                              active: false
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] =
                  await $steps["invokeGlobalAction"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return ($state.refresh += 1);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateSnackbarOpendialog"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["snackbar", "opendialog"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSnackbarOpendialog"] != null &&
                typeof $steps["updateSnackbarOpendialog"] === "object" &&
                typeof $steps["updateSnackbarOpendialog"].then === "function"
              ) {
                $steps["updateSnackbarOpendialog"] =
                  await $steps["updateSnackbarOpendialog"];
              }
            }}
            onColorChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button", "color"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onLoadChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button", "load"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onLoadingChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button", "loading"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            {
              "\u063a\u06cc\u0631 \u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc"
            }
          </Button>
          <Button
            data-plasmic-name={"button3"}
            data-plasmic-override={overrides.button3}
            className={classNames("__wab_instance", sty.button3)}
            color={generateStateValueProp($state, ["button3", "color"])}
            load={generateStateValueProp($state, ["button3", "load"])}
            loading={generateStateValueProp($state, ["button3", "loading"])}
            onClick={async event => {
              const $steps = {};

              $steps["updateSelect2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["select2"]
                      },
                      operation: 0,
                      value: $state.snackbar.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSelect2"] != null &&
                typeof $steps["updateSelect2"] === "object" &&
                typeof $steps["updateSelect2"].then === "function"
              ) {
                $steps["updateSelect2"] = await $steps["updateSelect2"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          try {
                            const dates = JSON.parse($state.select2.dates);
                            function faToEnDigits(str) {
                              return str.replace(/[۰-۹]/g, d =>
                                "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                              );
                            }
                            $state.date = dates.map(m => {
                              const today = new Date(m);
                              const f = today.toISOString().split("T")[0];
                              const g = new Intl.DateTimeFormat("fa-IR", {
                                year: "numeric",
                                month: "long",
                                day: "numeric"
                              }).format(today);
                              const jy = Number(
                                faToEnDigits(
                                  new Intl.DateTimeFormat("fa-IR", {
                                    year: "numeric"
                                  }).format(today)
                                )
                              );
                              const jm = Number(
                                faToEnDigits(
                                  new Intl.DateTimeFormat("fa-IR", {
                                    month: "numeric"
                                  }).format(today)
                                )
                              );
                              const jd = Number(
                                faToEnDigits(
                                  new Intl.DateTimeFormat("fa-IR", {
                                    day: "numeric"
                                  }).format(today)
                                )
                              );
                              return {
                                start: {
                                  f,
                                  g,
                                  year: jy,
                                  month: jm,
                                  day: jd
                                }
                              };
                            });
                          } catch {
                            $state.date = [];
                          }
                          try {
                            $state.week = JSON.parse($state.select2.weekdays);
                          } catch {}
                          try {
                            function formatTimeString(value) {
                              if (!value) return ["0", "0"];

                              return value.split(":");
                            }
                            const times = JSON.parse($state.select2.times);
                            $state.time2 = times.map(t => {
                              const [hh, mm] = formatTimeString(t);
                              return {
                                hour: parseInt(hh),
                                minute: parseInt(mm)
                              };
                            });
                          } catch {
                            $state.time2 = [];
                          }
                          try {
                            function arraysEqualIgnoreOrder(a, b) {
                              if (a.length !== b.length) return false;
                              return [...a]
                                .sort()
                                .every(
                                  (val, index) => val === [...b].sort()[index]
                                );
                            }
                            if ($state.week.length === 0) {
                              $state.repead.selected = "once";
                            } else if (
                              arraysEqualIgnoreOrder($state.week, [
                                "saturday",
                                "sunday",
                                "monday",
                                "tuesday",
                                "wednesday",
                                "thursday",
                                "friday"
                              ])
                            ) {
                              $state.repead.selected = "daily";
                            } else if (
                              arraysEqualIgnoreOrder($state.week, [
                                "saturday",
                                "sunday",
                                "monday",
                                "tuesday",
                                "wednesday"
                              ])
                            ) {
                              $state.repead.selected = "sat_to_wed";
                            } else {
                              $state.repead.selected = "custom";
                            }
                          } catch {
                            $state.week = [];
                          }
                          try {
                            const finish = $state.select2.finishTime;
                            if (finish) {
                              const today = new Date(finish);
                              function faToEnDigits(str) {
                                return str.replace(/[۰-۹]/g, d =>
                                  "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                                );
                              }
                              const f = today.toISOString().split("T")[0];
                              const g = new Intl.DateTimeFormat("fa-IR", {
                                year: "numeric",
                                month: "long",
                                day: "numeric"
                              }).format(today);
                              const jy = Number(
                                faToEnDigits(
                                  new Intl.DateTimeFormat("fa-IR", {
                                    year: "numeric"
                                  }).format(today)
                                )
                              );
                              const jm = Number(
                                faToEnDigits(
                                  new Intl.DateTimeFormat("fa-IR", {
                                    month: "numeric"
                                  }).format(today)
                                )
                              );
                              const jd = Number(
                                faToEnDigits(
                                  new Intl.DateTimeFormat("fa-IR", {
                                    day: "numeric"
                                  }).format(today)
                                )
                              );
                              return ($state.finishDate = {
                                f,
                                g,
                                year: jy,
                                month: jm,
                                day: jd
                              });
                            } else {
                              return ($state.finishDate = {});
                            }
                          } catch {
                            return ($state.finishDate = {});
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateDialogOpendialog"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog", "opendialog"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDialogOpendialog"] != null &&
                typeof $steps["updateDialogOpendialog"] === "object" &&
                typeof $steps["updateDialogOpendialog"].then === "function"
              ) {
                $steps["updateDialogOpendialog"] =
                  await $steps["updateDialogOpendialog"];
              }

              $steps["updateSnackbarOpendialog"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["snackbar", "opendialog"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSnackbarOpendialog"] != null &&
                typeof $steps["updateSnackbarOpendialog"] === "object" &&
                typeof $steps["updateSnackbarOpendialog"].then === "function"
              ) {
                $steps["updateSnackbarOpendialog"] =
                  await $steps["updateSnackbarOpendialog"];
              }
            }}
            onColorChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button3", "color"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onLoadChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button3", "load"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onLoadingChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button3", "loading"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            {"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
          </Button>
        </div>
      </Snackbar>
      <div
        data-plasmic-name={"pageselect"}
        data-plasmic-override={overrides.pageselect}
        className={classNames(projectcss.all, sty.pageselect)}
        id={"pageSelect"}
        onClick={async event => {
          const $steps = {};

          $steps["updateSelect2"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["select2"]
                  },
                  operation: 0,
                  value: (() => {
                    return {
                      liomId: $props.manId,
                      telegramId: $props.telegramId,
                      phoneNumber: $props.phoneNumber,
                      name: $state.pageSelect.type_fa,
                      text: $state.pageSelect.text || $state.pageSelect.type,
                      schedule_type: $state.pageSelect.schedule_type,
                      type: $state.pageSelect.type,
                      dates: $state.pageSelect.date
                        ? JSON.stringify([$state.pageSelect.date])
                        : "[]",
                      channels: '["notification","telegram"]',
                      times: "[]",
                      weekdays:
                        $state.pageSelect.schedule_type == "everyDay"
                          ? JSON.stringify([
                              "saturday",
                              "sunday",
                              "monday",
                              "tuesday",
                              "wednesday",
                              "thursday",
                              "friday"
                            ])
                          : null,
                      active: 1,
                      add: true
                    };
                  })()
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSelect2"] != null &&
            typeof $steps["updateSelect2"] === "object" &&
            typeof $steps["updateSelect2"].then === "function"
          ) {
            $steps["updateSelect2"] = await $steps["updateSelect2"];
          }

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      try {
                        const dates = JSON.parse($state.select2.dates);
                        function faToEnDigits(str) {
                          return str.replace(/[۰-۹]/g, d =>
                            "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                          );
                        }
                        $state.date = dates.map(m => {
                          const today = new Date(m);
                          const f = today.toISOString().split("T")[0];
                          const g = new Intl.DateTimeFormat("fa-IR", {
                            year: "numeric",
                            month: "long",
                            day: "numeric"
                          }).format(today);
                          const jy = Number(
                            faToEnDigits(
                              new Intl.DateTimeFormat("fa-IR", {
                                year: "numeric"
                              }).format(today)
                            )
                          );
                          const jm = Number(
                            faToEnDigits(
                              new Intl.DateTimeFormat("fa-IR", {
                                month: "numeric"
                              }).format(today)
                            )
                          );
                          const jd = Number(
                            faToEnDigits(
                              new Intl.DateTimeFormat("fa-IR", {
                                day: "numeric"
                              }).format(today)
                            )
                          );
                          return {
                            start: {
                              f,
                              g,
                              year: jy,
                              month: jm,
                              day: jd
                            }
                          };
                        });
                      } catch {
                        $state.date = [];
                      }
                      try {
                        $state.week = JSON.parse($state.select2.weekdays);
                      } catch {}
                      try {
                        function formatTimeString(value) {
                          if (!value) return ["0", "0"];

                          return value.split(":");
                        }
                        const times = JSON.parse($state.select2.times);
                        $state.time2 = times.map(t => {
                          const [hh, mm] = formatTimeString(t);
                          return {
                            hour: parseInt(hh),
                            minute: parseInt(mm)
                          };
                        });
                      } catch {
                        $state.time2 = [];
                      }
                      try {
                        function arraysEqualIgnoreOrder(a, b) {
                          if (a.length !== b.length) return false;
                          return [...a]
                            .sort()
                            .every(
                              (val, index) => val === [...b].sort()[index]
                            );
                        }
                        if ($state.week.length === 0) {
                          return ($state.repead.selected = "once");
                        } else if (
                          arraysEqualIgnoreOrder($state.week, [
                            "saturday",
                            "sunday",
                            "monday",
                            "tuesday",
                            "wednesday",
                            "thursday",
                            "friday"
                          ])
                        ) {
                          return ($state.repead.selected = "daily");
                        } else if (
                          arraysEqualIgnoreOrder($state.week, [
                            "saturday",
                            "sunday",
                            "monday",
                            "tuesday",
                            "wednesday"
                          ])
                        ) {
                          return ($state.repead.selected = "sat_to_wed");
                        } else {
                          return ($state.repead.selected = "custom");
                        }
                      } catch {
                        return ($state.week = []);
                      }
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLiom",
    "dialog",
    "checkbox2",
    "textbox",
    "repead",
    "radioGroupLiom",
    "button5",
    "button8",
    "dialog2",
    "reminderCategory2",
    "dateDiolog",
    "datePickers",
    "button4",
    "time",
    "pickers",
    "pickers2",
    "timePickerCustom2",
    "button6",
    "weekDays",
    "checkboxGroup",
    "checkbox",
    "button11",
    "slide2",
    "button9",
    "button10",
    "frame",
    "frame2",
    "button7",
    "todayMeeting",
    "frame26",
    "frame27",
    "frame28",
    "frame29",
    "frame30",
    "lineClomp",
    "lineClomp3",
    "lineClomp2",
    "editItem",
    "switchSetting",
    "button2",
    "checkbox4",
    "textbox2",
    "repead2",
    "radioGroupLiom2",
    "button12",
    "snackbar",
    "button",
    "button3",
    "pageselect"
  ],
  headerLiom: ["headerLiom"],
  dialog: [
    "dialog",
    "checkbox2",
    "textbox",
    "repead",
    "radioGroupLiom",
    "button5",
    "button8"
  ],
  checkbox2: ["checkbox2"],
  textbox: ["textbox"],
  repead: ["repead"],
  radioGroupLiom: ["radioGroupLiom"],
  button5: ["button5"],
  button8: ["button8"],
  dialog2: ["dialog2", "reminderCategory2"],
  reminderCategory2: ["reminderCategory2"],
  dateDiolog: ["dateDiolog", "datePickers", "button4"],
  datePickers: ["datePickers"],
  button4: ["button4"],
  time: ["time", "pickers", "pickers2", "timePickerCustom2", "button6"],
  pickers: ["pickers"],
  pickers2: ["pickers2"],
  timePickerCustom2: ["timePickerCustom2"],
  button6: ["button6"],
  weekDays: ["weekDays", "checkboxGroup", "checkbox", "button11"],
  checkboxGroup: ["checkboxGroup", "checkbox"],
  checkbox: ["checkbox"],
  button11: ["button11"],
  slide2: ["slide2", "button9", "button10"],
  button9: ["button9"],
  button10: ["button10"],
  frame: ["frame", "frame2", "button7"],
  frame2: ["frame2", "button7"],
  button7: ["button7"],
  todayMeeting: [
    "todayMeeting",
    "frame26",
    "frame27",
    "frame28",
    "frame29",
    "frame30",
    "lineClomp",
    "lineClomp3",
    "lineClomp2",
    "editItem",
    "switchSetting",
    "button2"
  ],
  frame26: [
    "frame26",
    "frame27",
    "frame28",
    "frame29",
    "frame30",
    "lineClomp",
    "lineClomp3",
    "lineClomp2",
    "editItem",
    "switchSetting",
    "button2"
  ],
  frame27: [
    "frame27",
    "frame28",
    "frame29",
    "frame30",
    "lineClomp",
    "lineClomp3",
    "lineClomp2",
    "editItem",
    "switchSetting",
    "button2"
  ],
  frame28: [
    "frame28",
    "frame29",
    "frame30",
    "lineClomp",
    "lineClomp3",
    "lineClomp2"
  ],
  frame29: ["frame29", "frame30", "lineClomp", "lineClomp3", "lineClomp2"],
  frame30: ["frame30", "lineClomp", "lineClomp3", "lineClomp2"],
  lineClomp: ["lineClomp"],
  lineClomp3: ["lineClomp3"],
  lineClomp2: ["lineClomp2"],
  editItem: ["editItem"],
  switchSetting: ["switchSetting"],
  button2: ["button2"],
  checkbox4: ["checkbox4"],
  textbox2: ["textbox2"],
  repead2: ["repead2"],
  radioGroupLiom2: ["radioGroupLiom2"],
  button12: ["button12"],
  snackbar: ["snackbar", "button", "button3"],
  button: ["button"],
  button3: ["button3"],
  pageselect: ["pageselect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLiom: typeof HeaderLiom;
  dialog: typeof Dialog;
  checkbox2: typeof Checkbox;
  textbox: "input";
  repead: typeof Repead;
  radioGroupLiom: typeof RadioGroupLiom;
  button5: typeof Button;
  button8: typeof Button;
  dialog2: typeof Dialog;
  reminderCategory2: typeof ReminderCategory;
  dateDiolog: typeof Dialog;
  datePickers: typeof DatePickers;
  button4: typeof Button;
  time: typeof Dialog;
  pickers: typeof Pickers;
  pickers2: typeof Pickers;
  timePickerCustom2: typeof TimePickerCustom;
  button6: typeof Button;
  weekDays: typeof Dialog;
  checkboxGroup: typeof CheckboxGroup;
  checkbox: typeof Checkbox;
  button11: typeof Button;
  slide2: "div";
  button9: typeof Button;
  button10: typeof Button;
  frame: "div";
  frame2: "div";
  button7: typeof Button;
  todayMeeting: "div";
  frame26: "div";
  frame27: "div";
  frame28: "div";
  frame29: "div";
  frame30: "div";
  lineClomp: typeof LineClomp;
  lineClomp3: typeof LineClomp;
  lineClomp2: typeof LineClomp;
  editItem: typeof Button;
  switchSetting: typeof Switchbest;
  button2: typeof Button;
  checkbox4: typeof Checkbox;
  textbox2: "input";
  repead2: typeof Repead;
  radioGroupLiom2: typeof RadioGroupLiom;
  button12: typeof Button;
  snackbar: typeof Snackbar;
  button: typeof Button;
  button3: typeof Button;
  pageselect: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReminderSetting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReminderSetting__VariantsArgs;
    args?: PlasmicReminderSetting__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicReminderSetting__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicReminderSetting__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReminderSetting__ArgProps,
          internalVariantPropNames: PlasmicReminderSetting__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReminderSetting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReminderSetting";
  } else {
    func.displayName = `PlasmicReminderSetting.${nodeName}`;
  }
  return func;
}

export const PlasmicReminderSetting = Object.assign(
  // Top-level PlasmicReminderSetting renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerLiom: makeNodeComponent("headerLiom"),
    dialog: makeNodeComponent("dialog"),
    checkbox2: makeNodeComponent("checkbox2"),
    textbox: makeNodeComponent("textbox"),
    repead: makeNodeComponent("repead"),
    radioGroupLiom: makeNodeComponent("radioGroupLiom"),
    button5: makeNodeComponent("button5"),
    button8: makeNodeComponent("button8"),
    dialog2: makeNodeComponent("dialog2"),
    reminderCategory2: makeNodeComponent("reminderCategory2"),
    dateDiolog: makeNodeComponent("dateDiolog"),
    datePickers: makeNodeComponent("datePickers"),
    button4: makeNodeComponent("button4"),
    time: makeNodeComponent("time"),
    pickers: makeNodeComponent("pickers"),
    pickers2: makeNodeComponent("pickers2"),
    timePickerCustom2: makeNodeComponent("timePickerCustom2"),
    button6: makeNodeComponent("button6"),
    weekDays: makeNodeComponent("weekDays"),
    checkboxGroup: makeNodeComponent("checkboxGroup"),
    checkbox: makeNodeComponent("checkbox"),
    button11: makeNodeComponent("button11"),
    slide2: makeNodeComponent("slide2"),
    button9: makeNodeComponent("button9"),
    button10: makeNodeComponent("button10"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    button7: makeNodeComponent("button7"),
    todayMeeting: makeNodeComponent("todayMeeting"),
    frame26: makeNodeComponent("frame26"),
    frame27: makeNodeComponent("frame27"),
    frame28: makeNodeComponent("frame28"),
    frame29: makeNodeComponent("frame29"),
    frame30: makeNodeComponent("frame30"),
    lineClomp: makeNodeComponent("lineClomp"),
    lineClomp3: makeNodeComponent("lineClomp3"),
    lineClomp2: makeNodeComponent("lineClomp2"),
    editItem: makeNodeComponent("editItem"),
    switchSetting: makeNodeComponent("switchSetting"),
    button2: makeNodeComponent("button2"),
    checkbox4: makeNodeComponent("checkbox4"),
    textbox2: makeNodeComponent("textbox2"),
    repead2: makeNodeComponent("repead2"),
    radioGroupLiom2: makeNodeComponent("radioGroupLiom2"),
    button12: makeNodeComponent("button12"),
    snackbar: makeNodeComponent("snackbar"),
    button: makeNodeComponent("button"),
    button3: makeNodeComponent("button3"),
    pageselect: makeNodeComponent("pageselect"),

    // Metadata about props expected for PlasmicReminderSetting
    internalVariantProps: PlasmicReminderSetting__VariantProps,
    internalArgProps: PlasmicReminderSetting__ArgProps
  }
);

export default PlasmicReminderSetting;
/* prettier-ignore-end */
