/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: pmKDqHBtiLCT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicReports.module.css"; // plasmic-import: pmKDqHBtiLCT/css

import Line3Icon from "./icons/PlasmicIcon__Line3"; // plasmic-import: cDBsZfQFOOWa/icon
import IconIcon from "../radix_ui/icons/PlasmicIcon__Icon"; // plasmic-import: MbDRsJU0e3bw/icon

createPlasmicElementProxy;

export type PlasmicReports__VariantMembers = {};
export type PlasmicReports__VariantsArgs = {};
type VariantPropType = keyof PlasmicReports__VariantsArgs;
export const PlasmicReports__VariantProps = new Array<VariantPropType>();

export type PlasmicReports__ArgsType = {
  onClick?: (event: any) => void;
  reportsSelect?: any;
  onReportsSelectChange?: (val: string) => void;
  tabList?: any;
  onTabListChange?: (val: string) => void;
  tabSelected?: number;
  onTabSelectedChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicReports__ArgsType;
export const PlasmicReports__ArgProps = new Array<ArgPropType>(
  "onClick",
  "reportsSelect",
  "onReportsSelectChange",
  "tabList",
  "onTabListChange",
  "tabSelected",
  "onTabSelectedChange"
);

export type PlasmicReports__OverridesType = {
  frame49?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  frame25?: Flex__<"div">;
  frame48?: Flex__<"div">;
  frame51?: Flex__<"div">;
  frame22?: Flex__<"div">;
  frame21?: Flex__<"div">;
  frame28?: Flex__<"div">;
  vuesaxLinearArrowRight?: Flex__<"div">;
  vuesaxLinearArrowRight2?: Flex__<"div">;
  frame23?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultReportsProps {
  onClick?: (event: any) => void;
  reportsSelect?: any;
  onReportsSelectChange?: (val: string) => void;
  tabList?: any;
  onTabListChange?: (val: string) => void;
  tabSelected?: number;
  onTabSelectedChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReports__RenderFunc(props: {
  variants: PlasmicReports__VariantsArgs;
  args: PlasmicReports__ArgsType;
  overrides: PlasmicReports__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "titre",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9\u200c\u0647\u0627\u06cc \u063a\u06cc\u0631 \u0641\u0639\u0627\u0644",
            type: "expired_subscriptions",
            api: "notActive",
            backColor: "#ed5151",
            number: "",
            tag: "notActive"
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0627\u06cc\u06cc \u06a9\u0647 \u06f3 \u0631\u0648\u0632 \u0645\u0627\u0646\u062f\u0647 \u062a\u0627 \u0627\u062a\u0645\u0627\u0645",
            type: "expiring_3_days",
            api: "expire-3",
            backColor: "#FFA500",
            number: "",
            tag: "expire3"
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0627\u06cc\u06cc \u06a9\u0647 \u06f1\u06f0 \u0631\u0648\u0632 \u0645\u0627\u0646\u062f\u0647 \u062a\u0627 \u0627\u062a\u0645\u0627\u0645",
            type: "expiring_10_days",
            api: "expire-10",
            backColor: "",
            number: "",
            tag: "expire10"
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0627\u06cc \u0641\u0639\u0627\u0644",
            type: "active_count",
            api: "active",
            backColor: "",
            number: "",
            tag: "active"
          }
        ]
      },
      {
        path: "reportsSelect",
        type: "writable",
        variableType: "object",

        valueProp: "reportsSelect",
        onChangeProp: "onReportsSelectChange"
      },
      {
        path: "tabList",
        type: "writable",
        variableType: "array",

        valueProp: "tabList",
        onChangeProp: "onTabListChange"
      },
      {
        path: "tabSelected",
        type: "writable",
        variableType: "number",

        valueProp: "tabSelected",
        onChangeProp: "onTabSelectedChange"
      },
      {
        path: "tabData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"frame49"}
      data-plasmic-override={overrides.frame49}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.frame49
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["updateLoading"] = false
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["loading"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateLoading"] != null &&
            typeof $steps["updateLoading"] === "object" &&
            typeof $steps["updateLoading"].then === "function"
          ) {
            $steps["updateLoading"] = await $steps["updateLoading"];
          }

          $steps["invokeGlobalAction"] = false
            ? (() => {
                const actionArgs = {
                  args: [
                    "POST",
                    "https://n8n.staas.ir/webhook/panel/tab",
                    undefined,
                    (() => {
                      try {
                        return {
                          type: $state.tabList?.[$state.tabSelected]?.type
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["invokeGlobalAction"] != null &&
            typeof $steps["invokeGlobalAction"] === "object" &&
            typeof $steps["invokeGlobalAction"].then === "function"
          ) {
            $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
          }

          $steps["updateTabData"] = false
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["tabData"]
                  },
                  operation: 0,
                  value: $steps.invokeGlobalAction?.data ?? {}
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateTabData"] != null &&
            typeof $steps["updateTabData"] === "object" &&
            typeof $steps["updateTabData"].then === "function"
          ) {
            $steps["updateTabData"] = await $steps["updateTabData"];
          }

          $steps["runCode"] = false
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      $state.titre = $state.titre.map(item => ({
                        ...item,
                        number: $state.tabData.result[item.tag] ?? ""
                      }));
                      console.log($state.tabData);
                      return console.log($state.titre);
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }

          $steps["updateLoading2"] = false
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["loading"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateLoading2"] != null &&
            typeof $steps["updateLoading2"] === "object" &&
            typeof $steps["updateLoading2"].then === "function"
          ) {
            $steps["updateLoading2"] = await $steps["updateLoading2"];
          }
        }}
      />

      <div
        data-plasmic-name={"frame25"}
        data-plasmic-override={overrides.frame25}
        className={classNames(projectcss.all, sty.frame25)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xRbve
          )}
        >
          {"\u06af\u0632\u0627\u0631\u0634 \u0647\u0627"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame48"}
        data-plasmic-override={overrides.frame48}
        className={classNames(projectcss.all, sty.frame48)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___4E8Fo)}>
          <Line3Icon
            className={classNames(projectcss.all, sty.svg__gEcqU)}
            role={"img"}
          />
        </div>
        <div
          data-plasmic-name={"frame51"}
          data-plasmic-override={overrides.frame51}
          className={classNames(projectcss.all, sty.frame51)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__k0Lyg)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.tabList;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__dwBqu)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__f6P8G)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoading"] = false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading"] != null &&
                        typeof $steps["updateLoading"] === "object" &&
                        typeof $steps["updateLoading"].then === "function"
                      ) {
                        $steps["updateLoading"] = await $steps["updateLoading"];
                      }

                      $steps["updateTabSelected"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["tabSelected"]
                              },
                              operation: 0,
                              value: currentIndex
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTabSelected"] != null &&
                        typeof $steps["updateTabSelected"] === "object" &&
                        typeof $steps["updateTabSelected"].then === "function"
                      ) {
                        $steps["updateTabSelected"] = await $steps[
                          "updateTabSelected"
                        ];
                      }

                      $steps["invokeGlobalAction"] = false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/panel/tab",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      type: $state.tabList?.[currentIndex]?.type
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateTabData"] = false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["tabData"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction?.data?.[0] ?? {}
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTabData"] != null &&
                        typeof $steps["updateTabData"] === "object" &&
                        typeof $steps["updateTabData"].then === "function"
                      ) {
                        $steps["updateTabData"] = await $steps["updateTabData"];
                      }

                      $steps["runCode"] = false
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  const result = $state.tabData?.result ?? {};
                                  $state.titre = ($state.titre ?? []).map(
                                    item => ({
                                      ...item,
                                      number: result[item.tag] ?? ""
                                    })
                                  );
                                  console.log($state.tabData);
                                  return console.log($state.titre);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["updateLoading2"] = false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading2"] != null &&
                        typeof $steps["updateLoading2"] === "object" &&
                        typeof $steps["updateLoading2"].then === "function"
                      ) {
                        $steps["updateLoading2"] = await $steps[
                          "updateLoading2"
                        ];
                      }
                    }}
                    style={(() => {
                      try {
                        return {
                          "background-color":
                            $state.tabSelected == currentIndex
                              ? "#F8EDFF"
                              : "#F5F5F5"
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pjbpc
                      )}
                      style={(() => {
                        try {
                          return {
                            color:
                              $state.tabSelected == currentIndex
                                ? "#7254C6"
                                : "#535353"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__sp2OQ)}>
          {(() => {
            try {
              return ($state.apiRequest.data?.result?.renewRate ?? "") != "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aH3Rc
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      "نرخ اشتراک تمدید:  " +
                      $state.apiRequest.data.result.renewRate +
                      " %"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
        </div>
      </div>
      {(() => {
        try {
          return !$state.apiRequest.loading;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__ygFuJ)}>
          <div className={classNames(projectcss.all, sty.freeBox__cKfxt)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.titre;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  data-plasmic-name={"frame22"}
                  data-plasmic-override={overrides.frame22}
                  className={classNames(projectcss.all, sty.frame22)}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateReportsSelect"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["reportsSelect"]
                            },
                            operation: 0,
                            value: currentItem
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateReportsSelect"] != null &&
                      typeof $steps["updateReportsSelect"] === "object" &&
                      typeof $steps["updateReportsSelect"].then === "function"
                    ) {
                      $steps["updateReportsSelect"] = await $steps[
                        "updateReportsSelect"
                      ];
                    }

                    $steps["runOnClick"] = true
                      ? (() => {
                          const actionArgs = { eventRef: $props["onClick"] };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runOnClick"] != null &&
                      typeof $steps["runOnClick"] === "object" &&
                      typeof $steps["runOnClick"].then === "function"
                    ) {
                      $steps["runOnClick"] = await $steps["runOnClick"];
                    }
                  }}
                  style={(() => {
                    try {
                      return {
                        "background-color": "#f7f7f7",
                        border: `2px solid ${
                          currentItem.backColor == ""
                            ? "#f7f7f7"
                            : currentItem.backColor
                        }`
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"frame21"}
                    data-plasmic-override={overrides.frame21}
                    className={classNames(projectcss.all, sty.frame21)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__b8CtS)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yaN7K
                        )}
                        style={(() => {
                          try {
                            return {
                              color: "#000000"
                              // currentItem.backColor == '' ? "#000000" : "#ffffff"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Lorem ipsum";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {(() => {
                        try {
                          return currentItem.number != "";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jQcU
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.number;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Lorem ipsum";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      ) : null}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kE66O
                      )}
                      style={(() => {
                        try {
                          return {
                            color:
                              currentItem.backColor == ""
                                ? "#757575"
                                : "#ffffff"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.description;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et ...";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"frame28"}
                    data-plasmic-override={overrides.frame28}
                    className={classNames(projectcss.all, sty.frame28)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4Sqp1
                      )}
                    >
                      {"\u0628\u0627\u0632 \u06a9\u0631\u062f\u0646"}
                    </div>
                    <div
                      data-plasmic-name={"vuesaxLinearArrowRight"}
                      data-plasmic-override={overrides.vuesaxLinearArrowRight}
                      className={classNames(
                        projectcss.all,
                        sty.vuesaxLinearArrowRight
                      )}
                    >
                      <div
                        data-plasmic-name={"vuesaxLinearArrowRight2"}
                        data-plasmic-override={
                          overrides.vuesaxLinearArrowRight2
                        }
                        className={classNames(
                          projectcss.all,
                          sty.vuesaxLinearArrowRight2
                        )}
                      >
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__o6Bu)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      ) : null}
      {(() => {
        try {
          return $state.apiRequest.loading;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__nt6Cl)}>
          <div className={classNames(projectcss.all, sty.freeBox__ju5SW)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.titre;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  data-plasmic-name={"frame23"}
                  data-plasmic-override={overrides.frame23}
                  className={classNames(projectcss.all, sty.frame23, "shimmer")}
                  key={currentIndex}
                />
              );
            })}
          </div>
        </div>
      ) : null}
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        body={(() => {
          try {
            return { type: $state.tabList?.[$state.tabSelected]?.type };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={null}
        loadingDisplay={null}
        method={"POST"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );

          (async data => {
            const $steps = {};

            $steps["runCode"] = $state.apiRequest?.data?.result
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        const result = $state.apiRequest.data.result;
                        return ($state.titre = ($state.titre ?? []).map(
                          item => ({
                            ...item,
                            number: result[item.tag] ?? ""
                          })
                        ));
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }).apply(null, eventArgs);
        }}
        shouldFetch={true}
        url={"https://n8n.staas.ir/webhook/panel/tab"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame49: [
    "frame49",
    "sideEffect",
    "frame25",
    "frame48",
    "frame51",
    "frame22",
    "frame21",
    "frame28",
    "vuesaxLinearArrowRight",
    "vuesaxLinearArrowRight2",
    "frame23",
    "apiRequest"
  ],
  sideEffect: ["sideEffect"],
  frame25: ["frame25"],
  frame48: ["frame48", "frame51"],
  frame51: ["frame51"],
  frame22: [
    "frame22",
    "frame21",
    "frame28",
    "vuesaxLinearArrowRight",
    "vuesaxLinearArrowRight2"
  ],
  frame21: ["frame21"],
  frame28: ["frame28", "vuesaxLinearArrowRight", "vuesaxLinearArrowRight2"],
  vuesaxLinearArrowRight: ["vuesaxLinearArrowRight", "vuesaxLinearArrowRight2"],
  vuesaxLinearArrowRight2: ["vuesaxLinearArrowRight2"],
  frame23: ["frame23"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame49: "div";
  sideEffect: typeof SideEffect;
  frame25: "div";
  frame48: "div";
  frame51: "div";
  frame22: "div";
  frame21: "div";
  frame28: "div";
  vuesaxLinearArrowRight: "div";
  vuesaxLinearArrowRight2: "div";
  frame23: "div";
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReports__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReports__VariantsArgs;
    args?: PlasmicReports__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReports__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReports__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReports__ArgProps,
          internalVariantPropNames: PlasmicReports__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReports__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame49") {
    func.displayName = "PlasmicReports";
  } else {
    func.displayName = `PlasmicReports.${nodeName}`;
  }
  return func;
}

export const PlasmicReports = Object.assign(
  // Top-level PlasmicReports renders the root element
  makeNodeComponent("frame49"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    frame25: makeNodeComponent("frame25"),
    frame48: makeNodeComponent("frame48"),
    frame51: makeNodeComponent("frame51"),
    frame22: makeNodeComponent("frame22"),
    frame21: makeNodeComponent("frame21"),
    frame28: makeNodeComponent("frame28"),
    vuesaxLinearArrowRight: makeNodeComponent("vuesaxLinearArrowRight"),
    vuesaxLinearArrowRight2: makeNodeComponent("vuesaxLinearArrowRight2"),
    frame23: makeNodeComponent("frame23"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicReports
    internalVariantProps: PlasmicReports__VariantProps,
    internalArgProps: PlasmicReports__ArgProps
  }
);

export default PlasmicReports;
/* prettier-ignore-end */
