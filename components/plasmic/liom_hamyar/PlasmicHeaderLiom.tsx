// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: wNUwxS5tO1GX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicHeaderLiom.module.css"; // plasmic-import: wNUwxS5tO1GX/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon

createPlasmicElementProxy;

export type PlasmicHeaderLiom__VariantMembers = {};
export type PlasmicHeaderLiom__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeaderLiom__VariantsArgs;
export const PlasmicHeaderLiom__VariantProps = new Array<VariantPropType>();

export type PlasmicHeaderLiom__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHeaderLiom__ArgsType;
export const PlasmicHeaderLiom__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicHeaderLiom__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultHeaderLiomProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeaderLiom__RenderFunc(props: {
  variants: PlasmicHeaderLiom__VariantsArgs;
  args: PlasmicHeaderLiom__ArgsType;
  overrides: PlasmicHeaderLiom__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__gpOb)}
          >
            <XIcon
              className={classNames(projectcss.all, sty.svg__rLTdt)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__q64IV
              )}
            >
              {
                "\u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u0648\u06cc\u0698\u0647"
              }
            </div>
          </Stack__>
        ),
        value: args.children
      })}
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {renderPlasmicSlot({
          defaultContents: null,
          value: args.slot
        })}
      </Stack__>
      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml)}
        code={
          '<script>\r\n  // \u062a\u0646\u0638\u06cc\u0645\u0627\u062a PWA \r\nconst appleTouchIcon = document.createElement("link");\r\nappleTouchIcon.rel = "apple-touch-icon";\r\nappleTouchIcon.href = "https://rentamon-files.storage.iran.liara.space/icon/appicon.png";\r\nappleTouchIcon.sizes = "180x180";\r\ndocument.head.appendChild(appleTouchIcon);\r\n\r\n// \u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0631\u0646\u06af \u0648 \u0646\u0645\u0627\u06cc\u0634 PWA\r\nconst themeColorMeta = document.createElement("meta");\r\nthemeColorMeta.name = "theme-color";\r\nthemeColorMeta.content = "#fcfcfc";\r\ndocument.head.appendChild(themeColorMeta);\r\n\r\nconst appleWebAppMeta = document.createElement("meta");\r\nappleWebAppMeta.name = "apple-mobile-web-app-capable";\r\nappleWebAppMeta.content = "yes";\r\ndocument.head.appendChild(appleWebAppMeta);\r\n\r\nconst appleWebAppTitle = document.createElement("meta");\r\nappleWebAppTitle.name = "apple-mobile-web-app-title";\r\nappleWebAppTitle.content = "\u0631\u0646\u062a\u0627\u0645\u0648\u0646";\r\ndocument.head.appendChild(appleWebAppTitle);\r\n\r\nconst metaAppleWebAppStatusBar = document.createElement("meta");\r\nmetaAppleWebAppStatusBar.name = "apple-mobile-web-app-status-bar-style";\r\nmetaAppleWebAppStatusBar.content = "default";\r\ndocument.head.appendChild(metaAppleWebAppStatusBar);\r\n\r\n// \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 manifest.json\r\nconst manifestLink = document.createElement("link");\r\nmanifestLink.rel = "manifest";\r\ndocument.head.appendChild(manifestLink);\r\n\r\n// \u0633\u0627\u062e\u062a \u0648 \u062b\u0628\u062a manifest.json \u062f\u0627\u062e\u0644 \u0635\u0641\u062d\u0647\r\nconst manifestContent = {\r\n  name: "\u0631\u0646\u062a\u0627\u0645\u0648\u0646",\r\n  short_name: "\u0631\u0646\u062a\u0627\u0645\u0648\u0646",\r\n  icons: [\r\n    {\r\n      src: "https://rentamon-files.storage.iran.liara.space/icon/appicon.png",\r\n      sizes: "192x192",\r\n      type: "image/png"\r\n    },\r\n    {\r\n      src: "https://rentamon-files.storage.iran.liara.space/icon/appicon.png",\r\n      sizes: "512x512",\r\n      type: "image/png"\r\n    }\r\n  ],\r\n  theme_color: "#fcfcfc",\r\n  background_color: "#fcfcfc",\r\n  display: "standalone",\r\n  start_url: "/",\r\n  scope: "/",\r\n  \r\n};\r\n\r\n// \u0627\u06cc\u062c\u0627\u062f \u0641\u0627\u06cc\u0644 \u0648 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0628\u0647 \u0645\u0631\u0648\u0631\u06af\u0631\r\nconst manifestBlob = new Blob([JSON.stringify(manifestContent)], { type: "application/json" });\r\nconst manifestURL = URL.createObjectURL(manifestBlob);\r\nmanifestLink.href = manifestURL;\r\n\r\n// \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 Splash Screen \u0628\u0631\u0627\u06cc iOS\r\nconst splashScreen = document.createElement("link");\r\nsplashScreen.rel = "apple-touch-startup-image";\r\nsplashScreen.href = "https://rentamon-files.storage.iran.liara.space/icon/appicon.png";\r\ndocument.head.appendChild(splashScreen);\r\n\r\n\r\n// \u062b\u0628\u062a Service Worker \u0628\u0631\u0627\u06cc \u0642\u0627\u0628\u0644\u06cc\u062a\u200c\u0647\u0627\u06cc PWA\r\nif ("serviceWorker" in navigator) {\r\n  window.addEventListener("load", () => {\r\n    navigator.serviceWorker\r\n      .register("sw.js")\r\n      .then(reg => console.log("Service Worker \u062b\u0628\u062a \u0634\u062f", reg))\r\n      .catch(err => console.error("\u062e\u0637\u0627 \u062f\u0631 \u062b\u0628\u062a Service Worker", err));\r\n  });\r\n}\r\n</script>\r\n\r\n<!-- Service Worker \u062f\u0627\u062e\u0644\u06cc (sw.js) -->\r\n<script>\r\nif (!navigator.serviceWorker.controller) {\r\n  const swScript = document.createElement("script");\r\n  swScript.textContent = `\r\n    self.addEventListener("install", event => {\r\n      console.log("Service Worker \u0646\u0635\u0628 \u0634\u062f.");\r\n      event.waitUntil(\r\n        caches.open("rentamon-cache").then(cache => {\r\n          return cache.addAll([\r\n            "/",\r\n            "/index.html",\r\n            "/styles.css",\r\n            "/script.js",\r\n            "https://rentamon-files.storage.iran.liara.space/icon/icon.svg",\r\n            "https://rentamon-files.storage.iran.liara.space/icon/splashscreen.svg"\r\n          ]);\r\n        })\r\n      );\r\n    });\r\n\r\n    self.addEventListener("fetch", event => {\r\n      event.respondWith(\r\n        caches.match(event.request).then(response => {\r\n          return response || fetch(event.request);\r\n        })\r\n      );\r\n    });\r\n  `;\r\n  document.body.appendChild(swScript);\r\n}\r\n</script>'
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "embedHtml"],
  freeBox: ["freeBox"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeaderLiom__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeaderLiom__VariantsArgs;
    args?: PlasmicHeaderLiom__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeaderLiom__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeaderLiom__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeaderLiom__ArgProps,
          internalVariantPropNames: PlasmicHeaderLiom__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeaderLiom__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeaderLiom";
  } else {
    func.displayName = `PlasmicHeaderLiom.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderLiom = Object.assign(
  // Top-level PlasmicHeaderLiom renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicHeaderLiom
    internalVariantProps: PlasmicHeaderLiom__VariantProps,
    internalArgProps: PlasmicHeaderLiom__ArgProps
  }
);

export default PlasmicHeaderLiom;
/* prettier-ignore-end */
