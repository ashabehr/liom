// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: wNUwxS5tO1GX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicHeaderLiom.module.css"; // plasmic-import: wNUwxS5tO1GX/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon

createPlasmicElementProxy;

export type PlasmicHeaderLiom__VariantMembers = {};
export type PlasmicHeaderLiom__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeaderLiom__VariantsArgs;
export const PlasmicHeaderLiom__VariantProps = new Array<VariantPropType>();

export type PlasmicHeaderLiom__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHeaderLiom__ArgsType;
export const PlasmicHeaderLiom__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicHeaderLiom__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  serviceWorker?: Flex__<typeof Embed>;
};

export interface DefaultHeaderLiomProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeaderLiom__RenderFunc(props: {
  variants: PlasmicHeaderLiom__VariantsArgs;
  args: PlasmicHeaderLiom__ArgsType;
  overrides: PlasmicHeaderLiom__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__gpOb)}
          >
            <XIcon
              className={classNames(projectcss.all, sty.svg__rLTdt)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__q64IV
              )}
            >
              {
                "\u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u0648\u06cc\u0698\u0647"
              }
            </div>
          </Stack__>
        ),
        value: args.children
      })}
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {renderPlasmicSlot({
          defaultContents: null,
          value: args.slot
        })}
      </Stack__>
      <Embed
        data-plasmic-name={"serviceWorker"}
        data-plasmic-override={overrides.serviceWorker}
        className={classNames("__wab_instance", sty.serviceWorker)}
        code={
          '<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>\r\n<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-messaging-compat.js"></script>\r\n<script>\r\n  // \u062a\u0646\u0638\u06cc\u0645\u0627\u062a PWA\r\n  var appleTouchIcon = document.createElement("link");\r\n  appleTouchIcon.rel = "apple-touch-icon";\r\n  appleTouchIcon.href = "https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico";\r\n  appleTouchIcon.sizes = "180x180";\r\n  document.head.appendChild(appleTouchIcon);\r\n\r\n  var themeColorMeta = document.createElement("meta");\r\n  themeColorMeta.name = "theme-color";\r\n  themeColorMeta.content = "#7444BC";\r\n  document.head.appendChild(themeColorMeta);\r\n\r\n  var appleWebAppMeta = document.createElement("meta");\r\n  appleWebAppMeta.name = "apple-mobile-web-app-capable";\r\n  appleWebAppMeta.content = "yes";\r\n  document.head.appendChild(appleWebAppMeta);\r\n\r\n  var appleWebAppTitle = document.createElement("meta");\r\n  appleWebAppTitle.name = "apple-mobile-web-app-title";\r\n  appleWebAppTitle.content = "\u0644\u06cc\u0648\u0645";\r\n  document.head.appendChild(appleWebAppTitle);\r\n\r\n  var metaAppleWebAppStatusBar = document.createElement("meta");\r\n  metaAppleWebAppStatusBar.name = "apple-mobile-web-app-status-bar-style";\r\n  metaAppleWebAppStatusBar.content = "default";\r\n  document.head.appendChild(metaAppleWebAppStatusBar);\r\n\r\n  var manifestLink = document.createElement("link");\r\n  manifestLink.rel = "manifest";\r\n  document.head.appendChild(manifestLink);\r\n\r\n  var manifestContent = {\r\n    name: "\u0644\u06cc\u0648\u0645",\r\n    short_name: "\u0644\u06cc\u0648\u0645",\r\n    icons: [\r\n      {\r\n        src: "https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico",\r\n        sizes: "48x48",\r\n        type: "image/x-icon"\r\n      },\r\n      {\r\n        src: "https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico",\r\n        sizes: "64x64",\r\n        type: "image/x-icon"\r\n      },\r\n      {\r\n        src: "https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico",\r\n        sizes: "128x128",\r\n        type: "image/x-icon"\r\n      }\r\n    ],\r\n    theme_color: "#7444BC",\r\n    background_color: "#7444BC",\r\n    display: "standalone",\r\n    start_url: "/",\r\n    scope: "/"\r\n  };\r\n\r\n  var manifestBlob = new Blob([JSON.stringify(manifestContent)], { type: "application/json" });\r\n  var manifestURL = URL.createObjectURL(manifestBlob);\r\n  manifestLink.href = manifestURL;\r\n\r\n  var splashScreens = [\r\n    {\r\n      href: "https://liom.app/wp-content/uploads/2025/03/Logo-1.webp",\r\n      media: "(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3)"\r\n    },\r\n    {\r\n      href: "https://liom.app/wp-content/uploads/2025/03/Logo-1.webp",\r\n      media: "(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3)"\r\n    },\r\n    {\r\n      href: "https://liom.app/wp-content/uploads/2025/03/Logo-1.webp",\r\n      media: "(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2)"\r\n    }\r\n  ];\r\n\r\n  splashScreens.forEach(splash => {\r\n    var splashScreen = document.createElement("link");\r\n    splashScreen.rel = "apple-touch-startup-image";\r\n    splashScreen.href = splash.href;\r\n    splashScreen.media = splash.media;\r\n    document.head.appendChild(splashScreen);\r\n  });\r\n\r\n  // \u062a\u0646\u0638\u06cc\u0645\u0627\u062a Firebase\r\n  var firebaseConfig = {\r\n    apiKey: "AIzaSyBVtKyIzcD0xVEMOjeMYjDdNRozFVVrmRo",\r\n    authDomain: "liom-31952.firebaseapp.com",\r\n    databaseURL: "https://liom-31952.firebaseio.com",\r\n    projectId: "liom-31952",\r\n    storageBucket: "liom-31952.firebasestorage.app",\r\n    messagingSenderId: "518322220404",\r\n    appId: "1:518322220404:web:09527c8a42f2f017d89021",\r\n    measurementId: "G-TVWYWYEH1D"\r\n  };\r\n\r\n  // Initialize Firebase\r\n  var app = firebase.initializeApp(firebaseConfig);\r\n  var messaging = firebase.messaging();\r\n\r\n  // \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0645\u062c\u0648\u0632 \u0628\u0631\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646\r\n  function requestPermission() {\r\n    console.log("\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0645\u062c\u0648\u0632...");\r\n    Notification.requestPermission().then((permission) => {\r\n      if (permission === "granted") {\r\n        console.log("\u0645\u062c\u0648\u0632 \u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646 \u062f\u0627\u062f\u0647 \u0634\u062f.");\r\n        messaging.getToken({ vapidKey: "BDroVn6KRs9iN1laogFt-J47xc9WsWIfblgIBCi2QllonFT-PAu9up26gRlL-9uL7R1FSllN7I13eTR6IZiH72g" }).then((currentToken) => {\r\n          if (currentToken) {\r\n            console.log("\u062a\u0648\u06a9\u0646 FCM: ", currentToken);\r\n            sendTokenToServer(currentToken);\r\n          } else {\r\n            console.log("\u0647\u06cc\u0686 \u062a\u0648\u06a9\u0646\u06cc \u0645\u0648\u062c\u0648\u062f \u0646\u06cc\u0633\u062a.");\r\n          }\r\n        }).catch((err) => {\r\n          console.log("\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u062a\u0648\u06a9\u0646: ", err);\r\n        });\r\n      } else {\r\n        console.log("\u0645\u062c\u0648\u0632 \u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646 \u062f\u0627\u062f\u0647 \u0646\u0634\u062f.");\r\n      }\r\n    });\r\n  }\r\n\r\n  // \u0627\u0631\u0633\u0627\u0644 \u062a\u0648\u06a9\u0646 \u0628\u0647 \u0633\u0631\u0648\u0631\r\n  function sendTokenToServer(token) {\r\n    console.log("\u0627\u0631\u0633\u0627\u0644 \u062a\u0648\u06a9\u0646 \u0628\u0647 \u0633\u0631\u0648\u0631...", token);\r\n    window.localStorage.setItem("fcmToken", token);\r\n  }\r\n\r\n  // \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646\u200c\u0647\u0627 \u062f\u0631 \u062d\u0627\u0644\u062a Foreground\r\n  messaging.onMessage((payload) => {\r\n    console.log("\u067e\u06cc\u0627\u0645 \u062f\u0631\u06cc\u0627\u0641\u062a \u0634\u062f: ", payload);\r\n\r\n    var notificationTitle = payload.notification.title;\r\n    var notificationOptions = {\r\n      body: payload.notification.body,\r\n      icon: "https://example.com/icon.png"\r\n    };\r\n\r\n    new Notification(notificationTitle, notificationOptions);\r\n  });\r\n\r\n  // \u0634\u0631\u0648\u0639 \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646\u200c\u0647\u0627\r\n  requestPermission();\r\n\r\n  // \u062b\u0628\u062a Service Worker\r\n  if ("serviceWorker" in navigator) {\r\n    window.addEventListener("load", () => {\r\n      navigator.serviceWorker.register("/service-worker.js").then((registration) => {\r\n        console.log("Service Worker \u062b\u0628\u062a \u0634\u062f: ", registration);\r\n\r\n        // \u062a\u0646\u0638\u06cc\u0645 Firebase Messaging \u0628\u0631\u0627\u06cc \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 Service Worker\r\n        messaging.useServiceWorker(registration);\r\n\r\n        // \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u062a\u06cc\u0641\u06cc\u06a9\u06cc\u0634\u0646\u200c\u0647\u0627 \u062f\u0631 \u062d\u0627\u0644\u062a Background\r\n        messaging.onBackgroundMessage((payload) => {\r\n          console.log("\u067e\u06cc\u0627\u0645 \u067e\u0633\u200c\u0632\u0645\u06cc\u0646\u0647 \u062f\u0631\u06cc\u0627\u0641\u062a \u0634\u062f: ", payload);\r\n\r\n          var notificationTitle = payload.notification.title;\r\n          var notificationOptions = {\r\n            body: payload.notification.body,\r\n            icon: "https://example.com/icon.png"\r\n          };\r\n\r\n          registration.showNotification(notificationTitle, notificationOptions);\r\n        });\r\n      }).catch((err) => {\r\n        console.log("\u062e\u0637\u0627 \u062f\u0631 \u062b\u0628\u062a Service Worker: ", err);\r\n      });\r\n    });\r\n  }\r\n</script>'
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "serviceWorker"],
  freeBox: ["freeBox"],
  serviceWorker: ["serviceWorker"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  serviceWorker: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeaderLiom__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeaderLiom__VariantsArgs;
    args?: PlasmicHeaderLiom__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeaderLiom__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeaderLiom__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeaderLiom__ArgProps,
          internalVariantPropNames: PlasmicHeaderLiom__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeaderLiom__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeaderLiom";
  } else {
    func.displayName = `PlasmicHeaderLiom.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderLiom = Object.assign(
  // Top-level PlasmicHeaderLiom renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    serviceWorker: makeNodeComponent("serviceWorker"),

    // Metadata about props expected for PlasmicHeaderLiom
    internalVariantProps: PlasmicHeaderLiom__VariantProps,
    internalArgProps: PlasmicHeaderLiom__ArgProps
  }
);

export default PlasmicHeaderLiom;
/* prettier-ignore-end */
