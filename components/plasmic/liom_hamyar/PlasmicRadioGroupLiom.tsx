/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: tXN0uQ-uT9R3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RadioGrop from "../../RadioGrop"; // plasmic-import: mcNKMbL_6N75/component
import MenuIcon from "../../MenuIcon"; // plasmic-import: JBF-V8Q5mpWl/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicRadioGroupLiom.module.css"; // plasmic-import: tXN0uQ-uT9R3/css

createPlasmicElementProxy;

export type PlasmicRadioGroupLiom__VariantMembers = {
  unnamedVariant: "unnamedVariant";
  size: "small" | "mini";
  moulty: "moulty";
  color: "line";
  icon: "icon";
  style2: "cycle";
  direction: "v";
};
export type PlasmicRadioGroupLiom__VariantsArgs = {
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
  size?: SingleChoiceArg<"small" | "mini">;
  moulty?: SingleBooleanChoiceArg<"moulty">;
  color?: SingleChoiceArg<"line">;
  icon?: SingleBooleanChoiceArg<"icon">;
  style2?: SingleChoiceArg<"cycle">;
  direction?: SingleChoiceArg<"v">;
};
type VariantPropType = keyof PlasmicRadioGroupLiom__VariantsArgs;
export const PlasmicRadioGroupLiom__VariantProps = new Array<VariantPropType>(
  "unnamedVariant",
  "size",
  "moulty",
  "color",
  "icon",
  "style2",
  "direction"
);

export type PlasmicRadioGroupLiom__ArgsType = {
  selected?: string;
  onSelectedChange?: (val: string) => void;
  list?: any;
  onListChange?: (val: string) => void;
  selects?: any;
  onSelectsChange?: (val: string) => void;
  accessclicke?: () => void;
  click?: () => void;
};
type ArgPropType = keyof PlasmicRadioGroupLiom__ArgsType;
export const PlasmicRadioGroupLiom__ArgProps = new Array<ArgPropType>(
  "selected",
  "onSelectedChange",
  "list",
  "onListChange",
  "selects",
  "onSelectsChange",
  "accessclicke",
  "click"
);

export type PlasmicRadioGroupLiom__OverridesType = {
  root?: Flex__<"div">;
  menuIcon?: Flex__<typeof MenuIcon>;
};

export interface DefaultRadioGroupLiomProps {
  selected?: string;
  onSelectedChange?: (val: string) => void;
  list?: any;
  onListChange?: (val: string) => void;
  selects?: any;
  onSelectsChange?: (val: string) => void;
  accessclicke?: () => void;
  click?: () => void;
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
  size?: SingleChoiceArg<"small" | "mini">;
  moulty?: SingleBooleanChoiceArg<"moulty">;
  color?: SingleChoiceArg<"line">;
  icon?: SingleBooleanChoiceArg<"icon">;
  style2?: SingleChoiceArg<"cycle">;
  direction?: SingleChoiceArg<"v">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRadioGroupLiom__RenderFunc(props: {
  variants: PlasmicRadioGroupLiom__VariantsArgs;
  args: PlasmicRadioGroupLiom__ArgsType;
  overrides: PlasmicRadioGroupLiom__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "unnamedVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant
      },
      {
        path: "selected",
        type: "writable",
        variableType: "text",

        valueProp: "selected",
        onChangeProp: "onSelectedChange"
      },
      {
        path: "list",
        type: "writable",
        variableType: "array",

        valueProp: "list",
        onChangeProp: "onListChange"
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "selects",
        type: "writable",
        variableType: "array",

        valueProp: "selects",
        onChangeProp: "onSelectsChange"
      },
      {
        path: "moulty",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.moulty
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "icon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.icon
      },
      {
        path: "style2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.style2
      },
      {
        path: "direction",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.direction
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootcolor_line]: hasVariant($state, "color", "line"),
          [sty.rootdirection_v]: hasVariant($state, "direction", "v"),
          [sty.rooticon]: hasVariant($state, "icon", "icon"),
          [sty.rootmoulty]: hasVariant($state, "moulty", "moulty"),
          [sty.rootsize_mini]: hasVariant($state, "size", "mini"),
          [sty.rootsize_small]: hasVariant($state, "size", "small"),
          [sty.rootstyle2_cycle]: hasVariant($state, "style2", "cycle"),
          [sty.rootunnamedVariant]: hasVariant(
            $state,
            "unnamedVariant",
            "unnamedVariant"
          )
        }
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $state.list;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <RadioGrop
            className={classNames("__wab_instance", sty.radioGrop__xDgqn, {
              [sty.radioGropcolor_line__xDgqna6Qw]: hasVariant(
                $state,
                "color",
                "line"
              ),
              [sty.radioGropdirection_v__xDgqnmR1Io]: hasVariant(
                $state,
                "direction",
                "v"
              ),
              [sty.radioGropicon__xDgqn9MoHd]: hasVariant(
                $state,
                "icon",
                "icon"
              ),
              [sty.radioGropmoulty__xDgqnQublj]: hasVariant(
                $state,
                "moulty",
                "moulty"
              ),
              [sty.radioGropsize_mini__xDgqnaMdd]: hasVariant(
                $state,
                "size",
                "mini"
              ),
              [sty.radioGropsize_small__xDgqnqO86K]: hasVariant(
                $state,
                "size",
                "small"
              ),
              [sty.radioGropstyle2_cycle__xDgqniTqtf]: hasVariant(
                $state,
                "style2",
                "cycle"
              ),
              [sty.radioGropunnamedVariant__xDgqnpN4Io]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
            color={"light"}
            direction={hasVariant($state, "direction", "v") ? "v" : undefined}
            icon={hasVariant($state, "icon", "icon") ? true : undefined}
            key={currentIndex}
            onClick={async event => {
              const $steps = {};

              $steps["updateSelected"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["selected"]
                      },
                      operation: 0,
                      value: currentItem.value
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSelected"] != null &&
                typeof $steps["updateSelected"] === "object" &&
                typeof $steps["updateSelected"].then === "function"
              ) {
                $steps["updateSelected"] = await $steps["updateSelected"];
              }

              $steps["updateSelected2"] = true
                ? (() => {
                    const actionArgs = { eventRef: $props["click"] };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSelected2"] != null &&
                typeof $steps["updateSelected2"] === "object" &&
                typeof $steps["updateSelected2"].then === "function"
              ) {
                $steps["updateSelected2"] = await $steps["updateSelected2"];
              }
            }}
            selected={(() => {
              try {
                return $state.selected == currentItem.value;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            size={
              hasVariant($state, "size", "mini")
                ? "mini"
                : hasVariant($state, "size", "small")
                  ? "mini"
                  : undefined
            }
            slot={
              <MenuIcon
                data-plasmic-name={"menuIcon"}
                data-plasmic-override={overrides.menuIcon}
                className={classNames("__wab_instance", sty.menuIcon, {
                  [sty.menuIcondirection_v]: hasVariant(
                    $state,
                    "direction",
                    "v"
                  ),
                  [sty.menuIconicon]: hasVariant($state, "icon", "icon")
                })}
                icons={(() => {
                  try {
                    return (() => {
                      const str = currentItem.icon;
                      const camelCased = str.replace(/_(.)/g, (_, c) =>
                        c.toUpperCase()
                      );
                      return camelCased;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                size={"_25"}
              />
            }
            style2={
              hasVariant($state, "color", "line")
                ? "lineligt"
                : "grayBackgerand"
            }
            style3={
              hasVariant($state, "style2", "cycle") ? "circle" : undefined
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__h0Hhj,
                {
                  [sty.textdirection_v__h0HhjmR1Io]: hasVariant(
                    $state,
                    "direction",
                    "v"
                  ),
                  [sty.textsize_mini__h0HhjaMdd]: hasVariant(
                    $state,
                    "size",
                    "mini"
                  ),
                  [sty.textsize_small__h0HhjqO86K]: hasVariant(
                    $state,
                    "size",
                    "small"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem.label;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </RadioGrop>
        );
      })}
      {(hasVariant($state, "moulty", "moulty") ? true : false)
        ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.list;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <RadioGrop
                className={classNames("__wab_instance", sty.radioGrop__zHtyZ, {
                  [sty.radioGropdirection_v__zHtyZmR1Io]: hasVariant(
                    $state,
                    "direction",
                    "v"
                  ),
                  [sty.radioGropmoulty__zHtyZqublj]: hasVariant(
                    $state,
                    "moulty",
                    "moulty"
                  ),
                  [sty.radioGropsize_mini__zHtyZaMdd]: hasVariant(
                    $state,
                    "size",
                    "mini"
                  ),
                  [sty.radioGropsize_small__zHtyZqO86K]: hasVariant(
                    $state,
                    "size",
                    "small"
                  ),
                  [sty.radioGropunnamedVariant__zHtyZpN4Io]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                })}
                color={"light"}
                comingSoon={(() => {
                  try {
                    return currentItem.paid;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                key={currentIndex}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = currentItem.access
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return $state.selects.includes(currentItem.value)
                              ? ($state.selects = $state.selects.filter(
                                  i => i != currentItem.value
                                ))
                              : $state.selects.push(currentItem.value);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["runAccessclicke"] = !currentItem.access
                    ? (() => {
                        const actionArgs = { eventRef: $props["accessclicke"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runAccessclicke"] != null &&
                    typeof $steps["runAccessclicke"] === "object" &&
                    typeof $steps["runAccessclicke"].then === "function"
                  ) {
                    $steps["runAccessclicke"] = await $steps["runAccessclicke"];
                  }
                }}
                selected={(() => {
                  try {
                    return $state.selects.includes(currentItem.value);
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                size={
                  hasVariant($state, "size", "mini")
                    ? "mini"
                    : hasVariant($state, "size", "small")
                      ? "mini"
                      : undefined
                }
                style2={"grayBackgerand"}
                style3={"radio"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9BoMi,
                    {
                      [sty.textsize_mini___9BoMIaMdd]: hasVariant(
                        $state,
                        "size",
                        "mini"
                      ),
                      [sty.textsize_small___9BoMIqO86K]: hasVariant(
                        $state,
                        "size",
                        "small"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.label;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </RadioGrop>
            );
          })
        : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "menuIcon"],
  menuIcon: ["menuIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  menuIcon: typeof MenuIcon;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRadioGroupLiom__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRadioGroupLiom__VariantsArgs;
    args?: PlasmicRadioGroupLiom__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicRadioGroupLiom__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicRadioGroupLiom__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRadioGroupLiom__ArgProps,
          internalVariantPropNames: PlasmicRadioGroupLiom__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRadioGroupLiom__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRadioGroupLiom";
  } else {
    func.displayName = `PlasmicRadioGroupLiom.${nodeName}`;
  }
  return func;
}

export const PlasmicRadioGroupLiom = Object.assign(
  // Top-level PlasmicRadioGroupLiom renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuIcon: makeNodeComponent("menuIcon"),

    // Metadata about props expected for PlasmicRadioGroupLiom
    internalVariantProps: PlasmicRadioGroupLiom__VariantProps,
    internalArgProps: PlasmicRadioGroupLiom__ArgProps
  }
);

export default PlasmicRadioGroupLiom;
/* prettier-ignore-end */
