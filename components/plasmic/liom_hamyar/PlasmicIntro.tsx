// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: zd6J_z-Sve9l

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { DialogTitle } from "@plasmicpkgs/radix-ui";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Subscription from "../../Subscription"; // plasmic-import: RkqUeSl2AMb8/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicIntro.module.css"; // plasmic-import: zd6J_z-Sve9l/css

import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: V1QgQzmgWP2T/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: H9d2pdUvXD_1/icon

createPlasmicElementProxy;

export type PlasmicIntro__VariantMembers = {};
export type PlasmicIntro__VariantsArgs = {};
type VariantPropType = keyof PlasmicIntro__VariantsArgs;
export const PlasmicIntro__VariantProps = new Array<VariantPropType>();

export type PlasmicIntro__ArgsType = {};
type ArgPropType = keyof PlasmicIntro__ArgsType;
export const PlasmicIntro__ArgProps = new Array<ArgPropType>();

export type PlasmicIntro__OverridesType = {
  root?: Flex__<"div">;
  button11?: Flex__<typeof Button>;
  button12?: Flex__<typeof Button>;
  section?: Flex__<"section">;
  button13?: Flex__<typeof Button>;
  button5?: Flex__<typeof Button>;
  button4?: Flex__<typeof Button>;
  dialog?: Flex__<typeof Dialog>;
  shop?: Flex__<typeof ApiRequest>;
  dialogTitle?: Flex__<typeof DialogTitle>;
  h5?: Flex__<"h5">;
  input?: Flex__<typeof AntdInput>;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  dialog2?: Flex__<typeof Dialog>;
  subscription?: Flex__<typeof Subscription>;
  button3?: Flex__<typeof Button>;
  user?: Flex__<typeof ApiRequest>;
};

export interface DefaultIntroProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIntro__RenderFunc(props: {
  variants: PlasmicIntro__VariantsArgs;
  args: PlasmicIntro__ArgsType;
  overrides: PlasmicIntro__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "startX",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "slid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "slid3"
      },
      {
        path: "dialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "shop.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijk4YTU1MDY0LTY3ZTEtNDc1NC04OGRmLTFiOTAzMWQ3NjZlMiIsInR5cGUiOiJ1c2VyIiwiaWF0IjoxNzM1ODI0NDAwfQ.EctK_5ZFB3qyZucWuCPB91Xbby3fojtWk97_Bqx6xgY"
      },
      {
        path: "loadin",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buyId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "discountCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "selectedShop",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.shop.data.result.findIndex(
                item => item.selected === 1
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "subscription[].clickitem",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "subscription[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription[].price",
        type: "private",
        variableType: "number"
      },
      {
        path: "subscription[].discount",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription[].fullprice",
        type: "private",
        variableType: "number"
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "discountBox",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "discountOk",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "user.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "user.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "user.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button11.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "button13.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
        draggable={``}
        onDragEnd={async event => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      if ($state.startX - event.clientX > 80) {
                        switch ($state.slid) {
                          case "slid1":
                            break;
                          case "slid2":
                            $state.slid = "slid1";
                            run1();
                            break;
                          case "slid3":
                            $state.slid = "slid2";
                            run1();
                            break;
                        }
                      } else if (event.clientX - $state.startX > 80) {
                        switch ($state.slid) {
                          case "slid1":
                            $state.slid = "slid2";
                            run1();
                            break;
                          case "slid2":
                            $state.slid = "slid3";
                            run1();
                            break;
                          case "slid3":
                            break;
                        }
                      }
                      function run1() {
                        var box = document.getElementById("myBox");
                        box.classList.remove("zoom-animation");
                        void box.offsetWidth;
                        box.classList.add("zoom-animation");
                      }
                      return function run1() {
                        var box = document.getElementById("myBox");
                        box.classList.remove("zoom-animation");
                        void box.offsetWidth;
                        box.classList.add("zoom-animation");
                      };
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
        onDragStart={async event => {
          const $steps = {};

          $steps["updateStartX"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["startX"]
                  },
                  operation: 0,
                  value: event.clientX
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateStartX"] != null &&
            typeof $steps["updateStartX"] === "object" &&
            typeof $steps["updateStartX"].then === "function"
          ) {
            $steps["updateStartX"] = await $steps["updateStartX"];
          }
        }}
        onTouchEnd={async event => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      if (
                        $state.startX - event.changedTouches[0].clientX >
                        80
                      ) {
                        switch ($state.slid) {
                          case "slid1":
                            break;
                          case "slid2":
                            $state.slid = "slid1";
                            run();
                            break;
                          case "slid3":
                            $state.slid = "slid2";
                            run();
                            break;
                        }
                      } else if (
                        event.changedTouches[0].clientX - $state.startX >
                        80
                      ) {
                        switch ($state.slid) {
                          case "slid1":
                            $state.slid = "slid2";
                            run();
                            break;
                          case "slid2":
                            $state.slid = "slid3";
                            run();
                            break;
                          case "slid3":
                            break;
                        }
                      }
                      function run() {
                        var box = document.getElementById("myBox");
                        box.classList.remove("zoom-animation");
                        void box.offsetWidth;
                        box.classList.add("zoom-animation");
                      }
                      return function run() {
                        var box = document.getElementById("myBox");
                        box.classList.remove("zoom-animation");
                        void box.offsetWidth;
                        box.classList.add("zoom-animation");
                      };
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
        onTouchStart={async event => {
          const $steps = {};

          $steps["updateStartX"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["startX"]
                  },
                  operation: 0,
                  value: event.touches[0].clientX
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateStartX"] != null &&
            typeof $steps["updateStartX"] === "object" &&
            typeof $steps["updateStartX"].then === "function"
          ) {
            $steps["updateStartX"] = await $steps["updateStartX"];
          }
        }}
      >
        <div className={classNames(projectcss.all, sty.freeBox__k9FFd)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__h1Sjj)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobile") ? "100px" : "100px"
            }
            src={{
              src: "/plasmic/liom_hamyar/images/image40.png",
              fullWidth: 128,
              fullHeight: 128,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__c7Pzm
            )}
          >
            {
              "\u0644\u06cc\u0648\u0645  | \u0647\u0645\u06cc\u0627\u0631 \u0642\u0627\u0639\u062f\u06af\u06cc"
            }
          </div>
        </div>
        {(() => {
          try {
            return $state.slid == "slid1";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.freeBox__laGek,
              "zoom-animation"
            )}
            draggable={"true"}
            id={"myBox"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__sp7Oz)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobile")
                  ? "250px"
                  : "320px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image43.svg",
                fullWidth: 388,
                fullHeight: 344,
                aspectRatio: 1.127907
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__nK0A)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobile")
                  ? "300px"
                  : "320px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image45.svg",
                fullWidth: 193,
                fullHeight: 188,
                aspectRatio: 1.026596
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___5Wg2D)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobile")
                  ? "300px"
                  : "320px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image48.svg",
                fullWidth: 175,
                fullHeight: 168,
                aspectRatio: 1.041667
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1P3IJ
              )}
            >
              <div
                className={projectcss.__wab_expr_html_text}
                dangerouslySetInnerHTML={{
                  __html: (() => {
                    try {
                      return `<strong style="color: purple;">اینجا می‌تونی از حال پارتنرت باخبر بشی و بیشتر مراقبش باشی</strong> و با آگاهی بیشتر، <strong style="color: purple;">رابطه شادتری بسازی.</strong>`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0627\u06cc\u0646\u062c\u0627 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0631\u0627\u062d\u062a\u200c\u062a\u0631 \u0627\u0632 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u062d\u0627\u0644 \u067e\u0627\u0631\u062a\u0646\u0631\u062a \u0628\u0627\u062e\u0628\u0631\u06cc \u0628\u0627\u0634\u06cc \u0648 \u0628\u0627 \u0622\u06af\u0627\u0647\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0634\u0631\u0627\u06cc\u0637\u0634\u060c \u0631\u0627\u0628\u0637\u0647\u200c\u062a\u0648\u0646 \u0634\u0627\u062f\u062a\u0631 \u0648 \u0628\u0647\u062a\u0631 \u0628\u0634\u0647. \u0627\u06cc\u0646\u0637\u0648\u0631\u06cc \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0647\u0645\u062f\u06cc\u06af\u0647 \u062d\u0645\u0627\u06cc\u062a \u06a9\u0646\u06cc\u062f \u0648 \u06a9\u0646\u0627\u0631 \u0647\u0645 \u0631\u0648\u0632\u0647\u0627\u06cc \u0628\u0647\u062a\u0631\u06cc \u0628\u0633\u0627\u0632\u06cc\u062f!";
                      }
                      throw e;
                    }
                  })()
                }}
              />
            </div>
          </Stack__>
        ) : null}
        {(() => {
          try {
            return $state.slid == "slid2";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.freeBox__iCvx9,
              "zoom-animation"
            )}
            draggable={"true"}
            id={"myBox"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__d69Jc)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobile")
                  ? "300px"
                  : "320px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image43.svg",
                fullWidth: 388,
                fullHeight: 344,
                aspectRatio: 1.127907
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__y7LC)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobile")
                  ? "250px"
                  : "320px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image45.svg",
                fullWidth: 193,
                fullHeight: 188,
                aspectRatio: 1.026596
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__kxn6W)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobile")
                  ? "300px"
                  : "320px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image48.svg",
                fullWidth: 175,
                fullHeight: 168,
                aspectRatio: 1.041667
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__i0XsN
              )}
            >
              <div
                className={projectcss.__wab_expr_html_text}
                dangerouslySetInnerHTML={{
                  __html: (() => {
                    try {
                      return `
  <strong style="color: purple;">اینجا هوای خودت رو هم داریم!</strong> وضعیت حال و احساست رو بررسی می‌کنیم تا 
  <strong style="color: purple;">با آگاهی و آرامش بیشتری ادامه بدی.</strong>
`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0627\u06cc\u0646\u062c\u0627 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0631\u0627\u062d\u062a\u200c\u062a\u0631 \u0627\u0632 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u062d\u0627\u0644 \u067e\u0627\u0631\u062a\u0646\u0631\u062a \u0628\u0627\u062e\u0628\u0631\u06cc \u0628\u0627\u0634\u06cc \u0648 \u0628\u0627 \u0622\u06af\u0627\u0647\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0634\u0631\u0627\u06cc\u0637\u0634\u060c \u0631\u0627\u0628\u0637\u0647\u200c\u062a\u0648\u0646 \u0634\u0627\u062f\u062a\u0631 \u0648 \u0628\u0647\u062a\u0631 \u0628\u0634\u0647. \u0627\u06cc\u0646\u0637\u0648\u0631\u06cc \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0647\u0645\u062f\u06cc\u06af\u0647 \u062d\u0645\u0627\u06cc\u062a \u06a9\u0646\u06cc\u062f \u0648 \u06a9\u0646\u0627\u0631 \u0647\u0645 \u0631\u0648\u0632\u0647\u0627\u06cc \u0628\u0647\u062a\u0631\u06cc \u0628\u0633\u0627\u0632\u06cc\u062f!";
                      }
                      throw e;
                    }
                  })()
                }}
              />
            </div>
          </Stack__>
        ) : null}
        {(() => {
          try {
            return $state.slid == "slid3";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.freeBox__mGssn,
              "zoom-animation"
            )}
            draggable={"true"}
            id={"myBox"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__b5XRr)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobile")
                  ? "300px"
                  : "320px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image43.svg",
                fullWidth: 388,
                fullHeight: 344,
                aspectRatio: 1.127907
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__aiZ1J)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobile")
                  ? "300px"
                  : "320px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image45.svg",
                fullWidth: 193,
                fullHeight: 188,
                aspectRatio: 1.026596
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__kjy5)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobile")
                  ? "250px"
                  : "320px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image48.svg",
                fullWidth: 175,
                fullHeight: 168,
                aspectRatio: 1.041667
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pmql3
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile") ? (
                <div
                  className={projectcss.__wab_expr_html_text}
                  dangerouslySetInnerHTML={{
                    __html: (() => {
                      try {
                        return `<strong style="color: purple;">با فعال‌سازی یادآور، تغییرات چرخه قاعدگی و توصیه‌های رابطه بهتر رو برات پیامک می‌کنیم.</strong> 
به پارتنرت هم یادآوری می‌کنیم که <strong style="color: purple;">حواسش به توام باشه.</strong>
`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0627\u06cc\u0646\u062c\u0627 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0631\u0627\u062d\u062a\u200c\u062a\u0631 \u0627\u0632 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u062d\u0627\u0644 \u067e\u0627\u0631\u062a\u0646\u0631\u062a \u0628\u0627\u062e\u0628\u0631\u06cc \u0628\u0627\u0634\u06cc \u0648 \u0628\u0627 \u0622\u06af\u0627\u0647\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0634\u0631\u0627\u06cc\u0637\u0634\u060c \u0631\u0627\u0628\u0637\u0647\u200c\u062a\u0648\u0646 \u0634\u0627\u062f\u062a\u0631 \u0648 \u0628\u0647\u062a\u0631 \u0628\u0634\u0647. \u0627\u06cc\u0646\u0637\u0648\u0631\u06cc \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0647\u0645\u062f\u06cc\u06af\u0647 \u062d\u0645\u0627\u06cc\u062a \u06a9\u0646\u06cc\u062f \u0648 \u06a9\u0646\u0627\u0631 \u0647\u0645 \u0631\u0648\u0632\u0647\u0627\u06cc \u0628\u0647\u062a\u0631\u06cc \u0628\u0633\u0627\u0632\u06cc\u062f!";
                        }
                        throw e;
                      }
                    })()
                  }}
                />
              ) : (
                <div
                  className={projectcss.__wab_expr_html_text}
                  dangerouslySetInnerHTML={{
                    __html: (() => {
                      try {
                        return `<strong style="color: purple;">با فعال‌سازی یادآور، تغییرات چرخه قاعدگی و توصیه‌های رابطه بهتر رو برات پیامک می‌کنیم.</strong> 
به پارتنرت هم یادآوری می‌کنیم که <strong style="color: purple;">حواسش به توام باشه.</strong>
`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0627\u06cc\u0646\u062c\u0627 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0631\u0627\u062d\u062a\u200c\u062a\u0631 \u0627\u0632 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u062d\u0627\u0644 \u067e\u0627\u0631\u062a\u0646\u0631\u062a \u0628\u0627\u062e\u0628\u0631\u06cc \u0628\u0627\u0634\u06cc \u0648 \u0628\u0627 \u0622\u06af\u0627\u0647\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0634\u0631\u0627\u06cc\u0637\u0634\u060c \u0631\u0627\u0628\u0637\u0647\u200c\u062a\u0648\u0646 \u0634\u0627\u062f\u062a\u0631 \u0648 \u0628\u0647\u062a\u0631 \u0628\u0634\u0647. \u0627\u06cc\u0646\u0637\u0648\u0631\u06cc \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0647\u0645\u062f\u06cc\u06af\u0647 \u062d\u0645\u0627\u06cc\u062a \u06a9\u0646\u06cc\u062f \u0648 \u06a9\u0646\u0627\u0631 \u0647\u0645 \u0631\u0648\u0632\u0647\u0627\u06cc \u0628\u0647\u062a\u0631\u06cc \u0628\u0633\u0627\u0632\u06cc\u062f!";
                        }
                        throw e;
                      }
                    })()
                  }}
                />
              )}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nGlzo)}
            >
              <Button
                data-plasmic-name={"button11"}
                data-plasmic-override={overrides.button11}
                className={classNames("__wab_instance", sty.button11)}
                color={generateStateValueProp($state, ["button11", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.dialog.opendialog = true);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button11", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                size={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "compact"
                    : undefined
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jEtYi,
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "animashen"
                      : "animashen"
                  )}
                >
                  {
                    "\u0647\u0645\u06cc\u0646 \u062d\u0627\u0644\u0627  \u06cc\u0627\u062f\u0622\u0648\u0631 \u0641\u0639\u0627\u0644 \u06a9\u0646"
                  }
                </div>
              </Button>
              <Button
                data-plasmic-name={"button12"}
                data-plasmic-override={overrides.button12}
                className={classNames("__wab_instance", sty.button12)}
                color={generateStateValueProp($state, ["button12", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (window.location.href =
                              "https://apps.liom.app/hamyar/?r=" +
                              $ctx.query.r +
                              "&m=" +
                              $ctx.query.m);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button12", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                size={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "compact"
                    : undefined
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jshbf,
                    hasVariant(globalVariants, "screen", "mobile")
                      ? ``
                      : undefined
                  )}
                >
                  {
                    "\u0648\u0631\u0648\u062f \u0628\u0647 \u0628\u0631\u0646\u0627\u0645\u0647"
                  }
                </div>
              </Button>
            </Stack__>
          </Stack__>
        ) : null}
        <section
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames(projectcss.all, sty.section)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rmy4S)}
          >
            {(() => {
              try {
                return $state.slid == "slid3";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                data-plasmic-name={"button13"}
                data-plasmic-override={overrides.button13}
                className={classNames("__wab_instance", sty.button13)}
                color={generateStateValueProp($state, ["button13", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (window.location.href =
                              "https://apps.liom.app/hamyar/?r=" +
                              $ctx.query.r +
                              "&m=" +
                              $ctx.query.m);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button13", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                size={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "compact"
                    : "compact"
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jyoN,
                    hasVariant(globalVariants, "screen", "mobile")
                      ? ``
                      : undefined
                  )}
                >
                  {
                    "\u0648\u0631\u0648\u062f \u0628\u0647 \u0628\u0631\u0646\u0627\u0645\u0647"
                  }
                </div>
              </Button>
            ) : null}
            {(() => {
              try {
                return $state.slid != "slid3";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                data-plasmic-name={"button5"}
                data-plasmic-override={overrides.button5}
                className={classNames("__wab_instance", sty.button5)}
                color={generateStateValueProp($state, ["button5", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              switch ($state.slid) {
                                case "slid1":
                                  $state.slid = "slid2";
                                  break;
                                case "slid2":
                                  $state.slid = "slid3";
                                  run1();
                                  break;
                              }
                              function run1() {
                                var box = document.getElementById("myBox");
                                box.classList.remove("zoom-animation");
                                void box.offsetWidth;
                                box.classList.add("zoom-animation");
                              }
                              return function run1() {
                                var box = document.getElementById("myBox");
                                box.classList.remove("zoom-animation");
                                void box.offsetWidth;
                                box.classList.add("zoom-animation");
                              };
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button5", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                size={"minimal"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__j0V1A
                  )}
                >
                  {"\u0628\u0639\u062f\u06cc"}
                </div>
              </Button>
            ) : null}
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__twHqb)}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__oUZm)}
                style={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? (() => {
                        try {
                          return {
                            transform:
                              $state.slid == "slid1"
                                ? "translateX(0px)"
                                : $state.slid == "slid2"
                                ? "translateX(0px)"
                                : "translateX(-38px)"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return {
                            transform:
                              $state.slid == "slid1"
                                ? "translateX(0px)"
                                : $state.slid == "slid2"
                                ? "translateX(0px)"
                                : "translateX(-48px)"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                }
              />

              <div
                className={classNames(projectcss.all, sty.freeBox__boi5L)}
                style={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? (() => {
                        try {
                          return {
                            transform:
                              $state.slid == "slid1"
                                ? "translateX(0px)"
                                : $state.slid == "slid2"
                                ? "translateX(-38px)"
                                : "translateX(-38px)"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return {
                            transform:
                              $state.slid == "slid1"
                                ? "translateX(0px)"
                                : $state.slid == "slid2"
                                ? "translateX(-48px)"
                                : "translateX(-48px)"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                }
              />

              <div
                className={classNames(projectcss.all, sty.freeBox__pHr7Z)}
                style={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? (() => {
                        try {
                          return {
                            transform:
                              $state.slid == "slid1"
                                ? "translateX(0px)"
                                : $state.slid == "slid2"
                                ? "translateX(38px)"
                                : "translateX(76px)"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return {
                            transform:
                              $state.slid == "slid1"
                                ? "translateX(0px)"
                                : $state.slid == "slid2"
                                ? "translateX(48px)"
                                : "translateX(96px)"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                }
              />
            </Stack__>
            {(() => {
              try {
                return $state.slid != "slid3";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                data-plasmic-name={"button4"}
                data-plasmic-override={overrides.button4}
                className={classNames("__wab_instance", sty.button4)}
                color={generateStateValueProp($state, ["button4", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSlid"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["slid"]
                          },
                          operation: 0,
                          value: "slid3"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlid"] != null &&
                    typeof $steps["updateSlid"] === "object" &&
                    typeof $steps["updateSlid"].then === "function"
                  ) {
                    $steps["updateSlid"] = await $steps["updateSlid"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button4", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                size={"minimal"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sb4Z8
                  )}
                >
                  {"\u0631\u062f \u0634\u062f\u0646"}
                </div>
              </Button>
            ) : null}
          </Stack__>
        </section>
        <Dialog
          data-plasmic-name={"dialog"}
          data-plasmic-override={overrides.dialog}
          className={classNames("__wab_instance", sty.dialog)}
          onOpendialogChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog", "opendialog"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          opendialog={generateStateValueProp($state, ["dialog", "opendialog"])}
        >
          <ApiRequest
            data-plasmic-name={"shop"}
            data-plasmic-override={overrides.shop}
            body={(() => {
              try {
                return { refCode: $ctx.query.r };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.shop)}
            config={(() => {
              try {
                return {
                  headers: {
                    "Content-Type": "application/json",
                    Authorization: $state.token
                  }
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qR4Z1
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div className={classNames(projectcss.all, sty.freeBox__hkQt0)}>
                <Icon115Icon
                  className={classNames(projectcss.all, sty.svg__cOpha)}
                  role={"img"}
                />
              </div>
            }
            method={"POST"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shop", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shop", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shop", "data"]).apply(
                null,
                eventArgs
              );
            }}
            url={"https://n8n.staas.ir/webhook/hamyar/shop"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__nFtal)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bA6GH)}
                dir={"rtl"}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__g17O8)}
                />

                <DialogTitle
                  data-plasmic-name={"dialogTitle"}
                  data-plasmic-override={overrides.dialogTitle}
                  className={classNames("__wab_instance", sty.dialogTitle)}
                >
                  <h5
                    data-plasmic-name={"h5"}
                    data-plasmic-override={overrides.h5}
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      sty.h5
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dGzur
                      )}
                    >
                      {
                        "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9"
                      }
                    </div>
                  </h5>
                </DialogTitle>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vpMn)}
                dir={"rtl"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zOBN
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.shop.data.result.find(
                          item => item.selected === 1
                        ).descc;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "You can insert dialog body content here in this slot.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__u5XtQ)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hB3Iq)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tIkf2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y44Cf
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.shop.data.result.find(
                                item => item.selected === 1
                              ).topBadge;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kkm1I)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___774Wc
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.shop.data.result.find(
                                item => item.selected === 1
                              ).title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__plloH
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0Vvmp
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nnTrr
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.shop.data.result
                                    .find(item => item.selected === 1)
                                    .fullPrice.toLocaleString();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ha9Xw
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    $state.shop.data.result
                                      .find(item => item.selected === 1)
                                      .price.toLocaleString() + "  تومان "
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        {(() => {
                          try {
                            return $state.shop.data.result.find(
                              item => item.selected === 1
                            ).badge
                              ? true
                              : false;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fbllt
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__khwW2
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.shop.data.result.find(
                                      item => item.selected === 1
                                    ).badge;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "1";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        ) : null}
                      </div>
                    </div>
                    {(() => {
                      try {
                        return !$state.discountBox;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__b5Brz
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateDiscountBox"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["discountBox"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDiscountBox"] != null &&
                            typeof $steps["updateDiscountBox"] === "object" &&
                            typeof $steps["updateDiscountBox"].then ===
                              "function"
                          ) {
                            $steps["updateDiscountBox"] = await $steps[
                              "updateDiscountBox"
                            ];
                          }
                        }}
                      >
                        {
                          "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                        }
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.discountBox;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cUNv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___3Uh8C
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: false,
                              autoFocus: false,
                              bordered: false,
                              className: classNames(
                                "__wab_instance",
                                sty.input
                              ),
                              disabled: false,
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              placeholder:
                                "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                              prefix: (
                                <Icon10Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___92Qe1
                                  )}
                                  role={"img"}
                                />
                              ),

                              readOnly: false,
                              size: "small",
                              suffix: null,
                              value: generateStateValueProp($state, [
                                "input",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input"}
                                data-plasmic-override={overrides.input}
                                {...child$Props}
                              />
                            );
                          })()}
                          {(() => {
                            try {
                              return $state.discountOk;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___9YNd5
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateDiscountOk"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["discountOk"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateDiscountOk"] != null &&
                                  typeof $steps["updateDiscountOk"] ===
                                    "object" &&
                                  typeof $steps["updateDiscountOk"].then ===
                                    "function"
                                ) {
                                  $steps["updateDiscountOk"] = await $steps[
                                    "updateDiscountOk"
                                  ];
                                }
                              }}
                            />
                          ) : null}
                        </div>
                        <Button
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          color={generateStateValueProp($state, [
                            "button",
                            "color"
                          ])}
                          isDisabled={(() => {
                            try {
                              return $state.input.value == "" ||
                                $state.input.value == null
                                ? true
                                : false;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateDiscountCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["discountCode"]
                                    },
                                    operation: 0,
                                    value: $state.input.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDiscountCode"] != null &&
                              typeof $steps["updateDiscountCode"] ===
                                "object" &&
                              typeof $steps["updateDiscountCode"].then ===
                                "function"
                            ) {
                              $steps["updateDiscountCode"] = await $steps[
                                "updateDiscountCode"
                              ];
                            }

                            $steps["updateDiscountOk"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["discountOk"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDiscountOk"] != null &&
                              typeof $steps["updateDiscountOk"] === "object" &&
                              typeof $steps["updateDiscountOk"].then ===
                                "function"
                            ) {
                              $steps["updateDiscountOk"] = await $steps[
                                "updateDiscountOk"
                              ];
                            }
                          }}
                          onColorChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button",
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          size={"compact"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hctl4
                            )}
                          >
                            {"\u062a\u0627\u06cc\u06cc\u062f"}
                          </div>
                        </Button>
                      </Stack__>
                    ) : null}
                    <Button
                      data-plasmic-name={"button2"}
                      data-plasmic-override={overrides.button2}
                      className={classNames("__wab_instance", sty.button2)}
                      color={generateStateValueProp($state, [
                        "button2",
                        "color"
                      ])}
                      endIcon={
                        <Icon12Icon
                          className={classNames(projectcss.all, sty.svg__nYxIw)}
                          role={"img"}
                        />
                      }
                      isDisabled={(() => {
                        try {
                          return $state.loadin;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      loading={(() => {
                        try {
                          return $state.loadin;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoadin"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadin"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadin"] != null &&
                          typeof $steps["updateLoadin"] === "object" &&
                          typeof $steps["updateLoadin"].then === "function"
                        ) {
                          $steps["updateLoadin"] = await $steps["updateLoadin"];
                        }

                        $steps["runCode2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["buyId"]
                                },
                                operation: 0,
                                value: $state.shop.data.result.find(
                                  item => item.selected === 1
                                ).id
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode2"] != null &&
                          typeof $steps["runCode2"] === "object" &&
                          typeof $steps["runCode2"].then === "function"
                        ) {
                          $steps["runCode2"] = await $steps["runCode2"];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        id: $state.buyId,
                                        offCode: $state.discountCode,
                                        refCode: $ctx.query.r,
                                        redirectUrl:
                                          "https://apps.liom.app/shop-result?r=" +
                                          $ctx.query.r +
                                          "&m=" +
                                          $ctx.query.m +
                                          "&buyId=" +
                                          $state.buyId +
                                          "&offCode=" +
                                          $state.discountCode +
                                          "&valueShop=" +
                                          $state.shop.data.result[
                                            $state.selectedShop
                                          ].type +
                                          "-" +
                                          $state.shop.data.result[
                                            $state.selectedShop
                                          ].value +
                                          "&price=" +
                                          $state.shop.data.result[
                                            $state.selectedShop
                                          ].price +
                                          "&manId=" +
                                          $state.user.data.result.man.id
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  (() => {
                                    try {
                                      return {
                                        headers: {
                                          "Content-Type": "application/json",
                                          Authorization: $state.token
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["runCode"] =
                          $steps.invokeGlobalAction.data.success == true &&
                          $steps.invokeGlobalAction.data.result != false
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return window.open(
                                      $steps.invokeGlobalAction.data.result,
                                      "_system"
                                    );
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["updateLoadin2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadin"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadin2"] != null &&
                          typeof $steps["updateLoadin2"] === "object" &&
                          typeof $steps["updateLoadin2"].then === "function"
                        ) {
                          $steps["updateLoadin2"] = await $steps[
                            "updateLoadin2"
                          ];
                        }

                        $steps["invokeGlobalAction2"] =
                          $steps.invokeGlobalAction.data.success == false ||
                          $steps.invokeGlobalAction.data.result == false
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button2",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rrJFl
                        )}
                      >
                        {
                          "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                        }
                      </div>
                    </Button>
                    {(() => {
                      try {
                        return $state.shop.data.result.length > 1;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p__rf8Ho
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateDialog2Opendialog"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dialog2", "opendialog"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDialog2Opendialog"] != null &&
                            typeof $steps["updateDialog2Opendialog"] ===
                              "object" &&
                            typeof $steps["updateDialog2Opendialog"].then ===
                              "function"
                          ) {
                            $steps["updateDialog2Opendialog"] = await $steps[
                              "updateDialog2Opendialog"
                            ];
                          }
                        }}
                      >
                        {
                          "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                        }
                      </p>
                    ) : null}
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__upWkI
                      )}
                    >
                      {
                        "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                      }
                    </p>
                  </Stack__>
                </div>
              </Stack__>
            </div>
            <Dialog
              data-plasmic-name={"dialog2"}
              data-plasmic-override={overrides.dialog2}
              className={classNames("__wab_instance", sty.dialog2)}
              onOpendialogChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "dialog2",
                  "opendialog"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              opendialog={generateStateValueProp($state, [
                "dialog2",
                "opendialog"
              ])}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jtkZ)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.shop.data.result;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.subscription),
                      clickitem: generateStateValueProp($state, [
                        "subscription",
                        __plasmic_idx_0,
                        "clickitem"
                      ]),
                      discount: generateStateValueProp($state, [
                        "subscription",
                        __plasmic_idx_0,
                        "discount"
                      ]),
                      fullprice: generateStateValueProp($state, [
                        "subscription",
                        __plasmic_idx_0,
                        "fullprice"
                      ]),
                      key: currentIndex,
                      onClick: async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.selectedShop = currentIndex;
                                    return ($state.buyId = currentItem.id);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      },
                      onClickitemChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "clickitem"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      onDiscountChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "discount"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      onFullpriceChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "fullprice"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      onPriceChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "price"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      onTitleChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "subscription",
                          __plasmic_idx_0,
                          "title"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      price: generateStateValueProp($state, [
                        "subscription",
                        __plasmic_idx_0,
                        "price"
                      ]),
                      title: generateStateValueProp($state, [
                        "subscription",
                        __plasmic_idx_0,
                        "title"
                      ])
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "subscription[].clickitem",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return currentIndex == $state.selectedShop;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })()
                        },
                        {
                          name: "subscription[].title",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return currentItem.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                        },
                        {
                          name: "subscription[].price",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return currentItem.price.toLocaleString();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return 120000;
                                }
                                throw e;
                              }
                            })()
                        },
                        {
                          name: "subscription[].discount",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return currentItem.badge;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                        },
                        {
                          name: "subscription[].fullprice",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return currentItem.fullPrice.toLocaleString();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return 0;
                                }
                                throw e;
                              }
                            })()
                        }
                      ],
                      [__plasmic_idx_0]
                    );
                    return (
                      <Subscription
                        data-plasmic-name={"subscription"}
                        data-plasmic-override={overrides.subscription}
                        {...child$Props}
                      />
                    );
                  })();
                })}
                <Button
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames("__wab_instance", sty.button3)}
                  color={generateStateValueProp($state, ["button3", "color"])}
                  endIcon={
                    <Icon12Icon
                      className={classNames(projectcss.all, sty.svg__egsL0)}
                      role={"img"}
                    />
                  }
                  isDisabled={(() => {
                    try {
                      return $state.loadin;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  loading={(() => {
                    try {
                      return $state.loadin;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadin"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadin"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadin"] != null &&
                      typeof $steps["updateLoadin"] === "object" &&
                      typeof $steps["updateLoadin"].then === "function"
                    ) {
                      $steps["updateLoadin"] = await $steps["updateLoadin"];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    id: $state.buyId,
                                    offCode: $state.discountCode,
                                    refCode: $ctx.query.r,
                                    redirectUrl:
                                      "https://apps.liom.app/shop-result?r=" +
                                      $ctx.query.r +
                                      "&m=" +
                                      $ctx.query.m +
                                      "&buyId=" +
                                      $state.buyId +
                                      "&offCode=" +
                                      $state.discountCode +
                                      "&valueShop=" +
                                      $state.shop.data.result[
                                        $state.selectedShop
                                      ].type +
                                      "-" +
                                      $state.shop.data.result[
                                        $state.selectedShop
                                      ].value +
                                      "&price=" +
                                      $state.shop.data.result[
                                        $state.selectedShop
                                      ].price +
                                      "&manId=" +
                                      $state.user.data.result.man.id
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization: $state.token
                                    }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["runCode"] =
                      $steps.invokeGlobalAction.data.success == true &&
                      $steps.invokeGlobalAction.data.result != false
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return window.open(
                                  $steps.invokeGlobalAction.data.result,
                                  "_system"
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["updateLoadin2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadin"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadin2"] != null &&
                      typeof $steps["updateLoadin2"] === "object" &&
                      typeof $steps["updateLoadin2"].then === "function"
                    ) {
                      $steps["updateLoadin2"] = await $steps["updateLoadin2"];
                    }

                    $steps["invokeGlobalAction2"] =
                      $steps.invokeGlobalAction.data.success == false ||
                      $steps.invokeGlobalAction.data.result == false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f."
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lei1W
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            "فعال سازی " +
                            $state.shop.data.result[$state.selectedShop].title
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Button>
              </Stack__>
            </Dialog>
          </ApiRequest>
        </Dialog>
        <ApiRequest
          data-plasmic-name={"user"}
          data-plasmic-override={overrides.user}
          className={classNames("__wab_instance", sty.user)}
          config={(() => {
            try {
              return {
                headers: {
                  "Content-Type": "application/json"
                }
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          errorDisplay={null}
          loadingDisplay={null}
          method={"GET"}
          onError={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["user", "error"]).apply(
              null,
              eventArgs
            );
          }}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["user", "loading"]).apply(
              null,
              eventArgs
            );
          }}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["user", "data"]).apply(
              null,
              eventArgs
            );

            (async data => {
              const $steps = {};

              $steps["updateToken"] = (
                $state.user.data?.result?.token ? true : false
              )
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["token"]
                      },
                      operation: 0,
                      value: $state.user.data.result.token
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateToken"] != null &&
                typeof $steps["updateToken"] === "object" &&
                typeof $steps["updateToken"].then === "function"
              ) {
                $steps["updateToken"] = await $steps["updateToken"];
              }
            }).apply(null, eventArgs);
          }}
          params={(() => {
            try {
              return {
                r: new URLSearchParams(window.location.search).get("r"),
                m: new URLSearchParams(window.location.search).get("m")
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          url={"https://n8n.staas.ir/webhook/hamyar/privateCalenderV2"}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "button11",
    "button12",
    "section",
    "button13",
    "button5",
    "button4",
    "dialog",
    "shop",
    "dialogTitle",
    "h5",
    "input",
    "button",
    "button2",
    "dialog2",
    "subscription",
    "button3",
    "user"
  ],
  button11: ["button11"],
  button12: ["button12"],
  section: ["section", "button13", "button5", "button4"],
  button13: ["button13"],
  button5: ["button5"],
  button4: ["button4"],
  dialog: [
    "dialog",
    "shop",
    "dialogTitle",
    "h5",
    "input",
    "button",
    "button2",
    "dialog2",
    "subscription",
    "button3"
  ],
  shop: [
    "shop",
    "dialogTitle",
    "h5",
    "input",
    "button",
    "button2",
    "dialog2",
    "subscription",
    "button3"
  ],
  dialogTitle: ["dialogTitle", "h5"],
  h5: ["h5"],
  input: ["input"],
  button: ["button"],
  button2: ["button2"],
  dialog2: ["dialog2", "subscription", "button3"],
  subscription: ["subscription"],
  button3: ["button3"],
  user: ["user"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button11: typeof Button;
  button12: typeof Button;
  section: "section";
  button13: typeof Button;
  button5: typeof Button;
  button4: typeof Button;
  dialog: typeof Dialog;
  shop: typeof ApiRequest;
  dialogTitle: typeof DialogTitle;
  h5: "h5";
  input: typeof AntdInput;
  button: typeof Button;
  button2: typeof Button;
  dialog2: typeof Dialog;
  subscription: typeof Subscription;
  button3: typeof Button;
  user: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIntro__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIntro__VariantsArgs;
    args?: PlasmicIntro__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIntro__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicIntro__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIntro__ArgProps,
          internalVariantPropNames: PlasmicIntro__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIntro__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIntro";
  } else {
    func.displayName = `PlasmicIntro.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicIntro = Object.assign(
  // Top-level PlasmicIntro renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    button11: makeNodeComponent("button11"),
    button12: makeNodeComponent("button12"),
    section: makeNodeComponent("section"),
    button13: makeNodeComponent("button13"),
    button5: makeNodeComponent("button5"),
    button4: makeNodeComponent("button4"),
    dialog: makeNodeComponent("dialog"),
    shop: makeNodeComponent("shop"),
    dialogTitle: makeNodeComponent("dialogTitle"),
    h5: makeNodeComponent("h5"),
    input: makeNodeComponent("input"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    dialog2: makeNodeComponent("dialog2"),
    subscription: makeNodeComponent("subscription"),
    button3: makeNodeComponent("button3"),
    user: makeNodeComponent("user"),

    // Metadata about props expected for PlasmicIntro
    internalVariantProps: PlasmicIntro__VariantProps,
    internalArgProps: PlasmicIntro__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIntro;
/* prettier-ignore-end */
