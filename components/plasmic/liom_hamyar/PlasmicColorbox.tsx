/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: DMT3tgr7OiU1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MenuIcon from "../../MenuIcon"; // plasmic-import: JBF-V8Q5mpWl/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicColorbox.module.css"; // plasmic-import: DMT3tgr7OiU1/css

createPlasmicElementProxy;

export type PlasmicColorbox__VariantMembers = {
  color: "green";
};
export type PlasmicColorbox__VariantsArgs = {
  color?: SingleChoiceArg<"green">;
};
type VariantPropType = keyof PlasmicColorbox__VariantsArgs;
export const PlasmicColorbox__VariantProps = new Array<VariantPropType>(
  "color"
);

export type PlasmicColorbox__ArgsType = { currentItem?: any };
type ArgPropType = keyof PlasmicColorbox__ArgsType;
export const PlasmicColorbox__ArgProps = new Array<ArgPropType>("currentItem");

export type PlasmicColorbox__OverridesType = {
  root?: Flex__<"div">;
  menuIcon?: Flex__<typeof MenuIcon>;
};

export interface DefaultColorboxProps {
  currentItem?: any;
  color?: SingleChoiceArg<"green">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicColorbox__RenderFunc(props: {
  variants: PlasmicColorbox__VariantsArgs;
  args: PlasmicColorbox__ArgsType;
  overrides: PlasmicColorbox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        { [sty.rootcolor_green]: hasVariant($state, "color", "green") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__sw5JM, {
          [sty.freeBoxcolor_green__sw5JMpy28H]: hasVariant(
            $state,
            "color",
            "green"
          )
        })}
      >
        <MenuIcon
          data-plasmic-name={"menuIcon"}
          data-plasmic-override={overrides.menuIcon}
          className={classNames("__wab_instance", sty.menuIcon)}
          color={(() => {
            try {
              return (() => {
                switch ($props.currentItem.icon) {
                  case "telegram":
                    return "blue";
                  case "sms":
                    return "fuchsia";
                  case "notif":
                    return "warning";
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "blue";
              }
              throw e;
            }
          })()}
          icons={(() => {
            try {
              return $props.currentItem.icon;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
          size={"_25"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rbm3F
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.currentItem.name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__w9MGi)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__qGd1Z,
            {
              [sty.textcolor_green__qGd1Zpy28H]: hasVariant(
                $state,
                "color",
                "green"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return (() => {
                  {
                    return $props.currentItem.price === 0
                      ? "رایگان"
                      : $props.currentItem.price.toLocaleString();
                  }
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mHvmq,
            {
              [sty.textcolor_green__mHvmqpy28H]: hasVariant(
                $state,
                "color",
                "green"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return "تومان";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "menuIcon"],
  menuIcon: ["menuIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  menuIcon: typeof MenuIcon;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicColorbox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicColorbox__VariantsArgs;
    args?: PlasmicColorbox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicColorbox__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicColorbox__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicColorbox__ArgProps,
          internalVariantPropNames: PlasmicColorbox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicColorbox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicColorbox";
  } else {
    func.displayName = `PlasmicColorbox.${nodeName}`;
  }
  return func;
}

export const PlasmicColorbox = Object.assign(
  // Top-level PlasmicColorbox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuIcon: makeNodeComponent("menuIcon"),

    // Metadata about props expected for PlasmicColorbox
    internalVariantProps: PlasmicColorbox__VariantProps,
    internalArgProps: PlasmicColorbox__ArgProps
  }
);

export default PlasmicColorbox;
/* prettier-ignore-end */
