// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: RNdVvXH9pAWv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import TabWeek from "../../TabWeek"; // plasmic-import: IgINnoB13B8X/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicWeekByWeek.module.css"; // plasmic-import: RNdVvXH9pAWv/css

createPlasmicElementProxy;

export type PlasmicWeekByWeek__VariantMembers = {};
export type PlasmicWeekByWeek__VariantsArgs = {};
type VariantPropType = keyof PlasmicWeekByWeek__VariantsArgs;
export const PlasmicWeekByWeek__VariantProps = new Array<VariantPropType>();

export type PlasmicWeekByWeek__ArgsType = {};
type ArgPropType = keyof PlasmicWeekByWeek__ArgsType;
export const PlasmicWeekByWeek__ArgProps = new Array<ArgPropType>();

export type PlasmicWeekByWeek__OverridesType = {
  root?: Flex__<"div">;
  tabWeek?: Flex__<typeof TabWeek>;
  img?: Flex__<typeof PlasmicImg__>;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultWeekByWeekProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWeekByWeek__RenderFunc(props: {
  variants: PlasmicWeekByWeek__VariantsArgs;
  args: PlasmicWeekByWeek__ArgsType;
  overrides: PlasmicWeekByWeek__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedWeek",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "babySize",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          { h: "1.9", w: "1" },
          { h: "2.3", w: "2" },
          { h: "3.1", w: "2" },
          { h: "4.1", w: "7" },
          { h: "5.4", w: "14" },
          { h: "7.4", w: "23" },
          { h: "8.7", w: "43" },
          { h: "10.1", w: "70" },
          { h: "11.6", w: "100" },
          { h: "13", w: "140" },
          { h: "14.2", w: "190" },
          { h: "15.3", w: "240" },
          { h: "25.6", w: "300" },
          { h: "26.7", w: "360" },
          { h: "27.8", w: "430" },
          { h: "28.9", w: "500" },
          { h: "30", w: "600" },
          { h: "34.6", w: "660" },
          { h: "35.6", w: "760" },
          { h: "36.6", w: "875" },
          { h: "37.6", w: "1" },
          { h: "38.6", w: "1.2" },
          { h: "39.9", w: "1.3" },
          { h: "41.1", w: "1.5" },
          { h: "42.4", w: "1.7" },
          { h: "43.7", w: "1.9" },
          { h: "45", w: "2.1" },
          { h: "46.2", w: "2.4" },
          { h: "47.4", w: "2.6" },
          { h: "48.6", w: "2.9" },
          { h: "49.8", w: "3.1" },
          { h: "50.7", w: "3.3" },
          { h: "51.2", w: "3.5" },
          { h: "52.2", w: "3.8" }
        ]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__qDyNj)}>
            <div className={classNames(projectcss.all, sty.freeBox___9BnK7)}>
              <div className={classNames(projectcss.all, sty.freeBox__khEUf)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return Array.from(
                        { length: 40 },
                        (_, index) => index + 1
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <TabWeek
                      data-plasmic-name={"tabWeek"}
                      data-plasmic-override={overrides.tabWeek}
                      className={classNames("__wab_instance", sty.tabWeek)}
                      currentItem={currentItem}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateSelectedWeek"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedWeek"]
                                },
                                operation: 0,
                                value: currentItem
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSelectedWeek"] != null &&
                          typeof $steps["updateSelectedWeek"] === "object" &&
                          typeof $steps["updateSelectedWeek"].then ===
                            "function"
                        ) {
                          $steps["updateSelectedWeek"] = await $steps[
                            "updateSelectedWeek"
                          ];
                        }
                      }}
                      selected={(() => {
                        try {
                          return currentItem == $state.selectedWeek;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__p84Rg)}>
              <div className={classNames(projectcss.all, sty.freeBox__r6HVe)}>
                <div className={classNames(projectcss.all, sty.freeBox__uySe8)}>
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={"170"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return (() => {
                          var week;
                          if ($state.selectedWeek < 10)
                            week = "0" + $state.selectedWeek;
                          else week = "" + $state.selectedWeek;
                          return (
                            "https://liom.storage.c2.liara.space/config/pregnancy/week" +
                            week +
                            ".png"
                          );
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    width={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "160"
                        : "170"
                    }
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__qlqYc)}>
                {(() => {
                  try {
                    return true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__gtrCt)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Aqi
                      )}
                    >
                      {"\u0648\u0632\u0646"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o6Jcb
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              $state.babySize[$state.selectedWeek].w +
                              ($state.selectedWeek >= 27
                                ? " کیلوگرم "
                                : " گرم ")
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Stack__>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tSlBm)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pmB
                    )}
                  >
                    {"\u0627\u0646\u062f\u0627\u0632\u0647"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gPoKb
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.babySize[$state.selectedWeek - 1].h +
                            " سانتی متر "
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__q9GLq)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__frIaN
                    )}
                  >
                    {"\u062a\u0627 \u0632\u0627\u06cc\u0645\u0627\u0646"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zr2Df
                    )}
                  >
                    {"Enter some text"}
                  </div>
                </Stack__>
              </div>
            </div>
          </div>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            children={null}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iO2
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nszt0
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={generateStateOnChangeProp($state, ["apiRequest", "error"])}
            onLoading={generateStateOnChangeProp($state, [
              "apiRequest",
              "loading"
            ])}
            onSuccess={generateStateOnChangeProp($state, [
              "apiRequest",
              "data"
            ])}
            params={(() => {
              try {
                return {
                  token: $ctx.query.token
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/info"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "tabWeek", "img", "apiRequest"],
  tabWeek: ["tabWeek"],
  img: ["img"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tabWeek: typeof TabWeek;
  img: typeof PlasmicImg__;
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWeekByWeek__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWeekByWeek__VariantsArgs;
    args?: PlasmicWeekByWeek__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWeekByWeek__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicWeekByWeek__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWeekByWeek__ArgProps,
          internalVariantPropNames: PlasmicWeekByWeek__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWeekByWeek__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWeekByWeek";
  } else {
    func.displayName = `PlasmicWeekByWeek.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicWeekByWeek = Object.assign(
  // Top-level PlasmicWeekByWeek renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    tabWeek: makeNodeComponent("tabWeek"),
    img: makeNodeComponent("img"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicWeekByWeek
    internalVariantProps: PlasmicWeekByWeek__VariantProps,
    internalArgProps: PlasmicWeekByWeek__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicWeekByWeek;
/* prettier-ignore-end */
