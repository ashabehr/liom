/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: gkIHYHT9LpaR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Select from "../../Select"; // plasmic-import: bZbA9s6rXlzJ/component
import MenuItem from "../../MenuItem"; // plasmic-import: ByiQVrRGhm2K/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicShopComponent.module.css"; // plasmic-import: gkIHYHT9LpaR/css

import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicShopComponent__VariantMembers = {};
export type PlasmicShopComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicShopComponent__VariantsArgs;
export const PlasmicShopComponent__VariantProps = new Array<VariantPropType>();

export type PlasmicShopComponent__ArgsType = { token?: string };
type ArgPropType = keyof PlasmicShopComponent__ArgsType;
export const PlasmicShopComponent__ArgProps = new Array<ArgPropType>("token");

export type PlasmicShopComponent__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  select?: Flex__<typeof Select>;
  button?: Flex__<typeof Button>;
};

export interface DefaultShopComponentProps {
  token?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShopComponent__RenderFunc(props: {
  variants: PlasmicShopComponent__VariantsArgs;
  args: PlasmicShopComponent__ArgsType;
  overrides: PlasmicShopComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          token:
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImI5MmFlY2UzLWIyOTItNGEwOS1hZDc0LTIxZTA4NzQxZGNlNiIsInR5cGUiOiJzZXNzaW9uIn0.wa2BGGpGdL49QTwXPhcp0xHwW3h9KCp5nPVJ_fSOD5U"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "pms_sms_pack_2"
      },
      {
        path: "shopList",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "itemselected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__a4DZq)}>
        <section className={classNames(projectcss.all, sty.section__r9Pg)}>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/get/pmsSms",
                        (() => {
                          try {
                            return {
                              type: $state.select.value,
                              authorization: $props.token
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updateShopList"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["shopList"]
                      },
                      operation: 0,
                      value: $steps.invokeGlobalAction.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateShopList"] != null &&
                typeof $steps["updateShopList"] === "object" &&
                typeof $steps["updateShopList"].then === "function"
              ) {
                $steps["updateShopList"] = await $steps["updateShopList"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return console.log($state.shopList);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />

          <div className={classNames(projectcss.all, sty.freeBox___0HLqo)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kuHww
              )}
            >
              {
                "\u062f\u0648\u0633\u062a \u062f\u0627\u0631\u06cc \u0686\u0646\u062f\u062a\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u062f\u0631 \u0631\u0648\u0632 \u0628\u0631\u0627\u06cc \u0647\u0645\u0633\u0631\u062a \u0627\u0631\u0633\u0627\u0644 \u0628\u0634\u0647\u061f"
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__andOg)}>
              <Select
                data-plasmic-name={"select"}
                data-plasmic-override={overrides.select}
                className={classNames("__wab_instance", sty.select)}
                description={null}
                isOpen={generateStateValueProp($state, ["select", "isOpen"])}
                items={
                  <React.Fragment>
                    <MenuItem
                      label={"   \u06f3 \u067e\u06cc\u0627\u0645\u06a9"}
                      value={"pms_sms_pack_3"}
                    />

                    <MenuItem
                      label={"   \u06f2 \u067e\u06cc\u0627\u0645\u06a9"}
                      value={"pms_sms_pack_2"}
                    />

                    <MenuItem
                      label={"   \u06f1 \u067e\u06cc\u0627\u0645\u06a9 "}
                      value={"pms_sms_pack_1"}
                    />
                  </React.Fragment>
                }
                label={null}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select", "value"]).apply(
                    null,
                    eventArgs
                  );

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }

                  (async val => {
                    const $steps = {};

                    $steps["invokeGlobalAction"] = $state.select.isOpen
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "https://n8n.staas.ir/webhook/get/pmsSms",
                              (() => {
                                try {
                                  return {
                                    type: $state.select.value,
                                    authorization: $props.token
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateShopList"] = $state.select.isOpen
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["shopList"]
                            },
                            operation: 0,
                            value: $steps.invokeGlobalAction?.data
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateShopList"] != null &&
                      typeof $steps["updateShopList"] === "object" &&
                      typeof $steps["updateShopList"].then === "function"
                    ) {
                      $steps["updateShopList"] = await $steps["updateShopList"];
                    }
                  }).apply(null, eventArgs);
                }}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select", "isOpen"]).apply(
                    null,
                    eventArgs
                  );

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={"   \u06f2 \u067e\u06cc\u0627\u0645\u06a9"}
                showLabel={false}
                value={generateStateValueProp($state, ["select", "value"])}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__k0Rnt)}>
            <div className={classNames(projectcss.all, sty.freeBox__q7AKi)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__twwCj
                )}
              >
                {
                  "\u0645\u062f\u062a \u0632\u0645\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646 :"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__akPvk)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.shopList.result.items.length
                        ? $state.shopList.result.items
                        : [];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9Kgo1
                      )}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sdjFw
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateItemselected"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["itemselected"]
                                  },
                                  operation: 0,
                                  value: currentIndex
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateItemselected"] != null &&
                            typeof $steps["updateItemselected"] === "object" &&
                            typeof $steps["updateItemselected"].then ===
                              "function"
                          ) {
                            $steps["updateItemselected"] = await $steps[
                              "updateItemselected"
                            ];
                          }
                        }}
                        style={(() => {
                          try {
                            return {
                              "background-color":
                                $state.itemselected == currentIndex
                                  ? "#FFFBFF"
                                  : "transparent",
                              border:
                                $state.itemselected == currentIndex
                                  ? "1px solid #8254C6"
                                  : "1px solid #D1D5DB",
                              "border-radius": "8px"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ftdIu
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.text;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </section>
      </div>
      <section className={classNames(projectcss.all, sty.section___4Iz1I)}>
        <div className={classNames(projectcss.all, sty.freeBox__y2Bqc)}>
          <div className={classNames(projectcss.all, sty.freeBox__zso2O)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__guNJc
              )}
            >
              {
                "\u0633\u0648\u062f \u0634\u0645\u0627 \u0627\u0632 \u0627\u06cc\u0646 \u062e\u0631\u06cc\u062f:"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2He9A
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      (
                        $state.shopList.result.items[$state.itemselected]
                          .fullPrice -
                        $state.shopList.result.items[$state.itemselected].price
                      ).toLocaleString() + "  تومان "
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ez3Uk)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___525A
              )}
            >
              {"\u0645\u0628\u0644\u063a \u06a9\u0644:"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1L5QW
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      $state.shopList.result.items[
                        $state.itemselected
                      ].fullPrice.toLocaleString() + "  تومان "
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            color={generateStateValueProp($state, ["button", "color"])}
            onColorChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button", "color"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zxUuR
              )}
            >
              {"\u067e\u0631\u062f\u0627\u062e\u062a"}
            </div>
          </Button>
        </div>
      </section>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sideEffect", "select", "button"],
  sideEffect: ["sideEffect"],
  select: ["select"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  select: typeof Select;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShopComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShopComponent__VariantsArgs;
    args?: PlasmicShopComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShopComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShopComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShopComponent__ArgProps,
          internalVariantPropNames: PlasmicShopComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShopComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShopComponent";
  } else {
    func.displayName = `PlasmicShopComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicShopComponent = Object.assign(
  // Top-level PlasmicShopComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    select: makeNodeComponent("select"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicShopComponent
    internalVariantProps: PlasmicShopComponent__VariantProps,
    internalArgProps: PlasmicShopComponent__ArgProps
  }
);

export default PlasmicShopComponent;
/* prettier-ignore-end */
