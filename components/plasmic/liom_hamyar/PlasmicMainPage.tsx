/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: mwylH28Efyne

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Calendar2 from "../../Calendar2"; // plasmic-import: g_La9K58nhrs/component
import Reminder from "../../Reminder"; // plasmic-import: 3v9tn6uUJCPM/component
import SelfCare2 from "../../SelfCare2"; // plasmic-import: q5NYbKztjYXR/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMainPage.module.css"; // plasmic-import: mwylH28Efyne/css

createPlasmicElementProxy;

export type PlasmicMainPage__VariantMembers = {
  page: "calendar" | "self" | "reminder";
};
export type PlasmicMainPage__VariantsArgs = {
  page?: SingleChoiceArg<"calendar" | "self" | "reminder">;
};
type VariantPropType = keyof PlasmicMainPage__VariantsArgs;
export const PlasmicMainPage__VariantProps = new Array<VariantPropType>("page");

export type PlasmicMainPage__ArgsType = {
  setting?: () => void;
  editTime?: string;
  onEditTimeChange?: (val: string) => void;
  userInfo?: any;
  onUserInfoChange?: (val: string) => void;
  token?: string;
  onTokenChange?: (val: string) => void;
  fuchereCycle?: (event: any) => void;
  reminderCategory?: any;
  onReminderCategoryChange?: (val: any) => void;
  remind?: any;
  onRemindChange?: (val: string) => void;
  refresh?: string;
  onRefreshChange?: (val: string) => void;
  reminderSetting?: () => void;
};
type ArgPropType = keyof PlasmicMainPage__ArgsType;
export const PlasmicMainPage__ArgProps = new Array<ArgPropType>(
  "setting",
  "editTime",
  "onEditTimeChange",
  "userInfo",
  "onUserInfoChange",
  "token",
  "onTokenChange",
  "fuchereCycle",
  "reminderCategory",
  "onReminderCategoryChange",
  "remind",
  "onRemindChange",
  "refresh",
  "onRefreshChange",
  "reminderSetting"
);

export type PlasmicMainPage__OverridesType = {
  root?: Flex__<"div">;
  calendar2?: Flex__<typeof Calendar2>;
  reminder?: Flex__<typeof Reminder>;
  selfCare2?: Flex__<typeof SelfCare2>;
  reminderApi?: Flex__<typeof ApiRequest>;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultMainPageProps {
  setting?: () => void;
  editTime?: string;
  onEditTimeChange?: (val: string) => void;
  userInfo?: any;
  onUserInfoChange?: (val: string) => void;
  token?: string;
  onTokenChange?: (val: string) => void;
  fuchereCycle?: (event: any) => void;
  reminderCategory?: any;
  onReminderCategoryChange?: (val: any) => void;
  remind?: any;
  onRemindChange?: (val: string) => void;
  refresh?: string;
  onRefreshChange?: (val: string) => void;
  reminderSetting?: () => void;
  page?: SingleChoiceArg<"calendar" | "self" | "reminder">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainPage__RenderFunc(props: {
  variants: PlasmicMainPage__VariantsArgs;
  args: PlasmicMainPage__ArgsType;
  overrides: PlasmicMainPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "page",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.page
      },
      {
        path: "calendar2.editTime",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.editTime;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editTime",
        type: "writable",
        variableType: "text",

        valueProp: "editTime",
        onChangeProp: "onEditTimeChange"
      },
      {
        path: "calendar2.userInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "userInfo",
        type: "writable",
        variableType: "object",

        valueProp: "userInfo",
        onChangeProp: "onUserInfoChange"
      },
      {
        path: "selfCare2.subItems",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "calendar2.token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "writable",
        variableType: "text",

        valueProp: "token",
        onChangeProp: "onTokenChange"
      },
      {
        path: "reminder.refresh",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "reminder.sms",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.activeSmsNotif;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "reminder.tel",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminder.slide3",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.first;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "reminder.reminderSettingReminderCategory2Data",
        type: "writable",
        variableType: "object",

        valueProp: "reminderCategory",
        onChangeProp: "onReminderCategoryChange"
      },
      {
        path: "remind",
        type: "writable",
        variableType: "array",

        valueProp: "remind",
        onChangeProp: "onRemindChange"
      },
      {
        path: "reminderApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "reminderApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "reminderApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "refresh",
        type: "writable",
        variableType: "text",

        valueProp: "refresh",
        onChangeProp: "onRefreshChange"
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootpage_calendar]: hasVariant($state, "page", "calendar"),
          [sty.rootpage_reminder]: hasVariant($state, "page", "reminder"),
          [sty.rootpage_self]: hasVariant($state, "page", "self")
        }
      )}
    >
      <Reveal
        className={classNames("__wab_instance", sty.reveal__j5Oz, {
          [sty.revealpage_calendar__j5OzWAq1O]: hasVariant(
            $state,
            "page",
            "calendar"
          ),
          [sty.revealpage_self__j5OzL9LaN]: hasVariant($state, "page", "self")
        })}
        damping={0.2}
        effect={hasVariant($state, "page", "calendar") ? "fade" : "fade"}
        triggerOnce={true}
      >
        <Calendar2
          data-plasmic-name={"calendar2"}
          data-plasmic-override={overrides.calendar2}
          className={classNames("__wab_instance", sty.calendar2, {
            [sty.calendar2page_calendar]: hasVariant(
              $state,
              "page",
              "calendar"
            ),
            [sty.calendar2page_self]: hasVariant($state, "page", "self")
          })}
          editTime={generateStateValueProp($state, ["calendar2", "editTime"])}
          fuchereCycle={args.fuchereCycle}
          onEditTimeChange2={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["calendar2", "editTime"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }

            (async val => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          return console.log($state.editTime);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }).apply(null, eventArgs);
          }}
          onTokenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["calendar2", "token"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }

            (async val => {
              const $steps = {};

              $steps["updateToken"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["token"]
                      },
                      operation: 0,
                      value: $state.calendar2.token
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateToken"] != null &&
                typeof $steps["updateToken"] === "object" &&
                typeof $steps["updateToken"].then === "function"
              ) {
                $steps["updateToken"] = await $steps["updateToken"];
              }
            }).apply(null, eventArgs);
          }}
          onUserInfoChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["calendar2", "userInfo"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }

            (async val => {
              const $steps = {};

              $steps["updateUserInfo"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["userInfo"]
                      },
                      operation: 0,
                      value: $state.calendar2.userInfo
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateUserInfo"] != null &&
                typeof $steps["updateUserInfo"] === "object" &&
                typeof $steps["updateUserInfo"].then === "function"
              ) {
                $steps["updateUserInfo"] = await $steps["updateUserInfo"];
              }
            }).apply(null, eventArgs);
          }}
          setting={args.setting}
          token={generateStateValueProp($state, ["calendar2", "token"])}
          userInfo={generateStateValueProp($state, ["calendar2", "userInfo"])}
        />
      </Reveal>
      <Reveal
        className={classNames("__wab_instance", sty.reveal__drlM, {
          [sty.revealpage_calendar__drlMWAq1O]: hasVariant(
            $state,
            "page",
            "calendar"
          ),
          [sty.revealpage_reminder__drlMVtPzQ]: hasVariant(
            $state,
            "page",
            "reminder"
          ),
          [sty.revealpage_self__drlML9LaN]: hasVariant($state, "page", "self")
        })}
        damping={0.2}
        effect={hasVariant($state, "page", "calendar") ? "fade" : "fade"}
        triggerOnce={true}
      >
        <Reminder
          data-plasmic-name={"reminder"}
          data-plasmic-override={overrides.reminder}
          className={classNames("__wab_instance", sty.reminder, {
            [sty.reminderpage_reminder]: hasVariant($state, "page", "reminder")
          })}
          data={(() => {
            try {
              return $state.remind;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    id: 243,
                    liomId: "1",
                    telegramId: "5384384618",
                    phoneNumber: null,
                    schedule_type: "everyDay",
                    type: null,
                    name: "\u0646\u0648\u0634\u06cc\u062f\u0646 \u0622\u0628",
                    text: "drinkWater",
                    token1: null,
                    dates: null,
                    weekdays:
                      '["sunday","monday","tuesday","wednesday","thursday","friday","saturday"]',
                    times:
                      '["08:00","10:00","12:00","15:20","18:00","22:00","00:30"]',
                    finishTime: "2026-08-27 00:00:00",
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 255,
                    liomId: "1",
                    telegramId: "5384384618",
                    phoneNumber: null,
                    schedule_type: "everyYear",
                    type: null,
                    name: "\u062a\u0648\u0644\u062f \u0641\u0631\u0632\u0646\u062f",
                    text: "birthdayBoyChild",
                    token1: null,
                    dates: '["2025-11-19","2026-06-24"]',
                    weekdays:
                      '["sunday","monday","tuesday","wednesday","friday","saturday"]',
                    times: '["10:00"]',
                    finishTime: null,
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 256,
                    liomId: "1",
                    telegramId: "573538820",
                    phoneNumber: "",
                    schedule_type: "everyDay",
                    type: null,
                    name: "\u0642\u0631\u0635 \u0645\u0641\u0646\u0627\u0646\u06cc\u06a9 \u0627\u0633\u06cc\u062f",
                    text: "pill",
                    token1: null,
                    dates: null,
                    weekdays:
                      '["sunday","monday","tuesday","wednesday","thursday","friday","saturday"]',
                    times: '["10:00","18:00","02:00"]',
                    finishTime: "2025-09-30 23:59:59",
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 257,
                    liomId: "1",
                    telegramId: "33263188",
                    phoneNumber: "",
                    schedule_type: "everyYear",
                    type: null,
                    name: "\u062a\u0648\u0644\u062f \u062d\u0644\u0645\u0627",
                    text: "birthday",
                    token1: null,
                    dates: '["2026-03-29"]',
                    weekdays:
                      '["sunday","monday","tuesday","wednesday","friday","saturday"]',
                    times: '["10:00"]',
                    finishTime: "2026-12-11 23:59:02",
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 258,
                    liomId: "1",
                    telegramId: "33263188",
                    phoneNumber: "",
                    schedule_type: "everyYear",
                    type: null,
                    name: "\u0631\u0648\u0632 \u0645\u0627\u062f\u0631 ",
                    text: "motherAndWifeDayIran",
                    token1: null,
                    dates: '["2025-12-11"]',
                    weekdays:
                      '["sunday","monday","tuesday","wednesday","friday","saturday"]',
                    times: '["10:00"]',
                    finishTime: null,
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 259,
                    liomId: "1",
                    telegramId: "372883527",
                    phoneNumber: "09154807701",
                    schedule_type: "everyDay",
                    type: null,
                    name: "\u0631\u0648\u062a\u06cc\u0646 \u067e\u0648\u0633\u062a ",
                    text: "routineSkinMorning",
                    token1: null,
                    dates: null,
                    weekdays:
                      '["sunday","monday","tuesday","wednesday","thursday","friday","saturday"]',
                    times: '["10:07"]',
                    finishTime: null,
                    chanels: '["notification","telegram","sms"]',
                    active: 1
                  },
                  {
                    id: 260,
                    liomId: "1",
                    telegramId: "372883527",
                    phoneNumber: "09154807701",
                    schedule_type: "everyDay",
                    type: null,
                    name: "\u0646\u0648\u0634\u06cc\u062f\u0646 \u0622\u0628 ",
                    text: "drinkWater",
                    token1: null,
                    dates: null,
                    weekdays:
                      '["sunday","monday","tuesday","wednesday","thursday","friday","saturday"]',
                    times: '["08:00","10:00","11:46","22:00","00:30"]',
                    finishTime: null,
                    chanels: '["notification","telegram","sms"]',
                    active: 0
                  },
                  {
                    id: 279,
                    liomId: "1",
                    telegramId: "5384384618",
                    phoneNumber: "",
                    schedule_type: "everyYear",
                    type: null,
                    name: "\u0631\u0648\u0632  \u062c\u0647\u0627\u0646\u06cc \u0632\u0646",
                    text: "occasion",
                    token1: null,
                    dates: '["2026-03-08"]',
                    weekdays: null,
                    times: '["09:00"]',
                    finishTime: "2025-10-04 15:04:26",
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 358,
                    liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
                    telegramId: null,
                    phoneNumber: "",
                    schedule_type: "everyYear",
                    type: null,
                    name: "\u0648\u0644\u0646\u062a\u0627\u06cc\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642)",
                    text: "occasion",
                    token1: null,
                    dates: '["2026-02-14"]',
                    weekdays: null,
                    times: '["09:00"]',
                    finishTime: null,
                    chanels: "{",
                    active: 1
                  },
                  {
                    id: 359,
                    liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
                    telegramId: null,
                    phoneNumber: "",
                    schedule_type: "everyYear",
                    type: null,
                    name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
                    text: "occasion",
                    token1: null,
                    dates: '["2026-02-18"]',
                    weekdays: null,
                    times: '["09:00"]',
                    finishTime: null,
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 360,
                    liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
                    telegramId: null,
                    phoneNumber: "",
                    schedule_type: "everyYear",
                    type: null,
                    name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
                    text: "occasion",
                    token1: null,
                    dates: '["2026-02-18"]',
                    weekdays: null,
                    times: '["09:00"]',
                    finishTime: null,
                    chanels: "{",
                    active: 1
                  },
                  {
                    id: 361,
                    liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
                    telegramId: null,
                    phoneNumber: "",
                    schedule_type: "everyYear",
                    type: null,
                    name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
                    text: "wedding_anniversary",
                    token1: null,
                    dates: '["2025-12-31"]',
                    weekdays: null,
                    times: '["10:00"]',
                    finishTime: null,
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 365,
                    liomId: "1ce6e0a9-217c-4c9e-9b59-2faefdc51487",
                    telegramId: null,
                    phoneNumber: "",
                    schedule_type: "everyYear",
                    type: null,
                    name: "\u0631\u0648\u0632  \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631\u0627\u0646",
                    text: "occasion",
                    token1: null,
                    dates: '["2026-10-11"]',
                    weekdays: null,
                    times: '["09:00"]',
                    finishTime: null,
                    chanels: "{",
                    active: 1
                  },
                  {
                    id: 491,
                    liomId: "1",
                    telegramId: "372883527",
                    phoneNumber: "",
                    schedule_type: "everyYear",
                    type: null,
                    name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631",
                    text: "occasion",
                    token1: null,
                    dates: '["2026-04-19"]',
                    weekdays: null,
                    times: '["10:00"]',
                    finishTime: null,
                    chanels: '["notification"]',
                    active: 1
                  },
                  {
                    id: 492,
                    liomId: "1",
                    telegramId: "372883527",
                    phoneNumber: "",
                    schedule_type: "everyYear",
                    type: null,
                    name: "\u0631\u0648\u0632 \u0648\u0644\u0646\u062a\u0627\u06cc\u0646",
                    text: "occasion",
                    token1: null,
                    dates: '["2026-02-14"]',
                    weekdays: null,
                    times: '["10:00"]',
                    finishTime: null,
                    chanels: '["notification"]',
                    active: 1
                  },
                  {
                    id: 500,
                    liomId: "1",
                    telegramId: "372883527",
                    phoneNumber: "",
                    schedule_type: "everyYear",
                    type: "wedding_anniversary",
                    name: "\u0633\u0627\u0644\u06af\u0631\u062f \u0627\u0632\u062f\u0648\u0627\u062c",
                    text: "wedding_anniversary",
                    token1: null,
                    dates: '["2026-01-01"]',
                    weekdays: null,
                    times: "[]",
                    finishTime: null,
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 507,
                    liomId: "1",
                    telegramId: "372883527",
                    phoneNumber: "",
                    schedule_type: "everyYear",
                    type: "religious_womens_day",
                    name: "\u0631\u0648\u0632 \u0632\u0646 (\u0627\u0633\u0644\u0627\u0645\u06cc)",
                    text: "occasion",
                    token1: null,
                    dates: '["2025-12-11"]',
                    weekdays: null,
                    times: '["09:30"]',
                    finishTime: null,
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 508,
                    liomId: "1",
                    telegramId: "372883527",
                    phoneNumber: "",
                    schedule_type: "everyYear",
                    type: "sepandarmazgan",
                    name: "\u0631\u0648\u0632 \u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646",
                    text: "occasion",
                    token1: null,
                    dates: '["2026-02-18"]',
                    weekdays: null,
                    times: "[]",
                    finishTime: null,
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 509,
                    liomId: "1",
                    telegramId: "372883527",
                    phoneNumber: "",
                    schedule_type: "everyDay",
                    type: "Water_time",
                    name: "\u0646\u0648\u0634\u06cc\u062f\u0646 \u0622\u0628qq",
                    text: "Water_time",
                    token1: null,
                    dates: null,
                    weekdays: null,
                    times: '["00:00","00:05"]',
                    finishTime: null,
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 510,
                    liomId: "1",
                    telegramId: "372883527",
                    phoneNumber: "",
                    schedule_type: "everyDay",
                    type: "Water_time",
                    name: "\u0646\u0648\u0634\u06cc\u062f\u0646 \u0622\u0628",
                    text: "Water_time",
                    token1: null,
                    dates: null,
                    weekdays: null,
                    times: '["15:15"]',
                    finishTime: null,
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 511,
                    liomId: "1",
                    telegramId: "372883527",
                    phoneNumber: "",
                    schedule_type: "everyDay",
                    type: "Water_time",
                    name: "\u0646\u0648\u0634\u06cc\u062f\u0646 ddddd\u0622\u0628",
                    text: "Water_time",
                    token1: null,
                    dates: null,
                    weekdays: null,
                    times: '["22:50","23:05"]',
                    finishTime: null,
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 538,
                    liomId: "1",
                    telegramId: "372883527",
                    phoneNumber: "",
                    schedule_type: "everyDay",
                    type: "medicine_time",
                    name: "\u0645\u0635\u0631\u0641 \u062f\u0627\u0631\u0648",
                    text: "medicine_time",
                    token1: null,
                    dates: null,
                    weekdays:
                      '["sunday","monday","tuesday","wednesday","friday","saturday"]',
                    times: '["09:30"]',
                    finishTime: null,
                    chanels: '["notification","telegram"]',
                    active: 1
                  },
                  {
                    id: 511,
                    liomId: "1",
                    telegramId: "372883527",
                    phoneNumber: "",
                    schedule_type: "everyDay",
                    type: "Water_time",
                    name: "\u0646\u0648\u0634\u06cc\u062f\u0646 ddddd\u0622\u0628",
                    text: "Water_time",
                    token1: null,
                    dates: null,
                    weekdays:
                      '["sunday","monday","tuesday","wednesday","friday","saturday"]',
                    times: '["22:50","23:05"]',
                    finishTime: null,
                    chanels: '["notification","telegram"]',
                    active: 1
                  }
                ];
              }
              throw e;
            }
          })()}
          manId={(() => {
            try {
              return $state.calendar2.userInfo?.result?.user?.id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onRefreshChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["reminder", "refresh"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }

            (async val => {
              const $steps = {};

              $steps["updateRefresh"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["refresh"]
                      },
                      operation: 0,
                      value: $state.refresh + 1
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateRefresh"] != null &&
                typeof $steps["updateRefresh"] === "object" &&
                typeof $steps["updateRefresh"].then === "function"
              ) {
                $steps["updateRefresh"] = await $steps["updateRefresh"];
              }
            }).apply(null, eventArgs);
          }}
          onReminderSettingReminderCategory2DataChange={async (
            ...eventArgs: any
          ) => {
            generateStateOnChangeProp($state, [
              "reminder",
              "reminderSettingReminderCategory2Data"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onSlide3Change={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["reminder", "slide3"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onSmsChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["reminder", "sms"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onTelChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["reminder", "tel"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          phone={(() => {
            try {
              return $state.calendar2.userInfo?.result?.user?.phoneNumber;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          refresh={generateStateValueProp($state, ["reminder", "refresh"])}
          reminderSettingReminderCategory2Data={generateStateValueProp($state, [
            "reminder",
            "reminderSettingReminderCategory2Data"
          ])}
          setting={args.reminderSetting}
          slide3={generateStateValueProp($state, ["reminder", "slide3"])}
          sms={generateStateValueProp($state, ["reminder", "sms"])}
          subscription={false}
          tel={generateStateValueProp($state, ["reminder", "tel"])}
          telegram={(() => {
            try {
              return $state.calendar2.userInfo?.result?.user?.telegramId
                ? true
                : false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()}
          telegramId={(() => {
            try {
              return $state.calendar2.userInfo?.result?.user?.telegramId;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </Reveal>
      <Reveal
        className={classNames("__wab_instance", sty.reveal___7EWm4, {
          [sty.revealpage_calendar___7EWm4WAq1O]: hasVariant(
            $state,
            "page",
            "calendar"
          ),
          [sty.revealpage_self___7EWm4L9LaN]: hasVariant($state, "page", "self")
        })}
        damping={0.2}
        effect={"fade"}
        triggerOnce={true}
      >
        <SelfCare2
          data-plasmic-name={"selfCare2"}
          data-plasmic-override={overrides.selfCare2}
          className={classNames("__wab_instance", sty.selfCare2, {
            [sty.selfCare2page_calendar]: hasVariant(
              $state,
              "page",
              "calendar"
            ),
            [sty.selfCare2page_self]: hasVariant($state, "page", "self")
          })}
          onSubItemsChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["selfCare2", "subItems"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          subItems={generateStateValueProp($state, ["selfCare2", "subItems"])}
        />
      </Reveal>
      <ApiRequest
        data-plasmic-name={"reminderApi"}
        data-plasmic-override={overrides.reminderApi}
        body={(() => {
          try {
            return {
              r: $state.refresh,
              liomId: $state.calendar2.userInfo?.result?.user?.id
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.reminderApi)}
        errorDisplay={null}
        loadingDisplay={null}
        method={"POST"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reminderApi", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reminderApi", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reminderApi", "data"]).apply(
            null,
            eventArgs
          );

          (async data => {
            const $steps = {};

            $steps["updateRemind"] = ($state.reminderApi?.data ? true : false)
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["remind"]
                    },
                    operation: 0,
                    value: $state.reminderApi?.data
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateRemind"] != null &&
              typeof $steps["updateRemind"] === "object" &&
              typeof $steps["updateRemind"].then === "function"
            ) {
              $steps["updateRemind"] = await $steps["updateRemind"];
            }
          }).apply(null, eventArgs);
        }}
        shouldFetch={(() => {
          try {
            return $state.calendar2.userInfo?.result?.user?.id ? true : false;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
        url={"https://n8n.staas.ir/webhook/user/task/day"}
      />

      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={null}
        loadingDisplay={null}
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );

          (async data => {
            const $steps = {};

            $steps["runCode"] = $state.apiRequest?.data
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return ($state.reminder.reminderSettingReminderCategory2Data =
                        $state.apiRequest.data);
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }).apply(null, eventArgs);
        }}
        shouldFetch={true}
        url={"https://n8n.staas.ir/webhook/reminders/category"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "calendar2",
    "reminder",
    "selfCare2",
    "reminderApi",
    "apiRequest"
  ],
  calendar2: ["calendar2"],
  reminder: ["reminder"],
  selfCare2: ["selfCare2"],
  reminderApi: ["reminderApi"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  calendar2: typeof Calendar2;
  reminder: typeof Reminder;
  selfCare2: typeof SelfCare2;
  reminderApi: typeof ApiRequest;
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainPage__VariantsArgs;
    args?: PlasmicMainPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicMainPage__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicMainPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainPage__ArgProps,
          internalVariantPropNames: PlasmicMainPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainPage";
  } else {
    func.displayName = `PlasmicMainPage.${nodeName}`;
  }
  return func;
}

export const PlasmicMainPage = Object.assign(
  // Top-level PlasmicMainPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    calendar2: makeNodeComponent("calendar2"),
    reminder: makeNodeComponent("reminder"),
    selfCare2: makeNodeComponent("selfCare2"),
    reminderApi: makeNodeComponent("reminderApi"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicMainPage
    internalVariantProps: PlasmicMainPage__VariantProps,
    internalArgProps: PlasmicMainPage__ArgProps
  }
);

export default PlasmicMainPage;
/* prettier-ignore-end */
