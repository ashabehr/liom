/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 8TLNkR4k2mrN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicAudioPlayer.module.css"; // plasmic-import: 8TLNkR4k2mrN/css

createPlasmicElementProxy;

export type PlasmicAudioPlayer__VariantMembers = {
  postType: "video" | "image" | "voise";
};
export type PlasmicAudioPlayer__VariantsArgs = {
  postType?: SingleChoiceArg<"video" | "image" | "voise">;
};
type VariantPropType = keyof PlasmicAudioPlayer__VariantsArgs;
export const PlasmicAudioPlayer__VariantProps = new Array<VariantPropType>(
  "postType"
);

export type PlasmicAudioPlayer__ArgsType = { audioLink?: string };
type ArgPropType = keyof PlasmicAudioPlayer__ArgsType;
export const PlasmicAudioPlayer__ArgProps = new Array<ArgPropType>("audioLink");

export type PlasmicAudioPlayer__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultAudioPlayerProps {
  audioLink?: string;
  postType?: SingleChoiceArg<"video" | "image" | "voise">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAudioPlayer__RenderFunc(props: {
  variants: PlasmicAudioPlayer__VariantsArgs;
  args: PlasmicAudioPlayer__ArgsType;
  overrides: PlasmicAudioPlayer__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "postType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.postType
      },
      {
        path: "audioLink2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.audioLink;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        {
          [sty.rootpostType_image]: hasVariant($state, "postType", "image"),
          [sty.rootpostType_voise]: hasVariant($state, "postType", "voise")
        }
      )}
    >
      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml)}
        code={
          "<div class=\"audio-player\" data-audio=\"https://example.com/audio.mp3\">\n  <div class=\"player-controls\">\n    <button class=\"play-btn\">\u25b6\ufe0f</button>\n    <div class=\"progress-container\">\n      <div class=\"progress-bar\"><div class=\"progress-handle\"></div></div>\n      <div class=\"remaining-time\">00:00</div>\n    </div>\n  </div>\n</div>\n\n<script>\n  setTimeout(() => {\n    const allPlayers = document.querySelectorAll('.audio-player');\n\n    allPlayers.forEach(container => {\n      const audioSrc = container.dataset.audio;\n      if (!audioSrc) return;\n\n      const audioPlayer = new Audio(audioSrc);\n      const playBtn = container.querySelector('.play-btn');\n      const progressContainer = container.querySelector('.progress-container');\n      const progressBar = container.querySelector('.progress-bar');\n      const remainingTimeEl = container.querySelector('.remaining-time');\n\n      function formatTime(seconds) {\n        if (isNaN(seconds)) return '0:00';\n        const minutes = Math.floor(seconds / 60);\n        const secs = Math.floor(seconds % 60);\n        return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;\n      }\n\n      playBtn.addEventListener('click', () => {\n        if (audioPlayer.paused) {\n          audioPlayer.play();\n          playBtn.classList.add('playing');\n        } else {\n          audioPlayer.pause();\n          playBtn.classList.remove('playing');\n        }\n      });\n\n      audioPlayer.addEventListener('timeupdate', () => {\n        const percent = (audioPlayer.currentTime / audioPlayer.duration) * 100;\n        progressBar.style.width = percent + '%';\n        remainingTimeEl.textContent = formatTime(audioPlayer.duration - audioPlayer.currentTime);\n      });\n\n      progressContainer.addEventListener('click', (e) => {\n        const width = progressContainer.clientWidth;\n        const clickX = e.offsetX;\n        if (!isNaN(audioPlayer.duration)) {\n          audioPlayer.currentTime = (clickX / width) * audioPlayer.duration;\n        }\n      });\n\n      audioPlayer.addEventListener('ended', () => {\n        playBtn.classList.remove('playing');\n        progressBar.style.width = '0%';\n      });\n\n      audioPlayer.addEventListener('loadedmetadata', () => {\n        remainingTimeEl.textContent = formatTime(audioPlayer.duration);\n      });\n    });\n  }, 0);\n</script>\n"
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "embedHtml"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAudioPlayer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAudioPlayer__VariantsArgs;
    args?: PlasmicAudioPlayer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAudioPlayer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAudioPlayer__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAudioPlayer__ArgProps,
          internalVariantPropNames: PlasmicAudioPlayer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAudioPlayer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAudioPlayer";
  } else {
    func.displayName = `PlasmicAudioPlayer.${nodeName}`;
  }
  return func;
}

export const PlasmicAudioPlayer = Object.assign(
  // Top-level PlasmicAudioPlayer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicAudioPlayer
    internalVariantProps: PlasmicAudioPlayer__VariantProps,
    internalArgProps: PlasmicAudioPlayer__ArgProps
  }
);

export default PlasmicAudioPlayer;
/* prettier-ignore-end */
