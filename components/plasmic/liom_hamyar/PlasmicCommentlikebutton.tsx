// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: wOOFf0E7TUt2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicCommentlikebutton.module.css"; // plasmic-import: wOOFf0E7TUt2/css

import Icon152Icon from "./icons/PlasmicIcon__Icon152"; // plasmic-import: qr8jQCU8QOqy/icon
import BoldHeartIcon from "../fragment_icons/icons/PlasmicIcon__BoldHeart"; // plasmic-import: eZfYsLpdWQA_/icon

createPlasmicElementProxy;

export type PlasmicCommentlikebutton__VariantMembers = {
  islikecomment: "islikecomment";
};
export type PlasmicCommentlikebutton__VariantsArgs = {
  islikecomment?: SingleBooleanChoiceArg<"islikecomment">;
};
type VariantPropType = keyof PlasmicCommentlikebutton__VariantsArgs;
export const PlasmicCommentlikebutton__VariantProps =
  new Array<VariantPropType>("islikecomment");

export type PlasmicCommentlikebutton__ArgsType = {
  likeCommentCount?: string;
  coomentLikeBool?: boolean;
  carrentData?: string;
};
type ArgPropType = keyof PlasmicCommentlikebutton__ArgsType;
export const PlasmicCommentlikebutton__ArgProps = new Array<ArgPropType>(
  "likeCommentCount",
  "coomentLikeBool",
  "carrentData"
);

export type PlasmicCommentlikebutton__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultCommentlikebuttonProps {
  likeCommentCount?: string;
  coomentLikeBool?: boolean;
  carrentData?: string;
  islikecomment?: SingleBooleanChoiceArg<"islikecomment">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCommentlikebutton__RenderFunc(props: {
  variants: PlasmicCommentlikebutton__VariantsArgs;
  args: PlasmicCommentlikebutton__ArgsType;
  overrides: PlasmicCommentlikebutton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          coomentLikeBool: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "islikecomment",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.islikecomment
      },
      {
        path: "variableForLikeCountComment",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.likeCommentCount;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootislikecomment]: hasVariant(
            $state,
            "islikecomment",
            "islikecomment"
          )
        }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["updateIslikecomment2"] = true
          ? (() => {
              const actionArgs = {
                operation: 0,
                variable: {
                  objRoot: $state,
                  variablePath: ["islikecomment"]
                },
                value: !$state.islikecomment
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;

                $stateSet(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateIslikecomment2"] != null &&
          typeof $steps["updateIslikecomment2"] === "object" &&
          typeof $steps["updateIslikecomment2"].then === "function"
        ) {
          $steps["updateIslikecomment2"] = await $steps["updateIslikecomment2"];
        }

        $steps["updateVariableForLikeCountComment"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["variableForLikeCountComment"]
                },
                operation: 0,
                value: ($state.variableForLikeCountComment =
                  parseInt($state.variableForLikeCountComment) +
                  ($state.islikecomment ? 1 : -1))
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;

                $stateSet(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateVariableForLikeCountComment"] != null &&
          typeof $steps["updateVariableForLikeCountComment"] === "object" &&
          typeof $steps["updateVariableForLikeCountComment"].then === "function"
        ) {
          $steps["updateVariableForLikeCountComment"] = await $steps[
            "updateVariableForLikeCountComment"
          ];
        }
      }}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textislikecomment]: hasVariant(
            $state,
            "islikecomment",
            "islikecomment"
          )
        })}
      >
        <React.Fragment>
          {(() => {
            try {
              return $state.variableForLikeCountComment;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "0";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <PlasmicIcon__
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        PlasmicIconType={
          hasVariant($state, "islikecomment", "islikecomment")
            ? BoldHeartIcon
            : Icon152Icon
        }
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgislikecomment]: hasVariant(
            $state,
            "islikecomment",
            "islikecomment"
          )
        })}
        role={"img"}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "svg"],
  text: ["text"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommentlikebutton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCommentlikebutton__VariantsArgs;
    args?: PlasmicCommentlikebutton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCommentlikebutton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCommentlikebutton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCommentlikebutton__ArgProps,
          internalVariantPropNames: PlasmicCommentlikebutton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCommentlikebutton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommentlikebutton";
  } else {
    func.displayName = `PlasmicCommentlikebutton.${nodeName}`;
  }
  return func;
}

export const PlasmicCommentlikebutton = Object.assign(
  // Top-level PlasmicCommentlikebutton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicCommentlikebutton
    internalVariantProps: PlasmicCommentlikebutton__VariantProps,
    internalArgProps: PlasmicCommentlikebutton__ArgProps
  }
);

export default PlasmicCommentlikebutton;
/* prettier-ignore-end */
