/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: wOOFf0E7TUt2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicCommentlikebutton.module.css"; // plasmic-import: wOOFf0E7TUt2/css

import Icon152Icon from "./icons/PlasmicIcon__Icon152"; // plasmic-import: qr8jQCU8QOqy/icon
import BoldHeartIcon from "../fragment_icons/icons/PlasmicIcon__BoldHeart"; // plasmic-import: eZfYsLpdWQA_/icon
import LogoPwaSvgrepoComSvgIcon from "./icons/PlasmicIcon__LogoPwaSvgrepoComSvg"; // plasmic-import: xd3icqtlIdjI/icon
import IconSvgIcon from "./icons/PlasmicIcon__IconSvg"; // plasmic-import: -XPXy44VZe9n/icon
import CafeBazaarLogoSvgIcon from "./icons/PlasmicIcon__CafeBazaarLogoSvg"; // plasmic-import: W_GsLw69YDUh/icon
import BrokenLink2SvgrepoComSvgIcon from "./icons/PlasmicIcon__BrokenLink2SvgrepoComSvg"; // plasmic-import: blnLvMghko66/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon

createPlasmicElementProxy;

export type PlasmicCommentlikebutton__VariantMembers = {
  islikecomment: "islikecomment";
};
export type PlasmicCommentlikebutton__VariantsArgs = {
  islikecomment?: SingleBooleanChoiceArg<"islikecomment">;
};
type VariantPropType = keyof PlasmicCommentlikebutton__VariantsArgs;
export const PlasmicCommentlikebutton__VariantProps =
  new Array<VariantPropType>("islikecomment");

export type PlasmicCommentlikebutton__ArgsType = {
  onVariableForLikeCountCommentChange?: (val: string) => void;
  likeCommentCount?: string;
  coomentLikeBool?: boolean;
  carrentData?: string;
  modalvalueforcommentlike?: boolean;
  shareForLikeComment?: boolean;
};
type ArgPropType = keyof PlasmicCommentlikebutton__ArgsType;
export const PlasmicCommentlikebutton__ArgProps = new Array<ArgPropType>(
  "onVariableForLikeCountCommentChange",
  "likeCommentCount",
  "coomentLikeBool",
  "carrentData",
  "modalvalueforcommentlike",
  "shareForLikeComment"
);

export type PlasmicCommentlikebutton__OverridesType = {
  root?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultCommentlikebuttonProps {
  onVariableForLikeCountCommentChange?: (val: string) => void;
  likeCommentCount?: string;
  coomentLikeBool?: boolean;
  carrentData?: string;
  modalvalueforcommentlike?: boolean;
  shareForLikeComment?: boolean;
  islikecomment?: SingleBooleanChoiceArg<"islikecomment">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCommentlikebutton__RenderFunc(props: {
  variants: PlasmicCommentlikebutton__VariantsArgs;
  args: PlasmicCommentlikebutton__ArgsType;
  overrides: PlasmicCommentlikebutton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          coomentLikeBool: false,
          modalvalueforcommentlike: false,
          shareForLikeComment: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "islikecomment",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.islikecomment
      },
      {
        path: "variableForLikeCountComment",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.likeCommentCount;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onChangeProp: "onVariableForLikeCountCommentChange"
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootislikecomment]: hasVariant(
            $state,
            "islikecomment",
            "islikecomment"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ycFfm, {
          [sty.freeBoxislikecomment__ycFfMitXr9]: hasVariant(
            $state,
            "islikecomment",
            "islikecomment"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateIslikecomment2"] = true
            ? (() => {
                const actionArgs = {
                  operation: 0,
                  variable: {
                    objRoot: $state,
                    variablePath: ["islikecomment"]
                  },
                  value: !$state.islikecomment
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIslikecomment2"] != null &&
            typeof $steps["updateIslikecomment2"] === "object" &&
            typeof $steps["updateIslikecomment2"].then === "function"
          ) {
            $steps["updateIslikecomment2"] = await $steps[
              "updateIslikecomment2"
            ];
          }

          $steps["updateVariableForLikeCountComment"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["variableForLikeCountComment"]
                  },
                  operation: 0,
                  value: ($state.variableForLikeCountComment =
                    parseInt($state.variableForLikeCountComment) +
                    ($state.islikecomment ? +1 : -1))
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateVariableForLikeCountComment"] != null &&
            typeof $steps["updateVariableForLikeCountComment"] === "object" &&
            typeof $steps["updateVariableForLikeCountComment"].then ===
              "function"
          ) {
            $steps["updateVariableForLikeCountComment"] = await $steps[
              "updateVariableForLikeCountComment"
            ];
          }

          $steps["updateVariableForLikeCountComment2"] =
            $props.shareForLikeComment
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["modal", "open"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updateVariableForLikeCountComment2"] != null &&
            typeof $steps["updateVariableForLikeCountComment2"] === "object" &&
            typeof $steps["updateVariableForLikeCountComment2"].then ===
              "function"
          ) {
            $steps["updateVariableForLikeCountComment2"] = await $steps[
              "updateVariableForLikeCountComment2"
            ];
          }
        }}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yiANk,
            {
              [sty.textislikecomment__yiANkitXr9]: hasVariant(
                $state,
                "islikecomment",
                "islikecomment"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $state.variableForLikeCountComment;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "0";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <PlasmicIcon__
          PlasmicIconType={
            hasVariant($state, "islikecomment", "islikecomment")
              ? BoldHeartIcon
              : Icon152Icon
          }
          className={classNames(projectcss.all, sty.svg__cHbPa, {
            [sty.svgislikecomment__cHbPAitXr9]: hasVariant(
              $state,
              "islikecomment",
              "islikecomment"
            )
          })}
          role={"img"}
        />
      </Stack__>
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        closeIcon={
          <XIcon
            className={classNames(projectcss.all, sty.svg__pIZ2)}
            role={"img"}
          />
        }
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        hideFooter={true}
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["modal", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wAnDi)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"70px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"70px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image10.ico",
                fullWidth: 256,
                fullHeight: 256,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__d4V6P
              )}
            >
              {
                "\u0628\u0631\u0627\u06cc \u0627\u06cc\u0646\u06a9\u0647 \u0628\u062e\u0648\u0627\u06cc \u0627\u06cc\u0646 \u06a9\u0627\u0631 \u0631\u0648 \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u06cc \u0628\u0627\u06cc\u062f \u0627\u067e\u0644\u06cc\u06a9\u06cc\u0634\u0646 \u0631\u0648 \u0646\u0635\u0628 \u06a9\u0646\u06cc.\r\n\u0647\u0631\u06a9\u062f\u0648\u0645 \u0627\u0632 \u062f\u06a9\u0645\u0647 \u0647\u0627\u06cc \u0632\u06cc\u0631 \u06a9\u0647 \u0628\u0627\u0647\u0627\u0634 \u0631\u0627\u062d\u062a \u062a\u0631\u06cc \u0628\u0631\u0627\u06cc \u062f\u0627\u0646\u0644\u0648\u062f \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u06a9\u0646 \u0648 \u0628\u0639\u062f \u0628\u0647 \u062c\u0645\u0639 \u062f\u062e\u062a\u0631\u0648\u0646\u0647 \u06cc \u0645\u0627\u0627\u0636\u0627\u0641\u0647 \u0634\u0648\ud83d\ude0d"
              }
            </div>
          </Stack__>
        }
        trigger={null}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__an4B7)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vdeoA)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xMeKt)}
            >
              <LogoPwaSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__ojRd)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jQkZ0
                )}
              >
                {
                  "\u0648\u0631\u0648\u062f \u0628\u0647 \u0646\u0633\u062e\u0647 \u0648\u0628"
                }
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cP8Wn)}
            >
              <IconSvgIcon
                className={classNames(projectcss.all, sty.svg__u33Qa)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nhkFu
                )}
              >
                {
                  "\u062f\u0627\u0646\u0644\u0648\u062f \u0627\u0632 \u0645\u0627\u06cc\u06a9\u062a "
                }
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__zngAi)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rQPqt)}
            >
              <CafeBazaarLogoSvgIcon
                className={classNames(projectcss.all, sty.svg__nPf7S)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vFzzE
                )}
              >
                {
                  "\u062f\u0627\u0646\u0644\u0648\u062f \u0627\u0632 \u06a9\u0627\u0641\u0647 \u0628\u0627\u0632\u0627\u0631"
                }
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vxl4A)}
            >
              <BrokenLink2SvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__nI6N)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aGobc
                )}
              >
                {
                  "\u062f\u0627\u0646\u0644\u0648\u062f \u0628\u0627 \u0644\u06cc\u0646\u06a9 \u0645\u0633\u062a\u0642\u06cc\u0645 "
                }
              </div>
            </Stack__>
          </Stack__>
        </Stack__>
      </AntdModal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "modal", "img"],
  modal: ["modal", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof AntdModal;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommentlikebutton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCommentlikebutton__VariantsArgs;
    args?: PlasmicCommentlikebutton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCommentlikebutton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCommentlikebutton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCommentlikebutton__ArgProps,
          internalVariantPropNames: PlasmicCommentlikebutton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCommentlikebutton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommentlikebutton";
  } else {
    func.displayName = `PlasmicCommentlikebutton.${nodeName}`;
  }
  return func;
}

export const PlasmicCommentlikebutton = Object.assign(
  // Top-level PlasmicCommentlikebutton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicCommentlikebutton
    internalVariantProps: PlasmicCommentlikebutton__VariantProps,
    internalArgProps: PlasmicCommentlikebutton__ArgProps
  }
);

export default PlasmicCommentlikebutton;
/* prettier-ignore-end */
