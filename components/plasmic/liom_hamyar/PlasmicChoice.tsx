/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: PU9vKa6cnb4P

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RadioGrop from "../../RadioGrop"; // plasmic-import: mcNKMbL_6N75/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicChoice.module.css"; // plasmic-import: PU9vKa6cnb4P/css

createPlasmicElementProxy;

export type PlasmicChoice__VariantMembers = {};
export type PlasmicChoice__VariantsArgs = {};
type VariantPropType = keyof PlasmicChoice__VariantsArgs;
export const PlasmicChoice__VariantProps = new Array<VariantPropType>();

export type PlasmicChoice__ArgsType = {};
type ArgPropType = keyof PlasmicChoice__ArgsType;
export const PlasmicChoice__ArgProps = new Array<ArgPropType>();

export type PlasmicChoice__OverridesType = {
  root?: Flex__<"div">;
  title?: Flex__<"div">;
  radioGrop?: Flex__<typeof RadioGrop>;
  shimmer?: Flex__<"div">;
};

export interface DefaultChoiceProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChoice__RenderFunc(props: {
  variants: PlasmicChoice__VariantsArgs;
  args: PlasmicChoice__ArgsType;
  overrides: PlasmicChoice__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "info",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label: "\u06af\u0632\u06cc\u0646\u0647 \u0627\u0648\u0644",
            value: 1
          },
          {
            label: "\u06af\u0632\u06cc\u0646\u0647 \u062f\u0648\u0645",
            value: 2
          },
          {
            label: "\u06af\u0632\u06cc\u0646\u0647 \u0633\u0648\u0645",
            value: 3
          },
          {
            label:
              "\u06af\u0632\u06cc\u0646\u0647 \u0686\u0647\u0627\u0631\u0645",
            value: 4
          }
        ]
      },
      {
        path: "newInfo",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"title"}
        data-plasmic-override={overrides.title}
        className={classNames(projectcss.all, sty.title)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__pH9L9
          )}
        >
          {"title"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__oRccG)}>
        <div className={classNames(projectcss.all, sty.freeBox__l9Ojq)}>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.info;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__ps6IZ)}
                key={currentIndex}
              >
                <div className={classNames(projectcss.all, sty.freeBox__sz7WD)}>
                  <RadioGrop
                    data-plasmic-name={"radioGrop"}
                    data-plasmic-override={overrides.radioGrop}
                    choise={true}
                    className={classNames("__wab_instance", sty.radioGrop)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  if (
                                    $state.newInfo.find(
                                      i => i === currentItem.label
                                    )
                                  ) {
                                    return ($state.newInfo =
                                      $state.newInfo.filter(
                                        i => i !== currentItem.label
                                      ));
                                  } else
                                    return $state.newInfo.push(
                                      currentItem.label
                                    );
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    selected={(() => {
                      try {
                        return $state.newInfo.find(i => i == currentItem.label)
                          ? true
                          : false;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.label;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </RadioGrop>
                </div>
              </div>
            );
          })}
        </div>
      </div>
      {(() => {
        try {
          return true;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"shimmer"}
          data-plasmic-override={overrides.shimmer}
          className={classNames(projectcss.all, sty.shimmer)}
        >
          <div className={classNames(projectcss.all, sty.freeBox___2EzTp)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return [3, 4, 5, 6, 7, 8];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox___1NI5E)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mtyyI,
                      "shimmer"
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "liom";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "title", "radioGrop", "shimmer"],
  title: ["title"],
  radioGrop: ["radioGrop"],
  shimmer: ["shimmer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  title: "div";
  radioGrop: typeof RadioGrop;
  shimmer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChoice__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChoice__VariantsArgs;
    args?: PlasmicChoice__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicChoice__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicChoice__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChoice__ArgProps,
          internalVariantPropNames: PlasmicChoice__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChoice__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChoice";
  } else {
    func.displayName = `PlasmicChoice.${nodeName}`;
  }
  return func;
}

export const PlasmicChoice = Object.assign(
  // Top-level PlasmicChoice renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    title: makeNodeComponent("title"),
    radioGrop: makeNodeComponent("radioGrop"),
    shimmer: makeNodeComponent("shimmer"),

    // Metadata about props expected for PlasmicChoice
    internalVariantProps: PlasmicChoice__VariantProps,
    internalArgProps: PlasmicChoice__ArgProps
  }
);

export default PlasmicChoice;
/* prettier-ignore-end */
