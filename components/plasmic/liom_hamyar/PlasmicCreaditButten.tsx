/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 1skTNuQS9BUR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicCreaditButten.module.css"; // plasmic-import: 1skTNuQS9BUR/css

import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon361Icon from "./icons/PlasmicIcon__Icon361"; // plasmic-import: F0dcdZJwtgLB/icon

createPlasmicElementProxy;

export type PlasmicCreaditButten__VariantMembers = {
  action: "red" | "load" | "add";
};
export type PlasmicCreaditButten__VariantsArgs = {
  action?: SingleChoiceArg<"red" | "load" | "add">;
};
type VariantPropType = keyof PlasmicCreaditButten__VariantsArgs;
export const PlasmicCreaditButten__VariantProps = new Array<VariantPropType>(
  "action"
);

export type PlasmicCreaditButten__ArgsType = {
  creadit?: number;
  onCreaditChange?: (val: string) => void;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicCreaditButten__ArgsType;
export const PlasmicCreaditButten__ArgProps = new Array<ArgPropType>(
  "creadit",
  "onCreaditChange",
  "onClick"
);

export type PlasmicCreaditButten__OverridesType = {
  root?: Flex__<"div">;
  buttonLiom4?: Flex__<typeof Button>;
};

export interface DefaultCreaditButtenProps {
  creadit?: number;
  onCreaditChange?: (val: string) => void;
  onClick?: (event: any) => void;
  action?: SingleChoiceArg<"red" | "load" | "add">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCreaditButten__RenderFunc(props: {
  variants: PlasmicCreaditButten__VariantsArgs;
  args: PlasmicCreaditButten__ArgsType;
  overrides: PlasmicCreaditButten__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "buttonLiom4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "softSand"
      },
      {
        path: "buttonLiom4.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonLiom4.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "creadit",
        type: "writable",
        variableType: "number",

        valueProp: "creadit",
        onChangeProp: "onCreaditChange"
      },
      {
        path: "action",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.creadit < 0) return "red";
                else if ($state.creadit == null) return "load";
                else if ($state.creadit == 0) return "add";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.action
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        { [sty.rootaction_add]: hasVariant($state, "action", "add") }
      )}
      onClick={args.onClick}
    >
      <div className={classNames(projectcss.all, sty.freeBox__cIMgF)}>
        <div className={classNames(projectcss.all, sty.freeBox__fvhYh)}>
          <Icon115Icon
            className={classNames(projectcss.all, sty.svg__cSlIz, {
              [sty.svgaction_load__cSlIzzmZa6]: hasVariant(
                $state,
                "action",
                "load"
              ),
              [sty.svgaction_red__cSlIzWe6Q]: hasVariant(
                $state,
                "action",
                "red"
              )
            })}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yvOe,
              {
                [sty.textaction_add__yvOEaUqTp]: hasVariant(
                  $state,
                  "action",
                  "add"
                ),
                [sty.textaction_red__yvOeWe6Q]: hasVariant(
                  $state,
                  "action",
                  "red"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.creadit.toLocaleString() + " تومان ";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
      <Button
        data-plasmic-name={"buttonLiom4"}
        data-plasmic-override={overrides.buttonLiom4}
        className={classNames("__wab_instance", sty.buttonLiom4, {
          [sty.buttonLiom4action_add]: hasVariant($state, "action", "add")
        })}
        color={generateStateValueProp($state, ["buttonLiom4", "color"])}
        load={generateStateValueProp($state, ["buttonLiom4", "load"])}
        loading={generateStateValueProp($state, ["buttonLiom4", "loading"])}
        onColorChange={async (...eventArgs: any) => {
          ((...eventArgs) => {
            generateStateOnChangeProp($state, ["buttonLiom4", "color"])(
              eventArgs[0]
            );
          }).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onLoadChange={async (...eventArgs: any) => {
          ((...eventArgs) => {
            generateStateOnChangeProp($state, ["buttonLiom4", "load"])(
              eventArgs[0]
            );
          }).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onLoadingChange={async (...eventArgs: any) => {
          ((...eventArgs) => {
            generateStateOnChangeProp($state, ["buttonLiom4", "loading"])(
              eventArgs[0]
            );
          }).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        shape={"round"}
        size={"minimal"}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__izlpC
          )}
        >
          {"Button"}
        </div>
        <Icon361Icon
          className={classNames(projectcss.all, sty.svg__xXrFq)}
          role={"img"}
        />
      </Button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "buttonLiom4"],
  buttonLiom4: ["buttonLiom4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  buttonLiom4: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCreaditButten__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCreaditButten__VariantsArgs;
    args?: PlasmicCreaditButten__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicCreaditButten__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicCreaditButten__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCreaditButten__ArgProps,
          internalVariantPropNames: PlasmicCreaditButten__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCreaditButten__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCreaditButten";
  } else {
    func.displayName = `PlasmicCreaditButten.${nodeName}`;
  }
  return func;
}

export const PlasmicCreaditButten = Object.assign(
  // Top-level PlasmicCreaditButten renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    buttonLiom4: makeNodeComponent("buttonLiom4"),

    // Metadata about props expected for PlasmicCreaditButten
    internalVariantProps: PlasmicCreaditButten__VariantProps,
    internalArgProps: PlasmicCreaditButten__ArgProps
  }
);

export default PlasmicCreaditButten;
/* prettier-ignore-end */
