// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 47YEdMGPo49m

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicCyclebox.module.css"; // plasmic-import: 47YEdMGPo49m/css

createPlasmicElementProxy;

export type PlasmicCyclebox__VariantMembers = {
  pms: "pms";
  fertility: "fertility";
  period: "period";
};
export type PlasmicCyclebox__VariantsArgs = {
  pms?: SingleBooleanChoiceArg<"pms">;
  fertility?: SingleBooleanChoiceArg<"fertility">;
  period?: SingleBooleanChoiceArg<"period">;
};
type VariantPropType = keyof PlasmicCyclebox__VariantsArgs;
export const PlasmicCyclebox__VariantProps = new Array<VariantPropType>(
  "pms",
  "fertility",
  "period"
);

export type PlasmicCyclebox__ArgsType = {
  userData?: any;
  children?: React.ReactNode;
  onPmsChange?: (val: any) => void;
  onFertilityChange?: (val: any) => void;
  onPeriodChange?: (val: any) => void;
  cycle?: string;
  onCycleChange?: (val: string) => void;
  onClickDescription?: (event: any) => void;
  textsycle?: string;
  onTextsycleChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicCyclebox__ArgsType;
export const PlasmicCyclebox__ArgProps = new Array<ArgPropType>(
  "userData",
  "children",
  "onPmsChange",
  "onFertilityChange",
  "onPeriodChange",
  "cycle",
  "onCycleChange",
  "onClickDescription",
  "textsycle",
  "onTextsycleChange"
);

export type PlasmicCyclebox__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultCycleboxProps {
  userData?: any;
  children?: React.ReactNode;
  onPmsChange?: (val: any) => void;
  onFertilityChange?: (val: any) => void;
  onPeriodChange?: (val: any) => void;
  cycle?: string;
  onCycleChange?: (val: string) => void;
  onClickDescription?: (event: any) => void;
  textsycle?: string;
  onTextsycleChange?: (val: string) => void;
  pms?: SingleBooleanChoiceArg<"pms">;
  fertility?: SingleBooleanChoiceArg<"fertility">;
  period?: SingleBooleanChoiceArg<"period">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCyclebox__RenderFunc(props: {
  variants: PlasmicCyclebox__VariantsArgs;
  args: PlasmicCyclebox__ArgsType;
  overrides: PlasmicCyclebox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pms",
        type: "writable",
        variableType: "variant",

        valueProp: "pms",
        onChangeProp: "onPmsChange"
      },
      {
        path: "fertility",
        type: "writable",
        variableType: "variant",

        valueProp: "fertility",
        onChangeProp: "onFertilityChange"
      },
      {
        path: "period",
        type: "writable",
        variableType: "variant",

        valueProp: "period",
        onChangeProp: "onPeriodChange"
      },
      {
        path: "cycle",
        type: "writable",
        variableType: "text",

        valueProp: "cycle",
        onChangeProp: "onCycleChange"
      },
      {
        path: "textsycle",
        type: "writable",
        variableType: "text",

        valueProp: "textsycle",
        onChangeProp: "onTextsycleChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootfertility]: hasVariant($state, "fertility", "fertility"),
          [sty.rootperiod]: hasVariant($state, "period", "period"),
          [sty.rootpms]: hasVariant($state, "pms", "pms")
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__dhejs, {
          [sty.freeBoxfertility__dhejsvlklK]: hasVariant(
            $state,
            "fertility",
            "fertility"
          ),
          [sty.freeBoxperiod__dhejs6AdLd]: hasVariant(
            $state,
            "period",
            "period"
          ),
          [sty.freeBoxpms__dhejssscqc]: hasVariant($state, "pms", "pms")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__uykBc)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yG1Pn
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        switch (
                          $state.user.data.result.userStatus.periodStatus
                        ) {
                          case null:
                            return (
                              $state.user.data.result.user.name +
                              " الان در وضعیت عادی است."
                            );
                          case "fertility":
                            return (
                              $state.user.data.result.user.name +
                              " الان در وضعیت تخمک گذاری است."
                            );
                          case "pms":
                            return (
                              $state.user.data.result.user.name +
                              " الان در وضعیت pms است."
                            );
                          case "period":
                            return (
                              $state.user.data.result.user.name +
                              " الان در وضعیت پریود است."
                            );
                          default:
                            return "وضعیت فعلی";
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0645\u0644\u06cc\u06a9\u0627 \u0627\u0644\u0627\u0646 \u062f\u0631 \u0648\u0636\u0639\u06cc\u062a pms \u0627\u0633\u062a ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
          ),
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenperiod]: hasVariant(
              $state,
              "period",
              "period"
            )
          })
        })}
      </Stack__>
      <div
        className={classNames(projectcss.all, sty.freeBox___66Lnm, {
          [sty.freeBoxpms___66Lnmsscqc]: hasVariant($state, "pms", "pms")
        })}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgfertility]: hasVariant($state, "fertility", "fertility"),
            [sty.imgperiod]: hasVariant($state, "period", "period"),
            [sty.imgpms]: hasVariant($state, "pms", "pms")
          })}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobile") ? "85px" : "150px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobile") ? "85px" : "150px"
          }
          loading={"lazy"}
          src={{
            src: "/plasmic/liom_hamyar/images/_72508101Png.png",
            fullWidth: 491,
            fullHeight: 450,
            aspectRatio: undefined
          }}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__nCGi, {
            [sty.freeBoxfertility__nCGIvlklK]: hasVariant(
              $state,
              "fertility",
              "fertility"
            ),
            [sty.freeBoxperiod__nCGi6AdLd]: hasVariant(
              $state,
              "period",
              "period"
            ),
            [sty.freeBoxpms__nCGIsscqc]: hasVariant($state, "pms", "pms")
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__srBvc,
              {
                [sty.textfertility__srBvcvlklK]: hasVariant(
                  $state,
                  "fertility",
                  "fertility"
                ),
                [sty.textperiod__srBvc6AdLd]: hasVariant(
                  $state,
                  "period",
                  "period"
                ),
                [sty.textpms__srBvcsscqc]: hasVariant($state, "pms", "pms")
              }
            )}
          >
            {"\u0627\u062a\u0645\u0627\u0645 \u0648\u0636\u0639\u06cc\u062a:"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__r4Hpw,
              {
                [sty.textfertility__r4HpWvlklK]: hasVariant(
                  $state,
                  "fertility",
                  "fertility"
                ),
                [sty.textperiod__r4Hpw6AdLd]: hasVariant(
                  $state,
                  "period",
                  "period"
                ),
                [sty.textpms__r4HpWsscqc]: hasVariant($state, "pms", "pms")
              }
            )}
          >
            {hasVariant($state, "pms", "pms") &&
            hasVariant(globalVariants, "screen", "mobile") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return $state.textsycle;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "5 \u0631\u0648\u0632";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : (
              <React.Fragment>
                {(() => {
                  try {
                    return $state.textsycle;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            )}
          </div>
        </div>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__brqp2,
          {
            [sty.textfertility__brqp2VlklK]: hasVariant(
              $state,
              "fertility",
              "fertility"
            ),
            [sty.textpms__brqp2Sscqc]: hasVariant($state, "pms", "pms")
          }
        )}
        onClick={args.onClickDescription}
      >
        {hasVariant($state, "pms", "pms")
          ? "pms \u0686\u06cc\u0633\u062a\u061f"
          : "\u062a\u062e\u0645\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0686\u06cc\u0633\u062a\u061f"}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCyclebox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCyclebox__VariantsArgs;
    args?: PlasmicCyclebox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCyclebox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCyclebox__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCyclebox__ArgProps,
          internalVariantPropNames: PlasmicCyclebox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCyclebox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCyclebox";
  } else {
    func.displayName = `PlasmicCyclebox.${nodeName}`;
  }
  return func;
}

export const PlasmicCyclebox = Object.assign(
  // Top-level PlasmicCyclebox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicCyclebox
    internalVariantProps: PlasmicCyclebox__VariantProps,
    internalArgProps: PlasmicCyclebox__ArgProps
  }
);

export default PlasmicCyclebox;
/* prettier-ignore-end */
