// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: Z2cK5LB8JLFR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import RadioGroup from "../../RadioGroup"; // plasmic-import: bKwCi29rjzVj/component
import Radio from "../../Radio"; // plasmic-import: 7gGRP6bmPdFU/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicQuestion.module.css"; // plasmic-import: Z2cK5LB8JLFR/css

createPlasmicElementProxy;

export type PlasmicQuestion__VariantMembers = {
  _2Question: "_2Question";
  _4Question: "_4Question";
};
export type PlasmicQuestion__VariantsArgs = {
  _2Question?: SingleBooleanChoiceArg<"_2Question">;
  _4Question?: SingleBooleanChoiceArg<"_4Question">;
};
type VariantPropType = keyof PlasmicQuestion__VariantsArgs;
export const PlasmicQuestion__VariantProps = new Array<VariantPropType>(
  "_2Question",
  "_4Question"
);

export type PlasmicQuestion__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicQuestion__ArgsType;
export const PlasmicQuestion__ArgProps = new Array<ArgPropType>("children");

export type PlasmicQuestion__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultQuestionProps {
  children?: React.ReactNode;
  _2Question?: SingleBooleanChoiceArg<"_2Question">;
  _4Question?: SingleBooleanChoiceArg<"_4Question">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicQuestion__RenderFunc(props: {
  variants: PlasmicQuestion__VariantsArgs;
  args: PlasmicQuestion__ArgsType;
  overrides: PlasmicQuestion__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "_2Question",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props._2Question
      },
      {
        path: "_4Question",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props._4Question
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.root_2Question]: hasVariant($state, "_2Question", "_2Question"),
          [sty.root_4Question]: hasVariant($state, "_4Question", "_4Question")
        }
      )}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0K4D6
              )}
            >
              {"Enter some text"}
            </div>
            {false
              ? (() => {
                  const child$Props = {
                    autoSize: true,
                    className: classNames("__wab_instance", sty.textArea__jkK0),
                    placeholder:
                      "\u067e\u0627\u0633\u062e \u0634\u0645\u0627...",
                    value: ``
                  };

                  return <AntdTextArea {...child$Props} />;
                })()
              : null}
            <RadioGroup
              className={classNames("__wab_instance", sty.radioGroup__imka)}
              label={null}
              options={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__oBUcq)}
                >
                  <Radio
                    className={classNames("__wab_instance", sty.radio__m7Mm)}
                    label={"Option 1"}
                    value={"option1"}
                  />

                  <Radio
                    className={classNames("__wab_instance", sty.radio__hkldA)}
                    label={"Option 2"}
                    value={"option2"}
                  />
                </Stack__>
              }
            />

            <RadioGroup
              className={classNames("__wab_instance", sty.radioGroup__j7FkE)}
              label={null}
              options={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xbJVr)}
                >
                  <Radio
                    className={classNames("__wab_instance", sty.radio__uy0Tf)}
                    label={"Option 1"}
                    value={"option1"}
                  />

                  <Radio
                    className={classNames("__wab_instance", sty.radio__lxrsO)}
                    label={"Option 2"}
                    value={"option2"}
                  />
                </Stack__>
              }
            />
          </React.Fragment>
        ),
        value: args.children
      })}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQuestion__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQuestion__VariantsArgs;
    args?: PlasmicQuestion__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicQuestion__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicQuestion__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuestion__ArgProps,
          internalVariantPropNames: PlasmicQuestion__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuestion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuestion";
  } else {
    func.displayName = `PlasmicQuestion.${nodeName}`;
  }
  return func;
}

export const PlasmicQuestion = Object.assign(
  // Top-level PlasmicQuestion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicQuestion
    internalVariantProps: PlasmicQuestion__VariantProps,
    internalArgProps: PlasmicQuestion__ArgProps
  }
);

export default PlasmicQuestion;
/* prettier-ignore-end */
