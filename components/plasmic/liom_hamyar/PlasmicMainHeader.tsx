/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 1YQK_N8j3twT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdDrawer } from "@plasmicpkgs/antd5/skinny/registerDrawer";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMainHeader.module.css"; // plasmic-import: 1YQK_N8j3twT/css

import Icon185Icon from "./icons/PlasmicIcon__Icon185"; // plasmic-import: 3QmHdQOUm1zK/icon
import Icon188Icon from "./icons/PlasmicIcon__Icon188"; // plasmic-import: Ap0CNp82zKxk/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon189Icon from "./icons/PlasmicIcon__Icon189"; // plasmic-import: V52xqNaFzp42/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon190Icon from "./icons/PlasmicIcon__Icon190"; // plasmic-import: tsFhlLw3Wre3/icon
import Icon193Icon from "./icons/PlasmicIcon__Icon193"; // plasmic-import: mQViEY5IKL9R/icon
import Icon194Icon from "./icons/PlasmicIcon__Icon194"; // plasmic-import: uU66A14xTk1C/icon
import Icon226Icon from "./icons/PlasmicIcon__Icon226"; // plasmic-import: i72W_8jC8xCg/icon
import Icon187Icon from "./icons/PlasmicIcon__Icon187"; // plasmic-import: TGEaylyFP26z/icon
import Icon157Icon from "./icons/PlasmicIcon__Icon157"; // plasmic-import: pYMHtMPOTSpB/icon

createPlasmicElementProxy;

export type PlasmicMainHeader__VariantMembers = {
  hamyar: "hamyar";
};
export type PlasmicMainHeader__VariantsArgs = {
  hamyar?: SingleBooleanChoiceArg<"hamyar">;
};
type VariantPropType = keyof PlasmicMainHeader__VariantsArgs;
export const PlasmicMainHeader__VariantProps = new Array<VariantPropType>(
  "hamyar"
);

export type PlasmicMainHeader__ArgsType = {
  userinfo?: any;
  token?: string;
  dopen?: boolean;
  onDopenChange2?: (val: string) => void;
  openEdit?: () => void;
  hamyarshop?: () => void;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicMainHeader__ArgsType;
export const PlasmicMainHeader__ArgProps = new Array<ArgPropType>(
  "userinfo",
  "token",
  "dopen",
  "onDopenChange2",
  "openEdit",
  "hamyarshop",
  "children",
  "slot"
);

export type PlasmicMainHeader__OverridesType = {
  root?: Flex__<"div">;
  drawer?: Flex__<typeof AntdDrawer>;
  button?: Flex__<typeof Button>;
  button4?: Flex__<typeof Button>;
  modal?: Flex__<typeof AntdModal>;
  button2?: Flex__<typeof Button>;
  button3?: Flex__<typeof Button>;
};

export interface DefaultMainHeaderProps {
  userinfo?: any;
  token?: string;
  dopen?: boolean;
  onDopenChange2?: (val: string) => void;
  openEdit?: () => void;
  hamyarshop?: () => void;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  hamyar?: SingleBooleanChoiceArg<"hamyar">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainHeader__RenderFunc(props: {
  variants: PlasmicMainHeader__VariantsArgs;
  args: PlasmicMainHeader__ArgsType;
  overrides: PlasmicMainHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          userinfo: {},
          token:
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjkyYWRlNjBlLWYyZTEtNDIwNi05NzNiLTIwNDYzYjhlM2FmNCIsImlhdCI6MTczODgzNzg3Nn0.iaZlGzwVEN5P0kQMgdTy2sNsBIbJai8WAG1sSDhqpL4"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.dopen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "white"
      },
      {
        path: "dopen",
        type: "writable",
        variableType: "boolean",

        valueProp: "dopen",
        onChangeProp: "onDopenChange2"
      },
      {
        path: "allowanceUser",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(localStorage.getItem("allowanceUser"));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ["line", "yellow"]
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "button.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button2.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button3.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "hamyar",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hamyar
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "white"
      },
      {
        path: "button4.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        { [sty.roothamyar]: hasVariant($state, "hamyar", "hamyar") }
      )}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <div className={classNames(projectcss.all, sty.freeBox__tlDKw)}>
            <Icon185Icon
              className={classNames(projectcss.all, sty.svg__lyXjc)}
              onClick={async event => {
                const $steps = {};
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xj0O6
              )}
            >
              {
                "\u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u0648\u06cc\u0698\u0647"
              }
            </div>
          </div>
        ),
        value: args.children
      })}
      <div
        className={classNames(projectcss.all, sty.freeBox__t17Fm, {
          [sty.freeBoxhamyar__t17Fms1T6S]: hasVariant(
            $state,
            "hamyar",
            "hamyar"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: null,
          value: args.slot
        })}
      </div>
      <AntdDrawer
        data-plasmic-name={"drawer"}
        data-plasmic-override={overrides.drawer}
        className={classNames("__wab_instance", sty.drawer, {
          [sty.drawerhamyar]: hasVariant($state, "hamyar", "hamyar")
        })}
        closeButtonClassName={classNames({ [sty["pcls_lqSQHfqD67bF"]]: true })}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames
        )}
        drawerBodyClassName={classNames({ [sty["pcls_IN1eJ6efbZad"]]: true })}
        drawerHeaderClassName={classNames({ [sty["pcls_j4A6aygAPpw-"]]: true })}
        drawerMaskClassName={classNames({ [sty["pcls_jxC0SG3FaIWz"]]: true })}
        drawerScopeClassName={sty["drawer__drawer"]}
        drawerTitleClassName={classNames({ [sty["pcls_hmJ-h55TsUV1"]]: true })}
        forceRender={false}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["drawer", "open"]).apply(
            null,
            eventArgs
          );

          (async open => {
            const $steps = {};

            $steps["updateDopen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["dopen"]
                    },
                    operation: 0,
                    value: $state.drawer.open
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateDopen"] != null &&
              typeof $steps["updateDopen"] === "object" &&
              typeof $steps["updateDopen"].then === "function"
            ) {
              $steps["updateDopen"] = await $steps["updateDopen"];
            }
          }).apply(null, eventArgs);
        }}
        open={generateStateValueProp($state, ["drawer", "open"])}
        title={
          <div className={classNames(projectcss.all, sty.freeBox__yxJdj)}>
            <div className={classNames(projectcss.all, sty.freeBox__qO33Y)}>
              <div
                className={classNames(projectcss.all, sty.freeBox__pywp4, {
                  [sty.freeBoxhamyar__pywp4S1T6S]: hasVariant(
                    $state,
                    "hamyar",
                    "hamyar"
                  )
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__aMfd1)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yvPVb,
                      {
                        [sty.texthamyar__yvPVbs1T6S]: hasVariant(
                          $state,
                          "hamyar",
                          "hamyar"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.userinfo.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j6RPw
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.userinfo.username;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__iSqL)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDopen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dopen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDopen"] != null &&
                      typeof $steps["updateDopen"] === "object" &&
                      typeof $steps["updateDopen"].then === "function"
                    ) {
                      $steps["updateDopen"] = await $steps["updateDopen"];
                    }

                    $steps["invokeGlobalAction2"] = true
                      ? (() => {
                          const actionArgs = { eventRef: $props["openEdit"] };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] =
                        await $steps["invokeGlobalAction2"];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://api.liom.app/service/log",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    userId: JSON.parse(
                                      window.localStorage.getItem("userinfo")
                                    ).user.id,
                                    pageName: "calendar",
                                    action: "GoToEditProfile",
                                    extraData: {}
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization:
                                        "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                    }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] =
                        await $steps["invokeGlobalAction"];
                    }
                  }}
                >
                  <Icon187Icon
                    className={classNames(projectcss.all, sty.svg__bTKo)}
                    role={"img"}
                  />
                </div>
              </div>
              <Embed
                className={classNames("__wab_instance", sty.embedHtml__mao6I)}
                code={"<hr></hr>"}
              />

              <div className={classNames(projectcss.all, sty.freeBox__nq9Fh)}>
                <Icon188Icon
                  className={classNames(projectcss.all, sty.svg__l51C0)}
                  role={"img"}
                />

                {(
                  hasVariant($state, "hamyar", "hamyar")
                    ? (() => {
                        try {
                          return !$props.userinfo.hamyarStatus;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return $state.allowanceUser.length == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xyhef,
                      {
                        [sty.texthamyar__xyhefs1T6S]: hasVariant(
                          $state,
                          "hamyar",
                          "hamyar"
                        )
                      }
                    )}
                  >
                    {
                      "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0641\u0639\u0627\u0644\u06cc \u0646\u062f\u0627\u0631\u06cc!"
                    }
                  </div>
                ) : null}
                {(
                  hasVariant($state, "hamyar", "hamyar")
                    ? true
                    : (() => {
                        try {
                          return $state.allowanceUser.length > 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__azfXx,
                      {
                        [sty.texthamyar__azfXxs1T6S]: hasVariant(
                          $state,
                          "hamyar",
                          "hamyar"
                        )
                      }
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return window.open("/shop", "_self");
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["updateDopen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dopen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDopen"] != null &&
                        typeof $steps["updateDopen"] === "object" &&
                        typeof $steps["updateDopen"].then === "function"
                      ) {
                        $steps["updateDopen"] = await $steps["updateDopen"];
                      }
                    }}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return `اشتراک های فعال شما: ${$state.allowanceUser.length}`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0641\u0639\u0627\u0644\u06cc \u0646\u062f\u0627\u0631\u06cc!";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                ) : null}
                {(
                  hasVariant($state, "hamyar", "hamyar")
                    ? (() => {
                        try {
                          return $props.userinfo.hamyarStatus;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : false
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1MNyY,
                      {
                        [sty.texthamyar___1MNyYs1T6S]: hasVariant(
                          $state,
                          "hamyar",
                          "hamyar"
                        )
                      }
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runHamyarshop"] = true
                        ? (() => {
                            const actionArgs = {
                              eventRef: $props["hamyarshop"]
                            };
                            return (({ eventRef, args }) => {
                              return eventRef?.(...(args ?? []));
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runHamyarshop"] != null &&
                        typeof $steps["runHamyarshop"] === "object" &&
                        typeof $steps["runHamyarshop"].then === "function"
                      ) {
                        $steps["runHamyarshop"] = await $steps["runHamyarshop"];
                      }

                      $steps["updateDopen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dopen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDopen"] != null &&
                        typeof $steps["updateDopen"] === "object" &&
                        typeof $steps["updateDopen"].then === "function"
                      ) {
                        $steps["updateDopen"] = await $steps["updateDopen"];
                      }
                    }}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            var hamyarTime = $props.userinfo.hamyarTime;
                            if (hamyarTime) {
                              const targetDate = new Date(
                                Date.UTC(
                                  hamyarTime.year,
                                  hamyarTime.month - 1,
                                  hamyarTime.day,
                                  hamyarTime.hour,
                                  hamyarTime.minute,
                                  hamyarTime.second
                                )
                              );
                              const now = new Date();
                              const diffMs = targetDate - now;
                              const diffDays = diffMs / (1000 * 60 * 60 * 24);
                              if (diffDays < 3 && diffDays > 0) {
                                return "۳ روز تا پایان اشتراک!";
                              } else if (diffDays <= 0) {
                                return "اشتراک به پایان رسیده است";
                              } else {
                                const formatter = new Intl.DateTimeFormat(
                                  "fa-IR",
                                  {
                                    timeZone: "Asia/Tehran",
                                    year: "numeric",
                                    month: "long",
                                    day: "numeric"
                                  }
                                );
                                return (
                                  "اشتراک فعال تا:  " +
                                  formatter.format(targetDate)
                                );
                              }
                            } else {
                              return "";
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0641\u0639\u0627\u0644\u06cc \u0646\u062f\u0627\u0631\u06cc!";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                ) : null}
              </div>
            </div>
          </div>
        }
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__kyVHq, {
            [sty.freeBoxhamyar__kyVHqs1T6S]: hasVariant(
              $state,
              "hamyar",
              "hamyar"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__b3Xdd, {
              [sty.freeBoxhamyar__b3Xdds1T6S]: hasVariant(
                $state,
                "hamyar",
                "hamyar"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__v9VFd, {
                [sty.freeBoxhamyar__v9VFds1T6S]: hasVariant(
                  $state,
                  "hamyar",
                  "hamyar"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return window.open("/shop", "_self");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://api.liom.app/service/log",
                          undefined,
                          (() => {
                            try {
                              return {
                                userId: JSON.parse(
                                  window.localStorage.getItem("userinfo")
                                ).user.id,
                                pageName: "calendar",
                                action: "GoToShop",
                                extraData: {}
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return {
                                headers: {
                                  "Content-Type": "application/json",
                                  Authorization:
                                    "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] =
                    await $steps["invokeGlobalAction"];
                }

                $steps["updateDopen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dopen"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDopen"] != null &&
                  typeof $steps["updateDopen"] === "object" &&
                  typeof $steps["updateDopen"].then === "function"
                ) {
                  $steps["updateDopen"] = await $steps["updateDopen"];
                }
              }}
            >
              <div className={classNames(projectcss.all, sty.freeBox__xcm9E)}>
                <Icon188Icon
                  className={classNames(projectcss.all, sty.svg__jw7Zc)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rt55J
                  )}
                >
                  {
                    "\u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0633\u0644\u0627\u0645\u062a"
                  }
                </div>
              </div>
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                color={generateStateValueProp($state, ["button", "color"])}
                load={generateStateValueProp($state, ["button", "load"])}
                loading={generateStateValueProp($state, ["button", "loading"])}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadingChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "loading"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                size={"minimal"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pjbda
                  )}
                >
                  {"\u062e\u0631\u06cc\u062f"}
                </div>
              </Button>
            </div>
            {(hasVariant($state, "hamyar", "hamyar") ? true : false) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__zEJji, {
                  [sty.freeBoxhamyar__zEJjis1T6S]: hasVariant(
                    $state,
                    "hamyar",
                    "hamyar"
                  )
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["runHamyarshop"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["hamyarshop"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runHamyarshop"] != null &&
                    typeof $steps["runHamyarshop"] === "object" &&
                    typeof $steps["runHamyarshop"].then === "function"
                  ) {
                    $steps["runHamyarshop"] = await $steps["runHamyarshop"];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://api.liom.app/service/log",
                            undefined,
                            (() => {
                              try {
                                return {
                                  userId: JSON.parse(
                                    window.localStorage.getItem("userinfo")
                                  ).user.id,
                                  pageName: "calendar",
                                  action: "GoToShop",
                                  extraData: {}
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return {
                                  headers: {
                                    "Content-Type": "application/json",
                                    Authorization:
                                      "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                  }
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] =
                      await $steps["invokeGlobalAction"];
                  }

                  $steps["updateDopen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dopen"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDopen"] != null &&
                    typeof $steps["updateDopen"] === "object" &&
                    typeof $steps["updateDopen"].then === "function"
                  ) {
                    $steps["updateDopen"] = await $steps["updateDopen"];
                  }
                }}
              >
                <div className={classNames(projectcss.all, sty.freeBox__dr9Xd)}>
                  <Icon188Icon
                    className={classNames(projectcss.all, sty.svg__niTIi)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rybY
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return !$props.userinfo.hamyarStatus
                            ? "فعالسازی اشتراک ویژه"
                            : "تمدید اشتراک ویژه";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <Button
                  data-plasmic-name={"button4"}
                  data-plasmic-override={overrides.button4}
                  className={classNames("__wab_instance", sty.button4)}
                  color={generateStateValueProp($state, ["button4", "color"])}
                  load={generateStateValueProp($state, ["button4", "load"])}
                  loading={generateStateValueProp($state, [
                    "button4",
                    "loading"
                  ])}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button4", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button4", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button4", "loading"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  size={"minimal"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ca771
                    )}
                  >
                    {"\u062e\u0631\u06cc\u062f"}
                  </div>
                </Button>
              </div>
            ) : null}
            <div
              className={classNames(projectcss.all, sty.freeBox__uiHmz, {
                [sty.freeBoxhamyar__uiHmzs1T6S]: hasVariant(
                  $state,
                  "hamyar",
                  "hamyar"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return window.open(
                            `/status-day?userId=${$props.userinfo.id}`,
                            "_self"
                          );
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateDopen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dopen"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDopen"] != null &&
                  typeof $steps["updateDopen"] === "object" &&
                  typeof $steps["updateDopen"].then === "function"
                ) {
                  $steps["updateDopen"] = await $steps["updateDopen"];
                }
              }}
            >
              <Icon189Icon
                className={classNames(projectcss.all, sty.svg__hSoM5)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tsCgJ
                )}
              >
                {
                  "\u0628\u0631\u0646\u0627\u0645\u0647 \u0631\u06cc\u0632\u06cc \u0627\u0645\u0631\u0648\u0632"
                }
              </div>
              <ChevronLeftIcon
                className={classNames(projectcss.all, sty.svg___3OeW0)}
                role={"img"}
              />
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__nngrk, {
                [sty.freeBoxhamyar__nngrks1T6S]: hasVariant(
                  $state,
                  "hamyar",
                  "hamyar"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return window.open(
                            `/Signs-page?token=${$props.token}`,
                            "_self"
                          );
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateDopen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dopen"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDopen"] != null &&
                  typeof $steps["updateDopen"] === "object" &&
                  typeof $steps["updateDopen"].then === "function"
                ) {
                  $steps["updateDopen"] = await $steps["updateDopen"];
                }
              }}
            >
              <Icon190Icon
                className={classNames(projectcss.all, sty.svg__yq9O)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nh9B5
                )}
              >
                {
                  "\u0646\u0634\u0627\u0646\u0647\u200c\u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc"
                }
              </div>
              <ChevronLeftIcon
                className={classNames(projectcss.all, sty.svg__yasxJ)}
                role={"img"}
              />
            </div>
            <Embed
              className={classNames("__wab_instance", sty.embedHtml__xr84P)}
              code={"<hr></hr>"}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__pk8S, {
                [sty.freeBoxhamyar__pk8SS1T6S]: hasVariant(
                  $state,
                  "hamyar",
                  "hamyar"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return window.open("/about-us", "_self");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateDopen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dopen"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDopen"] != null &&
                  typeof $steps["updateDopen"] === "object" &&
                  typeof $steps["updateDopen"].then === "function"
                ) {
                  $steps["updateDopen"] = await $steps["updateDopen"];
                }
              }}
            >
              <Icon193Icon
                className={classNames(projectcss.all, sty.svg__f8NU)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1IMnQ
                )}
              >
                {"\u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0627"}
              </div>
              <ChevronLeftIcon
                className={classNames(projectcss.all, sty.svg__v0Is6)}
                role={"img"}
              />
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__sLwd, {
                [sty.freeBoxhamyar__sLwdS1T6S]: hasVariant(
                  $state,
                  "hamyar",
                  "hamyar"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return window.open("/contact-us", "_self");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateDopen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dopen"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDopen"] != null &&
                  typeof $steps["updateDopen"] === "object" &&
                  typeof $steps["updateDopen"].then === "function"
                ) {
                  $steps["updateDopen"] = await $steps["updateDopen"];
                }
              }}
            >
              <Icon194Icon
                className={classNames(projectcss.all, sty.svg__f53AR)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xkR9L
                )}
              >
                {
                  "\u062a\u0645\u0627\u0633 \u0628\u0627 \u0645\u0627 \u0648 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"
                }
              </div>
              <ChevronLeftIcon
                className={classNames(projectcss.all, sty.svg__qoZqU)}
                role={"img"}
              />
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__yGyS, {
              [sty.freeBoxhamyar__yGySs1T6S]: hasVariant(
                $state,
                "hamyar",
                "hamyar"
              )
            })}
          >
            <Embed
              className={classNames("__wab_instance", sty.embedHtml___3Onig)}
              code={"<hr></hr>"}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox___0Wkzo, {
                [sty.freeBoxhamyar___0WkzOs1T6S]: hasVariant(
                  $state,
                  "hamyar",
                  "hamyar"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateDopen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dopen"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDopen"] != null &&
                  typeof $steps["updateDopen"] === "object" &&
                  typeof $steps["updateDopen"].then === "function"
                ) {
                  $steps["updateDopen"] = await $steps["updateDopen"];
                }

                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }
              }}
            >
              <Icon226Icon
                className={classNames(projectcss.all, sty.svg__zvo7P)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eMuU
                )}
              >
                {
                  "\u062e\u0631\u0648\u062c \u0627\u0632 \u062d\u0633\u0627\u0628"
                }
              </div>
            </div>
          </div>
        </div>
      </AntdDrawer>
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames
        )}
        hideFooter={true}
        maskClosable={true}
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["modal", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={
          <div className={classNames(projectcss.all, sty.freeBox__wmghd)}>
            <Icon157Icon
              className={classNames(projectcss.all, sty.svg__bK9T)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__i3NoB
              )}
            >
              {"\u062e\u0631\u0648\u062c \u0627\u0632 \u062d\u0633\u0627\u0628"}
            </div>
          </div>
        }
        trigger={null}
      >
        <div className={classNames(projectcss.all, sty.freeBox__ixvfL)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___6Bs4D
            )}
          >
            {
              "\u0627\u0632 \u062e\u0627\u0631\u062c \u0634\u062f\u0646 \u0627\u0632 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u062e\u0648\u062f \u0645\u0637\u0645\u0626\u0646 \u0647\u0633\u062a\u06cc\u062f\u061f"
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__tFs5S)}>
            <Button
              data-plasmic-name={"button2"}
              data-plasmic-override={overrides.button2}
              className={classNames("__wab_instance", sty.button2)}
              color={generateStateValueProp($state, ["button2", "color"])}
              load={generateStateValueProp($state, ["button2", "load"])}
              loading={generateStateValueProp($state, ["button2", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            window.document.cookie =
                              "token=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.liom.app; secure; SameSite=Lax";
                            window.sessionStorage.clear();
                            return (window.location.href = "/login");
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button2", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button2", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button2", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yotZi
                )}
              >
                {"\u062e\u0631\u0648\u062c"}
              </div>
            </Button>
            <Button
              data-plasmic-name={"button3"}
              data-plasmic-override={overrides.button3}
              className={classNames("__wab_instance", sty.button3)}
              color={generateStateValueProp($state, ["button3", "color"])}
              load={generateStateValueProp($state, ["button3", "load"])}
              loading={generateStateValueProp($state, ["button3", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button3", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button3", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button3", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___05X3Z
                )}
              >
                {"\u062e\u06cc\u0631"}
              </div>
            </Button>
          </div>
        </div>
      </AntdModal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "drawer", "button", "button4", "modal", "button2", "button3"],
  drawer: ["drawer", "button", "button4"],
  button: ["button"],
  button4: ["button4"],
  modal: ["modal", "button2", "button3"],
  button2: ["button2"],
  button3: ["button3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  drawer: typeof AntdDrawer;
  button: typeof Button;
  button4: typeof Button;
  modal: typeof AntdModal;
  button2: typeof Button;
  button3: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainHeader__VariantsArgs;
    args?: PlasmicMainHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicMainHeader__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicMainHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainHeader__ArgProps,
          internalVariantPropNames: PlasmicMainHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainHeader";
  } else {
    func.displayName = `PlasmicMainHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicMainHeader = Object.assign(
  // Top-level PlasmicMainHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    drawer: makeNodeComponent("drawer"),
    button: makeNodeComponent("button"),
    button4: makeNodeComponent("button4"),
    modal: makeNodeComponent("modal"),
    button2: makeNodeComponent("button2"),
    button3: makeNodeComponent("button3"),

    // Metadata about props expected for PlasmicMainHeader
    internalVariantProps: PlasmicMainHeader__VariantProps,
    internalArgProps: PlasmicMainHeader__ArgProps
  }
);

export default PlasmicMainHeader;
/* prettier-ignore-end */
