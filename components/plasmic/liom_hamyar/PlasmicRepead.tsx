/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: bTRB9n2MQ7IL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RadioGrop from "../../RadioGrop"; // plasmic-import: mcNKMbL_6N75/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicRepead.module.css"; // plasmic-import: bTRB9n2MQ7IL/css

createPlasmicElementProxy;

export type PlasmicRepead__VariantMembers = {};
export type PlasmicRepead__VariantsArgs = {};
type VariantPropType = keyof PlasmicRepead__VariantsArgs;
export const PlasmicRepead__VariantProps = new Array<VariantPropType>();

export type PlasmicRepead__ArgsType = {
  data?: any;
  selected?: string;
  onSelectedChange?: (val: string) => void;
  click?: () => void;
};
type ArgPropType = keyof PlasmicRepead__ArgsType;
export const PlasmicRepead__ArgProps = new Array<ArgPropType>(
  "data",
  "selected",
  "onSelectedChange",
  "click"
);

export type PlasmicRepead__OverridesType = {
  root?: Flex__<"div">;
  radioGrop?: Flex__<typeof RadioGrop>;
  text?: Flex__<"div">;
};

export interface DefaultRepeadProps {
  data?: any;
  selected?: string;
  onSelectedChange?: (val: string) => void;
  click?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRepead__RenderFunc(props: {
  variants: PlasmicRepead__VariantsArgs;
  args: PlasmicRepead__ArgsType;
  overrides: PlasmicRepead__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: [1, 2, 3]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selected",
        type: "writable",
        variableType: "text",

        valueProp: "selected",
        onChangeProp: "onSelectedChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $props.data;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <RadioGrop
            data-plasmic-name={"radioGrop"}
            data-plasmic-override={overrides.radioGrop}
            className={classNames("__wab_instance", sty.radioGrop)}
            key={currentIndex}
            onClick={async event => {
              const $steps = {};

              $steps["updateSelected"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["selected"]
                      },
                      operation: 0,
                      value: currentItem.value
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSelected"] != null &&
                typeof $steps["updateSelected"] === "object" &&
                typeof $steps["updateSelected"].then === "function"
              ) {
                $steps["updateSelected"] = await $steps["updateSelected"];
              }

              $steps["runClick"] = true
                ? (() => {
                    const actionArgs = { eventRef: $props["click"] };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runClick"] != null &&
                typeof $steps["runClick"] === "object" &&
                typeof $steps["runClick"].then === "function"
              ) {
                $steps["runClick"] = await $steps["runClick"];
              }
            }}
            selected={(() => {
              try {
                return currentItem.value == $state.selected;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem.label;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </RadioGrop>
        );
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "radioGrop", "text"],
  radioGrop: ["radioGrop", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  radioGrop: typeof RadioGrop;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRepead__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRepead__VariantsArgs;
    args?: PlasmicRepead__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicRepead__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicRepead__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRepead__ArgProps,
          internalVariantPropNames: PlasmicRepead__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRepead__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRepead";
  } else {
    func.displayName = `PlasmicRepead.${nodeName}`;
  }
  return func;
}

export const PlasmicRepead = Object.assign(
  // Top-level PlasmicRepead renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    radioGrop: makeNodeComponent("radioGrop"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicRepead
    internalVariantProps: PlasmicRepead__VariantProps,
    internalArgProps: PlasmicRepead__ArgProps
  }
);

export default PlasmicRepead;
/* prettier-ignore-end */
