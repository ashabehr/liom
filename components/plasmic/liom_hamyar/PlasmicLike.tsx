/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: ARJf0DiYhPbe

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicLike.module.css"; // plasmic-import: ARJf0DiYhPbe/css

import LogoPwaSvgrepoComSvgIcon from "./icons/PlasmicIcon__LogoPwaSvgrepoComSvg"; // plasmic-import: xd3icqtlIdjI/icon
import IconSvgIcon from "./icons/PlasmicIcon__IconSvg"; // plasmic-import: -XPXy44VZe9n/icon
import CafeBazaarLogoSvgIcon from "./icons/PlasmicIcon__CafeBazaarLogoSvg"; // plasmic-import: W_GsLw69YDUh/icon
import BrokenLink2SvgrepoComSvgIcon from "./icons/PlasmicIcon__BrokenLink2SvgrepoComSvg"; // plasmic-import: blnLvMghko66/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon
import Icon237Icon from "./icons/PlasmicIcon__Icon237"; // plasmic-import: 1YA41ClYhYY4/icon
import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: zSmDwH85ZJh8/icon

createPlasmicElementProxy;

export type PlasmicLike__VariantMembers = {
  islike: "islike";
  main: "main";
};
export type PlasmicLike__VariantsArgs = {
  islike?: SingleBooleanChoiceArg<"islike">;
  main?: SingleBooleanChoiceArg<"main">;
};
type VariantPropType = keyof PlasmicLike__VariantsArgs;
export const PlasmicLike__VariantProps = new Array<VariantPropType>(
  "islike",
  "main"
);

export type PlasmicLike__ArgsType = {
  onIslikeChange?: (val: any) => void;
  likeCountForBar?: string;
  islikePost?: boolean;
  postIdForLike?: string;
  tokenForPostLike?: string;
  shere?: boolean;
  user?: any;
  isMain?: boolean;
};
type ArgPropType = keyof PlasmicLike__ArgsType;
export const PlasmicLike__ArgProps = new Array<ArgPropType>(
  "onIslikeChange",
  "likeCountForBar",
  "islikePost",
  "postIdForLike",
  "tokenForPostLike",
  "shere",
  "user",
  "isMain"
);

export type PlasmicLike__OverridesType = {
  root?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultLikeProps {
  onIslikeChange?: (val: any) => void;
  likeCountForBar?: string;
  islikePost?: boolean;
  postIdForLike?: string;
  tokenForPostLike?: string;
  shere?: boolean;
  user?: any;
  isMain?: boolean;
  islike?: SingleBooleanChoiceArg<"islike">;
  main?: SingleBooleanChoiceArg<"main">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLike__RenderFunc(props: {
  variants: PlasmicLike__VariantsArgs;
  args: PlasmicLike__ArgsType;
  overrides: PlasmicLike__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          likeCountForBar: "100",
          islikePost: false,
          shere: false,
          isMain: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "islike",
        type: "writable",
        variableType: "variant",

        valueProp: "islike",
        onChangeProp: "onIslikeChange"
      },
      {
        path: "likeCountForLikeBar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.likeCountForBar;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "isLikeForBar",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.islikePost;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "main",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.main
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        {
          [sty.rootislike]: hasVariant($state, "islike", "islike"),
          [sty.rootmain]: hasVariant($state, "main", "main")
        }
      )}
    >
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        closeIcon={
          <XIcon
            className={classNames(projectcss.all, sty.svg__mSxo1)}
            onClick={async event => {
              const $steps = {};

              $steps["updateModalOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["modal", "open"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateModalOpen"] != null &&
                typeof $steps["updateModalOpen"] === "object" &&
                typeof $steps["updateModalOpen"].then === "function"
              ) {
                $steps["updateModalOpen"] = await $steps["updateModalOpen"];
              }
            }}
            role={"img"}
          />
        }
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          styleTokensClassNames_antd_5_hostless,
          styleTokensClassNames_plasmic_rich_components
        )}
        hideFooter={true}
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["modal", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={
          <div className={classNames(projectcss.all, sty.freeBox__hTf1M)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"70px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"70px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image10.ico",
                fullWidth: 256,
                fullHeight: 256,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rmXa
              )}
            >
              {
                "\u0628\u0631\u0627\u06cc \u0627\u06cc\u0646\u06a9\u0647 \u0628\u062e\u0648\u0627\u06cc \u0627\u06cc\u0646 \u06a9\u0627\u0631 \u0631\u0648 \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u06cc \u0628\u0627\u06cc\u062f \u0627\u067e\u0644\u06cc\u06a9\u06cc\u0634\u0646 \u0631\u0648 \u0646\u0635\u0628 \u06a9\u0646\u06cc.\r\n\u0647\u0631\u06a9\u062f\u0648\u0645 \u0627\u0632 \u062f\u06a9\u0645\u0647 \u0647\u0627\u06cc \u0632\u06cc\u0631 \u06a9\u0647 \u0628\u0627\u0647\u0627\u0634 \u0631\u0627\u062d\u062a \u062a\u0631\u06cc \u0628\u0631\u0627\u06cc \u062f\u0627\u0646\u0644\u0648\u062f \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u06a9\u0646 \u0648 \u0628\u0639\u062f \u0628\u0647 \u062c\u0645\u0639 \u062f\u062e\u062a\u0631\u0648\u0646\u0647 \u06cc \u0645\u0627\u0627\u0636\u0627\u0641\u0647 \u0634\u0648\ud83d\ude0d"
              }
            </div>
          </div>
        }
        trigger={null}
      >
        <div className={classNames(projectcss.all, sty.freeBox___7TaIm)}>
          <div className={classNames(projectcss.all, sty.freeBox__wsyyi)}>
            <div
              className={classNames(projectcss.all, sty.freeBox__quPu8)}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return window.open("https://web.liom.app/");
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
            >
              <LogoPwaSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__soiId)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uZvrB
                )}
              >
                {
                  "\u0648\u0631\u0648\u062f \u0628\u0647 \u0646\u0633\u062e\u0647 \u0648\u0628"
                }
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox___3Lzms)}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return window.open(
                              "https://myket.ir/app/com.diacotdj.liom"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
            >
              <IconSvgIcon
                className={classNames(projectcss.all, sty.svg__fP5W)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yjBrz
                )}
              >
                {
                  "\u062f\u0627\u0646\u0644\u0648\u062f \u0627\u0632 \u0645\u0627\u06cc\u06a9\u062a "
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__oKkBn)}>
            <div
              className={classNames(projectcss.all, sty.freeBox___4Mph)}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return window.open(
                              "https://cafebazaar.ir/app/com.diacotdj.liom"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
            >
              <CafeBazaarLogoSvgIcon
                className={classNames(projectcss.all, sty.svg___9JeEy)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__v47Hn
                )}
              >
                {
                  "\u062f\u0627\u0646\u0644\u0648\u062f \u0627\u0632 \u06a9\u0627\u0641\u0647 \u0628\u0627\u0632\u0627\u0631"
                }
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__ntd6W)}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return window.open(
                              "https://old.liom.app/view/link/liom_google_6.6.9.apk"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
            >
              <BrokenLink2SvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__hmZde)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__i6GE
                )}
              >
                {
                  "\u062f\u0627\u0646\u0644\u0648\u062f \u0628\u0627 \u0644\u06cc\u0646\u06a9 \u0645\u0633\u062a\u0642\u06cc\u0645 "
                }
              </div>
            </div>
          </div>
        </div>
      </AntdModal>
      <div
        className={classNames(projectcss.all, sty.freeBox__waP5W, {
          [sty.freeBoxislike__waP5WM2Mbn]: hasVariant(
            $state,
            "islike",
            "islike"
          ),
          [sty.freeBoxmain__waP5Wn9Zts]: hasVariant($state, "main", "main")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateIslike"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "islike",
                  operation: 2,
                  value: "islike"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIslike"] != null &&
            typeof $steps["updateIslike"] === "object" &&
            typeof $steps["updateIslike"].then === "function"
          ) {
            $steps["updateIslike"] = await $steps["updateIslike"];
          }

          $steps["updateIslike2"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return ($state.likeCountForLikeBar =
                      parseInt($state.likeCountForLikeBar) +
                      ($state.isLikeForBar ? -1 : 1));
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIslike2"] != null &&
            typeof $steps["updateIslike2"] === "object" &&
            typeof $steps["updateIslike2"].then === "function"
          ) {
            $steps["updateIslike2"] = await $steps["updateIslike2"];
          }

          $steps["updateIsLikeForBar"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isLikeForBar"]
                  },
                  operation: 0,
                  value: !$state.isLikeForBar
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsLikeForBar"] != null &&
            typeof $steps["updateIsLikeForBar"] === "object" &&
            typeof $steps["updateIsLikeForBar"].then === "function"
          ) {
            $steps["updateIsLikeForBar"] = await $steps["updateIsLikeForBar"];
          }

          $steps["invokeGlobalAction"] = !$state.isLikeForBar
            ? (() => {
                const actionArgs = {
                  args: [
                    "POST",
                    "https://n8n.staas.ir/webhook/social/post/like",
                    undefined,
                    (() => {
                      try {
                        return {
                          postId: $props.postIdForLike,
                          type: "userLiked",
                          authorization: $props.tokenForPostLike
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["invokeGlobalAction"] != null &&
            typeof $steps["invokeGlobalAction"] === "object" &&
            typeof $steps["invokeGlobalAction"].then === "function"
          ) {
            $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
          }

          $steps["invokeGlobalAction2"] = $state.isLikeForBar
            ? (() => {
                const actionArgs = {
                  args: [
                    "GET",
                    "https://n8n.staas.ir/webhook/social/post/like",
                    (() => {
                      try {
                        return {
                          postId: $props.postIdForLike,
                          authorization: $props.tokenForPostLike
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    undefined
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["invokeGlobalAction2"] != null &&
            typeof $steps["invokeGlobalAction2"] === "object" &&
            typeof $steps["invokeGlobalAction2"].then === "function"
          ) {
            $steps["invokeGlobalAction2"] = await $steps["invokeGlobalAction2"];
          }

          $steps["invokeGlobalAction3"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    "POST",
                    "https://n8n.staas.ir/webhook/social/log",
                    undefined,
                    (() => {
                      try {
                        return {
                          userId: $props.user.id,
                          pageName: $props.isMain
                            ? "socialMainPage"
                            : "socialPostPage",
                          action: $state.isLikeForBar
                            ? "likePost"
                            : "unlikePost"
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["invokeGlobalAction3"] != null &&
            typeof $steps["invokeGlobalAction3"] === "object" &&
            typeof $steps["invokeGlobalAction3"].then === "function"
          ) {
            $steps["invokeGlobalAction3"] = await $steps["invokeGlobalAction3"];
          }
        }}
      >
        <PlasmicIcon__
          PlasmicIconType={
            hasVariant($state, "islike", "islike") ? Icon43Icon : Icon237Icon
          }
          className={classNames(projectcss.all, sty.svg__vsNmA, {
            [sty.svgislike__vsNmAm2Mbn]: hasVariant($state, "islike", "islike"),
            [sty.svgmain__vsNmAn9Zts]: hasVariant($state, "main", "main")
          })}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__moiNk,
            {
              [sty.textislike__moiNkM2Mbn]: hasVariant(
                $state,
                "islike",
                "islike"
              ),
              [sty.textmain__moiNkn9Zts]: hasVariant($state, "main", "main")
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $state.likeCountForLikeBar;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "modal", "img"],
  modal: ["modal", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof AntdModal;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLike__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLike__VariantsArgs;
    args?: PlasmicLike__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLike__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLike__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLike__ArgProps,
          internalVariantPropNames: PlasmicLike__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLike__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLike";
  } else {
    func.displayName = `PlasmicLike.${nodeName}`;
  }
  return func;
}

export const PlasmicLike = Object.assign(
  // Top-level PlasmicLike renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicLike
    internalVariantProps: PlasmicLike__VariantProps,
    internalArgProps: PlasmicLike__ArgProps
  }
);

export default PlasmicLike;
/* prettier-ignore-end */
