// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: ARJf0DiYhPbe

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicLike.module.css"; // plasmic-import: ARJf0DiYhPbe/css

import Icon41Icon from "./icons/PlasmicIcon__Icon41"; // plasmic-import: r6SoVxvsvftJ/icon
import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: zSmDwH85ZJh8/icon

createPlasmicElementProxy;

export type PlasmicLike__VariantMembers = {
  islike: "islike";
};
export type PlasmicLike__VariantsArgs = {
  islike?: SingleBooleanChoiceArg<"islike">;
};
type VariantPropType = keyof PlasmicLike__VariantsArgs;
export const PlasmicLike__VariantProps = new Array<VariantPropType>("islike");

export type PlasmicLike__ArgsType = {
  onIslikeChange?: (val: any) => void;
  likeCountForBar?: string;
};
type ArgPropType = keyof PlasmicLike__ArgsType;
export const PlasmicLike__ArgProps = new Array<ArgPropType>(
  "onIslikeChange",
  "likeCountForBar"
);

export type PlasmicLike__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
  text?: Flex__<"div">;
};

export interface DefaultLikeProps {
  onIslikeChange?: (val: any) => void;
  likeCountForBar?: string;
  islike?: SingleBooleanChoiceArg<"islike">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLike__RenderFunc(props: {
  variants: PlasmicLike__VariantsArgs;
  args: PlasmicLike__ArgsType;
  overrides: PlasmicLike__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          likeCountForBar: "100"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "islike",
        type: "writable",
        variableType: "variant",

        valueProp: "islike",
        onChangeProp: "onIslikeChange"
      },
      {
        path: "likeCountForLikeBar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.likeCountForBar;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootislike]: hasVariant($state, "islike", "islike") }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["updateIslike"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["islike"]
                },
                operation: 0,
                value: !$state.islike
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;

                $stateSet(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateIslike"] != null &&
          typeof $steps["updateIslike"] === "object" &&
          typeof $steps["updateIslike"].then === "function"
        ) {
          $steps["updateIslike"] = await $steps["updateIslike"];
        }

        $steps["updateIslike2"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["likeCountForLikeBar"]
                },
                operation: 0,
                value: ($state.likeCountForLikeBar += $state.islike ? -1 : 1)
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;

                $stateSet(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateIslike2"] != null &&
          typeof $steps["updateIslike2"] === "object" &&
          typeof $steps["updateIslike2"].then === "function"
        ) {
          $steps["updateIslike2"] = await $steps["updateIslike2"];
        }

        $steps["updateIslike3"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["islike"]
                },
                operation: 0,
                value: (() => {
                  return ($state.islike =
                    $state.getInfo.data.result.details.isLiked);
                })()
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;

                $stateSet(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateIslike3"] != null &&
          typeof $steps["updateIslike3"] === "object" &&
          typeof $steps["updateIslike3"].then === "function"
        ) {
          $steps["updateIslike3"] = await $steps["updateIslike3"];
        }
      }}
    >
      <PlasmicIcon__
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        PlasmicIconType={
          hasVariant($state, "islike", "islike") ? Icon43Icon : Icon41Icon
        }
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgislike]: hasVariant($state, "islike", "islike")
        })}
        role={"img"}
      />

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        <React.Fragment>
          {(() => {
            try {
              return $state.likeCountForLikeBar;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "text"],
  svg: ["svg"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLike__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLike__VariantsArgs;
    args?: PlasmicLike__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLike__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLike__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLike__ArgProps,
          internalVariantPropNames: PlasmicLike__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLike__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLike";
  } else {
    func.displayName = `PlasmicLike.${nodeName}`;
  }
  return func;
}

export const PlasmicLike = Object.assign(
  // Top-level PlasmicLike renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicLike
    internalVariantProps: PlasmicLike__VariantProps,
    internalArgProps: PlasmicLike__ArgProps
  }
);

export default PlasmicLike;
/* prettier-ignore-end */
