/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: ndgNxvaF00At

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import RadioGroupLiom from "../../RadioGroupLiom"; // plasmic-import: tXN0uQ-uT9R3/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicReminderCategory.module.css"; // plasmic-import: ndgNxvaF00At/css

import Icon55Icon from "./icons/PlasmicIcon__Icon55"; // plasmic-import: PmmFWvjFbwTw/icon

createPlasmicElementProxy;

export type PlasmicReminderCategory__VariantMembers = {};
export type PlasmicReminderCategory__VariantsArgs = {};
type VariantPropType = keyof PlasmicReminderCategory__VariantsArgs;
export const PlasmicReminderCategory__VariantProps =
  new Array<VariantPropType>();

export type PlasmicReminderCategory__ArgsType = {
  onSelectChange?: (val: string) => void;
  show?: boolean;
  onShowChange?: (val: string) => void;
  ok?: () => void;
  diable?: boolean;
  onDiableChange?: (val: string) => void;
  title?: string;
  onTitleChange?: (val: string) => void;
  data?: any;
  onDataChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicReminderCategory__ArgsType;
export const PlasmicReminderCategory__ArgProps = new Array<ArgPropType>(
  "onSelectChange",
  "show",
  "onShowChange",
  "ok",
  "diable",
  "onDiableChange",
  "title",
  "onTitleChange",
  "data",
  "onDataChange"
);

export type PlasmicReminderCategory__OverridesType = {
  root?: Flex__<"div">;
  htmlInput?: Flex__<"input">;
  reveal?: Flex__<typeof Reveal>;
  svg?: Flex__<"svg">;
  sort?: Flex__<typeof RadioGroupLiom>;
  text?: Flex__<"div">;
  radioGroupLiom2?: Flex__<typeof RadioGroupLiom>;
};

export interface DefaultReminderCategoryProps {
  onSelectChange?: (val: string) => void;
  show?: boolean;
  onShowChange?: (val: string) => void;
  ok?: () => void;
  diable?: boolean;
  onDiableChange?: (val: string) => void;
  title?: string;
  onTitleChange?: (val: string) => void;
  data?: any;
  onDataChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReminderCategory__RenderFunc(props: {
  variants: PlasmicReminderCategory__VariantsArgs;
  args: PlasmicReminderCategory__ArgsType;
  overrides: PlasmicReminderCategory__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({}),

        onChangeProp: "onSelectChange"
      },
      {
        path: "more3",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "show",
        type: "writable",
        variableType: "boolean",

        valueProp: "show",
        onChangeProp: "onShowChange"
      },
      {
        path: "diable",
        type: "writable",
        variableType: "boolean",

        valueProp: "diable",
        onChangeProp: "onDiableChange"
      },
      {
        path: "title",
        type: "writable",
        variableType: "text",

        valueProp: "title",
        onChangeProp: "onTitleChange"
      },
      {
        path: "data",
        type: "writable",
        variableType: "object",

        valueProp: "data",
        onChangeProp: "onDataChange"
      },
      {
        path: "scroll",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "htmlInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "sort.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "love"
      },
      {
        path: "sort.list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                $state.data.category.forEach(i => {
                  i.label = i.name_fa;
                  i.value = i.name;
                });
                return $state.data.category;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "sort.selects",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "radioGroupLiom2[].selected",
        type: "private",
        variableType: "text"
      },
      {
        path: "radioGroupLiom2[].list",
        type: "private",
        variableType: "array"
      },
      {
        path: "radioGroupLiom2[].selects",
        type: "private",
        variableType: "array"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
      onScroll={async event => {
        const $steps = {};
      }}
    >
      <div className={classNames(projectcss.all, sty.freeBox__qiL2)}>
        <div className={classNames(projectcss.all, sty.freeBox__kUlDd)}>
          <input
            data-plasmic-name={"htmlInput"}
            data-plasmic-override={overrides.htmlInput}
            className={classNames(
              projectcss.all,
              projectcss.input,
              sty.htmlInput
            )}
            id={"titleCategory"}
            onChange={async (...eventArgs: any) => {
              (e => {
                generateStateOnChangeProp($state, ["htmlInput", "value"])(
                  e.target.value
                );
              }).apply(null, eventArgs);

              (async event => {
                const $steps = {};

                $steps["updateTitle"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["title"]
                        },
                        operation: 0,
                        value:
                          window.document.getElementById("titleCategory").value
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTitle"] != null &&
                  typeof $steps["updateTitle"] === "object" &&
                  typeof $steps["updateTitle"].then === "function"
                ) {
                  $steps["updateTitle"] = await $steps["updateTitle"];
                }
              }).apply(null, eventArgs);
            }}
            placeholder={
              "\u0639\u0646\u0648\u0627\u0646 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
            }
            ref={ref => {
              $refs["htmlInput"] = ref;
            }}
            type={"text"}
            value={generateStateValueProp($state, ["htmlInput", "value"]) ?? ""}
          />

          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            className={classNames("__wab_instance", sty.reveal)}
            duration={200}
            effect={"slide"}
            triggerOnce={true}
          >
            <Icon55Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </Reveal>
        </div>
        <div
          className={classNames(
            projectcss.all,
            sty.freeBox__xYEpS,
            "container-scroll"
          )}
        >
          <RadioGroupLiom
            data-plasmic-name={"sort"}
            data-plasmic-override={overrides.sort}
            className={classNames("__wab_instance", sty.sort)}
            click={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const section =
                            window.document.getElementById("scrollSection");
                          const target = window.document.getElementById(
                            $state.sort.selected
                          );
                          console.log(target);
                          $state.scroll = false;
                          return section.scrollTo({
                            top: target.offsetTop,
                            behavior: "smooth"
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = { args: [1000] };
                    return $globalActions["Fragment.wait"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] =
                  await $steps["invokeGlobalAction"];
              }

              $steps["updateScroll"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["scroll"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateScroll"] != null &&
                typeof $steps["updateScroll"] === "object" &&
                typeof $steps["updateScroll"].then === "function"
              ) {
                $steps["updateScroll"] = await $steps["updateScroll"];
              }
            }}
            color={"line"}
            list={generateStateValueProp($state, ["sort", "list"])}
            onListChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["sort", "list"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onSelectedChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["sort", "selected"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onSelectsChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["sort", "selects"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            selected={generateStateValueProp($state, ["sort", "selected"])}
            selects={generateStateValueProp($state, ["sort", "selects"])}
            size={"mini"}
            style2={"cycle"}
          />
        </div>
      </div>
      <div
        className={classNames(
          projectcss.all,
          sty.freeBox__kuwFr,
          "container-scroll"
        )}
        id={"scrollSection"}
        onScroll={async event => {
          const $steps = {};

          $steps["runCode"] = $state.scroll
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      const section =
                        window.document.getElementById("scrollSection");
                      const sections = section.querySelectorAll(".section");
                      const scrollMid = section.scrollTop;
                      let currentSectionId = null;
                      sections.forEach(child => {
                        const top = child.offsetTop;
                        const bottom = top + child.offsetHeight;
                        if (scrollMid >= top && scrollMid < bottom) {
                          currentSectionId = child.id;
                        }
                      });
                      if (currentSectionId) {
                        $state.sort.selected = currentSectionId;
                        return console.log("بخش فعال:", currentSectionId);
                      }
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return (
                // $state.apiRequest.data.type.sort((a, b) => {
                //   if (a.category_name === $state.sort.selected) return -1; // بذار اول
                //   if (b.category_name === $state.sort.selected) return 1;  // بقیه بعدش
                //   return a.category_name.localeCompare(b.category_name); // بقیه به‌ترتیب حروفی
                // });

                $state.data.type
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox___4D4Y,
                "section"
              )}
              id={(() => {
                try {
                  return currentItem.category_name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              key={currentIndex}
            >
              <div className={classNames(projectcss.all, sty.freeBox__j3Dgd)}>
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.category_name_fa;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__a5IIo,
                  "container-scroll"
                )}
              >
                {(() => {
                  const child$Props = {
                    className: classNames(
                      "__wab_instance",
                      sty.radioGroupLiom2
                    ),
                    click: async () => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.radioGroupLiom2.forEach((item, i) => {
                                    if (i !== currentIndex) {
                                      item.selected = null;
                                    }
                                  });
                                  $state.select = currentItem.items.find(
                                    i =>
                                      i.type ==
                                      $state.radioGroupLiom2[currentIndex]
                                        .selected
                                  );
                                  return ($state.title = $state.select.type_fa);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["runOk"] = true
                        ? (() => {
                            const actionArgs = { eventRef: $props["ok"] };
                            return (({ eventRef, args }) => {
                              return eventRef?.(...(args ?? []));
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runOk"] != null &&
                        typeof $steps["runOk"] === "object" &&
                        typeof $steps["runOk"].then === "function"
                      ) {
                        $steps["runOk"] = await $steps["runOk"];
                      }
                    },
                    color: "line",
                    icon: true,
                    list: generateStateValueProp($state, [
                      "radioGroupLiom2",
                      __plasmic_idx_0,
                      "list"
                    ]),
                    noselect: true,
                    onListChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "radioGroupLiom2",
                        __plasmic_idx_0,
                        "list"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    onSelectedChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "radioGroupLiom2",
                        __plasmic_idx_0,
                        "selected"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    onSelectsChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "radioGroupLiom2",
                        __plasmic_idx_0,
                        "selects"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    selected: generateStateValueProp($state, [
                      "radioGroupLiom2",
                      __plasmic_idx_0,
                      "selected"
                    ]),
                    selects: generateStateValueProp($state, [
                      "radioGroupLiom2",
                      __plasmic_idx_0,
                      "selects"
                    ])
                  };

                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "radioGroupLiom2[].selected",
                        initFunc: ({ $props, $state, $queries }) => ""
                      },
                      {
                        name: "radioGroupLiom2[].list",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return (() => {
                                currentItem.items.forEach(i => {
                                  i.label = i.type_fa;
                                  i.value = i.type;
                                });
                                return currentItem.items.slice(0, 5);
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "radioGroupLiom2[].selects",
                        initFunc: ({ $props, $state, $queries }) => []
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <RadioGroupLiom
                      data-plasmic-name={"radioGroupLiom2"}
                      data-plasmic-override={overrides.radioGroupLiom2}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "htmlInput",
    "reveal",
    "svg",
    "sort",
    "text",
    "radioGroupLiom2"
  ],
  htmlInput: ["htmlInput"],
  reveal: ["reveal", "svg"],
  svg: ["svg"],
  sort: ["sort"],
  text: ["text"],
  radioGroupLiom2: ["radioGroupLiom2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  htmlInput: "input";
  reveal: typeof Reveal;
  svg: "svg";
  sort: typeof RadioGroupLiom;
  text: "div";
  radioGroupLiom2: typeof RadioGroupLiom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReminderCategory__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReminderCategory__VariantsArgs;
    args?: PlasmicReminderCategory__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicReminderCategory__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicReminderCategory__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReminderCategory__ArgProps,
          internalVariantPropNames: PlasmicReminderCategory__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReminderCategory__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReminderCategory";
  } else {
    func.displayName = `PlasmicReminderCategory.${nodeName}`;
  }
  return func;
}

export const PlasmicReminderCategory = Object.assign(
  // Top-level PlasmicReminderCategory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    htmlInput: makeNodeComponent("htmlInput"),
    reveal: makeNodeComponent("reveal"),
    svg: makeNodeComponent("svg"),
    sort: makeNodeComponent("sort"),
    text: makeNodeComponent("text"),
    radioGroupLiom2: makeNodeComponent("radioGroupLiom2"),

    // Metadata about props expected for PlasmicReminderCategory
    internalVariantProps: PlasmicReminderCategory__VariantProps,
    internalArgProps: PlasmicReminderCategory__ArgProps
  }
);

export default PlasmicReminderCategory;
/* prettier-ignore-end */
