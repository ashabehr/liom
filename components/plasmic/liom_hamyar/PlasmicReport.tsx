/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 4wEldhsM09tv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import TabWeek2 from "../../TabWeek2"; // plasmic-import: -tuOknPDFuNb/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import MenuIcon from "../../MenuIcon"; // plasmic-import: JBF-V8Q5mpWl/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicReport.module.css"; // plasmic-import: 4wEldhsM09tv/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: DnjmD0szshuz/icon

createPlasmicElementProxy;

export type PlasmicReport__VariantMembers = {};
export type PlasmicReport__VariantsArgs = {};
type VariantPropType = keyof PlasmicReport__VariantsArgs;
export const PlasmicReport__VariantProps = new Array<VariantPropType>();

export type PlasmicReport__ArgsType = {};
type ArgPropType = keyof PlasmicReport__ArgsType;
export const PlasmicReport__ArgProps = new Array<ArgPropType>();

export type PlasmicReport__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  tabWeek2?: Flex__<typeof TabWeek2>;
  button?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
  menuIcon?: Flex__<typeof MenuIcon>;
  apiRequest?: Flex__<typeof ApiRequest>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultReportProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReport__RenderFunc(props: {
  variants: PlasmicReport__VariantsArgs;
  args: PlasmicReport__ArgsType;
  overrides: PlasmicReport__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectMoon",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const currentDate = new Date();
                let persianMonthStr = new Intl.DateTimeFormat(
                  "fa-IR-u-ca-persian",
                  { month: "numeric" }
                ).format(currentDate);
                persianMonthStr = persianMonthStr.replace(/[۰-۹]/g, d =>
                  "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                );
                const persianMonthInt = parseInt(persianMonthStr, 10);
                return persianMonthInt;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "selectYear",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const currentDate = new Date();
                let persianMonthStr = new Intl.DateTimeFormat(
                  "fa-IR-u-ca-persian",
                  { year: "numeric" }
                ).format(currentDate);
                persianMonthStr = persianMonthStr.replace(/[۰-۹]/g, d =>
                  "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                );
                const persianMonthInt = parseInt(persianMonthStr, 10);
                return persianMonthInt;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "start",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "end",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const list =
                            window.document.getElementById("my-scroll-date");
                          const index = $state.selectMoon;
                          const item = list?.children[index];
                          if (item) {
                            const itemPosition =
                              item.offsetLeft -
                              list.offsetWidth / 2 +
                              item.offsetWidth / 2;
                            return list.scrollTo({
                              left: itemPosition,
                              behavior: "smooth"
                            });
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["runCode2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const { toGregorian, isLeapJalaaliYear } = jalaali;
                          function getGregorianMonthBounds(jy, jm) {
                            const daysInMonth =
                              jm <= 6
                                ? 31
                                : jm <= 11
                                  ? 30
                                  : isLeapJalaaliYear(jy)
                                    ? 30
                                    : 29;
                            const first = toGregorian(jy, jm, 1);
                            const last = toGregorian(jy, jm, daysInMonth);
                            const fmt = d => `${d.gy}/${d.gm}/${d.gd}`;
                            return {
                              first: fmt(first),
                              last: fmt(last)
                            };
                          }
                          return getGregorianMonthBounds(
                            $state.selectYear,
                            $state.selectMoon
                          );
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__oZzbY,
              "container-scroll"
            )}
            id={"my-scroll-date"}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return (() => {
                    const persianMonths = [
                      {
                        label: "فروردین",
                        value: 1
                      },
                      {
                        label: "اردیبهشت",
                        value: 2
                      },
                      {
                        label: "خرداد",
                        value: 3
                      },
                      {
                        label: "تیر",
                        value: 4
                      },
                      {
                        label: "مرداد",
                        value: 5
                      },
                      {
                        label: "شهریور",
                        value: 6
                      },
                      {
                        label: "مهر",
                        value: 7
                      },
                      {
                        label: "آبان",
                        value: 8
                      },
                      {
                        label: "آذر",
                        value: 9
                      },
                      {
                        label: "دی",
                        value: 10
                      },
                      {
                        label: "بهمن",
                        value: 11
                      },
                      {
                        label: "اسفند",
                        value: 12
                      }
                    ];

                    return persianMonths;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <TabWeek2
                  data-plasmic-name={"tabWeek2"}
                  data-plasmic-override={overrides.tabWeek2}
                  className={classNames("__wab_instance", sty.tabWeek2)}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSelectMoon"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectMoon"]
                            },
                            operation: 0,
                            value: currentItem.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectMoon"] != null &&
                      typeof $steps["updateSelectMoon"] === "object" &&
                      typeof $steps["updateSelectMoon"].then === "function"
                    ) {
                      $steps["updateSelectMoon"] =
                        await $steps["updateSelectMoon"];
                    }

                    $steps["updateSelectMoon2"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                const list =
                                  window.document.getElementById(
                                    "my-scroll-date"
                                  );
                                const index = $state.selectMoon;
                                const item = list?.children[index];
                                if (item) {
                                  const itemPosition =
                                    item.offsetLeft -
                                    list.offsetWidth / 2 +
                                    item.offsetWidth / 2;
                                  return list.scrollTo({
                                    left: itemPosition,
                                    behavior: "smooth"
                                  });
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectMoon2"] != null &&
                      typeof $steps["updateSelectMoon2"] === "object" &&
                      typeof $steps["updateSelectMoon2"].then === "function"
                    ) {
                      $steps["updateSelectMoon2"] =
                        await $steps["updateSelectMoon2"];
                    }
                  }}
                  report={true}
                  selected={(() => {
                    try {
                      return currentItem.value == $state.selectMoon;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  slot={null}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fpTlg
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return `${currentItem.label} ماه ${$state.selectYear}`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0647\u0641\u062a\u0647";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </TabWeek2>
              );
            })}
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={generateStateValueProp($state, ["button", "color"])}
              endIcon={
                <ChevronLeftIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              }
              load={generateStateValueProp($state, ["button", "load"])}
              loading={generateStateValueProp($state, ["button", "loading"])}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            $state.selectYear += 1;
                            return ($state.selectMoon = 1);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["runCode2"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const list =
                              window.document.getElementById("my-scroll-date");
                            const index = $state.selectMoon;
                            const item = list?.children[index];
                            if (item) {
                              const itemPosition =
                                item.offsetLeft -
                                list.offsetWidth / 2 +
                                item.offsetWidth / 2;
                              return list.scrollTo({
                                left: itemPosition,
                                behavior: "smooth"
                              });
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode2"] != null &&
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              shape={"rounded"}
              showEndIcon={true}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2ZdNc
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.selectYear + 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Button>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__hwdQ)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__up5T8
              )}
            >
              {"1000000 \u062a\u0648\u0645\u0627\u0646"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4K5Go
              )}
            >
              {
                "\u0645\u062c\u0645\u0648\u0639\u0647 \u0647\u0632\u06cc\u0646\u0647 \u0645\u0627\u0647"
              }
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__tzqNf)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__w5Ao
              )}
            >
              {"\u062f\u0633\u062a\u0647 \u0628\u0646\u062f\u06cc "}
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
              2, 3, 4
            ]).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__r1Upj)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yhj1N)}
                  >
                    <MenuIcon
                      data-plasmic-name={"menuIcon"}
                      data-plasmic-override={overrides.menuIcon}
                      className={classNames("__wab_instance", sty.menuIcon)}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gxmVs)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vspEj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pkOvm
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return `${currentItem.name}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u062a\u0633\u062a adhd";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__snMvK
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                currentItem.val.toLocaleString() + " تومان "
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "2865so \u062a\u0648\u0645\u0646";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xcn7P
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cU6Nx
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={(() => {
              try {
                return {
                  userId: 1,
                  start: "",
                  end: ""
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            shouldFetch={true}
            url={"https://n8n.staas.ir/webhook/report"}
          />

          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script src="https://cdn.jsdelivr.net/npm/jalaali-js/dist/jalaali.js"></script>\r\n'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "tabWeek2",
    "button",
    "svg",
    "menuIcon",
    "apiRequest",
    "embedHtml"
  ],
  sideEffect: ["sideEffect"],
  tabWeek2: ["tabWeek2"],
  button: ["button", "svg"],
  svg: ["svg"],
  menuIcon: ["menuIcon"],
  apiRequest: ["apiRequest"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  tabWeek2: typeof TabWeek2;
  button: typeof Button;
  svg: "svg";
  menuIcon: typeof MenuIcon;
  apiRequest: typeof ApiRequest;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReport__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReport__VariantsArgs;
    args?: PlasmicReport__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicReport__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicReport__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReport__ArgProps,
          internalVariantPropNames: PlasmicReport__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReport__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReport";
  } else {
    func.displayName = `PlasmicReport.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicReport = Object.assign(
  // Top-level PlasmicReport renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    tabWeek2: makeNodeComponent("tabWeek2"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    menuIcon: makeNodeComponent("menuIcon"),
    apiRequest: makeNodeComponent("apiRequest"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicReport
    internalVariantProps: PlasmicReport__VariantProps,
    internalArgProps: PlasmicReport__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicReport;
/* prettier-ignore-end */
