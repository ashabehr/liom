/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 4wEldhsM09tv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import TabWeek2 from "../../TabWeek2"; // plasmic-import: -tuOknPDFuNb/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import MenuIcon from "../../MenuIcon"; // plasmic-import: JBF-V8Q5mpWl/component
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicReport.module.css"; // plasmic-import: 4wEldhsM09tv/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon

createPlasmicElementProxy;

export type PlasmicReport__VariantMembers = {
  select2: "select2";
};
export type PlasmicReport__VariantsArgs = {
  select2?: SingleBooleanChoiceArg<"select2">;
};
type VariantPropType = keyof PlasmicReport__VariantsArgs;
export const PlasmicReport__VariantProps = new Array<VariantPropType>(
  "select2"
);

export type PlasmicReport__ArgsType = {
  token2?: string;
  active?: boolean;
  onActiveChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicReport__ArgsType;
export const PlasmicReport__ArgProps = new Array<ArgPropType>(
  "token2",
  "active",
  "onActiveChange"
);

export type PlasmicReport__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  tabWeek2?: Flex__<typeof TabWeek2>;
  apiRequest?: Flex__<typeof ApiRequest>;
  collapse?: Flex__<typeof AntdSingleCollapse>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  svg?: Flex__<"svg">;
};

export interface DefaultReportProps {
  token2?: string;
  active?: boolean;
  onActiveChange?: (val: string) => void;
  select2?: SingleBooleanChoiceArg<"select2">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReport__RenderFunc(props: {
  variants: PlasmicReport__VariantsArgs;
  args: PlasmicReport__ArgsType;
  overrides: PlasmicReport__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectMoon",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const currentDate = new Date();
                let persianMonthStr = new Intl.DateTimeFormat(
                  "fa-IR-u-ca-persian",
                  { month: "numeric" }
                ).format(currentDate);
                persianMonthStr = persianMonthStr.replace(/[۰-۹]/g, d =>
                  "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                );
                const persianMonthInt = parseInt(persianMonthStr, 10);
                return persianMonthInt;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "selectYear",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const currentDate = new Date();
                let persianMonthStr = new Intl.DateTimeFormat(
                  "fa-IR-u-ca-persian",
                  { year: "numeric" }
                ).format(currentDate);
                persianMonthStr = persianMonthStr.replace(/[۰-۹]/g, d =>
                  "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                );
                const persianMonthInt = parseInt(persianMonthStr, 10);
                return persianMonthInt;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "start",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "end",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "select2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.select2
      },
      {
        path: "collapse[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "active",
        type: "writable",
        variableType: "boolean",

        valueProp: "active",
        onChangeProp: "onActiveChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        { [sty.rootselect2]: hasVariant($state, "select2", "select2") }
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      const list =
                        window.document.getElementById("my-scroll-date");
                      const index = $state.selectMoon;
                      const item = list?.children[index];
                      if (item) {
                        const itemPosition =
                          item.offsetLeft -
                          list.offsetWidth / 2 +
                          item.offsetWidth / 2;
                        return list.scrollTo({
                          left: itemPosition,
                          behavior: "smooth"
                        });
                      }
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }

          $steps["start"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    (() => {
                      try {
                        return $state.selectYear;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    (() => {
                      try {
                        return $state.selectMoon;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    "1"
                  ]
                };
                return $globalActions[
                  "Fragment.convertJalaliToGregorian"
                ]?.apply(null, [...actionArgs.args]);
              })()
            : undefined;
          if (
            $steps["start"] != null &&
            typeof $steps["start"] === "object" &&
            typeof $steps["start"].then === "function"
          ) {
            $steps["start"] = await $steps["start"];
          }

          $steps["end"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    (() => {
                      try {
                        return $state.selectYear;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    (() => {
                      try {
                        return $state.selectMoon;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    (() => {
                      try {
                        return (() => {
                          const daysInMonth =
                            $state.selectMoon <= 6
                              ? 31
                              : $state.selectMoon <= 11
                                ? 30
                                : 29;
                          return daysInMonth;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions[
                  "Fragment.convertJalaliToGregorian"
                ]?.apply(null, [...actionArgs.args]);
              })()
            : undefined;
          if (
            $steps["end"] != null &&
            typeof $steps["end"] === "object" &&
            typeof $steps["end"].then === "function"
          ) {
            $steps["end"] = await $steps["end"];
          }

          $steps["runCode2"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      $state.start = $steps.start;
                      return ($state.end = $steps.end);
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode2"] != null &&
            typeof $steps["runCode2"] === "object" &&
            typeof $steps["runCode2"].then === "function"
          ) {
            $steps["runCode2"] = await $steps["runCode2"];
          }
        }}
      />

      <div
        className={classNames(
          projectcss.all,
          sty.freeBox__oZzbY,
          "container-scroll",
          {
            [sty.freeBoxselect2__oZzbY3VVTl]: hasVariant(
              $state,
              "select2",
              "select2"
            )
          }
        )}
        id={"my-scroll-date"}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return (() => {
                const persianMonths = [
                  {
                    label: "فروردین",
                    value: 1
                  },
                  {
                    label: "اردیبهشت",
                    value: 2
                  },
                  {
                    label: "خرداد",
                    value: 3
                  },
                  {
                    label: "تیر",
                    value: 4
                  },
                  {
                    label: "مرداد",
                    value: 5
                  },
                  {
                    label: "شهریور",
                    value: 6
                  },
                  {
                    label: "مهر",
                    value: 7
                  },
                  {
                    label: "آبان",
                    value: 8
                  },
                  {
                    label: "آذر",
                    value: 9
                  },
                  {
                    label: "دی",
                    value: 10
                  },
                  {
                    label: "بهمن",
                    value: 11
                  },
                  {
                    label: "اسفند",
                    value: 12
                  }
                ];

                function getNextSixMonths(currentYear, currentMonth) {
                  const result = [];
                  for (let i = 0; i < 6; i++) {
                    let nextMonth = currentMonth + i;
                    let year = currentYear;
                    if (nextMonth > 12) {
                      nextMonth -= 12;
                      year += 1;
                    }
                    const monthInfo = persianMonths.find(
                      m => m.value === nextMonth
                    );
                    result.push({
                      ...monthInfo,
                      year
                    });
                  }
                  return result;
                }
                const currentDate = new Date();
                let persianYearStr = new Intl.DateTimeFormat(
                  "fa-IR-u-ca-persian",
                  { year: "numeric" }
                ).format(currentDate);
                let persianMonthStr = new Intl.DateTimeFormat(
                  "fa-IR-u-ca-persian",
                  { month: "numeric" }
                ).format(currentDate);
                function faToEnNumbers(str) {
                  return str.replace(/[۰-۹]/g, d => "۰۱۲۳۴۵۶۷۸۹".indexOf(d));
                }
                const currentYear = parseInt(faToEnNumbers(persianYearStr), 10);
                const currentMonth = parseInt(
                  faToEnNumbers(persianMonthStr),
                  10
                );
                const nextSix = getNextSixMonths(currentYear, currentMonth);
                return nextSix;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <TabWeek2
              data-plasmic-name={"tabWeek2"}
              data-plasmic-override={overrides.tabWeek2}
              className={classNames("__wab_instance", sty.tabWeek2, {
                [sty.tabWeek2select2]: hasVariant($state, "select2", "select2")
              })}
              key={currentIndex}
              onClick={async event => {
                const $steps = {};

                $steps["updateSelectMoon"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selectMoon"]
                        },
                        operation: 0,
                        value: currentItem.value
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelectMoon"] != null &&
                  typeof $steps["updateSelectMoon"] === "object" &&
                  typeof $steps["updateSelectMoon"].then === "function"
                ) {
                  $steps["updateSelectMoon"] = await $steps["updateSelectMoon"];
                }

                $steps["updateSelectMoon3"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selectYear"]
                        },
                        operation: 0,
                        value: currentItem.year
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelectMoon3"] != null &&
                  typeof $steps["updateSelectMoon3"] === "object" &&
                  typeof $steps["updateSelectMoon3"].then === "function"
                ) {
                  $steps["updateSelectMoon3"] =
                    await $steps["updateSelectMoon3"];
                }

                $steps["updateSelectMoon2"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const list =
                              window.document.getElementById("my-scroll-date");
                            const index = $state.selectMoon;
                            const item = list?.children[currentIndex];
                            if (item) {
                              const itemPosition =
                                item.offsetLeft -
                                list.offsetWidth / 2 +
                                item.offsetWidth / 2;
                              return list.scrollTo({
                                left: itemPosition,
                                behavior: "smooth"
                              });
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelectMoon2"] != null &&
                  typeof $steps["updateSelectMoon2"] === "object" &&
                  typeof $steps["updateSelectMoon2"].then === "function"
                ) {
                  $steps["updateSelectMoon2"] =
                    await $steps["updateSelectMoon2"];
                }

                $steps["start"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return $state.selectYear;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return $state.selectMoon;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          "1"
                        ]
                      };
                      return $globalActions[
                        "Fragment.convertJalaliToGregorian"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
                if (
                  $steps["start"] != null &&
                  typeof $steps["start"] === "object" &&
                  typeof $steps["start"].then === "function"
                ) {
                  $steps["start"] = await $steps["start"];
                }

                $steps["end"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return $state.selectYear;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return $state.selectMoon;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return (() => {
                                const daysInMonth =
                                  $state.selectMoon <= 6
                                    ? 31
                                    : $state.selectMoon <= 11
                                      ? 30
                                      : 29;
                                return daysInMonth;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions[
                        "Fragment.convertJalaliToGregorian"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
                if (
                  $steps["end"] != null &&
                  typeof $steps["end"] === "object" &&
                  typeof $steps["end"].then === "function"
                ) {
                  $steps["end"] = await $steps["end"];
                }

                $steps["updateSelectMoon4"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            $state.start = $steps.start;
                            return ($state.end = $steps.end);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelectMoon4"] != null &&
                  typeof $steps["updateSelectMoon4"] === "object" &&
                  typeof $steps["updateSelectMoon4"].then === "function"
                ) {
                  $steps["updateSelectMoon4"] =
                    await $steps["updateSelectMoon4"];
                }
              }}
              report={true}
              selected={(() => {
                try {
                  return currentItem.value == $state.selectMoon;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={null}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fpTlg,
                  {
                    [sty.textselect2__fpTlg3VVTl]: hasVariant(
                      $state,
                      "select2",
                      "select2"
                    )
                  }
                )}
              >
                {hasVariant($state, "select2", "select2") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return `${currentItem.label} ماه ${currentItem.year}`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0647\u0641\u062a\u0647";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    {(() => {
                      try {
                        return `${currentItem.label} ماه ${$state.selectYear}`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0647\u0641\u062a\u0647";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                )}
              </div>
            </TabWeek2>
          );
        })}
      </div>
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={null}
        loadingDisplay={
          <React.Fragment>
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__iq61,
                "shimmer"
              )}
            />

            <div
              className={classNames(
                projectcss.all,
                sty.freeBox___8YfJm,
                "shimmer"
              )}
            />
          </React.Fragment>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );
        }}
        params={(() => {
          try {
            return {
              userId: 1,
              start: $state.start,
              end: $state.end
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        shouldFetch={(() => {
          try {
            return $state.end && $state.start && $props.token2 && $state.active;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
        url={"https://n8n.staas.ir/webhook/report"}
      >
        <div className={classNames(projectcss.all, sty.freeBox__hwdQ)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__up5T8
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (
                    $state.apiRequest.data.total.toLocaleString() + " تومان "
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "1000000 \u062a\u0648\u0645\u0627\u0646";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___4K5Go
            )}
          >
            {
              "\u0645\u062c\u0645\u0648\u0639\u0647 \u0647\u0632\u06cc\u0646\u0647 \u0645\u0627\u0647"
            }
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__tzqNf, "fade-in", {
            [sty.freeBoxselect2__tzqNf3VVTl]: hasVariant(
              $state,
              "select2",
              "select2"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__w5Ao
            )}
          >
            {"\u062f\u0633\u062a\u0647 \u0628\u0646\u062f\u06cc "}
          </div>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.apiRequest.data.totalPerChannel;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const master = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox___7Nw4H)}
                key={currentIndex}
              >
                {(() => {
                  const child$Props = {
                    bordered: true,
                    className: classNames("__wab_instance", sty.collapse),
                    expandIcon: null,
                    expandIconPosition: "end",
                    extra: null,
                    ghost: true,
                    label2: (
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__r1Upj,
                            {
                              [sty.freeBoxselect2__r1Upj3VVTl]: hasVariant(
                                $state,
                                "select2",
                                "select2"
                              )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yhj1N,
                              {
                                [sty.freeBoxselect2__yhj1N3VVTl]: hasVariant(
                                  $state,
                                  "select2",
                                  "select2"
                                )
                              }
                            )}
                          >
                            <MenuIcon
                              className={classNames(
                                "__wab_instance",
                                sty.menuIcon__mdbsm
                              )}
                              color={(() => {
                                try {
                                  return (() => {
                                    switch (master.type) {
                                      case "telegram":
                                        return "blue";
                                      case "sms":
                                        return "fuchsia";
                                      case "notification":
                                        return "warning";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "fuchsia";
                                  }
                                  throw e;
                                }
                              })()}
                              icons={(() => {
                                try {
                                  return master.type;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                              outline={true}
                              size={"_25"}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gxmVs
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vspEj
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pkOvm
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return `${master.name}`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u062a\u0633\u062a adhd";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__snMvK
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        master.value.toLocaleString() +
                                        " تومان "
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "2865so \u062a\u0648\u0645\u0646";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                        </div>
                        {(() => {
                          try {
                            return !$state.collapse[currentIndex].open;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                          ? (_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.apiRequest.data.results
                                    .filter(i =>
                                      i.channels.includes(master.type)
                                    )
                                    .slice(0, 1);
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__iClqq
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__tqvpe
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___2Fm3M,
                                        {
                                          [sty.freeBoxselect2___2Fm3M3VVTl]:
                                            hasVariant(
                                              $state,
                                              "select2",
                                              "select2"
                                            )
                                        }
                                      )}
                                    >
                                      <MenuIcon
                                        className={classNames(
                                          "__wab_instance",
                                          sty.menuIcon__sRmyW
                                        )}
                                        icons={(() => {
                                          try {
                                            return master.type;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()}
                                        outline={true}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__yAlwa
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__nxeiq
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__wu4VP
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__xIm3D
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return `${currentItem.name}`;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "\u062a\u0633\u062a adhd";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__lloig
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (
                                                  currentItem.costs[
                                                    master.type
                                                  ].toLocaleString() + " تومان "
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "2865so \u062a\u0648\u0645\u0646";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__yf4Xr
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return `این یادآوری در ماه ${currentItem.activeDays * currentItem.timesPerDay} بار اسال می شود`;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "\u062a\u0633\u062a adhd";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__dRPqL
                                      )}
                                    />
                                  </div>
                                </div>
                              );
                            })
                          : null}
                      </React.Fragment>
                    ),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "open",
                        ["collapse", __plasmic_idx_0, "open"],
                        AntdSingleCollapse_Helpers
                      ).apply(null, eventArgs);
                    },
                    open: generateStateValueProp($state, [
                      "collapse",
                      __plasmic_idx_0,
                      "open"
                    ]),
                    showArrow: true
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "open",
                        plasmicStateName: "collapse[].open"
                      }
                    ],
                    [__plasmic_idx_0],
                    AntdSingleCollapse_Helpers ?? {},
                    child$Props
                  );
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "collapse[].open",
                        initFunc: ({ $props, $state, $queries }) => undefined
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <AntdSingleCollapse
                      data-plasmic-name={"collapse"}
                      data-plasmic-override={overrides.collapse}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aaXyH
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.apiRequest.data.results.filter(i =>
                                i.channels.includes(master.type)
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_1, __plasmic_idx_1) => {
                          const currentItem = __plasmic_item_1;
                          const currentIndex = __plasmic_idx_1;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__dVwd
                              )}
                              key={currentIndex}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___03OhY
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___4G5O6,
                                    {
                                      [sty.freeBoxselect2___4G5O63VVTl]:
                                        hasVariant($state, "select2", "select2")
                                    }
                                  )}
                                >
                                  <MenuIcon
                                    className={classNames(
                                      "__wab_instance",
                                      sty.menuIcon__trQFl
                                    )}
                                    icons={(() => {
                                      try {
                                        return master.type;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    outline={true}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xP5Yb
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___9Qjo4
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___1Ow1T
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__yiaZq
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return `${currentItem.name}`;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "\u062a\u0633\u062a adhd";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__aX8Mn
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              currentItem.costs[
                                                master.type
                                              ].toLocaleString() + " تومان "
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "2865so \u062a\u0648\u0645\u0646";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__sfndX
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            const text = `یادآوری در ${currentItem.activeDays} روز از ماه، روزی ${currentItem.timesPerDay} بار انجام می‌شود.`;
                                            return text;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u062a\u0633\u062a adhd";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </AntdSingleCollapse>
                  );
                })()}
              </div>
            );
          })}
        </div>
      </ApiRequest>
      <HeaderLiom
        data-plasmic-name={"headerLiom"}
        data-plasmic-override={overrides.headerLiom}
        className={classNames("__wab_instance", sty.headerLiom)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___0GcKm)}>
          <XIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          return window.history.back();
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gozm4
            )}
          >
            {
              "\u067e\u06cc\u0634\u200c\u0628\u06cc\u0646\u06cc \u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628 \u0647\u0627\u06cc \u0622\u062a\u06cc"
            }
          </div>
        </div>
      </HeaderLiom>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "tabWeek2",
    "apiRequest",
    "collapse",
    "headerLiom",
    "svg"
  ],
  sideEffect: ["sideEffect"],
  tabWeek2: ["tabWeek2"],
  apiRequest: ["apiRequest", "collapse"],
  collapse: ["collapse"],
  headerLiom: ["headerLiom", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  tabWeek2: typeof TabWeek2;
  apiRequest: typeof ApiRequest;
  collapse: typeof AntdSingleCollapse;
  headerLiom: typeof HeaderLiom;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReport__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReport__VariantsArgs;
    args?: PlasmicReport__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicReport__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicReport__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReport__ArgProps,
          internalVariantPropNames: PlasmicReport__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReport__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReport";
  } else {
    func.displayName = `PlasmicReport.${nodeName}`;
  }
  return func;
}

export const PlasmicReport = Object.assign(
  // Top-level PlasmicReport renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    tabWeek2: makeNodeComponent("tabWeek2"),
    apiRequest: makeNodeComponent("apiRequest"),
    collapse: makeNodeComponent("collapse"),
    headerLiom: makeNodeComponent("headerLiom"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicReport
    internalVariantProps: PlasmicReport__VariantProps,
    internalArgProps: PlasmicReport__ArgProps
  }
);

export default PlasmicReport;
/* prettier-ignore-end */
