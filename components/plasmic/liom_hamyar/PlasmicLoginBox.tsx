/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: eH_yQdxVywwP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicLoginBox.module.css"; // plasmic-import: eH_yQdxVywwP/css

import Icon107Icon from "./icons/PlasmicIcon__Icon107"; // plasmic-import: HFiB--0uZfh5/icon

createPlasmicElementProxy;

export type PlasmicLoginBox__VariantMembers = {
  loading: "loading";
};
export type PlasmicLoginBox__VariantsArgs = {
  loading?: SingleBooleanChoiceArg<"loading">;
};
type VariantPropType = keyof PlasmicLoginBox__VariantsArgs;
export const PlasmicLoginBox__VariantProps = new Array<VariantPropType>(
  "loading"
);

export type PlasmicLoginBox__ArgsType = {
  onClick?: (event: any) => void;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicLoginBox__ArgsType;
export const PlasmicLoginBox__ArgProps = new Array<ArgPropType>(
  "onClick",
  "children",
  "slot"
);

export type PlasmicLoginBox__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  lottie?: Flex__<typeof LottieWrapper>;
  text?: Flex__<"div">;
};

export interface DefaultLoginBoxProps {
  onClick?: (event: any) => void;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  loading?: SingleBooleanChoiceArg<"loading">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLoginBox__RenderFunc(props: {
  variants: PlasmicLoginBox__VariantsArgs;
  args: PlasmicLoginBox__ArgsType;
  overrides: PlasmicLoginBox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loading",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loading
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        {
          [sty.rootglobal_newView_newView]: hasVariant(
            globalVariants,
            "newView",
            "newView"
          ),
          [sty.rootloading]: hasVariant($state, "loading", "loading")
        }
      )}
      onClick={args.onClick}
    >
      {(hasVariant($state, "loading", "loading") ? false : true)
        ? renderPlasmicSlot({
            defaultContents: (
              <Icon107Icon
                className={classNames(projectcss.all, sty.svg__pVgKk)}
                role={"img"}
              />
            ),

            value: args.children
          })
        : null}
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxloading]: hasVariant($state, "loading", "loading")
        })}
      >
        {renderPlasmicSlot({
          defaultContents:
            "\u0648\u0631\u0648\u062f \u0628\u0627 \u062d\u0633\u0627\u0628 \u06af\u0648\u06af\u0644",
          value: args.slot,
          className: classNames(sty.slotTargetSlot, {
            [sty.slotTargetSlotloading]: hasVariant(
              $state,
              "loading",
              "loading"
            )
          })
        })}
      </div>
      {(hasVariant($state, "loading", "loading") ? true : false) ? (
        <LottieWrapper
          data-plasmic-name={"lottie"}
          data-plasmic-override={overrides.lottie}
          animationData={{
            nm: "Loading Dots",
            ddd: 0,
            h: 50,
            w: 100,
            meta: { g: "@lottiefiles/toolkit-js 0.33.2" },
            layers: [
              {
                ty: 4,
                nm: "Dot4",
                sr: 1,
                st: 0,
                op: 360,
                ip: 0,
                hd: false,
                ddd: 0,
                bm: 0,
                hasMask: false,
                ao: 0,
                ks: {
                  a: { a: 0, k: [-284, 92, 0], ix: 1 },
                  s: {
                    a: 1,
                    k: [
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [2.61, 2.32, 100],
                        t: 25
                      },
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [3.91, 3.47, 100],
                        t: 39
                      },
                      { s: [2.61, 2.32, 100], t: 55 }
                    ],
                    ix: 6
                  },
                  sk: { a: 0, k: 0 },
                  p: {
                    a: 1,
                    k: [
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [59.48, 25, 0],
                        t: 25
                      },
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [59.48, 23.15, 0],
                        t: 39
                      },
                      { s: [59.48, 25, 0], t: 55 }
                    ],
                    ix: 2
                  },
                  r: { a: 0, k: 0, ix: 10 },
                  sa: { a: 0, k: 0 },
                  o: {
                    a: 1,
                    k: [
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [25],
                        t: 25
                      },
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [100],
                        t: 39
                      },
                      { s: [25], t: 55 }
                    ],
                    ix: 11
                  }
                },
                ef: [],
                shapes: [
                  {
                    ty: "gr",
                    bm: 0,
                    hd: false,
                    mn: "ADBE Vector Group",
                    nm: "Ellipse 1",
                    ix: 1,
                    cix: 2,
                    np: 3,
                    it: [
                      {
                        ty: "el",
                        bm: 0,
                        hd: false,
                        mn: "ADBE Vector Shape - Ellipse",
                        nm: "Ellipse Path 1",
                        d: 1,
                        p: { a: 0, k: [0, 0], ix: 3 },
                        s: { a: 0, k: [120, 120], ix: 2 }
                      },
                      {
                        ty: "fl",
                        bm: 0,
                        hd: false,
                        mn: "ADBE Vector Graphic - Fill",
                        nm: "Fill 1",
                        c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                        r: 1,
                        o: { a: 0, k: 100, ix: 5 }
                      },
                      {
                        ty: "tr",
                        a: { a: 0, k: [0, 0], ix: 1 },
                        s: { a: 0, k: [100, 100], ix: 3 },
                        sk: { a: 0, k: 0, ix: 4 },
                        p: { a: 0, k: [-284, 92], ix: 2 },
                        r: { a: 0, k: 0, ix: 6 },
                        sa: { a: 0, k: 0, ix: 5 },
                        o: { a: 0, k: 100, ix: 7 }
                      }
                    ]
                  }
                ],
                ind: 1
              },
              {
                ty: 4,
                nm: "Dot3",
                sr: 1,
                st: 0,
                op: 360,
                ip: 0,
                hd: false,
                ddd: 0,
                bm: 0,
                hasMask: false,
                ao: 0,
                ks: {
                  a: { a: 0, k: [-284, 92, 0], ix: 1 },
                  s: {
                    a: 1,
                    k: [
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [2.61, 2.32, 100],
                        t: 17
                      },
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [3.91, 3.47, 100],
                        t: 31
                      },
                      { s: [2.61, 2.32, 100], t: 47 }
                    ],
                    ix: 6
                  },
                  sk: { a: 0, k: 0 },
                  p: {
                    a: 1,
                    k: [
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [53.23, 25, 0],
                        t: 17
                      },
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [53.23, 23.15, 0],
                        t: 31
                      },
                      { s: [53.23, 25, 0], t: 47 }
                    ],
                    ix: 2
                  },
                  r: { a: 0, k: 0, ix: 10 },
                  sa: { a: 0, k: 0 },
                  o: {
                    a: 1,
                    k: [
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [25],
                        t: 17
                      },
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [100],
                        t: 31
                      },
                      { s: [25], t: 47 }
                    ],
                    ix: 11
                  }
                },
                ef: [],
                shapes: [
                  {
                    ty: "gr",
                    bm: 0,
                    hd: false,
                    mn: "ADBE Vector Group",
                    nm: "Ellipse 1",
                    ix: 1,
                    cix: 2,
                    np: 3,
                    it: [
                      {
                        ty: "el",
                        bm: 0,
                        hd: false,
                        mn: "ADBE Vector Shape - Ellipse",
                        nm: "Ellipse Path 1",
                        d: 1,
                        p: { a: 0, k: [0, 0], ix: 3 },
                        s: { a: 0, k: [120, 120], ix: 2 }
                      },
                      {
                        ty: "fl",
                        bm: 0,
                        hd: false,
                        mn: "ADBE Vector Graphic - Fill",
                        nm: "Fill 1",
                        c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                        r: 1,
                        o: { a: 0, k: 100, ix: 5 }
                      },
                      {
                        ty: "tr",
                        a: { a: 0, k: [0, 0], ix: 1 },
                        s: { a: 0, k: [100, 100], ix: 3 },
                        sk: { a: 0, k: 0, ix: 4 },
                        p: { a: 0, k: [-284, 92], ix: 2 },
                        r: { a: 0, k: 0, ix: 6 },
                        sa: { a: 0, k: 0, ix: 5 },
                        o: { a: 0, k: 100, ix: 7 }
                      }
                    ]
                  }
                ],
                ind: 2
              },
              {
                ty: 4,
                nm: "Dot2",
                sr: 1,
                st: 0,
                op: 360,
                ip: 0,
                hd: false,
                ddd: 0,
                bm: 0,
                hasMask: false,
                ao: 0,
                ks: {
                  a: { a: 0, k: [-284, 92, 0], ix: 1 },
                  s: {
                    a: 1,
                    k: [
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [2.61, 2.32, 100],
                        t: 9
                      },
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [3.91, 3.47, 100],
                        t: 23
                      },
                      { s: [2.61, 2.32, 100], t: 39 }
                    ],
                    ix: 6
                  },
                  sk: { a: 0, k: 0 },
                  p: {
                    a: 1,
                    k: [
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [46.98, 25, 0],
                        t: 9
                      },
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [46.98, 23.15, 0],
                        t: 23
                      },
                      { s: [46.98, 25, 0], t: 39 }
                    ],
                    ix: 2
                  },
                  r: { a: 0, k: 0, ix: 10 },
                  sa: { a: 0, k: 0 },
                  o: {
                    a: 1,
                    k: [
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [25],
                        t: 9
                      },
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [100],
                        t: 23
                      },
                      { s: [25], t: 39 }
                    ],
                    ix: 11
                  }
                },
                ef: [],
                shapes: [
                  {
                    ty: "gr",
                    bm: 0,
                    hd: false,
                    mn: "ADBE Vector Group",
                    nm: "Ellipse 1",
                    ix: 1,
                    cix: 2,
                    np: 3,
                    it: [
                      {
                        ty: "el",
                        bm: 0,
                        hd: false,
                        mn: "ADBE Vector Shape - Ellipse",
                        nm: "Ellipse Path 1",
                        d: 1,
                        p: { a: 0, k: [0, 0], ix: 3 },
                        s: { a: 0, k: [120, 120], ix: 2 }
                      },
                      {
                        ty: "fl",
                        bm: 0,
                        hd: false,
                        mn: "ADBE Vector Graphic - Fill",
                        nm: "Fill 1",
                        c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                        r: 1,
                        o: { a: 0, k: 100, ix: 5 }
                      },
                      {
                        ty: "tr",
                        a: { a: 0, k: [0, 0], ix: 1 },
                        s: { a: 0, k: [100, 100], ix: 3 },
                        sk: { a: 0, k: 0, ix: 4 },
                        p: { a: 0, k: [-284, 92], ix: 2 },
                        r: { a: 0, k: 0, ix: 6 },
                        sa: { a: 0, k: 0, ix: 5 },
                        o: { a: 0, k: 100, ix: 7 }
                      }
                    ]
                  }
                ],
                ind: 3
              },
              {
                ty: 4,
                nm: "Dot1",
                sr: 1,
                st: 0,
                op: 360,
                ip: 0,
                hd: false,
                ddd: 0,
                bm: 0,
                hasMask: false,
                ao: 0,
                ks: {
                  a: { a: 0, k: [-284, 92, 0], ix: 1 },
                  s: {
                    a: 1,
                    k: [
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [2.61, 2.32, 100],
                        t: 0
                      },
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [3.91, 3.47, 100],
                        t: 14
                      },
                      { s: [2.61, 2.32, 100], t: 30 }
                    ],
                    ix: 6
                  },
                  sk: { a: 0, k: 0 },
                  p: {
                    a: 1,
                    k: [
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [40.73, 25, 0],
                        t: 0
                      },
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [40.73, 23.15, 0],
                        t: 14
                      },
                      { s: [40.73, 25, 0], t: 30 }
                    ],
                    ix: 2
                  },
                  r: { a: 0, k: 0, ix: 10 },
                  sa: { a: 0, k: 0 },
                  o: {
                    a: 1,
                    k: [
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [25],
                        t: 0
                      },
                      {
                        o: { x: 0.333, y: 0 },
                        i: { x: 0.667, y: 1 },
                        s: [100],
                        t: 14
                      },
                      { s: [25], t: 30 }
                    ],
                    ix: 11
                  }
                },
                ef: [],
                shapes: [
                  {
                    ty: "gr",
                    bm: 0,
                    hd: false,
                    mn: "ADBE Vector Group",
                    nm: "Ellipse 1",
                    ix: 1,
                    cix: 2,
                    np: 3,
                    it: [
                      {
                        ty: "el",
                        bm: 0,
                        hd: false,
                        mn: "ADBE Vector Shape - Ellipse",
                        nm: "Ellipse Path 1",
                        d: 1,
                        p: { a: 0, k: [0, 0], ix: 3 },
                        s: { a: 0, k: [120, 120], ix: 2 }
                      },
                      {
                        ty: "fl",
                        bm: 0,
                        hd: false,
                        mn: "ADBE Vector Graphic - Fill",
                        nm: "Fill 1",
                        c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                        r: 1,
                        o: { a: 0, k: 100, ix: 5 }
                      },
                      {
                        ty: "tr",
                        a: { a: 0, k: [0, 0], ix: 1 },
                        s: { a: 0, k: [100, 100], ix: 3 },
                        sk: { a: 0, k: 0, ix: 4 },
                        p: { a: 0, k: [-284, 92], ix: 2 },
                        r: { a: 0, k: 0, ix: 6 },
                        sa: { a: 0, k: 0, ix: 5 },
                        o: { a: 0, k: 100, ix: 7 }
                      }
                    ]
                  }
                ],
                ind: 4
              }
            ],
            v: "5.7.11",
            fr: 60,
            op: 81,
            ip: 0,
            assets: []
          }}
          className={classNames("__wab_instance", sty.lottie, {
            [sty.lottieloading]: hasVariant($state, "loading", "loading")
          })}
        />
      ) : null}
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textloading]: hasVariant($state, "loading", "loading")
        })}
      >
        {"        "}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "lottie", "text"],
  freeBox: ["freeBox"],
  lottie: ["lottie"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  lottie: typeof LottieWrapper;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginBox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginBox__VariantsArgs;
    args?: PlasmicLoginBox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginBox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLoginBox__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLoginBox__ArgProps,
          internalVariantPropNames: PlasmicLoginBox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLoginBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginBox";
  } else {
    func.displayName = `PlasmicLoginBox.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginBox = Object.assign(
  // Top-level PlasmicLoginBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    lottie: makeNodeComponent("lottie"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicLoginBox
    internalVariantProps: PlasmicLoginBox__VariantProps,
    internalArgProps: PlasmicLoginBox__ArgProps
  }
);

export default PlasmicLoginBox;
/* prettier-ignore-end */
