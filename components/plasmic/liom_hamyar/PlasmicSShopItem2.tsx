/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: KwP9Ca9sBlnP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import ShopBoxRef2 from "../../ShopBoxRef2"; // plasmic-import: b0wHmbLNagu-/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSShopItem2.module.css"; // plasmic-import: KwP9Ca9sBlnP/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicSShopItem2__VariantMembers = {};
export type PlasmicSShopItem2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSShopItem2__VariantsArgs;
export const PlasmicSShopItem2__VariantProps = new Array<VariantPropType>();

export type PlasmicSShopItem2__ArgsType = {};
type ArgPropType = keyof PlasmicSShopItem2__ArgsType;
export const PlasmicSShopItem2__ArgProps = new Array<ArgPropType>();

export type PlasmicSShopItem2__OverridesType = {
  root?: Flex__<"div">;
  shopBoxRef2?: Flex__<typeof ShopBoxRef2>;
  button?: Flex__<typeof Button>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultSShopItem2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSShopItem2__RenderFunc(props: {
  variants: PlasmicSShopItem2__VariantsArgs;
  args: PlasmicSShopItem2__ArgsType;
  overrides: PlasmicSShopItem2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "title",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u062a\u0631\u0634\u062d\u0627\u062a\u060c \u062e\u0627\u0631\u0634 \u06cc\u0627 \u0628\u0648\u06cc \u0628\u062f \u0648\u0627\u0698\u0646 \u0627\u0630\u06cc\u062a\u062a \u0645\u06cc\u200c\u06a9\u0646\u0647\u061f"
      },
      {
        path: "text",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return `لیوم این‌جاست که کمکت کنه، بدون خجالت و یا نیاز به مراجعه حضوری به پزشک:

▪️ علائم‌تو بررسی می‌کنیم تا بفهمی دقیقاً عفونت واژن داری یا نه
▪️ برای درمان بهت دارو یا راهکار های طبیعی میدیم
▪️ پیگیری می‌کنیم ببینیم وضعیت بهتر شده یا نه

 فقط کافیه ابزار رو فعال کنی. تشخیص و پیگیری و درمانت با ماست👇`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "btnText",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u067e\u0631\u062f\u0627\u062e\u062a"
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "shopItem",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "shop",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "refCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "shopBoxRef2.selectShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shopBoxRef2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          {(() => {
            try {
              return !$state.load;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__kZtCf)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__c7BGk
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s3Ri
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.text;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(() => {
                try {
                  return !$state.shop;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <ShopBoxRef2
                  data-plasmic-name={"shopBoxRef2"}
                  data-plasmic-override={overrides.shopBoxRef2}
                  className={classNames("__wab_instance", sty.shopBoxRef2)}
                  id={(() => {
                    try {
                      return parseInt($state.shopItem);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "shopBoxRef2",
                      "open"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onSelectShopChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "shopBoxRef2",
                      "selectShop"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  open={generateStateValueProp($state, ["shopBoxRef2", "open"])}
                  refcode={(() => {
                    try {
                      return $state.refCode;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  type={(() => {
                    try {
                      return $state.shopItem;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                color={generateStateValueProp($state, ["button", "color"])}
                load={generateStateValueProp($state, ["button", "load"])}
                loading={generateStateValueProp($state, ["button", "loading"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return location.replace(
                                `https://tools.liom.app/self-test/?app=liom&inApp=true&type=${$state.type}&origin=liomSelfCare&token=${$state.token}`
                              );
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadingChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "loading"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__q89V
                  )}
                >
                  {
                    "\u0648\u0631\u0648\u062f \u0628\u0647 \u067e\u0631\u0633\u0634\u0646\u0627\u0645\u0647"
                  }
                </div>
              </Button>
            </div>
          ) : null}
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["params"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          return urlParams.forEach((value, key) => {
                            const cleanValue = value.split("?")[0];
                            $state.paramsObject[key] = cleanValue;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["params"] != null &&
                typeof $steps["params"] === "object" &&
                typeof $steps["params"].then === "function"
              ) {
                $steps["params"] = await $steps["params"];
              }

              $steps["updateShop"] = (
                $state.paramsObject?.status ? true : false
              )
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["shop"]
                      },
                      operation: 0,
                      value: $state.paramsObject.status == "true"
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateShop"] != null &&
                typeof $steps["updateShop"] === "object" &&
                typeof $steps["updateShop"].then === "function"
              ) {
                $steps["updateShop"] = await $steps["updateShop"];
              }

              $steps["invokeGlobalAction4"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/shop-item",
                        (() => {
                          try {
                            return (() => {
                              const urlObj = new URL(window.location.href);
                              const parts = urlObj.pathname
                                .split("/")
                                .filter(Boolean);
                              const lastPart = parts[parts.length - 1] || "";
                              const code = lastPart.split("_")[1] || null;
                              return { type: code };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction4"] != null &&
                typeof $steps["invokeGlobalAction4"] === "object" &&
                typeof $steps["invokeGlobalAction4"].then === "function"
              ) {
                $steps["invokeGlobalAction4"] =
                  await $steps["invokeGlobalAction4"];
              }

              $steps["invokeGlobalAction"] =
                $state.paramsObject.status == "true"
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062a\u0645\u062f\u06cc\u062f \u0634\u062f.",
                          "bottom-center",
                          5000
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] =
                  await $steps["invokeGlobalAction"];
              }

              $steps["runCode"] = $steps.invokeGlobalAction4?.data
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.text = $steps.invokeGlobalAction4.data.text;
                          $state.title = $steps.invokeGlobalAction4.data.title;
                          $state.shopItem =
                            $steps.invokeGlobalAction4.data["shop-type"];
                          $state.type =
                            $steps.invokeGlobalAction4.data["test-type"];
                          const urlObj = new URL(window.location.href);
                          const parts = urlObj.pathname
                            .split("/")
                            .filter(Boolean);
                          const lastPart = parts[parts.length - 1] || "";
                          const username = lastPart.split("_")[0] || null;
                          return ($state.refCode = username);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["invokeGlobalAction2"] =
                $state.paramsObject.status == "false"
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u0645\u062a\u0627\u0633\u0641\u0627\u0646\u0647 \u062e\u0631\u06cc\u062f \u0634\u0645\u0627 \u0646\u0627\u0645\u0648\u0641\u0642 \u0628\u0648\u062f.",
                          "bottom-center",
                          5000
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction2"] != null &&
                typeof $steps["invokeGlobalAction2"] === "object" &&
                typeof $steps["invokeGlobalAction2"].then === "function"
              ) {
                $steps["invokeGlobalAction2"] =
                  await $steps["invokeGlobalAction2"];
              }

              $steps["updateLoad"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["load"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateLoad"] != null &&
                typeof $steps["updateLoad"] === "object" &&
                typeof $steps["updateLoad"].then === "function"
              ) {
                $steps["updateLoad"] = await $steps["updateLoad"];
              }

              $steps["invokeGlobalAction3"] = (
                $state.paramsObject.status ? false : true
              )
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://api.liom.app/service/log",
                        undefined,
                        (() => {
                          try {
                            return {
                              userId:
                                $state.paramsObject.userId ||
                                $state.paramsObject.user_id,
                              pageName: "shop-item",
                              action: "loadePage",
                              extraData: {
                                shopType: $state.paramsObject["shop_type"]
                              }
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        {
                          headers: {
                            "Content-Type": "application/json",
                            Authorization:
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                          }
                        }
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction3"] != null &&
                typeof $steps["invokeGlobalAction3"] === "object" &&
                typeof $steps["invokeGlobalAction3"].then === "function"
              ) {
                $steps["invokeGlobalAction3"] =
                  await $steps["invokeGlobalAction3"];
              }
            }}
          />

          {(() => {
            try {
              return $state.load;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__biDm1)}>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__wmNrw,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__t92Jg,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___2MHAe,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__eEw7I,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__a3QX,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__yMoH9,
                  "shimmer"
                )}
              />
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "shopBoxRef2", "button", "sideEffect"],
  shopBoxRef2: ["shopBoxRef2"],
  button: ["button"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  shopBoxRef2: typeof ShopBoxRef2;
  button: typeof Button;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSShopItem2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSShopItem2__VariantsArgs;
    args?: PlasmicSShopItem2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicSShopItem2__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicSShopItem2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSShopItem2__ArgProps,
          internalVariantPropNames: PlasmicSShopItem2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSShopItem2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSShopItem2";
  } else {
    func.displayName = `PlasmicSShopItem2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSShopItem2 = Object.assign(
  // Top-level PlasmicSShopItem2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    shopBoxRef2: makeNodeComponent("shopBoxRef2"),
    button: makeNodeComponent("button"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicSShopItem2
    internalVariantProps: PlasmicSShopItem2__VariantProps,
    internalArgProps: PlasmicSShopItem2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSShopItem2;
/* prettier-ignore-end */
