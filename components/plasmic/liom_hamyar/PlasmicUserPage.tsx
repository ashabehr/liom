/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: Y_O8FNCBMxb-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LineClomp from "../../LineClomp"; // plasmic-import: XsM8QG4wUKlk/component
import Checkbox from "../../Checkbox"; // plasmic-import: IwXl9xUH-ZMp/component
import Switchbest from "../../Switchbest"; // plasmic-import: ofUp1AS5glz5/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicUserPage.module.css"; // plasmic-import: Y_O8FNCBMxb-/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import Line3Icon from "./icons/PlasmicIcon__Line3"; // plasmic-import: cDBsZfQFOOWa/icon

createPlasmicElementProxy;

export type PlasmicUserPage__VariantMembers = {};
export type PlasmicUserPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicUserPage__VariantsArgs;
export const PlasmicUserPage__VariantProps = new Array<VariantPropType>();

export type PlasmicUserPage__ArgsType = {
  header?: any;
  data?: any;
  onBack?: (event: any) => void;
  loading?: boolean;
  onClick?: (event: any) => void;
  onUserdataChange?: (val: string) => void;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicUserPage__ArgsType;
export const PlasmicUserPage__ArgProps = new Array<ArgPropType>(
  "header",
  "data",
  "onBack",
  "loading",
  "onClick",
  "onUserdataChange",
  "children",
  "slot"
);

export type PlasmicUserPage__OverridesType = {
  frame49?: Flex__<"div">;
  frame25?: Flex__<"div">;
  frame48?: Flex__<"div">;
  frame47?: Flex__<"div">;
  frame41?: Flex__<"div">;
  frame35?: Flex__<"div">;
  frame46?: Flex__<"div">;
  frame42?: Flex__<"div">;
  frame43?: Flex__<"div">;
  lineClomp?: Flex__<typeof LineClomp>;
  checkbox?: Flex__<typeof Checkbox>;
  switchbest?: Flex__<typeof Switchbest>;
};

export interface DefaultUserPageProps {
  header?: any;
  data?: any;
  onBack?: (event: any) => void;
  loading?: boolean;
  onClick?: (event: any) => void;
  onUserdataChange?: (val: string) => void;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUserPage__RenderFunc(props: {
  variants: PlasmicUserPage__VariantsArgs;
  args: PlasmicUserPage__ArgsType;
  overrides: PlasmicUserPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          header: [
            { field: "id", label_fa: "#", width: 80, type: "number" },
            {
              field: "username",
              label_fa:
                "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc",
              width: 150,
              type: "text"
            },
            {
              field: "mobile",
              label_fa:
                "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644",
              width: 170,
              type: "text"
            },
            {
              field: "refcode",
              label_fa: "\u06a9\u062f \u0645\u0639\u0631\u0641",
              width: 100,
              type: "text"
            },
            {
              field: "activeTel",
              label_fa:
                "\u062a\u0644\u06af\u0631\u0627\u0645 \u0641\u0639\u0627\u0644",
              width: 90,
              type: "bool"
            },
            {
              field: "countBuyHusbandSms",
              label_fa:
                "\u062a\u0639\u062f\u0627\u062f \u062e\u0631\u06cc\u062f \u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627",
              width: 120,
              type: "number"
            },
            {
              field: "countBuySelfSms",
              label_fa:
                "\u062a\u0639\u062f\u0627\u062f \u062e\u0631\u06cc\u062f \u0647\u0645\u06cc\u0627\u0631 \u062e\u0648\u062f",
              width: 120,
              type: "number"
            },
            {
              field: "lastActivity",
              label_fa:
                "\u0622\u062e\u0631\u06cc\u0646 \u0641\u0639\u0627\u0644\u06cc\u062a",
              width: 160,
              type: "datetime"
            },
            {
              field: "husbandSmsSubTime",
              label_fa:
                "\u067e\u0627\u06cc\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627",
              width: 160,
              type: "datetime"
            },
            {
              field: "selfHamyarSmsSubTime",
              label_fa:
                "\u067e\u0627\u06cc\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0645\u06cc\u0627\u0631 \u062e\u0648\u062f",
              width: 160,
              type: "datetime"
            },
            {
              field: "hamyarData",
              label_fa:
                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0647\u0645\u06cc\u0627\u0631\u0647\u0627",
              width: 220,
              type: "array"
            }
          ],
          data: {
            success: true,
            result: {
              total: 881,
              list: [
                {
                  user: {
                    countBuyBreastCancer: 3,
                    countBuyHamyarStatus: 1,
                    countBuyHusbandSms: 3,
                    countBuyPregnancySubStatus: 5,
                    countBuySelfSms: 1,
                    countBuySpecialAdvice: 1,
                    activeTel: true,
                    breastCancerSmsSubTime: {
                      year: 2026,
                      month: 2,
                      day: 3,
                      hour: 4,
                      minute: 3,
                      second: 11,
                      nanosecond: 141000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancySubTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 358000000,
                      timeZoneOffsetSeconds: 0
                    },
                    hamyarTime: {
                      year: 2025,
                      month: 5,
                      day: 21,
                      hour: 22,
                      minute: 22,
                      second: 35,
                      nanosecond: 336000000,
                      timeZoneOffsetSeconds: 0
                    },
                    husbandSmsSubTime: {
                      year: 2025,
                      month: 10,
                      day: 7,
                      hour: 8,
                      minute: 39,
                      second: 22,
                      nanosecond: 886000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancyBabyGrowthTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancyBecomeFatherTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancyBetterRelationTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancyDangerTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancySelfSmsTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    selfHamyarSmsSubTime: {
                      year: 2025,
                      month: 12,
                      day: 6,
                      hour: 10,
                      minute: 33,
                      second: 20,
                      nanosecond: 363000000,
                      timeZoneOffsetSeconds: 0
                    },
                    specialAdviceSubTim: {
                      year: 2025,
                      month: 3,
                      day: 9,
                      hour: 16,
                      minute: 11,
                      second: 12,
                      nanosecond: 839000000,
                      timeZoneOffsetSeconds: 0
                    },
                    mobile: "",
                    id: "265149",
                    lastActivity: {
                      year: 2025,
                      month: 9,
                      day: 12,
                      hour: 18,
                      minute: 23,
                      second: 34,
                      nanosecond: 707000000,
                      timeZoneOffsetSeconds: 0
                    },
                    username: "melika",
                    refcode: "3d8fb3"
                  }
                },
                {
                  user: {
                    countBuyHusbandSms: 1,
                    activeTel: false,
                    husbandSmsSubTime: {
                      year: 2025,
                      month: 9,
                      day: 13,
                      hour: 5,
                      minute: 49,
                      second: 2,
                      nanosecond: 612000000,
                      timeZoneOffsetSeconds: 0
                    },
                    mobile: "09139140864",
                    id: "f0afd250-6395-4253-b257-e167262cdd3d",
                    lastActivity: {
                      year: 2025,
                      month: 9,
                      day: 7,
                      hour: 3,
                      minute: 48,
                      second: 36,
                      nanosecond: 74000000,
                      timeZoneOffsetSeconds: 0
                    },
                    username: "guest_M8KxaugoDA",
                    refcode: "fGC3sVlYv"
                  }
                }
              ]
            }
          },
          loading: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "lineClomp[][].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "switchbest[][].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkbox[][].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "userdata",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({}),

        onChangeProp: "onUserdataChange"
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"frame49"}
      data-plasmic-override={overrides.frame49}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.frame49
      )}
    >
      <div
        data-plasmic-name={"frame25"}
        data-plasmic-override={overrides.frame25}
        className={classNames(projectcss.all, sty.frame25)}
      >
        <ChevronRightIcon
          className={classNames(projectcss.all, sty.svg__upYe4)}
          onClick={args.onBack}
          role={"img"}
        />

        <div className={classNames(projectcss.all, sty.freeBox__tkYxQ)}>
          {renderPlasmicSlot({
            defaultContents: "Journal Name",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>
        {(() => {
          try {
            return !$props.loading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__m8B5B
            )}
          >
            <React.Fragment>
              {$props.data?.result?.total?.toLocaleString() ?? ""}
            </React.Fragment>
          </div>
        ) : null}
      </div>
      <div
        data-plasmic-name={"frame48"}
        data-plasmic-override={overrides.frame48}
        className={classNames(projectcss.all, sty.frame48)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__iyLtr)}>
          <Line3Icon
            className={classNames(projectcss.all, sty.svg__umadD)}
            role={"img"}
          />
        </div>
        <div
          data-plasmic-name={"frame47"}
          data-plasmic-override={overrides.frame47}
          className={classNames(projectcss.all, sty.frame47)}
        >
          <div
            data-plasmic-name={"frame41"}
            data-plasmic-override={overrides.frame41}
            className={classNames(projectcss.all, sty.frame41)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $props.header;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  data-plasmic-name={"frame35"}
                  data-plasmic-override={overrides.frame35}
                  className={classNames(projectcss.all, sty.frame35)}
                  key={currentIndex}
                  style={(() => {
                    try {
                      return {
                        width: currentItem.width + "px"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ljvUq
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.label_fa;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Date";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              );
            })}
          </div>
          <div
            data-plasmic-name={"frame46"}
            data-plasmic-override={overrides.frame46}
            className={classNames(projectcss.all, sty.frame46)}
          >
            {(() => {
              try {
                return $props.loading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()
              ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [1, 2, 3, 4, 5, 6];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__bSsdh,
                        "shimmer"
                      )}
                      key={currentIndex}
                    />
                  );
                })
              : null}
            {(() => {
              try {
                return !$props.loading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()
              ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $props.data.result.list;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const item = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      data-plasmic-name={"frame42"}
                      data-plasmic-override={overrides.frame42}
                      className={classNames(projectcss.all, sty.frame42)}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runOnClick"] = true
                          ? (() => {
                              const actionArgs = {
                                eventRef: $props["onClick"]
                              };
                              return (({ eventRef, args }) => {
                                return eventRef?.(...(args ?? []));
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runOnClick"] != null &&
                          typeof $steps["runOnClick"] === "object" &&
                          typeof $steps["runOnClick"].then === "function"
                        ) {
                          $steps["runOnClick"] = await $steps["runOnClick"];
                        }

                        $steps["updateSwitchbestIsChecked"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["switchbest[][]", "isChecked"]
                                },
                                operation: 0
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSwitchbestIsChecked"] != null &&
                          typeof $steps["updateSwitchbestIsChecked"] ===
                            "object" &&
                          typeof $steps["updateSwitchbestIsChecked"].then ===
                            "function"
                        ) {
                          $steps["updateSwitchbestIsChecked"] = await $steps[
                            "updateSwitchbestIsChecked"
                          ];
                        }

                        $steps["dataUser"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["userdata"]
                                },
                                operation: 0,
                                value: $state.userdata
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["dataUser"] != null &&
                          typeof $steps["dataUser"] === "object" &&
                          typeof $steps["dataUser"].then === "function"
                        ) {
                          $steps["dataUser"] = await $steps["dataUser"];
                        }
                      }}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $props.header;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_1, __plasmic_idx_1) => {
                        const textItem = __plasmic_item_1;
                        const currentIndex = __plasmic_idx_1;
                        return (
                          <div
                            data-plasmic-name={"frame43"}
                            data-plasmic-override={overrides.frame43}
                            className={classNames(projectcss.all, sty.frame43)}
                            key={currentIndex}
                            style={(() => {
                              try {
                                return {
                                  width: textItem.width + "px"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            {(() => {
                              try {
                                return textItem.type != "bool";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <LineClomp
                                data-plasmic-name={"lineClomp"}
                                data-plasmic-override={overrides.lineClomp}
                                className={classNames(
                                  "__wab_instance",
                                  sty.lineClomp
                                )}
                                numberOfLine={1}
                                onLineChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "lineClomp",
                                    __plasmic_idx_0,
                                    __plasmic_idx_1,
                                    "line"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___77Wiu
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__eQp1V
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            if (textItem.type === "text") {
                                              return item.user[textItem.field];
                                            }
                                            if (textItem.type === "datetime") {
                                              var t = item.user[textItem.field];
                                              if (t) {
                                                var d = new Date(
                                                  t.year,
                                                  t.month - 1,
                                                  t.day,
                                                  t.hour,
                                                  t.minute,
                                                  t.second,
                                                  Math.floor(
                                                    t.nanosecond / 1000000
                                                  )
                                                );
                                                var formatted =
                                                  d.toLocaleDateString("fa-IR");
                                                return formatted;
                                              }
                                            }
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "27 Nov";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  {(() => {
                                    try {
                                      return (
                                        textItem.field === "mobile" &&
                                        item.user.mobile.trim() !== ""
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                                    ? (() => {
                                        const child$Props = {
                                          children: null,
                                          className: classNames(
                                            "__wab_instance",
                                            sty.checkbox
                                          ),
                                          isChecked:
                                            generateStateValueProp($state, [
                                              "checkbox",
                                              __plasmic_idx_0,
                                              __plasmic_idx_1,
                                              "isChecked"
                                            ]) ?? false,
                                          onChange: async (
                                            ...eventArgs: any
                                          ) => {
                                            ((...eventArgs) => {
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "checkbox",
                                                  __plasmic_idx_0,
                                                  __plasmic_idx_1,
                                                  "isChecked"
                                                ]
                                              )(eventArgs[0]);
                                            }).apply(null, eventArgs);

                                            if (
                                              eventArgs.length > 1 &&
                                              eventArgs[1] &&
                                              eventArgs[1]._plasmic_state_init_
                                            ) {
                                              return;
                                            }
                                          }
                                        };

                                        initializePlasmicStates(
                                          $state,
                                          [
                                            {
                                              name: "checkbox[][].isChecked",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => undefined
                                            }
                                          ],
                                          [__plasmic_idx_0, __plasmic_idx_1]
                                        );
                                        return (
                                          <Checkbox
                                            data-plasmic-name={"checkbox"}
                                            data-plasmic-override={
                                              overrides.checkbox
                                            }
                                            {...child$Props}
                                          />
                                        );
                                      })()
                                    : null}
                                </div>
                              </LineClomp>
                            ) : null}
                            {(() => {
                              try {
                                return textItem.type == "bool";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (() => {
                                  const child$Props = {
                                    children: null,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.switchbest
                                    ),
                                    isChecked:
                                      generateStateValueProp($state, [
                                        "switchbest",
                                        __plasmic_idx_0,
                                        __plasmic_idx_1,
                                        "isChecked"
                                      ]) ?? false,
                                    isDisabled: true,
                                    onChange: async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "switchbest",
                                          __plasmic_idx_0,
                                          __plasmic_idx_1,
                                          "isChecked"
                                        ])(eventArgs[0]);
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "switchbest[][].isChecked",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return item.user[textItem.field];
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    [__plasmic_idx_0, __plasmic_idx_1]
                                  );
                                  return (
                                    <Switchbest
                                      data-plasmic-name={"switchbest"}
                                      data-plasmic-override={
                                        overrides.switchbest
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()
                              : null}
                          </div>
                        );
                      })}
                    </div>
                  );
                })
              : null}
            <div className={classNames(projectcss.all, sty.freeBox__d7RnW)}>
              {renderPlasmicSlot({
                defaultContents: null,
                value: args.slot
              })}
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame49: [
    "frame49",
    "frame25",
    "frame48",
    "frame47",
    "frame41",
    "frame35",
    "frame46",
    "frame42",
    "frame43",
    "lineClomp",
    "checkbox",
    "switchbest"
  ],
  frame25: ["frame25"],
  frame48: [
    "frame48",
    "frame47",
    "frame41",
    "frame35",
    "frame46",
    "frame42",
    "frame43",
    "lineClomp",
    "checkbox",
    "switchbest"
  ],
  frame47: [
    "frame47",
    "frame41",
    "frame35",
    "frame46",
    "frame42",
    "frame43",
    "lineClomp",
    "checkbox",
    "switchbest"
  ],
  frame41: ["frame41", "frame35"],
  frame35: ["frame35"],
  frame46: [
    "frame46",
    "frame42",
    "frame43",
    "lineClomp",
    "checkbox",
    "switchbest"
  ],
  frame42: ["frame42", "frame43", "lineClomp", "checkbox", "switchbest"],
  frame43: ["frame43", "lineClomp", "checkbox", "switchbest"],
  lineClomp: ["lineClomp", "checkbox"],
  checkbox: ["checkbox"],
  switchbest: ["switchbest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame49: "div";
  frame25: "div";
  frame48: "div";
  frame47: "div";
  frame41: "div";
  frame35: "div";
  frame46: "div";
  frame42: "div";
  frame43: "div";
  lineClomp: typeof LineClomp;
  checkbox: typeof Checkbox;
  switchbest: typeof Switchbest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserPage__VariantsArgs;
    args?: PlasmicUserPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUserPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUserPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserPage__ArgProps,
          internalVariantPropNames: PlasmicUserPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame49") {
    func.displayName = "PlasmicUserPage";
  } else {
    func.displayName = `PlasmicUserPage.${nodeName}`;
  }
  return func;
}

export const PlasmicUserPage = Object.assign(
  // Top-level PlasmicUserPage renders the root element
  makeNodeComponent("frame49"),
  {
    // Helper components rendering sub-elements
    frame25: makeNodeComponent("frame25"),
    frame48: makeNodeComponent("frame48"),
    frame47: makeNodeComponent("frame47"),
    frame41: makeNodeComponent("frame41"),
    frame35: makeNodeComponent("frame35"),
    frame46: makeNodeComponent("frame46"),
    frame42: makeNodeComponent("frame42"),
    frame43: makeNodeComponent("frame43"),
    lineClomp: makeNodeComponent("lineClomp"),
    checkbox: makeNodeComponent("checkbox"),
    switchbest: makeNodeComponent("switchbest"),

    // Metadata about props expected for PlasmicUserPage
    internalVariantProps: PlasmicUserPage__VariantProps,
    internalArgProps: PlasmicUserPage__ArgProps
  }
);

export default PlasmicUserPage;
/* prettier-ignore-end */
