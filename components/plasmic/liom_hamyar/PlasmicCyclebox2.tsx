/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: NW80jtwK9h1z

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicCyclebox2.module.css"; // plasmic-import: NW80jtwK9h1z/css

createPlasmicElementProxy;

export type PlasmicCyclebox2__VariantMembers = {
  pms: "pms";
  fertility: "fertility";
  period: "period";
  normalpms: "normalpms";
  state: "pms" | "fertility" | "period";
};
export type PlasmicCyclebox2__VariantsArgs = {
  pms?: SingleBooleanChoiceArg<"pms">;
  fertility?: SingleBooleanChoiceArg<"fertility">;
  period?: SingleBooleanChoiceArg<"period">;
  normalpms?: SingleBooleanChoiceArg<"normalpms">;
  state?: SingleChoiceArg<"pms" | "fertility" | "period">;
};
type VariantPropType = keyof PlasmicCyclebox2__VariantsArgs;
export const PlasmicCyclebox2__VariantProps = new Array<VariantPropType>(
  "pms",
  "fertility",
  "period",
  "normalpms",
  "state"
);

export type PlasmicCyclebox2__ArgsType = {
  userData?: any;
  onPmsChange?: (val: any) => void;
  onFertilityChange2?: (val: any) => void;
  onPeriodChange2?: (val: any) => void;
  cycle?: string;
  onCycleChange?: (val: string) => void;
  onClickDescription?: (event: any) => void;
  textsycle?: string;
  onTextsycleChange?: (val: string) => void;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCyclebox2__ArgsType;
export const PlasmicCyclebox2__ArgProps = new Array<ArgPropType>(
  "userData",
  "onPmsChange",
  "onFertilityChange2",
  "onPeriodChange2",
  "cycle",
  "onCycleChange",
  "onClickDescription",
  "textsycle",
  "onTextsycleChange",
  "children"
);

export type PlasmicCyclebox2__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultCyclebox2Props {
  userData?: any;
  onPmsChange?: (val: any) => void;
  onFertilityChange2?: (val: any) => void;
  onPeriodChange2?: (val: any) => void;
  cycle?: string;
  onCycleChange?: (val: string) => void;
  onClickDescription?: (event: any) => void;
  textsycle?: string;
  onTextsycleChange?: (val: string) => void;
  children?: React.ReactNode;
  pms?: SingleBooleanChoiceArg<"pms">;
  fertility?: SingleBooleanChoiceArg<"fertility">;
  period?: SingleBooleanChoiceArg<"period">;
  normalpms?: SingleBooleanChoiceArg<"normalpms">;
  state?: SingleChoiceArg<"pms" | "fertility" | "period">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCyclebox2__RenderFunc(props: {
  variants: PlasmicCyclebox2__VariantsArgs;
  args: PlasmicCyclebox2__ArgsType;
  overrides: PlasmicCyclebox2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pms",
        type: "writable",
        variableType: "variant",

        valueProp: "pms",
        onChangeProp: "onPmsChange"
      },
      {
        path: "fertility",
        type: "writable",
        variableType: "variant",

        valueProp: "fertility",
        onChangeProp: "onFertilityChange2"
      },
      {
        path: "period",
        type: "writable",
        variableType: "variant",

        valueProp: "period",
        onChangeProp: "onPeriodChange2"
      },
      {
        path: "cycle",
        type: "writable",
        variableType: "text",

        valueProp: "cycle",
        onChangeProp: "onCycleChange"
      },
      {
        path: "textsycle",
        type: "writable",
        variableType: "text",

        valueProp: "textsycle",
        onChangeProp: "onTextsycleChange"
      },
      {
        path: "normalpms",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.normalpms
      },
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        {
          [sty.rootfertility]: hasVariant($state, "fertility", "fertility"),
          [sty.rootfertility_period]:
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "period", "period"),
          [sty.rootnormalpms]: hasVariant($state, "normalpms", "normalpms"),
          [sty.rootnormalpms_state_pms]:
            hasVariant($state, "state", "pms") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.rootnormalpms_state_pms_fertility]:
            hasVariant($state, "state", "pms") &&
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.rootnormalpms_state_pms_fertility_period]:
            hasVariant($state, "state", "pms") &&
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "period", "period") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.rootnormalpms_state_pms_period]:
            hasVariant($state, "state", "pms") &&
            hasVariant($state, "period", "period") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.rootperiod]: hasVariant($state, "period", "period"),
          [sty.rootpms]: hasVariant($state, "pms", "pms"),
          [sty.rootpms_fertility]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "fertility", "fertility"),
          [sty.rootpms_fertility_period]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "period", "period"),
          [sty.rootpms_normalpms]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.rootpms_normalpms_fertility_period]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "period", "period") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.rootpms_normalpms_period]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "period", "period") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.rootpms_normalpms_state_period]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "state", "period") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.rootpms_normalpms_state_period_fertility]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "state", "period") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.rootpms_state_period_fertility]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "state", "period"),
          [sty.rootstate_fertility]: hasVariant($state, "state", "fertility"),
          [sty.rootstate_fertility_period]:
            hasVariant($state, "state", "fertility") &&
            hasVariant($state, "period", "period"),
          [sty.rootstate_fertility_pms]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "state", "fertility"),
          [sty.rootstate_fertility_pms_normalpms]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "state", "fertility") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.rootstate_fertility_pms_normalpms_period]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "state", "fertility") &&
            hasVariant($state, "period", "period") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.rootstate_fertility_pms_period]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "state", "fertility") &&
            hasVariant($state, "period", "period"),
          [sty.rootstate_period]: hasVariant($state, "state", "period"),
          [sty.rootstate_period_fertility]:
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "state", "period"),
          [sty.rootstate_pms]: hasVariant($state, "state", "pms"),
          [sty.rootstate_pms_fertility]:
            hasVariant($state, "state", "pms") &&
            hasVariant($state, "fertility", "fertility"),
          [sty.rootstate_pms_fertility_period]:
            hasVariant($state, "state", "pms") &&
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "period", "period"),
          [sty.rootstate_pms_period]:
            hasVariant($state, "state", "pms") &&
            hasVariant($state, "period", "period")
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxfertility]: hasVariant($state, "fertility", "fertility"),
          [sty.freeBoxfertility_period]:
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "period", "period"),
          [sty.freeBoxnormalpms]: hasVariant($state, "normalpms", "normalpms"),
          [sty.freeBoxnormalpms_state_pms]:
            hasVariant($state, "state", "pms") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.freeBoxnormalpms_state_pms_fertility]:
            hasVariant($state, "state", "pms") &&
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.freeBoxnormalpms_state_pms_fertility_period]:
            hasVariant($state, "state", "pms") &&
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "period", "period") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.freeBoxnormalpms_state_pms_period]:
            hasVariant($state, "state", "pms") &&
            hasVariant($state, "period", "period") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.freeBoxperiod]: hasVariant($state, "period", "period"),
          [sty.freeBoxpms]: hasVariant($state, "pms", "pms"),
          [sty.freeBoxpms_fertility]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "fertility", "fertility"),
          [sty.freeBoxpms_fertility_period]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "period", "period"),
          [sty.freeBoxpms_normalpms]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.freeBoxpms_normalpms_fertility_period]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "period", "period") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.freeBoxpms_normalpms_period]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "period", "period") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.freeBoxpms_normalpms_state_period]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "state", "period") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.freeBoxpms_normalpms_state_period_fertility]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "state", "period") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.freeBoxpms_state_period_fertility]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "state", "period"),
          [sty.freeBoxstate_fertility]: hasVariant(
            $state,
            "state",
            "fertility"
          ),
          [sty.freeBoxstate_fertility_period]:
            hasVariant($state, "state", "fertility") &&
            hasVariant($state, "period", "period"),
          [sty.freeBoxstate_fertility_pms]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "state", "fertility"),
          [sty.freeBoxstate_fertility_pms_normalpms]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "state", "fertility") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.freeBoxstate_fertility_pms_normalpms_period]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "state", "fertility") &&
            hasVariant($state, "period", "period") &&
            hasVariant($state, "normalpms", "normalpms"),
          [sty.freeBoxstate_fertility_pms_period]:
            hasVariant($state, "pms", "pms") &&
            hasVariant($state, "state", "fertility") &&
            hasVariant($state, "period", "period"),
          [sty.freeBoxstate_period]: hasVariant($state, "state", "period"),
          [sty.freeBoxstate_period_fertility]:
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "state", "period"),
          [sty.freeBoxstate_pms]: hasVariant($state, "state", "pms"),
          [sty.freeBoxstate_pms_fertility]:
            hasVariant($state, "state", "pms") &&
            hasVariant($state, "fertility", "fertility"),
          [sty.freeBoxstate_pms_fertility_period]:
            hasVariant($state, "state", "pms") &&
            hasVariant($state, "fertility", "fertility") &&
            hasVariant($state, "period", "period"),
          [sty.freeBoxstate_pms_period]:
            hasVariant($state, "state", "pms") &&
            hasVariant($state, "period", "period")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: null,
          value: args.children
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCyclebox2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCyclebox2__VariantsArgs;
    args?: PlasmicCyclebox2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCyclebox2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCyclebox2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCyclebox2__ArgProps,
          internalVariantPropNames: PlasmicCyclebox2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCyclebox2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCyclebox2";
  } else {
    func.displayName = `PlasmicCyclebox2.${nodeName}`;
  }
  return func;
}

export const PlasmicCyclebox2 = Object.assign(
  // Top-level PlasmicCyclebox2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicCyclebox2
    internalVariantProps: PlasmicCyclebox2__VariantProps,
    internalArgProps: PlasmicCyclebox2__ArgProps
  }
);

export default PlasmicCyclebox2;
/* prettier-ignore-end */
