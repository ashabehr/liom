// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: iNHFQ5RIM3Tb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import Post from "../../Post"; // plasmic-import: PIFHnFLcunkZ/component
import ReactionBar from "../../ReactionBar"; // plasmic-import: 4BabvpvQ8lyP/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import Comment from "../../Comment"; // plasmic-import: Q00r5f4C3XYv/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSocialPage.module.css"; // plasmic-import: iNHFQ5RIM3Tb/css

import Icon146Icon from "./icons/PlasmicIcon__Icon146"; // plasmic-import: oL3Gq5u9-MHL/icon
import Icon177Icon from "./icons/PlasmicIcon__Icon177"; // plasmic-import: I0EM88peJVoH/icon
import Icon175Icon from "./icons/PlasmicIcon__Icon175"; // plasmic-import: Lt-K75cYDcq0/icon
import Icon176Icon from "./icons/PlasmicIcon__Icon176"; // plasmic-import: elrgas2UYaHC/icon

createPlasmicElementProxy;

export type PlasmicSocialPage__VariantMembers = {};
export type PlasmicSocialPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicSocialPage__VariantsArgs;
export const PlasmicSocialPage__VariantProps = new Array<VariantPropType>();

export type PlasmicSocialPage__ArgsType = {};
type ArgPropType = keyof PlasmicSocialPage__ArgsType;
export const PlasmicSocialPage__ArgProps = new Array<ArgPropType>();

export type PlasmicSocialPage__OverridesType = {
  root?: Flex__<"div">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  post?: Flex__<typeof Post>;
  reactionBar?: Flex__<typeof ReactionBar>;
  popover?: Flex__<typeof AntdPopover>;
  comment?: Flex__<typeof Comment>;
  textArea?: Flex__<typeof AntdTextArea>;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultSocialPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSocialPage__RenderFunc(props: {
  variants: PlasmicSocialPage__VariantsArgs;
  args: PlasmicSocialPage__ArgsType;
  overrides: PlasmicSocialPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImVjYjg4M2NkLWI3ODYtNGMzZS1iYjhiLTA5ZTgyNzVkYTk4YyIsInR5cGUiOiJzZXNzaW9uIiwiaWF0IjoxNzM5NjA2MjI2fQ.F7OWRYuvRw2zxjIXAiFCtUVG9fLGRPgvYtPpLWUsz4k"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__v5VDg)}>
            <section className={classNames(projectcss.all, sty.section__fKamc)}>
              <HeaderLiom
                data-plasmic-name={"headerLiom"}
                data-plasmic-override={overrides.headerLiom}
                className={classNames("__wab_instance", sty.headerLiom)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__fnC1S)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__rWa8Z)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"20px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image38.svg",
                      fullWidth: 24,
                      fullHeight: 24,
                      aspectRatio: 1
                    }}
                  />
                </div>
              </HeaderLiom>
            </section>
            <div className={classNames(projectcss.all, sty.freeBox__f0Ap)}>
              <div className={classNames(projectcss.all, sty.freeBox__utoeo)}>
                <div className={classNames(projectcss.all, sty.freeBox__oUuo3)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__jZmxt)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"48px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image10.ico",
                      fullWidth: 256,
                      fullHeight: 256,
                      aspectRatio: undefined
                    }}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__iV3Z6)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zv2Av
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "name";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zdN81
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "username";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qtk4Z)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__h8Wt9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gQyB
                        )}
                      >
                        {
                          "\u062f\u0646\u0628\u0627\u0644 \u06a9\u0631\u062f\u0646 "
                        }
                      </div>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__uC3N)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tfdqU)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0ZQha
                      )}
                    >
                      {
                        "\u0632\u0645\u0627\u0646 \u0628\u0627\u0631\u06af\u0632\u0627\u0631\u06cc "
                      }
                    </div>
                    <Icon146Icon
                      className={classNames(projectcss.all, sty.svg__jVevt)}
                      role={"img"}
                    />
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fiSpi)}
                  >
                    <Icon177Icon
                      className={classNames(projectcss.all, sty.svg___2Yunl)}
                      role={"img"}
                    />
                  </div>
                </div>
              </div>
              <Post
                data-plasmic-name={"post"}
                data-plasmic-override={overrides.post}
                className={classNames("__wab_instance", sty.post)}
              />

              <div
                className={classNames(projectcss.all, sty.freeBox___03Hh9)}
                style={(() => {
                  try {
                    return {
                      position: window.scrollY > 1 ? "fixed;" : ""
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <ReactionBar
                  data-plasmic-name={"reactionBar"}
                  data-plasmic-override={overrides.reactionBar}
                  className={classNames("__wab_instance", sty.reactionBar)}
                />
              </div>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___6AbeA)}
            >
              <svg
                className={classNames(projectcss.all, sty.svg__dDsbb)}
                role={"img"}
              />

              <AntdPopover
                data-plasmic-name={"popover"}
                data-plasmic-override={overrides.popover}
                arrow={true}
                className={classNames("__wab_instance", sty.popover)}
                content={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9QlIf
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qitKu
                        )}
                      >
                        {"Enter some text"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ptukc)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Homq
                        )}
                      >
                        {"Enter some text"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__es2Oy)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eoSs
                        )}
                      >
                        {"Enter some text"}
                      </div>
                    </div>
                  </React.Fragment>
                }
                contentText={"Popover contents"}
                defaultOpen={false}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["popover", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["popover", "open"])}
                placement={"bottom"}
                popoverScopeClassName={sty["popover__popover"]}
                title={null}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ft6Ek
                  )}
                >
                  {
                    "\u0645\u0631\u062a\u0628 \u0633\u0627\u0632\u06cc \u0628\u0631 \u0627\u0633\u0627\u0633 :"
                  }
                </div>
              </AntdPopover>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__sB24Y)}>
              <Comment
                data-plasmic-name={"comment"}
                data-plasmic-override={overrides.comment}
                className={classNames("__wab_instance", sty.comment)}
              />

              <section
                className={classNames(projectcss.all, sty.section__l5Nnd)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__dnSli)}>
                  <Icon175Icon
                    className={classNames(projectcss.all, sty.svg__vNfKk)}
                    role={"img"}
                  />

                  {(() => {
                    const child$Props = {
                      autoSize: true,
                      className: classNames("__wab_instance", sty.textArea),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["textArea", "value"],
                          AntdTextArea_Helpers
                        ).apply(null, eventArgs);
                      },
                      placeholder:
                        "\u06a9\u0627\u0645\u0646\u062a \u0631\u0648 \u0628\u0646\u0648\u06cc\u0633",
                      value: generateStateValueProp($state, [
                        "textArea",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "textArea.value"
                        }
                      ],
                      [],
                      AntdTextArea_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdTextArea
                        data-plasmic-name={"textArea"}
                        data-plasmic-override={overrides.textArea}
                        {...child$Props}
                      />
                    );
                  })()}
                  <Icon176Icon
                    className={classNames(projectcss.all, sty.svg__o8F2W)}
                    role={"img"}
                  />
                </div>
              </section>
            </div>
          </div>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            body={(() => {
              try {
                return {
                  postId: "798941",
                  commentId: "string",
                  orderBy: "newest",
                  authorization: $state.token
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {
                    postId: "798941",
                    commentId: "string",
                    orderBy: "newest",
                    authorization: "$state.token"
                  };
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zgkMo
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kaQmx
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"PUT"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            url={"https://n8n.staas.ir/webhook/rest/social"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLiom",
    "post",
    "reactionBar",
    "popover",
    "comment",
    "textArea",
    "apiRequest"
  ],
  headerLiom: ["headerLiom"],
  post: ["post"],
  reactionBar: ["reactionBar"],
  popover: ["popover"],
  comment: ["comment"],
  textArea: ["textArea"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLiom: typeof HeaderLiom;
  post: typeof Post;
  reactionBar: typeof ReactionBar;
  popover: typeof AntdPopover;
  comment: typeof Comment;
  textArea: typeof AntdTextArea;
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSocialPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSocialPage__VariantsArgs;
    args?: PlasmicSocialPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSocialPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSocialPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSocialPage__ArgProps,
          internalVariantPropNames: PlasmicSocialPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSocialPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocialPage";
  } else {
    func.displayName = `PlasmicSocialPage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSocialPage = Object.assign(
  // Top-level PlasmicSocialPage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    headerLiom: makeNodeComponent("headerLiom"),
    post: makeNodeComponent("post"),
    reactionBar: makeNodeComponent("reactionBar"),
    popover: makeNodeComponent("popover"),
    comment: makeNodeComponent("comment"),
    textArea: makeNodeComponent("textArea"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicSocialPage
    internalVariantProps: PlasmicSocialPage__VariantProps,
    internalArgProps: PlasmicSocialPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSocialPage;
/* prettier-ignore-end */
