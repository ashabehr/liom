// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: iNHFQ5RIM3Tb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import UploudeTime from "../../UploudeTime"; // plasmic-import: aUO_fJR7ceN4/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import Post from "../../Post"; // plasmic-import: PIFHnFLcunkZ/component
import ReactionBar from "../../ReactionBar"; // plasmic-import: 4BabvpvQ8lyP/component
import Like from "../../Like"; // plasmic-import: ARJf0DiYhPbe/component
import Save from "../../Save"; // plasmic-import: _x22uBJ4ZqC9/component
import ButtonSocial from "../../ButtonSocial"; // plasmic-import: 5arXHsXsAsW_/component
import Comment from "../../Comment"; // plasmic-import: Q00r5f4C3XYv/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSocialPage.module.css"; // plasmic-import: iNHFQ5RIM3Tb/css

import Icon146Icon from "./icons/PlasmicIcon__Icon146"; // plasmic-import: oL3Gq5u9-MHL/icon
import Icon180Icon from "./icons/PlasmicIcon__Icon180"; // plasmic-import: GPPgWNu-3jGf/icon
import Icon179Icon from "./icons/PlasmicIcon__Icon179"; // plasmic-import: qlPLXoOalpf5/icon
import Icon170Icon from "./icons/PlasmicIcon__Icon170"; // plasmic-import: dXN8uxxnP9W_/icon
import Icon181Icon from "./icons/PlasmicIcon__Icon181"; // plasmic-import: wyvhRqZQxJDx/icon
import Icon182Icon from "./icons/PlasmicIcon__Icon182"; // plasmic-import: lYF_tL7tdQDG/icon
import Icon183Icon from "./icons/PlasmicIcon__Icon183"; // plasmic-import: 4xKMWXb86jEA/icon
import Icon177Icon from "./icons/PlasmicIcon__Icon177"; // plasmic-import: I0EM88peJVoH/icon
import Icon150Icon from "./icons/PlasmicIcon__Icon150"; // plasmic-import: 4NJq6NYKqIPu/icon
import Icon149Icon from "./icons/PlasmicIcon__Icon149"; // plasmic-import: bJ7kVZQK3ovZ/icon
import Icon147Icon from "./icons/PlasmicIcon__Icon147"; // plasmic-import: 2SO3BEHlRKXI/icon
import Icon184Icon from "./icons/PlasmicIcon__Icon184"; // plasmic-import: qyxzNL8K38N5/icon
import Icon175Icon from "./icons/PlasmicIcon__Icon175"; // plasmic-import: Lt-K75cYDcq0/icon
import Icon176Icon from "./icons/PlasmicIcon__Icon176"; // plasmic-import: elrgas2UYaHC/icon

createPlasmicElementProxy;

export type PlasmicSocialPage__VariantMembers = {};
export type PlasmicSocialPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicSocialPage__VariantsArgs;
export const PlasmicSocialPage__VariantProps = new Array<VariantPropType>();

export type PlasmicSocialPage__ArgsType = {};
type ArgPropType = keyof PlasmicSocialPage__ArgsType;
export const PlasmicSocialPage__ArgProps = new Array<ArgPropType>();

export type PlasmicSocialPage__OverridesType = {
  root?: Flex__<"div">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  uploudeTime?: Flex__<typeof UploudeTime>;
  popover2?: Flex__<typeof AntdPopover>;
  post?: Flex__<typeof Post>;
  reactionBar?: Flex__<typeof ReactionBar>;
  like2?: Flex__<typeof Like>;
  save?: Flex__<typeof Save>;
  popover?: Flex__<typeof AntdPopover>;
  buttonNewest?: Flex__<typeof ButtonSocial>;
  mostReply?: Flex__<typeof ButtonSocial>;
  mostLiked?: Flex__<typeof ButtonSocial>;
  comment?: Flex__<typeof Comment>;
  textArea?: Flex__<typeof AntdTextArea>;
  getInfo?: Flex__<typeof ApiRequest>;
};

export interface DefaultSocialPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSocialPage__RenderFunc(props: {
  variants: PlasmicSocialPage__VariantsArgs;
  args: PlasmicSocialPage__ArgsType;
  overrides: PlasmicSocialPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "getInfo.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getInfo.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getInfo.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImVjYjg4M2NkLWI3ODYtNGMzZS1iYjhiLTA5ZTgyNzVkYTk4YyIsInR5cGUiOiJzZXNzaW9uIiwiaWF0IjoxNzM5NjA2MjI2fQ.F7OWRYuvRw2zxjIXAiFCtUVG9fLGRPgvYtPpLWUsz4k"
      },
      {
        path: "popover2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "like2.islike",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "comment[].commentData",
        type: "private",
        variableType: "object"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__v5VDg)}>
            <section className={classNames(projectcss.all, sty.section__fKamc)}>
              <HeaderLiom
                data-plasmic-name={"headerLiom"}
                data-plasmic-override={overrides.headerLiom}
                className={classNames("__wab_instance", sty.headerLiom)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__fnC1S)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__rWa8Z)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"20px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image38.svg",
                      fullWidth: 24,
                      fullHeight: 24,
                      aspectRatio: 1
                    }}
                  />
                </div>
              </HeaderLiom>
            </section>
            <div className={classNames(projectcss.all, sty.freeBox__f0Ap)}>
              <div className={classNames(projectcss.all, sty.freeBox__utoeo)}>
                <div className={classNames(projectcss.all, sty.freeBox__oUuo3)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__jZmxt)}
                    displayHeight={"48px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"48px"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return $state.getInfo.data.result.details.user.image;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return {
                            src: "/plasmic/liom_hamyar/images/image10.ico",
                            fullWidth: 256,
                            fullHeight: 256,
                            aspectRatio: undefined
                          };
                        }
                        throw e;
                      }
                    })()}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__iV3Z6)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zv2Av
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.getInfo.data.result.details.user.name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "name";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zdN81
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.getInfo.data.result.details.user
                              .username;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "username";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qtk4Z)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__h8Wt9)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateTextAreaValue"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["textArea", "value"]
                                },
                                operation: 0
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTextAreaValue"] != null &&
                          typeof $steps["updateTextAreaValue"] === "object" &&
                          typeof $steps["updateTextAreaValue"].then ===
                            "function"
                        ) {
                          $steps["updateTextAreaValue"] = await $steps[
                            "updateTextAreaValue"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gQyB
                        )}
                      >
                        {
                          "\u062f\u0646\u0628\u0627\u0644 \u06a9\u0631\u062f\u0646 "
                        }
                      </div>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__uC3N)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lYbCo)}
                  >
                    <UploudeTime
                      data-plasmic-name={"uploudeTime"}
                      data-plasmic-override={overrides.uploudeTime}
                      className={classNames("__wab_instance", sty.uploudeTime)}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__tfdqU)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updatePopover2Open"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["popover2", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePopover2Open"] != null &&
                          typeof $steps["updatePopover2Open"] === "object" &&
                          typeof $steps["updatePopover2Open"].then ===
                            "function"
                        ) {
                          $steps["updatePopover2Open"] = await $steps[
                            "updatePopover2Open"
                          ];
                        }
                      }}
                    >
                      <AntdPopover
                        data-plasmic-name={"popover2"}
                        data-plasmic-override={overrides.popover2}
                        arrow={true}
                        className={classNames("__wab_instance", sty.popover2)}
                        color={true ? "#FFFFFF" : undefined}
                        content={
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yPEo
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cwZ6
                              )}
                            >
                              <Icon180Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__zjOdC
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hOmR
                                )}
                              >
                                {
                                  "\u067e\u06cc\u0646 \u0628\u0631\u0627\u06cc \u0647\u0645\u0647"
                                }
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hDk3O
                              )}
                            >
                              <Icon179Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___0PVa8
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1WtFf
                                )}
                              >
                                {
                                  "\u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0632\u0627\u0631\u06cc"
                                }
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__s93L3
                              )}
                            >
                              <Icon170Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__y63MI
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fyy9R
                                )}
                              >
                                {"\u06af\u0632\u0627\u0631\u0634"}
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__rtTu9
                              )}
                            >
                              <Icon181Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__glwb
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___309O9
                                )}
                              >
                                {
                                  "\u062d\u0645\u0627\u06cc\u062a \u0627\u0632 \u067e\u0633\u062a"
                                }
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nqtIu
                              )}
                            >
                              <Icon182Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___1YUks
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zc10M
                                )}
                              >
                                {
                                  "\u0645\u062f\u06cc\u0631\u06cc\u062a \u06a9\u0644\u0645\u0627\u062a \u0645\u062d\u062f\u0648\u062f \u0634\u062f\u0647"
                                }
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__n58C2
                              )}
                            >
                              <Icon183Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___3KB7O
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7KYcf
                                )}
                              >
                                {"\u062f\u0627\u0646\u0644\u0648\u062f"}
                              </div>
                            </Stack__>
                          </Stack__>
                        }
                        contentText={"Popover ttt"}
                        defaultOpen={false}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        mouseEnterDelay={0}
                        mouseLeaveDelay={0}
                        onOpenChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "popover2",
                            "open"
                          ]).apply(null, eventArgs);
                        }}
                        open={generateStateValueProp($state, [
                          "popover2",
                          "open"
                        ])}
                        placement={"bottomLeft"}
                        popoverScopeClassName={sty["popover2__popover"]}
                        title={null}
                        trigger={"click"}
                      >
                        <Icon146Icon
                          className={classNames(projectcss.all, sty.svg__jVevt)}
                          role={"img"}
                        />
                      </AntdPopover>
                    </Stack__>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fiSpi)}
                  >
                    <Icon177Icon
                      className={classNames(projectcss.all, sty.svg___2Yunl)}
                      role={"img"}
                    />
                  </div>
                </div>
              </div>
              <Post
                data-plasmic-name={"post"}
                data-plasmic-override={overrides.post}
                className={classNames("__wab_instance", sty.post)}
                data={(() => {
                  try {
                    return $state.getInfo.data.result.details.post.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                image2={(() => {
                  try {
                    return $state.getInfo.data.result.details.user.image;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                text={(() => {
                  try {
                    return $state.getInfo.data.result.details.post.text;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div
                className={classNames(projectcss.all, sty.freeBox___03Hh9)}
                style={(() => {
                  try {
                    return {
                      position: window.scrollY > 1 ? "fixed;" : ""
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <ReactionBar
                  data-plasmic-name={"reactionBar"}
                  data-plasmic-override={overrides.reactionBar}
                  bokmarkcountbar={(() => {
                    try {
                      return $state.getInfo.data.result.details.bookmarkCount;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.reactionBar)}
                  commet={(() => {
                    try {
                      return $state.getInfo.data.result.details.commentCount;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  likeCount={(() => {
                    try {
                      return $state.getInfo.data.result.details.likeCount;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  shair={(() => {
                    try {
                      return $state.getInfo.data.result.details.shareCount;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  viewcount={(() => {
                    try {
                      return $state.getInfo.data.result.details.viewCount;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <Like
                    data-plasmic-name={"like2"}
                    data-plasmic-override={overrides.like2}
                    className={classNames("__wab_instance", sty.like2)}
                    islike={generateStateValueProp($state, ["like2", "islike"])}
                    likeCountForBar={(() => {
                      try {
                        return $state.getInfo.data.result.details.likeCount;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onIslikeChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "like2",
                        "islike"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__j8Fxf)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  var comment =
                                    document.getElementById("focus_comment");
                                  return comment.firstElementChild.focus();
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                  >
                    <Icon150Icon
                      className={classNames(projectcss.all, sty.svg__aGDjN)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qeuue
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.getInfo.data.result.details
                              .commentCount;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "432";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__o60Q)}
                  >
                    <Icon149Icon
                      className={classNames(projectcss.all, sty.svg___5NYq0)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mUyto
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.getInfo.data.result.details
                              .shareCount;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "32";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <Save
                    data-plasmic-name={"save"}
                    data-plasmic-override={overrides.save}
                    bokmarkcount={(() => {
                      try {
                        return $state.getInfo.data.result.details.bookmarkCount;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    className={classNames("__wab_instance", sty.save)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__iRoM)}
                  >
                    <Icon147Icon
                      className={classNames(projectcss.all, sty.svg__qcFwa)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eiBcm
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.getInfo.data.result.details.viewCount;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "143";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </ReactionBar>
              </div>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___6AbeA)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xagh6)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updatePopoverOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["popover", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePopoverOpen"] != null &&
                    typeof $steps["updatePopoverOpen"] === "object" &&
                    typeof $steps["updatePopoverOpen"].then === "function"
                  ) {
                    $steps["updatePopoverOpen"] = await $steps[
                      "updatePopoverOpen"
                    ];
                  }
                }}
              >
                <Icon184Icon
                  className={classNames(projectcss.all, sty.svg__dDsbb)}
                  role={"img"}
                />

                <AntdPopover
                  data-plasmic-name={"popover"}
                  data-plasmic-override={overrides.popover}
                  arrow={true}
                  className={classNames("__wab_instance", sty.popover)}
                  content={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hxWiz)}
                    >
                      <ButtonSocial
                        data-plasmic-name={"buttonNewest"}
                        data-plasmic-override={overrides.buttonNewest}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonNewest
                        )}
                        type={
                          "\u062c\u062f\u06cc\u062f \u062a\u0631\u06cc\u0646 \u0647\u0627"
                        }
                      />

                      <ButtonSocial
                        data-plasmic-name={"mostReply"}
                        data-plasmic-override={overrides.mostReply}
                        className={classNames("__wab_instance", sty.mostReply)}
                        type={
                          "\u0628\u06cc\u0634\u062a\u0631\u06cc\u0646 \u0631\u06cc\u067e\u0644\u0627\u06cc"
                        }
                      />

                      <ButtonSocial
                        data-plasmic-name={"mostLiked"}
                        data-plasmic-override={overrides.mostLiked}
                        className={classNames("__wab_instance", sty.mostLiked)}
                        type={
                          "\u0628\u06cc\u0634\u062a\u0631\u06cc\u0646 \u0644\u0627\u06cc\u06a9"
                        }
                      />
                    </div>
                  }
                  contentText={"Popover contents"}
                  defaultOpen={false}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  mouseEnterDelay={0}
                  mouseLeaveDelay={0}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "popover",
                      "open"
                    ]).apply(null, eventArgs);
                  }}
                  open={generateStateValueProp($state, ["popover", "open"])}
                  placement={"bottom"}
                  popoverScopeClassName={sty["popover__popover"]}
                  title={null}
                  trigger={"click"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ft6Ek
                    )}
                  >
                    {
                      "\u0645\u0631\u062a\u0628 \u0633\u0627\u0632\u06cc \u0628\u0631 \u0627\u0633\u0627\u0633 :"
                    }
                  </div>
                </AntdPopover>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sB24Y)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.getInfo.data.result.comments;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.comment),
                    commentData: generateStateValueProp($state, [
                      "comment",
                      __plasmic_idx_0,
                      "commentData"
                    ]),
                    commentId: (() => {
                      try {
                        return currentItem.comment.id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    key: currentIndex,
                    mainCommentLikeCount: (() => {
                      try {
                        return currentItem.likeCount;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    mainImag: (() => {
                      try {
                        return currentItem.user.image;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    mainName: (() => {
                      try {
                        return currentItem.user.name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    mainText: (() => {
                      try {
                        return currentItem.comment.text;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    mainUsername: (() => {
                      try {
                        return currentItem.user.username;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    onCommentDataChange2: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "comment",
                        __plasmic_idx_0,
                        "commentData"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    replyCount: (() => {
                      try {
                        return currentItem.replyCount;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    tokennnn: (() => {
                      try {
                        return $state.token;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    whenHaveNoReply: (() => {
                      try {
                        return (() => {
                          if (currentItem.replyCount == 0)
                            return ($state.whenhavenoreply = true);
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })(),
                    whenHaveReply: (() => {
                      try {
                        return (() => {
                          if (currentItem.replyCount !== 0)
                            return ($state.whenhavereply = true);
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  };

                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "comment[].commentData",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {};
                              }
                              throw e;
                            }
                          })()
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <Comment
                      data-plasmic-name={"comment"}
                      data-plasmic-override={overrides.comment}
                      {...child$Props}
                    />
                  );
                })();
              })}
              <section
                className={classNames(projectcss.all, sty.section__l5Nnd)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__dnSli)}>
                  <Icon175Icon
                    className={classNames(projectcss.all, sty.svg__vNfKk)}
                    role={"img"}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox___8LXcp)}
                    id={"focus_comment"}
                  >
                    {(() => {
                      const child$Props = {
                        autoSize: true,
                        className: classNames("__wab_instance", sty.textArea),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["textArea", "value"],
                            AntdTextArea_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder:
                          "\u06a9\u0627\u0645\u0646\u062a \u0631\u0648 \u0628\u0646\u0648\u06cc\u0633",
                        value: generateStateValueProp($state, [
                          "textArea",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "textArea.value"
                          }
                        ],
                        [],
                        AntdTextArea_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdTextArea
                          data-plasmic-name={"textArea"}
                          data-plasmic-override={overrides.textArea}
                          {...child$Props}
                        />
                      );
                    })()}
                    <Icon176Icon
                      className={classNames(projectcss.all, sty.svg__o8F2W)}
                      role={"img"}
                    />
                  </div>
                </div>
              </section>
            </Stack__>
          </div>
          <ApiRequest
            data-plasmic-name={"getInfo"}
            data-plasmic-override={overrides.getInfo}
            body={(() => {
              try {
                return {
                  postId: "9da0eb68-5a19-4c18-bb15-47b3daa43bf2",

                  commentId: "string",
                  orderBy: "newest",

                  authorization: $state.token
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {
                    postId: "798941",
                    commentId: "string",
                    orderBy: "newest",
                    authorization: "$state.token"
                  };
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.getInfo)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zgkMo
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kaQmx
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"PUT"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getInfo", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getInfo", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getInfo", "data"]).apply(
                null,
                eventArgs
              );
            }}
            url={"https://n8n.staas.ir/webhook/rest/social"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLiom",
    "uploudeTime",
    "popover2",
    "post",
    "reactionBar",
    "like2",
    "save",
    "popover",
    "buttonNewest",
    "mostReply",
    "mostLiked",
    "comment",
    "textArea",
    "getInfo"
  ],
  headerLiom: ["headerLiom"],
  uploudeTime: ["uploudeTime"],
  popover2: ["popover2"],
  post: ["post"],
  reactionBar: ["reactionBar", "like2", "save"],
  like2: ["like2"],
  save: ["save"],
  popover: ["popover", "buttonNewest", "mostReply", "mostLiked"],
  buttonNewest: ["buttonNewest"],
  mostReply: ["mostReply"],
  mostLiked: ["mostLiked"],
  comment: ["comment"],
  textArea: ["textArea"],
  getInfo: ["getInfo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLiom: typeof HeaderLiom;
  uploudeTime: typeof UploudeTime;
  popover2: typeof AntdPopover;
  post: typeof Post;
  reactionBar: typeof ReactionBar;
  like2: typeof Like;
  save: typeof Save;
  popover: typeof AntdPopover;
  buttonNewest: typeof ButtonSocial;
  mostReply: typeof ButtonSocial;
  mostLiked: typeof ButtonSocial;
  comment: typeof Comment;
  textArea: typeof AntdTextArea;
  getInfo: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSocialPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSocialPage__VariantsArgs;
    args?: PlasmicSocialPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSocialPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSocialPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSocialPage__ArgProps,
          internalVariantPropNames: PlasmicSocialPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSocialPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocialPage";
  } else {
    func.displayName = `PlasmicSocialPage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSocialPage = Object.assign(
  // Top-level PlasmicSocialPage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    headerLiom: makeNodeComponent("headerLiom"),
    uploudeTime: makeNodeComponent("uploudeTime"),
    popover2: makeNodeComponent("popover2"),
    post: makeNodeComponent("post"),
    reactionBar: makeNodeComponent("reactionBar"),
    like2: makeNodeComponent("like2"),
    save: makeNodeComponent("save"),
    popover: makeNodeComponent("popover"),
    buttonNewest: makeNodeComponent("buttonNewest"),
    mostReply: makeNodeComponent("mostReply"),
    mostLiked: makeNodeComponent("mostLiked"),
    comment: makeNodeComponent("comment"),
    textArea: makeNodeComponent("textArea"),
    getInfo: makeNodeComponent("getInfo"),

    // Metadata about props expected for PlasmicSocialPage
    internalVariantProps: PlasmicSocialPage__VariantProps,
    internalArgProps: PlasmicSocialPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSocialPage;
/* prettier-ignore-end */
