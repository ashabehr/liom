/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: DESzdq_iEiZG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Dialog } from "@plasmicpkgs/radix-ui";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { DialogContent } from "@plasmicpkgs/radix-ui";
import { DialogTitle } from "@plasmicpkgs/radix-ui";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSnackbar.module.css"; // plasmic-import: DESzdq_iEiZG/css

import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: Wm-tjDMQJVfn/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: DnjmD0szshuz/icon
import Icon341Icon from "./icons/PlasmicIcon__Icon341"; // plasmic-import: YAlSZawb_KzK/icon
import Icon342Icon from "./icons/PlasmicIcon__Icon342"; // plasmic-import: tY1SQ_92U0l-/icon
import Icon343Icon from "./icons/PlasmicIcon__Icon343"; // plasmic-import: PUKuDNK8e5He/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon228Icon from "./icons/PlasmicIcon__Icon228"; // plasmic-import: FJ1pKTHtXYhO/icon

createPlasmicElementProxy;

export type PlasmicSnackbar__VariantMembers = {
  type: "success" | "warning" | "info";
};
export type PlasmicSnackbar__VariantsArgs = {
  type?: SingleChoiceArg<"success" | "warning" | "info">;
};
type VariantPropType = keyof PlasmicSnackbar__VariantsArgs;
export const PlasmicSnackbar__VariantProps = new Array<VariantPropType>("type");

export type PlasmicSnackbar__ArgsType = {
  opendialog?: boolean;
  onOpendialogChange?: (val: string) => void;
  data?: any;
  onDataChange?: (val: string) => void;
  index?: any;
  onIndexChange?: (val: string) => void;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSnackbar__ArgsType;
export const PlasmicSnackbar__ArgProps = new Array<ArgPropType>(
  "opendialog",
  "onOpendialogChange",
  "data",
  "onDataChange",
  "index",
  "onIndexChange",
  "slot",
  "slot2",
  "children"
);

export type PlasmicSnackbar__OverridesType = {
  dialog3?: Flex__<typeof Dialog>;
  button3?: Flex__<typeof Button>;
  dialogContent?: Flex__<typeof DialogContent>;
  dialogTitle?: Flex__<typeof DialogTitle>;
  text?: Flex__<"div">;
};

export interface DefaultSnackbarProps {
  opendialog?: boolean;
  onOpendialogChange?: (val: string) => void;
  data?: any;
  onDataChange?: (val: string) => void;
  index?: any;
  onIndexChange?: (val: string) => void;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  children?: React.ReactNode;
  type?: SingleChoiceArg<"success" | "warning" | "info">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSnackbar__RenderFunc(props: {
  variants: PlasmicSnackbar__VariantsArgs;
  args: PlasmicSnackbar__ArgsType;
  overrides: PlasmicSnackbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.opendialog;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "opendialog",
        type: "writable",
        variableType: "boolean",

        valueProp: "opendialog",
        onChangeProp: "onOpendialogChange"
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button3.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      },
      {
        path: "data",
        type: "writable",
        variableType: "object",

        valueProp: "data",
        onChangeProp: "onDataChange"
      },
      {
        path: "index",
        type: "writable",
        variableType: "array",

        valueProp: "index",
        onChangeProp: "onIndexChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <Dialog
      data-plasmic-name={"dialog3"}
      data-plasmic-override={overrides.dialog3}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.dialog3,
        {
          [sty.dialog3type_info]: hasVariant($state, "type", "info"),
          [sty.dialog3type_success]: hasVariant($state, "type", "success"),
          [sty.dialog3type_warning]: hasVariant($state, "type", "warning")
        }
      )}
      defaultOpen={(() => {
        try {
          return $state.opendialog;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["dialog3", "open"]).apply(
          null,
          eventArgs
        );

        (async open => {
          const $steps = {};

          $steps["updateOpendialog"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["opendialog"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateOpendialog"] != null &&
            typeof $steps["updateOpendialog"] === "object" &&
            typeof $steps["updateOpendialog"].then === "function"
          ) {
            $steps["updateOpendialog"] = await $steps["updateOpendialog"];
          }
        }).apply(null, eventArgs);
      }}
      open={generateStateValueProp($state, ["dialog3", "open"])}
      overlayClassName={classNames({
        [sty["pcls_mOTvygJ1qlEc"]]: hasVariant(
          globalVariants,
          "screen",
          "mobile"
        ),
        [sty["pcls_p4m4vNRh4fq_"]]: true
      })}
      themeResetClass={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames
      )}
      triggerSlot={
        <Button
          data-plasmic-name={"button3"}
          data-plasmic-override={overrides.button3}
          className={classNames("__wab_instance", sty.button3)}
          color={generateStateValueProp($state, ["button3", "color"])}
          endIcon={
            <ChevronLeftIcon
              className={classNames(projectcss.all, sty.svg__fbR9)}
              role={"img"}
            />
          }
          load={generateStateValueProp($state, ["button3", "load"])}
          loading={generateStateValueProp($state, ["button3", "loading"])}
          onColorChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button3", "color"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLoadChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button3", "load"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLoadingChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button3", "loading"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          startIcon={
            <ChevronRightIcon
              className={classNames(projectcss.all, sty.svg__d2RD4)}
              role={"img"}
            />
          }
        />
      }
    >
      <DialogContent
        data-plasmic-name={"dialogContent"}
        data-plasmic-override={overrides.dialogContent}
        className={classNames("__wab_instance", sty.dialogContent)}
        enterAnimations={
          hasVariant(globalVariants, "screen", "mobile")
            ? ["slide-in-from-bottom"]
            : ["zoom-enter", "fade-in"]
        }
        enterDuration={0.5}
        exitAnimations={
          hasVariant(globalVariants, "screen", "mobile")
            ? ["slide-out-to-bottom"]
            : ["zoom-exit", "fade-out"]
        }
        exitDuration={0.5}
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames
        )}
      >
        <DialogTitle
          data-plasmic-name={"dialogTitle"}
          data-plasmic-override={overrides.dialogTitle}
          className={classNames("__wab_instance", sty.dialogTitle)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Sheet title"}
          </div>
        </DialogTitle>
        <div
          className={classNames(projectcss.all, sty.freeBox__l4NEg, {
            [sty.freeBoxtype_success__l4NEg4CmAq]: hasVariant(
              $state,
              "type",
              "success"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox___6Pj1Z, {
              [sty.freeBoxtype_success___6Pj1Z4CmAq]: hasVariant(
                $state,
                "type",
                "success"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__vzlyN,
                hasVariant($state, "type", "info")
                  ? "fabi"
                  : hasVariant($state, "type", "warning")
                    ? "fabw"
                    : hasVariant($state, "type", "success")
                      ? "fab "
                      : undefined,
                {
                  [sty.freeBoxtype_info__vzlyNjCZd]: hasVariant(
                    $state,
                    "type",
                    "info"
                  ),
                  [sty.freeBoxtype_success__vzlyN4CmAq]: hasVariant(
                    $state,
                    "type",
                    "success"
                  ),
                  [sty.freeBoxtype_warning__vzlyNHrXfZ]: hasVariant(
                    $state,
                    "type",
                    "warning"
                  )
                }
              )}
            >
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant($state, "type", "info")
                    ? Icon343Icon
                    : hasVariant($state, "type", "warning")
                      ? Icon342Icon
                      : Icon341Icon
                }
                className={classNames(projectcss.all, sty.svg___73Syu, {
                  [sty.svgtype_info___73SyujCZd]: hasVariant(
                    $state,
                    "type",
                    "info"
                  ),
                  [sty.svgtype_success___73Syu4CmAq]: hasVariant(
                    $state,
                    "type",
                    "success"
                  ),
                  [sty.svgtype_warning___73SyuHrXfZ]: hasVariant(
                    $state,
                    "type",
                    "warning"
                  )
                })}
                role={"img"}
              />
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__v8N0R, {
              [sty.freeBoxtype_warning__v8N0RHrXfZ]: hasVariant(
                $state,
                "type",
                "warning"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.slot,
              className: classNames(sty.slotTargetSlot, {
                [sty.slotTargetSlottype_warning]: hasVariant(
                  $state,
                  "type",
                  "warning"
                )
              })
            })}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__usgrk)}>
            {renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.slot2,
              className: classNames(sty.slotTargetSlot2)
            })}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__kjigm)}>
            {renderPlasmicSlot({
              defaultContents: (
                <Button
                  className={classNames("__wab_instance", sty.button__sutO)}
                />
              ),

              value: args.children
            })}
          </div>
        </div>
        <Icon228Icon
          className={classNames(projectcss.all, sty.svg__rD3D)}
          onClick={async event => {
            const $steps = {};

            $steps["updateOpendialog"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["opendialog"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateOpendialog"] != null &&
              typeof $steps["updateOpendialog"] === "object" &&
              typeof $steps["updateOpendialog"].then === "function"
            ) {
              $steps["updateOpendialog"] = await $steps["updateOpendialog"];
            }
          }}
          role={"img"}
        />
      </DialogContent>
    </Dialog>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  dialog3: ["dialog3", "button3", "dialogContent", "dialogTitle", "text"],
  button3: ["button3"],
  dialogContent: ["dialogContent", "dialogTitle", "text"],
  dialogTitle: ["dialogTitle", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  dialog3: typeof Dialog;
  button3: typeof Button;
  dialogContent: typeof DialogContent;
  dialogTitle: typeof DialogTitle;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSnackbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSnackbar__VariantsArgs;
    args?: PlasmicSnackbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicSnackbar__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicSnackbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSnackbar__ArgProps,
          internalVariantPropNames: PlasmicSnackbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSnackbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "dialog3") {
    func.displayName = "PlasmicSnackbar";
  } else {
    func.displayName = `PlasmicSnackbar.${nodeName}`;
  }
  return func;
}

export const PlasmicSnackbar = Object.assign(
  // Top-level PlasmicSnackbar renders the root element
  makeNodeComponent("dialog3"),
  {
    // Helper components rendering sub-elements
    button3: makeNodeComponent("button3"),
    dialogContent: makeNodeComponent("dialogContent"),
    dialogTitle: makeNodeComponent("dialogTitle"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicSnackbar
    internalVariantProps: PlasmicSnackbar__VariantProps,
    internalArgProps: PlasmicSnackbar__ArgProps
  }
);

export default PlasmicSnackbar;
/* prettier-ignore-end */
