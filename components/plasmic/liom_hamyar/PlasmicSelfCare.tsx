// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: sTeH_IDX5T87

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import MainHeader from "../../MainHeader"; // plasmic-import: 1YQK_N8j3twT/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSelfCare.module.css"; // plasmic-import: sTeH_IDX5T87/css

import Icon185Icon from "./icons/PlasmicIcon__Icon185"; // plasmic-import: 3QmHdQOUm1zK/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: liLrwe8fcuIp/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: DnjmD0szshuz/icon

createPlasmicElementProxy;

export type PlasmicSelfCare__VariantMembers = {};
export type PlasmicSelfCare__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelfCare__VariantsArgs;
export const PlasmicSelfCare__VariantProps = new Array<VariantPropType>();

export type PlasmicSelfCare__ArgsType = {};
type ArgPropType = keyof PlasmicSelfCare__ArgsType;
export const PlasmicSelfCare__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfCare__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  mainHeader?: Flex__<typeof MainHeader>;
  selfCare?: Flex__<typeof ApiRequest>;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultSelfCareProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfCare__RenderFunc(props: {
  variants: PlasmicSelfCare__VariantsArgs;
  args: PlasmicSelfCare__ArgsType;
  overrides: PlasmicSelfCare__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.token;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "relation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "hamyar"
      },
      {
        path: "masseg",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "errror",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "selfCare.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selfCare.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selfCare.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popoverOpen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [false, false]
      },
      {
        path: "removeItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loadingBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "v",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "mainHeader.dopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "sand"
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "sand"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <MainHeader
              data-plasmic-name={"mainHeader"}
              data-plasmic-override={overrides.mainHeader}
              className={classNames("__wab_instance", sty.mainHeader)}
              dopen={generateStateValueProp($state, ["mainHeader", "dopen"])}
              onDopenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "mainHeader",
                  "dopen"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__pPUj)}
              >
                <Icon185Icon
                  className={classNames(projectcss.all, sty.svg__ijX4Q)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDrawerOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["drawer", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDrawerOpen"] != null &&
                      typeof $steps["updateDrawerOpen"] === "object" &&
                      typeof $steps["updateDrawerOpen"].then === "function"
                    ) {
                      $steps["updateDrawerOpen"] = await $steps[
                        "updateDrawerOpen"
                      ];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8J3Qe
                  )}
                >
                  {
                    "\u0645\u0631\u0627\u0642\u0628\u062a \u0627\u0632 \u062e\u0648\u062f"
                  }
                </div>
              </Stack__>
            </MainHeader>
          </section>
          <ApiRequest
            data-plasmic-name={"selfCare"}
            data-plasmic-override={overrides.selfCare}
            className={classNames("__wab_instance", sty.selfCare)}
            errorDisplay={null}
            loadingDisplay={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tSqzz)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___8H54N)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__ubwSg,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___50O2N,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__hhPew,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__gDdQc,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___0HuVo,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__zIOet,
                      "shimmer"
                    )}
                  />
                </Stack__>
              </Stack__>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["selfCare", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["selfCare", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["selfCare", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={(() => {
              try {
                return {
                  authorization: $state.token,
                  type: $state.type,
                  a: $state.v
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/rest/user/hamyar/add"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___3HIjn)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__f7OTu)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hUnhv)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dkw2Y
                    )}
                  >
                    {"\u0633\u0644\u0627\u0645\u062a \u0631\u062d\u0645"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pmboS
                    )}
                  >
                    {
                      "-\u0646\u0627\u0645\u0646\u0638\u0645\u06cc \u067e\u0631\u06cc\u0648\u062f\n-\u062a\u0646\u0628\u0644\u06cc \u062a\u062e\u0645\u062f\u0627\u0646"
                    }
                  </div>
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={generateStateValueProp($state, ["button", "color"])}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    size={"compact"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6Mf2
                      )}
                    >
                      {"\u0648\u0631\u0648\u062f"}
                    </div>
                  </Button>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tcGZf)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lttFc
                    )}
                  >
                    {"\u0633\u0644\u0627\u0645\u062a \u0631\u062d\u0645"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aUKeo
                    )}
                  >
                    {
                      "-\u0646\u0627\u0645\u0646\u0638\u0645\u06cc \u067e\u0631\u06cc\u0648\u062f\n-\u062a\u0646\u0628\u0644\u06cc \u062a\u062e\u0645\u062f\u0627\u0646"
                    }
                  </div>
                  <Button
                    data-plasmic-name={"button2"}
                    data-plasmic-override={overrides.button2}
                    className={classNames("__wab_instance", sty.button2)}
                    color={generateStateValueProp($state, ["button2", "color"])}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button2", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    size={"compact"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vkSXm
                      )}
                    >
                      {"\u0648\u0631\u0648\u062f"}
                    </div>
                  </Button>
                </Stack__>
              </Stack__>
              <Embed
                data-plasmic-name={"embedHtml"}
                data-plasmic-override={overrides.embedHtml}
                className={classNames("__wab_instance", sty.embedHtml)}
                code={"<hr></hr>"}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kRZv)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__weaHv)}>
                  <Icon6Icon
                    className={classNames(projectcss.all, sty.svg__gmHaK)}
                    role={"img"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yVvg)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nGwP
                    )}
                  >
                    {"Enter some text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vhPmx
                    )}
                  >
                    {"Enter some text"}
                  </div>
                </Stack__>
                <ChevronLeftIcon
                  className={classNames(projectcss.all, sty.svg___1Z4Vp)}
                  role={"img"}
                />
              </Stack__>
            </Stack__>
          </ApiRequest>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "mainHeader",
    "selfCare",
    "button",
    "button2",
    "embedHtml"
  ],
  section: ["section", "mainHeader"],
  mainHeader: ["mainHeader"],
  selfCare: ["selfCare", "button", "button2", "embedHtml"],
  button: ["button"],
  button2: ["button2"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  mainHeader: typeof MainHeader;
  selfCare: typeof ApiRequest;
  button: typeof Button;
  button2: typeof Button;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfCare__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfCare__VariantsArgs;
    args?: PlasmicSelfCare__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfCare__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSelfCare__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfCare__ArgProps,
          internalVariantPropNames: PlasmicSelfCare__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfCare__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfCare";
  } else {
    func.displayName = `PlasmicSelfCare.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSelfCare = Object.assign(
  // Top-level PlasmicSelfCare renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    mainHeader: makeNodeComponent("mainHeader"),
    selfCare: makeNodeComponent("selfCare"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicSelfCare
    internalVariantProps: PlasmicSelfCare__VariantProps,
    internalArgProps: PlasmicSelfCare__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSelfCare;
/* prettier-ignore-end */
